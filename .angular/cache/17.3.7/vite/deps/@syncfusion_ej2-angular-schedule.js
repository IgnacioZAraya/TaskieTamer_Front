import {
  Dialog,
  FormValidator,
  Input,
  NumericTextBox,
  Popup,
  TextBox,
  Tooltip,
  calculatePosition,
  createSpinner,
  fit,
  getScrollableParent,
  getZindexPartial,
  hideSpinner,
  isCollide,
  showSpinner
} from "./chunk-XDCGFBEL.js";
import {
  ArrayBase,
  Button,
  CheckBox,
  ComplexBase,
  ComponentBase,
  ComponentMixins,
  RadioButton,
  Template,
  createCheckBox,
  rippleMouseHandler,
  setValue as setValue2
} from "./chunk-FSZDQEVW.js";
import {
  Animation,
  Base,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component as Component2,
  Draggable,
  Droppable,
  Event,
  EventHandler,
  Fetch,
  HijriParser,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  animationMode,
  append,
  attributes,
  classList,
  cldrData,
  closest,
  compareElementParent,
  compile,
  createElement,
  debounce,
  detach,
  extend,
  formatUnit,
  getComponent,
  getDefaultDateObject,
  getElement,
  getInstance,
  getRandomId,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isBlazor,
  isNullOrUndefined,
  isRippleEnabled,
  isUndefined,
  isVisible,
  matches,
  merge,
  prepend,
  print,
  remove,
  removeClass,
  rippleEffect,
  select,
  selectAll,
  setStyleAttribute,
  setValue,
  throwError
} from "./chunk-EATDXRY4.js";
import {
  CommonModule
} from "./chunk-VCFGKTIQ.js";
import {
  ChangeDetectionStrategy,
  Component,
  ContentChild,
  ContentChildren,
  Directive,
  ElementRef,
  Injector,
  NgModule,
  Renderer2,
  ViewContainerRef,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵloadQuery,
  ɵɵqueryRefresh
} from "./chunk-2TLIOTXN.js";
import {
  __decorate
} from "./chunk-JKR55PDT.js";
import "./chunk-J4B6MK7R.js";

// node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT = "e-hscroll";
var CLS_RTL = "e-rtl";
var CLS_DISABLE = "e-overlay";
var CLS_HSCROLLBAR = "e-hscroll-bar";
var CLS_HSCROLLCON = "e-hscroll-content";
var CLS_NAVARROW = "e-nav-arrow";
var CLS_NAVRIGHTARROW = "e-nav-right-arrow";
var CLS_NAVLEFTARROW = "e-nav-left-arrow";
var CLS_HSCROLLNAV = "e-scroll-nav";
var CLS_HSCROLLNAVRIGHT = "e-scroll-right-nav";
var CLS_HSCROLLNAVLEFT = "e-scroll-left-nav";
var CLS_DEVICE = "e-scroll-device";
var CLS_OVERLAY = "e-scroll-overlay";
var CLS_RIGHTOVERLAY = "e-scroll-right-overlay";
var CLS_LEFTOVERLAY = "e-scroll-left-overlay";
var OVERLAY_MAXWID = 40;
var HScroll = (
  /** @class */
  function(_super) {
    __extends(HScroll2, _super);
    function HScroll2(options, element) {
      return _super.call(this, options, element) || this;
    }
    HScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var element = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (element.id === "") {
        element.id = getUniqueID("hscroll");
        this.uniqueId = true;
      }
      element.style.display = "block";
      if (this.enableRtl) {
        element.classList.add(CLS_RTL);
      }
    };
    HScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }
      this.setScrollState();
    };
    HScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    HScroll2.prototype.initialize = function() {
      var scrollEle = this.createElement("div", { className: CLS_HSCROLLCON });
      var scrollDiv = this.createElement("div", { className: CLS_HSCROLLBAR });
      scrollDiv.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }
      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = "hidden";
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };
    HScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    HScroll2.prototype.getModuleName = function() {
      return "hScroll";
    };
    HScroll2.prototype.destroy = function() {
      var ele = this.element;
      ele.style.display = "";
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      ele.classList.remove(CLS_RTL);
      var nav = selectAll(".e-" + ele.id + "_nav." + CLS_HSCROLLNAV, ele);
      var overlay = selectAll("." + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function(ele2) {
        detach(ele2);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (nav.length > 0) {
        detach(nav[0]);
        if (!isNullOrUndefined(nav[1])) {
          detach(nav[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    HScroll2.prototype.disable = function(value) {
      var navEles = selectAll(".e-scroll-nav:not(." + CLS_DISABLE + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE);
      } else {
        this.element.classList.remove(CLS_DISABLE);
      }
      [].slice.call(navEles).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    HScroll2.prototype.createOverlay = function(element) {
      var id = element.id.concat("_nav");
      var rightOverlayEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_RIGHTOVERLAY });
      var clsRight = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement("div", { id: id.concat("_right"), className: clsRight });
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_LEFTOVERLAY });
      if (this.ieCheck) {
        rightEle.classList.add("e-ie-align");
      }
      element.appendChild(rightOverlayEle);
      element.appendChild(rightEle);
      element.insertBefore(leftEle, element.firstChild);
      this.eventBinding([rightEle]);
    };
    HScroll2.prototype.createNavIcon = function(element) {
      var id = element.id.concat("_nav");
      var clsRight = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightAttributes = { "role": "button", "id": id.concat("_right"), "aria-label": "Scroll right" };
      var nav = this.createElement("div", { className: clsRight, attrs: rightAttributes });
      nav.setAttribute("aria-disabled", "false");
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      var clsLeft = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVLEFT);
      var leftAttributes = { "role": "button", "id": id.concat("_left"), "aria-label": "Scroll left" };
      var navEle = this.createElement("div", { className: clsLeft + " " + CLS_DISABLE, attrs: leftAttributes });
      navEle.setAttribute("aria-disabled", "true");
      var navLeftItem = this.createElement("div", { className: CLS_NAVLEFTARROW + " " + CLS_NAVARROW + " e-icons" });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element.appendChild(nav);
      element.insertBefore(navEle, element.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navEle.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navEle]);
    };
    HScroll2.prototype.onKeyPress = function(e) {
      var _this = this;
      if (e.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, e.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    HScroll2.prototype.onKeyUp = function(e) {
      if (e.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    HScroll2.prototype.eventBinding = function(ele) {
      var _this = this;
      [].slice.call(ele).forEach(function(el) {
        new Touch(el, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        el.addEventListener("keydown", _this.onKeyPress.bind(_this));
        el.addEventListener("keyup", _this.onKeyUp.bind(_this));
        el.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        el.addEventListener("touchend", _this.repeatScroll.bind(_this));
        el.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(el, "click", _this.clickEventHandler, _this);
      });
    };
    HScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    HScroll2.prototype.tabHoldHandler = function(e) {
      var _this = this;
      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDis, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    HScroll2.prototype.contains = function(ele, className) {
      return ele.classList.contains(className);
    };
    HScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var rootEle = this.element;
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_HSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW).classList;
      }
      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }
      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList2.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      } else {
        if (classList2.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      }
    };
    HScroll2.prototype.clickEventHandler = function(e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };
    HScroll2.prototype.swipeHandler = function(e) {
      var swipeEle = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Left") {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === "Right") {
            swipeEle.scrollLeft -= distance * step;
          }
          start -= 0.5;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
      if (this.enableRtl && this.scrollEle.scrollLeft > 0) {
        this.scrollEle.scrollLeft = 0;
      }
    };
    HScroll2.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY, this.element)).forEach(function(el) {
          scrollVal -= el.offsetWidth;
        });
      }
      var animate = function() {
        var scrollValue;
        var scrollStep;
        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }
        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);
          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.touchHandler = function(e) {
      var ele = this.scrollEle;
      var distance = e.distanceX;
      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }
      if (e.scrollDirection === "Left") {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === "Right") {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };
    HScroll2.prototype.arrowDisabling = function(addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW);
        if (isNullOrUndefined(addDisable)) {
          classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else if (addDisable && removeDisable) {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute("aria-disabled", "true");
        addDisable.removeAttribute("tabindex");
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute("aria-disabled", "false");
        removeDisable.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    HScroll2.prototype.scrollHandler = function(e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector("." + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector("." + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;
      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }
      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
        }
        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + "px";
        } else {
          leftOverlay.style.width = "40px";
        }
        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px";
        } else {
          rightOverlay.style.width = "40px";
        }
      }
      if (scrollLeft === 0) {
        this.arrowDisabling(navLeftEle, navRightEle);
      } else if (Math.ceil(width + scrollLeft + 0.1) >= target.scrollWidth) {
        this.arrowDisabling(navRightEle, navLeftEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_HSCROLLNAV + "." + CLS_DISABLE);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    HScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };
    __decorate2([
      Property(null)
    ], HScroll2.prototype, "scrollStep", void 0);
    HScroll2 = __decorate2([
      NotifyPropertyChanges
    ], HScroll2);
    return HScroll2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT2 = "e-vscroll";
var CLS_RTL2 = "e-rtl";
var CLS_DISABLE2 = "e-overlay";
var CLS_VSCROLLBAR = "e-vscroll-bar";
var CLS_VSCROLLCON = "e-vscroll-content";
var CLS_NAVARROW2 = "e-nav-arrow";
var CLS_NAVUPARROW = "e-nav-up-arrow";
var CLS_NAVDOWNARROW = "e-nav-down-arrow";
var CLS_VSCROLLNAV = "e-scroll-nav";
var CLS_VSCROLLNAVUP = "e-scroll-up-nav";
var CLS_VSCROLLNAVDOWN = "e-scroll-down-nav";
var CLS_DEVICE2 = "e-scroll-device";
var CLS_OVERLAY2 = "e-scroll-overlay";
var CLS_UPOVERLAY = "e-scroll-up-overlay";
var CLS_DOWNOVERLAY = "e-scroll-down-overlay";
var OVERLAY_MAXWID2 = 40;
var VScroll = (
  /** @class */
  function(_super) {
    __extends2(VScroll2, _super);
    function VScroll2(options, element) {
      return _super.call(this, options, element) || this;
    }
    VScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (ele.id === "") {
        ele.id = getUniqueID("vscroll");
        this.uniqueId = true;
      }
      ele.style.display = "block";
      if (this.enableRtl) {
        ele.classList.add(CLS_RTL2);
      }
    };
    VScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollEventHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE2);
        this.createOverlayElement(this.element);
      }
      this.setScrollState();
      EventHandler.add(this.element, "wheel", this.wheelEventHandler, this);
    };
    VScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    VScroll2.prototype.initialize = function() {
      var scrollCnt = createElement("div", { className: CLS_VSCROLLCON });
      var scrollBar = createElement("div", { className: CLS_VSCROLLBAR });
      scrollBar.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }
      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflow = "hidden";
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };
    VScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    VScroll2.prototype.getModuleName = function() {
      return "vScroll";
    };
    VScroll2.prototype.destroy = function() {
      var el = this.element;
      el.style.display = "";
      removeClass([this.element], [CLS_ROOT2, CLS_DEVICE2, CLS_RTL2]);
      var navs = selectAll(".e-" + el.id + "_nav." + CLS_VSCROLLNAV, el);
      var overlays = selectAll("." + CLS_OVERLAY2, el);
      [].slice.call(overlays).forEach(function(ele) {
        detach(ele);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (navs.length > 0) {
        detach(navs[0]);
        if (!isNullOrUndefined(navs[1])) {
          detach(navs[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollEventHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    VScroll2.prototype.disable = function(value) {
      var navEle = selectAll(".e-scroll-nav:not(." + CLS_DISABLE2 + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE2);
      } else {
        this.element.classList.remove(CLS_DISABLE2);
      }
      [].slice.call(navEle).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    VScroll2.prototype.createOverlayElement = function(element) {
      var id = element.id.concat("_nav");
      var downOverlayEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_DOWNOVERLAY });
      var clsDown = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var downEle = createElement("div", { id: id.concat("down"), className: clsDown });
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      downEle.appendChild(navItem);
      var upEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_UPOVERLAY });
      if (this.ieCheck) {
        downEle.classList.add("e-ie-align");
      }
      element.appendChild(downOverlayEle);
      element.appendChild(downEle);
      element.insertBefore(upEle, element.firstChild);
      this.eventBinding([downEle]);
    };
    VScroll2.prototype.createNavIcon = function(element) {
      var id = element.id.concat("_nav");
      var clsDown = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var nav = createElement("div", { id: id.concat("_down"), className: clsDown });
      nav.setAttribute("aria-disabled", "false");
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      var clsUp = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVUP);
      var navElement = createElement("div", { id: id.concat("_up"), className: clsUp + " " + CLS_DISABLE2 });
      navElement.setAttribute("aria-disabled", "true");
      var navUpItem = createElement("div", { className: CLS_NAVUPARROW + " " + CLS_NAVARROW2 + " e-icons" });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      element.appendChild(nav);
      element.insertBefore(navElement, element.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navElement.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navElement]);
    };
    VScroll2.prototype.onKeyPress = function(ev) {
      var _this = this;
      if (ev.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, ev.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    VScroll2.prototype.onKeyUp = function(ev) {
      if (ev.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    VScroll2.prototype.eventBinding = function(element) {
      var _this = this;
      [].slice.call(element).forEach(function(ele) {
        new Touch(ele, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        ele.addEventListener("keydown", _this.onKeyPress.bind(_this));
        ele.addEventListener("keyup", _this.onKeyUp.bind(_this));
        ele.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        ele.addEventListener("touchend", _this.repeatScroll.bind(_this));
        ele.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(ele, "click", _this.clickEventHandler, _this);
      });
    };
    VScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    VScroll2.prototype.tabHoldHandler = function(ev) {
      var _this = this;
      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDistance, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    VScroll2.prototype.contains = function(element, className) {
      return element.classList.contains(className);
    };
    VScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_VSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW2).classList;
      }
      if (classList2.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, "add", isContinuous);
      } else if (classList2.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, "", isContinuous);
      }
    };
    VScroll2.prototype.clickEventHandler = function(event2) {
      this.eleScrolling(this.scrollStep, event2.target, false);
    };
    VScroll2.prototype.wheelEventHandler = function(e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? "add" : "", false);
    };
    VScroll2.prototype.swipeHandler = function(e) {
      var swipeElement = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Up") {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === "Down") {
            swipeElement.scrollTop -= distance * step;
          }
          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };
    VScroll2.prototype.frameScrollRequest = function(scrollValue, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY2, this.element)).forEach(function(el) {
          scrollValue -= el.offsetHeight;
        });
      }
      var animate = function() {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);
          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.touchHandler = function(e) {
      var el = this.scrollEle;
      var distance = e.distanceY;
      if (e.scrollDirection === "Up") {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === "Down") {
        el.scrollTop = el.scrollTop - distance;
      }
    };
    VScroll2.prototype.arrowDisabling = function(addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW2);
        if (isNullOrUndefined(addDisableCls)) {
          classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE2);
        addDisableCls.setAttribute("aria-disabled", "true");
        addDisableCls.removeAttribute("tabindex");
        removeDisableCls.classList.remove(CLS_DISABLE2);
        removeDisableCls.setAttribute("aria-disabled", "false");
        removeDisableCls.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    VScroll2.prototype.scrollEventHandler = function(e) {
      var target = e.target;
      var height = target.offsetHeight;
      var navUpEle = this.element.querySelector("." + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector("." + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector("." + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector("." + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;
      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }
      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID2) {
          upOverlay.style.height = scrollTop + "px";
        } else {
          upOverlay.style.height = "40px";
        }
        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID2) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + "px";
        } else {
          downOverlay.style.height = "40px";
        }
      }
      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + 0.1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_VSCROLLNAV + "." + CLS_DISABLE2);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE2);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    VScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(CLS_RTL2);
            } else {
              this.element.classList.remove(CLS_RTL2);
            }
            break;
        }
      }
    };
    __decorate3([
      Property(null)
    ], VScroll2.prototype, "scrollStep", void 0);
    VScroll2 = __decorate3([
      NotifyPropertyChanges
    ], VScroll2);
    return VScroll2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js
function addScrolling(createElement2, container, content, scrollType, enableRtl, offset) {
  var containerOffset;
  var contentOffset;
  var parentElem = container.parentElement;
  if (scrollType === "vscroll") {
    containerOffset = offset || container.getBoundingClientRect().height;
    contentOffset = content.getBoundingClientRect().height;
  } else {
    containerOffset = container.getBoundingClientRect().width;
    contentOffset = content.getBoundingClientRect().width;
  }
  if (containerOffset < contentOffset) {
    return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
  } else if (parentElem) {
    var width = parentElem.getBoundingClientRect().width;
    if (width < containerOffset && scrollType === "hscroll") {
      contentOffset = width;
      container.style.maxWidth = width + "px";
      return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
    }
    return content;
  } else {
    return content;
  }
}
function createScrollbar(createElement2, container, content, scrollType, enableRtl, offset) {
  var scrollEle = createElement2("div", { className: "e-menu-" + scrollType });
  container.appendChild(scrollEle);
  scrollEle.appendChild(content);
  if (offset) {
    scrollEle.style.overflow = "hidden";
    scrollEle.style.height = offset + "px";
  } else {
    scrollEle.style.maxHeight = container.style.maxHeight;
    container.style.overflow = "hidden";
  }
  var scrollObj;
  if (scrollType === "vscroll") {
    scrollObj = new VScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetHeight / 2;
  } else {
    scrollObj = new HScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetWidth;
  }
  return scrollEle;
}
function destroyScroll(scrollObj, element, skipEle) {
  if (scrollObj) {
    var menu = select(".e-menu-parent", element);
    if (menu) {
      if (!skipEle || skipEle === menu) {
        scrollObj.destroy();
        element.parentElement.appendChild(menu);
        detach(element);
      }
    } else {
      scrollObj.destroy();
      detach(element);
    }
  }
}

// node_modules/@syncfusion/ej2-data/src/query.js
var Query = (
  /** @class */
  function() {
    function Query2(from) {
      this.subQuery = null;
      this.isChild = false;
      this.distincts = [];
      this.queries = [];
      this.key = "";
      this.fKey = "";
      if (typeof from === "string") {
        this.fromTable = from;
      } else if (from && from instanceof Array) {
        this.lookups = from;
      }
      this.expands = [];
      this.sortedColumns = [];
      this.groupedColumns = [];
      this.subQuery = null;
      this.isChild = false;
      this.params = [];
      this.lazyLoad = [];
      return this;
    }
    Query2.prototype.setKey = function(field) {
      this.key = field;
      return this;
    };
    Query2.prototype.using = function(dataManager) {
      this.dataManager = dataManager;
      return this;
    };
    Query2.prototype.execute = function(dataManager, done, fail, always) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeQuery(this, done, fail, always);
      }
      return DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.executeLocal = function(dataManager) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeLocal(this);
      }
      return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.clone = function() {
      var cloned = new Query2();
      cloned.queries = this.queries.slice(0);
      cloned.key = this.key;
      cloned.isChild = this.isChild;
      cloned.dataManager = this.dataManager;
      cloned.fromTable = this.fromTable;
      cloned.params = this.params.slice(0);
      cloned.expands = this.expands.slice(0);
      cloned.sortedColumns = this.sortedColumns.slice(0);
      cloned.groupedColumns = this.groupedColumns.slice(0);
      cloned.subQuerySelector = this.subQuerySelector;
      cloned.subQuery = this.subQuery;
      cloned.fKey = this.fKey;
      cloned.isCountRequired = this.isCountRequired;
      cloned.distincts = this.distincts.slice(0);
      cloned.lazyLoad = this.lazyLoad.slice(0);
      return cloned;
    };
    Query2.prototype.from = function(tableName) {
      this.fromTable = tableName;
      return this;
    };
    Query2.prototype.addParams = function(key, value) {
      if (typeof value === "function") {
        this.params.push({ key, fn: value });
      } else {
        this.params.push({ key, value });
      }
      return this;
    };
    Query2.prototype.distinct = function(fields) {
      if (typeof fields === "string") {
        this.distincts = [].slice.call([fields], 0);
      } else {
        this.distincts = fields.slice(0);
      }
      return this;
    };
    Query2.prototype.expand = function(tables) {
      if (typeof tables === "string") {
        this.expands = [].slice.call([tables], 0);
      } else {
        this.expands = tables.slice(0);
      }
      return this;
    };
    Query2.prototype.where = function(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {
      operator = operator ? operator.toLowerCase() : null;
      var predicate = null;
      if (typeof fieldName === "string") {
        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);
      } else if (fieldName instanceof Predicate) {
        predicate = fieldName;
      }
      this.queries.push({
        fn: "onWhere",
        e: predicate
      });
      return this;
    };
    Query2.prototype.search = function(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
      if (typeof fieldNames === "string") {
        fieldNames = [fieldNames];
      }
      if (!operator || operator === "none") {
        operator = "contains";
      }
      var comparer = DataUtil.fnOperators[operator];
      this.queries.push({
        fn: "onSearch",
        e: {
          fieldNames,
          operator,
          searchKey,
          ignoreCase,
          ignoreAccent,
          comparer
        }
      });
      return this;
    };
    Query2.prototype.sortBy = function(fieldName, comparer, isFromGroup) {
      return this.sortByForeignKey(fieldName, comparer, isFromGroup);
    };
    Query2.prototype.sortByForeignKey = function(fieldName, comparer, isFromGroup, direction) {
      var order = !isNullOrUndefined(direction) ? direction : "ascending";
      var sorts;
      var temp;
      if (typeof fieldName === "string" && DataUtil.endsWith(fieldName.toLowerCase(), " desc")) {
        fieldName = fieldName.replace(/ desc$/i, "");
        comparer = "descending";
      }
      if (!comparer || typeof comparer === "string") {
        order = comparer ? comparer.toLowerCase() : "ascending";
        comparer = DataUtil.fnSort(comparer);
      }
      if (isFromGroup) {
        sorts = Query2.filterQueries(this.queries, "onSortBy");
        for (var i = 0; i < sorts.length; i++) {
          temp = sorts[i].e.fieldName;
          if (typeof temp === "string") {
            if (temp === fieldName) {
              return this;
            }
          } else if (temp instanceof Array) {
            for (var j = 0; j < temp.length; j++) {
              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + " desc") {
                return this;
              }
            }
          }
        }
      }
      this.queries.push({
        fn: "onSortBy",
        e: {
          fieldName,
          comparer,
          direction: order
        }
      });
      return this;
    };
    Query2.prototype.sortByDesc = function(fieldName) {
      return this.sortBy(fieldName, "descending");
    };
    Query2.prototype.group = function(fieldName, fn, format) {
      this.sortBy(fieldName, null, true);
      this.queries.push({
        fn: "onGroup",
        e: {
          fieldName,
          comparer: fn ? fn : null,
          format: format ? format : null
        }
      });
      return this;
    };
    Query2.prototype.page = function(pageIndex, pageSize) {
      this.queries.push({
        fn: "onPage",
        e: {
          pageIndex,
          pageSize
        }
      });
      return this;
    };
    Query2.prototype.range = function(start, end) {
      this.queries.push({
        fn: "onRange",
        e: {
          start,
          end
        }
      });
      return this;
    };
    Query2.prototype.take = function(nos) {
      this.queries.push({
        fn: "onTake",
        e: {
          nos
        }
      });
      return this;
    };
    Query2.prototype.skip = function(nos) {
      this.queries.push({
        fn: "onSkip",
        e: { nos }
      });
      return this;
    };
    Query2.prototype.select = function(fieldNames) {
      if (typeof fieldNames === "string") {
        fieldNames = [].slice.call([fieldNames], 0);
      }
      this.queries.push({
        fn: "onSelect",
        e: { fieldNames }
      });
      return this;
    };
    Query2.prototype.hierarchy = function(query, selectorFn) {
      this.subQuerySelector = selectorFn;
      this.subQuery = query;
      return this;
    };
    Query2.prototype.foreignKey = function(key) {
      this.fKey = key;
      return this;
    };
    Query2.prototype.requiresCount = function() {
      this.isCountRequired = true;
      return this;
    };
    Query2.prototype.aggregate = function(type, field) {
      this.queries.push({
        fn: "onAggregates",
        e: { field, type }
      });
      return this;
    };
    Query2.filterQueries = function(queries, name) {
      return queries.filter(function(q) {
        return q.fn === name;
      });
    };
    Query2.filterQueryLists = function(queries, singles) {
      var filtered = queries.filter(function(q) {
        return singles.indexOf(q.fn) !== -1;
      });
      var res = {};
      for (var i = 0; i < filtered.length; i++) {
        if (!res[filtered[i].fn]) {
          res[filtered[i].fn] = filtered[i].e;
        }
      }
      return res;
    };
    return Query2;
  }()
);
var Predicate = (
  /** @class */
  function() {
    function Predicate2(field, operator, value, ignoreCase, ignoreAccent, matchCase) {
      if (ignoreCase === void 0) {
        ignoreCase = false;
      }
      this.ignoreAccent = false;
      this.isComplex = false;
      if (typeof field === "string") {
        this.field = field;
        this.operator = operator.toLowerCase();
        this.value = value;
        this.matchCase = matchCase;
        this.ignoreCase = ignoreCase;
        this.ignoreAccent = ignoreAccent;
        this.isComplex = false;
        this.comparer = DataUtil.fnOperators.processOperator(this.operator);
      } else if (field instanceof Predicate2 && value instanceof Predicate2 || value instanceof Array) {
        this.isComplex = true;
        this.condition = operator.toLowerCase();
        this.predicates = [field];
        this.matchCase = field.matchCase;
        this.ignoreCase = field.ignoreCase;
        this.ignoreAccent = field.ignoreAccent;
        if (value instanceof Array) {
          [].push.apply(this.predicates, value);
        } else {
          this.predicates.push(value);
        }
      }
      return this;
    }
    Predicate2.and = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and");
    };
    Predicate2.prototype.and = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "and", ignoreCase, ignoreAccent);
    };
    Predicate2.or = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or");
    };
    Predicate2.prototype.or = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "or", ignoreCase, ignoreAccent);
    };
    Predicate2.ornot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or not");
    };
    Predicate2.prototype.ornot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "ornot", ignoreCase, ignoreAccent);
    };
    Predicate2.andnot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and not");
    };
    Predicate2.prototype.andnot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "andnot", ignoreCase, ignoreAccent);
    };
    Predicate2.fromJson = function(json) {
      if (json instanceof Array) {
        var res = [];
        for (var i = 0, len = json.length; i < len; i++) {
          res.push(this.fromJSONData(json[i]));
        }
        return res;
      }
      var pred = json;
      return this.fromJSONData(pred);
    };
    Predicate2.prototype.validate = function(record) {
      var predicate = this.predicates ? this.predicates : [];
      var ret;
      var isAnd;
      if (!this.isComplex && this.comparer) {
        if (this.condition && this.condition.indexOf("not") !== -1) {
          this.condition = this.condition.split("not")[0] === "" ? void 0 : this.condition.split("not")[0];
          return !this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        } else {
          return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (this.condition && this.condition.indexOf("not") !== -1) {
        isAnd = this.condition.indexOf("and") !== -1;
      } else {
        isAnd = this.condition === "and";
      }
      for (var i = 0; i < predicate.length; i++) {
        if (i > 0 && this.condition && this.condition.indexOf("not") !== -1) {
          predicate[i].condition = predicate[i].condition ? predicate[i].condition + "not" : "not";
        }
        ret = predicate[i].validate(record);
        if (isAnd) {
          if (!ret) {
            return false;
          }
        } else {
          if (ret) {
            return true;
          }
        }
      }
      return isAnd;
    };
    Predicate2.prototype.toJson = function() {
      var predicates;
      var p;
      if (this.isComplex) {
        predicates = [];
        p = this.predicates;
        for (var i = 0; i < p.length; i++) {
          predicates.push(p[i].toJson());
        }
      }
      return {
        isComplex: this.isComplex,
        field: this.field,
        operator: this.operator,
        value: this.value,
        ignoreCase: this.ignoreCase,
        ignoreAccent: this.ignoreAccent,
        condition: this.condition,
        predicates,
        matchCase: this.matchCase
      };
    };
    Predicate2.combinePredicates = function(predicates, operator) {
      if (predicates.length === 1) {
        if (!(predicates[0] instanceof Array)) {
          return predicates[0];
        }
        predicates = predicates[0];
      }
      return new Predicate2(predicates[0], operator, predicates.slice(1));
    };
    Predicate2.combine = function(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
      if (field instanceof Predicate2) {
        return Predicate2[condition](pred, field);
      }
      if (typeof field === "string") {
        return Predicate2[condition](pred, new Predicate2(field, operator, value, ignoreCase, ignoreAccent));
      }
      return DataUtil.throwError("Predicate - " + condition + " : invalid arguments");
    };
    Predicate2.fromJSONData = function(json) {
      var preds = json.predicates || [];
      var len = preds.length;
      var predicates = [];
      var result;
      for (var i = 0; i < len; i++) {
        predicates.push(this.fromJSONData(preds[i]));
      }
      if (!json.isComplex) {
        result = new Predicate2(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
      } else {
        result = new Predicate2(predicates[0], json.condition, predicates.slice(1));
      }
      return result;
    };
    return Predicate2;
  }()
);

// node_modules/@syncfusion/ej2-data/src/util.js
var consts = { GroupGuid: "{271bbba0-1ee7}" };
var DataUtil = (
  /** @class */
  function() {
    function DataUtil2() {
    }
    DataUtil2.getValue = function(value, inst) {
      if (typeof value === "function") {
        return value.call(inst || {});
      }
      return value;
    };
    DataUtil2.endsWith = function(input2, substr) {
      return input2.slice && input2.slice(-substr.length) === substr;
    };
    DataUtil2.notEndsWith = function(input2, substr) {
      return input2.slice && input2.slice(-substr.length) !== substr;
    };
    DataUtil2.startsWith = function(input2, start) {
      return input2.slice(0, start.length) === start;
    };
    DataUtil2.notStartsWith = function(input2, start) {
      return input2.slice(0, start.length) !== start;
    };
    DataUtil2.wildCard = function(input2, pattern) {
      var asteriskSplit;
      var optionalSplit;
      if (pattern.indexOf("[") !== -1) {
        pattern = pattern.split("[").join("[[]");
      }
      if (pattern.indexOf("(") !== -1) {
        pattern = pattern.split("(").join("[(]");
      }
      if (pattern.indexOf(")") !== -1) {
        pattern = pattern.split(")").join("[)]");
      }
      if (pattern.indexOf("\\") !== -1) {
        pattern = pattern.split("\\").join("[\\\\]");
      }
      if (pattern.indexOf("*") !== -1) {
        if (pattern.charAt(0) !== "*") {
          pattern = "^" + pattern;
        }
        if (pattern.charAt(pattern.length - 1) !== "*") {
          pattern = pattern + "$";
        }
        asteriskSplit = pattern.split("*");
        for (var i = 0; i < asteriskSplit.length; i++) {
          if (asteriskSplit[i].indexOf(".") === -1) {
            asteriskSplit[i] = asteriskSplit[i] + ".*";
          } else {
            asteriskSplit[i] = asteriskSplit[i] + "*";
          }
        }
        pattern = asteriskSplit.join("");
      }
      if (pattern.indexOf("%3f") !== -1 || pattern.indexOf("?") !== -1) {
        optionalSplit = pattern.indexOf("%3f") !== -1 ? pattern.split("%3f") : pattern.split("?");
        pattern = optionalSplit.join(".");
      }
      var regexPattern = new RegExp(pattern, "g");
      return regexPattern.test(input2);
    };
    DataUtil2.like = function(input2, pattern) {
      if (pattern.indexOf("%") !== -1) {
        if (pattern.charAt(0) === "%" && pattern.lastIndexOf("%") < 2) {
          pattern = pattern.substring(1, pattern.length);
          return DataUtil2.startsWith(DataUtil2.toLowerCase(input2), DataUtil2.toLowerCase(pattern));
        } else if (pattern.charAt(pattern.length - 1) === "%" && pattern.indexOf("%") > pattern.length - 3) {
          pattern = pattern.substring(0, pattern.length - 1);
          return DataUtil2.endsWith(DataUtil2.toLowerCase(input2), DataUtil2.toLowerCase(pattern));
        } else if (pattern.lastIndexOf("%") !== pattern.indexOf("%") && pattern.lastIndexOf("%") > pattern.indexOf("%") + 1) {
          pattern = pattern.substring(pattern.indexOf("%") + 1, pattern.lastIndexOf("%"));
          return input2.indexOf(pattern) !== -1;
        } else {
          return input2.indexOf(pattern) !== -1;
        }
      } else {
        return false;
      }
    };
    DataUtil2.fnSort = function(order) {
      order = order ? DataUtil2.toLowerCase(order) : "ascending";
      if (order === "ascending") {
        return this.fnAscending;
      }
      return this.fnDescending;
    };
    DataUtil2.fnAscending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return -1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y);
      }
      if (x === null || x === void 0) {
        return 1;
      }
      return x - y;
    };
    DataUtil2.fnDescending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return 1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y) * -1;
      }
      if (x === null || x === void 0) {
        return -1;
      }
      return y - x;
    };
    DataUtil2.extractFields = function(obj, fields) {
      var newObj = {};
      for (var i = 0; i < fields.length; i++) {
        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
      }
      return newObj;
    };
    DataUtil2.select = function(jsonArray, fields) {
      var newData = [];
      for (var i = 0; i < jsonArray.length; i++) {
        newData.push(this.extractFields(jsonArray[i], fields));
      }
      return newData;
    };
    DataUtil2.group = function(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {
      level = level || 1;
      var jsonData = jsonArray;
      var guid = "GroupGuid";
      if (jsonData.GroupGuid === consts[guid]) {
        var _loop_1 = function(j2) {
          if (!isNullOrUndefined(groupDs)) {
            var indx = -1;
            var temp = groupDs.filter(function(e) {
              return e.key === jsonData[j2].key;
            });
            indx = groupDs.indexOf(temp[0]);
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);
            jsonData[j2].count = groupDs[indx].count;
          } else {
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);
            jsonData[j2].count = jsonData[j2].items.length;
          }
        };
        var this_1 = this;
        for (var j = 0; j < jsonData.length; j++) {
          _loop_1(j);
        }
        jsonData.childLevels += 1;
        return jsonData;
      }
      var grouped = {};
      var groupedArray = [];
      groupedArray.GroupGuid = consts[guid];
      groupedArray.level = level;
      groupedArray.childLevels = 0;
      groupedArray.records = jsonData;
      var _loop_2 = function(i2) {
        var val = this_2.getVal(jsonData, i2, field);
        if (!isNullOrUndefined(format)) {
          val = format(val, field);
        }
        if (!grouped[val]) {
          grouped[val] = {
            key: val,
            count: 0,
            items: [],
            aggregates: {},
            field
          };
          groupedArray.push(grouped[val]);
          if (!isNullOrUndefined(groupDs)) {
            var tempObj = groupDs.filter(function(e) {
              return e.key === grouped[val].key;
            });
            grouped[val].count = tempObj[0].count;
          }
        }
        grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;
        if (!isLazyLoad || isLazyLoad && aggregates.length) {
          grouped[val].items.push(jsonData[i2]);
        }
      };
      var this_2 = this;
      for (var i = 0; i < jsonData.length; i++) {
        _loop_2(i);
      }
      if (aggregates && aggregates.length) {
        var _loop_3 = function(i2) {
          var res = {};
          var fn = void 0;
          var aggs = aggregates;
          for (var j2 = 0; j2 < aggregates.length; j2++) {
            fn = DataUtil2.aggregates[aggregates[j2].type];
            if (!isNullOrUndefined(groupDs)) {
              var temp = groupDs.filter(function(e) {
                return e.key === groupedArray[i2].key;
              });
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(temp[0].items, aggs[j2].field);
              }
            } else {
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(groupedArray[i2].items, aggs[j2].field);
              }
            }
          }
          groupedArray[i2].aggregates = res;
        };
        for (var i = 0; i < groupedArray.length; i++) {
          _loop_3(i);
        }
      }
      if (isLazyLoad && groupedArray.length && aggregates.length) {
        for (var i = 0; i < groupedArray.length; i++) {
          groupedArray[i].items = [];
        }
      }
      return jsonData.length && groupedArray || jsonData;
    };
    DataUtil2.buildHierarchy = function(fKey, from, source, lookup, pKey) {
      var i;
      var grp = {};
      var temp;
      if (lookup.result) {
        lookup = lookup.result;
      }
      if (lookup.GroupGuid) {
        this.throwError("DataManager: Do not have support Grouping in hierarchy");
      }
      for (i = 0; i < lookup.length; i++) {
        var fKeyData = this.getObject(fKey, lookup[i]);
        temp = grp[fKeyData] || (grp[fKeyData] = []);
        temp.push(lookup[i]);
      }
      for (i = 0; i < source.length; i++) {
        var fKeyData = this.getObject(pKey || fKey, source[i]);
        source[i][from] = grp[fKeyData];
      }
    };
    DataUtil2.getFieldList = function(obj, fields, prefix) {
      if (prefix === void 0) {
        prefix = "";
      }
      if (fields === void 0 || fields === null) {
        return this.getFieldList(obj, [], prefix);
      }
      var copyObj = obj;
      var keys = Object.keys(obj);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];
        if (typeof copyObj[prop] === "object" && !(copyObj[prop] instanceof Array)) {
          this.getFieldList(copyObj[prop], fields, prefix + prop + ".");
        } else {
          fields.push(prefix + prop);
        }
      }
      return fields;
    };
    DataUtil2.getObject = function(nameSpace, from) {
      if (!nameSpace) {
        return from;
      }
      if (!from) {
        return void 0;
      }
      if (nameSpace.indexOf(".") === -1) {
        var lowerCaseNameSpace = nameSpace.charAt(0).toLowerCase() + nameSpace.slice(1);
        var upperCaseNameSpace = nameSpace.charAt(0).toUpperCase() + nameSpace.slice(1);
        if (!isNullOrUndefined(from[nameSpace])) {
          return from[nameSpace];
        } else {
          if (!isNullOrUndefined(from[lowerCaseNameSpace])) {
            return from[lowerCaseNameSpace];
          } else if (!isNullOrUndefined(from[upperCaseNameSpace])) {
            return from[upperCaseNameSpace];
          } else {
            return null;
          }
        }
      }
      var value = from;
      var splits = nameSpace.split(".");
      for (var i = 0; i < splits.length; i++) {
        if (value == null) {
          break;
        }
        value = value[splits[i]];
        if (value === void 0) {
          var casing = splits[i].charAt(0).toUpperCase() + splits[i].slice(1);
          value = from[casing] || from[casing.charAt(0).toLowerCase() + casing.slice(1)] || null;
        }
        from = value;
      }
      return value;
    };
    DataUtil2.setValue = function(nameSpace, value, obj) {
      var keys = nameSpace.toString().split(".");
      var start = obj || {};
      var fromObj = start;
      var i;
      var length = keys.length;
      var key;
      for (i = 0; i < length; i++) {
        key = keys[i];
        if (i + 1 === length) {
          fromObj[key] = value === void 0 ? void 0 : value;
        } else if (isNullOrUndefined(fromObj[key])) {
          fromObj[key] = {};
        }
        fromObj = fromObj[key];
      }
      return start;
    };
    DataUtil2.sort = function(ds, field, comparer) {
      if (ds.length <= 1) {
        return ds;
      }
      var middle = parseInt((ds.length / 2).toString(), 10);
      var left = ds.slice(0, middle);
      var right = ds.slice(middle);
      left = this.sort(left, field, comparer);
      right = this.sort(right, field, comparer);
      return this.merge(left, right, field, comparer);
    };
    DataUtil2.ignoreDiacritics = function(value) {
      if (typeof value !== "string") {
        return value;
      }
      var result = value.split("");
      var newValue = result.map(function(temp) {
        return temp in DataUtil2.diacritics ? DataUtil2.diacritics[temp] : temp;
      });
      return newValue.join("");
    };
    DataUtil2.merge = function(left, right, fieldName, comparer) {
      var result = [];
      var current;
      while (left.length > 0 || right.length > 0) {
        if (left.length > 0 && right.length > 0) {
          if (comparer) {
            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
          } else {
            current = left[0][fieldName] < left[0][fieldName] ? left : right;
          }
        } else {
          current = left.length > 0 ? left : right;
        }
        result.push(current.shift());
      }
      return result;
    };
    DataUtil2.getVal = function(array, index, field) {
      return field ? this.getObject(field, array[index]) : array[index];
    };
    DataUtil2.toLowerCase = function(val) {
      return val ? typeof val === "string" ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : "";
    };
    DataUtil2.callAdaptorFunction = function(adaptor, fnName, param1, param2) {
      if (fnName in adaptor) {
        var res = adaptor[fnName](param1, param2);
        if (!isNullOrUndefined(res)) {
          param1 = res;
        }
      }
      return param1;
    };
    DataUtil2.getAddParams = function(adp, dm, query) {
      var req = {};
      DataUtil2.callAdaptorFunction(adp, "addParams", {
        dm,
        query,
        params: query.params,
        reqParams: req
      });
      return req;
    };
    DataUtil2.isPlainObject = function(obj) {
      return !!obj && obj.constructor === Object;
    };
    DataUtil2.isCors = function() {
      var xhr = null;
      var request = "XMLHttpRequest";
      try {
        xhr = new window[request]();
      } catch (e) {
      }
      return !!xhr && "withCredentials" in xhr;
    };
    DataUtil2.getGuid = function(prefix) {
      var hexs = "0123456789abcdef";
      var rand;
      return (prefix || "") + "00000000-0000-4000-0000-000000000000".replace(/0/g, function(val, i) {
        if ("crypto" in window && "getRandomValues" in crypto) {
          var arr = new Uint8Array(1);
          window.crypto.getRandomValues(arr);
          rand = arr[0] % 16 | 0;
        } else {
          rand = Math.random() * 16 | 0;
        }
        return hexs[i === 19 ? rand & 3 | 8 : rand];
      });
    };
    DataUtil2.isNull = function(val) {
      return val === void 0 || val === null;
    };
    DataUtil2.getItemFromComparer = function(array, field, comparer) {
      var keyVal;
      var current;
      var key;
      var i = 0;
      var castRequired = typeof DataUtil2.getVal(array, 0, field) === "string";
      if (array.length) {
        while (isNullOrUndefined(keyVal) && i < array.length) {
          keyVal = DataUtil2.getVal(array, i, field);
          key = array[i++];
        }
      }
      for (; i < array.length; i++) {
        current = DataUtil2.getVal(array, i, field);
        if (isNullOrUndefined(current)) {
          continue;
        }
        if (castRequired) {
          keyVal = +keyVal;
          current = +current;
        }
        if (comparer(keyVal, current) > 0) {
          keyVal = current;
          key = array[i];
        }
      }
      return key;
    };
    DataUtil2.distinct = function(json, fieldName, requiresCompleteRecord) {
      requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;
      var result = [];
      var val;
      var tmp = {};
      json.forEach(function(data, index) {
        val = typeof json[index] === "object" ? DataUtil2.getVal(json, index, fieldName) : json[index];
        if (!(val in tmp)) {
          result.push(!requiresCompleteRecord ? val : json[index]);
          tmp[val] = 1;
        }
      });
      return result;
    };
    DataUtil2.processData = function(dm, records) {
      var query = this.prepareQuery(dm);
      var sampledata = new DataManager(records);
      if (dm.requiresCounts) {
        query.requiresCount();
      }
      var result = sampledata.executeLocal(query);
      var returnValue = {
        result: dm.requiresCounts ? result.result : result,
        count: result.count,
        aggregates: JSON.stringify(result.aggregates)
      };
      return dm.requiresCounts ? returnValue : result;
    };
    DataUtil2.prepareQuery = function(dm) {
      var _this = this;
      var query = new Query();
      if (dm.select) {
        query.select(dm.select);
      }
      if (dm.where) {
        var where = DataUtil2.parse.parseJson(dm.where);
        where.filter(function(pred) {
          if (isNullOrUndefined(pred.condition)) {
            query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);
          } else {
            var predicateList = [];
            if (pred.field) {
              predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));
            } else {
              predicateList = predicateList.concat(_this.getPredicate(pred.predicates));
            }
            if (pred.condition === "or") {
              query.where(Predicate.or(predicateList));
            } else if (pred.condition === "and") {
              query.where(Predicate.and(predicateList));
            }
          }
        });
      }
      if (dm.search) {
        var search = DataUtil2.parse.parseJson(dm.search);
        search.filter(function(e) {
          return query.search(
            e.key,
            e.fields,
            e["operator"],
            // tslint:disable-next-line:no-string-literal
            e["ignoreCase"],
            e["ignoreAccent"]
          );
        });
      }
      if (dm.aggregates) {
        dm.aggregates.filter(function(e) {
          return query.aggregate(e.type, e.field);
        });
      }
      if (dm.sorted) {
        dm.sorted.filter(function(e) {
          return query.sortBy(e.name, e.direction);
        });
      }
      if (dm.skip) {
        query.skip(dm.skip);
      }
      if (dm.take) {
        query.take(dm.take);
      }
      if (dm.group) {
        dm.group.filter(function(grp) {
          return query.group(grp);
        });
      }
      return query;
    };
    DataUtil2.getPredicate = function(pred) {
      var mainPred = [];
      for (var i = 0; i < pred.length; i++) {
        var e = pred[i];
        if (e.field) {
          mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));
        } else {
          var childPred = [];
          var cpre = this.getPredicate(e.predicates);
          for (var _i = 0, _a = Object.keys(cpre); _i < _a.length; _i++) {
            var prop = _a[_i];
            childPred.push(cpre[prop]);
          }
          mainPred.push(e.condition === "or" ? Predicate.or(childPred) : Predicate.and(childPred));
        }
      }
      return mainPred;
    };
    DataUtil2.serverTimezoneOffset = null;
    DataUtil2.timeZoneHandling = true;
    DataUtil2.throwError = function(error) {
      try {
        throw new Error(error);
      } catch (e) {
        throw e.message + "\n" + e.stack;
      }
    };
    DataUtil2.aggregates = {
      /**
       * Calculate sum of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      sum: function(ds, field) {
        var result = 0;
        var val;
        var castRequired = typeof DataUtil2.getVal(ds, 0, field) !== "number";
        for (var i = 0; i < ds.length; i++) {
          val = DataUtil2.getVal(ds, i, field);
          if (!isNaN(val) && val !== null) {
            if (castRequired) {
              val = +val;
            }
            result += val;
          }
        }
        return result;
      },
      /**
       * Calculate average value of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      average: function(ds, field) {
        return DataUtil2.aggregates.sum(ds, field) / ds.length;
      },
      /**
       * Returns the min value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string|Function} field
       */
      min: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnAscending));
      },
      /**
       * Returns the max value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       * @returns number
       */
      max: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnDescending));
      },
      /**
       * Returns the total number of true value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      truecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", true, true)).length;
      },
      /**
       * Returns the total number of false value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      falsecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", false, true)).length;
      },
      /**
       * Returns the length of the given data.
       *
       * @param {Object[]} ds
       * @param {string} field?
       * @param field
       * @returns number
       */
      count: function(ds, field) {
        return ds.length;
      }
    };
    DataUtil2.operatorSymbols = {
      "<": "lessthan",
      ">": "greaterthan",
      "<=": "lessthanorequal",
      ">=": "greaterthanorequal",
      "==": "equal",
      "!=": "notequal",
      "*=": "contains",
      "$=": "endswith",
      "^=": "startswith"
    };
    DataUtil2.odBiOperator = {
      "<": " lt ",
      ">": " gt ",
      "<=": " le ",
      ">=": " ge ",
      "==": " eq ",
      "!=": " ne ",
      "lessthan": " lt ",
      "lessthanorequal": " le ",
      "greaterthan": " gt ",
      "greaterthanorequal": " ge ",
      "equal": " eq ",
      "notequal": " ne "
    };
    DataUtil2.odUniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "substringof",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "substringof",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not substringof",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.odv4UniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "contains",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "contains",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not contains",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.diacritics = {
      "Ⓐ": "A",
      "Ａ": "A",
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ầ": "A",
      "Ấ": "A",
      "Ẫ": "A",
      "Ẩ": "A",
      "Ã": "A",
      "Ā": "A",
      "Ă": "A",
      "Ằ": "A",
      "Ắ": "A",
      "Ẵ": "A",
      "Ẳ": "A",
      "Ȧ": "A",
      "Ǡ": "A",
      "Ä": "A",
      "Ǟ": "A",
      "Ả": "A",
      "Å": "A",
      "Ǻ": "A",
      "Ǎ": "A",
      "Ȁ": "A",
      "Ȃ": "A",
      "Ạ": "A",
      "Ậ": "A",
      "Ặ": "A",
      "Ḁ": "A",
      "Ą": "A",
      "Ⱥ": "A",
      "Ɐ": "A",
      "Ꜳ": "AA",
      "Æ": "AE",
      "Ǽ": "AE",
      "Ǣ": "AE",
      "Ꜵ": "AO",
      "Ꜷ": "AU",
      "Ꜹ": "AV",
      "Ꜻ": "AV",
      "Ꜽ": "AY",
      "Ⓑ": "B",
      "Ｂ": "B",
      "Ḃ": "B",
      "Ḅ": "B",
      "Ḇ": "B",
      "Ƀ": "B",
      "Ƃ": "B",
      "Ɓ": "B",
      "Ⓒ": "C",
      "Ｃ": "C",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "Ç": "C",
      "Ḉ": "C",
      "Ƈ": "C",
      "Ȼ": "C",
      "Ꜿ": "C",
      "Ⓓ": "D",
      "Ｄ": "D",
      "Ḋ": "D",
      "Ď": "D",
      "Ḍ": "D",
      "Ḑ": "D",
      "Ḓ": "D",
      "Ḏ": "D",
      "Đ": "D",
      "Ƌ": "D",
      "Ɗ": "D",
      "Ɖ": "D",
      "Ꝺ": "D",
      "Ǳ": "DZ",
      "Ǆ": "DZ",
      "ǲ": "Dz",
      "ǅ": "Dz",
      "Ⓔ": "E",
      "Ｅ": "E",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ề": "E",
      "Ế": "E",
      "Ễ": "E",
      "Ể": "E",
      "Ẽ": "E",
      "Ē": "E",
      "Ḕ": "E",
      "Ḗ": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ë": "E",
      "Ẻ": "E",
      "Ě": "E",
      "Ȅ": "E",
      "Ȇ": "E",
      "Ẹ": "E",
      "Ệ": "E",
      "Ȩ": "E",
      "Ḝ": "E",
      "Ę": "E",
      "Ḙ": "E",
      "Ḛ": "E",
      "Ɛ": "E",
      "Ǝ": "E",
      "Ⓕ": "F",
      "Ｆ": "F",
      "Ḟ": "F",
      "Ƒ": "F",
      "Ꝼ": "F",
      "Ⓖ": "G",
      "Ｇ": "G",
      "Ǵ": "G",
      "Ĝ": "G",
      "Ḡ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ǧ": "G",
      "Ģ": "G",
      "Ǥ": "G",
      "Ɠ": "G",
      "Ꞡ": "G",
      "Ᵹ": "G",
      "Ꝿ": "G",
      "Ⓗ": "H",
      "Ｈ": "H",
      "Ĥ": "H",
      "Ḣ": "H",
      "Ḧ": "H",
      "Ȟ": "H",
      "Ḥ": "H",
      "Ḩ": "H",
      "Ḫ": "H",
      "Ħ": "H",
      "Ⱨ": "H",
      "Ⱶ": "H",
      "Ɥ": "H",
      "Ⓘ": "I",
      "Ｉ": "I",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "İ": "I",
      "Ï": "I",
      "Ḯ": "I",
      "Ỉ": "I",
      "Ǐ": "I",
      "Ȉ": "I",
      "Ȋ": "I",
      "Ị": "I",
      "Į": "I",
      "Ḭ": "I",
      "Ɨ": "I",
      "Ⓙ": "J",
      "Ｊ": "J",
      "Ĵ": "J",
      "Ɉ": "J",
      "Ⓚ": "K",
      "Ｋ": "K",
      "Ḱ": "K",
      "Ǩ": "K",
      "Ḳ": "K",
      "Ķ": "K",
      "Ḵ": "K",
      "Ƙ": "K",
      "Ⱪ": "K",
      "Ꝁ": "K",
      "Ꝃ": "K",
      "Ꝅ": "K",
      "Ꞣ": "K",
      "Ⓛ": "L",
      "Ｌ": "L",
      "Ŀ": "L",
      "Ĺ": "L",
      "Ľ": "L",
      "Ḷ": "L",
      "Ḹ": "L",
      "Ļ": "L",
      "Ḽ": "L",
      "Ḻ": "L",
      "Ł": "L",
      "Ƚ": "L",
      "Ɫ": "L",
      "Ⱡ": "L",
      "Ꝉ": "L",
      "Ꝇ": "L",
      "Ꞁ": "L",
      "Ǉ": "LJ",
      "ǈ": "Lj",
      "Ⓜ": "M",
      "Ｍ": "M",
      "Ḿ": "M",
      "Ṁ": "M",
      "Ṃ": "M",
      "Ɱ": "M",
      "Ɯ": "M",
      "Ⓝ": "N",
      "Ｎ": "N",
      "Ǹ": "N",
      "Ń": "N",
      "Ñ": "N",
      "Ṅ": "N",
      "Ň": "N",
      "Ṇ": "N",
      "Ņ": "N",
      "Ṋ": "N",
      "Ṉ": "N",
      "Ƞ": "N",
      "Ɲ": "N",
      "Ꞑ": "N",
      "Ꞥ": "N",
      "Ǌ": "NJ",
      "ǋ": "Nj",
      "Ⓞ": "O",
      "Ｏ": "O",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Ồ": "O",
      "Ố": "O",
      "Ỗ": "O",
      "Ổ": "O",
      "Õ": "O",
      "Ṍ": "O",
      "Ȭ": "O",
      "Ṏ": "O",
      "Ō": "O",
      "Ṑ": "O",
      "Ṓ": "O",
      "Ŏ": "O",
      "Ȯ": "O",
      "Ȱ": "O",
      "Ö": "O",
      "Ȫ": "O",
      "Ỏ": "O",
      "Ő": "O",
      "Ǒ": "O",
      "Ȍ": "O",
      "Ȏ": "O",
      "Ơ": "O",
      "Ờ": "O",
      "Ớ": "O",
      "Ỡ": "O",
      "Ở": "O",
      "Ợ": "O",
      "Ọ": "O",
      "Ộ": "O",
      "Ǫ": "O",
      "Ǭ": "O",
      "Ø": "O",
      "Ǿ": "O",
      "Ɔ": "O",
      "Ɵ": "O",
      "Ꝋ": "O",
      "Ꝍ": "O",
      "Ƣ": "OI",
      "Ꝏ": "OO",
      "Ȣ": "OU",
      "Ⓟ": "P",
      "Ｐ": "P",
      "Ṕ": "P",
      "Ṗ": "P",
      "Ƥ": "P",
      "Ᵽ": "P",
      "Ꝑ": "P",
      "Ꝓ": "P",
      "Ꝕ": "P",
      "Ⓠ": "Q",
      "Ｑ": "Q",
      "Ꝗ": "Q",
      "Ꝙ": "Q",
      "Ɋ": "Q",
      "Ⓡ": "R",
      "Ｒ": "R",
      "Ŕ": "R",
      "Ṙ": "R",
      "Ř": "R",
      "Ȑ": "R",
      "Ȓ": "R",
      "Ṛ": "R",
      "Ṝ": "R",
      "Ŗ": "R",
      "Ṟ": "R",
      "Ɍ": "R",
      "Ɽ": "R",
      "Ꝛ": "R",
      "Ꞧ": "R",
      "Ꞃ": "R",
      "Ⓢ": "S",
      "Ｓ": "S",
      "ẞ": "S",
      "Ś": "S",
      "Ṥ": "S",
      "Ŝ": "S",
      "Ṡ": "S",
      "Š": "S",
      "Ṧ": "S",
      "Ṣ": "S",
      "Ṩ": "S",
      "Ș": "S",
      "Ş": "S",
      "Ȿ": "S",
      "Ꞩ": "S",
      "Ꞅ": "S",
      "Ⓣ": "T",
      "Ｔ": "T",
      "Ṫ": "T",
      "Ť": "T",
      "Ṭ": "T",
      "Ț": "T",
      "Ţ": "T",
      "Ṱ": "T",
      "Ṯ": "T",
      "Ŧ": "T",
      "Ƭ": "T",
      "Ʈ": "T",
      "Ⱦ": "T",
      "Ꞇ": "T",
      "Ꜩ": "TZ",
      "Ⓤ": "U",
      "Ｕ": "U",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ũ": "U",
      "Ṹ": "U",
      "Ū": "U",
      "Ṻ": "U",
      "Ŭ": "U",
      "Ü": "U",
      "Ǜ": "U",
      "Ǘ": "U",
      "Ǖ": "U",
      "Ǚ": "U",
      "Ủ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ǔ": "U",
      "Ȕ": "U",
      "Ȗ": "U",
      "Ư": "U",
      "Ừ": "U",
      "Ứ": "U",
      "Ữ": "U",
      "Ử": "U",
      "Ự": "U",
      "Ụ": "U",
      "Ṳ": "U",
      "Ų": "U",
      "Ṷ": "U",
      "Ṵ": "U",
      "Ʉ": "U",
      "Ⓥ": "V",
      "Ｖ": "V",
      "Ṽ": "V",
      "Ṿ": "V",
      "Ʋ": "V",
      "Ꝟ": "V",
      "Ʌ": "V",
      "Ꝡ": "VY",
      "Ⓦ": "W",
      "Ｗ": "W",
      "Ẁ": "W",
      "Ẃ": "W",
      "Ŵ": "W",
      "Ẇ": "W",
      "Ẅ": "W",
      "Ẉ": "W",
      "Ⱳ": "W",
      "Ⓧ": "X",
      "Ｘ": "X",
      "Ẋ": "X",
      "Ẍ": "X",
      "Ⓨ": "Y",
      "Ｙ": "Y",
      "Ỳ": "Y",
      "Ý": "Y",
      "Ŷ": "Y",
      "Ỹ": "Y",
      "Ȳ": "Y",
      "Ẏ": "Y",
      "Ÿ": "Y",
      "Ỷ": "Y",
      "Ỵ": "Y",
      "Ƴ": "Y",
      "Ɏ": "Y",
      "Ỿ": "Y",
      "Ⓩ": "Z",
      "Ｚ": "Z",
      "Ź": "Z",
      "Ẑ": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "Ẓ": "Z",
      "Ẕ": "Z",
      "Ƶ": "Z",
      "Ȥ": "Z",
      "Ɀ": "Z",
      "Ⱬ": "Z",
      "Ꝣ": "Z",
      "ⓐ": "a",
      "ａ": "a",
      "ẚ": "a",
      "à": "a",
      "á": "a",
      "â": "a",
      "ầ": "a",
      "ấ": "a",
      "ẫ": "a",
      "ẩ": "a",
      "ã": "a",
      "ā": "a",
      "ă": "a",
      "ằ": "a",
      "ắ": "a",
      "ẵ": "a",
      "ẳ": "a",
      "ȧ": "a",
      "ǡ": "a",
      "ä": "a",
      "ǟ": "a",
      "ả": "a",
      "å": "a",
      "ǻ": "a",
      "ǎ": "a",
      "ȁ": "a",
      "ȃ": "a",
      "ạ": "a",
      "ậ": "a",
      "ặ": "a",
      "ḁ": "a",
      "ą": "a",
      "ⱥ": "a",
      "ɐ": "a",
      "ꜳ": "aa",
      "æ": "ae",
      "ǽ": "ae",
      "ǣ": "ae",
      "ꜵ": "ao",
      "ꜷ": "au",
      "ꜹ": "av",
      "ꜻ": "av",
      "ꜽ": "ay",
      "ⓑ": "b",
      "ｂ": "b",
      "ḃ": "b",
      "ḅ": "b",
      "ḇ": "b",
      "ƀ": "b",
      "ƃ": "b",
      "ɓ": "b",
      "ⓒ": "c",
      "ｃ": "c",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "ç": "c",
      "ḉ": "c",
      "ƈ": "c",
      "ȼ": "c",
      "ꜿ": "c",
      "ↄ": "c",
      "ⓓ": "d",
      "ｄ": "d",
      "ḋ": "d",
      "ď": "d",
      "ḍ": "d",
      "ḑ": "d",
      "ḓ": "d",
      "ḏ": "d",
      "đ": "d",
      "ƌ": "d",
      "ɖ": "d",
      "ɗ": "d",
      "ꝺ": "d",
      "ǳ": "dz",
      "ǆ": "dz",
      "ⓔ": "e",
      "ｅ": "e",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ề": "e",
      "ế": "e",
      "ễ": "e",
      "ể": "e",
      "ẽ": "e",
      "ē": "e",
      "ḕ": "e",
      "ḗ": "e",
      "ĕ": "e",
      "ė": "e",
      "ë": "e",
      "ẻ": "e",
      "ě": "e",
      "ȅ": "e",
      "ȇ": "e",
      "ẹ": "e",
      "ệ": "e",
      "ȩ": "e",
      "ḝ": "e",
      "ę": "e",
      "ḙ": "e",
      "ḛ": "e",
      "ɇ": "e",
      "ɛ": "e",
      "ǝ": "e",
      "ⓕ": "f",
      "ｆ": "f",
      "ḟ": "f",
      "ƒ": "f",
      "ꝼ": "f",
      "ⓖ": "g",
      "ｇ": "g",
      "ǵ": "g",
      "ĝ": "g",
      "ḡ": "g",
      "ğ": "g",
      "ġ": "g",
      "ǧ": "g",
      "ģ": "g",
      "ǥ": "g",
      "ɠ": "g",
      "ꞡ": "g",
      "ᵹ": "g",
      "ꝿ": "g",
      "ⓗ": "h",
      "ｈ": "h",
      "ĥ": "h",
      "ḣ": "h",
      "ḧ": "h",
      "ȟ": "h",
      "ḥ": "h",
      "ḩ": "h",
      "ḫ": "h",
      "ẖ": "h",
      "ħ": "h",
      "ⱨ": "h",
      "ⱶ": "h",
      "ɥ": "h",
      "ƕ": "hv",
      "ⓘ": "i",
      "ｉ": "i",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "ï": "i",
      "ḯ": "i",
      "ỉ": "i",
      "ǐ": "i",
      "ȉ": "i",
      "ȋ": "i",
      "ị": "i",
      "į": "i",
      "ḭ": "i",
      "ɨ": "i",
      "ı": "i",
      "ⓙ": "j",
      "ｊ": "j",
      "ĵ": "j",
      "ǰ": "j",
      "ɉ": "j",
      "ⓚ": "k",
      "ｋ": "k",
      "ḱ": "k",
      "ǩ": "k",
      "ḳ": "k",
      "ķ": "k",
      "ḵ": "k",
      "ƙ": "k",
      "ⱪ": "k",
      "ꝁ": "k",
      "ꝃ": "k",
      "ꝅ": "k",
      "ꞣ": "k",
      "ⓛ": "l",
      "ｌ": "l",
      "ŀ": "l",
      "ĺ": "l",
      "ľ": "l",
      "ḷ": "l",
      "ḹ": "l",
      "ļ": "l",
      "ḽ": "l",
      "ḻ": "l",
      "ſ": "l",
      "ł": "l",
      "ƚ": "l",
      "ɫ": "l",
      "ⱡ": "l",
      "ꝉ": "l",
      "ꞁ": "l",
      "ꝇ": "l",
      "ǉ": "lj",
      "ⓜ": "m",
      "ｍ": "m",
      "ḿ": "m",
      "ṁ": "m",
      "ṃ": "m",
      "ɱ": "m",
      "ɯ": "m",
      "ⓝ": "n",
      "ｎ": "n",
      "ǹ": "n",
      "ń": "n",
      "ñ": "n",
      "ṅ": "n",
      "ň": "n",
      "ṇ": "n",
      "ņ": "n",
      "ṋ": "n",
      "ṉ": "n",
      "ƞ": "n",
      "ɲ": "n",
      "ŉ": "n",
      "ꞑ": "n",
      "ꞥ": "n",
      "ǌ": "nj",
      "ⓞ": "o",
      "ｏ": "o",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "ồ": "o",
      "ố": "o",
      "ỗ": "o",
      "ổ": "o",
      "õ": "o",
      "ṍ": "o",
      "ȭ": "o",
      "ṏ": "o",
      "ō": "o",
      "ṑ": "o",
      "ṓ": "o",
      "ŏ": "o",
      "ȯ": "o",
      "ȱ": "o",
      "ö": "o",
      "ȫ": "o",
      "ỏ": "o",
      "ő": "o",
      "ǒ": "o",
      "ȍ": "o",
      "ȏ": "o",
      "ơ": "o",
      "ờ": "o",
      "ớ": "o",
      "ỡ": "o",
      "ở": "o",
      "ợ": "o",
      "ọ": "o",
      "ộ": "o",
      "ǫ": "o",
      "ǭ": "o",
      "ø": "o",
      "ǿ": "o",
      "ɔ": "o",
      "ꝋ": "o",
      "ꝍ": "o",
      "ɵ": "o",
      "ƣ": "oi",
      "ȣ": "ou",
      "ꝏ": "oo",
      "ⓟ": "p",
      "ｐ": "p",
      "ṕ": "p",
      "ṗ": "p",
      "ƥ": "p",
      "ᵽ": "p",
      "ꝑ": "p",
      "ꝓ": "p",
      "ꝕ": "p",
      "ⓠ": "q",
      "ｑ": "q",
      "ɋ": "q",
      "ꝗ": "q",
      "ꝙ": "q",
      "ⓡ": "r",
      "ｒ": "r",
      "ŕ": "r",
      "ṙ": "r",
      "ř": "r",
      "ȑ": "r",
      "ȓ": "r",
      "ṛ": "r",
      "ṝ": "r",
      "ŗ": "r",
      "ṟ": "r",
      "ɍ": "r",
      "ɽ": "r",
      "ꝛ": "r",
      "ꞧ": "r",
      "ꞃ": "r",
      "ⓢ": "s",
      "ｓ": "s",
      "ß": "s",
      "ś": "s",
      "ṥ": "s",
      "ŝ": "s",
      "ṡ": "s",
      "š": "s",
      "ṧ": "s",
      "ṣ": "s",
      "ṩ": "s",
      "ș": "s",
      "ş": "s",
      "ȿ": "s",
      "ꞩ": "s",
      "ꞅ": "s",
      "ẛ": "s",
      "ⓣ": "t",
      "ｔ": "t",
      "ṫ": "t",
      "ẗ": "t",
      "ť": "t",
      "ṭ": "t",
      "ț": "t",
      "ţ": "t",
      "ṱ": "t",
      "ṯ": "t",
      "ŧ": "t",
      "ƭ": "t",
      "ʈ": "t",
      "ⱦ": "t",
      "ꞇ": "t",
      "ꜩ": "tz",
      "ⓤ": "u",
      "ｕ": "u",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ũ": "u",
      "ṹ": "u",
      "ū": "u",
      "ṻ": "u",
      "ŭ": "u",
      "ü": "u",
      "ǜ": "u",
      "ǘ": "u",
      "ǖ": "u",
      "ǚ": "u",
      "ủ": "u",
      "ů": "u",
      "ű": "u",
      "ǔ": "u",
      "ȕ": "u",
      "ȗ": "u",
      "ư": "u",
      "ừ": "u",
      "ứ": "u",
      "ữ": "u",
      "ử": "u",
      "ự": "u",
      "ụ": "u",
      "ṳ": "u",
      "ų": "u",
      "ṷ": "u",
      "ṵ": "u",
      "ʉ": "u",
      "ⓥ": "v",
      "ｖ": "v",
      "ṽ": "v",
      "ṿ": "v",
      "ʋ": "v",
      "ꝟ": "v",
      "ʌ": "v",
      "ꝡ": "vy",
      "ⓦ": "w",
      "ｗ": "w",
      "ẁ": "w",
      "ẃ": "w",
      "ŵ": "w",
      "ẇ": "w",
      "ẅ": "w",
      "ẘ": "w",
      "ẉ": "w",
      "ⱳ": "w",
      "ⓧ": "x",
      "ｘ": "x",
      "ẋ": "x",
      "ẍ": "x",
      "ⓨ": "y",
      "ｙ": "y",
      "ỳ": "y",
      "ý": "y",
      "ŷ": "y",
      "ỹ": "y",
      "ȳ": "y",
      "ẏ": "y",
      "ÿ": "y",
      "ỷ": "y",
      "ẙ": "y",
      "ỵ": "y",
      "ƴ": "y",
      "ɏ": "y",
      "ỿ": "y",
      "ⓩ": "z",
      "ｚ": "z",
      "ź": "z",
      "ẑ": "z",
      "ż": "z",
      "ž": "z",
      "ẓ": "z",
      "ẕ": "z",
      "ƶ": "z",
      "ȥ": "z",
      "ɀ": "z",
      "ⱬ": "z",
      "ꝣ": "z",
      "Ά": "Α",
      "Έ": "Ε",
      "Ή": "Η",
      "Ί": "Ι",
      "Ϊ": "Ι",
      "Ό": "Ο",
      "Ύ": "Υ",
      "Ϋ": "Υ",
      "Ώ": "Ω",
      "ά": "α",
      "έ": "ε",
      "ή": "η",
      "ί": "ι",
      "ϊ": "ι",
      "ΐ": "ι",
      "ό": "ο",
      "ύ": "υ",
      "ϋ": "υ",
      "ΰ": "υ",
      "ω": "ω",
      "ς": "σ"
    };
    DataUtil2.fnOperators = {
      /**
       * Returns true when the actual input is equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param {boolean} ignoreAccent?
       * @param ignoreCase
       * @param ignoreAccent
       */
      equal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) === DataUtil2.toLowerCase(expected);
        }
        return actual === expected;
      },
      /**
       * Returns true when the actual input is not equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      notequal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        return !DataUtil2.fnOperators.equal(actual, expected, ignoreCase);
      },
      /**
       * Returns true when the actual input is less than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) < DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual < expected;
      },
      /**
       * Returns true when the actual input is greater than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) > DataUtil2.toLowerCase(expected);
        }
        return actual > expected;
      },
      /**
       * Returns true when the actual input is less than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) <= DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual <= expected;
      },
      /**
       * Returns true when the actual input is greater than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) >= DataUtil2.toLowerCase(expected);
        }
        return actual >= expected;
      },
      /**
       * Returns true when the actual input contains the given string.
       *
       * @param {string|number} actual
       * @param {string|number} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      contains: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) !== -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;
      },
      /**
       * Returns true when the actual input not contains the given string.
       *
       * @param  {string|number} actual
       * @param  {string|number} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotcontain: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) === -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) === -1;
      },
      /**
       * Returns true when the given input value is not null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotnull: function(actual) {
        return actual !== null && actual !== void 0;
      },
      /**
       * Returns true when the given input value is null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnull: function(actual) {
        return actual === null || actual === void 0;
      },
      /**
       * Returns true when the actual input starts with the given string
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      startswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.startsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.startsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not starts with the given string
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotstartwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notStartsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notStartsWith(actual, expected);
      },
      /**
       * Returns true when the actual input like with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      like: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.like(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.like(actual, expected);
      },
      /**
       * Returns true when the given input value is empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isempty: function(actual) {
        return actual === void 0 || actual === "";
      },
      /**
       * Returns true when the given input value is not empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotempty: function(actual) {
        return actual !== void 0 && actual !== "";
      },
      /**
       * Returns true when the actual input pattern(wildcard) matches with the given string.
       *
       * @param  {string|Date} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      wildcard: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return (actual || typeof actual === "boolean") && expected && typeof actual !== "object" && DataUtil2.wildCard(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return (actual || typeof actual === "boolean") && expected && DataUtil2.wildCard(actual, expected);
      },
      /**
       * Returns true when the actual input ends with the given string.
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      endswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.endsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.endsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not ends with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotendwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notEndsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notEndsWith(actual, expected);
      },
      /**
       * It will return the filter operator based on the filter symbol.
       *
       * @param  {string} operator
       * @hidden
       */
      processSymbols: function(operator) {
        var fnName = DataUtil2.operatorSymbols[operator];
        if (fnName) {
          var fn = DataUtil2.fnOperators[fnName];
          return fn;
        }
        return DataUtil2.throwError("Query - Process Operator : Invalid operator");
      },
      /**
       * It will return the valid filter operator based on the specified operators.
       *
       * @param  {string} operator
       * @hidden
       */
      processOperator: function(operator) {
        var fn = DataUtil2.fnOperators[operator];
        if (fn) {
          return fn;
        }
        return DataUtil2.fnOperators.processSymbols(operator);
      }
    };
    DataUtil2.parse = {
      /**
       * Parse the given string to the plain JavaScript object.
       *
       * @param  {string|Object|Object[]} jsonText
       */
      parseJson: function(jsonText) {
        if (typeof jsonText === "string" && (/^[\s]*\[|^[\s]*\{(.)+:/g.test(jsonText) || jsonText.indexOf('"') === -1)) {
          jsonText = JSON.parse(jsonText, DataUtil2.parse.jsonReviver);
        } else if (jsonText instanceof Array) {
          DataUtil2.parse.iterateAndReviveArray(jsonText);
        } else if (typeof jsonText === "object" && jsonText !== null) {
          DataUtil2.parse.iterateAndReviveJson(jsonText);
        }
        return jsonText;
      },
      /**
       * It will perform on array of values.
       *
       * @param  {string[]|Object[]} array
       * @hidden
       */
      iterateAndReviveArray: function(array) {
        for (var i = 0; i < array.length; i++) {
          if (typeof array[i] === "object" && array[i] !== null) {
            DataUtil2.parse.iterateAndReviveJson(array[i]);
          } else if (typeof array[i] === "string" && (!/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i]) || array[i].toString().indexOf('"') === -1)) {
            array[i] = DataUtil2.parse.jsonReviver("", array[i]);
          } else {
            array[i] = DataUtil2.parse.parseJson(array[i]);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {JSON} json
       * @hidden
       */
      iterateAndReviveJson: function(json) {
        var value;
        var keys = Object.keys(json);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var prop = keys_2[_i];
          if (DataUtil2.startsWith(prop, "__")) {
            continue;
          }
          value = json[prop];
          if (typeof value === "object") {
            if (value instanceof Array) {
              DataUtil2.parse.iterateAndReviveArray(value);
            } else if (value) {
              DataUtil2.parse.iterateAndReviveJson(value);
            }
          } else {
            json[prop] = DataUtil2.parse.jsonReviver(json[prop], value);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {string} field
       * @param  {string|Date} value
       * @hidden
       */
      jsonReviver: function(field, value) {
        if (typeof value === "string") {
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
          var offSet = DataUtil2.timeZoneHandling ? DataUtil2.serverTimezoneOffset : null;
          if (ms) {
            return DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var isUTC = value.indexOf("Z") > -1 || value.indexOf("z") > -1;
            var arr = value.split(/[^0-9.]/);
            if (isUTC) {
              if (arr[5].indexOf(".") > -1) {
                var secondsMs = arr[5].split(".");
                arr[5] = secondsMs[0];
                arr[6] = new Date(value).getUTCMilliseconds().toString();
              } else {
                arr[6] = "00";
              }
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : "00", 10), parseInt(arr[6], 10)), DataUtil2.serverTimezoneOffset, false);
            } else {
              var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : "00", 10));
              var hrs = parseInt(arr[6], 10);
              var mins = parseInt(arr[7], 10);
              if (isNaN(hrs) && isNaN(mins)) {
                return utcFormat;
              }
              if (value.indexOf("+") > -1) {
                utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
              } else {
                utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
              }
              value = DataUtil2.dateParse.toTimeZone(utcFormat, DataUtil2.serverTimezoneOffset, false);
            }
            if (DataUtil2.serverTimezoneOffset == null) {
              value = DataUtil2.dateParse.addSelfOffset(value);
            }
          }
        }
        return value;
      },
      /**
       * Check wheather the given value is JSON or not.
       *
       * @param  {Object[]} jsonData
       */
      isJson: function(jsonData) {
        if (typeof jsonData[0] === "string") {
          return jsonData;
        }
        return DataUtil2.parse.parseJson(jsonData);
      },
      /**
       * Checks wheather the given value is GUID or not.
       *
       * @param  {string} value
       */
      isGuid: function(value) {
        var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
        var match = regex.exec(value);
        return match != null;
      },
      /**
       * The method used to replace the value based on the type.
       *
       * @param  {Object} value
       * @param  {boolean} stringify
       * @hidden
       */
      replacer: function(value, stringify) {
        if (DataUtil2.isPlainObject(value)) {
          return DataUtil2.parse.jsonReplacer(value, stringify);
        }
        if (value instanceof Array) {
          return DataUtil2.parse.arrayReplacer(value);
        }
        if (value instanceof Date) {
          return DataUtil2.parse.jsonReplacer({ val: value }, stringify).val;
        }
        return value;
      },
      /**
       * It will replace the JSON value.
       *
       * @param {string} key
       * @param {Object} val
       * @param stringify
       * @hidden
       */
      jsonReplacer: function(val, stringify) {
        var value;
        var keys = Object.keys(val);
        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
          var prop = keys_3[_i];
          value = val[prop];
          if (!(value instanceof Date)) {
            continue;
          }
          var d = value;
          if (DataUtil2.serverTimezoneOffset == null) {
            val[prop] = DataUtil2.dateParse.toTimeZone(d, null).toJSON();
          } else {
            d = new Date(+d + DataUtil2.serverTimezoneOffset * 36e5);
            val[prop] = DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(d), null).toJSON();
          }
        }
        return val;
      },
      /**
       * It will replace the Array of value.
       *
       * @param  {string} key
       * @param  {Object[]} val
       * @hidden
       */
      arrayReplacer: function(val) {
        for (var i = 0; i < val.length; i++) {
          if (DataUtil2.isPlainObject(val[i])) {
            val[i] = DataUtil2.parse.jsonReplacer(val[i]);
          } else if (val[i] instanceof Date) {
            val[i] = DataUtil2.parse.jsonReplacer({ date: val[i] }).date;
          }
        }
        return val;
      },
      /**
       * It will replace the Date object with respective to UTC format value.
       *
       * @param  {string} key
       * @param  {any} value
       * @hidden
       */
      /* eslint-disable @typescript-eslint/no-explicit-any */
      /* tslint:disable-next-line:no-any */
      jsonDateReplacer: function(key, value) {
        if (key === "value" && value) {
          if (typeof value === "string") {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
            if (ms) {
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var arr = value.split(/[^0-9]/);
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
            }
          }
          if (value instanceof Date) {
            value = DataUtil2.dateParse.addSelfOffset(value);
            if (DataUtil2.serverTimezoneOffset === null) {
              return DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(value), null).toJSON();
            } else {
              value = DataUtil2.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 - DataUtil2.serverTimezoneOffset, false);
              return value.toJSON();
            }
          }
        }
        return value;
      }
    };
    DataUtil2.dateParse = {
      addSelfOffset: function(input2) {
        return new Date(+input2 - input2.getTimezoneOffset() * 6e4);
      },
      toUTC: function(input2) {
        return new Date(+input2 + input2.getTimezoneOffset() * 6e4);
      },
      toTimeZone: function(input2, offset, utc) {
        if (offset === null) {
          return input2;
        }
        var unix = utc ? DataUtil2.dateParse.toUTC(input2) : input2;
        return new Date(+unix - offset * 36e5);
      },
      toLocalTime: function(input2) {
        var datefn = input2;
        var timeZone = -datefn.getTimezoneOffset();
        var differenceString = timeZone >= 0 ? "+" : "-";
        var localtimefn = function(num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? "0" : "") + norm;
        };
        var val = datefn.getFullYear() + "-" + localtimefn(datefn.getMonth() + 1) + "-" + localtimefn(datefn.getDate()) + "T" + localtimefn(datefn.getHours()) + ":" + localtimefn(datefn.getMinutes()) + ":" + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ":" + localtimefn(timeZone % 60);
        return val;
      }
    };
    return DataUtil2;
  }()
);

// node_modules/@syncfusion/ej2-data/src/adaptors.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var consts2 = { GroupGuid: "{271bbba0-1ee7}" };
var Adaptor = (
  /** @class */
  function() {
    function Adaptor2(ds) {
      this.options = {
        from: "table",
        requestType: "json",
        sortBy: "sorted",
        select: "select",
        skip: "skip",
        group: "group",
        take: "take",
        search: "search",
        count: "requiresCounts",
        where: "where",
        aggregates: "aggregates",
        expand: "expand"
      };
      this.type = Adaptor2;
      this.dataSource = ds;
      this.pvt = {};
    }
    Adaptor2.prototype.processResponse = function(data, ds, query, xhr) {
      return data;
    };
    return Adaptor2;
  }()
);
var JsonAdaptor = (
  /** @class */
  function(_super) {
    __extends3(JsonAdaptor2, _super);
    function JsonAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    JsonAdaptor2.prototype.processQuery = function(dataManager, query) {
      var result = dataManager.dataSource.json.slice(0);
      var count = result.length;
      var countFlg = true;
      var ret;
      var key;
      var lazyLoad = {};
      var keyCount = 0;
      var group = [];
      var sort = [];
      var page;
      for (var i = 0; i < query.lazyLoad.length; i++) {
        keyCount++;
        lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;
      }
      var agg = {};
      for (var i = 0; i < query.queries.length; i++) {
        key = query.queries[i];
        if ((key.fn === "onPage" || key.fn === "onGroup" || key.fn === "onSortBy") && query.lazyLoad.length) {
          if (key.fn === "onGroup") {
            group.push(key.e);
          }
          if (key.fn === "onPage") {
            page = key.e;
          }
          if (key.fn === "onSortBy") {
            sort.unshift(key.e);
          }
          continue;
        }
        ret = this[key.fn].call(this, result, key.e, query);
        if (key.fn === "onAggregates") {
          agg[key.e.field + " - " + key.e.type] = ret;
        } else {
          result = ret !== void 0 ? ret : result;
        }
        if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") {
          countFlg = false;
        }
        if (countFlg) {
          count = result.length;
        }
      }
      if (keyCount) {
        var args = {
          query,
          lazyLoad,
          result,
          group,
          page,
          sort
        };
        var lazyLoadData = this.lazyLoadGroup(args);
        result = lazyLoadData.result;
        count = lazyLoadData.count;
      }
      if (query.isCountRequired) {
        result = {
          result,
          count,
          aggregates: agg
        };
      }
      return result;
    };
    JsonAdaptor2.prototype.lazyLoadGroup = function(args) {
      var count = 0;
      var agg = this.getAggregate(args.query);
      var result = args.result;
      if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {
        var req = args.lazyLoad.onDemandGroupInfo;
        for (var i = req.where.length - 1; i >= 0; i--) {
          result = this.onWhere(result, req.where[i]);
        }
        if (args.group.length !== req.level) {
          var field = args.group[req.level].fieldName;
          result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);
          result = this.onSortBy(result, args.sort[parseInt(req.level.toString(), 10)], args.query, true);
        } else {
          for (var i = args.sort.length - 1; i >= req.level; i--) {
            result = this.onSortBy(result, args.sort[parseInt(i.toString(), 10)], args.query, false);
          }
        }
        count = result.length;
        var data = result;
        result = result.slice(req.skip);
        result = result.slice(0, req.take);
        if (args.group.length !== req.level) {
          this.formGroupResult(result, data);
        }
      } else {
        var field_1 = args.group[0].fieldName;
        result = DataUtil.group(result, field_1, agg, null, null, args.group[0].comparer, true);
        count = result.length;
        var data = result;
        if (args.sort.length) {
          var sort = args.sort.length > 1 ? args.sort.filter(function(x) {
            return x.fieldName === field_1;
          })[0] : args.sort[0];
          result = this.onSortBy(result, sort, args.query, true);
        }
        if (args.page) {
          result = this.onPage(result, args.page, args.query);
        }
        this.formGroupResult(result, data);
      }
      return { result, count };
    };
    JsonAdaptor2.prototype.formGroupResult = function(result, data) {
      if (result.length && data.length) {
        var uid = "GroupGuid";
        var childLevel = "childLevels";
        var level = "level";
        var records = "records";
        result[uid] = data[uid];
        result[childLevel] = data[childLevel];
        result[level] = data[level];
        result[records] = data[records];
      }
      return result;
    };
    JsonAdaptor2.prototype.getAggregate = function(query) {
      var aggQuery = Query.filterQueries(query.queries, "onAggregates");
      var agg = [];
      if (aggQuery.length) {
        var tmp = void 0;
        for (var i = 0; i < aggQuery.length; i++) {
          tmp = aggQuery[i].e;
          agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });
        }
      }
      return agg;
    };
    JsonAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var i;
      var deletedRecordsLen = changes.deletedRecords.length;
      for (i = 0; i < changes.addedRecords.length; i++) {
        this.insert(dm, changes.addedRecords[i]);
      }
      for (i = 0; i < changes.changedRecords.length; i++) {
        this.update(dm, e.key, changes.changedRecords[i]);
      }
      for (i = 0; i < deletedRecordsLen; i++) {
        this.remove(dm, e.key, changes.deletedRecords[i]);
      }
      return changes;
    };
    JsonAdaptor2.prototype.onWhere = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.filter(function(obj) {
        if (e) {
          return e.validate(obj);
        }
      });
    };
    JsonAdaptor2.prototype.onAggregates = function(ds, e) {
      var fn = DataUtil.aggregates[e.type];
      if (!ds || !fn || ds.length === 0) {
        return null;
      }
      return fn(ds, e.field);
    };
    JsonAdaptor2.prototype.onSearch = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      if (e.fieldNames.length === 0) {
        DataUtil.getFieldList(ds[0], e.fieldNames);
      }
      return ds.filter(function(obj) {
        for (var j = 0; j < e.fieldNames.length; j++) {
          if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
            return true;
          }
        }
        return false;
      });
    };
    JsonAdaptor2.prototype.onSortBy = function(ds, e, query, isLazyLoadGroupSort) {
      if (!ds || !ds.length) {
        return ds;
      }
      var fnCompare;
      var field = DataUtil.getValue(e.fieldName, query);
      if (!field) {
        return ds.sort(e.comparer);
      }
      if (field instanceof Array) {
        field = field.slice(0);
        for (var i = field.length - 1; i >= 0; i--) {
          if (!field[i]) {
            continue;
          }
          fnCompare = e.comparer;
          if (DataUtil.endsWith(field[i], " desc")) {
            fnCompare = DataUtil.fnSort("descending");
            field[i] = field[i].replace(" desc", "");
          }
          ds = DataUtil.sort(ds, field[i], fnCompare);
        }
        return ds;
      }
      return DataUtil.sort(ds, isLazyLoadGroupSort ? "key" : field, e.comparer);
    };
    JsonAdaptor2.prototype.onGroup = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var agg = this.getAggregate(query);
      return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
    };
    JsonAdaptor2.prototype.onPage = function(ds, e, query) {
      var size = DataUtil.getValue(e.pageSize, query);
      var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;
      var end = start + size;
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(start, end);
    };
    JsonAdaptor2.prototype.onRange = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));
    };
    JsonAdaptor2.prototype.onTake = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(0, DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSkip = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSelect = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));
    };
    JsonAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      if (isNullOrUndefined(position)) {
        return dm.dataSource.json.push(data);
      } else {
        return dm.dataSource.json.splice(position, 0, data);
      }
    };
    JsonAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      if (typeof value === "object" && !(value instanceof Date)) {
        value = DataUtil.getObject(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (DataUtil.getObject(keyField, ds[i]) === value) {
          break;
        }
      }
      return i !== ds.length ? ds.splice(i, 1) : null;
    };
    JsonAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      var key;
      if (!isNullOrUndefined(keyField)) {
        key = getValue(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {
          break;
        }
      }
      return i < ds.length ? merge(ds[i], value) : null;
    };
    return JsonAdaptor2;
  }(Adaptor)
);
var UrlAdaptor = (
  /** @class */
  function(_super) {
    __extends3(UrlAdaptor2, _super);
    function UrlAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UrlAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var params = query.params;
      var url = dm.dataSource.url;
      var temp;
      var skip;
      var take = null;
      var options = this.options;
      var request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      if ("onPage" in singles) {
        temp = singles.onPage;
        skip = DataUtil.getValue(temp.pageIndex, query);
        take = DataUtil.getValue(temp.pageSize, query);
        skip = (skip - 1) * take;
      } else if ("onRange" in singles) {
        temp = singles.onRange;
        skip = temp.start;
        take = temp.end - temp.start;
      }
      for (var i = 0; i < queries.sorts.length; i++) {
        temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);
        request.sorts.push(DataUtil.callAdaptorFunction(this, "onEachSort", { name: temp, direction: queries.sorts[i].e.direction }, query));
      }
      if (hierarchyFilters) {
        temp = this.getFiltersFrom(hierarchyFilters, query);
        if (temp) {
          request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", temp.toJson(), query));
        }
      }
      for (var i = 0; i < queries.filters.length; i++) {
        var res = DataUtil.callAdaptorFunction(this, "onEachWhere", queries.filters[i].e.toJson(), query);
        if (this.getModuleName && this.getModuleName() === "ODataV4Adaptor" && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {
          res = "(" + res + ")";
        }
        request.filters.push(res);
        var keys_3 = typeof request.filters[i] === "object" ? Object.keys(request.filters[i]) : [];
        for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          if (DataUtil.isNull(request[prop])) {
            delete request[prop];
          }
        }
      }
      for (var i = 0; i < queries.searches.length; i++) {
        temp = queries.searches[i].e;
        request.searches.push(DataUtil.callAdaptorFunction(this, "onEachSearch", {
          fields: temp.fieldNames,
          operator: temp.operator,
          key: temp.searchKey,
          ignoreCase: temp.ignoreCase
        }, query));
      }
      for (var i = 0; i < queries.groups.length; i++) {
        request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));
      }
      for (var i = 0; i < queries.aggregates.length; i++) {
        temp = queries.aggregates[i].e;
        request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });
      }
      var req = {};
      this.getRequestQuery(options, query, singles, request, req);
      DataUtil.callAdaptorFunction(this, "addParams", { dm, query, params, reqParams: req });
      if (query.lazyLoad.length) {
        for (var i = 0; i < query.lazyLoad.length; i++) {
          req[query.lazyLoad[i].key] = query.lazyLoad[i].value;
        }
      }
      var keys = Object.keys(req);
      for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
        var prop = keys_2[_a];
        if (DataUtil.isNull(req[prop]) || req[prop] === "" || req[prop].length === 0) {
          delete req[prop];
        }
      }
      if (!(options.skip in req && options.take in req) && take !== null) {
        req[options.skip] = DataUtil.callAdaptorFunction(this, "onSkip", skip, query);
        req[options.take] = DataUtil.callAdaptorFunction(this, "onTake", take, query);
      }
      var p = this.pvt;
      this.pvt = {};
      if (this.options.requestType === "json") {
        return {
          data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),
          url,
          pvtData: p,
          type: "POST",
          contentType: "application/json; charset=utf-8"
        };
      }
      temp = this.convertToQueryString(req, query, dm);
      temp = (dm.dataSource.url.indexOf("?") !== -1 ? "&" : "/") + temp;
      return {
        type: "GET",
        url: temp.length ? url.replace(/\/*$/, temp) : url,
        pvtData: p
      };
    };
    UrlAdaptor2.prototype.getRequestQuery = function(options, query, singles, request, request1) {
      var param = "param";
      var req = request1;
      req[options.from] = query.fromTable;
      if (options.apply && query.distincts.length) {
        req[options.apply] = "onDistinct" in this ? DataUtil.callAdaptorFunction(this, "onDistinct", query.distincts) : "";
      }
      if (!query.distincts.length && options.expand) {
        req[options.expand] = "onExpand" in this && "onSelect" in singles ? DataUtil.callAdaptorFunction(this, "onExpand", { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;
      }
      req[options.select] = "onSelect" in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, "onSelect", DataUtil.getValue(singles.onSelect.fieldNames, query), query) : "";
      req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, "onCount", query.isCountRequired, query) : "";
      req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, "onSearch", request.searches, query) : "";
      req[options.skip] = "onSkip" in singles ? DataUtil.callAdaptorFunction(this, "onSkip", DataUtil.getValue(singles.onSkip.nos, query), query) : "";
      req[options.take] = "onTake" in singles ? DataUtil.callAdaptorFunction(this, "onTake", DataUtil.getValue(singles.onTake.nos, query), query) : "";
      req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, "onWhere", request.filters, query) : "";
      req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, "onSortBy", request.sorts, query) : "";
      req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, "onGroup", request.groups, query) : "";
      req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, "onAggregates", request.aggregates, query) : "";
      req[param] = [];
    };
    UrlAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      return "";
    };
    UrlAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("application/json") !== -1) {
        var handleTimeZone = DataUtil.timeZoneHandling;
        if (ds && !ds.timeZoneHandling) {
          DataUtil.timeZoneHandling = false;
        }
        data = DataUtil.parse.parseJson(data);
        DataUtil.timeZoneHandling = handleTimeZone;
      }
      var requests = request;
      var pvt = requests.pvtData || {};
      var groupDs = data ? data.groupDs : [];
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      var d = JSON.parse(requests.data);
      if (d && d.action === "batch" && data && data.addedRecords) {
        changes.addedRecords = data.addedRecords;
        return changes;
      }
      if (data && data.d) {
        data = data.d;
      }
      var args = {};
      if (data && "count" in data) {
        args.count = data.count;
      }
      args.result = data && data.result ? data.result : data;
      var isExpand = false;
      if (Array.isArray(data.result) && data.result.length) {
        var key = "key";
        var val = "value";
        var level = "level";
        if (!isNullOrUndefined(data.result[0][key])) {
          args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);
        }
        if (query && query.lazyLoad.length && pvt.groups.length) {
          for (var i = 0; i < query.lazyLoad.length; i++) {
            if (query.lazyLoad[i][key] === "onDemandGroupInfo") {
              var value = query.lazyLoad[i][val][level];
              if (pvt.groups.length === value) {
                isExpand = true;
              }
            }
          }
        }
      }
      if (!isExpand) {
        this.getAggregateResult(pvt, data, args, groupDs, query);
      }
      return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    UrlAdaptor2.prototype.formRemoteGroupedData = function(data, level, childLevel) {
      for (var i = 0; i < data.length; i++) {
        if (data[i].items.length && Object.keys(data[i].items[0]).indexOf("key") > -1) {
          this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);
        }
      }
      var uid = "GroupGuid";
      var childLvl = "childLevels";
      var lvl = "level";
      var records = "records";
      data[uid] = consts2[uid];
      data[lvl] = level;
      data[childLvl] = childLevel;
      data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];
      return data;
    };
    UrlAdaptor2.prototype.getGroupedRecords = function(data, hasRecords) {
      var childGroupedRecords = [];
      var records = "records";
      for (var i = 0; i < data.length; i++) {
        if (!hasRecords) {
          for (var j = 0; j < data[i].items.length; j++) {
            childGroupedRecords.push(data[i].items[j]);
          }
        } else {
          childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);
        }
      }
      return childGroupedRecords;
    };
    UrlAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return e;
    };
    UrlAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
    };
    UrlAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var url;
      var key;
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e[url],
          key: e[key]
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.beforeSend = function(dm, request) {
    };
    UrlAdaptor2.prototype.insert = function(dm, data, tableName, query) {
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.remove = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: value,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.update = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value,
          action: "update",
          keyColumn: keyField,
          key: DataUtil.getObject(keyField, value),
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.getFiltersFrom = function(data, query) {
      var key = query.fKey;
      var value;
      var prop = key;
      var pKey = query.key;
      var predicats = [];
      if (typeof data[0] !== "object") {
        prop = null;
      }
      for (var i = 0; i < data.length; i++) {
        if (typeof data[0] === "object") {
          value = DataUtil.getObject(pKey || prop, data[i]);
        } else {
          value = data[i];
        }
        predicats.push(new Predicate(key, "equal", value));
      }
      return Predicate.or(predicats);
    };
    UrlAdaptor2.prototype.getAggregateResult = function(pvt, data, args, groupDs, query) {
      var pData = data;
      if (data && data.result) {
        pData = data.result;
      }
      if (pvt && pvt.aggregates && pvt.aggregates.length) {
        var agg = pvt.aggregates;
        var fn = void 0;
        var aggregateData = pData;
        var res = {};
        if (data.aggregate) {
          aggregateData = data.aggregate;
        }
        for (var i = 0; i < agg.length; i++) {
          fn = DataUtil.aggregates[agg[i].type];
          if (fn) {
            res[agg[i].field + " - " + agg[i].type] = fn(aggregateData, agg[i].field);
          }
        }
        args.aggregates = res;
      }
      var key = "key";
      var isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);
      if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {
        var groups = pvt.groups;
        for (var i = 0; i < groups.length; i++) {
          var level = null;
          if (!isNullOrUndefined(groupDs)) {
            groupDs = DataUtil.group(groupDs, groups[i]);
          }
          var groupQuery = Query.filterQueries(query.queries, "onGroup")[i].e;
          pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
        }
        args.result = pData;
      }
      return args;
    };
    UrlAdaptor2.prototype.getQueryRequest = function(query) {
      var req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      req.sorts = Query.filterQueries(query.queries, "onSortBy");
      req.groups = Query.filterQueries(query.queries, "onGroup");
      req.filters = Query.filterQueries(query.queries, "onWhere");
      req.searches = Query.filterQueries(query.queries, "onSearch");
      req.aggregates = Query.filterQueries(query.queries, "onAggregates");
      return req;
    };
    UrlAdaptor2.prototype.addParams = function(options) {
      var req = options.reqParams;
      if (options.params.length) {
        req.params = {};
      }
      for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
        var tmp = _a[_i];
        if (req[tmp.key]) {
          throw new Error("Query() - addParams: Custom Param is conflicting other request arguments");
        }
        req[tmp.key] = tmp.value;
        if (tmp.fn) {
          req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
        }
        req.params[tmp.key] = req[tmp.key];
      }
    };
    return UrlAdaptor2;
  }(Adaptor)
);
var ODataAdaptor = (
  /** @class */
  function(_super) {
    __extends3(ODataAdaptor2, _super);
    function ODataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$inlinecount",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PUT"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataAdaptor2.prototype.getModuleName = function() {
      return "ODataAdaptor";
    };
    ODataAdaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var operator;
      var guid;
      var val = predicate.value;
      var type = typeof val;
      var field = predicate.field ? ODataAdaptor2.getField(predicate.field) : null;
      if (val instanceof Date) {
        val = "datetime'" + DataUtil.parse.replacer(val) + "'";
      }
      if (type === "string") {
        val = val.replace(/'/g, "''");
        if (predicate.ignoreCase) {
          val = val.toLowerCase();
        }
        if (predicate.operator !== "like") {
          val = encodeURIComponent(val);
        }
        if (predicate.operator !== "wildcard" && predicate.operator !== "like") {
          val = "'" + val + "'";
        }
        if (requiresCast) {
          field = "cast(" + field + ", 'Edm.String')";
        }
        if (DataUtil.parse.isGuid(val)) {
          guid = "guid";
        }
        if (predicate.ignoreCase) {
          if (!guid) {
            field = "tolower(" + field + ")";
          }
          val = val.toLowerCase();
        }
      }
      if (predicate.operator === "isempty" || predicate.operator === "isnull" || predicate.operator === "isnotempty" || predicate.operator === "isnotnull") {
        operator = predicate.operator.indexOf("isnot") !== -1 ? DataUtil.odBiOperator["notequal"] : DataUtil.odBiOperator["equal"];
        val = predicate.operator === "isnull" || predicate.operator === "isnotnull" ? null : "''";
      } else {
        operator = DataUtil.odBiOperator[predicate.operator];
      }
      if (operator) {
        returnValue += field;
        returnValue += operator;
        if (guid) {
          returnValue += guid;
        }
        return returnValue + val;
      }
      if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor") {
        operator = DataUtil.odv4UniOperator[predicate.operator];
      } else {
        operator = DataUtil.odUniOperator[predicate.operator];
      }
      if (operator === "like") {
        val = val;
        if (val.indexOf("%") !== -1) {
          if (val.charAt(0) === "%" && val.lastIndexOf("%") < 2) {
            val = val.substring(1, val.length);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
          } else if (val.charAt(val.length - 1) === "%" && val.indexOf("%") > val.length - 3) {
            val = val.substring(0, val.length - 1);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
          } else if (val.lastIndexOf("%") !== val.indexOf("%") && val.lastIndexOf("%") > val.indexOf("%") + 1) {
            val = val.substring(val.indexOf("%") + 1, val.lastIndexOf("%"));
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          } else {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          }
        }
        val = encodeURIComponent(val);
        val = "'" + val + "'";
      } else if (operator === "wildcard") {
        val = val;
        if (val.indexOf("*") !== -1) {
          var splittedStringValue = val.split("*");
          var splittedValue = void 0;
          var count = 0;
          if (val.indexOf("*") !== 0 && splittedStringValue[0].indexOf("%3f") === -1 && splittedStringValue[0].indexOf("?") === -1) {
            splittedValue = splittedStringValue[0];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (val.lastIndexOf("*") !== val.length - 1 && splittedStringValue[splittedStringValue.length - 1].indexOf("%3f") === -1 && splittedStringValue[splittedStringValue.length - 1].indexOf("?") === -1) {
            splittedValue = splittedStringValue[splittedStringValue.length - 1];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
            if (count > 0) {
              returnValue += " and ";
            }
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (splittedStringValue.length > 2) {
            for (var i = 1; i < splittedStringValue.length - 1; i++) {
              if (splittedStringValue[i].indexOf("%3f") === -1 && splittedStringValue[i].indexOf("?") === -1) {
                splittedValue = splittedStringValue[i];
                splittedValue = "'" + splittedValue + "'";
                operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
                if (count > 0) {
                  returnValue += " and ";
                }
                if (operator === "substringof" || operator === "not substringof") {
                  var temp = splittedValue;
                  splittedValue = field;
                  field = temp;
                }
                returnValue += operator + "(";
                returnValue += field + ",";
                if (guid) {
                  returnValue += guid;
                }
                returnValue += splittedValue + ")";
                count++;
              }
            }
          }
          if (count === 0) {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
            if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
              val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
            }
            val = "'" + val + "'";
          } else {
            operator = "wildcard";
          }
        } else {
          operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
            val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
          }
          val = "'" + val + "'";
        }
      }
      if (operator === "substringof" || operator === "not substringof") {
        var temp = val;
        val = field;
        field = temp;
      }
      if (operator !== "wildcard") {
        returnValue += operator + "(";
        returnValue += field + ",";
        if (guid) {
          returnValue += guid;
        }
        returnValue += val + ")";
      }
      return returnValue;
    };
    ODataAdaptor2.prototype.addParams = function(options) {
      _super.prototype.addParams.call(this, options);
      delete options.reqParams.params;
    };
    ODataAdaptor2.prototype.onComplexPredicate = function(predicate, query, requiresCast) {
      var res = [];
      for (var i = 0; i < predicate.predicates.length; i++) {
        res.push("(" + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ")");
      }
      return res.join(" " + predicate.condition + " ");
    };
    ODataAdaptor2.prototype.onEachWhere = function(filter, query, requiresCast) {
      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
    };
    ODataAdaptor2.prototype.onWhere = function(filters) {
      if (this.pvt.search) {
        filters.push(this.onEachWhere(this.pvt.search, null, true));
      }
      return filters.join(" and ");
    };
    ODataAdaptor2.prototype.onEachSearch = function(e) {
      if (e.fields && e.fields.length === 0) {
        DataUtil.throwError("Query() - Search : oData search requires list of field names to search");
      }
      var filter = this.pvt.search || [];
      for (var i = 0; i < e.fields.length; i++) {
        filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
      }
      this.pvt.search = filter;
    };
    ODataAdaptor2.prototype.onSearch = function(e) {
      this.pvt.search = Predicate.or(this.pvt.search);
      return "";
    };
    ODataAdaptor2.prototype.onEachSort = function(e) {
      var res = [];
      if (e.name instanceof Array) {
        for (var i = 0; i < e.name.length; i++) {
          res.push(ODataAdaptor2.getField(e.name[i]) + (e.direction === "descending" ? " desc" : ""));
        }
      } else {
        res.push(ODataAdaptor2.getField(e.name) + (e.direction === "descending" ? " desc" : ""));
      }
      return res.join(",");
    };
    ODataAdaptor2.prototype.onSortBy = function(e) {
      return e.reverse().join(",");
    };
    ODataAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return [];
    };
    ODataAdaptor2.prototype.onSelect = function(e) {
      for (var i = 0; i < e.length; i++) {
        e[i] = ODataAdaptor2.getField(e[i]);
      }
      return e.join(",");
    };
    ODataAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
      return "";
    };
    ODataAdaptor2.prototype.onCount = function(e) {
      return e === true ? "allpages" : "";
    };
    ODataAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === "post") {
        request.headers.set("Accept", this.options.multipartAccept);
        request.headers.set("DataServiceVersion", "2.0");
      } else {
        request.headers.set("Accept", this.options.accept);
      }
      request.headers.set("DataServiceVersion", "2.0");
      request.headers.set("MaxDataServiceVersion", "2.0");
    };
    ODataAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaCheck = "odata.metadata";
      if (request && request.type === "GET" && !this.rootUrl && data[metaCheck]) {
        var dataUrls = data[metaCheck].split("/$metadata#");
        this.rootUrl = dataUrls[0];
        this.resourceTableName = dataUrls[1];
      }
      var pvtData = "pvtData";
      if (!isNullOrUndefined(data.d)) {
        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
        var metaData = "__metadata";
        if (!isNullOrUndefined(dataCopy)) {
          for (var i = 0; i < dataCopy.length; i++) {
            if (!isNullOrUndefined(dataCopy[i][metaData])) {
              delete dataCopy[i][metaData];
            }
          }
        }
      }
      var pvt = request && request[pvtData];
      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var versionCheck = xhr && request.fetchRequest.headers.get("DataServiceVersion");
      var count = null;
      var version = versionCheck && parseInt(versionCheck, 10) || 2;
      if (query && query.isCountRequired) {
        var oDataCount = "__count";
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
        if (data.d) {
          data = data.d;
        }
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
      }
      if (version === 3 && data.value) {
        data = data.value;
      }
      if (data.d) {
        data = data.d;
      }
      if (version < 3 && data.results) {
        data = data.results;
      }
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    ODataAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      var res = [];
      var table = "table";
      var tableName = request[table] || "";
      var format = "$format";
      delete request[table];
      if (dm.dataSource.requiresFormat) {
        request[format] = "json";
      }
      var keys = Object.keys(request);
      for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {
        var prop = keys_4[_i];
        res.push(prop + "=" + request[prop]);
      }
      res = res.join("&");
      if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName) {
        return res;
      }
      return res.length ? tableName + "?" + res : tableName || "";
    };
    ODataAdaptor2.prototype.localTimeReplacer = function(key, convertObj) {
      for (var _i = 0, _a = !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
        var prop = _a[_i];
        if (convertObj[prop] instanceof Date) {
          convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);
        }
      }
      return convertObj;
    };
    ODataAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : ""),
        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
      };
    };
    ODataAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var url;
      if (typeof value === "string" && !DataUtil.parse.isGuid(value)) {
        url = "('" + value + "')";
      } else {
        url = "(" + value + ")";
      }
      return {
        type: "DELETE",
        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url
      };
    };
    ODataAdaptor2.prototype.update = function(dm, keyField, value, tableName, query, original) {
      if (this.options.updateType === "PATCH" && !isNullOrUndefined(original)) {
        value = this.compareAndRemove(value, original, keyField);
      }
      var url;
      if (typeof value[keyField] === "string" && !DataUtil.parse.isGuid(value[keyField])) {
        url = "('" + value[keyField] + "')";
      } else {
        url = "(" + value[keyField] + ")";
      }
      return {
        type: this.options.updateType,
        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url,
        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
        accept: this.options.accept
      };
    };
    ODataAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.batchUrl || this.rootUrl ? (dm.dataSource.batchUrl || this.rootUrl) + "/" + this.options.batch : (dm.dataSource.batchUrl || dm.dataSource.url).replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var args = {
        url: e.url,
        key: e.key,
        cid: 1,
        cSet: DataUtil.getGuid(this.options.changeSet)
      };
      var req = "--" + initialGuid + "\n";
      req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";
      this.pvt.changeSet = 0;
      req += this.generateInsertRequest(changes.addedRecords, args, dm);
      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
      req += args.cSet + "--\n";
      req += "--" + initialGuid + "--";
      return {
        type: "POST",
        url,
        dataType: "json",
        contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
        data: req
      };
    };
    ODataAdaptor2.prototype.generateDeleteRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "DELETE ",
        "url": function(data, i, key) {
          var url = DataUtil.getObject(key, data[i]);
          if (typeof url === "number" || DataUtil.parse.isGuid(url)) {
            return "(" + url + ")";
          } else if (url instanceof Date) {
            var dateTime = data[i][key];
            return "(" + dateTime.toJSON() + ")";
          } else {
            return "('" + url + "')";
          }
        },
        "data": function(data, i) {
          return "";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req + "\n";
    };
    ODataAdaptor2.prototype.generateInsertRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "POST ",
        "url": function(data, i, key) {
          return "";
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.prototype.generateUpdateRequest = function(arr, e, dm, org) {
      var _this = this;
      if (!arr) {
        return "";
      }
      var req = "";
      arr.forEach(function(change) {
        return change = _this.compareAndRemove(change, org.filter(function(o) {
          return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
        })[0], e.key);
      });
      var stat = {
        "method": this.options.updateType + " ",
        "url": function(data, i, key) {
          if (typeof data[i][key] === "number" || DataUtil.parse.isGuid(data[i][key])) {
            return "(" + data[i][key] + ")";
          } else if (data[i][key] instanceof Date) {
            var date = data[i][key];
            return "(" + date.toJSON() + ")";
          } else {
            return "('" + data[i][key] + "')";
          }
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.getField = function(prop) {
      return prop.replace(/\./g, "/");
    };
    ODataAdaptor2.prototype.generateBodyContent = function(arr, e, stat, dm) {
      var req = "";
      for (var i = 0; i < arr.length; i++) {
        req += "\n" + e.cSet + "\n";
        req += this.options.changeSetContent + "\n\n";
        req += stat.method;
        if (stat.method === "POST ") {
          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "PUT " || stat.method === "PATCH ") {
          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "DELETE ") {
          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        }
        req += "Accept: " + this.options.accept + "\n";
        req += "Content-Id: " + this.pvt.changeSet++ + "\n";
        req += this.options.batchChangeSetContentType + "\n";
        if (!isNullOrUndefined(arr[i]["@odata.etag"])) {
          req += "If-Match: " + arr[i]["@odata.etag"] + "\n\n";
          delete arr[i]["@odata.etag"];
        } else {
          req += "\n";
        }
        req += stat.data(arr, i);
      }
      return req;
    };
    ODataAdaptor2.prototype.processBatchResponse = function(data, query, xhr, request, changes) {
      if (xhr && xhr.headers.get("Content-Type") && xhr.headers.get("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === "post") {
        var guid = xhr.headers.get("Content-Type");
        var cIdx = void 0;
        var jsonObj = void 0;
        var d = data + "";
        guid = guid.substring(guid.indexOf("=batchresponse") + 1);
        d = d.split(guid);
        if (d.length < 2) {
          return {};
        }
        d = d[1];
        var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);
        if (exVal) {
          d.replace(exVal[0], "");
        }
        var changeGuid = exVal ? exVal[1] : "";
        d = d.split(changeGuid);
        for (var i = d.length; i > -1; i--) {
          if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
            continue;
          }
          cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);
          if (changes.addedRecords[cIdx]) {
            jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
            extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
          }
        }
        return changes;
      }
      return null;
    };
    ODataAdaptor2.prototype.compareAndRemove = function(data, original, key) {
      var _this = this;
      if (isNullOrUndefined(original)) {
        return data;
      }
      Object.keys(data).forEach(function(prop) {
        if (prop !== key && prop !== "@odata.etag") {
          if (DataUtil.isPlainObject(data[prop])) {
            _this.compareAndRemove(data[prop], original[prop]);
            var final = Object.keys(data[prop]).filter(function(data2) {
              return data2 !== "@odata.etag";
            });
            if (final.length === 0) {
              delete data[prop];
            }
          } else if (data[prop] === original[prop]) {
            delete data[prop];
          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
            delete data[prop];
          }
        }
      });
      return data;
    };
    return ODataAdaptor2;
  }(UrlAdaptor)
);
var ODataV4Adaptor = (
  /** @class */
  function(_super) {
    __extends3(ODataV4Adaptor2, _super);
    function ODataV4Adaptor2(props) {
      var _this = _super.call(this, props) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json, text/javascript, */*; q=0.01",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$count",
        search: "$search",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PATCH",
        localTime: false,
        apply: "$apply"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataV4Adaptor2.prototype.getModuleName = function() {
      return "ODataV4Adaptor";
    };
    ODataV4Adaptor2.prototype.onCount = function(e) {
      return e === true ? "true" : "";
    };
    ODataV4Adaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var val = predicate.value;
      var isDate = val instanceof Date;
      if (query instanceof Query) {
        var queries = this.getQueryRequest(query);
        for (var i = 0; i < queries.filters.length; i++) {
          if (queries.filters[i].e.key === predicate.value) {
            requiresCast = true;
          }
        }
      }
      returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);
      if (isDate) {
        returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");
      }
      if (DataUtil.parse.isGuid(val)) {
        returnValue = returnValue.replace("guid", "").replace(/'/g, "");
      }
      return returnValue;
    };
    ODataV4Adaptor2.prototype.onEachSearch = function(e) {
      var search = this.pvt.searches || [];
      search.push(e.key);
      this.pvt.searches = search;
    };
    ODataV4Adaptor2.prototype.onSearch = function(e) {
      return this.pvt.searches.join(" OR ");
    };
    ODataV4Adaptor2.prototype.onExpand = function(e) {
      var _this = this;
      var selected = {};
      var expanded = {};
      var expands = e.expands.slice();
      var exArr = [];
      var selects = e.selects.filter(function(item) {
        return item.indexOf(".") > -1;
      });
      selects.forEach(function(select3) {
        var splits = select3.split(".");
        if (!(splits[0] in selected)) {
          selected[splits[0]] = [];
        }
        if (splits.length === 2) {
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {
            if (selected[splits[0]][0].indexOf("$expand") !== -1 && selected[splits[0]][0].indexOf(";$select=") === -1) {
              selected[splits[0]][0] = selected[splits[0]][0] + ";$select=" + splits[1];
            } else {
              selected[splits[0]][0] = selected[splits[0]][0] + "," + splits[1];
            }
          } else {
            selected[splits[0]].push("$select=" + splits[1]);
          }
        } else {
          var sel = "$select=" + splits[splits.length - 1];
          var exp = "";
          var close_1 = "";
          for (var i = 1; i < splits.length - 1; i++) {
            exp = exp + "$expand=" + splits[i] + "(";
            close_1 = close_1 + ")";
          }
          var combineVal = exp + sel + close_1;
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && _this.expandQueryIndex(selected[splits[0]], true)) {
            var idx = _this.expandQueryIndex(selected[splits[0]]);
            selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace("$expand=", ",");
          } else {
            selected[splits[0]].push(combineVal);
          }
        }
      });
      Object.keys(selected).forEach(function(expand) {
        if (expands.indexOf(expand) === -1) {
          expands.push(expand);
        }
      });
      expands.forEach(function(expand) {
        expanded[expand] = expand in selected ? expand + "(" + selected[expand].join(";") + ")" : expand;
      });
      Object.keys(expanded).forEach(function(ex) {
        return exArr.push(expanded[ex]);
      });
      return exArr.join(",");
    };
    ODataV4Adaptor2.prototype.expandQueryIndex = function(query, isExpand) {
      for (var i = 0; i < query.length; i++) {
        if (query[i].indexOf("$expand") !== -1) {
          return isExpand ? true : i;
        }
      }
      return isExpand ? false : 0;
    };
    ODataV4Adaptor2.prototype.onDistinct = function(distinctFields) {
      var fields = distinctFields.map(function(field) {
        return ODataAdaptor.getField(field);
      }).join(",");
      return "groupby((" + fields + "))";
    };
    ODataV4Adaptor2.prototype.onSelect = function(e) {
      return _super.prototype.onSelect.call(this, e.filter(function(item) {
        return item.indexOf(".") === -1;
      }));
    };
    ODataV4Adaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (settings.type === "POST" || settings.type === "PUT" || settings.type === "PATCH") {
        request.headers.set("Prefer", "return=representation");
      }
      request.headers.set("Accept", this.options.accept);
    };
    ODataV4Adaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaName = "@odata.context";
      var metaV4Name = "@context";
      if (request && request.type === "GET" && !this.rootUrl && (data[metaName] || data[metaV4Name])) {
        var dataUrl = data[metaName] ? data[metaName].split("/$metadata#") : data[metaV4Name].split("/$metadata#");
        this.rootUrl = dataUrl[0];
        this.resourceTableName = dataUrl[1];
      }
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var count = null;
      var dataCount = "@odata.count";
      var dataV4Count = "@count";
      if (query && query.isCountRequired) {
        if (dataCount in data) {
          count = data[dataCount];
        } else if (dataV4Count in data) {
          count = data[dataV4Count];
        }
      }
      data = !isNullOrUndefined(data.value) ? data.value : data;
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count, aggregates: args.aggregates };
    };
    return ODataV4Adaptor2;
  }(ODataAdaptor)
);
var WebApiAdaptor = (
  /** @class */
  function(_super) {
    __extends3(WebApiAdaptor2, _super);
    function WebApiAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebApiAdaptor2.prototype.getModuleName = function() {
      return "WebApiAdaptor";
    };
    WebApiAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        type: "POST",
        url: dm.dataSource.url,
        data: JSON.stringify(data)
      };
    };
    WebApiAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      return {
        type: "DELETE",
        url: dm.dataSource.url + "/" + value,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      return {
        type: "PUT",
        url: dm.dataSource.url,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var _this = this;
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var req = [];
      var _loop_1 = function(i2, x2) {
        changes.addedRecords.forEach(function(j, d) {
          var stat = {
            "method": "POST ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("POST /api/" + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
        _loop_1(i, x);
      }
      var _loop_2 = function(i2, x2) {
        changes.changedRecords.forEach(function(j, d) {
          var stat = {
            "method": _this.options.updateType + " ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("PUT /api/" + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
        _loop_2(i, x);
      }
      var _loop_3 = function(i2, x2) {
        changes.deletedRecords.forEach(function(j, d) {
          var state = {
            "mtd": "DELETE ",
            "url": function(data, i3, key) {
              var url2 = DataUtil.getObject(key, data[i3]);
              if (typeof url2 === "number" || DataUtil.parse.isGuid(url2)) {
                return "/" + url2;
              } else if (url2 instanceof Date) {
                var datTime = data[i3][key];
                return "/" + datTime.toJSON();
              } else {
                return "/'" + url2 + "'";
              }
            },
            "data": function(data, i3) {
              return "";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("DELETE /api/" + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
        _loop_3(i, x);
      }
      req.push("--" + initialGuid + "--", "");
      return {
        type: "POST",
        url,
        contentType: "multipart/mixed; boundary=" + initialGuid,
        data: req.join("\r\n")
      };
    };
    WebApiAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      request.headers.set("Accept", "application/json, text/javascript, */*; q=0.01");
    };
    WebApiAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var count = null;
      var args = {};
      if (request && request.type.toLowerCase() !== "post") {
        var versionCheck = xhr && request.fetchRequest.headers.get("DataServiceVersion");
        var version = versionCheck && parseInt(versionCheck, 10) || 2;
        if (query && query.isCountRequired) {
          if (!DataUtil.isNull(data.Count)) {
            count = data.Count;
          }
        }
        if (version < 3 && data.Items) {
          data = data.Items;
        }
        args.count = count;
        args.result = data;
        this.getAggregateResult(pvt, data, args, null, query);
      }
      args.result = args.result || data;
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    return WebApiAdaptor2;
  }(ODataAdaptor)
);
var WebMethodAdaptor = (
  /** @class */
  function(_super) {
    __extends3(WebMethodAdaptor2, _super);
    function WebMethodAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebMethodAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
      var getData = "data";
      var data = DataUtil.parse.parseJson(obj[getData]);
      var result = {};
      var value = "value";
      if (data.param) {
        for (var i = 0; i < data.param.length; i++) {
          var param = data.param[i];
          var key = Object.keys(param)[0];
          result[key] = param[key];
        }
      }
      result[value] = data;
      var pvtData = "pvtData";
      var url = "url";
      return {
        data: JSON.stringify(result, DataUtil.parse.jsonDateReplacer),
        url: obj[url],
        pvtData: obj[pvtData],
        type: "POST",
        contentType: "application/json; charset=utf-8"
      };
    };
    return WebMethodAdaptor2;
  }(UrlAdaptor)
);
var RemoteSaveAdaptor = (
  /** @class */
  function(_super) {
    __extends3(RemoteSaveAdaptor2, _super);
    function RemoteSaveAdaptor2() {
      var _this = _super.call(this) || this;
      setValue("beforeSend", UrlAdaptor.prototype.beforeSend, _this);
      return _this;
    }
    RemoteSaveAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      this.pvt.position = position;
      this.updateType = "add";
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.remove = function(dm, keyField, val, tableName, query) {
      _super.prototype.remove.call(this, dm, keyField, val);
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: val,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.update = function(dm, keyField, val, tableName, query) {
      this.updateType = "update";
      this.updateKey = keyField;
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: val,
          action: "update",
          keyColumn: keyField,
          key: val[keyField],
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes, e) {
      var i;
      var newData = request ? JSON.parse(request.data) : data;
      data = newData.action === "batch" ? DataUtil.parse.parseJson(data) : data;
      if (this.updateType === "add") {
        _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
      }
      if (this.updateType === "update") {
        _super.prototype.update.call(this, ds, this.updateKey, data);
      }
      this.updateType = void 0;
      if (data.added) {
        for (i = 0; i < data.added.length; i++) {
          _super.prototype.insert.call(this, ds, data.added[i]);
        }
      }
      if (data.changed) {
        for (i = 0; i < data.changed.length; i++) {
          _super.prototype.update.call(this, ds, e.key, data.changed[i]);
        }
      }
      if (data.deleted) {
        for (i = 0; i < data.deleted.length; i++) {
          _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
        }
      }
      return data;
    };
    RemoteSaveAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e.url,
          key: e.key
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.addParams = function(options) {
      var urlParams = new UrlAdaptor();
      urlParams.addParams(options);
    };
    return RemoteSaveAdaptor2;
  }(JsonAdaptor)
);
var CustomDataAdaptor = (
  /** @class */
  function(_super) {
    __extends3(CustomDataAdaptor2, _super);
    function CustomDataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        getData: new Function(),
        addRecord: new Function(),
        updateRecord: new Function(),
        deleteRecord: new Function(),
        batchUpdate: new Function()
      });
      extend(_this.options, props || {});
      return _this;
    }
    CustomDataAdaptor2.prototype.getModuleName = function() {
      return "CustomDataAdaptor";
    };
    return CustomDataAdaptor2;
  }(UrlAdaptor)
);
var GraphQLAdaptor = (
  /** @class */
  function(_super) {
    __extends3(GraphQLAdaptor2, _super);
    function GraphQLAdaptor2(options) {
      var _this = _super.call(this) || this;
      _this.opt = options;
      _this.schema = _this.opt.response;
      _this.query = _this.opt.query;
      _this.getVariables = _this.opt.getVariables ? _this.opt.getVariables : function() {
      };
      _this.getQuery = function() {
        return _this.query;
      };
      return _this;
    }
    GraphQLAdaptor2.prototype.getModuleName = function() {
      return "GraphQLAdaptor";
    };
    GraphQLAdaptor2.prototype.processQuery = function(datamanager, query) {
      var urlQuery = _super.prototype.processQuery.apply(this, arguments);
      var dm = JSON.parse(urlQuery.data);
      var keys = [
        "skip",
        "take",
        "sorted",
        "table",
        "select",
        "where",
        "search",
        "requiresCounts",
        "aggregates",
        "params"
      ];
      var temp = {};
      var str = "searchwhereparams";
      keys.filter(function(e) {
        temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];
      });
      var vars = this.getVariables() || {};
      vars["datamanager"] = temp;
      var data = JSON.stringify({
        query: this.getQuery(),
        variables: vars
      });
      urlQuery.data = data;
      return urlQuery;
    };
    GraphQLAdaptor2.prototype.processResponse = function(resData, ds, query, xhr, request) {
      var res = resData;
      var count;
      var aggregates;
      var result = getValue(this.schema.result, res.data);
      if (this.schema.count) {
        count = getValue(this.schema.count, res.data);
      }
      if (this.schema.aggregates) {
        aggregates = getValue(this.schema.aggregates, res.data);
        aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;
      }
      var pvt = request.pvtData || {};
      var args = { result, aggregates };
      var data = args;
      if (pvt && pvt.groups && pvt.groups.length) {
        this.getAggregateResult(pvt, data, args, null, query);
      }
      return !isNullOrUndefined(count) ? { result: args.result, count, aggregates } : args.result;
    };
    GraphQLAdaptor2.prototype.insert = function() {
      var inserted = _super.prototype.insert.apply(this, arguments);
      return this.generateCrudData(inserted, "insert");
    };
    GraphQLAdaptor2.prototype.update = function() {
      var inserted = _super.prototype.update.apply(this, arguments);
      return this.generateCrudData(inserted, "update");
    };
    GraphQLAdaptor2.prototype.remove = function() {
      var inserted = _super.prototype.remove.apply(this, arguments);
      return this.generateCrudData(inserted, "remove");
    };
    GraphQLAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var batch = _super.prototype.batchRequest.apply(this, arguments);
      var bData = JSON.parse(batch.data);
      bData.key = e.key;
      batch.data = JSON.stringify(bData);
      return this.generateCrudData(batch, "batch");
    };
    GraphQLAdaptor2.prototype.generateCrudData = function(crudData, action) {
      var parsed = JSON.parse(crudData.data);
      crudData.data = JSON.stringify({
        query: this.opt.getMutation(action),
        variables: parsed
      });
      return crudData;
    };
    return GraphQLAdaptor2;
  }(UrlAdaptor)
);
var CacheAdaptor = (
  /** @class */
  function(_super) {
    __extends3(CacheAdaptor2, _super);
    function CacheAdaptor2(adaptor, timeStamp, pageSize) {
      var _this = _super.call(this) || this;
      _this.isCrudAction = false;
      _this.isInsertAction = false;
      if (!isNullOrUndefined(adaptor)) {
        _this.cacheAdaptor = adaptor;
      }
      _this.pageSize = pageSize;
      _this.guidId = DataUtil.getGuid("cacheAdaptor");
      var obj = { keys: [], results: [] };
      window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
      var guid = _this.guidId;
      if (!isNullOrUndefined(timeStamp)) {
        setInterval(function() {
          var data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
          var forDel = [];
          for (var i = 0; i < data.results.length; i++) {
            var currentTime = +/* @__PURE__ */ new Date();
            var requestTime = +new Date(data.results[i].timeStamp);
            data.results[i].timeStamp = currentTime - requestTime;
            if (currentTime - requestTime > timeStamp) {
              forDel.push(i);
            }
          }
          for (var i = 0; i < forDel.length; i++) {
            data.results.splice(forDel[i], 1);
            data.keys.splice(forDel[i], 1);
          }
          window.localStorage.removeItem(guid);
          window.localStorage.setItem(guid, JSON.stringify(data));
        }, timeStamp);
      }
      return _this;
    }
    CacheAdaptor2.prototype.generateKey = function(url, query) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var key = url;
      var page = "onPage";
      if (page in singles) {
        key += singles[page].pageIndex;
      }
      queries.sorts.forEach(function(obj) {
        key += obj.e.direction + obj.e.fieldName;
      });
      queries.groups.forEach(function(obj) {
        key += obj.e.fieldName;
      });
      queries.searches.forEach(function(obj) {
        key += obj.e.searchKey;
      });
      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];
        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];
          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
          }
          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }
      return key;
    };
    CacheAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var key = this.generateKey(dm.dataSource.url, query);
      var cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
      if (data != null && !this.isCrudAction && !this.isInsertAction) {
        return data;
      }
      this.isCrudAction = null;
      this.isInsertAction = null;
      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    };
    CacheAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post") {
        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
      }
      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
      var obj = {};
      obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var index = obj.keys.indexOf(key);
      if (index !== -1) {
        obj.results.splice(index, 1);
        obj.keys.splice(index, 1);
      }
      obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: /* @__PURE__ */ new Date(), count: data.count };
      while (obj.results.length > this.pageSize) {
        obj.results.splice(0, 1);
        obj.keys.splice(0, 1);
      }
      window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      return data;
    };
    CacheAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === "post") {
        request.headers.set("Accept", this.cacheAdaptor.options.multipartAccept);
      }
      if (!dm.dataSource.crossDomain) {
        request.headers.set("Accept", this.cacheAdaptor.options.accept);
      }
    };
    CacheAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.update(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.insert = function(dm, data, tableName) {
      this.isInsertAction = true;
      return this.cacheAdaptor.insert(dm, data, tableName);
    };
    CacheAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.remove(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      return this.cacheAdaptor.batchRequest(dm, changes, e);
    };
    return CacheAdaptor2;
  }(UrlAdaptor)
);

// node_modules/@syncfusion/ej2-data/src/manager.js
var DataManager = (
  /** @class */
  function() {
    function DataManager2(dataSource, query, adaptor) {
      var _this = this;
      this.dateParse = true;
      this.timeZoneHandling = true;
      this.persistQuery = {};
      this.isInitialLoad = false;
      this.requests = [];
      this.isInitialLoad = true;
      if (!dataSource && !this.dataSource) {
        dataSource = [];
      }
      adaptor = adaptor || dataSource.adaptor;
      if (dataSource && dataSource.timeZoneHandling === false) {
        this.timeZoneHandling = dataSource.timeZoneHandling;
      }
      var data;
      if (dataSource instanceof Array) {
        data = {
          json: dataSource,
          offline: true
        };
      } else if (typeof dataSource === "object") {
        if (!dataSource.json) {
          dataSource.json = [];
        }
        if (!dataSource.enablePersistence) {
          dataSource.enablePersistence = false;
        }
        if (!dataSource.id) {
          dataSource.id = "";
        }
        if (!dataSource.ignoreOnPersist) {
          dataSource.ignoreOnPersist = [];
        }
        data = {
          url: dataSource.url,
          insertUrl: dataSource.insertUrl,
          removeUrl: dataSource.removeUrl,
          updateUrl: dataSource.updateUrl,
          crudUrl: dataSource.crudUrl,
          batchUrl: dataSource.batchUrl,
          json: dataSource.json,
          headers: dataSource.headers,
          accept: dataSource.accept,
          data: dataSource.data,
          timeTillExpiration: dataSource.timeTillExpiration,
          cachingPageSize: dataSource.cachingPageSize,
          enableCaching: dataSource.enableCaching,
          requestType: dataSource.requestType,
          key: dataSource.key,
          crossDomain: dataSource.crossDomain,
          jsonp: dataSource.jsonp,
          dataType: dataSource.dataType,
          offline: dataSource.offline !== void 0 ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,
          requiresFormat: dataSource.requiresFormat,
          enablePersistence: dataSource.enablePersistence,
          id: dataSource.id,
          ignoreOnPersist: dataSource.ignoreOnPersist
        };
      } else {
        DataUtil.throwError("DataManager: Invalid arguments");
      }
      if (data.requiresFormat === void 0 && !DataUtil.isCors()) {
        data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;
      }
      if (data.dataType === void 0) {
        data.dataType = "json";
      }
      this.dataSource = data;
      this.defaultQuery = query;
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        window.addEventListener("unload", this.setPersistData.bind(this));
      }
      if (data.url && data.offline && !data.json.length) {
        this.isDataAvailable = false;
        this.adaptor = adaptor || new ODataAdaptor();
        this.dataSource.offline = false;
        this.ready = this.executeQuery(query || new Query());
        this.ready.then(function(e) {
          _this.dataSource.offline = true;
          _this.isDataAvailable = true;
          data.json = e.result;
          _this.adaptor = new JsonAdaptor();
        });
      } else {
        this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();
      }
      if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {
        data.jsonp = "callback";
      }
      this.adaptor = adaptor || this.adaptor;
      if (data.enableCaching) {
        this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
      }
      return this;
    }
    DataManager2.prototype.getPersistedData = function(id) {
      var persistedData = localStorage.getItem(id || this.dataSource.id);
      return JSON.parse(persistedData);
    };
    DataManager2.prototype.setPersistData = function(e, id, persistData) {
      localStorage.setItem(id || this.dataSource.id, JSON.stringify(persistData || this.persistQuery));
    };
    DataManager2.prototype.setPersistQuery = function(query) {
      var _this = this;
      var persistedQuery = this.getPersistedData();
      if (this.isInitialLoad && persistedQuery && Object.keys(persistedQuery).length) {
        this.persistQuery = persistedQuery;
        this.persistQuery.queries = this.persistQuery.queries.filter(function(query2) {
          if (_this.dataSource.ignoreOnPersist && _this.dataSource.ignoreOnPersist.length) {
            if (query2.fn && _this.dataSource.ignoreOnPersist.some(function(keyword) {
              return query2.fn === keyword;
            })) {
              return false;
            }
          }
          if (query2.fn === "onWhere") {
            var e = query2.e;
            if (e && e.isComplex && e.predicates instanceof Array) {
              var allPredicates = e.predicates.map(function(predicateObj) {
                if (predicateObj.predicates && predicateObj.predicates instanceof Array) {
                  var nestedPredicates = predicateObj.predicates.map(function(nestedPredicate) {
                    var field2 = nestedPredicate.field, operator2 = nestedPredicate.operator, value2 = nestedPredicate.value, ignoreCase2 = nestedPredicate.ignoreCase, ignoreAccent2 = nestedPredicate.ignoreAccent, matchCase2 = nestedPredicate.matchCase;
                    return new Predicate(field2, operator2, value2, ignoreCase2, ignoreAccent2, matchCase2);
                  });
                  return predicateObj.condition === "and" ? Predicate.and(nestedPredicates) : Predicate.or(nestedPredicates);
                } else {
                  var field = predicateObj.field, operator = predicateObj.operator, value = predicateObj.value, ignoreCase = predicateObj.ignoreCase, ignoreAccent = predicateObj.ignoreAccent, matchCase = predicateObj.matchCase;
                  return new Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase);
                }
              });
              query2.e = new Predicate(allPredicates[0], e.condition, allPredicates.slice(1));
            }
          }
          return true;
        });
        var newQuery = extend(new Query(), this.persistQuery);
        this.isInitialLoad = false;
        return newQuery;
      } else {
        this.persistQuery = query;
        this.isInitialLoad = false;
        return query;
      }
    };
    DataManager2.prototype.setDefaultQuery = function(query) {
      this.defaultQuery = query;
      return this;
    };
    DataManager2.prototype.executeLocal = function(query) {
      if (!this.defaultQuery && !(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeLocal() : A query is required to execute");
      }
      if (!this.dataSource.json) {
        DataUtil.throwError("DataManager - executeLocal() : Json data is required to execute");
      }
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      query = query || this.defaultQuery;
      var result = this.adaptor.processQuery(this, query);
      if (query.subQuery) {
        var from = query.subQuery.fromTable;
        var lookup = query.subQuery.lookups;
        var res = query.isCountRequired ? result.result : result;
        if (lookup && lookup instanceof Array) {
          DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
        }
        for (var j = 0; j < res.length; j++) {
          if (res[j][from] instanceof Array) {
            res[j] = extend({}, {}, res[j]);
            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager2(res[j][from].slice(0))).executeLocal(), this, query);
          }
        }
      }
      return this.adaptor.processResponse(result, this, query);
    };
    DataManager2.prototype.executeQuery = function(query, done, fail, always) {
      var _this = this;
      var makeRequest = "makeRequest";
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      if (typeof query === "function") {
        always = fail;
        fail = done;
        done = query;
        query = null;
      }
      if (!query) {
        query = this.defaultQuery;
      }
      if (!(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeQuery() : A query is required to execute");
      }
      var deffered = new Deferred();
      var args = { query };
      if (!this.dataSource.offline && (this.dataSource.url !== void 0 && this.dataSource.url !== "") || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {
        var result = this.adaptor.processQuery(this, query);
        if (!isNullOrUndefined(this.adaptor[makeRequest])) {
          this.adaptor[makeRequest](result, deffered, args, query);
        } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {
          this.requests = [];
          this.makeRequest(result, deffered, args, query);
        } else {
          args = DataManager2.getDeferedArgs(query, result, args);
          deffered.resolve(args);
        }
      } else {
        DataManager2.nextTick(function() {
          var res = _this.executeLocal(query);
          args = DataManager2.getDeferedArgs(query, res, args);
          deffered.resolve(args);
        });
      }
      if (done || fail) {
        deffered.promise.then(done, fail);
      }
      if (always) {
        deffered.promise.then(always, always);
      }
      return deffered.promise;
    };
    DataManager2.getDeferedArgs = function(query, result, args) {
      if (query.isCountRequired) {
        args.result = result.result;
        args.count = result.count;
        args.aggregates = result.aggregates;
      } else {
        args.result = result;
      }
      return args;
    };
    DataManager2.nextTick = function(fn) {
      (window.setImmediate || window.setTimeout)(fn, 0);
    };
    DataManager2.prototype.extendRequest = function(url, fnSuccess, fnFail) {
      return extend({}, {
        type: "GET",
        dataType: this.dataSource.dataType,
        crossDomain: this.dataSource.crossDomain,
        jsonp: this.dataSource.jsonp,
        cache: true,
        processData: false,
        onSuccess: fnSuccess,
        onFailure: fnFail
      }, url);
    };
    DataManager2.prototype.makeRequest = function(url, deffered, args, query) {
      var _this = this;
      var isSelector = !!query.subQuerySelector;
      var fnFail = function(e) {
        args.error = e;
        deffered.reject(args);
      };
      var process = function(data, count, xhr, request2, actual, aggregates, virtualSelectRecords) {
        args.xhr = xhr;
        args.count = count ? parseInt(count.toString(), 10) : 0;
        args.result = data;
        args.request = request2;
        args.aggregates = aggregates;
        args.actual = actual;
        args.virtualSelectRecords = virtualSelectRecords;
        deffered.resolve(args);
      };
      var fnQueryChild = function(data, selector) {
        var subDeffer = new Deferred();
        var childArgs = { parent: args };
        query.subQuery.isChild = true;
        var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);
        var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);
        if (!isSelector) {
          subDeffer.then(function(subData) {
            if (data) {
              DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
              process(data, subData.count, subData.xhr);
            }
          }, fnFail);
        }
        return childReq;
      };
      var fnSuccess = function(data, request2) {
        if (_this.isGraphQLAdaptor(_this.adaptor)) {
          if (!isNullOrUndefined(data["errors"])) {
            return fnFail(data["errors"], request2);
          }
        }
        if (_this.isCustomDataAdaptor(_this.adaptor)) {
          request2 = extend({}, _this.fetchReqOption, request2);
        }
        if (request2.contentType.indexOf("xml") === -1 && _this.dateParse) {
          data = DataUtil.parse.parseJson(data);
        }
        var result = _this.adaptor.processResponse(data, _this, query, request2.fetchRequest, request2);
        var count = 0;
        var aggregates = null;
        var virtualSelectRecords = "virtualSelectRecords";
        var virtualRecords = data[virtualSelectRecords];
        if (query.isCountRequired) {
          count = result.count;
          aggregates = result.aggregates;
          result = result.result;
        }
        if (!query.subQuery) {
          process(result, count, request2.fetchRequest, request2.type, data, aggregates, virtualRecords);
          return;
        }
        if (!isSelector) {
          fnQueryChild(result, request2);
        }
      };
      var req = this.extendRequest(url, fnSuccess, fnFail);
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var fetch_1 = new Fetch(req);
        fetch_1.beforeSend = function() {
          _this.beforeSend(fetch_1.fetchRequest, fetch_1);
        };
        req = fetch_1.send();
        req.catch(function(e) {
          return true;
        });
        this.requests.push(fetch_1);
      } else {
        this.fetchReqOption = req;
        var request = req;
        this.adaptor.options.getData({
          data: request.data,
          onSuccess: request.onSuccess,
          onFailure: request.onFailure
        });
      }
      if (isSelector) {
        var promise = void 0;
        var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });
        if (res && res.length) {
          promise = Promise.all([req, fnQueryChild(null, res)]);
          promise.then(function() {
            var args2 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args2[_i] = arguments[_i];
            }
            var result = args2[0];
            var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].fetchRequest, _this.requests[0]);
            var count = 0;
            if (query.isCountRequired) {
              count = pResult.count;
              pResult = pResult.result;
            }
            var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].fetchRequest, _this.requests[1]);
            count = 0;
            if (query.subQuery.isCountRequired) {
              count = cResult.count;
              cResult = cResult.result;
            }
            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
            isSelector = false;
            process(pResult, count, _this.requests[0].fetchRequest);
          });
        } else {
          isSelector = false;
        }
      }
      return req;
    };
    DataManager2.prototype.beforeSend = function(request, settings) {
      this.adaptor.beforeSend(this, request, settings);
      var headers = this.dataSource.headers;
      var props;
      for (var i = 0; headers && i < headers.length; i++) {
        props = [];
        var keys = Object.keys(headers[i]);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          props.push(prop);
          request.headers.set(prop, headers[i][prop]);
        }
      }
    };
    DataManager2.prototype.saveChanges = function(changes, key, tableName, query, original) {
      var _this = this;
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var args = {
        url: tableName,
        key: key || this.dataSource.key
      };
      var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](req);
      } else if (!this.isCustomDataAdaptor(this.adaptor)) {
        var deff_1 = new Deferred();
        var fetch_2 = new Fetch(req);
        fetch_2.beforeSend = function() {
          _this.beforeSend(fetch_2.fetchRequest, fetch_2);
        };
        fetch_2.onSuccess = function(data, request) {
          if (_this.isGraphQLAdaptor(_this.adaptor)) {
            if (!isNullOrUndefined(data["errors"])) {
              fetch_2.onFailure(JSON.stringify(data["errors"]));
            }
          }
          deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.fetchRequest, request, changes, args));
        };
        fetch_2.onFailure = function(e) {
          deff_1.reject([{ error: e }]);
        };
        fetch_2.send().catch(function(e) {
          return true;
        });
        return deff_1.promise;
      } else {
        return this.dofetchRequest(req, this.adaptor.options.batchUpdate);
      }
    };
    DataManager2.prototype.insert = function(data, tableName, query, position) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var req = this.adaptor.insert(this, data, tableName, query, position);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](req);
      } else {
        return this.dofetchRequest(req, this.adaptor.options.addRecord);
      }
    };
    DataManager2.prototype.remove = function(keyField, value, tableName, query) {
      if (typeof value === "object") {
        value = DataUtil.getObject(keyField, value);
      }
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.remove(this, keyField, value, tableName, query);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](res);
      } else {
        var remove2 = this.adaptor.options.deleteRecord;
        return this.dofetchRequest(res, remove2);
      }
    };
    DataManager2.prototype.update = function(keyField, value, tableName, query, original) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.update(this, keyField, value, tableName, query, original);
      var dofetchRequest = "dofetchRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[dofetchRequest])) {
        return this.adaptor[dofetchRequest](res);
      } else {
        var update = this.adaptor.options.updateRecord;
        return this.dofetchRequest(res, update);
      }
    };
    DataManager2.prototype.isCustomDataAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "CustomDataAdaptor";
    };
    DataManager2.prototype.isGraphQLAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "GraphQLAdaptor";
    };
    DataManager2.prototype.successFunc = function(record, request) {
      if (this.isGraphQLAdaptor(this.adaptor)) {
        var data = typeof record === "object" ? record : JSON.parse(record);
        if (!isNullOrUndefined(data["errors"])) {
          this.failureFunc(JSON.stringify(data["errors"]));
        }
      }
      if (this.isCustomDataAdaptor(this.adaptor)) {
        request = extend({}, this.fetchReqOption, request);
      }
      try {
        DataUtil.parse.parseJson(record);
      } catch (e) {
        record = [];
      }
      record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.fetchRequest, request);
      this.fetchDeffered.resolve(record);
    };
    DataManager2.prototype.failureFunc = function(e) {
      this.fetchDeffered.reject([{ error: e }]);
    };
    DataManager2.prototype.dofetchRequest = function(res, fetchFunc) {
      var _this = this;
      res = extend({}, {
        type: "POST",
        contentType: "application/json; charset=utf-8",
        processData: false
      }, res);
      this.fetchDeffered = new Deferred();
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var fetch_3 = new Fetch(res);
        fetch_3.beforeSend = function() {
          _this.beforeSend(fetch_3.fetchRequest, fetch_3);
        };
        fetch_3.onSuccess = this.successFunc.bind(this);
        fetch_3.onFailure = this.failureFunc.bind(this);
        fetch_3.send().catch(function(e) {
          return true;
        });
      } else {
        this.fetchReqOption = res;
        fetchFunc.call(this, {
          data: res.data,
          onSuccess: this.successFunc.bind(this),
          onFailure: this.failureFunc.bind(this)
        });
      }
      return this.fetchDeffered.promise;
    };
    DataManager2.prototype.clearPersistence = function() {
      window.removeEventListener("unload", this.setPersistData.bind(this));
      this.dataSource.enablePersistence = false;
      this.persistQuery = {};
      window.localStorage.setItem(this.dataSource.id, "[]");
    };
    return DataManager2;
  }()
);
var Deferred = (
  /** @class */
  /* @__PURE__ */ function() {
    function Deferred2() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.then = this.promise.then.bind(this.promise);
      this.catch = this.promise.catch.bind(this.promise);
    }
    return Deferred2;
  }()
);

// node_modules/@syncfusion/ej2-lists/src/common/list-base.js
var cssClass = {
  li: "e-list-item",
  ul: "e-list-parent e-ul",
  group: "e-list-group-item",
  icon: "e-list-icon",
  text: "e-list-text",
  check: "e-list-check",
  checked: "e-checked",
  selected: "e-selected",
  expanded: "e-expanded",
  textContent: "e-text-content",
  hasChild: "e-has-child",
  level: "e-level",
  url: "e-list-url",
  collapsible: "e-icon-collapsible",
  disabled: "e-disabled",
  image: "e-list-img",
  iconWrapper: "e-icon-wrapper",
  anchorWrap: "e-anchor-wrap",
  navigable: "e-navigable"
};
var ListBase;
(function(ListBase2) {
  ListBase2.defaultMappedFields = {
    id: "id",
    text: "text",
    url: "url",
    value: "value",
    isChecked: "isChecked",
    enabled: "enabled",
    expanded: "expanded",
    selected: "selected",
    iconCss: "iconCss",
    child: "child",
    isVisible: "isVisible",
    hasChildren: "hasChildren",
    tooltip: "tooltip",
    htmlAttributes: "htmlAttributes",
    urlAttributes: "urlAttributes",
    imageAttributes: "imageAttributes",
    imageUrl: "imageUrl",
    groupBy: null,
    sortBy: null
  };
  var defaultAriaAttributes = {
    level: 1,
    listRole: "presentation",
    itemRole: "presentation",
    groupItemRole: "group",
    itemText: "list-item",
    wrapperRole: "presentation"
  };
  var defaultListBaseOptions = {
    showCheckBox: false,
    showIcon: false,
    enableHtmlSanitizer: false,
    expandCollapse: false,
    fields: ListBase2.defaultMappedFields,
    ariaAttributes: defaultAriaAttributes,
    listClass: "",
    itemClass: "",
    processSubChild: false,
    sortOrder: "None",
    template: null,
    groupTemplate: null,
    headerTemplate: null,
    expandIconClass: "e-icon-collapsible",
    moduleName: "list",
    expandIconPosition: "Right",
    itemNavigable: false
  };
  function createList(createElement2, dataSource, options, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var type = typeofData(dataSource).typeof;
    if (type === "string" || type === "number") {
      return createListFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance);
    } else {
      return createListFromJson(createElement2, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);
    }
  }
  ListBase2.createList = createList;
  function createListFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = createListItemFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance);
    return generateUL(createElement2, subChild, null, options);
  }
  ListBase2.createListFromArray = createListFromArray;
  function createListItemFromArray(createElement2, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = [];
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      var li = void 0;
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          options: curOpt
        };
        curOpt.itemCreating(curData);
      }
      if (isSingleLevel) {
        li = generateSingleLevelLI(createElement2, dataSource[i], void 0, null, null, [], null, id, i, options);
      } else {
        li = generateLI(createElement2, dataSource[i], void 0, null, null, options, componentInstance);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          item: li,
          options: curOpt
        };
        curOpt.itemCreated(curData);
      }
      subChild.push(li);
    }
    return subChild;
  }
  ListBase2.createListItemFromArray = createListItemFromArray;
  function createListItemFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var fields = componentInstance && (componentInstance.getModuleName() === "listview" || componentInstance.getModuleName() === "multiselect") ? curOpt.fields : extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var id;
    var checkboxElement = [];
    if (level) {
      ariaAttributes.level = level;
    }
    var child = [];
    var li;
    var anchorElement;
    if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && !Object.prototype.hasOwnProperty.call(typeofData(dataSource).item, fields.id)) {
      id = generateId();
    }
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], fields);
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          options: curOpt,
          fields
        };
        curOpt.itemCreating(curData);
      }
      var curItem = dataSource[i];
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], fields);
      }
      if (Object.prototype.hasOwnProperty.call(fieldData, fields.id) && !isNullOrUndefined(fieldData[fields.id])) {
        id = fieldData[fields.id];
      }
      var innerEle = [];
      if (curOpt.showCheckBox) {
        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
          checkboxElement.push(createElement2("input", { className: cssClass.check, attrs: { type: "checkbox" } }));
        } else {
          innerEle.push(createElement2("input", { className: cssClass.check, attrs: { type: "checkbox" } }));
        }
      }
      if (isSingleLevel === true) {
        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {
          innerEle.push(createElement2("span", { className: cssClass.icon + " " + fieldData[fields.iconCss] }));
        }
        li = generateSingleLevelLI(createElement2, curItem, fieldData, fields, curOpt.itemClass, innerEle, Object.prototype.hasOwnProperty.call(curItem, "isHeader") && curItem.isHeader ? true : false, id, i, options);
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
      } else {
        li = generateLI(createElement2, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);
        li.classList.add(cssClass.level + "-" + ariaAttributes.level);
        li.setAttribute("aria-level", ariaAttributes.level.toString());
        if (ariaAttributes.groupItemRole === "presentation" || ariaAttributes.itemRole === "presentation") {
          li.removeAttribute("aria-level");
        }
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {
          var tooltipText = fieldData[fields.tooltip];
          if (options && options.enableHtmlSanitizer) {
            tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);
          } else {
            var tooltipTextElement = createElement2("span", { innerHTML: tooltipText });
            tooltipText = tooltipTextElement.innerText;
            tooltipTextElement = null;
          }
          li.setAttribute("title", tooltipText);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
          var htmlAttributes = fieldData[fields.htmlAttributes];
          if ("class" in htmlAttributes && typeof htmlAttributes["class"] === "string" && htmlAttributes["class"].trim() === "") {
            delete htmlAttributes["class"];
          }
          setAttribute(li, htmlAttributes);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled] === false) {
          li.classList.add(cssClass.disabled);
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.isVisible) && fieldData[fields.isVisible] === false) {
          li.style.display = "none";
        }
        if (Object.prototype.hasOwnProperty.call(fieldData, fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {
          var attr = { src: fieldData[fields.imageUrl], alt: !isNullOrUndefined(fieldData.name) ? "Displaying " + fieldData.name + " Image" : "Displaying Image" };
          merge(attr, fieldData[fields.imageAttributes]);
          var imageElemnt = createElement2("img", { className: cssClass.image, attrs: attr });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", imageElemnt);
          } else {
            prepend([imageElemnt], li.firstElementChild);
          }
        }
        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {
          var iconElement = createElement2("div", { className: cssClass.icon + " " + fieldData[fields.iconCss] });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", iconElement);
          } else {
            prepend([iconElement], li.firstElementChild);
          }
        }
        if (innerEle.length) {
          prepend(innerEle, li.firstElementChild);
        }
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
        processSubChild(createElement2, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
      }
      if (anchorElement) {
        addClass([li], [cssClass.navigable]);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          item: li,
          options: curOpt,
          fields
        };
        curOpt.itemCreated(curData);
      }
      checkboxElement = [];
      child.push(li);
    }
    return child;
  }
  ListBase2.createListItemFromJson = createListItemFromJson;
  function createListFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var li = createListItemFromJson(createElement2, dataSource, options, level, isSingleLevel, componentInstance);
    return generateUL(createElement2, li, curOpt.listClass, options);
  }
  ListBase2.createListFromJson = createListFromJson;
  function getSiblingLI(elementArray, element, isPrevious) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    if (!elementArray || !elementArray.length) {
      return void 0;
    }
    var siblingLI;
    var liIndex;
    var liCollections = Array.prototype.slice.call(elementArray);
    if (element) {
      liIndex = indexOf(element, liCollections);
    } else {
      liIndex = isPrevious === true ? liCollections.length : -1;
    }
    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];
    while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
      liIndex = liIndex + (isPrevious === true ? -1 : 1);
      siblingLI = liCollections[liIndex];
    }
    return siblingLI;
  }
  ListBase2.getSiblingLI = getSiblingLI;
  function indexOf(item, elementArray) {
    if (!elementArray || !item) {
      return void 0;
    } else {
      var liCollections = elementArray;
      liCollections = Array.prototype.slice.call(elementArray);
      return liCollections.indexOf(item);
    }
  }
  ListBase2.indexOf = indexOf;
  function groupDataSource(dataSource, fields, sortOrder) {
    if (sortOrder === void 0) {
      sortOrder = "None";
    }
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var cusQuery = new Query().group(curFields.groupBy);
    cusQuery = addSorting(sortOrder, "key", cusQuery);
    var ds = getDataSource(dataSource, cusQuery);
    dataSource = [];
    for (var j = 0; j < ds.length; j++) {
      var itemObj = ds[j].items;
      var grpItem = {};
      var hdr = "isHeader";
      grpItem[curFields.text] = ds[j].key;
      grpItem["" + hdr] = true;
      var newtext = curFields.text;
      if (newtext === "id") {
        newtext = "text";
        grpItem["" + newtext] = ds[j].key;
      }
      grpItem._id = "group-list-item-" + (ds[j].key ? ds[j].key.toString().trim() : "undefined");
      grpItem.items = itemObj;
      dataSource.push(grpItem);
      for (var k = 0; k < itemObj.length; k++) {
        dataSource.push(itemObj[k]);
      }
    }
    return dataSource;
  }
  ListBase2.groupDataSource = groupDataSource;
  function addSorting(sortOrder, sortBy, query) {
    if (query === void 0) {
      query = new Query();
    }
    if (sortOrder === "Ascending") {
      query.sortBy(sortBy, "ascending", true);
    } else if (sortOrder === "Descending") {
      query.sortBy(sortBy, "descending", true);
    } else {
      for (var i = 0; i < query.queries.length; i++) {
        if (query.queries[i].fn === "onSortBy") {
          query.queries.splice(i, 1);
        }
      }
    }
    return query;
  }
  ListBase2.addSorting = addSorting;
  function getDataSource(dataSource, query) {
    return new DataManager(dataSource).executeLocal(query);
  }
  ListBase2.getDataSource = getDataSource;
  function createJsonFromElement(element, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var fields = extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var curEle = element.cloneNode(true);
    var jsonAr = [];
    curEle.classList.add("json-parent");
    var childs = curEle.querySelectorAll(".json-parent>li");
    curEle.classList.remove("json-parent");
    for (var i = 0; i < childs.length; i++) {
      var li = childs[i];
      var anchor = li.querySelector("a");
      var ul = li.querySelector("ul");
      var json = {};
      var childNodes = anchor ? anchor.childNodes : li.childNodes;
      var keys = Object.keys(childNodes);
      for (var i_1 = 0; i_1 < childNodes.length; i_1++) {
        if (!childNodes[Number(keys[i_1])].hasChildNodes()) {
          json[fields.text] = childNodes[Number(keys[i_1])].textContent;
        }
      }
      var attributes_1 = getAllAttributes(li);
      if (attributes_1.id) {
        json[fields.id] = attributes_1.id;
        delete attributes_1.id;
      } else {
        json[fields.id] = generateId();
      }
      if (Object.keys(attributes_1).length) {
        json[fields.htmlAttributes] = attributes_1;
      }
      if (anchor) {
        attributes_1 = getAllAttributes(anchor);
        if (Object.keys(attributes_1).length) {
          json[fields.urlAttributes] = attributes_1;
        }
      }
      if (ul) {
        json[fields.child] = createJsonFromElement(ul, options);
      }
      jsonAr.push(json);
    }
    return jsonAr;
  }
  ListBase2.createJsonFromElement = createJsonFromElement;
  function typeofData(data) {
    var match = { typeof: null, item: null };
    for (var i = 0; i < data.length; i++) {
      if (!isNullOrUndefined(data[i])) {
        return match = { typeof: typeof data[i], item: data[i] };
      }
    }
    return match;
  }
  function setAttribute(element, elementAttributes) {
    var attr = {};
    merge(attr, elementAttributes);
    if (attr.class) {
      addClass([element], attr.class.split(" "));
      delete attr.class;
    }
    attributes(element, attr);
  }
  function getAllAttributes(element) {
    var attributes2 = {};
    var attr = element.attributes;
    for (var index = 0; index < attr.length; index++) {
      attributes2[attr[index].nodeName] = attr[index].nodeValue;
    }
    return attributes2;
  }
  function renderContentTemplate(createElement2, template, dataSource, fields, options, componentInstance) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    var ulElement = createElement2("ul", { className: cssClass.ul, attrs: { role: "presentation" } });
    var curOpt = extend({}, defaultListBaseOptions, options);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var compiledString = compileTemplate(template);
    var liCollection = [];
    var value;
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], curFields);
      var curItem = dataSource[i];
      var isHeader = curItem.isHeader;
      if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
        value = curItem;
      } else {
        value = fieldData[curFields.value];
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreating(curData);
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], curFields);
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          value = curItem;
        } else {
          value = fieldData[curFields.value];
        }
      }
      var li = createElement2("li", {
        id: id + "-" + i,
        className: isHeader ? cssClass.group : cssClass.li,
        attrs: { role: "presentation" }
      });
      if (isHeader) {
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          li.innerText = curItem;
        } else {
          li.innerText = fieldData[curFields.text];
        }
      } else {
        var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;
        if (isHeader) {
          if (componentInstance && componentInstance.getModuleName() !== "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate), li);
          }
        } else {
          if (componentInstance && componentInstance.getModuleName() !== "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate), li);
          }
        }
        li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
        li.setAttribute("role", "option");
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          item: li,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreated(curData);
      }
      liCollection.push(li);
    }
    append(liCollection, ulElement);
    return ulElement;
  }
  ListBase2.renderContentTemplate = renderContentTemplate;
  function renderGroupTemplate(groupTemplate, groupDataSource2, fields, headerItems, options, componentInstance) {
    var compiledString = compileTemplate(groupTemplate);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var curOpt = extend({}, defaultListBaseOptions, options);
    var category = curFields.groupBy;
    for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
      var header = headerItems_1[_i];
      var headerData = {};
      headerData["" + category] = header.textContent;
      header.innerHTML = "";
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);
        if (compiledElement) {
          append(compiledElement, header);
        }
      } else {
        append(compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
      }
    }
    return headerItems;
  }
  ListBase2.renderGroupTemplate = renderGroupTemplate;
  function generateId() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  ListBase2.generateId = generateId;
  function processSubChild(createElement2, fieldData, fields, ds, options, element, level) {
    var subDS = fieldData[fields.child] || [];
    var hasChildren = fieldData[fields.hasChildren];
    if (subDS.length) {
      hasChildren = true;
      element.classList.add(cssClass.hasChild);
      if (options.processSubChild) {
        var subLi = createListFromJson(createElement2, subDS, options, ++level);
        element.appendChild(subLi);
      }
    }
    if (!!options.expandCollapse && hasChildren && !options.template) {
      element.firstElementChild.classList.add(cssClass.iconWrapper);
      var expandElement = options.expandIconPosition === "Left" ? prepend : append;
      expandElement([createElement2("div", { className: "e-icons " + options.expandIconClass })], element.querySelector("." + cssClass.textContent));
    }
  }
  function generateSingleLevelLI(createElement2, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var value = item;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number" && typeof item !== "boolean") {
      dataSource = item;
      text = typeof fieldData[fields.text] === "boolean" || typeof fieldData[fields.text] === "number" ? fieldData[fields.text] : fieldData[fields.text] || "";
      value = fieldData[fields.value];
    }
    var elementID;
    if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id]) && fieldData[fields.id] !== "") {
      elementID = id;
    } else {
      elementID = id + "-" + index;
    }
    var li = createElement2("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      id: elementID,
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? { role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole } : {}
    });
    if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled].toString() === "false") {
      li.classList.add(cssClass.disabled);
    }
    if (grpLI) {
      li.innerText = text;
    } else {
      li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
      li.setAttribute("role", "option");
      if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
        setAttribute(li, fieldData[fields.htmlAttributes]);
      }
      if (innerElements.length && !curOpt.itemNavigable) {
        append(innerElements, li);
      }
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        li.appendChild(anchorTag(createElement2, dataSource, fields, text, innerElements, curOpt.itemNavigable));
      } else {
        if (innerElements.length && curOpt.itemNavigable) {
          append(innerElements, li);
        }
        li.appendChild(document.createTextNode(text));
      }
    }
    return li;
  }
  function getModuleClass(moduleName) {
    var moduleClass;
    return moduleClass = {
      li: "e-" + moduleName + "-item",
      ul: "e-" + moduleName + "-parent e-ul",
      group: "e-" + moduleName + "-group-item",
      icon: "e-" + moduleName + "-icon",
      text: "e-" + moduleName + "-text",
      check: "e-" + moduleName + "-check",
      checked: "e-checked",
      selected: "e-selected",
      expanded: "e-expanded",
      textContent: "e-text-content",
      hasChild: "e-has-child",
      level: "e-level",
      url: "e-" + moduleName + "-url",
      collapsible: "e-icon-collapsible",
      disabled: "e-disabled",
      image: "e-" + moduleName + "-img",
      iconWrapper: "e-icon-wrapper",
      anchorWrap: "e-anchor-wrap",
      navigable: "e-navigable"
    };
  }
  function anchorTag(createElement2, dataSource, fields, text, innerElements, isFullNavigation) {
    var fieldData = getFieldValues(dataSource, fields);
    var attr = { href: fieldData[fields.url] };
    if (Object.prototype.hasOwnProperty.call(fieldData, fields.urlAttributes) && fieldData[fields.urlAttributes]) {
      merge(attr, fieldData[fields.urlAttributes]);
      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
    }
    var anchorTag2;
    if (!isFullNavigation) {
      anchorTag2 = createElement2("a", { className: cssClass.text + " " + cssClass.url, innerHTML: text });
    } else {
      anchorTag2 = createElement2("a", { className: cssClass.text + " " + cssClass.url });
      var anchorWrapper = createElement2("div", { className: cssClass.anchorWrap });
      if (innerElements && innerElements.length) {
        append(innerElements, anchorWrapper);
      }
      anchorWrapper.appendChild(document.createTextNode(text));
      append([anchorWrapper], anchorTag2);
    }
    setAttribute(anchorTag2, attr);
    return anchorTag2;
  }
  function generateLI(createElement2, item, fieldData, fields, className, options, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var uID;
    var grpLI;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number") {
      dataSource = item;
      text = fieldData[fields.text] || "";
      uID = isNullOrUndefined(fieldData["_id"]) ? fieldData[fields.id] : fieldData["_id"];
      grpLI = Object.prototype.hasOwnProperty.call(item, "isHeader") && item.isHeader ? true : false;
    }
    if (options && options.enableHtmlSanitizer) {
      text = text;
    }
    var li = createElement2("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? { role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole } : {}
    });
    if (!isNullOrUndefined(uID) === true) {
      li.setAttribute("data-uid", uID);
    } else {
      li.setAttribute("data-uid", generateId());
    }
    if (grpLI && options && options.groupTemplate) {
      var compiledString = compileTemplate(options.groupTemplate);
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
      }
    } else if (!grpLI && options && options.template) {
      var compiledString = compileTemplate(options.template);
      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        var compiledElement = compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate), li);
      }
    } else {
      var innerDiv = createElement2("div", {
        className: cssClass.textContent,
        attrs: ariaAttributes.wrapperRole !== "" ? { role: ariaAttributes.wrapperRole } : {}
      });
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        innerDiv.appendChild(anchorTag(createElement2, dataSource, fields, text, null, curOpt.itemNavigable));
      } else {
        var element = createElement2("span", {
          className: cssClass.text,
          attrs: ariaAttributes.itemText !== "" ? { role: ariaAttributes.itemText } : {}
        });
        if (options && options.enableHtmlSanitizer) {
          element.innerText = SanitizeHtmlHelper.sanitize(text);
        } else {
          element.innerHTML = text;
        }
        innerDiv.appendChild(element);
      }
      li.appendChild(innerDiv);
    }
    return li;
  }
  function generateUL(createElement2, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    cssClass = getModuleClass(curOpt.moduleName);
    var ulElement = createElement2("ul", {
      className: cssClass.ul + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.listRole !== "" ? { role: ariaAttributes.listRole } : {}
    });
    append(liElement, ulElement);
    return ulElement;
  }
  ListBase2.generateUL = generateUL;
  function generateIcon(createElement2, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var expandElement = curOpt.expandIconPosition === "Left" ? prepend : append;
    expandElement([createElement2("div", {
      className: "e-icons " + curOpt.expandIconClass + " " + (isNullOrUndefined(className) ? "" : className)
    })], liElement.querySelector("." + cssClass.textContent));
    return liElement;
  }
  ListBase2.generateIcon = generateIcon;
})(ListBase || (ListBase = {}));
function getFieldValues(dataItem, fields) {
  var fieldData = {};
  if (isNullOrUndefined(dataItem) || typeof dataItem === "string" || typeof dataItem === "number" || !isNullOrUndefined(dataItem.isHeader)) {
    return dataItem;
  } else {
    for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
      var field = _a[_i];
      var dataField = fields["" + field];
      var value = !isNullOrUndefined(dataField) && typeof dataField === "string" ? getValue(dataField, dataItem) : void 0;
      if (!isNullOrUndefined(value)) {
        fieldData["" + dataField] = value;
      }
    }
  }
  return fieldData;
}
function compileTemplate(template) {
  if (template) {
    try {
      if (typeof template !== "function" && document.querySelector(template)) {
        return compile(document.querySelector(template).innerHTML.trim());
      } else {
        return compile(template);
      }
    } catch (e) {
      return compile(template);
    }
  }
  return void 0;
}

// node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var effectsConfig = {
  "None": [],
  "SlideLeft": ["SlideRightOut", "SlideLeftOut", "SlideLeftIn", "SlideRightIn"],
  "SlideDown": ["SlideTopOut", "SlideBottomOut", "SlideBottomIn", "SlideTopIn"],
  "Zoom": ["FadeOut", "FadeZoomOut", "FadeZoomIn", "FadeIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var effectsRTLConfig = {
  "None": [],
  "SlideLeft": ["SlideLeftOut", "SlideRightOut", "SlideRightIn", "SlideLeftIn"],
  "SlideDown": ["SlideBottomOut", "SlideTopOut", "SlideTopIn", "SlideBottomIn"],
  "Zoom": ["FadeZoomOut", "FadeOut", "FadeIn", "FadeZoomIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var classNames = {
  root: "e-listview",
  hover: "e-hover",
  selected: "e-active",
  focused: "e-focused",
  parentItem: "e-list-parent",
  listItem: "e-list-item",
  listIcon: "e-list-icon",
  textContent: "e-text-content",
  listItemText: "e-list-text",
  groupListItem: "e-list-group-item",
  hasChild: "e-has-child",
  view: "e-view",
  header: "e-list-header",
  headerText: "e-headertext",
  headerTemplateText: "e-headertemplate-text",
  text: "e-text",
  disable: "e-disabled",
  container: "e-list-container",
  icon: "e-icons",
  backIcon: "e-icon-back",
  backButton: "e-back-button",
  checkboxWrapper: "e-checkbox-wrapper",
  checkbox: "e-checkbox",
  checked: "e-check",
  checklist: "e-checklist",
  checkboxIcon: "e-frame",
  checkboxRight: "e-checkbox-right",
  checkboxLeft: "e-checkbox-left",
  listviewCheckbox: "e-listview-checkbox",
  itemCheckList: "e-checklist",
  virtualElementContainer: "e-list-virtualcontainer"
};
var LISTVIEW_TEMPLATE_PROPERTY = "Template";
var LISTVIEW_GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var LISTVIEW_HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var swipeVelocity = 0.5;
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends4(FieldSettings4, _super);
    function FieldSettings4() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([
      Property("id")
    ], FieldSettings4.prototype, "id", void 0);
    __decorate4([
      Property("text")
    ], FieldSettings4.prototype, "text", void 0);
    __decorate4([
      Property("isChecked")
    ], FieldSettings4.prototype, "isChecked", void 0);
    __decorate4([
      Property("isVisible")
    ], FieldSettings4.prototype, "isVisible", void 0);
    __decorate4([
      Property("enabled")
    ], FieldSettings4.prototype, "enabled", void 0);
    __decorate4([
      Property("iconCss")
    ], FieldSettings4.prototype, "iconCss", void 0);
    __decorate4([
      Property("child")
    ], FieldSettings4.prototype, "child", void 0);
    __decorate4([
      Property("tooltip")
    ], FieldSettings4.prototype, "tooltip", void 0);
    __decorate4([
      Property("groupBy")
    ], FieldSettings4.prototype, "groupBy", void 0);
    __decorate4([
      Property("text")
    ], FieldSettings4.prototype, "sortBy", void 0);
    __decorate4([
      Property("htmlAttributes")
    ], FieldSettings4.prototype, "htmlAttributes", void 0);
    __decorate4([
      Property("tableName")
    ], FieldSettings4.prototype, "tableName", void 0);
    return FieldSettings4;
  }(ChildProperty)
);
var ListView = (
  /** @class */
  function(_super) {
    __extends4(ListView2, _super);
    function ListView2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.previousSelectedItems = [];
      _this.hiddenItems = [];
      _this.enabledItems = [];
      _this.disabledItems = [];
      return _this;
    }
    ListView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "htmlAttributes":
            this.setHTMLAttribute();
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "enable":
            this.setEnable();
            break;
          case "width":
          case "height":
            this.setSize();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "fields":
            this.listBaseOption.fields = this.fields.properties;
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "headerTitle":
            if (!this.curDSLevel.length) {
              this.header(this.headerTitle, false, "header");
            }
            break;
          case "query":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "showHeader":
            this.header(this.headerTitle, false, "header");
            break;
          case "enableVirtualization":
            if (!isNullOrUndefined(this.contentContainer)) {
              detach(this.contentContainer);
            }
            this.refresh();
            break;
          case "showCheckBox":
          case "checkBoxPosition":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.setCheckbox();
            }
            break;
          case "dataSource":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "sortOrder":
          case "template":
            if (!this.enableVirtualization) {
              this.refresh();
            }
            break;
          case "showIcon":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.listBaseOption.showIcon = this.showIcon;
              this.curViewDS = this.getSubDS();
              this.resetCurrentList();
            }
            break;
          default:
            break;
        }
      }
    };
    ListView2.prototype.setHTMLAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes) && Object.keys(this.htmlAttributes).length) {
        attributes(this.element, this.htmlAttributes);
      }
    };
    ListView2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" ").filter(function(css) {
          return css;
        }));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" ").filter(function(css) {
          return css;
        }));
      }
    };
    ListView2.prototype.setSize = function() {
      this.element.style.height = formatUnit(this.height);
      this.element.style.width = formatUnit(this.width);
      this.isWindow = this.element.clientHeight ? false : true;
    };
    ListView2.prototype.setEnable = function() {
      this.enableElement(this.element, this.enable);
    };
    ListView2.prototype.setEnableRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    ListView2.prototype.enableElement = function(element, isEnabled) {
      if (isEnabled) {
        element.classList.remove(classNames.disable);
      } else {
        element.classList.add(classNames.disable);
      }
    };
    ListView2.prototype.header = function(text, showBack, prop) {
      if (this.headerEle === void 0 && this.showHeader) {
        this.headerEle = this.createElement("div", { className: classNames.header });
        var innerHeaderEle = this.createElement("span", { className: classNames.headerText });
        if (this.enableHtmlSanitizer) {
          this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);
          innerHeaderEle.innerText = this.headerTitle;
        } else {
          innerHeaderEle.innerHTML = this.headerTitle;
        }
        var textEle = this.createElement("div", { className: classNames.text, innerHTML: innerHeaderEle.outerHTML });
        var hedBackButton = this.createElement("div", {
          className: classNames.icon + " " + classNames.backIcon + " " + classNames.backButton,
          attrs: { style: "display:none;" }
        });
        this.headerEle.appendChild(hedBackButton);
        this.headerEle.appendChild(textEle);
        if (this.headerTemplate) {
          var compiledString = compile(this.headerTemplate);
          var headerTemplateEle = this.createElement("div", { className: classNames.headerTemplateText });
          var compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);
          if (compiledElement) {
            append(compiledElement, headerTemplateEle);
          }
          append([headerTemplateEle], this.headerEle);
          if (this.isReact) {
            this.renderReactTemplates();
          }
        }
        if (this.headerTemplate && this.headerTitle) {
          textEle.classList.add("header");
        }
        this.element.classList.add("e-has-header");
        prepend([this.headerEle], this.element);
      } else if (this.headerEle) {
        if (this.showHeader) {
          this.headerEle.style.display = "";
          var textEle = this.headerEle.querySelector("." + classNames.headerText);
          var hedBackButton = this.headerEle.querySelector("." + classNames.backIcon);
          if (this.enableHtmlSanitizer) {
            text = SanitizeHtmlHelper.sanitize(text);
          }
          textEle.innerHTML = text;
          if (this.headerTemplate && showBack) {
            textEle.parentElement.classList.remove("header");
            this.headerEle.querySelector("." + classNames.headerTemplateText).classList.add("nested-header");
          }
          if (this.headerTemplate && !showBack) {
            textEle.parentElement.classList.add("header");
            this.headerEle.querySelector("." + classNames.headerTemplateText).classList.remove("nested-header");
            this.headerEle.querySelector("." + classNames.headerTemplateText).classList.add("header");
          }
          if (showBack === true) {
            hedBackButton.style.display = "";
          } else {
            hedBackButton.style.display = "none";
          }
        } else {
          this.headerEle.style.display = "none";
        }
      }
    };
    ListView2.prototype.switchView = function(fromView, toView, reverse) {
      var _this = this;
      if (fromView && toView) {
        var fPos_1 = fromView.style.position;
        var overflow_1 = this.element.style.overflow !== "hidden" ? this.element.style.overflow : "";
        fromView.style.position = "absolute";
        fromView.classList.add("e-view");
        var anim = void 0;
        var duration = this.animation.duration;
        if (this.animation.effect) {
          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
        } else {
          var slideLeft = "SlideLeft";
          anim = effectsConfig["" + slideLeft];
          reverse = this.enableRtl;
          duration = 0;
        }
        this.element.style.overflow = "hidden";
        this.aniObj.animate(fromView, {
          name: reverse === true ? anim[0] : anim[1],
          duration: duration === 0 && animationMode === "Enable" ? 400 : duration,
          timingFunction: this.animation.easing,
          end: function() {
            fromView.style.display = "none";
            _this.element.style.overflow = overflow_1;
            fromView.style.position = fPos_1;
            fromView.classList.remove("e-view");
          }
        });
        toView.style.display = "";
        this.aniObj.animate(toView, {
          name: reverse === true ? anim[2] : anim[3],
          duration: duration === 0 && animationMode === "Enable" ? 400 : duration,
          timingFunction: this.animation.easing,
          end: function() {
            _this.trigger("actionComplete");
          }
        });
        this.curUL = toView;
      }
    };
    ListView2.prototype.preRender = function() {
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.setProperties({ template: document.querySelector(this.template).innerHTML.trim() }, true);
          }
        } catch (e) {
          compile(this.template);
        }
      }
      this.listBaseOption = {
        template: this.template,
        headerTemplate: this.headerTemplate,
        groupTemplate: this.groupTemplate,
        expandCollapse: true,
        listClass: "",
        ariaAttributes: {
          itemRole: "listitem",
          listRole: "list",
          itemText: "",
          groupItemRole: "presentation",
          wrapperRole: "presentation"
        },
        fields: this.fields.properties,
        sortOrder: this.sortOrder,
        showIcon: this.showIcon,
        itemCreated: this.renderCheckbox.bind(this),
        templateID: "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,
        groupTemplateID: "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,
        enableHtmlSanitizer: this.enableHtmlSanitizer
      };
      this.initialization();
    };
    ListView2.prototype.initialization = function() {
      this.curDSLevel = [];
      this.animateOptions = {};
      this.curViewDS = [];
      this.currentLiElements = [];
      this.isNestedList = false;
      this.selectedData = [];
      this.selectedId = this.enablePersistence ? this.selectedId : [];
      this.LISTVIEW_TEMPLATE_ID = "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;
      this.LISTVIEW_GROUPTEMPLATE_ID = "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;
      this.LISTVIEW_HEADERTEMPLATE_ID = "" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;
      this.aniObj = new Animation(this.animateOptions);
      this.removeElement(this.curUL);
      this.removeElement(this.ulElement);
      this.removeElement(this.headerEle);
      this.removeElement(this.contentContainer);
      this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = void 0;
    };
    ListView2.prototype.renderCheckbox = function(args) {
      var _this = this;
      if (args.item.classList.contains(classNames.hasChild)) {
        this.isNestedList = true;
      }
      if (this.showCheckBox && args.item.classList.contains(classNames.listItem)) {
        var fieldData_1;
        var checkboxElement = createCheckBox(this.createElement, false, {
          checked: false,
          enableRtl: this.enableRtl,
          cssClass: classNames.listviewCheckbox
        });
        checkboxElement.setAttribute("role", "checkbox");
        var frameElement_1 = checkboxElement.querySelector("." + classNames.checkboxIcon);
        args.item.classList.add(classNames.itemCheckList);
        args.item.firstElementChild.classList.add(classNames.checkbox);
        if (typeof this.dataSource[0] !== "string" && typeof this.dataSource[0] !== "number") {
          fieldData_1 = getFieldValues(args.curData, this.listBaseOption.fields);
          if (this.enablePersistence && !isNullOrUndefined(this.selectedId)) {
            var index = this.selectedId.findIndex(function(e) {
              return e === fieldData_1[_this.listBaseOption.fields.id].toString();
            });
            if (index !== -1) {
              this.checkInternally(args, checkboxElement);
            }
          } else if (fieldData_1[this.listBaseOption.fields.isChecked]) {
            this.checkInternally(args, checkboxElement);
          }
        } else if ((typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") && this.selectedData.indexOf(args.text) !== -1) {
          this.checkInternally(args, checkboxElement);
        }
        checkboxElement.setAttribute("aria-checked", frameElement_1.classList.contains(classNames.checked) ? "true" : "false");
        checkboxElement.setAttribute("aria-label", args.text);
        if (this.checkBoxPosition === "Left") {
          checkboxElement.classList.add(classNames.checkboxLeft);
          args.item.firstElementChild.classList.add(classNames.checkboxLeft);
          args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
        } else {
          checkboxElement.classList.add(classNames.checkboxRight);
          args.item.firstElementChild.classList.add(classNames.checkboxRight);
          args.item.firstElementChild.appendChild(checkboxElement);
        }
        this.currentLiElements.push(args.item);
        if (this.checkBoxPosition === "Left") {
          this.virtualCheckBox = args.item.firstElementChild.children[0];
        } else {
          this.virtualCheckBox = args.item.firstElementChild.lastElementChild;
        }
      }
    };
    ListView2.prototype.checkInternally = function(args, checkboxElement) {
      args.item.classList.add(classNames.selected);
      checkboxElement.querySelector("." + classNames.checkboxIcon).classList.add(classNames.checked);
      checkboxElement.setAttribute("aria-checked", "true");
    };
    ListView2.prototype.checkItem = function(item) {
      this.toggleCheckBase(item, true);
    };
    ListView2.prototype.toggleCheckBase = function(item, checked) {
      if (this.showCheckBox) {
        var liElement = item;
        if (item instanceof Object && item.constructor !== HTMLLIElement) {
          liElement = this.getLiFromObjOrElement(item);
        }
        if (!isNullOrUndefined(liElement)) {
          var checkboxIcon = liElement.querySelector("." + classNames.checkboxIcon);
          if (checked === true) {
            liElement.classList.add(classNames.selected);
          } else {
            liElement.classList.remove(classNames.selected);
          }
          if (checked === true) {
            checkboxIcon.classList.add(classNames.checked);
          } else {
            checkboxIcon.classList.remove(classNames.checked);
          }
          checkboxIcon.parentElement.setAttribute("aria-checked", checked ? "true" : "false");
        }
        this.setSelectedItemData(liElement);
        this.updateSelectedId();
      }
    };
    ListView2.prototype.uncheckItem = function(item) {
      this.toggleCheckBase(item, false);
    };
    ListView2.prototype.checkAllItems = function() {
      this.toggleAllCheckBase(true);
    };
    ListView2.prototype.uncheckAllItems = function() {
      this.toggleAllCheckBase(false);
    };
    ListView2.prototype.toggleAllCheckBase = function(checked) {
      if (this.showCheckBox) {
        for (var i = 0; i < this.liCollection.length; i++) {
          var checkIcon = this.liCollection[i].querySelector("." + classNames.checkboxIcon);
          if (checkIcon) {
            if (checked) {
              if (!checkIcon.classList.contains(classNames.checked)) {
                this.checkItem(this.liCollection[i]);
              }
            } else {
              if (checkIcon.classList.contains(classNames.checked)) {
                this.uncheckItem(this.liCollection[i]);
              }
            }
          }
        }
        if (this.enableVirtualization) {
          this.virtualizationModule.checkedItem(checked);
        }
        this.updateSelectedId();
      }
    };
    ListView2.prototype.setCheckbox = function() {
      if (this.showCheckBox) {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.listItem));
        var args = {
          item: void 0,
          curData: void 0,
          dataSource: void 0,
          fields: void 0,
          options: void 0,
          text: ""
        };
        for (var i = 0; i < liCollection.length; i++) {
          var element = liCollection[i];
          args.item = element;
          args.curData = this.getItemData(element);
          if (element.querySelector("." + classNames.checkboxWrapper)) {
            this.removeElement(element.querySelector("." + classNames.checkboxWrapper));
          }
          this.renderCheckbox(args);
          if (args.item.classList.contains(classNames.selected)) {
            this.checkInternally(args, args.item.querySelector("." + classNames.checkboxWrapper));
          }
        }
      } else {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.itemCheckList));
        for (var i = 0; i < liCollection.length; i++) {
          var element = liCollection[i];
          element.classList.remove(classNames.selected);
          element.firstElementChild.classList.remove(classNames.checkbox);
          this.removeElement(element.querySelector("." + classNames.checkboxWrapper));
        }
        if (this.selectedItems) {
          this.selectedItems.item.classList.add(classNames.selected);
        }
      }
    };
    ListView2.prototype.refreshItemHeight = function() {
      if (this.virtualizationModule) {
        this.virtualizationModule.refreshItemHeight();
      }
    };
    ListView2.prototype.clickHandler = function(e) {
      if (Array.isArray(this.dataSource) && this.dataSource.length === 0) {
        return;
      }
      var target = e.target;
      this.targetElement = target;
      var classList2 = target.classList;
      var closestElement;
      if (classList2.contains(classNames.backIcon) || classList2.contains(classNames.headerText)) {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      } else {
        var li = closest(target.parentNode, "." + classNames.listItem);
        if (li === null) {
          li = target;
        }
        this.removeFocus();
        if (this.enable && this.showCheckBox && this.isValidLI(li)) {
          if (e.target.classList.contains(classNames.checkboxIcon)) {
            li.classList.add(classNames.focused);
            if (isNullOrUndefined(li.querySelector("." + classNames.checked))) {
              var args = {
                curData: void 0,
                dataSource: void 0,
                fields: void 0,
                options: void 0,
                text: void 0,
                item: li
              };
              this.checkInternally(args, args.item.querySelector("." + classNames.checkboxWrapper));
            } else {
              this.uncheckItem(li);
              li.classList.add(classNames.focused);
            }
            if (this.enableVirtualization) {
              this.virtualizationModule.setCheckboxLI(li, e);
            }
            if (e) {
              var eventArgs = this.selectEventData(li, e);
              var checkIcon = li.querySelector("." + classNames.checkboxIcon);
              merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });
              this.trigger("select", eventArgs);
            }
          } else if (li.classList.contains(classNames.hasChild)) {
            this.removeHover();
            this.removeSelect();
            this.removeSelect(li);
            this.setSelectLI(li, e);
            li.classList.remove(classNames.selected);
          } else {
            this.setCheckboxLI(li, e);
            if (target.nodeName === "INPUT" || target.nodeName === "TEXTAREA") {
              target.classList.add("e-focused");
              this.targetElement = target;
            }
          }
        } else {
          this.setSelectLI(li, e);
          if (target.nodeName === "INPUT" || target.nodeName === "TEXTAREA") {
            target.classList.add("e-focused");
            this.targetElement = target;
          }
        }
        closestElement = closest(e.target, "li");
        if (!isNullOrUndefined(closestElement)) {
          if (closestElement.classList.contains("e-has-child") && !e.target.parentElement.classList.contains("e-listview-checkbox")) {
            closestElement.classList.add(classNames.disable);
          }
        }
      }
      this.updateSelectedId();
    };
    ListView2.prototype.removeElement = function(element) {
      return element && element.parentNode && element.parentNode.removeChild(element);
    };
    ListView2.prototype.hoverHandler = function(e) {
      var curLi = closest(e.target.parentNode, "." + classNames.listItem);
      this.setHoverLI(curLi);
    };
    ListView2.prototype.leaveHandler = function() {
      this.removeHover();
    };
    ListView2.prototype.homeKeyHandler = function(e, end) {
      e.preventDefault();
      if (Object.keys(this.dataSource).length && this.curUL) {
        var li = this.curUL.querySelectorAll("." + classNames.listItem);
        var focusedElement = this.curUL.querySelector("." + classNames.focused) || this.curUL.querySelector("." + classNames.selected);
        if (focusedElement) {
          focusedElement.classList.remove(classNames.focused);
          if (!this.showCheckBox) {
            focusedElement.classList.remove(classNames.selected);
          }
        }
        var index = !end ? 0 : li.length - 1;
        if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {
          li[index].classList.add(classNames.focused);
        } else {
          this.setSelectLI(li[index], e);
        }
        if (li[index]) {
          this.element.setAttribute("aria-activedescendant", li[index].id.toString());
        } else {
          this.element.removeAttribute("aria-activedescendant");
        }
      }
    };
    ListView2.prototype.onArrowKeyDown = function(e, prev) {
      var siblingLI;
      var li;
      var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames.hasChild)) ? true : false;
      if (hasChild || this.showCheckBox) {
        li = this.curUL.querySelector("." + classNames.focused) || this.curUL.querySelector("." + classNames.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames.listItem), li, prev);
        if (!isNullOrUndefined(siblingLI)) {
          if (li) {
            li.classList.remove(classNames.focused);
            if (!this.showCheckBox) {
              li.classList.remove(classNames.selected);
            }
          }
          if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {
            siblingLI.classList.add(classNames.focused);
          } else {
            this.setSelectLI(siblingLI, e);
          }
        }
      } else {
        li = this.curUL.querySelector("." + classNames.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames.listItem), li, prev);
        this.setSelectLI(siblingLI, e);
      }
      if (siblingLI) {
        this.element.setAttribute("aria-activedescendant", siblingLI.id.toString());
      } else {
        this.element.removeAttribute("aria-activedescendant");
      }
      return siblingLI;
    };
    ListView2.prototype.arrowKeyHandler = function(e, prev) {
      var _this = this;
      e.preventDefault();
      if (Object.keys(this.dataSource).length && this.curUL) {
        var siblingLI = this.onArrowKeyDown(e, prev);
        var elementTop = this.element.getBoundingClientRect().top;
        var elementHeight = this.element.getBoundingClientRect().height;
        var firstItemBounds = this.curUL.querySelector("." + classNames.listItem).getBoundingClientRect();
        var heightDiff = void 0;
        var groupItemBounds = void 0;
        if (this.fields.groupBy) {
          groupItemBounds = this.curUL.querySelector("." + classNames.groupListItem).getBoundingClientRect();
        }
        if (siblingLI) {
          var siblingTop = siblingLI.getBoundingClientRect().top;
          var siblingHeight = siblingLI.getBoundingClientRect().height;
          if (!prev) {
            var height = this.isWindow ? window.innerHeight : elementHeight;
            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;
            if (heightDiff > height) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + (heightDiff - height));
              } else {
                this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
              }
            }
          } else {
            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;
            if (heightDiff < 0) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + heightDiff);
              } else {
                this.element.scrollTop = this.element.scrollTop + heightDiff;
              }
            }
          }
        } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
          this.onUIScrolled = function() {
            _this.onArrowKeyDown(e, prev);
            _this.onUIScrolled = void 0;
          };
          heightDiff = this.virtualizationModule.listItemHeight;
          if (this.isWindow === true) {
            window.scroll(0, pageYOffset - heightDiff);
          } else {
            this.element.scrollTop = this.element.scrollTop - heightDiff;
          }
        } else if (prev) {
          if (this.showHeader && this.headerEle) {
            var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
            var headerBounds = this.headerEle.getBoundingClientRect();
            heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset - heightDiff);
            } else {
              this.element.scrollTop = 0;
            }
          } else if (this.fields.groupBy) {
            heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset + heightDiff);
            } else {
              this.element.scrollTop = this.element.scrollTop - heightDiff;
            }
          }
        }
      }
    };
    ListView2.prototype.enterKeyHandler = function(e) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames.hasChild)) ? true : false;
        var li = this.curUL.querySelector("." + classNames.focused);
        if (hasChild && li) {
          li.classList.remove(classNames.focused);
          if (this.showCheckBox) {
            this.removeSelect();
            this.removeSelect(li);
            this.removeHover();
          }
          this.setSelectLI(li, e);
        }
      }
    };
    ListView2.prototype.spaceKeyHandler = function(e) {
      if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
        e.preventDefault();
        var li = this.curUL.querySelector("." + classNames.focused);
        var checkboxElement = void 0;
        var checkIcon = void 0;
        if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector("." + classNames.checked))) {
          var args = {
            curData: void 0,
            dataSource: void 0,
            fields: void 0,
            options: void 0,
            text: void 0,
            item: li
          };
          checkboxElement = args.item.querySelector("." + classNames.checkboxWrapper);
          this.checkInternally(args, checkboxElement);
          checkIcon = checkboxElement.querySelector("." + classNames.checkboxIcon + "." + classNames.icon);
        } else {
          this.uncheckItem(li);
        }
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, { isChecked: checkIcon ? checkIcon.classList.contains(classNames.checked) : false });
        this.trigger("select", eventArgs);
        this.updateSelectedId();
      }
    };
    ListView2.prototype.keyActionHandler = function(e) {
      switch (e.keyCode) {
        case 36:
          this.homeKeyHandler(e);
          break;
        case 35:
          this.homeKeyHandler(e, true);
          break;
        case 40:
          this.arrowKeyHandler(e);
          break;
        case 38:
          this.arrowKeyHandler(e, true);
          break;
        case 13:
          this.enterKeyHandler(e);
          break;
        case 8:
          if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
            this.uncheckAllItems();
          }
          this.back();
          break;
        case 32:
          if (isNullOrUndefined(this.targetElement) || !this.targetElement.classList.contains("e-focused")) {
            this.spaceKeyHandler(e);
          }
          break;
      }
    };
    ListView2.prototype.swipeActionHandler = function(e) {
      if (e.swipeDirection === "Right" && e.velocity > swipeVelocity && e.originalEvent.type === "touchend") {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      }
    };
    ListView2.prototype.focusout = function() {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var focusedElement = this.curUL.querySelector("." + classNames.focused);
        if (focusedElement) {
          focusedElement.classList.remove(classNames.focused);
          if (!this.showCheckBox && !isNullOrUndefined(this.selectedLI)) {
            this.selectedLI.classList.add(classNames.selected);
          }
        }
      }
    };
    ListView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "keydown", this.keyActionHandler, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "mouseout", this.leaveHandler, this);
      EventHandler.add(this.element, "focusout", this.focusout, this);
      this.touchModule = new Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });
      if (!isNullOrUndefined(this.scroll)) {
        EventHandler.add(this.element, "scroll", this.onListScroll, this);
      }
    };
    ListView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "keydown", this.keyActionHandler);
      EventHandler.remove(this.element, "click", this.clickHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      EventHandler.remove(this.element, "focusout", this.focusout);
      if (!isNullOrUndefined(this.scroll)) {
        EventHandler.remove(this.element, "scroll", this.onListScroll);
      }
      if (this.touchModule)
        this.touchModule.destroy();
      this.touchModule = null;
    };
    ListView2.prototype.removeFocus = function() {
      var focusedLI = this.element.querySelectorAll("." + classNames.focused);
      for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
        var ele = focusedLI_1[_i];
        ele.classList.remove(classNames.focused);
      }
    };
    ListView2.prototype.removeHover = function() {
      var hoverLI = this.element.querySelector("." + classNames.hover);
      if (hoverLI) {
        hoverLI.classList.remove(classNames.hover);
      }
    };
    ListView2.prototype.removeSelect = function(li) {
      if (isNullOrUndefined(li)) {
        var selectedLI = this.element.querySelectorAll("." + classNames.selected);
        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
          var ele = selectedLI_1[_i];
          if (this.showCheckBox && ele.querySelector("." + classNames.checked)) {
            continue;
          } else {
            ele.classList.remove(classNames.selected);
          }
        }
      } else {
        li.classList.remove(classNames.selected);
      }
    };
    ListView2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);
    };
    ListView2.prototype.setCheckboxLI = function(li, e) {
      if (this.isValidLI(li) && this.enable && this.showCheckBox) {
        if (this.curUL.querySelector("." + classNames.focused)) {
          this.curUL.querySelector("." + classNames.focused).classList.remove(classNames.focused);
        }
        var textAreaFocus = li.querySelector("textarea") || li.querySelector("input");
        li.classList.add(classNames.focused);
        if (!isNullOrUndefined(e)) {
          if (e.target === textAreaFocus) {
            textAreaFocus.classList.add("e-focused");
          }
        }
        var checkboxElement = li.querySelector("." + classNames.checkboxWrapper);
        var checkIcon = checkboxElement.querySelector("." + classNames.checkboxIcon + "." + classNames.icon);
        this.removeHover();
        if (!checkIcon.classList.contains(classNames.checked)) {
          checkIcon.classList.add(classNames.checked);
          li.classList.add(classNames.selected);
        } else {
          checkIcon.classList.remove(classNames.checked);
          li.classList.remove(classNames.selected);
        }
        checkboxElement.setAttribute("aria-checked", checkIcon.classList.contains(classNames.checked) ? "true" : "false");
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });
        if (this.enableVirtualization) {
          this.virtualizationModule.setCheckboxLI(li, e);
        }
        this.trigger("select", eventArgs);
        this.setSelectedItemData(li);
        this.renderSubList(li);
      }
    };
    ListView2.prototype.selectEventData = function(li, e) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      var selectedItem;
      if (!isNullOrUndefined(data) && typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") {
        selectedItem = { item: li, text: li && li.innerText.trim(), data: this.dataSource };
      } else {
        selectedItem = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data
        };
      }
      var eventArgs = {};
      merge(eventArgs, selectedItem);
      if (e) {
        merge(eventArgs, {
          isInteracted: true,
          event: e,
          cancel: false,
          index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)
        });
      }
      return eventArgs;
    };
    ListView2.prototype.setSelectedItemData = function(li) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      if (!isNullOrUndefined(data) && (typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number")) {
        this.selectedItems = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        this.selectedItems = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data
        };
      }
    };
    ListView2.prototype.setSelectLI = function(li, e) {
      var _this = this;
      if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {
        if (!this.showCheckBox) {
          this.removeSelect();
        }
        li.classList.add(classNames.selected);
        this.removeHover();
        this.setSelectedItemData(li);
        if (this.enableVirtualization) {
          this.virtualizationModule.setSelectLI(li, e);
        }
        var eventArgs = this.selectEventData(li, e);
        this.trigger("select", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.selectedLI = li;
            _this.renderSubList(li);
          }
        });
      }
    };
    ListView2.prototype.setHoverLI = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {
        var lastLi = this.element.querySelectorAll("." + classNames.hover);
        if (lastLi && lastLi.length) {
          removeClass(lastLi, classNames.hover);
        }
        if (!li.classList.contains(classNames.selected) || this.showCheckBox) {
          li.classList.add(classNames.hover);
        }
      }
    };
    ListView2.prototype.getSubDS = function() {
      var levelKeys = this.curDSLevel;
      if (levelKeys.length) {
        var ds = this.localData;
        for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
          var key = levelKeys_1[_i];
          var field = {};
          field[this.fields.id] = key;
          this.curDSJSON = this.findItemFromDS(ds, field);
          var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
          ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
        }
        return ds;
      }
      return this.localData;
    };
    ListView2.prototype.getItemData = function(li) {
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      var fields = this.getElementUID(li);
      var curDS;
      if (isNullOrUndefined(this.element.querySelector("." + classNames.hasChild)) && this.fields.groupBy) {
        curDS = this.curViewDS;
      } else {
        curDS = dataSource;
      }
      return this.findItemFromDS(curDS, fields);
    };
    ListView2.prototype.findItemFromDS = function(dataSource, fields, parent) {
      var _this = this;
      var resultJSON;
      if (dataSource && dataSource.length && fields) {
        dataSource.some(function(data) {
          var fieldData = getFieldValues(data, _this.listBaseOption.fields);
          if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!isNullOrUndefined(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {
            resultJSON = parent ? dataSource : data;
          } else if (typeof data !== "object" && dataSource.indexOf(data) !== -1) {
            resultJSON = parent ? dataSource : data;
          } else if (!isNullOrUndefined(fields[_this.fields.id]) && isNullOrUndefined(fieldData[_this.fields.id])) {
            var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]');
            if (li && li.innerText.trim() === fieldData[_this.fields.text]) {
              resultJSON = data;
            }
          } else if (Object.prototype.hasOwnProperty.call(fieldData, _this.fields.child) && fieldData[_this.fields.child].length) {
            resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
          }
          return !!resultJSON;
        });
      } else {
        resultJSON = dataSource;
      }
      return resultJSON;
    };
    ListView2.prototype.getQuery = function() {
      var columns = [];
      var query = this.query ? this.query : new Query();
      if (!this.query) {
        for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
          var column = _a[_i];
          if (column !== "tableName" && !!this.fields["" + column] && this.fields["" + column] !== ListBase.defaultMappedFields["" + column] && columns.indexOf(this.fields["" + column]) === -1) {
            columns.push(this.fields["" + column]);
          }
        }
        query.select(columns);
        if (Object.prototype.hasOwnProperty.call(this.fields.properties, "tableName")) {
          query.from(this.fields.tableName);
        }
      }
      return query;
    };
    ListView2.prototype.setViewDataSource = function(dataSource) {
      if (dataSource === void 0) {
        dataSource = this.localData;
      }
      var fieldValue = isNullOrUndefined(this.fields.sortBy) ? this.fields.text : this.fields.sortBy;
      var query = ListBase.addSorting(this.sortOrder, fieldValue);
      if (dataSource && this.fields.groupBy) {
        if (this.sortOrder !== "None") {
          this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, query), this.listBaseOption.fields, this.sortOrder);
        } else {
          this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
        }
      } else if (dataSource && this.sortOrder !== "None") {
        this.curViewDS = ListBase.getDataSource(dataSource, query);
      } else {
        this.curViewDS = dataSource;
      }
    };
    ListView2.prototype.isInAnimation = function() {
      return this.curUL.classList.contains(".e-animate");
    };
    ListView2.prototype.renderRemoteLists = function(e, listViewComponent) {
      if (this.isDestroyed) {
        return;
      }
      this.localData = e.result;
      listViewComponent.removeElement(listViewComponent.contentContainer);
      this.renderList();
      this.trigger("actionComplete", e);
    };
    ListView2.prototype.triggerActionFailure = function(e) {
      if (this.isDestroyed) {
        return;
      }
      this.trigger("actionFailure", e);
    };
    ListView2.prototype.setLocalData = function() {
      var _this = this;
      this.trigger("actionBegin");
      if (this.dataSource instanceof DataManager) {
        if (this.dataSource.ready) {
          this.dataSource.ready.then(function(e) {
            _this.isOffline = _this.dataSource.dataSource.offline;
            if (_this.dataSource instanceof DataManager && _this.isOffline) {
              _this.renderRemoteLists(e, _this);
            }
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        } else {
          this.dataSource.executeQuery(this.getQuery()).then(function(e) {
            _this.renderRemoteLists(e, _this);
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        }
      } else if (!this.dataSource || !this.dataSource.length) {
        var ul = this.element.querySelector("ul");
        if (ul) {
          remove(ul);
          this.setProperties({ dataSource: ListBase.createJsonFromElement(ul) }, true);
          this.localData = this.dataSource;
          this.renderList();
          this.trigger("actionComplete", { data: this.localData });
        }
      } else {
        this.localData = this.dataSource;
        this.renderList();
        this.trigger("actionComplete", { data: this.localData });
      }
    };
    ListView2.prototype.reRender = function() {
      this.removeElement(this.headerEle);
      this.removeElement(this.ulElement);
      this.removeElement(this.contentContainer);
      if (this.isReact) {
        this.clearTemplate();
      }
      if (Object.keys(window).indexOf("ejsInterop") === -1) {
        this.element.innerHTML = "";
      }
      this.headerEle = this.ulElement = this.liCollection = void 0;
      this.header();
      this.setLocalData();
    };
    ListView2.prototype.resetCurrentList = function() {
      this.setViewDataSource(this.curViewDS);
      this.contentContainer.innerHTML = "";
      this.createList();
      this.renderIntoDom(this.curUL);
    };
    ListView2.prototype.setAttributes = function(liElements) {
      for (var i = 0; i < liElements.length; i++) {
        var element = liElements[parseInt(i.toString(), 10)];
        if (element.classList.contains("e-list-item")) {
          element.setAttribute("id", this.element.id + "_" + element.getAttribute("data-uid"));
          element.setAttribute("tabindex", "-1");
        }
      }
    };
    ListView2.prototype.createList = function() {
      this.currentLiElements = [];
      this.isNestedList = false;
      this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);
      this.liCollection = this.curUL.querySelectorAll("." + classNames.listItem);
      this.setAttributes(this.liCollection);
    };
    ListView2.prototype.renderSubList = function(li) {
      this.liElement = li;
      var uID = li.getAttribute("data-uid");
      if (li.classList.contains(classNames.hasChild) && uID) {
        var ul = closest(li.parentNode, "." + classNames.parentItem);
        var ele = this.element.querySelector("[pid='" + uID + "']");
        this.curDSLevel.push(uID);
        this.setViewDataSource(this.getSubDS());
        if (!ele) {
          var data = this.curViewDS;
          ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this);
          if (this.isReact) {
            this.renderReactTemplates();
          }
          var lists = ele.querySelectorAll("." + classNames.listItem);
          this.setAttributes(lists);
          ele.setAttribute("pID", uID);
          ele.style.display = "none";
          this.renderIntoDom(ele);
        }
        this.switchView(ul, ele);
        this.liCollection = this.curUL.querySelectorAll("." + classNames.listItem);
        if (this.selectedItems) {
          var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);
          this.header(fieldData[this.listBaseOption.fields.text], true, "header");
        }
        this.selectedLI = void 0;
      }
    };
    ListView2.prototype.renderIntoDom = function(ele) {
      this.contentContainer.appendChild(ele);
    };
    ListView2.prototype.renderList = function(data) {
      this.setViewDataSource(data);
      if (this.enableVirtualization) {
        if (Object.keys(this.dataSource).length) {
          if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
          }
        }
        this.virtualizationModule.uiVirtualization();
      } else {
        this.createList();
        this.contentContainer = this.createElement("div", { className: classNames.container });
        this.element.appendChild(this.contentContainer);
        this.renderIntoDom(this.ulElement);
        if (this.isReact) {
          this.renderReactTemplates();
        }
      }
    };
    ListView2.prototype.getElementUID = function(obj) {
      var fields = {};
      if (obj instanceof Element) {
        fields[this.fields.id] = obj.getAttribute("data-uid");
      } else {
        fields = obj;
      }
      return fields;
    };
    ListView2.prototype.render = function() {
      this.element.classList.add(classNames.root);
      attributes(this.element, { tabindex: "0" });
      this.setCSSClass();
      this.setEnableRTL();
      this.setEnable();
      this.setSize();
      this.wireEvents();
      this.header();
      this.setLocalData();
      this.setHTMLAttribute();
      this.rippleFn = rippleEffect(this.element, {
        selector: "." + classNames.listItem
      });
      this.renderComplete();
      this.previousScrollTop = this.element.scrollTop;
    };
    ListView2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      this.unWireEvents();
      var classAr = [
        classNames.root,
        classNames.disable,
        "e-rtl",
        "e-has-header",
        "e-lib"
      ].concat(this.cssClass ? this.cssClass.split(" ").filter(function(css) {
        return css;
      }) : []);
      removeClass([this.element], classAr);
      this.element.removeAttribute("role");
      this.element.removeAttribute("tabindex");
      this.curUL = this.ulElement = this.liCollection = this.headerEle = void 0;
      this.element.innerHTML = "";
      this.contentContainer = null;
      this.selectedItems = null;
      this.selectedLI = null;
      this.liElement = null;
      this.targetElement = null;
      this.currentLiElements = null;
      this.virtualCheckBox = null;
      _super.prototype.destroy.call(this);
    };
    ListView2.prototype.back = function() {
      var pID = this.curDSLevel[this.curDSLevel.length - 1];
      if (pID === void 0 || this.isInAnimation()) {
        return;
      }
      this.curDSLevel.pop();
      this.setViewDataSource(this.getSubDS());
      var toUL = this.element.querySelector("[data-uid='" + pID + "']");
      var fromUL = this.curUL;
      if (!toUL) {
        this.createList();
        this.renderIntoDom(this.ulElement);
        toUL = this.curUL;
      } else {
        toUL = toUL.parentElement;
      }
      var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
      var text = fieldData[this.fields.text];
      this.switchView(fromUL, toUL, true);
      this.removeFocus();
      var li = this.element.querySelector("[data-uid='" + pID + "']");
      li.classList.remove(classNames.disable);
      li.classList.add(classNames.focused);
      if (!(this.showCheckBox && li.querySelector("." + classNames.checkboxIcon).classList.contains(classNames.checked))) {
        li.classList.remove(classNames.selected);
      }
      this.liCollection = this.curUL.querySelectorAll("." + classNames.listItem);
      if (this.enableHtmlSanitizer) {
        this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);
      }
      this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false, "header");
    };
    ListView2.prototype.selectItem = function(item) {
      if (this.enableVirtualization) {
        this.virtualizationModule.selectItem(item);
      } else if (this.showCheckBox) {
        this.setCheckboxLI(this.getLiFromObjOrElement(item));
      } else {
        if (isNullOrUndefined(item) === true) {
          this.removeSelect();
        } else {
          this.setSelectLI(this.getLiFromObjOrElement(item));
        }
      }
    };
    ListView2.prototype.unselectItem = function(item) {
      if (isNullOrUndefined(item)) {
        this.removeSelect();
      } else {
        var li = this.getLiFromObjOrElement(item);
        if (!isNullOrUndefined(li)) {
          this.removeSelect(li);
        }
      }
    };
    ListView2.prototype.getLiFromObjOrElement = function(obj) {
      var li;
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (!isNullOrUndefined(obj)) {
        if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
          if (obj instanceof Element) {
            var uid = obj.getAttribute("data-uid").toString();
            for (var i = 0; i < this.liCollection.length; i++) {
              if (this.liCollection[parseInt(i.toString(), 10)].getAttribute("data-uid").toString() === uid) {
                li = this.liCollection[parseInt(i.toString(), 10)];
                break;
              }
            }
          } else {
            Array.prototype.some.call(this.curUL.querySelectorAll("." + classNames.listItem), function(item) {
              if (item.innerText.trim() === obj.toString()) {
                li = item;
                return true;
              } else {
                return false;
              }
            });
          }
        } else {
          var resultJSON = this.getItemData(obj);
          var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
          if (resultJSON) {
            li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
            if (!this.enableVirtualization && isNullOrUndefined(li)) {
              var curLi = this.element.querySelectorAll("." + classNames.listItem);
              for (var i = 0; i < curLi.length; i++) {
                if (curLi[parseInt(i.toString(), 10)].innerText.trim() === fieldData[this.fields.text]) {
                  li = curLi[parseInt(i.toString(), 10)];
                }
              }
            }
          }
        }
      }
      return li;
    };
    ListView2.prototype.selectMultipleItems = function(item) {
      if (!isNullOrUndefined(item)) {
        for (var i = 0; i < item.length; i++) {
          if (!isNullOrUndefined(item[parseInt(i.toString(), 10)])) {
            this.selectItem(item[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    ListView2.prototype.getParentId = function() {
      var parentId = [];
      if (this.isNestedList) {
        for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
          parentId.push(this.curDSLevel[parseInt(i.toString(), 10)]);
        }
      }
      return parentId;
    };
    ListView2.prototype.updateSelectedId = function() {
      this.selectedId = [];
      var liCollection = this.curUL.getElementsByClassName(classNames.selected);
      for (var i = 0; i < liCollection.length; i++) {
        var tempData = this.getItemData(liCollection[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(tempData) && tempData[this.listBaseOption.fields.id]) {
          this.selectedId.push(tempData[this.listBaseOption.fields.id]);
        }
      }
    };
    ListView2.prototype.getSelectedItems = function() {
      var finalValue;
      var isCompleted = false;
      this.selectedId = [];
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization && !isCompleted) {
        finalValue = this.virtualizationModule.getSelectedItems();
        isCompleted = true;
      } else if (this.showCheckBox && !isCompleted) {
        var liCollection = this.curUL.getElementsByClassName(classNames.selected);
        var liTextCollection = [];
        var liDataCollection = [];
        this.selectedId = [];
        var dataParent = [];
        for (var i = 0; i < liCollection.length; i++) {
          if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
            liTextCollection.push(liCollection[parseInt(i.toString(), 10)].innerText.trim());
          } else {
            var tempData = this.getItemData(liCollection[parseInt(i.toString(), 10)]);
            var fieldData = getFieldValues(tempData, this.listBaseOption.fields);
            if (this.isNestedList) {
              dataParent.push({ data: tempData, parentId: this.getParentId() });
            } else {
              liDataCollection.push(tempData);
            }
            if (fieldData) {
              liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
              this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            } else {
              liTextCollection.push(void 0);
              this.selectedId.push(void 0);
            }
          }
        }
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = { item: liCollection, data: dataSource, text: liTextCollection };
          isCompleted = true;
        }
        if (this.isNestedList && !isCompleted) {
          finalValue = { item: liCollection, data: dataParent, text: liTextCollection };
          isCompleted = true;
        } else if (!isCompleted) {
          finalValue = { item: liCollection, data: liDataCollection, text: liTextCollection };
          isCompleted = true;
        }
      } else if (!isCompleted) {
        var liElement = this.element.getElementsByClassName(classNames.selected)[0];
        var fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = !isNullOrUndefined(liElement) ? {
            item: liElement,
            data: dataSource,
            text: liElement.innerText.trim()
          } : void 0;
          isCompleted = true;
        } else if (!isCompleted) {
          if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {
            finalValue = void 0;
            isCompleted = true;
          } else {
            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            finalValue = {
              text: fieldData[this.listBaseOption.fields.text],
              item: liElement,
              data: this.getItemData(liElement)
            };
            isCompleted = true;
          }
        }
      }
      return finalValue;
    };
    ListView2.prototype.findItem = function(item) {
      return this.getItemData(item);
    };
    ListView2.prototype.enableItem = function(item) {
      this.setItemState(item, true);
      if (this.enableVirtualization) {
        this.virtualizationModule.enableItem(item);
      }
    };
    ListView2.prototype.disableItem = function(item) {
      this.setItemState(item, false);
      if (this.enableVirtualization) {
        this.virtualizationModule.disableItem(item);
      }
    };
    ListView2.prototype.setItemState = function(item, isEnable) {
      var resultJSON = this.getItemData(item);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (isEnable) {
          if (li) {
            li.classList.remove(classNames.disable);
          }
          delete resultJSON[this.fields.enabled];
        } else if (!isEnable) {
          if (li) {
            li.classList.add(classNames.disable);
          }
          resultJSON[this.fields.enabled] = false;
        }
      }
    };
    ListView2.prototype.showItem = function(item) {
      this.showHideItem(item, false, "");
      if (this.enableVirtualization) {
        this.virtualizationModule.showItem(item);
      }
    };
    ListView2.prototype.hideItem = function(item) {
      this.showHideItem(item, true, "none");
      if (this.enableVirtualization) {
        this.virtualizationModule.hideItem(item);
      }
    };
    ListView2.prototype.showHideItem = function(obj, isHide, display) {
      var resultJSON = this.getItemData(obj);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (li) {
          li.style.display = display;
        }
        if (isHide) {
          resultJSON[this.fields.isVisible] = false;
        } else {
          delete resultJSON[this.fields.isVisible];
        }
      }
    };
    ListView2.prototype.addItem = function(data, fields, index) {
      if (fields === void 0) {
        fields = void 0;
      }
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      this.addItemInternally(data, fields, dataSource, index);
    };
    ListView2.prototype.addItemInternally = function(data, fields, dataSource, index) {
      if (data instanceof Array) {
        if (this.enableVirtualization) {
          this.virtualizationModule.addItem(data, fields, dataSource, index);
        } else {
          var ds = this.findItemFromDS(dataSource, fields);
          var child = void 0;
          if (ds) {
            var fieldData = getFieldValues(ds, this.listBaseOption.fields);
            child = fieldData[this.fields.child];
            if (!child) {
              child = [];
            }
            child = child.concat(data);
          }
          if (ds instanceof Array) {
            for (var i = 0; i < data.length; i++) {
              dataSource = this.addItemAtIndex(index, dataSource, data[parseInt(i.toString(), 10)]);
              this.setViewDataSource(dataSource);
              var targetUL = this.contentContainer ? this.contentContainer.children[0] : null;
              if (this.contentContainer && targetUL) {
                this.addItemIntoDom(data[parseInt(i.toString(), 10)], targetUL, this.curViewDS);
              } else {
                this.reRender();
              }
            }
            this.liCollection = this.curUL.querySelectorAll("." + classNames.listItem);
          } else {
            if (ds) {
              ds[this.fields.child] = child;
              this.addItemInNestedList(ds, data);
            }
          }
        }
      }
    };
    ListView2.prototype.addItemAtIndex = function(index, newDataSource, itemData) {
      var isIndexValid = !isNullOrUndefined(index) && index >= 0 && index < newDataSource.length && isNullOrUndefined(this.listBaseOption.fields.groupBy);
      if (isIndexValid) {
        newDataSource.splice(index, 0, itemData);
      } else {
        newDataSource.push(itemData);
      }
      return newDataSource;
    };
    ListView2.prototype.addItemInNestedList = function(targetItemData, itemQueue) {
      var targetItemId = targetItemData[this.fields.id];
      var targetChildDS = targetItemData[this.fields.child];
      var isAlreadyRenderedUL = this.element.querySelector("[pid='" + targetItemId + "']");
      var targetLi = this.element.querySelector("[data-uid='" + targetItemId + "']");
      var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? closest(targetLi, "ul") : null;
      var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
      var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;
      if (isTargetEmptyChild) {
        var targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);
        this.setAttributes(targetRefreshedElement);
        targetUL.insertBefore(targetRefreshedElement[0], targetLi);
        detach(targetLi);
      }
      if (isAlreadyRenderedUL && itemQueue) {
        for (var i = 0; i < itemQueue.length; i++) {
          targetDS.push(itemQueue[parseInt(i.toString(), 10)]);
          this.addItemIntoDom(itemQueue[parseInt(i.toString(), 10)], targetUL, targetDS);
        }
      }
    };
    ListView2.prototype.addItemIntoDom = function(currentItem, targetUL, curViewDS) {
      var index = curViewDS.indexOf(currentItem);
      this.addListItem(currentItem, index, targetUL, curViewDS);
      var curItemDS = curViewDS[index - 1];
      if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
        this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
      }
    };
    ListView2.prototype.addListItem = function(dataSource, index, ulElement, curViewDS) {
      var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;
      var li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);
      this.setAttributes(li);
      if (this.template && this.isReact) {
        this.renderReactTemplates();
      }
      if (this.fields.groupBy && curViewDS[index + 1] && curViewDS[index + 1].isHeader) {
        var targetEle = this.getLiFromObjOrElement(curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      ulElement.insertBefore(li[0], target);
    };
    ListView2.prototype.removeItem = function(item) {
      var listDataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization) {
        this.virtualizationModule.removeItem(item);
      } else {
        this.removeItemFromList(item, listDataSource);
      }
    };
    ListView2.prototype.removeItemFromList = function(obj, listDataSource) {
      var _this = this;
      var curViewDS = this.curViewDS;
      var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
      var dataSource = this.findItemFromDS(listDataSource, fields, true);
      if (dataSource) {
        var data_1 = this.findItemFromDS(dataSource, fields);
        var index = curViewDS.indexOf(data_1);
        var li = this.getLiFromObjOrElement(obj);
        var groupLi = void 0;
        this.validateNestedView(li);
        if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
          if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {
            groupLi = li.previousElementSibling;
          }
        }
        if (li) {
          detach(li);
        }
        if (groupLi) {
          detach(groupLi);
        }
        var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, function(value) {
          return value === data_1[_this.fields.id];
        }, null) : null;
        var dsIndex = dataSource.indexOf(data_1);
        dataSource.splice(dsIndex, 1);
        this.setViewDataSource(listDataSource);
        if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
          var parentLi = this.getLiFromObjOrElement(foundData.parent);
          if (parentLi) {
            var li_1 = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);
            this.setAttributes(li_1);
            parentLi.parentElement.insertBefore(li_1[0], parentLi);
            parentLi.parentElement.removeChild(parentLi);
          }
        }
        if (dataSource.length <= 0) {
          this.back();
        }
        this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.listItem));
      }
    };
    ListView2.prototype.validateNestedView = function(li) {
      var liID = li ? li.getAttribute("data-uid").toString().toLowerCase() : null;
      if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
        while (this.curDSLevel.some(function(id) {
          return id.toString().toLowerCase() === liID;
        })) {
          this.back();
        }
      }
    };
    ListView2.prototype.removeMultipleItems = function(item) {
      if (item.length) {
        for (var i = 0; i < item.length; i++) {
          this.removeItem(item[parseInt(i.toString(), 10)]);
        }
      }
    };
    ListView2.prototype.findParent = function(dataSource, id, callback, parent) {
      if (Object.prototype.hasOwnProperty.call(dataSource, id) && callback(dataSource[id]) === true) {
        return extend({}, dataSource);
      }
      for (var i = 0; i < Object.keys(dataSource).length; i++) {
        if (dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]] && typeof dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]] === "object") {
          var result = this.findParent(dataSource[Object.keys(dataSource)[parseInt(i.toString(), 10)]], id, callback, dataSource);
          if (result != null) {
            if (!result.parent) {
              result.parent = parent;
            }
            return result;
          }
        }
      }
      return null;
    };
    ListView2.prototype.getModuleName = function() {
      return "listview";
    };
    ListView2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({ args: [this], member: "virtualization", name: "Virtualization" });
      }
      return modules;
    };
    ListView2.prototype.onListScroll = function(e) {
      var args = { originalEvent: e, scrollDirection: "Bottom", distanceY: this.element.scrollHeight - this.element.scrollTop };
      var currentScrollTop = this.element.scrollTop;
      if (currentScrollTop > this.previousScrollTop) {
        args.scrollDirection = "Bottom";
        args.distanceY = this.element.scrollHeight - this.element.clientHeight - this.element.scrollTop;
        this.trigger("scroll", args);
      } else if (this.previousScrollTop > currentScrollTop) {
        args.scrollDirection = "Top";
        args.distanceY = this.element.scrollTop;
        this.trigger("scroll", args);
      }
      this.previousScrollTop = currentScrollTop;
    };
    ListView2.prototype.getPersistData = function() {
      return this.addOnPersist([
        "cssClass",
        "enableRtl",
        "htmlAttributes",
        "enable",
        "fields",
        "animation",
        "headerTitle",
        "sortOrder",
        "showIcon",
        "height",
        "width",
        "showCheckBox",
        "checkBoxPosition",
        "selectedId"
      ]);
    };
    __decorate4([
      Property("")
    ], ListView2.prototype, "cssClass", void 0);
    __decorate4([
      Property(false)
    ], ListView2.prototype, "enableVirtualization", void 0);
    __decorate4([
      Property({})
    ], ListView2.prototype, "htmlAttributes", void 0);
    __decorate4([
      Property(true)
    ], ListView2.prototype, "enable", void 0);
    __decorate4([
      Property([])
    ], ListView2.prototype, "dataSource", void 0);
    __decorate4([
      Property()
    ], ListView2.prototype, "query", void 0);
    __decorate4([
      Complex(ListBase.defaultMappedFields, FieldSettings)
    ], ListView2.prototype, "fields", void 0);
    __decorate4([
      Property({ effect: "SlideLeft", duration: 400, easing: "ease" })
    ], ListView2.prototype, "animation", void 0);
    __decorate4([
      Property("None")
    ], ListView2.prototype, "sortOrder", void 0);
    __decorate4([
      Property(false)
    ], ListView2.prototype, "showIcon", void 0);
    __decorate4([
      Property(false)
    ], ListView2.prototype, "showCheckBox", void 0);
    __decorate4([
      Property("Left")
    ], ListView2.prototype, "checkBoxPosition", void 0);
    __decorate4([
      Property("")
    ], ListView2.prototype, "headerTitle", void 0);
    __decorate4([
      Property(false)
    ], ListView2.prototype, "showHeader", void 0);
    __decorate4([
      Property(true)
    ], ListView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate4([
      Property("")
    ], ListView2.prototype, "height", void 0);
    __decorate4([
      Property("")
    ], ListView2.prototype, "width", void 0);
    __decorate4([
      Property(null)
    ], ListView2.prototype, "template", void 0);
    __decorate4([
      Property(null)
    ], ListView2.prototype, "headerTemplate", void 0);
    __decorate4([
      Property(null)
    ], ListView2.prototype, "groupTemplate", void 0);
    __decorate4([
      Event()
    ], ListView2.prototype, "select", void 0);
    __decorate4([
      Event()
    ], ListView2.prototype, "actionBegin", void 0);
    __decorate4([
      Event()
    ], ListView2.prototype, "actionComplete", void 0);
    __decorate4([
      Event()
    ], ListView2.prototype, "actionFailure", void 0);
    __decorate4([
      Event()
    ], ListView2.prototype, "scroll", void 0);
    ListView2 = __decorate4([
      NotifyPropertyChanges
    ], ListView2);
    return ListView2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js
var listElementCount = 1.5;
var windowElementCount = 3;
var Virtualization = (
  /** @class */
  function() {
    function Virtualization2(instance) {
      this.elementDifference = 0;
      this.listViewInstance = instance;
    }
    Virtualization2.prototype.isNgTemplate = function() {
      return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== "string";
    };
    Virtualization2.prototype.isVueFunctionTemplate = function() {
      return this.listViewInstance.isVue && typeof this.listViewInstance.template === "function";
    };
    Virtualization2.prototype.uiVirtualization = function() {
      this.wireScrollEvent(false);
      var curViewDS = this.listViewInstance.curViewDS;
      var firstDs = curViewDS.slice(0, 1);
      this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption, null, this.listViewInstance);
      this.listViewInstance.contentContainer = this.listViewInstance.createElement("div", { className: classNames.container });
      this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
      this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
      this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
      this.expectedDomItemCount = this.ValidateItemCount(1e4);
      this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
      this.uiFirstIndex = 0;
      this.uiLastIndex = this.domItemCount - 1;
      var otherDs = curViewDS.slice(1, this.domItemCount);
      var listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption, null, null, this.listViewInstance);
      append(listItems, this.listViewInstance.ulElement);
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
      this.topElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
      this.bottomElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      this.topElement.style.height = "0px";
      this.bottomElement.style.height = this.totalHeight + "px";
      this.topElementHeight = 0;
      this.bottomElementHeight = this.totalHeight;
      this.listDiff = 0;
      this.uiIndicesInitialization();
    };
    Virtualization2.prototype.wireScrollEvent = function(destroy2) {
      if (!destroy2) {
        if (this.listViewInstance.isWindow) {
          this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
          window.addEventListener("scroll", this.onVirtualScroll);
        } else {
          EventHandler.add(this.listViewInstance.element, "scroll", this.onVirtualUiScroll, this);
        }
      } else {
        if (this.listViewInstance.isWindow === true) {
          window.removeEventListener("scroll", this.onVirtualScroll);
          window.removeEventListener("scroll", this.updateUl);
        } else {
          EventHandler.remove(this.listViewInstance.element, "scroll", this.onVirtualUiScroll);
        }
      }
    };
    Virtualization2.prototype.ValidateItemCount = function(dataSourceLength) {
      var height = parseFloat(formatUnit(this.listViewInstance.height));
      var itemCount;
      if (this.listViewInstance.isWindow) {
        itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);
      } else {
        if (typeof this.listViewInstance.height === "string" && this.listViewInstance.height.indexOf("%") !== -1) {
          itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);
        } else {
          itemCount = Math.round(height / this.listItemHeight * listElementCount);
        }
      }
      if (itemCount > dataSourceLength) {
        itemCount = dataSourceLength;
      }
      return itemCount;
    };
    Virtualization2.prototype.uiIndicesInitialization = function() {
      this.uiIndices = { "activeIndices": [], "disabledItemIndices": [], "hiddenItemIndices": [] };
      var data = this.listViewInstance.curViewDS;
      for (var i = 0; i < data.length; i++) {
        if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
          this.uiIndices.activeIndices.push(i);
        }
        if (!isNullOrUndefined(data[parseInt(i.toString(), 10)][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
          this.uiIndices.disabledItemIndices.push(i);
        }
      }
      if (this.isNgTemplate()) {
        var items = this.listViewInstance.element.querySelectorAll("." + classNames.listItem);
        for (var index = 0; index < items.length; index++) {
          items[index].context = this.listViewInstance.viewContainerRef.get(index).context;
        }
      }
    };
    Virtualization2.prototype.refreshItemHeight = function() {
      if (this.listViewInstance.curViewDS.length) {
        var curViewDS = this.listViewInstance.curViewDS;
        this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
        this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
        this.bottomElementHeight = this.totalHeight;
        this.bottomElement.style.height = this.totalHeight + "px";
      }
    };
    Virtualization2.prototype.getscrollerHeight = function(startingHeight) {
      return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
    };
    Virtualization2.prototype.onVirtualUiScroll = function() {
      var _a;
      var startingHeight;
      var curViewDS = this.listViewInstance.curViewDS;
      this.listItemHeight = select(".e-list-item", this.listViewInstance.element).getBoundingClientRect().height;
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      if (this.listViewInstance.isWindow) {
        startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
      } else {
        startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
      }
      this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;
      var scroll2 = this.getscrollerHeight(startingHeight);
      this.topElementHeight = this.listItemHeight * Math.floor(scroll2 / this.listItemHeight);
      this.bottomElementHeight = this.totalHeight - this.topElementHeight;
      _a = scroll2 <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];
      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
        this.topElement.style.height = this.topElementHeight + "px";
        this.bottomElement.style.height = this.bottomElementHeight + "px";
        if (scroll2 > this.scrollPosition) {
          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, true);
          } else {
            this.onNormalScroll(listDiff, true);
          }
        } else {
          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, false);
          } else {
            this.onNormalScroll(listDiff, false);
          }
        }
      }
      this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);
      if (typeof this.listViewInstance.onUIScrolled === "function") {
        this.listViewInstance.onUIScrolled();
      }
      this.scrollPosition = scroll2;
    };
    Virtualization2.prototype.onLongScroll = function(listDiff, isScrollingDown) {
      var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
      var elements = this.listViewInstance.ulElement.querySelectorAll("li");
      for (var i = 0; i < elements.length; i++) {
        this.updateUI(elements[i], index);
        index++;
      }
      this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
      this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
    };
    Virtualization2.prototype.onNormalScroll = function(listDiff, isScrollingDown) {
      if (isScrollingDown) {
        for (var i = 0; i < listDiff; i++) {
          var index = ++this.uiLastIndex;
          this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
          this.uiFirstIndex++;
        }
      } else {
        for (var i = 0; i < listDiff; i++) {
          var index = --this.uiFirstIndex;
          var target = this.topElement.nextSibling;
          this.updateUI(this.bottomElement.previousElementSibling, index, target);
          this.uiLastIndex--;
        }
      }
    };
    Virtualization2.prototype.updateUiContent = function(element, index) {
      var curViewDs = this.listViewInstance.curViewDS;
      if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
        element.dataset.uid = ListBase.generateId();
        element.getElementsByClassName(classNames.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
      } else {
        element.dataset.uid = curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.id] ? curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.id] : ListBase.generateId();
        element.getElementsByClassName(classNames.listItemText)[0].innerHTML = curViewDs[parseInt(index.toString(), 10)][this.listViewInstance.fields.text];
      }
      if (this.listViewInstance.showIcon) {
        if (element.querySelector("." + classNames.listIcon)) {
          detach(element.querySelector("." + classNames.listIcon));
        }
        if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
          var textContent = element.querySelector("." + classNames.textContent);
          var curViewDS = this.listViewInstance.curViewDS[index];
          var iconCss = curViewDS[this.listViewInstance.fields.iconCss].toString();
          var target = this.listViewInstance.createElement("div", {
            className: classNames.listIcon + " " + iconCss
          });
          textContent.insertBefore(target, element.querySelector("." + classNames.listItemText));
        }
      }
      if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
        if (!this.checkListWrapper) {
          this.checkListWrapper = this.listViewInstance.curUL.querySelector("." + classNames.checkboxWrapper).cloneNode(true);
        }
        var textContent = element.querySelector("." + classNames.textContent);
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element.querySelector("." + classNames.checkboxWrapper)) {
            element.classList.remove(classNames.checklist);
            textContent.classList.remove(classNames.checkbox);
            detach(element.querySelector("." + classNames.checkboxWrapper));
          }
        } else {
          if (!element.querySelector("." + classNames.checkboxWrapper)) {
            element.classList.add(classNames.checklist);
            textContent.classList.add(classNames.checkbox);
            if (this.listViewInstance.checkBoxPosition === "Left") {
              textContent.classList.add("e-checkbox-left");
            } else {
              textContent.classList.add("e-checkbox-right");
            }
            textContent.append(this.checkListWrapper.cloneNode(true));
          }
        }
      }
    };
    Virtualization2.prototype.changeElementAttributes = function(element, index) {
      element.classList.remove(classNames.disable);
      if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
        element.classList.add(classNames.disable);
      }
      element.style.display = "";
      if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
        element.style.display = "none";
      }
      if (this.listViewInstance.showCheckBox) {
        var checklistElement = element.querySelector("." + classNames.checkboxWrapper);
        element.classList.remove(classNames.selected);
        element.classList.remove(classNames.focused);
        if (checklistElement) {
          checklistElement.removeAttribute("aria-checked");
          checklistElement.firstElementChild.classList.remove(classNames.checked);
        }
        if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames.selected)) {
          element.classList.add(classNames.selected);
          checklistElement.firstElementChild.classList.add(classNames.checked);
          checklistElement.setAttribute("aria-checked", "true");
          if (this.activeIndex === index) {
            element.classList.add(classNames.focused);
          }
        }
      } else {
        element.classList.remove(classNames.selected);
        element.removeAttribute("aria-selected");
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames.selected)) {
          element.classList.add(classNames.selected);
          element.setAttribute("aria-selected", "true");
        }
      }
      if (this.listViewInstance.fields.groupBy) {
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element.classList.contains(classNames.listItem)) {
            element.classList.remove(classNames.listItem);
            element.setAttribute("role", "group");
            element.classList.add(classNames.groupListItem);
          }
        } else {
          if (element.classList.contains(classNames.groupListItem)) {
            element.classList.remove(classNames.groupListItem);
            element.setAttribute("role", "listitem");
            element.classList.add(classNames.listItem);
          }
        }
      }
    };
    Virtualization2.prototype.findDSAndIndexFromId = function(ds, fields) {
      var _this = this;
      var resultJSON = {};
      fields = this.listViewInstance.getElementUID(fields);
      if (!isNullOrUndefined(fields)) {
        ds.some(function(data, index) {
          if (fields[_this.listViewInstance.fields.id] && fields[_this.listViewInstance.fields.id] === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id]) || fields === data) {
            resultJSON.index = index;
            resultJSON.data = data;
            return true;
          } else {
            return false;
          }
        });
      }
      return resultJSON;
    };
    Virtualization2.prototype.getSelectedItems = function() {
      var _this = this;
      if (!isNullOrUndefined(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
        var dataCollection = [];
        var textCollection = [];
        if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
          var curViewDS_1 = this.listViewInstance.curViewDS;
          if (this.listViewInstance.showCheckBox) {
            var indices = this.uiIndices.activeIndices;
            for (var i = 0; i < indices.length; i++) {
              dataCollection.push(curViewDS_1[indices[i]]);
            }
            return {
              text: dataCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);
              })
            };
          } else {
            return {
              text: curViewDS_1[this.activeIndex],
              data: curViewDS_1[this.activeIndex],
              index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])
            };
          }
        } else {
          var curViewDS_2 = this.listViewInstance.curViewDS;
          var text = this.listViewInstance.fields.text;
          if (this.listViewInstance.showCheckBox) {
            var indexArray = this.uiIndices.activeIndices;
            for (var i = 0; i < indexArray.length; i++) {
              textCollection.push(curViewDS_2[indexArray[i]]["" + text]);
              dataCollection.push(curViewDS_2[indexArray[parseInt(i.toString(), 10)]]);
            }
            var dataSource_1 = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: textCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return dataSource_1.indexOf(curViewDS_2[index]);
              })
            };
          } else {
            var dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS_2[this.activeIndex],
              index: dataSource.indexOf(curViewDS_2[this.activeIndex])
            };
          }
        }
      } else {
        return void 0;
      }
    };
    Virtualization2.prototype.selectItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        var isSelected = this.activeIndex === resutJSON.index;
        var isChecked = void 0;
        this.activeIndex = resutJSON.index;
        if (this.listViewInstance.showCheckBox) {
          if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
            isChecked = true;
            this.uiIndices.activeIndices.push(resutJSON.index);
          } else {
            isChecked = false;
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
          }
          if (this.listViewInstance.curUL.querySelector("." + classNames.focused)) {
            this.listViewInstance.curUL.querySelector("." + classNames.focused).classList.remove(classNames.focused);
          }
        }
        if (this.listViewInstance.getLiFromObjOrElement(obj)) {
          if (this.listViewInstance.showCheckBox) {
            this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
          } else {
            this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
          }
        } else {
          var eventArgs = void 0;
          if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
            eventArgs = {
              text: this.listViewInstance.curViewDS[this.activeIndex],
              data: this.listViewInstance.curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          } else {
            var curViewDS = this.listViewInstance.curViewDS;
            eventArgs = {
              text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          }
          if (this.listViewInstance.showCheckBox) {
            eventArgs.isChecked = isChecked;
            this.listViewInstance.trigger("select", eventArgs);
          } else if (!isSelected) {
            this.listViewInstance.removeSelect();
            this.listViewInstance.trigger("select", eventArgs);
          }
        }
      } else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {
        this.listViewInstance.removeSelect();
        this.activeIndex = void 0;
      }
    };
    Virtualization2.prototype.enableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.disableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.disabledItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.showItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.hideItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.hiddenItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.removeItem = function(obj) {
      var dataSource;
      var curViewDS = this.listViewInstance.curViewDS;
      var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        dataSource = resutJSON.data;
        if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
          this.removeUiItem(resutJSON.index - 1);
          this.removeUiItem(resutJSON.index - 1);
        } else {
          this.removeUiItem(resutJSON.index);
        }
      }
      var listDataSource = this.listViewInstance.dataSource instanceof DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;
      var index = listDataSource.indexOf(dataSource);
      if (index !== -1) {
        listDataSource.splice(index, 1);
        this.listViewInstance.setViewDataSource(listDataSource);
      }
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
    };
    Virtualization2.prototype.setCheckboxLI = function(li, e) {
      var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      if (li.classList.contains(classNames.selected)) {
        if (this.uiIndices.activeIndices.indexOf(index) === -1) {
          this.uiIndices.activeIndices.push(index);
        }
      } else {
        this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
      }
    };
    Virtualization2.prototype.setSelectLI = function(li, e) {
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
    };
    Virtualization2.prototype.checkedItem = function(checked) {
      if (checked) {
        this.uiIndices.activeIndices = [];
        this.activeIndex = void 0;
        var data = this.listViewInstance.curViewDS;
        for (var index = 0; index < data.length; index++) {
          if (!data[index].isHeader) {
            this.uiIndices.activeIndices.push(index);
          }
        }
      } else {
        this.activeIndex = void 0;
        this.uiIndices.activeIndices = [];
      }
    };
    Virtualization2.prototype.addUiItem = function(index) {
      var curViewDs = this.listViewInstance.curViewDS;
      this.changeUiIndices(index, true);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex++;
      }
      if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
        this.uiIndices.activeIndices.push(index);
      }
      if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
      }
      if (parseFloat(this.bottomElement.style.height)) {
        var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
        var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        if (target) {
          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
          this.updateUI(liItem, index, target);
        }
      } else {
        var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;
        var target = void 0;
        if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
          target = this.listViewInstance.curUL.lastElementChild;
        } else {
          target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        }
        this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + "px";
        this.uiFirstIndex++;
        this.uiLastIndex++;
        if (target) {
          this.updateUI(liItem, index, target);
          if (this.listViewInstance.isWindow === true) {
            window.scrollTo(0, pageYOffset + this.listItemHeight);
          } else {
            this.listViewInstance.element.scrollTop += this.listItemHeight;
          }
        }
      }
      this.totalHeight += this.listItemHeight;
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.removeUiItem = function(index) {
      this.totalHeight -= this.listItemHeight;
      var curViewDS = this.listViewInstance.curViewDS[index];
      var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
      this.listViewInstance.curViewDS.splice(index, 1);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex--;
      }
      if (liItem) {
        if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
          detach(liItem);
          this.domItemCount--;
          this.uiLastIndex--;
          this.totalHeight = 0;
        } else {
          if (liItem.classList.contains(classNames.disable)) {
            liItem.classList.remove(classNames.disable);
            this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
          }
          if (liItem.style.display === "none") {
            liItem.style.display = "";
            this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
          }
          if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {
            this.listViewInstance.removeSelect();
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
            var checklistElement = liItem.querySelector("." + classNames.checkboxWrapper);
            checklistElement.removeAttribute("aria-checked");
            checklistElement.firstElementChild.classList.remove(classNames.checked);
            if (liItem.classList.contains(classNames.focused)) {
              liItem.classList.remove(classNames.focused);
              this.activeIndex = void 0;
            }
          } else if (liItem.classList.contains(classNames.selected)) {
            this.listViewInstance.removeSelect();
            this.activeIndex = void 0;
          }
          if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else if (parseFloat(this.bottomElement.style.height)) {
            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else {
            this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
            this.uiLastIndex--;
            this.uiFirstIndex--;
          }
        }
      }
      this.changeUiIndices(index, false);
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.changeUiIndices = function(index, increment) {
      var keys = Object.keys(this.uiIndices);
      for (var ind = 0; ind < keys.length; ind++) {
        this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function(i) {
          if (i >= index) {
            return increment ? ++i : --i;
          } else {
            return i;
          }
        });
      }
    };
    Virtualization2.prototype.addItem = function(data, fields, dataSource, index) {
      for (var i = 0; i < data.length; i++) {
        var currentItem = data[i];
        dataSource = this.listViewInstance.addItemAtIndex(index, dataSource, currentItem);
        this.listViewInstance.setViewDataSource(dataSource);
        if (!this.domItemCount) {
          if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
            this.listViewInstance.listBaseOption.template = null;
            this.listViewInstance.listBaseOption.groupTemplate = null;
            this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
          }
          this.uiVirtualization();
        } else if (this.domItemCount < this.expectedDomItemCount) {
          var ds = this.listViewInstance.findItemFromDS(dataSource, fields);
          if (ds instanceof Array) {
            if (this.listViewInstance.ulElement) {
              var index_1 = this.listViewInstance.curViewDS.indexOf(currentItem);
              this.createAndInjectNewItem(currentItem, index_1);
              var curViewDS = this.listViewInstance.curViewDS[index_1 - 1];
              if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
                --index_1;
                this.createAndInjectNewItem(curViewDS, index_1);
              }
            }
            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
          }
        } else {
          var index_2 = this.listViewInstance.curViewDS.indexOf(currentItem);
          this.addUiItem(index_2);
          var curViewDS = this.listViewInstance.curViewDS[index_2 - 1];
          if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
            this.addUiItem(index_2 - 1);
          }
        }
      }
    };
    Virtualization2.prototype.createAndInjectNewItem = function(itemData, index) {
      var target;
      var li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption, null, null, this.listViewInstance);
      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
        target = this.listViewInstance.curUL.lastElementChild;
      } else {
        target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
      }
      if (this.listViewInstance.fields.groupBy && this.listViewInstance.curViewDS[index + 1] && this.listViewInstance.curViewDS[index + 1].isHeader) {
        var targetEle = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      this.listViewInstance.ulElement.insertBefore(li[0], target);
      this.domItemCount++;
      if (this.bottomElementHeight <= 0) {
        this.uiLastIndex++;
      }
      this.refreshItemHeight();
    };
    Virtualization2.prototype.createUIItem = function(args) {
      if (!args.item.classList.contains("e-list-group-item")) {
        this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;
        if (this.listViewInstance.showCheckBox) {
          this.listViewInstance.renderCheckbox(args);
          if (!isNullOrUndefined(this.listViewInstance.virtualCheckBox) && !isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML)) {
            var div_1 = document.createElement("div");
            var commonTemplate = '<div class="e-text-content" role="presentation"> <span class="e-list-text"> ${' + this.listViewInstance.fields.text + "} </span></div>";
            var templateFunction = compile(this.listViewInstance.template || commonTemplate, this.listViewInstance);
            var nodes = templateFunction(this.templateData, this.listViewInstance);
            if (this.listViewInstance.template && this.listViewInstance.isReact) {
              this.listViewInstance.renderReactTemplates();
            }
            [].slice.call(nodes).forEach(function(ele) {
              div_1.appendChild(ele);
            });
            if (div_1.children && div_1.children[0]) {
              div_1.children[0].classList.add("e-checkbox");
              if (this.listViewInstance.checkBoxPosition === "Left") {
                div_1.children[0].classList.add("e-checkbox-left");
              } else {
                div_1.children[0].classList.add("e-checkbox-right");
              }
              if (this.listViewInstance.checkBoxPosition === "Left") {
                div_1.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div_1.childNodes[0].children[0]);
              } else {
                div_1.children[0].appendChild(this.listViewInstance.virtualCheckBox);
              }
              while (args.item.lastChild) {
                args.item.removeChild(args.item.lastChild);
              }
              [].slice.call(div_1.children).forEach(function(ele) {
                args.item.appendChild(ele);
              });
            }
          }
        }
      }
    };
    Virtualization2.prototype.reRenderUiVirtualization = function() {
      this.wireScrollEvent(true);
      if (this.listViewInstance.contentContainer) {
        detach(this.listViewInstance.contentContainer);
      }
      this.listViewInstance.preRender();
      this.domItemCount = 0;
      this.listViewInstance.header();
      this.listViewInstance.setLocalData();
    };
    Virtualization2.prototype.updateUI = function(element, index, targetElement) {
      var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;
      if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
        var curViewDS = this.listViewInstance.curViewDS[index];
        element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id] : ListBase.generateId();
        onChange(curViewDS, element, this);
      } else {
        this.updateUiContent(element, index);
      }
      this.changeElementAttributes(element, index);
      if (targetElement) {
        this.listViewInstance.ulElement.insertBefore(element, targetElement);
      }
    };
    Virtualization2.prototype.onChange = function(newData, listElement, virtualThis) {
      var liItem = ListBase.createListItemFromJson(virtualThis.listViewInstance.createElement, [newData], virtualThis.listViewInstance.listBaseOption, null, null, virtualThis.listViewInstance);
      if (virtualThis.listViewInstance.isReact) {
        virtualThis.listViewInstance.renderReactTemplates();
      }
      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }
      [].slice.call(liItem[0].children).forEach(function(ele) {
        listElement.appendChild(ele);
      });
    };
    Virtualization2.prototype.onNgChange = function(newData, listElement, virtualThis) {
      var templateCompiler = compile(virtualThis.listViewInstance.template);
      var resultElement = templateCompiler(newData);
      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }
      listElement.appendChild(resultElement[0]);
    };
    Virtualization2.prototype.getModuleName = function() {
      return "virtualization";
    };
    Virtualization2.prototype.destroy = function() {
      this.wireScrollEvent(true);
      this.topElement = null;
      this.bottomElement = null;
    };
    return Virtualization2;
  }()
);

// node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Sortable = (
  /** @class */
  function(_super) {
    __extends5(Sortable2, _super);
    function Sortable2(element, options) {
      var _this = _super.call(this, options, element) || this;
      _this.getHelper = function(e) {
        var target = _this.getSortableElement(e.sender.target);
        if (!_this.isValidTarget(target, _this)) {
          return false;
        }
        var element2;
        if (_this.helper) {
          element2 = _this.helper({ sender: target, element: e.element });
        } else {
          element2 = target.cloneNode(true);
          element2.style.width = target.offsetWidth + "px";
          element2.style.height = target.offsetHeight + "px";
        }
        addClass([element2], ["e-sortableclone"]);
        document.body.appendChild(element2);
        return element2;
      };
      _this.onDrag = function(e) {
        if (!e.target) {
          return;
        }
        _this.trigger("drag", { event: e.event, element: _this.element, target: e.target });
        var newInst = _this.getSortableInstance(e.target);
        var target = _this.getSortableElement(e.target, newInst);
        if ((_this.isValidTarget(target, newInst) || e.target && typeof e.target.className === "string" && e.target.className.indexOf("e-list-group-item") > -1) && (_this.curTarget !== target || !isNullOrUndefined(newInst.placeHolder)) && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
          if (e.target.classList.contains("e-list-group-item")) {
            target = e.target;
          }
          _this.curTarget = target;
          if (_this.target === target) {
            return;
          }
          var oldIdx = _this.getIndex(newInst.placeHolderElement, newInst);
          var placeHolder = _this.getPlaceHolder(target, newInst);
          var newIdx = void 0;
          if (placeHolder) {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : oldIdx;
            newIdx = _this.getIndex(target, newInst, e.event);
            var isPlaceHolderPresent = _this.isPlaceHolderPresent(newInst);
            if (isPlaceHolderPresent && oldIdx === newIdx) {
              return;
            }
            if (isPlaceHolderPresent) {
              remove(newInst.placeHolderElement);
            }
            newInst.placeHolderElement = placeHolder;
            if (e.target && typeof e.target.className === "string" && e.target.className.indexOf("e-list-group-item") > -1) {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            } else if (newInst.element !== _this.element && newIdx === newInst.element.childElementCount) {
              newInst.element.appendChild(newInst.placeHolderElement);
            } else {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            }
            _this.refreshDisabled(oldIdx, newIdx, newInst);
          } else {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : _this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
            newIdx = _this.getIndex(target, newInst);
            var idx = newInst.element !== _this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;
            _this.updateItemClass(newInst);
            newInst.element.insertBefore(_this.target, newInst.element.children[idx]);
            _this.refreshDisabled(oldIdx, newIdx, newInst);
            _this.curTarget = _this.target;
            _this.trigger("drop", {
              droppedElement: _this.target,
              element: newInst.element,
              previousIndex: oldIdx,
              currentIndex: newIdx,
              target: e.target,
              helper: document.getElementsByClassName("e-sortableclone")[0],
              event: e.event,
              scope: _this.scope
            });
          }
        } else if (_this.curTarget !== _this.target && _this.scope && _this.curTarget !== target && !isNullOrUndefined(newInst.placeHolder)) {
          remove(_this.getSortableInstance(_this.curTarget).placeHolderElement);
          _this.curTarget = _this.target;
        }
        newInst = _this.getSortableInstance(_this.curTarget);
        if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {
          if (_this.isPlaceHolderPresent(newInst)) {
            _this.removePlaceHolder(newInst);
          }
        } else {
          var placeHolders = [].slice.call(document.getElementsByClassName("e-sortable-placeholder"));
          var inst_1;
          placeHolders.forEach(function(placeHolder2) {
            inst_1 = _this.getSortableInstance(placeHolder2);
            if (inst_1.element && inst_1 !== newInst) {
              _this.removePlaceHolder(inst_1);
            }
          });
        }
      };
      _this.onDragStart = function(e) {
        _this.target = _this.getSortableElement(e.target);
        var cancelDrag = false;
        _this.target.classList.add("e-grabbed");
        _this.curTarget = _this.target;
        e.helper = document.getElementsByClassName("e-sortableclone")[0];
        var args = { cancel: false, element: _this.element, target: _this.target };
        _this.trigger("beforeDragStart", args, function(observedArgs) {
          if (observedArgs.cancel) {
            cancelDrag = observedArgs.cancel;
            _this.onDragStop(e);
          }
        });
        if (cancelDrag) {
          return;
        }
        if (isBlazor) {
          _this.trigger("dragStart", {
            event: e.event,
            element: _this.element,
            target: _this.target,
            bindEvents: e.bindEvents,
            dragElement: e.dragElement
          });
        } else {
          _this.trigger("dragStart", { event: e.event, element: _this.element, target: _this.target });
        }
      };
      _this.onDragStop = function(e) {
        var dropInst = _this.getSortableInstance(_this.curTarget);
        var curIdx;
        var prevIdx;
        var handled;
        prevIdx = _this.getIndex(_this.target);
        var isPlaceHolderPresent = _this.isPlaceHolderPresent(dropInst);
        if (isPlaceHolderPresent) {
          var curIdx_1 = _this.getIndex(dropInst.placeHolderElement, dropInst);
          var args = {
            previousIndex: prevIdx,
            currentIndex: curIdx_1,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false,
            handled: false
          };
          _this.trigger("beforeDrop", args, function(observedArgs) {
            if (!observedArgs.cancel) {
              handled = observedArgs.handled;
              _this.updateItemClass(dropInst);
              if (observedArgs.handled) {
                var ele = _this.target.cloneNode(true);
                _this.target.classList.remove("e-grabbed");
                _this.target = ele;
              }
              dropInst.element.insertBefore(_this.target, dropInst.placeHolderElement);
              var curIdx_2 = _this.getIndex(_this.target, dropInst);
              prevIdx = _this === dropInst && prevIdx - curIdx_2 > 1 ? prevIdx - 1 : prevIdx;
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx_2,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope,
                handled
              });
            }
            remove(dropInst.placeHolderElement);
          });
        }
        dropInst = _this.getSortableInstance(e.target);
        curIdx = dropInst.element.childElementCount;
        prevIdx = _this.getIndex(_this.target);
        if (dropInst.element.querySelector(".e-list-nrt")) {
          curIdx = curIdx - 1;
        }
        if (_this.curTarget === _this.target && e.target === _this.curTarget) {
          curIdx = prevIdx;
        }
        if (dropInst.element === e.target || !isPlaceHolderPresent && _this.curTarget === _this.target) {
          var beforeDropArgs = {
            previousIndex: prevIdx,
            currentIndex: curIdx,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false
          };
          _this.trigger("beforeDrop", beforeDropArgs, function(observedArgs) {
            if ((dropInst.element === e.target || typeof e.target.className === "string" && e.target.className.indexOf("e-list-nrt") > -1 || typeof e.target.className === "string" && e.target.className.indexOf("e-list-nr-template") > -1 || e.target.closest(".e-list-nr-template")) && !observedArgs.cancel) {
              _this.updateItemClass(dropInst);
              dropInst.element.appendChild(_this.target);
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope
              });
            }
          });
        }
        _this.target.classList.remove("e-grabbed");
        _this.target = null;
        _this.curTarget = null;
        remove(e.helper);
        getComponent(_this.element, "draggable").intDestroy(e.event);
      };
      _this.bind();
      return _this;
    }
    Sortable_1 = Sortable2;
    Sortable2.prototype.bind = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("sortable");
      }
      if (!this.itemClass) {
        this.itemClass = "e-sort-item";
        this.dataBind();
      }
      this.initializeDraggable();
    };
    Sortable2.prototype.initializeDraggable = function() {
      new Draggable(this.element, {
        helper: this.getHelper,
        dragStart: this.onDragStart,
        drag: this.onDrag,
        dragStop: this.onDragStop,
        dragTarget: "." + this.itemClass,
        enableTapHold: true,
        tapHoldThreshold: 200,
        queryPositionInfo: this.queryPositionInfo,
        distance: 1
      });
      this.wireEvents();
    };
    Sortable2.prototype.wireEvents = function() {
      var wrapper = this.element;
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
    };
    Sortable2.prototype.unwireEvents = function() {
      var wrapper = this.element;
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
    };
    Sortable2.prototype.keyDownHandler = function(e) {
      if (e.keyCode === 27) {
        var dragStop2 = getComponent(this.element, "draggable");
        if (dragStop2) {
          dragStop2.intDestroy(null);
        }
        var dragWrapper = document.getElementsByClassName("e-sortableclone")[0];
        if (dragWrapper) {
          dragWrapper.remove();
        }
        var dragPlaceholder = document.getElementsByClassName("e-sortable-placeholder")[0];
        if (dragPlaceholder) {
          dragPlaceholder.remove();
        }
      }
    };
    Sortable2.prototype.getPlaceHolder = function(target, instance) {
      if (instance.placeHolder) {
        var placeHolderElement = instance.placeHolder({ element: instance.element, grabbedElement: this.target, target });
        placeHolderElement.classList.add("e-sortable-placeholder");
        return placeHolderElement;
      }
      return null;
    };
    Sortable2.prototype.isValidTarget = function(target, instance) {
      return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains("e-disabled");
    };
    Sortable2.prototype.removePlaceHolder = function(instance) {
      remove(instance.placeHolderElement);
      instance.placeHolderElement = null;
    };
    Sortable2.prototype.updateItemClass = function(instance) {
      if (this !== instance) {
        this.target.classList.remove(this.itemClass);
        this.target.classList.add(instance.itemClass);
      }
    };
    Sortable2.prototype.getSortableInstance = function(element) {
      element = closest(element, ".e-" + this.getModuleName());
      if (element) {
        var inst = getComponent(element, Sortable_1);
        return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
      } else {
        return this;
      }
    };
    Sortable2.prototype.refreshDisabled = function(oldIdx, newIdx, instance) {
      if (instance === this) {
        var element = void 0;
        var increased = oldIdx < newIdx;
        var disabledIdx = void 0;
        var start = increased ? oldIdx : newIdx;
        var end = increased ? newIdx : oldIdx;
        while (start <= end) {
          element = this.element.children[start];
          if (element.classList.contains("e-disabled")) {
            disabledIdx = this.getIndex(element);
            this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);
            start = increased ? disabledIdx + 2 : disabledIdx + 1;
          } else {
            start++;
          }
        }
      }
    };
    Sortable2.prototype.getIndex = function(target, instance, e) {
      if (instance === void 0) {
        instance = this;
      }
      var idx;
      var placeHolderPresent;
      [].slice.call(instance.element.children).forEach(function(element, index) {
        if (element.classList.contains("e-sortable-placeholder")) {
          placeHolderPresent = true;
        }
        if (element === target) {
          idx = index;
          if (!isNullOrUndefined(e)) {
            if (placeHolderPresent) {
              idx -= 1;
            }
            var offset = target.getBoundingClientRect();
            var clientY = offset.bottom - (offset.bottom - offset.top) / 2;
            var cltY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
            idx = cltY <= clientY ? idx : idx + 1;
          }
          return;
        }
      });
      return idx;
    };
    Sortable2.prototype.getSortableElement = function(element, instance) {
      if (instance === void 0) {
        instance = this;
      }
      return closest(element, "." + instance.itemClass);
    };
    Sortable2.prototype.queryPositionInfo = function(value) {
      value.left = pageXOffset ? parseFloat(value.left) - pageXOffset + "px" : value.left;
      value.top = pageYOffset ? parseFloat(value.top) - pageYOffset + "px" : value.top;
      return value;
    };
    Sortable2.prototype.isPlaceHolderPresent = function(instance) {
      return instance.placeHolderElement && !!closest(instance.placeHolderElement, "#" + instance.element.id);
    };
    Sortable2.prototype.moveTo = function(destination, targetIndexes, insertBefore) {
      moveTo(this.element, destination, targetIndexes, insertBefore);
    };
    Sortable2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.itemClass === "e-sort-item") {
        this.itemClass = null;
        this.dataBind();
      }
      getComponent(this.element, Draggable).destroy();
      _super.prototype.destroy.call(this);
    };
    Sortable2.prototype.getModuleName = function() {
      return "sortable";
    };
    Sortable2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "itemClass":
            [].slice.call(this.element.children).forEach(function(element) {
              if (element.classList.contains(oldProp.itemClass)) {
                element.classList.remove(oldProp.itemClass);
              }
              if (newProp.itemClass) {
                element.classList.add(newProp.itemClass);
              }
            });
            break;
        }
      }
    };
    var Sortable_1;
    __decorate5([
      Property(false)
    ], Sortable2.prototype, "enableAnimation", void 0);
    __decorate5([
      Property(null)
    ], Sortable2.prototype, "itemClass", void 0);
    __decorate5([
      Property(null)
    ], Sortable2.prototype, "scope", void 0);
    __decorate5([
      Property()
    ], Sortable2.prototype, "helper", void 0);
    __decorate5([
      Property()
    ], Sortable2.prototype, "placeHolder", void 0);
    __decorate5([
      Event()
    ], Sortable2.prototype, "drag", void 0);
    __decorate5([
      Event()
    ], Sortable2.prototype, "beforeDragStart", void 0);
    __decorate5([
      Event()
    ], Sortable2.prototype, "dragStart", void 0);
    __decorate5([
      Event()
    ], Sortable2.prototype, "beforeDrop", void 0);
    __decorate5([
      Event()
    ], Sortable2.prototype, "drop", void 0);
    Sortable2 = Sortable_1 = __decorate5([
      NotifyPropertyChanges
    ], Sortable2);
    return Sortable2;
  }(Base)
);
function moveTo(from, to, targetIndexes, insertBefore) {
  var targetElements = [];
  if (!to) {
    to = from;
  }
  if (targetIndexes && targetIndexes.length) {
    targetIndexes.forEach(function(index) {
      targetElements.push(from.children[index]);
    });
  } else {
    targetElements = [].slice.call(from.children);
  }
  if (isNullOrUndefined(insertBefore)) {
    targetElements.forEach(function(target) {
      to.appendChild(target);
    });
  } else {
    var insertElement_1 = to.children[insertBefore];
    targetElements.forEach(function(target) {
      to.insertBefore(target, insertElement_1);
    });
  }
}

// node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ENTER = "enter";
var ESCAPE = "escape";
var FOCUSED = "e-focused";
var HEADER = "e-menu-header";
var SELECTED = "e-selected";
var SEPARATOR = "e-separator";
var UPARROW = "uparrow";
var DOWNARROW = "downarrow";
var LEFTARROW = "leftarrow";
var RIGHTARROW = "rightarrow";
var HOME = "home";
var END = "end";
var TAB = "tab";
var CARET = "e-caret";
var ITEM = "e-menu-item";
var DISABLED = "e-disabled";
var HIDE = "e-menu-hide";
var ICONS = "e-icons";
var RTL = "e-rtl";
var POPUP = "e-menu-popup";
var TEMPLATE_PROPERTY = "Template";
var FieldSettings2 = (
  /** @class */
  function(_super) {
    __extends6(FieldSettings4, _super);
    function FieldSettings4() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property("id")
    ], FieldSettings4.prototype, "itemId", void 0);
    __decorate6([
      Property("parentId")
    ], FieldSettings4.prototype, "parentId", void 0);
    __decorate6([
      Property("text")
    ], FieldSettings4.prototype, "text", void 0);
    __decorate6([
      Property("iconCss")
    ], FieldSettings4.prototype, "iconCss", void 0);
    __decorate6([
      Property("url")
    ], FieldSettings4.prototype, "url", void 0);
    __decorate6([
      Property("separator")
    ], FieldSettings4.prototype, "separator", void 0);
    __decorate6([
      Property("items")
    ], FieldSettings4.prototype, "children", void 0);
    return FieldSettings4;
  }(ChildProperty)
);
var MenuItem = (
  /** @class */
  function(_super) {
    __extends6(MenuItem2, _super);
    function MenuItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property(null)
    ], MenuItem2.prototype, "iconCss", void 0);
    __decorate6([
      Property("")
    ], MenuItem2.prototype, "id", void 0);
    __decorate6([
      Property(false)
    ], MenuItem2.prototype, "separator", void 0);
    __decorate6([
      Collection([], MenuItem2)
    ], MenuItem2.prototype, "items", void 0);
    __decorate6([
      Property("")
    ], MenuItem2.prototype, "text", void 0);
    __decorate6([
      Property("")
    ], MenuItem2.prototype, "url", void 0);
    return MenuItem2;
  }(ChildProperty)
);
var MenuAnimationSettings = (
  /** @class */
  function(_super) {
    __extends6(MenuAnimationSettings2, _super);
    function MenuAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property("SlideDown")
    ], MenuAnimationSettings2.prototype, "effect", void 0);
    __decorate6([
      Property(400)
    ], MenuAnimationSettings2.prototype, "duration", void 0);
    __decorate6([
      Property("ease")
    ], MenuAnimationSettings2.prototype, "easing", void 0);
    return MenuAnimationSettings2;
  }(ChildProperty)
);
var MenuBase = (
  /** @class */
  function(_super) {
    __extends6(MenuBase2, _super);
    function MenuBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.navIdx = [];
      _this.animation = new Animation({});
      _this.isTapHold = false;
      _this.tempItem = [];
      _this.showSubMenuOn = "Auto";
      return _this;
    }
    MenuBase2.prototype.preRender = function() {
      if (!this.isMenu) {
        var ul = void 0;
        if (this.element.tagName === "EJS-CONTEXTMENU") {
          ul = this.createElement("ul", {
            id: getUniqueID(this.getModuleName()),
            className: "e-control e-lib e-" + this.getModuleName()
          });
          var ejInst = getValue("ej2_instances", this.element);
          removeClass([this.element], ["e-control", "e-lib", "e-" + this.getModuleName()]);
          this.clonedElement = this.element;
          this.element = ul;
          setValue("ej2_instances", ejInst, this.element);
        } else {
          ul = this.createElement("ul", { id: getUniqueID(this.getModuleName()) });
          append([].slice.call(this.element.cloneNode(true).children), ul);
          var refEle = this.element.nextElementSibling;
          if (refEle) {
            this.element.parentElement.insertBefore(ul, refEle);
          } else {
            this.element.parentElement.appendChild(ul);
          }
          this.clonedElement = ul;
        }
        this.clonedElement.style.display = "none";
      }
      if (this.element.tagName === "EJS-MENU") {
        var ele = this.element;
        var ejInstance = getValue("ej2_instances", ele);
        var ul = this.createElement("ul");
        var wrapper = this.createElement("EJS-MENU", { className: "e-" + this.getModuleName() + "-wrapper" });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = ul;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.clonedElement = wrapper;
        this.element = ele;
        if (!this.element.id) {
          this.element.id = getUniqueID(this.getModuleName());
        }
      }
    };
    MenuBase2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderItems();
      this.wireEvents();
      this.renderComplete();
      var wrapper = this.getWrapper();
      if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {
        requestAnimationFrame(function() {
          addScrolling(_this.createElement, wrapper, _this.element, "hscroll", _this.enableRtl);
        });
      }
    };
    MenuBase2.prototype.initialize = function() {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        wrapper = this.createElement("div", { className: "e-" + this.getModuleName() + "-wrapper" });
        if (this.isMenu) {
          this.element.parentElement.insertBefore(wrapper, this.element);
        } else {
          document.body.appendChild(wrapper);
        }
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }
      wrapper.appendChild(this.element);
      if (this.isMenu && this.hamburgerMode) {
        if (!this.target) {
          this.createHeaderContainer(wrapper);
        }
      }
      this.defaultOption = this.showItemOnClick;
    };
    MenuBase2.prototype.renderItems = function() {
      if (!this.items.length) {
        var items = ListBase.createJsonFromElement(this.element, { fields: { child: "items" } });
        this.setProperties({ items }, true);
        if (isBlazor() && !this.isMenu) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = "";
        }
      }
      var ul = this.createItems(this.items);
      append(Array.prototype.slice.call(ul.children), this.element);
      this.element.classList.add("e-menu-parent");
      if (this.isMenu) {
        if (!this.hamburgerMode && this.element.classList.contains("e-vertical")) {
          this.setBlankIconStyle(this.element);
        }
        if (this.enableScrolling) {
          var wrapper = this.getWrapper();
          if (this.element.classList.contains("e-vertical")) {
            addScrolling(this.createElement, wrapper, this.element, "vscroll", this.enableRtl);
          } else {
            addScrolling(this.createElement, wrapper, this.element, "hscroll", this.enableRtl);
          }
        }
      } else {
        this.element.parentElement.setAttribute("role", "dialog");
        this.element.parentElement.setAttribute("aria-label", "context menu");
      }
    };
    MenuBase2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      if (this.target) {
        var target = void 0;
        var targetElems = selectAll(this.target);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.add(target, "click", this.menuHeaderClickHandler, this);
          } else {
            if (Browser.isIos) {
              new Touch(target, { tapHold: this.touchHandler.bind(this) });
            } else {
              EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
            }
          }
        }
        this.targetElement = target;
        if (!this.isMenu) {
          EventHandler.add(this.targetElement, "scroll", this.scrollHandler, this);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_1 = _a[_i];
            EventHandler.add(parent_1, "scroll", this.scrollHandler, this);
          }
        }
      }
      if (!Browser.isDevice) {
        this.delegateMoverHandler = this.moverHandler.bind(this);
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
        EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this);
        EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this);
      }
      this.delegateClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHandler, this);
      this.wireKeyboardEvent(wrapper);
      this.rippleFn = rippleEffect(wrapper, { selector: "." + ITEM });
    };
    MenuBase2.prototype.wireKeyboardEvent = function(element) {
      var keyConfigs = {
        downarrow: DOWNARROW,
        uparrow: UPARROW,
        enter: ENTER,
        leftarrow: LEFTARROW,
        rightarrow: RIGHTARROW,
        escape: ESCAPE
      };
      if (this.isMenu) {
        keyConfigs.home = HOME;
        keyConfigs.end = END;
        keyConfigs.tab = TAB;
      }
      new KeyboardEvents(element, {
        keyAction: this.keyBoardHandler.bind(this),
        keyConfigs
      });
    };
    MenuBase2.prototype.mouseDownHandler = function(e) {
      if (closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && !closest(e.target, ".e-" + this.getModuleName() + "-popup")) {
        this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
      }
    };
    MenuBase2.prototype.keyHandler = function(e) {
      if (e.keyCode === 38 || e.keyCode === 40) {
        if (e.target && (e.target.classList.contains("e-contextmenu") || e.target.classList.contains("e-menu-item"))) {
          e.preventDefault();
        }
      }
    };
    MenuBase2.prototype.keyBoardHandler = function(e) {
      var actionName = "";
      var trgt = e.target;
      var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
      e.preventDefault();
      if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains("e-scroll-nav")) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, ".e-" + this.getModuleName() + "-wrapper")]);
      }
      if (actionNeeded) {
        switch (e.action) {
          case RIGHTARROW:
            actionName = RIGHTARROW;
            e.action = DOWNARROW;
            break;
          case LEFTARROW:
            actionName = LEFTARROW;
            e.action = UPARROW;
            break;
          case DOWNARROW:
            actionName = DOWNARROW;
            e.action = RIGHTARROW;
            break;
          case UPARROW:
            actionName = UPARROW;
            e.action = "";
            break;
        }
      } else if (this.enableRtl) {
        switch (e.action) {
          case LEFTARROW:
            actionNeeded = true;
            actionName = LEFTARROW;
            e.action = RIGHTARROW;
            break;
          case RIGHTARROW:
            actionNeeded = true;
            actionName = RIGHTARROW;
            e.action = LEFTARROW;
            break;
        }
      }
      switch (e.action) {
        case DOWNARROW:
        case UPARROW:
        case END:
        case HOME:
        case TAB:
          this.upDownKeyHandler(e);
          break;
        case RIGHTARROW:
          this.rightEnterKeyHandler(e);
          break;
        case LEFTARROW:
          this.leftEscKeyHandler(e);
          break;
        case ENTER:
          if (this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            this.rightEnterKeyHandler(e);
          }
          break;
        case ESCAPE:
          this.leftEscKeyHandler(e);
          break;
      }
      if (actionNeeded) {
        e.action = actionName;
      }
    };
    MenuBase2.prototype.upDownKeyHandler = function(e) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        if (e.action !== END && e.action !== HOME) {
          fliIdx = this.getIdx(cul, fli);
        }
        fli.classList.remove(FOCUSED);
        if (e.action !== END && e.action !== HOME) {
          if (e.action === DOWNARROW) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
            fliIdx = defaultIdx;
          }
        }
      }
      var cli = cul.children[fliIdx];
      fliIdx = this.isValidLI(cli, fliIdx, e.action);
      cul.children[fliIdx].classList.add(FOCUSED);
      cul.children[fliIdx].focus();
    };
    MenuBase2.prototype.isValidLI = function(cli, index, action) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
        if (action === DOWNARROW && index === cul.childElementCount - 1) {
          index = defaultIdx;
        } else if (action === UPARROW && index === 0) {
          index = defaultIdx;
        } else if (action === DOWNARROW || action === RIGHTARROW) {
          index++;
        } else if (action === "tab" && cli.classList.contains(SEPARATOR)) {
          index++;
        } else {
          index--;
        }
      }
      cli = cul.children[index];
      if (cli && (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE))) {
        index = this.isValidLI(cli, index, action);
      }
      return index;
    };
    MenuBase2.prototype.getUlByNavIdx = function(navIdxLen) {
      var _this = this;
      if (navIdxLen === void 0) {
        navIdxLen = this.navIdx.length;
      }
      if (this.isMenu) {
        var popup = [this.getWrapper()].concat([].slice.call(selectAll("." + POPUP)))[navIdxLen];
        var popups_1 = [];
        var allPopup = selectAll("." + POPUP);
        allPopup.forEach(function(elem) {
          if (_this.element.id === elem.id.split("-")[2] || elem.id.split("-")[2] + "-" + elem.id.split("-")[3]) {
            popups_1.push(elem);
          }
        });
        popup = [this.getWrapper()].concat([].slice.call(popups_1))[navIdxLen];
        return isNullOrUndefined(popup) ? null : select(".e-menu-parent", popup);
      } else {
        if (!document.body.contains(this.element) && navIdxLen === 0) {
          return null;
        }
        return this.getWrapper().children[navIdxLen];
      }
    };
    MenuBase2.prototype.rightEnterKeyHandler = function(e) {
      var eventArgs;
      var cul = this.getUlByNavIdx();
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        var fliIdx = this.getIdx(cul, fli);
        var navIdx = this.navIdx.concat(fliIdx);
        var item = this.getItem(navIdx);
        if (item.items.length) {
          this.navIdx.push(fliIdx);
          this.keyType = "right";
          this.action = e.action;
          this.openMenu(fli, item, -1, -1, e);
        } else {
          if (e.action === ENTER) {
            if (this.isMenu && this.navIdx.length === 0) {
              this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
            } else {
              fli.classList.remove(FOCUSED);
            }
            fli.classList.add(SELECTED);
            eventArgs = { element: fli, item, event: e };
            this.trigger("select", eventArgs);
            var aEle = fli.querySelector(".e-menu-url");
            if (item.url && aEle) {
              switch (aEle.getAttribute("target")) {
                case "_blank":
                  window.open(item.url, "_blank");
                  break;
                case "_parent":
                  window.parent.location.href = item.url;
                  break;
                default:
                  window.location.href = item.url;
              }
            }
            this.closeMenu(null, e);
            var sli = this.getLIByClass(this.getUlByNavIdx(), SELECTED);
            if (sli) {
              sli.classList.add(FOCUSED);
              sli.focus();
            }
          }
        }
      }
    };
    MenuBase2.prototype.leftEscKeyHandler = function(e) {
      if (this.navIdx.length) {
        this.keyType = "left";
        this.closeMenu(this.navIdx.length, e);
      } else {
        if (e.action === ESCAPE) {
          this.closeMenu(null, e);
        }
      }
    };
    MenuBase2.prototype.scrollHandler = function(e) {
      this.closeMenu(null, e);
    };
    MenuBase2.prototype.touchHandler = function(e) {
      this.isTapHold = true;
      this.cmenuHandler(e.originalEvent);
    };
    MenuBase2.prototype.cmenuHandler = function(e) {
      e.preventDefault();
      this.currentTarget = e.target;
      this.isCMenu = true;
      this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
      this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
      this.closeMenu(null, e);
      if (this.isCMenu) {
        if (this.canOpen(e.target)) {
          this.openMenu(null, null, this.pageY, this.pageX, e);
        }
        this.isCMenu = false;
      }
    };
    MenuBase2.prototype.closeMenu = function(ulIndex, e, isIterated) {
      var _this = this;
      if (ulIndex === void 0) {
        ulIndex = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (this.isMenuVisible()) {
        var sli = void 0;
        var item_1;
        var wrapper_1 = this.getWrapper();
        var beforeCloseArgs = void 0;
        var items_1;
        var popups = this.getPopups();
        var isClose = false;
        var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;
        var ul_1 = this.isMenu && cnt !== 1 ? select(".e-ul", popups[cnt - 2]) : selectAll(".e-menu-parent", wrapper_1)[cnt - 1];
        if (this.isMenu && ul_1.classList.contains("e-menu")) {
          sli = this.getLIByClass(ul_1, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          isClose = true;
        }
        if (!isClose) {
          var liElem_1 = e && e.target && this.getLI(e.target);
          if (liElem_1) {
            this.cli = liElem_1;
          } else {
            this.cli = ul_1.children[0];
          }
          item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
          items_1 = item_1 ? item_1.items : this.items;
          beforeCloseArgs = { element: ul_1, parentItem: item_1, items: items_1, event: e, cancel: false, isFocused: true };
          this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            var popupEle;
            var closeArgs;
            var popupId = "";
            var popupObj;
            var isOpen = !observedCloseArgs.cancel;
            if (isOpen || _this.isCMenu) {
              if (_this.isMenu) {
                popupEle = closest(ul_1, "." + POPUP);
                if (_this.hamburgerMode) {
                  popupEle.parentElement.style.minHeight = "";
                  closest(ul_1, ".e-menu-item").setAttribute("aria-expanded", "false");
                }
                _this.unWireKeyboardEvent(popupEle);
                destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);
                popupObj = getInstance(popupEle, Popup);
                popupObj.hide();
                popupId = popupEle.id;
                popupObj.destroy();
                detach(popupEle);
              } else {
                _this.toggleAnimation(ul_1, false);
              }
              closeArgs = { element: ul_1, parentItem: item_1, items: items_1 };
              _this.trigger("onClose", closeArgs);
              _this.navIdx.pop();
              if (_this.navIdx.length === 0 && e && e.type === "keyup") {
                _this.showSubMenu = false;
              }
              if (!_this.isMenu) {
                EventHandler.remove(ul_1, "keydown", _this.keyHandler);
                if (_this.keyType === "right") {
                  _this.keyType = "";
                }
              }
            }
            _this.updateReactTemplate();
            var trgtliId;
            var closedLi;
            var trgtLi;
            var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();
            if (_this.isCMenu) {
              if (_this.canOpen(e.target)) {
                _this.openMenu(null, null, _this.pageY, _this.pageX, e);
              }
              _this.isCMenu = false;
            }
            if (_this.isMenu && trgtpopUp && popupId.length) {
              var regExp = RegExp;
              trgtliId = new regExp("(.*)-ej2menu-" + _this.element.id + "-popup").exec(popupId)[1];
              closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            } else if (trgtpopUp) {
              closedLi = trgtpopUp.querySelector(".e-menu-item.e-selected");
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            }
            var submenus = liElem_1 && liElem_1.querySelectorAll(".e-menu-item");
            if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {
              _this.afterCloseMenu(e);
            } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== "left" && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {
              var ele = e && (e.target.classList.contains("e-vscroll") || e.target.classList.contains("e-scroll-nav")) ? closest(e.target, ".e-menu-wrapper") : null;
              if (ele) {
                ele = ele.querySelector(".e-menu-item");
                if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);
                }
              } else {
                if (!(e && e.target.classList.contains("e-nav-arrow"))) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
                }
              }
            } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {
              _this.closeMenu(null, e);
            } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {
              _this.closeMenu(null, e);
            } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed && !_this.isCmenuHover) {
              _this.isMenusClosed = true;
              _this.closeMenu(0, e);
            } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, ".e-menu-parent.e-control")) {
              _this.closeMenu(0, e);
            } else if (isOpen && !_this.isMenu && selectAll(".e-menu-parent", wrapper_1)[ulIndex - 1] && e.which === 3) {
              _this.closeMenu(null, e);
            } else {
              if (isOpen && (_this.keyType === "right" || _this.keyType === "click")) {
                _this.afterCloseMenu(e);
              } else {
                var cul = _this.getUlByNavIdx();
                var sli_1 = _this.getLIByClass(cul, SELECTED);
                if (sli_1) {
                  sli_1.setAttribute("aria-expanded", "false");
                  sli_1.classList.remove(SELECTED);
                  if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === "left") {
                    sli_1.classList.add(FOCUSED);
                    if (!e.target || !e.target.classList.contains("e-edit-template")) {
                      sli_1.focus();
                    }
                  }
                }
                if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute("aria-expanded") === "false" && liElem_1.getAttribute("aria-haspopup") === "true") {
                  if (closest(liElem_1, ".e-menu-parent.e-control")) {
                    _this.navIdx = [];
                  } else {
                    _this.navIdx.pop();
                  }
                  _this.navIdx.push(_this.cliIdx);
                  var item_2 = _this.getItem(_this.navIdx);
                  liElem_1.setAttribute("aria-expanded", "true");
                  _this.openMenu(liElem_1, item_2, -1, -1, e);
                }
              }
              if (_this.navIdx.length < 1) {
                if (_this.showSubMenuOn === "Hover" || _this.showSubMenuOn === "Click") {
                  _this.showItemOnClick = _this.defaultOption;
                  _this.showSubMenuOn = "Auto";
                }
              }
            }
            _this.removeStateWrapper();
          });
        }
      }
    };
    MenuBase2.prototype.updateReactTemplate = function() {
      if (this.isReact && this.template && this.navIdx.length === 0) {
        var portals = this.portals.splice(0, this.items.length);
        this.clearTemplate(["template"]);
        this.portals = portals;
        this.renderReactTemplates();
      }
    };
    MenuBase2.prototype.getMenuItemModel = function(item, level) {
      if (isNullOrUndefined(item)) {
        return null;
      }
      if (isNullOrUndefined(level)) {
        level = 0;
      }
      var fields = this.getFields(level);
      return {
        text: item[fields.text],
        id: item[fields.id],
        items: item[fields.child],
        separator: item[fields.separator],
        iconCss: item[fields.iconCss],
        url: item[fields.url]
      };
    };
    MenuBase2.prototype.getPopups = function() {
      var _this = this;
      var popups = [];
      [].slice.call(document.querySelectorAll("." + POPUP)).forEach(function(elem) {
        if (!isNullOrUndefined(elem.querySelector("." + ITEM)) && _this.getIndex(elem.querySelector("." + ITEM).id, true).length) {
          popups.push(elem);
        }
      });
      return popups;
    };
    MenuBase2.prototype.isMenuVisible = function() {
      return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
    };
    MenuBase2.prototype.canOpen = function(target) {
      var canOpen = true;
      if (this.filter) {
        canOpen = false;
        var filter = this.filter.split(" ");
        for (var i = 0, len = filter.length; i < len; i++) {
          if (closest(target, "." + filter[i])) {
            canOpen = true;
            break;
          }
        }
      }
      return canOpen;
    };
    MenuBase2.prototype.openMenu = function(li, item, top, left, e, target) {
      var _this = this;
      if (top === void 0) {
        top = 0;
      }
      if (left === void 0) {
        left = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (target === void 0) {
        target = this.targetElement;
      }
      var wrapper = this.getWrapper();
      this.lItem = li;
      var elemId = this.element.id !== "" ? this.element.id : "menu";
      this.isMenusClosed = false;
      if (isNullOrUndefined(top)) {
        top = -1;
      }
      if (isNullOrUndefined(left)) {
        left = -1;
      }
      if (li) {
        this.uList = this.createItems(item[this.getField("children", this.navIdx.length - 1)]);
        if (!this.isMenu && Browser.isDevice) {
          wrapper.lastChild.style.display = "none";
          var data = {
            text: item[this.getField("text")].toString(),
            iconCss: ICONS + " e-previous"
          };
          var hdata = new MenuItem(this.items[0], "items", data, true);
          var hli = this.createItems([hdata]).children[0];
          hli.classList.add(HEADER);
          this.uList.insertBefore(hli, this.uList.children[0]);
        }
        if (this.isMenu) {
          this.popupWrapper = this.createElement("div", {
            className: "e-" + this.getModuleName() + "-wrapper " + POPUP,
            id: li.id + "-ej2menu-" + elemId + "-popup"
          });
          if (this.hamburgerMode) {
            top = li.offsetHeight;
            li.appendChild(this.popupWrapper);
          } else {
            document.body.appendChild(this.popupWrapper);
          }
          this.isNestedOrVertical = this.element.classList.contains("e-vertical") || this.navIdx.length !== 1;
          this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);
          if (this.template) {
            this.renderReactTemplates();
          }
          if (this.hamburgerMode) {
            this.calculateIndentSize(this.uList, li);
          } else {
            if (this.cssClass) {
              addClass([this.popupWrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            this.popupObj.hide();
          }
          if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, "menu");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, "menu");
          }
        } else {
          this.uList.style.zIndex = this.element.style.zIndex;
          wrapper.appendChild(this.uList);
          if (!this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, "none");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
          }
        }
      } else {
        this.uList = this.element;
        this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();
        if (isNullOrUndefined(e)) {
          var ev = document.createEvent("MouseEvents");
          ev.initEvent("click", true, false);
          var targetEvent = this.copyObject(ev, {});
          targetEvent.target = targetEvent.srcElement = target;
          targetEvent.currentTarget = target;
          this.triggerBeforeOpen(li, this.uList, item, targetEvent, top, left, "none");
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
        }
      }
    };
    MenuBase2.prototype.copyObject = function(source, destination) {
      for (var prop in source) {
        destination["" + prop] = source["" + prop];
      }
      return destination;
    };
    MenuBase2.prototype.calculateIndentSize = function(ul, li) {
      var liStyle = getComputedStyle(li);
      var liIndent = parseInt(liStyle.textIndent, 10);
      if (this.navIdx.length < 2 && !li.classList.contains("e-blankicon")) {
        liIndent *= 2;
      } else {
        liIndent += liIndent / 4;
      }
      ul.style.textIndent = liIndent + "px";
      var blankIconElem = ul.querySelectorAll(".e-blankicon");
      if (blankIconElem && blankIconElem.length) {
        var menuIconElem = ul.querySelector(".e-menu-icon");
        var menuIconElemStyle = getComputedStyle(menuIconElem);
        var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;
        for (var i = 0; i < blankIconElem.length; i++) {
          blankIconElem[i].style.textIndent = blankIconIndent + "px";
        }
      }
    };
    MenuBase2.prototype.generatePopup = function(popupWrapper, ul, li, isNestedOrVertical) {
      var _this = this;
      var popupObj = new Popup(popupWrapper, {
        actionOnScroll: this.hamburgerMode ? "none" : "reposition",
        relateTo: li,
        collision: this.hamburgerMode ? { X: "none", Y: "none" } : { X: isNestedOrVertical || this.enableRtl ? "none" : "flip", Y: "fit" },
        position: isNestedOrVertical && !this.hamburgerMode ? { X: "right", Y: "top" } : { X: "left", Y: "bottom" },
        targetType: "relative",
        enableRtl: this.enableRtl,
        content: ul,
        open: function() {
          var scrollEle = select(".e-menu-vscroll", popupObj.element);
          if (scrollEle) {
            scrollEle.style.height = "inherit";
            scrollEle.style.maxHeight = "";
          }
          var ul2 = select(".e-ul", popupObj.element);
          popupObj.element.style.maxHeight = "";
          ul2.focus();
          _this.triggerOpen(ul2);
        }
      });
      return popupObj;
    };
    MenuBase2.prototype.createHeaderContainer = function(wrapper) {
      wrapper = wrapper || this.getWrapper();
      var spanElem = this.createElement("span", { className: "e-" + this.getModuleName() + "-header" });
      var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;
      var spanTitle = this.createElement("span", {
        className: "e-" + this.getModuleName() + "-title",
        innerHTML: tempTitle
      });
      var spanIcon = this.createElement("span", {
        className: "e-icons e-" + this.getModuleName() + "-icon",
        attrs: { "tabindex": "0" }
      });
      spanElem.appendChild(spanTitle);
      spanElem.appendChild(spanIcon);
      wrapper.insertBefore(spanElem, this.element);
    };
    MenuBase2.prototype.openHamburgerMenu = function(e) {
      if (this.hamburgerMode) {
        this.triggerBeforeOpen(null, this.element, null, e, 0, 0, "hamburger");
      }
    };
    MenuBase2.prototype.closeHamburgerMenu = function(e) {
      var _this = this;
      var beforeCloseArgs = {
        element: this.element,
        parentItem: null,
        event: e,
        items: this.items,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedHamburgerCloseArgs) {
        if (!observedHamburgerCloseArgs.cancel) {
          _this.closeMenu(null, e);
          _this.element.classList.add("e-hide-menu");
          _this.trigger("onClose", { element: _this.element, parentItem: null, items: _this.items });
        }
      });
    };
    MenuBase2.prototype.callFit = function(element, x, y, top, left) {
      return fit(element, null, { X: x, Y: y }, { top, left });
    };
    MenuBase2.prototype.triggerBeforeOpen = function(li, ul, item, e, top, left, type) {
      var _this = this;
      var items = li ? item[this.getField("children", this.navIdx.length - 1)] : this.items;
      var eventArgs = {
        element: ul,
        items,
        parentItem: item,
        event: e,
        cancel: false,
        top,
        left,
        showSubMenuOn: "Auto"
      };
      var menuType = type;
      this.trigger("beforeOpen", eventArgs, function(observedOpenArgs) {
        switch (menuType) {
          case "menu":
            if (!_this.hamburgerMode) {
              if (observedOpenArgs.showSubMenuOn !== "Auto") {
                _this.showItemOnClick = !_this.defaultOption;
                _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;
              }
              _this.top = observedOpenArgs.top;
              _this.left = observedOpenArgs.left;
            }
            _this.popupWrapper.style.display = "block";
            if (!_this.hamburgerMode) {
              _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + "px";
              if (_this.enableScrolling) {
                addScrolling(_this.createElement, _this.popupWrapper, _this.uList, "vscroll", _this.enableRtl);
              }
              _this.checkScrollOffset(e);
            }
            if (!_this.hamburgerMode && !_this.left && !_this.top) {
              _this.popupObj.refreshPosition(_this.lItem, true);
              _this.left = parseInt(_this.popupWrapper.style.left, 10);
              _this.top = parseInt(_this.popupWrapper.style.top, 10);
              if (_this.enableRtl) {
                _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
              }
              if (_this.template && (_this.isReact || _this.isAngular)) {
                requestAnimationFrame(function() {
                  _this.collision();
                  _this.popupWrapper.style.display = "";
                });
              } else {
                _this.collision();
                _this.popupWrapper.style.display = "";
              }
            } else {
              _this.popupObj.collision = { X: "none", Y: "none" };
              _this.popupWrapper.style.display = "";
            }
            break;
          case "none":
            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
            break;
          case "hamburger":
            if (!observedOpenArgs.cancel) {
              _this.element.classList.remove("e-hide-menu");
              _this.triggerOpen(_this.element);
            }
            break;
        }
        if (menuType !== "hamburger") {
          if (observedOpenArgs.cancel) {
            if (_this.isMenu) {
              _this.popupObj.destroy();
              detach(_this.popupWrapper);
            } else if (ul.className.indexOf("e-ul") > -1) {
              detach(ul);
            }
            _this.navIdx.pop();
          } else {
            if (_this.isMenu) {
              if (_this.hamburgerMode) {
                _this.popupWrapper.style.top = _this.top + "px";
                _this.popupWrapper.style.left = "0px";
                _this.toggleAnimation(_this.popupWrapper);
              } else {
                _this.setBlankIconStyle(_this.popupWrapper);
                _this.wireKeyboardEvent(_this.popupWrapper);
                rippleEffect(_this.popupWrapper, { selector: "." + ITEM });
                _this.popupWrapper.style.left = _this.left + "px";
                _this.popupWrapper.style.top = _this.top + "px";
                var animationOptions = _this.animationSettings.effect !== "None" ? {
                  name: _this.animationSettings.effect,
                  duration: _this.animationSettings.duration,
                  timingFunction: _this.animationSettings.easing
                } : null;
                _this.popupObj.show(animationOptions, _this.lItem);
              }
            } else {
              _this.setBlankIconStyle(_this.uList);
              _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);
              _this.toggleAnimation(_this.uList);
            }
          }
        }
        if (_this.keyType === "right") {
          var cul = _this.getUlByNavIdx();
          li.classList.remove(FOCUSED);
          if (_this.isMenu && _this.navIdx.length === 1) {
            _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);
          }
          li.classList.add(SELECTED);
          if (_this.action === ENTER) {
            var eventArgs_1 = { element: li, item, event: e };
            _this.trigger("select", eventArgs_1);
          }
          li.focus();
          cul = _this.getUlByNavIdx();
          var index = _this.isValidLI(cul.children[0], 0, _this.action);
          cul.children[index].classList.add(FOCUSED);
          cul.children[index].focus();
        }
      });
    };
    MenuBase2.prototype.collision = function() {
      var collide;
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf("right") > -1 || collide.indexOf("left") > -1)) {
        this.popupObj.collision.X = "none";
        var offWidth = closest(this.lItem, ".e-" + this.getModuleName() + "-wrapper").offsetWidth;
        this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? "right" : "left", "top").left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;
      }
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if (collide.indexOf("left") > -1 || collide.indexOf("right") > -1) {
        this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;
      }
      this.popupWrapper.style.left = this.left + "px";
    };
    MenuBase2.prototype.setBlankIconStyle = function(menu) {
      var blankIconList = [].slice.call(menu.getElementsByClassName("e-blankicon"));
      if (!blankIconList.length) {
        return;
      }
      var iconLi = menu.querySelector(".e-menu-item:not(.e-blankicon):not(.e-separator)");
      if (!iconLi) {
        return;
      }
      var icon = iconLi.querySelector(".e-menu-icon");
      if (!icon) {
        return;
      }
      var cssProp = this.enableRtl ? { padding: "paddingRight", margin: "marginLeft" } : { padding: "paddingLeft", margin: "marginRight" };
      var iconCssProps = getComputedStyle(icon);
      var iconSize = parseInt(iconCssProps.fontSize, 10);
      if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
        iconSize = parseInt(iconCssProps.width, 10);
      }
      var size = iconSize + parseInt(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iconCssProps[cssProp.margin],
        10
      ) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
      blankIconList.forEach(function(li) {
        li.style[cssProp.padding] = size;
      });
    };
    MenuBase2.prototype.checkScrollOffset = function(e) {
      var wrapper = this.getWrapper();
      if (wrapper.children[0].classList.contains("e-menu-hscroll") && this.navIdx.length === 1) {
        var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, "." + ITEM);
        var offsetEle = select(".e-hscroll-bar", wrapper);
        if (offsetEle.scrollLeft > trgt.offsetLeft) {
          offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
        }
        var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
        var offsetRight = trgt.offsetLeft + trgt.offsetWidth;
        if (offsetLeft < offsetRight) {
          offsetEle.scrollLeft += offsetRight - offsetLeft;
        }
      }
    };
    MenuBase2.prototype.setPosition = function(li, ul, top, left) {
      var px = "px";
      this.toggleVisiblity(ul);
      if (ul === this.element || left > -1 && top > -1) {
        var collide = isCollide(ul, null, left, top);
        if (collide.indexOf("right") > -1) {
          left = left - ul.offsetWidth;
        }
        if (collide.indexOf("bottom") > -1) {
          var offset = this.callFit(ul, false, true, top, left);
          top = offset.top - 20;
          if (top < 0) {
            var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;
            if (newTop > -1) {
              top = newTop;
            }
          }
        }
        collide = isCollide(ul, null, left, top);
        if (collide.indexOf("left") > -1) {
          var offset = this.callFit(ul, true, false, top, left);
          left = offset.left;
        }
      } else {
        if (Browser.isDevice) {
          top = Number(this.element.style.top.replace(px, ""));
          left = Number(this.element.style.left.replace(px, ""));
        } else {
          var x = this.enableRtl ? "left" : "right";
          var offset = calculatePosition(li, x, "top");
          top = offset.top;
          left = offset.left;
          var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
          var xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1;
          if (xCollision) {
            offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top");
            left = offset.left;
          }
          if (this.enableRtl || xCollision) {
            left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
          }
          if (collide.indexOf("bottom") > -1) {
            offset = this.callFit(ul, false, true, top, left);
            top = offset.top;
          }
        }
      }
      this.toggleVisiblity(ul, false);
      ul.style.top = top + px;
      ul.style.left = left + px;
    };
    MenuBase2.prototype.toggleVisiblity = function(ul, isVisible2) {
      if (isVisible2 === void 0) {
        isVisible2 = true;
      }
      ul.style.visibility = isVisible2 ? "hidden" : "";
      ul.style.display = isVisible2 ? "block" : "none";
    };
    MenuBase2.prototype.createItems = function(items) {
      var _this = this;
      var level = this.navIdx ? this.navIdx.length : 0;
      var fields = this.getFields(level);
      var showIcon = this.hasField(items, this.getField("iconCss", level));
      var listBaseOptions = {
        showIcon,
        moduleName: "menu",
        fields,
        template: this.template,
        itemNavigable: true,
        itemCreating: function(args) {
          if (!args.curData[args.fields[fields.id]]) {
            args.curData[args.fields[fields.id]] = getUniqueID("menuitem");
          }
          if (isNullOrUndefined(args.curData.htmlAttributes)) {
            args.curData.htmlAttributes = {};
          }
          if (Browser.isIE) {
            args.curData.htmlAttributes.role = "menuitem";
            args.curData.htmlAttributes.tabindex = "-1";
          } else {
            Object.assign(args.curData.htmlAttributes, { role: "menuitem", tabindex: "-1" });
          }
          if (_this.isMenu && !args.curData[_this.getField("separator", level)]) {
            args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];
          }
          if (args.curData[args.fields[fields.iconCss]] === "") {
            args.curData[args.fields[fields.iconCss]] = null;
          }
        },
        itemCreated: function(args) {
          if (args.curData[_this.getField("separator", level)]) {
            args.item.classList.add(SEPARATOR);
            args.item.setAttribute("role", "separator");
          }
          if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField("separator", level)]) {
            args.item.classList.add("e-blankicon");
          }
          if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
            var span = _this.createElement("span", { className: ICONS + " " + CARET });
            args.item.appendChild(span);
            args.item.setAttribute("aria-haspopup", "true");
            args.item.setAttribute("aria-expanded", "false");
            args.item.classList.add("e-menu-caret-icon");
          }
          if (_this.isMenu && _this.template) {
            args.item.setAttribute("id", args.curData[args.fields.id].toString());
            args.item.removeAttribute("data-uid");
            if (args.item.classList.contains("e-level-1")) {
              args.item.classList.remove("e-level-1");
            }
            if (args.item.classList.contains("e-has-child")) {
              args.item.classList.remove("e-has-child");
            }
            args.item.removeAttribute("aria-level");
          }
          var eventArgs = { item: args.curData, element: args.item };
          _this.trigger("beforeItemRender", eventArgs);
        }
      };
      this.setProperties({ "items": this.items }, true);
      if (this.isMenu) {
        listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
      }
      var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);
      ul.setAttribute("tabindex", "0");
      if (this.isMenu) {
        ul.setAttribute("role", "menu");
      } else {
        ul.setAttribute("role", "menubar");
      }
      return ul;
    };
    MenuBase2.prototype.moverHandler = function(e) {
      var trgt = e.target;
      this.liTrgt = trgt;
      if (!this.isMenu) {
        this.isCmenuHover = true;
      }
      var cli = this.getLI(trgt);
      var wrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : this.getWrapper();
      var hdrWrapper = this.getWrapper();
      var regex = new RegExp("-ej2menu-(.*)-popup");
      var ulId;
      var isDifferentElem = false;
      if (!wrapper) {
        return;
      }
      if (wrapper.id !== "") {
        ulId = regex.exec(wrapper.id)[1];
      } else {
        ulId = wrapper.querySelector("ul").id;
      }
      if (ulId !== this.element.id) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);
        if (this.navIdx.length) {
          isDifferentElem = true;
        } else {
          return;
        }
      }
      if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper") && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
        cli.classList.add(FOCUSED);
        if (!this.showItemOnClick) {
          this.clickHandler(e);
        }
      } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
      }
      if (this.isMenu) {
        if (!this.showItemOnClick && (trgt.parentElement !== wrapper && !closest(trgt, ".e-" + this.getModuleName() + "-popup")) && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== "Hover") {
          this.removeLIStateByClass([FOCUSED], [wrapper]);
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        } else if (isDifferentElem && !this.showItemOnClick) {
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        }
        if (!this.isClosed) {
          this.removeStateWrapper();
        }
        this.isClosed = false;
      }
      if (!this.isMenu) {
        this.isCmenuHover = false;
      }
    };
    MenuBase2.prototype.removeStateWrapper = function() {
      if (this.liTrgt) {
        var wrapper = closest(this.liTrgt, ".e-menu-vscroll");
        if (this.liTrgt.tagName === "DIV" && wrapper) {
          this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
        }
      }
    };
    MenuBase2.prototype.removeLIStateByClass = function(classList2, element) {
      var li;
      var _loop_1 = function(i2) {
        classList2.forEach(function(className) {
          li = select("." + className, element[i2]);
          if (li) {
            li.classList.remove(className);
          }
        });
      };
      for (var i = 0; i < element.length; i++) {
        _loop_1(i);
      }
    };
    MenuBase2.prototype.getField = function(propName, level) {
      if (level === void 0) {
        level = 0;
      }
      var fieldName = this.fields["" + propName];
      return typeof fieldName === "string" ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
    };
    MenuBase2.prototype.getFields = function(level) {
      if (level === void 0) {
        level = 0;
      }
      return {
        id: this.getField("itemId", level),
        iconCss: this.getField("iconCss", level),
        text: this.getField("text", level),
        url: this.getField("url", level),
        child: this.getField("children", level),
        separator: this.getField("separator", level)
      };
    };
    MenuBase2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    MenuBase2.prototype.menuHeaderClickHandler = function(e) {
      var menuWrapper = closest(e.target, ".e-menu-wrapper");
      if (menuWrapper && menuWrapper.querySelector("ul.e-menu-parent").id !== this.element.id) {
        return;
      }
      if (this.element.className.indexOf("e-hide-menu") > -1) {
        this.openHamburgerMenu(e);
      } else {
        this.closeHamburgerMenu(e);
      }
    };
    MenuBase2.prototype.clickHandler = function(e) {
      this.isTapHold = this.isTapHold ? false : this.isTapHold;
      var wrapper = this.getWrapper();
      var trgt = e.target;
      var cli = this.cli = this.getLI(trgt);
      var regex = new RegExp("-ej2menu-(.*)-popup");
      var cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null;
      var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);
      if (Browser.isDevice && this.isMenu) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
        this.mouseDownHandler(e);
      }
      if (cli && cliWrapper && this.isMenu) {
        var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector(".e-menu-parent").id;
        if (this.element.id !== cliWrapperId) {
          return;
        }
      }
      if (isInstLI && e.type === "click" && !cli.classList.contains(HEADER)) {
        this.setLISelected(cli);
        var navIdx = this.getIndex(cli.id, true);
        var item = this.getItem(navIdx);
        var eventArgs = { element: cli, item, event: e };
        this.trigger("select", eventArgs);
      }
      if (isInstLI && (e.type === "mouseover" || Browser.isDevice || this.showItemOnClick)) {
        var ul = void 0;
        if (cli.classList.contains(HEADER)) {
          ul = wrapper.children[this.navIdx.length - 1];
          this.toggleAnimation(ul);
          var sli = this.getLIByClass(ul, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          detach(cli.parentNode);
          this.navIdx.pop();
        } else {
          if (!cli.classList.contains(SEPARATOR)) {
            this.showSubMenu = true;
            var cul = cli.parentNode;
            if (isNullOrUndefined(cul)) {
              return;
            }
            this.cliIdx = this.getIdx(cul, cli);
            if (this.isMenu || !Browser.isDevice) {
              var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, ".e-" + this.getModuleName() + "-wrapper")) : this.getIdx(wrapper, cul);
              if (this.navIdx[culIdx] === this.cliIdx) {
                this.showSubMenu = false;
              }
              if (culIdx !== this.navIdx.length && (e.type !== "mouseover" || this.showSubMenu)) {
                var sli = this.getLIByClass(cul, SELECTED);
                if (sli) {
                  sli.classList.remove(SELECTED);
                }
                this.isClosed = true;
                this.keyType = "click";
                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                  if (!this.isMenu) {
                    this.isCmenuHover = true;
                  }
                }
                this.closeMenu(culIdx + 1, e);
                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                  if (!this.isMenu) {
                    this.isCmenuHover = false;
                  }
                }
              }
            }
            if (!this.isClosed) {
              this.afterCloseMenu(e);
            }
            this.isClosed = false;
          }
        }
      } else {
        if (this.isMenu && trgt.tagName === "DIV" && this.navIdx.length && closest(trgt, ".e-menu-vscroll")) {
          var popupEle = closest(trgt, "." + POPUP);
          var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;
          if (cIdx < this.navIdx.length) {
            this.closeMenu(cIdx + 1, e);
            if (popupEle) {
              this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
            }
          }
        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
          this.menuHeaderClickHandler(e);
        } else {
          if (trgt.tagName !== "UL" || (this.isMenu ? trgt.parentElement.classList.contains("e-menu-wrapper") && !this.getIndex(trgt.querySelector("." + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
            if (!cli) {
              this.removeLIStateByClass([SELECTED], [wrapper]);
            }
            if (!cli || !cli.querySelector("." + CARET)) {
              this.closeMenu(null, e);
            }
          }
        }
      }
    };
    MenuBase2.prototype.afterCloseMenu = function(e) {
      if (isNullOrUndefined(e)) {
        return;
      }
      var isHeader;
      if (this.showSubMenu) {
        if (this.showItemOnClick && this.navIdx.length === 0) {
          isHeader = closest(e.target, ".e-menu-parent.e-control");
        } else {
          isHeader = closest(this.element, ".e-menu-parent.e-control");
        }
        var idx = this.navIdx.concat(this.cliIdx);
        var item = this.getItem(idx);
        if (item && item[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
          if (e.type === "mouseover" || Browser.isDevice && this.isMenu) {
            this.setLISelected(this.cli);
          }
          if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute("aria-expanded") === "false") {
            this.cli.setAttribute("aria-expanded", "true");
            this.navIdx.push(this.cliIdx);
            this.openMenu(this.cli, item, null, null, e);
          }
        } else {
          if (e.type !== "mouseover") {
            this.closeMenu(null, e);
          }
        }
        if (!isHeader) {
          var cul = this.getUlByNavIdx();
          var sli = this.getLIByClass(cul, SELECTED);
          if (sli) {
            sli.setAttribute("aria-expanded", "false");
            sli.classList.remove(SELECTED);
          }
        }
      }
      this.keyType = "";
    };
    MenuBase2.prototype.setLISelected = function(li) {
      var sli = this.getLIByClass(li.parentElement, SELECTED);
      if (sli) {
        sli.classList.remove(SELECTED);
      }
      if (!this.isMenu) {
        li.classList.remove(FOCUSED);
      }
      li.classList.add(SELECTED);
    };
    MenuBase2.prototype.getLIByClass = function(ul, classname) {
      if (ul && ul.children) {
        for (var i = 0, len = ul.children.length; i < len; i++) {
          if (ul.children[i].classList.contains(classname)) {
            return ul.children[i];
          }
        }
      }
      return null;
    };
    MenuBase2.prototype.getItemIndex = function(item, isUniqueId) {
      var idx;
      if (typeof item === "string") {
        idx = item;
      } else {
        idx = item.id;
      }
      var isText = isUniqueId === false ? false : true;
      var navIdx = this.getIndex(idx, isText);
      return navIdx;
    };
    MenuBase2.prototype.setItem = function(item, id, isUniqueId) {
      var idx;
      if (isUniqueId) {
        idx = id ? id : item.id;
      } else {
        idx = id ? id : item.text;
      }
      var navIdx = this.getIndex(idx, isUniqueId);
      var newItem = this.getItem(navIdx);
      Object.assign(newItem, item);
    };
    MenuBase2.prototype.getItem = function(navIdx) {
      navIdx = navIdx.slice();
      var idx = navIdx.pop();
      var items = this.getItems(navIdx);
      return items[idx];
    };
    MenuBase2.prototype.getItems = function(navIdx) {
      var items = this.items;
      for (var i = 0; i < navIdx.length; i++) {
        items = items[navIdx[i]][this.getField("children", i)];
      }
      return items;
    };
    MenuBase2.prototype.setItems = function(newItems, navIdx) {
      var items = this.getItems(navIdx);
      items.splice(0, items.length);
      for (var i = 0; i < newItems.length; i++) {
        items.splice(i, 0, newItems[i]);
      }
    };
    MenuBase2.prototype.getIdx = function(ul, li, skipHdr) {
      if (skipHdr === void 0) {
        skipHdr = true;
      }
      var idx = Array.prototype.indexOf.call(ul.children, li);
      if (skipHdr && ul.children[0].classList.contains(HEADER)) {
        idx--;
      }
      return idx;
    };
    MenuBase2.prototype.getLI = function(elem) {
      if (elem.tagName === "LI" && elem.classList.contains("e-menu-item")) {
        return elem;
      }
      return closest(elem, "li.e-menu-item");
    };
    MenuBase2.prototype.updateItemsByNavIdx = function() {
      var items = this.items;
      var count = 0;
      for (var index = 0; index < this.navIdx.length; index++) {
        items = items[index].items;
        if (!items) {
          break;
        }
        count++;
        var ul = this.getUlByNavIdx(count);
        if (!ul) {
          break;
        }
        this.updateItem(ul, items);
      }
    };
    MenuBase2.prototype.removeChildElement = function(elem) {
      while (elem.firstElementChild) {
        elem.removeChild(elem.firstElementChild);
      }
      return elem;
    };
    MenuBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var wrapper = this.getWrapper();
      var _loop_2 = function(prop2) {
        switch (prop2) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (this_1.enableRtl) {
              wrapper.classList.add(RTL);
            } else {
              wrapper.classList.remove(RTL);
            }
            break;
          case "showItemOnClick":
            this_1.unWireEvents();
            this_1.showItemOnClick = newProp.showItemOnClick;
            this_1.wireEvents();
            break;
          case "enableScrolling":
            if (newProp.enableScrolling) {
              var ul_2;
              if (this_1.element.classList.contains("e-vertical")) {
                addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
              } else {
                addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
              }
              this_1.getPopups().forEach(function(wrapper2) {
                ul_2 = select(".e-ul", wrapper2);
                addScrolling(_this.createElement, wrapper2, ul_2, "vscroll", _this.enableRtl);
              });
            } else {
              var ul_3 = wrapper.children[0];
              if (this_1.element.classList.contains("e-vertical")) {
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
              } else {
                destroyScroll(getInstance(ul_3, HScroll), ul_3);
              }
              wrapper.style.overflow = "";
              wrapper.appendChild(this_1.element);
              this_1.getPopups().forEach(function(wrapper2) {
                ul_3 = wrapper2.children[0];
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
                wrapper2.style.overflow = "";
              });
            }
            break;
          case "items": {
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0;
            if (this_1.isReact && this_1.template) {
              this_1.clearTemplate(["template"]);
            }
            if (!Object.keys(oldProp.items).length) {
              this_1.updateItem(this_1.element, this_1.items);
              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains("e-custom-scroll")) {
                if (this_1.element.classList.contains("e-vertical")) {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
                } else {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
                }
              }
              if (!this_1.hamburgerMode) {
                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                  detach(wrapper.lastElementChild);
                }
              }
              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);
              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));
                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }
                navIdx.length = 0;
              }
            }
            break;
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_2(prop);
      }
    };
    MenuBase2.prototype.updateItem = function(ul, items) {
      if (isBlazor() && !this.isMenu) {
        ul = this.removeChildElement(ul);
      } else {
        if (this.enableScrolling) {
          var wrapper1 = this.getWrapper();
          var ul1 = wrapper1.children[0];
          if (this.element.classList.contains("e-vertical")) {
            destroyScroll(getInstance(ul1, VScroll), ul1);
          } else {
            destroyScroll(getInstance(ul1, HScroll), ul1);
          }
        }
        ul.innerHTML = "";
      }
      var lis = [].slice.call(this.createItems(items).children);
      lis.forEach(function(li) {
        ul.appendChild(li);
      });
    };
    MenuBase2.prototype.getChangedItemIndex = function(newProp, index, idx) {
      index.push(idx);
      var key = Object.keys(newProp.items[idx]).pop();
      if (key === "items") {
        var item = newProp.items[idx];
        var popStr = Object.keys(item.items).pop();
        if (popStr) {
          this.getChangedItemIndex(item, index, Number(popStr));
        }
      } else {
        if (key === "isParentArray" && index.length > 1) {
          index.pop();
        }
      }
      return index;
    };
    MenuBase2.prototype.removeItem = function(item, navIdx, idx) {
      item.splice(idx, 1);
      var uls = this.getWrapper().children;
      if (navIdx.length < uls.length) {
        detach(uls[navIdx.length].children[idx]);
      }
    };
    MenuBase2.prototype.unWireEvents = function(targetSelctor) {
      if (targetSelctor === void 0) {
        targetSelctor = this.target;
      }
      var wrapper = this.getWrapper();
      if (targetSelctor) {
        var target = void 0;
        var touchModule = void 0;
        var targetElems = selectAll(targetSelctor);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.remove(target, "click", this.menuHeaderClickHandler);
          } else {
            if (Browser.isIos) {
              touchModule = getInstance(target, Touch);
              if (touchModule) {
                touchModule.destroy();
              }
            } else {
              EventHandler.remove(target, "contextmenu", this.cmenuHandler);
            }
          }
        }
        if (!this.isMenu) {
          EventHandler.remove(this.targetElement, "scroll", this.scrollHandler);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_2 = _a[_i];
            EventHandler.remove(parent_2, "scroll", this.scrollHandler);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler);
        EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler);
      }
      EventHandler.remove(document, "click", this.delegateClickHandler);
      this.unWireKeyboardEvent(wrapper);
      this.rippleFn();
    };
    MenuBase2.prototype.unWireKeyboardEvent = function(element) {
      var keyboardModule = getInstance(element, KeyboardEvents);
      if (keyboardModule) {
        keyboardModule.destroy();
      }
    };
    MenuBase2.prototype.toggleAnimation = function(ul, isMenuOpen) {
      var _this = this;
      if (isMenuOpen === void 0) {
        isMenuOpen = true;
      }
      var pUlHeight;
      var pElement;
      if (this.animationSettings.effect === "None" || !isMenuOpen) {
        this.end(ul, isMenuOpen);
      } else {
        this.animation.animate(ul, {
          name: this.animationSettings.effect,
          duration: this.animationSettings.duration,
          timingFunction: this.animationSettings.easing,
          begin: function(options) {
            if (_this.hamburgerMode) {
              pElement = options.element.parentElement;
              options.element.style.position = "absolute";
              pUlHeight = pElement.offsetHeight;
              options.element.style.maxHeight = options.element.offsetHeight + "px";
              pElement.style.maxHeight = "";
            } else {
              options.element.style.display = "block";
              options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
            }
          },
          progress: function(options) {
            if (_this.hamburgerMode) {
              pElement.style.minHeight = pUlHeight + options.element.offsetHeight + "px";
            }
          },
          end: function(options) {
            if (_this.hamburgerMode) {
              options.element.style.position = "";
              options.element.style.maxHeight = "";
              pElement.style.minHeight = "";
              options.element.style.top = "0px";
              options.element.children[0].focus();
              _this.triggerOpen(options.element.children[0]);
            } else {
              _this.end(options.element, isMenuOpen);
            }
          }
        });
      }
    };
    MenuBase2.prototype.triggerOpen = function(ul) {
      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
      var eventArgs = {
        element: ul,
        parentItem: item,
        items: item ? item.items : this.items
      };
      this.trigger("onOpen", eventArgs);
      if (!this.isMenu) {
        EventHandler.add(ul, "keydown", this.keyHandler, this);
      }
    };
    MenuBase2.prototype.end = function(ul, isMenuOpen) {
      if (isMenuOpen) {
        if (this.isMenu || !Browser.isDevice) {
          ul.style.display = "block";
        }
        ul.style.maxHeight = "";
        this.triggerOpen(ul);
        if (ul.querySelector("." + FOCUSED)) {
          ul.querySelector("." + FOCUSED).focus();
        } else {
          var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];
          if (this.currentTarget) {
            if (!(this.currentTarget.classList.contains("e-numerictextbox") || this.currentTarget.classList.contains("e-textbox") || this.currentTarget.tagName === "INPUT")) {
              if (ele) {
                ele.querySelector("." + SELECTED).focus();
              } else {
                this.element.focus();
              }
            }
          } else {
            if (ele) {
              ele.querySelector("." + SELECTED).focus();
            } else {
              this.element.focus();
            }
          }
        }
      } else {
        if (ul === this.element) {
          var fli = this.getLIByClass(this.element, FOCUSED);
          if (fli) {
            fli.classList.remove(FOCUSED);
          }
          var sli = this.getLIByClass(this.element, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          ul.style.display = "none";
        } else {
          detach(ul);
        }
      }
    };
    MenuBase2.prototype.getPersistData = function() {
      return "";
    };
    MenuBase2.prototype.getWrapper = function() {
      return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
    };
    MenuBase2.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
      if (items === void 0) {
        items = this.items;
      }
      if (nIndex === void 0) {
        nIndex = [];
      }
      if (isCallBack === void 0) {
        isCallBack = false;
      }
      if (level === void 0) {
        level = 0;
      }
      var item;
      level = isCallBack ? level + 1 : 0;
      for (var i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if ((isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)]) === data) {
          nIndex.push(i);
          break;
        } else if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
          nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, true, level);
          if (nIndex[nIndex.length - 1] === -1) {
            if (i !== len - 1) {
              nIndex.pop();
            }
          } else {
            nIndex.unshift(i);
            break;
          }
        } else {
          if (i === len - 1) {
            nIndex.push(-1);
          }
        }
      }
      return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
    };
    MenuBase2.prototype.enableItems = function(items, enable, isUniqueId) {
      if (enable === void 0) {
        enable = true;
      }
      var ul;
      var idx;
      var navIdx;
      var disabled = DISABLED;
      var skipItem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        if (this.navIdx.length) {
          if (navIdx.length !== 1) {
            skipItem = false;
            for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
              if (navIdx[i_1] !== this.navIdx[i_1]) {
                skipItem = true;
                break;
              }
            }
            if (skipItem) {
              continue;
            }
          }
        } else {
          if (navIdx.length !== 1) {
            continue;
          }
        }
        idx = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        if (ul && !isNullOrUndefined(idx)) {
          if (enable) {
            if (this.isMenu) {
              ul.children[idx].classList.remove(disabled);
              ul.children[idx].removeAttribute("aria-disabled");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.remove(disabled);
              } else {
                ul.children[idx].classList.remove(disabled);
              }
            }
          } else {
            if (this.isMenu) {
              ul.children[idx].classList.add(disabled);
              ul.children[idx].setAttribute("aria-disabled", "true");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.add(disabled);
              } else {
                ul.children[idx].classList.add(disabled);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.showItems = function(items, isUniqueId) {
      this.showHideItems(items, false, isUniqueId);
    };
    MenuBase2.prototype.hideItems = function(items, isUniqueId) {
      this.showHideItems(items, true, isUniqueId);
    };
    MenuBase2.prototype.showHideItems = function(items, ishide, isUniqueId) {
      var ul;
      var index;
      var navIdx;
      var item;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        index = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        item = this.getItems(navIdx);
        if (ul) {
          var validUl = isUniqueId ? ul.children[index].id : item[index].text.toString();
          if (ishide && validUl === items[i]) {
            ul.children[index].classList.add(HIDE);
          } else if (!ishide && validUl === items[i]) {
            ul.children[index].classList.remove(HIDE);
          }
        }
      }
    };
    MenuBase2.prototype.removeItems = function(items, isUniqueId) {
      var idx;
      var navIdx;
      var iitems;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        if (!isNullOrUndefined(idx)) {
          this.removeItem(iitems, navIdx, idx);
        }
      }
    };
    MenuBase2.prototype.insertAfter = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId);
    };
    MenuBase2.prototype.insertBefore = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId, false);
    };
    MenuBase2.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
      if (isAfter === void 0) {
        isAfter = true;
      }
      var li;
      var idx;
      var navIdx;
      var iitems;
      var menuitem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(text, isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        menuitem = new MenuItem(iitems[0], "items", items[i], true);
        iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
        var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);
        if (!isNullOrUndefined(idx) && navIdx.length < uls.length) {
          idx = isAfter ? idx + 1 : idx;
          li = this.createItems(iitems).children[idx];
          var ul = this.isMenu ? select(".e-menu-parent", uls[navIdx.length]) : uls[navIdx.length];
          ul.insertBefore(li, ul.children[idx]);
        }
      }
    };
    MenuBase2.prototype.removeAttributes = function() {
      var _this = this;
      ["top", "left", "display", "z-index"].forEach(function(key) {
        _this.element.style.removeProperty(key);
      });
      ["role", "tabindex", "class", "style"].forEach(function(key) {
        if (key === "class" && _this.element.classList.contains("e-menu-parent")) {
          _this.element.classList.remove("e-menu-parent");
        }
        if (["class", "style"].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
          _this.element.removeAttribute(key);
        }
        if (_this.isMenu && key === "class" && _this.element.classList.contains("e-vertical")) {
          _this.element.classList.remove("e-vertical");
        }
      });
    };
    MenuBase2.prototype.destroy = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        this.unWireEvents();
        if (!this.isMenu) {
          this.clonedElement.style.display = "";
          if (this.clonedElement.tagName === "EJS-CONTEXTMENU") {
            addClass([this.clonedElement], ["e-control", "e-lib", "e-" + this.getModuleName()]);
            this.element = this.clonedElement;
          } else {
            if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === "LI") {
              this.setProperties({ "items": [] }, true);
            }
            if (document.getElementById(this.clonedElement.id)) {
              var refEle = this.clonedElement.nextElementSibling;
              if (refEle && refEle !== wrapper) {
                this.clonedElement.parentElement.insertBefore(this.element, refEle);
              } else {
                this.clonedElement.parentElement.appendChild(this.element);
              }
              if (isBlazor() && !this.isMenu) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = "";
              }
              append([].slice.call(this.clonedElement.children), this.element);
              detach(this.clonedElement);
              this.removeAttributes();
            }
          }
          this.clonedElement = null;
        } else {
          this.closeMenu();
          if (isBlazor() && !this.isMenu) {
            this.element = this.removeChildElement(this.element);
          } else {
            this.element.innerHTML = "";
          }
          this.removeAttributes();
          wrapper.parentNode.insertBefore(this.element, wrapper);
          this.clonedElement = null;
        }
        if (this.isMenu && this.clonedElement) {
          detach(this.element);
          wrapper.style.display = "";
          wrapper.classList.remove("e-" + this.getModuleName() + "-wrapper");
          wrapper.removeAttribute("data-ripple");
        } else {
          detach(wrapper);
        }
        _super.prototype.destroy.call(this);
        if (this.template) {
          this.clearTemplate(["template"]);
        }
      }
      this.rippleFn = null;
    };
    __decorate6([
      Event()
    ], MenuBase2.prototype, "beforeItemRender", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "beforeOpen", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "onOpen", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "beforeClose", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "onClose", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "select", void 0);
    __decorate6([
      Event()
    ], MenuBase2.prototype, "created", void 0);
    __decorate6([
      Property("")
    ], MenuBase2.prototype, "cssClass", void 0);
    __decorate6([
      Property(0)
    ], MenuBase2.prototype, "hoverDelay", void 0);
    __decorate6([
      Property(false)
    ], MenuBase2.prototype, "showItemOnClick", void 0);
    __decorate6([
      Property("")
    ], MenuBase2.prototype, "target", void 0);
    __decorate6([
      Property("")
    ], MenuBase2.prototype, "filter", void 0);
    __decorate6([
      Property(null)
    ], MenuBase2.prototype, "template", void 0);
    __decorate6([
      Property(false)
    ], MenuBase2.prototype, "enableScrolling", void 0);
    __decorate6([
      Property(true)
    ], MenuBase2.prototype, "enableHtmlSanitizer", void 0);
    __decorate6([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], MenuBase2.prototype, "fields", void 0);
    __decorate6([
      Collection([], MenuItem)
    ], MenuBase2.prototype, "items", void 0);
    __decorate6([
      Complex({ duration: 400, easing: "ease", effect: "SlideDown" }, MenuAnimationSettings)
    ], MenuBase2.prototype, "animationSettings", void 0);
    MenuBase2 = __decorate6([
      NotifyPropertyChanges
    ], MenuBase2);
    return MenuBase2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_VERTICAL = "e-vertical";
var CLS_ITEMS = "e-toolbar-items";
var CLS_ITEM = "e-toolbar-item";
var CLS_RTL3 = "e-rtl";
var CLS_SEPARATOR = "e-separator";
var CLS_POPUPICON = "e-popup-up-icon";
var CLS_POPUPDOWN = "e-popup-down-icon";
var CLS_POPUPOPEN = "e-popup-open";
var CLS_TEMPLATE = "e-template";
var CLS_DISABLE3 = "e-overlay";
var CLS_POPUPTEXT = "e-toolbar-text";
var CLS_TBARTEXT = "e-popup-text";
var CLS_TBAROVERFLOW = "e-overflow-show";
var CLS_POPOVERFLOW = "e-overflow-hide";
var CLS_TBARBTN = "e-tbar-btn";
var CLS_TBARNAV = "e-hor-nav";
var CLS_TBARSCRLNAV = "e-scroll-nav";
var CLS_TBARRIGHT = "e-toolbar-right";
var CLS_TBARLEFT = "e-toolbar-left";
var CLS_TBARCENTER = "e-toolbar-center";
var CLS_TBARPOS = "e-tbar-pos";
var CLS_HSCROLLCNT = "e-hscroll-content";
var CLS_VSCROLLCNT = "e-vscroll-content";
var CLS_HSCROLLBAR2 = "e-hscroll-bar";
var CLS_POPUPNAV = "e-hor-nav";
var CLS_POPUPCLASS = "e-toolbar-pop";
var CLS_POPUP = "e-toolbar-popup";
var CLS_TBARBTNTEXT = "e-tbar-btn-text";
var CLS_TBARNAVACT = "e-nav-active";
var CLS_TBARIGNORE = "e-ignore";
var CLS_POPPRI = "e-popup-alone";
var CLS_HIDDEN = "e-hidden";
var CLS_MULTIROW = "e-toolbar-multirow";
var CLS_MULTIROWPOS = "e-multirow-pos";
var CLS_MULTIROW_SEPARATOR = "e-multirow-separator";
var CLS_EXTENDABLE_SEPARATOR = "e-extended-separator";
var CLS_EXTEANDABLE_TOOLBAR = "e-extended-toolbar";
var CLS_EXTENDABLECLASS = "e-toolbar-extended";
var CLS_EXTENDPOPUP = "e-expended-nav";
var CLS_EXTENDEDPOPOPEN = "e-tbar-extended";
var Item = (
  /** @class */
  function(_super) {
    __extends7(Item2, _super);
    function Item2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([
      Property("")
    ], Item2.prototype, "id", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "text", void 0);
    __decorate7([
      Property("auto")
    ], Item2.prototype, "width", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "cssClass", void 0);
    __decorate7([
      Property(false)
    ], Item2.prototype, "showAlwaysInPopup", void 0);
    __decorate7([
      Property(false)
    ], Item2.prototype, "disabled", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "prefixIcon", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "suffixIcon", void 0);
    __decorate7([
      Property(true)
    ], Item2.prototype, "visible", void 0);
    __decorate7([
      Property("None")
    ], Item2.prototype, "overflow", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "template", void 0);
    __decorate7([
      Property("Button")
    ], Item2.prototype, "type", void 0);
    __decorate7([
      Property("Both")
    ], Item2.prototype, "showTextOn", void 0);
    __decorate7([
      Property(null)
    ], Item2.prototype, "htmlAttributes", void 0);
    __decorate7([
      Property("")
    ], Item2.prototype, "tooltipText", void 0);
    __decorate7([
      Property("Left")
    ], Item2.prototype, "align", void 0);
    __decorate7([
      Event()
    ], Item2.prototype, "click", void 0);
    __decorate7([
      Property(-1)
    ], Item2.prototype, "tabIndex", void 0);
    return Item2;
  }(ChildProperty)
);
var Toolbar = (
  /** @class */
  function(_super) {
    __extends7(Toolbar2, _super);
    function Toolbar2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.resizeContext = _this.resize.bind(_this);
      _this.orientationChangeContext = _this.orientationChange.bind(_this);
      _this.keyConfigs = {
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        popupOpen: "enter",
        popupClose: "escape",
        tab: "tab",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Toolbar2.prototype.destroy = function() {
      var _this = this;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      var btnItems = this.element.querySelectorAll(".e-control.e-btn");
      [].slice.call(btnItems).forEach(function(el) {
        if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {
          el.ej2_instances[0].destroy();
        }
      });
      this.unwireEvents();
      this.tempId.forEach(function(ele) {
        if (!isNullOrUndefined(_this.element.querySelector(ele))) {
          document.body.appendChild(_this.element.querySelector(ele)).style.display = "none";
        }
      });
      this.destroyItems();
      while (this.element.lastElementChild) {
        this.element.removeChild(this.element.lastElementChild);
      }
      if (this.trgtEle) {
        this.element.appendChild(this.ctrlTem);
        this.trgtEle = null;
        this.ctrlTem = null;
      }
      if (this.popObj) {
        this.popObj.destroy();
        detach(this.popObj.element);
      }
      if (this.activeEle) {
        this.activeEle = null;
      }
      this.popObj = null;
      this.tbarAlign = null;
      this.tbarItemsCol = [];
      this.remove(this.element, "e-toolpop");
      if (this.cssClass) {
        removeClass([this.element], this.cssClass.split(" "));
      }
      this.element.removeAttribute("style");
      ["aria-disabled", "aria-orientation", "role"].forEach(function(attrb) {
        return _this.element.removeAttribute(attrb);
      });
      _super.prototype.destroy.call(this);
    };
    Toolbar2.prototype.preRender = function() {
      var eventArgs = { enableCollision: this.enableCollision, scrollStep: this.scrollStep };
      this.trigger("beforeCreate", eventArgs);
      this.enableCollision = eventArgs.enableCollision;
      this.scrollStep = eventArgs.scrollStep;
      this.scrollModule = null;
      this.popObj = null;
      this.tempId = [];
      this.tbarItemsCol = this.items;
      this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
      this.isExtendedOpen = false;
      this.popupPriCount = 0;
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL3);
      }
    };
    Toolbar2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resizeContext);
      window.addEventListener("orientationchange", this.orientationChangeContext);
      if (this.allowKeyboard) {
        this.wireKeyboardEvent();
      }
    };
    Toolbar2.prototype.wireKeyboardEvent = function() {
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      EventHandler.add(this.element, "keydown", this.docKeyDown, this);
      this.updateTabIndex("0");
    };
    Toolbar2.prototype.updateTabIndex = function(tabIndex) {
      var ele = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(ele) && !isNullOrUndefined(ele.firstElementChild)) {
        var dataTabIndex = ele.firstElementChild.getAttribute("data-tabindex");
        if (dataTabIndex && dataTabIndex === "-1" && ele.firstElementChild.tagName !== "INPUT") {
          ele.firstElementChild.setAttribute("tabindex", tabIndex);
        }
      }
    };
    Toolbar2.prototype.unwireKeyboardEvent = function() {
      if (this.keyModule) {
        EventHandler.remove(this.element, "keydown", this.docKeyDown);
        this.keyModule.destroy();
        this.keyModule = null;
      }
    };
    Toolbar2.prototype.docKeyDown = function(e) {
      if (e.target.tagName === "INPUT") {
        return;
      }
      var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== "Extended";
      if (e.keyCode === 9 && e.target.classList.contains("e-hor-nav") === true && popCheck) {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
      var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;
      if (keyCheck) {
        e.preventDefault();
      }
    };
    Toolbar2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      this.destroyScroll();
      this.unwireKeyboardEvent();
      window.removeEventListener("resize", this.resizeContext);
      window.removeEventListener("orientationchange", this.orientationChangeContext);
      EventHandler.remove(document, "scroll", this.docEvent);
      EventHandler.remove(document, "click", this.docEvent);
    };
    Toolbar2.prototype.clearProperty = function() {
      this.tbarEle = [];
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
    };
    Toolbar2.prototype.docEvent = function(e) {
      var popEle = closest(e.target, ".e-popup");
      if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === "Popup") {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
    };
    Toolbar2.prototype.destroyScroll = function() {
      if (this.scrollModule) {
        if (this.tbarAlign) {
          this.add(this.scrollModule.element, CLS_TBARPOS);
        }
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
    };
    Toolbar2.prototype.destroyItems = function() {
      if (this.element) {
        [].slice.call(this.element.querySelectorAll("." + CLS_ITEM)).forEach(function(el) {
          detach(el);
        });
      }
      if (this.tbarAlign) {
        var tbarItems = this.element.querySelector("." + CLS_ITEMS);
        [].slice.call(tbarItems.children).forEach(function(el) {
          detach(el);
        });
        this.tbarAlign = false;
        this.remove(tbarItems, CLS_TBARPOS);
      }
      this.clearProperty();
    };
    Toolbar2.prototype.destroyMode = function() {
      if (this.scrollModule) {
        this.remove(this.scrollModule.element, CLS_RTL3);
        this.destroyScroll();
      }
      this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
      var tempEle = this.element.querySelector(".e-toolbar-multirow");
      if (tempEle) {
        this.remove(tempEle, CLS_MULTIROW);
      }
      if (this.popObj) {
        this.popupRefresh(this.popObj.element, true);
      }
    };
    Toolbar2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Toolbar2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Toolbar2.prototype.elementFocus = function(ele) {
      var fChild = ele.firstElementChild;
      if (fChild) {
        fChild.focus();
        this.activeEleSwitch(ele);
      } else {
        ele.focus();
      }
    };
    Toolbar2.prototype.clstElement = function(tbrNavChk, trgt) {
      var clst;
      if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {
        clst = this.popObj.element.querySelector("." + CLS_ITEM);
      } else if (this.element === trgt || tbrNavChk) {
        clst = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      } else {
        clst = closest(trgt, "." + CLS_ITEM);
      }
      return clst;
    };
    Toolbar2.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
      var popObj = this.popObj;
      var rootEle = this.element;
      var popAnimate = { name: "FadeOut", duration: 100 };
      var value = e.action === "moveUp" ? "previous" : "next";
      var ele;
      var nodes;
      switch (e.action) {
        case "moveRight":
          if (this.isVertical) {
            return;
          }
          if (rootEle === trgt) {
            this.elementFocus(clst);
          } else if (!navChk) {
            this.eleFocus(clst, "next");
          }
          break;
        case "moveLeft":
          if (this.isVertical) {
            return;
          }
          if (!navChk) {
            this.eleFocus(clst, "previous");
          }
          break;
        case "home":
        case "end":
          if (clst) {
            var popupCheck = closest(clst, ".e-popup");
            var extendedPopup = this.element.querySelector("." + CLS_EXTENDABLECLASS);
            if (this.overflowMode === "Extended" && extendedPopup && extendedPopup.classList.contains("e-popup-open")) {
              popupCheck = e.action === "end" ? extendedPopup : null;
            }
            if (popupCheck) {
              if (isVisible(this.popObj.element)) {
                nodes = [].slice.call(popupCheck.children);
                if (e.action === "home") {
                  ele = this.focusFirstVisibleEle(nodes);
                } else {
                  ele = this.focusLastVisibleEle(nodes);
                }
              }
            } else {
              nodes = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + ")");
              if (e.action === "home") {
                ele = this.focusFirstVisibleEle(nodes);
              } else {
                ele = this.focusLastVisibleEle(nodes);
              }
            }
            if (ele) {
              this.elementFocus(ele);
            }
          }
          break;
        case "moveUp":
        case "moveDown":
          if (!this.isVertical) {
            if (popObj && closest(trgt, ".e-popup")) {
              var popEle = popObj.element;
              var popFrstEle = popEle.firstElementChild;
              if (value === "previous" && popFrstEle === clst) {
                popEle.lastElementChild.firstChild.focus();
              } else if (value === "next" && popEle.lastElementChild === clst) {
                popFrstEle.firstChild.focus();
              } else {
                this.eleFocus(clst, value);
              }
            } else if (e.action === "moveDown" && popObj && isVisible(popObj.element)) {
              this.elementFocus(clst);
            }
          } else {
            if (e.action === "moveUp") {
              this.eleFocus(clst, "previous");
            } else {
              this.eleFocus(clst, "next");
            }
          }
          break;
        case "tab":
          if (!scrollChk && !navChk) {
            var ele_1 = clst.firstElementChild;
            if (rootEle === trgt) {
              if (this.activeEle) {
                this.activeEle.focus();
              } else {
                this.activeEleRemove(ele_1);
                ele_1.focus();
              }
            }
          }
          break;
        case "popupClose":
          if (popObj && this.overflowMode !== "Extended") {
            popObj.hide(popAnimate);
          }
          break;
        case "popupOpen":
          if (!navChk) {
            return;
          }
          if (popObj && !isVisible(popObj.element)) {
            popObj.element.style.top = rootEle.offsetHeight + "px";
            popObj.show({ name: "FadeIn", duration: 100 });
          } else {
            popObj.hide(popAnimate);
          }
          break;
      }
    };
    Toolbar2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      if (trgt.tagName === "INPUT" || trgt.tagName === "TEXTAREA" || this.element.classList.contains(CLS_DISABLE3)) {
        return;
      }
      e.preventDefault();
      var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
      var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
      var clst = this.clstElement(tbrNavChk, trgt);
      if (clst || tbarScrollChk) {
        this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
      }
    };
    Toolbar2.prototype.disable = function(value) {
      var rootEle = this.element;
      if (value) {
        rootEle.classList.add(CLS_DISABLE3);
      } else {
        rootEle.classList.remove(CLS_DISABLE3);
      }
      if (this.activeEle) {
        this.activeEle.setAttribute("tabindex", this.activeEle.getAttribute("data-tabindex"));
      }
      if (this.scrollModule) {
        this.scrollModule.disable(value);
      }
      if (this.popObj) {
        if (isVisible(this.popObj.element) && this.overflowMode !== "Extended") {
          this.popObj.hide();
        }
        rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", !value ? "0" : "-1");
      }
    };
    Toolbar2.prototype.eleContains = function(el) {
      return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE3) || el.getAttribute("disabled") || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);
    };
    Toolbar2.prototype.focusFirstVisibleEle = function(nodes) {
      var element;
      var index = 0;
      while (index < nodes.length) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index++;
      }
      return element;
    };
    Toolbar2.prototype.focusLastVisibleEle = function(nodes) {
      var element;
      var index = nodes.length - 1;
      while (index >= 0) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index--;
      }
      return element;
    };
    Toolbar2.prototype.eleFocus = function(closest2, pos) {
      var sib = Object(closest2)[pos + "ElementSibling"];
      if (sib) {
        var skipEle = this.eleContains(sib);
        if (skipEle) {
          this.eleFocus(sib, pos);
          return;
        }
        this.elementFocus(sib);
      } else if (this.tbarAlign) {
        var elem = Object(closest2.parentElement)[pos + "ElementSibling"];
        if (!isNullOrUndefined(elem) && elem.children.length === 0) {
          elem = Object(elem)[pos + "ElementSibling"];
        }
        if (!isNullOrUndefined(elem) && elem.children.length > 0) {
          if (pos === "next") {
            var el = elem.querySelector("." + CLS_ITEM);
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              el.firstElementChild.focus();
              this.activeEleSwitch(el);
            }
          } else {
            var el = elem.lastElementChild;
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              this.elementFocus(el);
            }
          }
        }
      } else if (!isNullOrUndefined(closest2)) {
        var tbrItems = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_DISABLE3 + "):not(." + CLS_HIDDEN + ")");
        if (pos === "next" && tbrItems) {
          this.elementFocus(tbrItems[0]);
        } else if (pos === "previous" && tbrItems) {
          this.elementFocus(tbrItems[tbrItems.length - 1]);
        }
      }
    };
    Toolbar2.prototype.clickHandler = function(e) {
      var _this = this;
      var trgt = e.target;
      var ele = this.element;
      var isPopupElement = !isNullOrUndefined(closest(trgt, "." + CLS_POPUPCLASS));
      var clsList = trgt.classList;
      var popupNav = closest(trgt, "." + CLS_TBARNAV);
      if (!popupNav) {
        popupNav = trgt;
      }
      if (!ele.children[0].classList.contains("e-hscroll") && !ele.children[0].classList.contains("e-vscroll") && clsList.contains(CLS_TBARNAV)) {
        clsList = trgt.querySelector(".e-icons").classList;
      }
      if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
        this.popupClickHandler(ele, popupNav, CLS_RTL3);
      }
      var itemObj;
      var clst = closest(e.target, "." + CLS_ITEM);
      if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE3)) && !popupNav.classList.contains(CLS_TBARNAV)) {
        return;
      }
      if (clst) {
        var tempItem = this.items[this.tbarEle.indexOf(clst)];
        itemObj = tempItem;
      }
      var eventArgs = { originalEvent: e, item: itemObj };
      var isClickBinded = itemObj && !isNullOrUndefined(itemObj.click) && typeof itemObj.click == "object" ? !isNullOrUndefined(itemObj.click.observers) && itemObj.click.observers.length > 0 : !isNullOrUndefined(itemObj) && !isNullOrUndefined(itemObj.click);
      if (isClickBinded) {
        this.trigger("items[" + this.tbarEle.indexOf(clst) + "].click", eventArgs);
      }
      if (!eventArgs.cancel) {
        this.trigger("clicked", eventArgs, function(clickedArgs) {
          if (!isNullOrUndefined(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === "Popup" && clickedArgs.item && clickedArgs.item.type !== "Input") {
            _this.popObj.hide({ name: "FadeOut", duration: 100 });
          }
        });
      }
    };
    Toolbar2.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL8) {
      var popObj = this.popObj;
      if (isVisible(popObj.element)) {
        popupNav.classList.remove(CLS_TBARNAVACT);
        popObj.hide({ name: "FadeOut", duration: 100 });
      } else {
        if (ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = true;
          popObj.position = { X: "left", Y: "top" };
        }
        if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = false;
          popObj.position = { X: "right", Y: "top" };
        }
        if (this.overflowMode === "Extended") {
          popObj.element.style.minHeight = "0px";
          popObj.width = this.getToolbarPopupWidth(this.element);
        }
        popObj.dataBind();
        popObj.refreshPosition();
        popObj.element.style.top = this.getElementOffsetY() + "px";
        popupNav.classList.add(CLS_TBARNAVACT);
        popObj.show({ name: "FadeIn", duration: 100 });
      }
    };
    Toolbar2.prototype.getToolbarPopupWidth = function(ele) {
      var eleStyles = window.getComputedStyle(ele);
      return parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
    };
    Toolbar2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          _this.refreshOverflow();
        });
      }
    };
    Toolbar2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      if (Browser.info.name !== "msie" || this.height !== "auto" || this.overflowMode === "MultiRow") {
        setStyleAttribute(this.element, { "height": height });
      }
      setStyleAttribute(this.element, { "width": width });
      var ariaAttr = {
        "role": "toolbar",
        "aria-disabled": "false",
        "aria-orientation": !this.isVertical ? "horizontal" : "vertical"
      };
      attributes(this.element, ariaAttr);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Toolbar2.prototype.renderControl = function() {
      var ele = this.element;
      this.trgtEle = ele.children.length > 0 ? ele.querySelector("div") : null;
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
      this.renderItems();
      this.renderLayout();
    };
    Toolbar2.prototype.renderLayout = function() {
      this.renderOverflowMode();
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }
      this.separator();
    };
    Toolbar2.prototype.itemsAlign = function(items, itemEleDom) {
      var innerItem;
      var innerPos;
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      for (var i = 0; i < items.length; i++) {
        innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);
        if (this.tbarEle.indexOf(innerItem) === -1) {
          this.tbarEle.push(innerItem);
        }
        if (!this.tbarAlign) {
          this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);
        }
        innerPos = itemEleDom.querySelector(".e-toolbar-" + items[parseInt(i.toString(), 10)].align.toLowerCase());
        if (innerPos) {
          if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== "Show")) {
            this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + "s").toLowerCase()].push(innerItem);
          }
          innerPos.appendChild(innerItem);
        } else {
          itemEleDom.appendChild(innerItem);
        }
      }
      if (this.isReact) {
        var portals = "portals";
        this.notify("render-react-toolbar-template", this["" + portals]);
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.changeOrientation = function() {
      var ele = this.element;
      if (this.isVertical) {
        ele.classList.remove(CLS_VERTICAL);
        this.isVertical = false;
        if (this.height === "auto" || this.height === "100%") {
          ele.style.height = this.height;
        }
        ele.setAttribute("aria-orientation", "horizontal");
      } else {
        ele.classList.add(CLS_VERTICAL);
        this.isVertical = true;
        ele.setAttribute("aria-orientation", "vertical");
        setStyleAttribute(this.element, { "height": formatUnit(this.height), "width": formatUnit(this.width) });
      }
      this.destroyMode();
      this.refreshOverflow();
    };
    Toolbar2.prototype.initScroll = function(element, innerItems) {
      if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {
        if (this.tbarAlign) {
          this.element.querySelector("." + CLS_ITEMS + " ." + CLS_TBARCENTER).removeAttribute("style");
        }
        if (this.isVertical) {
          this.scrollModule = new VScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        } else {
          this.scrollModule = new HScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        }
        if (this.cssClass) {
          addClass([innerItems[0]], this.cssClass.split(" "));
        }
        var scrollEle = this.scrollModule.element.querySelector("." + CLS_HSCROLLBAR2 + ", .e-vscroll-bar");
        if (scrollEle) {
          scrollEle.removeAttribute("tabindex");
        }
        this.remove(this.scrollModule.element, CLS_TBARPOS);
        setStyleAttribute(this.element, { overflow: "hidden" });
      }
    };
    Toolbar2.prototype.itemWidthCal = function(items) {
      var _this = this;
      var width = 0;
      var style;
      [].slice.call(selectAll("." + CLS_ITEM, items)).forEach(function(el) {
        if (isVisible(el)) {
          style = window.getComputedStyle(el);
          width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
          width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
          width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
        }
      });
      return width;
    };
    Toolbar2.prototype.getScrollCntEle = function(innerItem) {
      var trgClass = this.isVertical ? ".e-vscroll-content" : ".e-hscroll-content";
      return innerItem.querySelector(trgClass);
    };
    Toolbar2.prototype.checkOverflow = function(element, innerItem) {
      if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) {
        return false;
      }
      var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;
      var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;
      if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
        itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
      }
      var popNav = element.querySelector("." + CLS_TBARNAV);
      var scrollNav = element.querySelector("." + CLS_TBARSCRLNAV);
      var navEleWidth = 0;
      if (popNav) {
        navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
      } else if (scrollNav) {
        navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
      }
      if (itemWidth > eleWidth - navEleWidth) {
        return true;
      } else {
        return false;
      }
    };
    Toolbar2.prototype.refreshOverflow = function() {
      this.resize();
    };
    Toolbar2.prototype.toolbarAlign = function(innerItems) {
      if (this.tbarAlign) {
        this.add(innerItems, CLS_TBARPOS);
        this.itemPositioning();
      }
    };
    Toolbar2.prototype.renderOverflowMode = function() {
      var ele = this.element;
      var innerItems = ele.querySelector("." + CLS_ITEMS);
      var priorityCheck = this.popupPriCount > 0;
      if (ele && ele.children.length > 0) {
        this.offsetWid = ele.offsetWidth;
        this.remove(this.element, "e-toolpop");
        if (Browser.info.name === "msie" && this.height === "auto") {
          ele.style.height = "";
        }
        switch (this.overflowMode) {
          case "Scrollable":
            if (isNullOrUndefined(this.scrollModule)) {
              this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
            }
            break;
          case "Popup":
            this.add(this.element, "e-toolpop");
            if (this.tbarAlign) {
              this.removePositioning();
            }
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
            break;
          case "MultiRow":
            this.add(innerItems, CLS_MULTIROW);
            if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
              this.removePositioning();
              this.add(innerItems, CLS_MULTIROWPOS);
            }
            if (ele.style.overflow === "hidden") {
              ele.style.overflow = "";
            }
            if (Browser.info.name === "msie" || ele.style.height !== "auto") {
              ele.style.height = "auto";
            }
            break;
          case "Extended":
            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              if (this.tbarAlign) {
                this.removePositioning();
              }
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
        }
      }
    };
    Toolbar2.prototype.setOverflowAttributes = function(ele) {
      this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele)));
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-haspopup": "true",
        "aria-label": "overflow"
      };
      attributes(this.element.querySelector("." + CLS_TBARNAV), ariaAttr);
    };
    Toolbar2.prototype.separator = function() {
      var element = this.element;
      var eleItem = [].slice.call(element.querySelectorAll("." + CLS_SEPARATOR));
      var multiVar = element.querySelector("." + CLS_MULTIROW_SEPARATOR);
      var extendVar = element.querySelector("." + CLS_EXTENDABLE_SEPARATOR);
      var eleInlineItem = this.overflowMode === "MultiRow" ? multiVar : extendVar;
      if (eleInlineItem !== null) {
        if (this.overflowMode === "MultiRow") {
          eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === "Extended") {
          eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
        }
      }
      for (var i = 0; i <= eleItem.length - 1; i++) {
        if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {
          if (this.overflowMode === "MultiRow") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);
          } else if (this.overflowMode === "Extended") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);
          }
        }
      }
    };
    Toolbar2.prototype.createPopupEle = function(ele, innerEle) {
      var innerNav = ele.querySelector("." + CLS_TBARNAV);
      var vertical = this.isVertical;
      if (!innerNav) {
        this.createPopupIcon(ele);
      }
      innerNav = ele.querySelector("." + CLS_TBARNAV);
      var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
      var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
      this.element.classList.remove("e-rtl");
      setStyleAttribute(this.element, { direction: "initial" });
      this.checkPriority(ele, innerEle, eleWidth, true);
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      this.element.style.removeProperty("direction");
      this.createPopup();
    };
    Toolbar2.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
      var element = tbarObj.element;
      var poppedEle = [].slice.call(selectAll("." + CLS_POPUP, element.querySelector("." + CLS_ITEMS)));
      var nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
      var nodeIndex = 0;
      var nodePri = 0;
      poppedEle.forEach(function(el, index) {
        nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
        if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
          if (tbarObj.tbResize && nodes.length > index) {
            ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);
            ++nodePri;
          } else {
            ele.insertBefore(el, ele.children[nodes.length]);
            ++nodePri;
          }
        } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (el.classList.contains(CLS_POPOVERFLOW)) {
          popupPri.push(el);
        } else if (tbarObj.tbResize) {
          ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
          ++nodeIndex;
        } else {
          ele.appendChild(el);
        }
        if (el.classList.contains(CLS_SEPARATOR)) {
          setStyleAttribute(el, { display: "", height: sepHeight + "px" });
        } else {
          setStyleAttribute(el, { display: "", height: eleHeight + "px" });
        }
      });
      popupPri.forEach(function(el) {
        ele.appendChild(el);
      });
      var tbarEle = selectAll("." + CLS_ITEM, element.querySelector("." + CLS_ITEMS));
      for (var i = tbarEle.length - 1; i >= 0; i--) {
        var tbarElement = tbarEle[parseInt(i.toString(), 10)];
        if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== "Extended") {
          setStyleAttribute(tbarElement, { display: "none" });
        } else {
          break;
        }
      }
    };
    Toolbar2.prototype.createPopup = function() {
      var element = this.element;
      var sepHeight;
      var sepItem;
      if (this.overflowMode === "Extended") {
        sepItem = element.querySelector("." + CLS_SEPARATOR);
        sepHeight = element.style.height === "auto" || element.style.height === "" ? null : sepItem && sepItem.offsetHeight;
      }
      var eleItem = element.querySelector("." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_POPUP + ")");
      var eleHeight = element.style.height === "auto" || element.style.height === "" ? null : eleItem && eleItem.offsetHeight;
      var ele;
      var popupPri = [];
      if (select("#" + element.id + "_popup." + CLS_POPUPCLASS, element)) {
        ele = select("#" + element.id + "_popup." + CLS_POPUPCLASS, element);
      } else {
        var extendEle = this.createElement("div", {
          id: element.id + "_popup",
          className: CLS_POPUPCLASS + " " + CLS_EXTENDABLECLASS
        });
        var popupEle = this.createElement("div", { id: element.id + "_popup", className: CLS_POPUPCLASS });
        ele = this.overflowMode === "Extended" ? extendEle : popupEle;
      }
      this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
      this.popupInit(element, ele);
    };
    Toolbar2.prototype.getElementOffsetY = function() {
      return this.overflowMode === "Extended" && window.getComputedStyle(this.element).getPropertyValue("box-sizing") === "border-box" ? this.element.clientHeight : this.element.offsetHeight;
    };
    Toolbar2.prototype.popupInit = function(element, ele) {
      if (!this.popObj) {
        element.appendChild(ele);
        if (this.cssClass) {
          addClass([ele], this.cssClass.split(" "));
        }
        setStyleAttribute(this.element, { overflow: "" });
        var popup = new Popup(null, {
          relateTo: this.element,
          offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
          enableRtl: this.enableRtl,
          open: this.popupOpen.bind(this),
          close: this.popupClose.bind(this),
          collision: { Y: this.enableCollision ? "flip" : "none" },
          position: this.enableRtl ? { X: "left", Y: "top" } : { X: "right", Y: "top" }
        });
        if (this.overflowMode === "Extended") {
          popup.width = this.getToolbarPopupWidth(this.element);
          popup.offsetX = 0;
        }
        popup.appendTo(ele);
        EventHandler.add(document, "scroll", this.docEvent.bind(this));
        EventHandler.add(document, "click ", this.docEvent.bind(this));
        if (this.overflowMode !== "Extended") {
          popup.element.style.maxHeight = popup.element.offsetHeight + "px";
        }
        if (this.isVertical) {
          popup.element.style.visibility = "hidden";
        }
        if (this.isExtendedOpen) {
          var popupNav = this.element.querySelector("." + CLS_TBARNAV);
          popupNav.classList.add(CLS_TBARNAVACT);
          classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
          this.element.querySelector("." + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
        } else {
          popup.hide();
        }
        this.popObj = popup;
      } else if (this.overflowMode !== "Extended") {
        var popupEle = this.popObj.element;
        setStyleAttribute(popupEle, { maxHeight: "", display: "block" });
        setStyleAttribute(popupEle, { maxHeight: popupEle.offsetHeight + "px", display: "" });
      }
    };
    Toolbar2.prototype.tbarPopupHandler = function(isOpen) {
      if (this.overflowMode === "Extended") {
        if (isOpen) {
          this.add(this.element, CLS_EXTENDEDPOPOPEN);
        } else {
          this.remove(this.element, CLS_EXTENDEDPOPOPEN);
        }
      }
    };
    Toolbar2.prototype.popupOpen = function(e) {
      var popObj = this.popObj;
      if (!this.isVertical) {
        popObj.offsetY = this.getElementOffsetY();
        popObj.dataBind();
      }
      var popupEle = this.popObj.element;
      var toolEle = this.popObj.element.parentElement;
      var popupNav = toolEle.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "true");
      if (this.overflowMode === "Extended") {
        popObj.element.style.minHeight = "";
      } else {
        setStyleAttribute(popObj.element, { height: "auto", maxHeight: "" });
        popObj.element.style.maxHeight = popObj.element.offsetHeight + "px";
      }
      var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.add(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
      this.tbarPopupHandler(true);
      var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
      if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
        popObj.height = overflowHeight + "px";
        for (var i = 0; i <= popupEle.childElementCount; i++) {
          var ele = popupEle.children[parseInt(i.toString(), 10)];
          if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
            overflowHeight = ele.offsetTop;
            break;
          }
        }
        if (this.overflowMode !== "Extended") {
          setStyleAttribute(popObj.element, { maxHeight: overflowHeight + "px" });
        }
      } else if (this.isVertical && this.overflowMode !== "Extended") {
        var tbEleData = this.element.getBoundingClientRect();
        setStyleAttribute(popObj.element, { maxHeight: tbEleData.top + this.element.offsetHeight + "px", bottom: 0, visibility: "" });
      }
      if (popObj) {
        var popupOffset = popupEle.getBoundingClientRect();
        if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {
          popObj.collision = { Y: "none" };
          popObj.dataBind();
        }
        popObj.refreshPosition();
      }
    };
    Toolbar2.prototype.popupClose = function(e) {
      var element = this.element;
      var popupNav = element.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "false");
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.remove(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
      this.tbarPopupHandler(false);
    };
    Toolbar2.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
      var popPriority = this.popupPriCount > 0;
      var len = inEle.length;
      var eleWid = eleWidth;
      var eleOffset;
      var checkoffset;
      var sepCheck = 0;
      var itemCount = 0;
      var itemPopCount = 0;
      var checkClass = function(ele2, val) {
        var rVal = false;
        val.forEach(function(cls) {
          if (ele2.classList.contains(cls)) {
            rVal = true;
          }
        });
        return rVal;
      };
      for (var i = len - 1; i >= 0; i--) {
        var mrgn = void 0;
        var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);
        if (this.isVertical) {
          mrgn = parseFloat(compuStyle.marginTop);
          mrgn += parseFloat(compuStyle.marginBottom);
        } else {
          mrgn = parseFloat(compuStyle.marginRight);
          mrgn += parseFloat(compuStyle.marginLeft);
        }
        var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];
        if (fstEleCheck) {
          this.tbarEleMrgn = mrgn;
        }
        eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;
        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;
        if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {
          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
          if (this.isVertical) {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
          } else {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
          }
          itemPopCount++;
        }
        if (this.isVertical) {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;
        } else {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;
        }
        if (checkoffset) {
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {
            if (this.overflowMode === "Extended") {
              var sepEle = inEle[parseInt(i.toString(), 10)];
              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
                itemPopCount++;
              }
              itemCount++;
            } else if (this.overflowMode === "Popup") {
              if (sepCheck > 0 && itemCount === itemPopCount) {
                var sepEle = inEle[i + itemCount + (sepCheck - 1)];
                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  setStyleAttribute(sepEle, { display: "none" });
                }
              }
              sepCheck++;
              itemCount = 0;
              itemPopCount = 0;
            }
          } else {
            itemCount++;
          }
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
            inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
            if (this.isVertical) {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
            } else {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
            }
            itemPopCount++;
          } else {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          }
        }
      }
      if (pre) {
        var popedEle = selectAll("." + CLS_ITEM + ":not(." + CLS_POPUP + ")", this.element);
        this.checkPriority(ele, popedEle, eleWid, false);
      }
    };
    Toolbar2.prototype.createPopupIcon = function(element) {
      var id = element.id.concat("_nav");
      var className = "e-" + element.id.concat("_nav " + CLS_POPUPNAV);
      className = this.overflowMode === "Extended" ? className + " " + CLS_EXTENDPOPUP : className;
      var nav = this.createElement("div", { id, className });
      if (Browser.info.name === "msie" || Browser.info.name === "edge") {
        nav.classList.add("e-ie-align");
      }
      var navItem = this.createElement("div", { className: CLS_POPUPDOWN + " e-icons" });
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      nav.setAttribute("role", "button");
      element.appendChild(nav);
    };
    Toolbar2.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig, eleStyles) {
      var ignoreCount = ig;
      var popEle = this.popObj.element;
      var query = "." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_TBAROVERFLOW + ")";
      var priEleCnt = selectAll("." + CLS_POPUP + ":not(." + CLS_TBAROVERFLOW + ")", popEle).length;
      var checkClass = function(ele, val) {
        return ele.classList.contains(val);
      };
      if (selectAll(query, inEle).length === 0) {
        var eleSep = inEle.children[indx - (indx - sepPri) - 1];
        var ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);
        if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {
          eleSep.style.display = "unset";
          var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
          var prevSep = eleSep.previousElementSibling;
          if (elWid + eleSepWidth < wid || des) {
            inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            if (!isNullOrUndefined(prevSep)) {
              prevSep.style.display = "";
            }
          } else {
            setStyleAttribute(el, eleStyles);
            if (prevSep.classList.contains(CLS_SEPARATOR)) {
              prevSep.style.display = "none";
            }
          }
          eleSep.style.display = "";
        } else {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
        }
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
      }
    };
    Toolbar2.prototype.popupRefresh = function(popupEle, destroy2) {
      var _this = this;
      var ele = this.element;
      var isVer = this.isVertical;
      var innerEle = ele.querySelector("." + CLS_ITEMS);
      var popNav = ele.querySelector("." + CLS_TBARNAV);
      if (isNullOrUndefined(popNav)) {
        return;
      }
      innerEle.removeAttribute("style");
      popupEle.style.display = "block";
      var dimension;
      if (isVer) {
        dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
      } else {
        dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
      }
      var popupEleWidth = 0;
      [].slice.call(popupEle.children).forEach(function(el) {
        popupEleWidth += _this.popupEleWidth(el);
        setStyleAttribute(el, { "position": "" });
      });
      if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
        destroy2 = true;
      }
      this.popupEleRefresh(dimension, popupEle, destroy2);
      popupEle.style.display = "";
      if (popupEle.children.length === 0 && popNav && this.popObj) {
        detach(popNav);
        popNav = null;
        this.popObj.destroy();
        detach(this.popObj.element);
        this.popObj = null;
      }
    };
    Toolbar2.prototype.ignoreEleFetch = function(index, innerEle) {
      var ignoreEle = [].slice.call(innerEle.querySelectorAll("." + CLS_TBARIGNORE));
      var ignoreInx = [];
      var count = 0;
      if (ignoreEle.length > 0) {
        ignoreEle.forEach(function(ele) {
          ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
        });
      } else {
        return 0;
      }
      ignoreInx.forEach(function(val) {
        if (val <= index) {
          count++;
        }
      });
      return count;
    };
    Toolbar2.prototype.checkPopupRefresh = function(root, popEle) {
      popEle.style.display = "block";
      var elWid = this.popupEleWidth(popEle.firstElementChild);
      popEle.firstElementChild.style.removeProperty("Position");
      var tbarWidth = root.offsetWidth - root.querySelector("." + CLS_TBARNAV).offsetWidth;
      var tbarItemsWid = root.querySelector("." + CLS_ITEMS).offsetWidth;
      popEle.style.removeProperty("display");
      if (tbarWidth > elWid + tbarItemsWid) {
        return true;
      }
      return false;
    };
    Toolbar2.prototype.popupEleWidth = function(el) {
      el.style.position = "absolute";
      var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
      var btnText = el.querySelector("." + CLS_TBARBTNTEXT);
      if (el.classList.contains("e-tbtn-align") || el.classList.contains(CLS_TBARTEXT)) {
        var btn = el.children[0];
        if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {
          btnText.style.display = "none";
        } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
          btnText.style.display = "block";
        }
        btn.style.minWidth = "0%";
        elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
        btn.style.minWidth = "";
        btn.style.minHeight = "";
        if (!isNullOrUndefined(btnText)) {
          btnText.style.display = "";
        }
      }
      return elWidth;
    };
    Toolbar2.prototype.popupEleRefresh = function(width, popupEle, destroy2) {
      var popPriority = this.popupPriCount > 0;
      var eleSplice = this.tbarEle;
      var priEleCnt;
      var index;
      var innerEle = this.element.querySelector("." + CLS_ITEMS);
      var ignoreCount = 0;
      var _loop_1 = function(el2) {
        if (el2.classList.contains(CLS_POPPRI) && popPriority && !destroy2) {
          return "continue";
        }
        var elWidth = this_1.popupEleWidth(el2);
        if (el2 === this_1.tbarEle[0]) {
          elWidth += this_1.tbarEleMrgn;
        }
        el2.style.position = "";
        if (elWidth < width || destroy2) {
          var inlineStyles = {
            minWidth: el2.style.minWidth,
            height: el2.style.height,
            minHeight: el2.style.minHeight
          };
          setStyleAttribute(el2, { minWidth: "", height: "", minHeight: "" });
          if (!el2.classList.contains(CLS_POPOVERFLOW)) {
            el2.classList.remove(CLS_POPUP);
          }
          index = this_1.tbarEle.indexOf(el2);
          if (this_1.tbarAlign) {
            var pos = this_1.items[parseInt(index.toString(), 10)].align;
            index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el2);
            eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()];
            innerEle = this_1.element.querySelector("." + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
          }
          var sepBeforePri_1 = 0;
          if (this_1.overflowMode !== "Extended") {
            eleSplice.slice(0, index).forEach(function(el3) {
              if (el3.classList.contains(CLS_TBAROVERFLOW) || el3.classList.contains(CLS_SEPARATOR)) {
                if (el3.classList.contains(CLS_SEPARATOR)) {
                  el3.style.display = "";
                  width -= el3.offsetWidth;
                }
                sepBeforePri_1++;
              }
            });
          }
          ignoreCount = this_1.ignoreEleFetch(index, innerEle);
          if (el2.classList.contains(CLS_TBAROVERFLOW)) {
            this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el2, destroy2, elWidth, width, ignoreCount, inlineStyles);
            width -= el2.offsetWidth;
          } else if (index === 0) {
            innerEle.insertBefore(el2, innerEle.firstChild);
            width -= el2.offsetWidth;
          } else {
            priEleCnt = selectAll("." + CLS_TBAROVERFLOW, this_1.popObj.element).length;
            innerEle.insertBefore(el2, innerEle.children[index + ignoreCount - priEleCnt]);
            width -= el2.offsetWidth;
          }
          el2.style.height = "";
        } else {
          return "break";
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
        var el = _a[_i];
        var state_1 = _loop_1(el);
        if (state_1 === "break")
          break;
      }
      var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);
      if (checkOverflow && !destroy2) {
        this.renderOverflowMode();
      }
    };
    Toolbar2.prototype.removePositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      this.remove(item, CLS_TBARPOS);
      var innerItem = [].slice.call(item.childNodes);
      innerItem[1].removeAttribute("style");
      innerItem[2].removeAttribute("style");
    };
    Toolbar2.prototype.refreshPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      this.add(item, CLS_TBARPOS);
      this.itemPositioning();
    };
    Toolbar2.prototype.itemPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      var margin;
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      var popupNav = this.element.querySelector("." + CLS_TBARNAV);
      var innerItem;
      if (this.scrollModule) {
        var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
        innerItem = [].slice.call(item.querySelector("." + trgClass).children);
      } else {
        innerItem = [].slice.call(item.childNodes);
      }
      if (this.isVertical) {
        margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
      } else {
        margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
      }
      var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
      if (popupNav) {
        tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
        var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + "px";
        innerItem[2].removeAttribute("style");
        if (this.isVertical) {
          if (this.enableRtl) {
            innerItem[2].style.top = popWid;
          } else {
            innerItem[2].style.bottom = popWid;
          }
        } else {
          if (this.enableRtl) {
            innerItem[2].style.left = popWid;
          } else {
            innerItem[2].style.right = popWid;
          }
        }
      }
      if (tbarWid <= margin) {
        return;
      }
      var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
      innerItem[1].removeAttribute("style");
      var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + "px";
      if (this.isVertical) {
        if (this.enableRtl) {
          innerItem[1].style.marginBottom = mrgn;
        } else {
          innerItem[1].style.marginTop = mrgn;
        }
      } else {
        if (this.enableRtl) {
          innerItem[1].style.marginRight = mrgn;
        } else {
          innerItem[1].style.marginLeft = mrgn;
        }
      }
    };
    Toolbar2.prototype.tbarItemAlign = function(item, itemEle, pos) {
      var _this = this;
      if (item.showAlwaysInPopup && item.overflow !== "Show") {
        return;
      }
      var alignDiv = [];
      alignDiv.push(this.createElement("div", { className: CLS_TBARLEFT }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARCENTER }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARRIGHT }));
      if (pos === 0 && item.align !== "Left") {
        alignDiv.forEach(function(ele) {
          itemEle.appendChild(ele);
        });
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      } else if (item.align !== "Left") {
        var alignEle = itemEle.childNodes;
        var leftAlign_1 = alignDiv[0];
        [].slice.call(alignEle).forEach(function(el) {
          _this.tbarAlgEle.lefts.push(el);
          leftAlign_1.appendChild(el);
        });
        itemEle.appendChild(leftAlign_1);
        itemEle.appendChild(alignDiv[1]);
        itemEle.appendChild(alignDiv[2]);
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      }
    };
    Toolbar2.prototype.ctrlTemplate = function() {
      var _this = this;
      this.ctrlTem = this.trgtEle.cloneNode(true);
      this.add(this.trgtEle, CLS_ITEMS);
      this.tbarEle = [];
      var innerEle = [].slice.call(this.trgtEle.children);
      innerEle.forEach(function(ele) {
        if (ele.tagName === "DIV") {
          _this.tbarEle.push(ele);
          if (!isNullOrUndefined(ele.firstElementChild)) {
            ele.firstElementChild.setAttribute("aria-disabled", "false");
          }
          _this.add(ele, CLS_ITEM);
        }
      });
    };
    Toolbar2.prototype.renderItems = function() {
      var ele = this.element;
      var items = this.items;
      if (this.trgtEle != null) {
        this.ctrlTemplate();
      } else if (ele && items.length > 0) {
        var itemEleDom = void 0;
        if (ele && ele.children.length > 0) {
          itemEleDom = ele.querySelector("." + CLS_ITEMS);
        }
        if (!itemEleDom) {
          itemEleDom = this.createElement("div", { className: CLS_ITEMS });
        }
        this.itemsAlign(items, itemEleDom);
        ele.appendChild(itemEleDom);
      }
    };
    Toolbar2.prototype.setAttr = function(attr, element) {
      var key = Object.keys(attr);
      var keyVal;
      for (var i = 0; i < key.length; i++) {
        keyVal = key[parseInt(i.toString(), 10)];
        if (keyVal === "class") {
          this.add(element, attr["" + keyVal]);
        } else {
          element.setAttribute(keyVal, attr["" + keyVal]);
        }
      }
    };
    Toolbar2.prototype.enableItems = function(items, isEnable) {
      var elements = items;
      var len = elements.length;
      var ele;
      if (isNullOrUndefined(isEnable)) {
        isEnable = true;
      }
      var enable = function(isEnable2, ele2) {
        if (isEnable2) {
          ele2.classList.remove(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "false");
          }
        } else {
          ele2.classList.add(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "true");
          }
        }
      };
      if (!isNullOrUndefined(len) && len >= 1) {
        for (var a = 0, element = [].slice.call(elements); a < len; a++) {
          var itemElement = element[parseInt(a.toString(), 10)];
          if (typeof itemElement === "number") {
            ele = this.getElementByIndex(itemElement);
            if (isNullOrUndefined(ele)) {
              return;
            } else {
              elements[parseInt(a.toString(), 10)] = ele;
            }
          } else {
            ele = itemElement;
          }
          enable(isEnable, ele);
        }
        if (isEnable) {
          removeClass(elements, CLS_DISABLE3);
        } else {
          addClass(elements, CLS_DISABLE3);
        }
      } else {
        if (typeof elements === "number") {
          ele = this.getElementByIndex(elements);
          if (isNullOrUndefined(ele)) {
            return;
          }
        } else {
          ele = items;
        }
        enable(isEnable, ele);
      }
    };
    Toolbar2.prototype.getElementByIndex = function(index) {
      if (this.tbarEle[parseInt(index.toString(), 10)]) {
        return this.tbarEle[parseInt(index.toString(), 10)];
      }
      return null;
    };
    Toolbar2.prototype.addItems = function(items, index) {
      var innerItems;
      this.extendedOpen();
      var itemsDiv = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(itemsDiv)) {
        this.itemsRerender(items);
        return;
      }
      var innerEle;
      var itemAgn = "Left";
      if (isNullOrUndefined(index)) {
        index = 0;
      }
      items.forEach(function(e) {
        if (!isNullOrUndefined(e.align) && e.align !== "Left" && itemAgn === "Left") {
          itemAgn = e.align;
        }
      });
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (isNullOrUndefined(item.type)) {
          item.type = "Button";
        }
        innerItems = selectAll("." + CLS_ITEM, this.element);
        item.align = itemAgn;
        innerEle = this.renderSubComponent(item, index);
        if (this.tbarEle.length >= index && innerItems.length >= 0) {
          if (isNullOrUndefined(this.scrollModule)) {
            this.destroyMode();
          }
          var algIndex = item.align[0] === "L" ? 0 : item.align[0] === "C" ? 1 : 2;
          var ele = void 0;
          if (!this.tbarAlign && itemAgn !== "Left") {
            this.tbarItemAlign(item, itemsDiv, 1);
            this.tbarAlign = true;
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.appendChild(innerEle);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle);
            this.refreshPositioning();
          } else if (this.tbarAlign) {
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle);
            this.refreshPositioning();
          } else if (innerItems.length === 0) {
            innerItems = selectAll("." + CLS_ITEMS, this.element);
            innerItems[0].appendChild(innerEle);
          } else {
            innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);
          }
          this.items.splice(index, 0, item);
          if (item.template) {
            this.tbarEle.splice(this.tbarEle.length - 1, 1);
          }
          this.tbarEle.splice(index, 0, innerEle);
          index++;
          this.offsetWid = itemsDiv.offsetWidth;
        }
      }
      itemsDiv.style.width = "";
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.removeItems = function(args) {
      var elements = args;
      var index;
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (typeof elements === "number") {
        index = parseInt(args.toString(), 10);
        this.removeItemByIndex(index, innerItems);
      } else {
        if (elements && elements.length > 1) {
          for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
            var ele = _a[_i];
            index = this.tbarEle.indexOf(ele);
            this.removeItemByIndex(index, innerItems);
            innerItems = selectAll("." + CLS_ITEM, this.element);
          }
        } else {
          var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
          index = innerItems.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
        }
      }
      this.resize();
    };
    Toolbar2.prototype.removeItemByIndex = function(index, innerItems) {
      if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {
        var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);
        if (this.tbarAlign) {
          var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);
          this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);
        }
        if (this.isReact) {
          this.clearToolbarTemplate(innerItems[parseInt(index.toString(), 10)]);
        }
        var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector(".e-control.e-btn");
        if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {
          btnItem.ej2_instances[0].destroy();
        }
        detach(innerItems[parseInt(index.toString(), 10)]);
        this.items.splice(eleIdx, 1);
        this.tbarEle.splice(eleIdx, 1);
      }
    };
    Toolbar2.prototype.templateRender = function(templateProp, innerEle, item, index) {
      var itemType = item.type;
      var eleObj = templateProp;
      var isComponent;
      if (typeof templateProp === "object") {
        isComponent = typeof eleObj.appendTo === "function";
      }
      if (typeof templateProp === "string" || !isComponent) {
        var templateFn = void 0;
        var val = templateProp;
        var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
        val = typeof templateProp === "string" ? templateProp.trim() : templateProp;
        try {
          if (typeof templateProp === "object" && !isNullOrUndefined(templateProp.tagName)) {
            innerEle.appendChild(templateProp);
          } else if (typeof templateProp === "string" && regEx.test(val)) {
            innerEle.innerHTML = val;
          } else if (document.querySelectorAll(val).length) {
            var ele = document.querySelector(val);
            var tempStr = ele.outerHTML.trim();
            innerEle.appendChild(ele);
            ele.style.display = "";
            if (!isNullOrUndefined(tempStr)) {
              this.tempId.push(val);
            }
          } else {
            templateFn = compile(val);
          }
        } catch (e) {
          templateFn = compile(val);
        }
        var tempArray = void 0;
        if (!isNullOrUndefined(templateFn)) {
          var toolbarTemplateID = this.element.id + index + "_template";
          tempArray = templateFn({}, this, "template", toolbarTemplateID, this.isStringTemplate, void 0, void 0, this.root);
        }
        if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {
          [].slice.call(tempArray).forEach(function(ele2) {
            if (!isNullOrUndefined(ele2.tagName)) {
              ele2.style.display = "";
            }
            innerEle.appendChild(ele2);
          });
        }
      } else if (itemType === "Input") {
        var ele = this.createElement("input");
        if (item.id) {
          ele.id = item.id;
        } else {
          ele.id = getUniqueID("tbr-ipt");
        }
        innerEle.appendChild(ele);
        eleObj.appendTo(ele);
      }
      this.add(innerEle, CLS_TEMPLATE);
      var firstChild = innerEle.firstElementChild;
      if (!isNullOrUndefined(firstChild)) {
        firstChild.setAttribute("tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
        firstChild.setAttribute("data-tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
      }
      this.tbarEle.push(innerEle);
    };
    Toolbar2.prototype.buttonRendering = function(item, innerEle) {
      var dom = this.createElement("button", { className: CLS_TBARBTN });
      dom.setAttribute("type", "button");
      var textStr = item.text;
      var iconCss;
      var iconPos;
      if (item.id) {
        dom.id = item.id;
      } else {
        dom.id = getUniqueID("e-tbr-btn");
      }
      var btnTxt = this.createElement("span", { className: "e-tbar-btn-text" });
      if (textStr) {
        btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;
        dom.appendChild(btnTxt);
        dom.classList.add("e-tbtn-txt");
      } else {
        this.add(innerEle, "e-tbtn-align");
      }
      if (item.prefixIcon || item.suffixIcon) {
        if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
          iconCss = item.prefixIcon + " e-icons";
          iconPos = "Left";
        } else {
          iconCss = item.suffixIcon + " e-icons";
          iconPos = "Right";
        }
      }
      var btnObj = new Button({ iconCss, iconPosition: iconPos });
      btnObj.createElement = this.createElement;
      btnObj.appendTo(dom);
      if (item.width) {
        setStyleAttribute(dom, { "width": formatUnit(item.width) });
      }
      return dom;
    };
    Toolbar2.prototype.renderSubComponent = function(item, index) {
      var dom;
      var innerEle = this.createElement("div", { className: CLS_ITEM });
      var tempDom = this.createElement("div", {
        innerHTML: this.enableHtmlSanitizer && !isNullOrUndefined(item.tooltipText) ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText
      });
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      if (item.htmlAttributes) {
        this.setAttr(item.htmlAttributes, innerEle);
      }
      if (item.tooltipText) {
        innerEle.setAttribute("title", tempDom.textContent);
      }
      if (item.cssClass) {
        innerEle.className = innerEle.className + " " + item.cssClass;
      }
      if (item.template) {
        this.templateRender(item.template, innerEle, item, index);
      } else {
        switch (item.type) {
          case "Button":
            dom = this.buttonRendering(item, innerEle);
            dom.setAttribute("tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("data-tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("aria-label", item.text || item.tooltipText);
            dom.setAttribute("aria-disabled", "false");
            innerEle.appendChild(dom);
            innerEle.addEventListener("click", this.itemClick.bind(this));
            break;
          case "Separator":
            this.add(innerEle, CLS_SEPARATOR);
            break;
        }
      }
      if (item.showTextOn) {
        var sTxt = item.showTextOn;
        if (sTxt === "Toolbar") {
          this.add(innerEle, CLS_POPUPTEXT);
          this.add(innerEle, "e-tbtn-align");
        } else if (sTxt === "Overflow") {
          this.add(innerEle, CLS_TBARTEXT);
        }
      }
      if (item.overflow) {
        var overflow = item.overflow;
        if (overflow === "Show") {
          this.add(innerEle, CLS_TBAROVERFLOW);
        } else if (overflow === "Hide") {
          if (!innerEle.classList.contains(CLS_SEPARATOR)) {
            this.add(innerEle, CLS_POPOVERFLOW);
          }
        }
      }
      if (item.overflow !== "Show" && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
        this.add(innerEle, CLS_POPPRI);
        this.popupPriCount++;
      }
      if (item.disabled) {
        this.add(innerEle, CLS_DISABLE3);
      }
      if (item.visible === false) {
        this.add(innerEle, CLS_HIDDEN);
      }
      return innerEle;
    };
    Toolbar2.prototype.getDataTabindex = function(ele) {
      return isNullOrUndefined(ele.getAttribute("data-tabindex")) ? "-1" : ele.getAttribute("data-tabindex");
    };
    Toolbar2.prototype.itemClick = function(e) {
      this.activeEleSwitch(e.currentTarget);
    };
    Toolbar2.prototype.activeEleSwitch = function(ele) {
      this.activeEleRemove(ele.firstElementChild);
      this.activeEle.focus();
    };
    Toolbar2.prototype.activeEleRemove = function(curEle) {
      var previousEle = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(this.activeEle)) {
        this.activeEle.setAttribute("tabindex", this.getDataTabindex(this.activeEle));
        if (previousEle) {
          previousEle.removeAttribute("tabindex");
        }
        previousEle = this.activeEle;
      }
      this.activeEle = curEle;
      if (this.getDataTabindex(this.activeEle) === "-1") {
        if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
          if (!isNullOrUndefined(this.element.querySelector(".e-hor-nav")) && this.element.querySelector(".e-hor-nav").classList.contains("e-nav-active")) {
            this.updateTabIndex("0");
            var tabindexValue = this.getDataTabindex(previousEle) === "-1" ? "0" : this.getDataTabindex(previousEle);
            previousEle.setAttribute("tabindex", tabindexValue);
          } else {
            this.updateTabIndex("-1");
          }
          curEle.removeAttribute("tabindex");
        } else {
          var tabIndex = parseInt(this.getDataTabindex(this.activeEle), 10) + 1;
          this.activeEle.setAttribute("tabindex", tabIndex.toString());
        }
      }
    };
    Toolbar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toolbar2.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar2.prototype.itemsRerender = function(newProp) {
      this.items = this.tbarItemsCol;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      this.destroyMode();
      this.destroyItems();
      this.items = newProp;
      this.tbarItemsCol = this.items;
      this.renderItems();
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.resize = function() {
      var ele = this.element;
      this.tbResize = true;
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.overflowMode === "Popup") {
        this.popObj.hide();
      }
      var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
      if (!checkOverflow) {
        this.destroyScroll();
        var multirowele = ele.querySelector("." + CLS_ITEMS);
        if (!isNullOrUndefined(multirowele)) {
          this.remove(multirowele, CLS_MULTIROWPOS);
          if (this.tbarAlign) {
            this.add(multirowele, CLS_TBARPOS);
          }
        }
      }
      if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
        return;
      }
      if (this.offsetWid > ele.offsetWidth || checkOverflow) {
        this.renderOverflowMode();
      }
      if (this.popObj) {
        if (this.overflowMode === "Extended") {
          this.popObj.width = this.getToolbarPopupWidth(this.element);
        }
        if (this.tbarAlign) {
          this.removePositioning();
        }
        this.popupRefresh(this.popObj.element, false);
        if (this.tbarAlign) {
          this.refreshPositioning();
        }
      }
      if (this.element.querySelector("." + CLS_HSCROLLBAR2)) {
        this.scrollStep = this.element.querySelector("." + CLS_HSCROLLBAR2).offsetWidth;
      }
      this.offsetWid = ele.offsetWidth;
      this.tbResize = false;
      this.separator();
    };
    Toolbar2.prototype.orientationChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.resize();
      }, 500);
    };
    Toolbar2.prototype.extendedOpen = function() {
      var sib = this.element.querySelector("." + CLS_EXTENDABLECLASS);
      if (this.overflowMode === "Extended" && sib) {
        this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
      }
    };
    Toolbar2.prototype.updateHideEleTabIndex = function(ele, isHidden, isElement, eleIndex, innerItems) {
      if (isElement) {
        eleIndex = innerItems.indexOf(ele);
      }
      var nextEle = innerItems[++eleIndex];
      while (nextEle) {
        var skipEle = this.eleContains(nextEle);
        if (!skipEle) {
          var dataTabIndex = nextEle.firstElementChild.getAttribute("data-tabindex");
          if (isHidden && dataTabIndex === "-1") {
            nextEle.firstElementChild.setAttribute("tabindex", "0");
          } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute("tabindex")) {
            nextEle.firstElementChild.setAttribute("tabindex", dataTabIndex);
          }
          break;
        }
        nextEle = innerItems[++eleIndex];
      }
    };
    Toolbar2.prototype.clearToolbarTemplate = function(templateEle) {
      if (this.registeredTemplate && this.registeredTemplate["template"]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["template"].length; index++) {
          var registeredItem = registeredTemplates["template"][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], [registeredTemplates["template"][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], index);
            break;
          }
        }
      }
    };
    Toolbar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var tEle = this.element;
      this.extendedOpen();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProb = Object.keys(newProp.items);
              for (var i = 0; i < changedProb.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];
                var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])["" + property];
                if (this.tbarAlign || property === "align") {
                  this.refresh();
                  this.trigger("created");
                  break;
                }
                var popupPriCheck = property === "showAlwaysInPopup" && !newProperty;
                var booleanCheck = property === "overflow" && this.popupPriCount !== 0;
                if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {
                  --this.popupPriCount;
                }
                if (isNullOrUndefined(this.scrollModule)) {
                  this.destroyMode();
                }
                var itemCol = [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, tEle));
                if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {
                  this.clearToolbarTemplate(itemCol[parseInt(index.toString(), 10)]);
                }
                detach(itemCol[parseInt(index.toString(), 10)]);
                this.tbarEle.splice(index, 1);
                this.addItems([this.items[parseInt(index.toString(), 10)]], index);
                this.items.splice(index, 1);
                if (this.items[parseInt(index.toString(), 10)].template) {
                  this.tbarEle.splice(this.items.length, 1);
                }
              }
            } else {
              this.itemsRerender(newProp.items);
            }
            break;
          case "width":
            setStyleAttribute(tEle, { "width": formatUnit(newProp.width) });
            this.refreshOverflow();
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "overflowMode":
            this.destroyMode();
            this.renderOverflowMode();
            if (this.enableRtl) {
              this.add(tEle, CLS_RTL3);
            }
            this.refreshOverflow();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(tEle, CLS_RTL3);
            } else {
              this.remove(tEle, CLS_RTL3);
            }
            if (!isNullOrUndefined(this.scrollModule)) {
              if (newProp.enableRtl) {
                this.add(this.scrollModule.element, CLS_RTL3);
              } else {
                this.remove(this.scrollModule.element, CLS_RTL3);
              }
            }
            if (!isNullOrUndefined(this.popObj)) {
              if (newProp.enableRtl) {
                this.add(this.popObj.element, CLS_RTL3);
              } else {
                this.remove(this.popObj.element, CLS_RTL3);
              }
            }
            if (this.tbarAlign) {
              this.itemPositioning();
            }
            break;
          case "scrollStep":
            if (this.scrollModule) {
              this.scrollModule.scrollStep = this.scrollStep;
            }
            break;
          case "enableCollision":
            if (this.popObj) {
              this.popObj.collision = { Y: this.enableCollision ? "flip" : "none" };
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "allowKeyboard":
            this.unwireKeyboardEvent();
            if (newProp.allowKeyboard) {
              this.wireKeyboardEvent();
            }
            break;
        }
      }
    };
    Toolbar2.prototype.hideItem = function(index, value) {
      var isElement = typeof index === "object" ? true : false;
      var eleIndex = index;
      var ele;
      if (!isElement && isNullOrUndefined(eleIndex)) {
        return;
      }
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (isElement) {
        ele = index;
      } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {
        var innerItems_1 = [].slice.call(selectAll("." + CLS_ITEM, this.element));
        ele = innerItems_1[parseInt(eleIndex.toString(), 10)];
      }
      if (ele) {
        if (value) {
          ele.classList.add(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            if (isNullOrUndefined(ele.firstElementChild.getAttribute("tabindex")) || ele.firstElementChild.getAttribute("tabindex") !== "-1") {
              this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
            }
          }
        } else {
          ele.classList.remove(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
          }
        }
        this.refreshOverflow();
      }
    };
    __decorate7([
      Collection([], Item)
    ], Toolbar2.prototype, "items", void 0);
    __decorate7([
      Property("auto")
    ], Toolbar2.prototype, "width", void 0);
    __decorate7([
      Property("auto")
    ], Toolbar2.prototype, "height", void 0);
    __decorate7([
      Property("")
    ], Toolbar2.prototype, "cssClass", void 0);
    __decorate7([
      Property("Scrollable")
    ], Toolbar2.prototype, "overflowMode", void 0);
    __decorate7([
      Property()
    ], Toolbar2.prototype, "scrollStep", void 0);
    __decorate7([
      Property(true)
    ], Toolbar2.prototype, "enableCollision", void 0);
    __decorate7([
      Property(true)
    ], Toolbar2.prototype, "enableHtmlSanitizer", void 0);
    __decorate7([
      Property(true)
    ], Toolbar2.prototype, "allowKeyboard", void 0);
    __decorate7([
      Event()
    ], Toolbar2.prototype, "clicked", void 0);
    __decorate7([
      Event()
    ], Toolbar2.prototype, "created", void 0);
    __decorate7([
      Event()
    ], Toolbar2.prototype, "destroyed", void 0);
    __decorate7([
      Event()
    ], Toolbar2.prototype, "beforeCreate", void 0);
    Toolbar2 = __decorate7([
      NotifyPropertyChanges
    ], Toolbar2);
    return Toolbar2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ACRDN_ROOT = "e-acrdn-root";
var CLS_ROOT3 = "e-accordion";
var CLS_ITEM2 = "e-acrdn-item";
var CLS_ITEMFOCUS = "e-item-focus";
var CLS_ITEMHIDE = "e-hide";
var CLS_HEADER = "e-acrdn-header";
var CLS_HEADERICN = "e-acrdn-header-icon";
var CLS_HEADERCTN = "e-acrdn-header-content";
var CLS_CONTENT = "e-acrdn-panel";
var CLS_CTENT = "e-acrdn-content";
var CLS_TOOGLEICN = "e-toggle-icon";
var CLS_COLLAPSEICN = "e-tgl-collapse-icon e-icons";
var CLS_EXPANDICN = "e-expand-icon";
var CLS_RTL4 = "e-rtl";
var CLS_CTNHIDE = "e-content-hide";
var CLS_SLCT = "e-select";
var CLS_SLCTED = "e-selected";
var CLS_ACTIVE = "e-active";
var CLS_ANIMATE = "e-animate";
var CLS_DISABLE4 = "e-overlay";
var CLS_TOGANIMATE = "e-toggle-animation";
var CLS_NEST = "e-nested";
var CLS_EXPANDSTATE = "e-expand-state";
var CLS_CONTAINER = "e-accordion-container";
var AccordionActionSettings = (
  /** @class */
  function(_super) {
    __extends8(AccordionActionSettings2, _super);
    function AccordionActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("SlideDown")
    ], AccordionActionSettings2.prototype, "effect", void 0);
    __decorate8([
      Property(400)
    ], AccordionActionSettings2.prototype, "duration", void 0);
    __decorate8([
      Property("linear")
    ], AccordionActionSettings2.prototype, "easing", void 0);
    return AccordionActionSettings2;
  }(ChildProperty)
);
var AccordionAnimationSettings = (
  /** @class */
  function(_super) {
    __extends8(AccordionAnimationSettings2, _super);
    function AccordionAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "collapse", void 0);
    __decorate8([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "expand", void 0);
    return AccordionAnimationSettings2;
  }(ChildProperty)
);
var AccordionItem = (
  /** @class */
  function(_super) {
    __extends8(AccordionItem2, _super);
    function AccordionItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property(null)
    ], AccordionItem2.prototype, "content", void 0);
    __decorate8([
      Property(null)
    ], AccordionItem2.prototype, "header", void 0);
    __decorate8([
      Property(null)
    ], AccordionItem2.prototype, "cssClass", void 0);
    __decorate8([
      Property(null)
    ], AccordionItem2.prototype, "iconCss", void 0);
    __decorate8([
      Property(false)
    ], AccordionItem2.prototype, "expanded", void 0);
    __decorate8([
      Property(true)
    ], AccordionItem2.prototype, "visible", void 0);
    __decorate8([
      Property(false)
    ], AccordionItem2.prototype, "disabled", void 0);
    __decorate8([
      Property()
    ], AccordionItem2.prototype, "id", void 0);
    return AccordionItem2;
  }(ChildProperty)
);
var Accordion = (
  /** @class */
  function(_super) {
    __extends8(Accordion2, _super);
    function Accordion2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.keyConfigs = {
        moveUp: "uparrow",
        moveDown: "downarrow",
        enter: "enter",
        space: "space",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Accordion2.prototype.destroy = function() {
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      var ele = this.element;
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.isDestroy = true;
      this.restoreContent(null);
      [].slice.call(ele.children).forEach(function(el) {
        ele.removeChild(el);
      });
      if (this.trgtEle) {
        this.trgtEle = null;
        while (this.ctrlTem.firstElementChild) {
          ele.appendChild(this.ctrlTem.firstElementChild);
        }
        this.ctrlTem = null;
      }
      ele.classList.remove(CLS_ACRDN_ROOT);
      ele.removeAttribute("style");
      this.element.removeAttribute("data-ripple");
      if (!this.isNested && isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Accordion2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT);
      this.isNested = false;
      this.templateEle = [];
      if (!this.isDestroy) {
        this.isDestroy = false;
      }
      if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {
        if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT3)) {
          nested.classList.add(CLS_NEST);
          this.isNested = true;
        }
      } else {
        this.element.classList.add(CLS_ACRDN_ROOT);
      }
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL4);
      }
    };
    Accordion2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Accordion2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Accordion2.prototype.render = function() {
      this.initializeHeaderTemplate();
      this.initializeItemTemplate();
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };
    Accordion2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      setStyleAttribute(this.element, { "width": width, "height": height });
      if (isNullOrUndefined(this.initExpand)) {
        this.initExpand = [];
      }
      if (!isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 0) {
        this.initExpand = this.expandedIndices;
      }
    };
    Accordion2.prototype.renderControl = function() {
      this.trgtEle = this.element.children.length > 0 ? select("div", this.element) : null;
      this.renderItems();
      this.initItemExpand();
    };
    Accordion2.prototype.wireFocusEvents = function() {
      var acrdItem = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2));
      for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {
        var item = acrdItem_1[_i];
        var headerEle = item.querySelector("." + CLS_HEADER);
        if (item.childElementCount > 0 && headerEle) {
          EventHandler.clearEvents(headerEle);
          EventHandler.add(headerEle, "focus", this.focusIn, this);
          EventHandler.add(headerEle, "blur", this.focusOut, this);
        }
      }
    };
    Accordion2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
    };
    Accordion2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      if (!this.isNested && !this.isDestroy) {
        this.removeRippleEffect = rippleEffect(this.element, { selector: "." + CLS_HEADER });
      }
      if (!this.isNested) {
        this.keyModule = new KeyboardEvents(this.element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigs,
          eventName: "keydown"
        });
      }
    };
    Accordion2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Accordion2.prototype.initializeHeaderTemplate = function() {
      if (this.headerTemplate) {
        this.headerTemplateFn = this.templateParser(this.headerTemplate);
      }
    };
    Accordion2.prototype.initializeItemTemplate = function() {
      if (this.itemTemplate) {
        this.itemTemplateFn = this.templateParser(this.itemTemplate);
      }
    };
    Accordion2.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Accordion2.prototype.getItemTemplate = function() {
      return this.itemTemplateFn;
    };
    Accordion2.prototype.focusIn = function(e) {
      e.target.parentElement.classList.add(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.focusOut = function(e) {
      e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.ctrlTemplate = function() {
      this.ctrlTem = this.element.cloneNode(true);
      var innerEles;
      var rootEle = select("." + CLS_CONTAINER, this.element);
      if (rootEle) {
        innerEles = rootEle.children;
      } else {
        innerEles = this.element.children;
      }
      var items = [];
      [].slice.call(innerEles).forEach(function(el) {
        items.push({
          header: el.childElementCount > 0 && el.children[0] ? el.children[0] : "",
          content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ""
        });
        el.parentNode.removeChild(el);
      });
      if (rootEle) {
        this.element.removeChild(rootEle);
      }
      this.setProperties({ items }, true);
    };
    Accordion2.prototype.toggleIconGenerate = function() {
      var tglIcon = this.createElement("div", { className: CLS_TOOGLEICN });
      var hdrColIcon = this.createElement("span", { className: CLS_COLLAPSEICN });
      tglIcon.appendChild(hdrColIcon);
      return tglIcon;
    };
    Accordion2.prototype.initItemExpand = function() {
      var len = this.initExpand.length;
      if (len === 0) {
        return;
      }
      if (this.expandMode === "Single") {
        this.expandItem(true, this.initExpand[len - 1]);
      } else {
        for (var i = 0; i < len; i++) {
          this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.renderItems = function() {
      var _this = this;
      var ele = this.element;
      var innerItem;
      var innerDataSourceItem;
      if (!isNullOrUndefined(this.trgtEle)) {
        this.ctrlTemplate();
      }
      if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        this.dataSource.forEach(function(item, index) {
          innerDataSourceItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerDataSourceItem);
          if (innerDataSourceItem.childElementCount > 0) {
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          }
        });
      } else {
        var items = this.items;
        if (ele && items.length > 0) {
          items.forEach(function(item, index) {
            innerItem = _this.renderInnerItem(item, index);
            ele.appendChild(innerItem);
            if (innerItem.childElementCount > 0) {
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
            }
          });
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      var items = this.getItems();
      var eventArgs = {};
      var tglIcon;
      var acrdEle = closest(trgt, "." + CLS_ROOT3);
      if (acrdEle !== this.element) {
        return;
      }
      trgt.classList.add("e-target");
      var acrdnItem = closest(trgt, "." + CLS_ITEM2);
      var acrdnHdr = closest(trgt, "." + CLS_HEADER);
      var acrdnCtn = closest(trgt, "." + CLS_CONTENT);
      if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {
        acrdnHdr = acrdnItem.children[0];
        acrdnCtn = acrdnItem.children[1];
      }
      if (acrdnHdr) {
        tglIcon = select("." + CLS_TOOGLEICN, acrdnHdr);
      }
      var acrdnCtnItem;
      if (acrdnHdr) {
        acrdnCtnItem = closest(acrdnHdr, "." + CLS_ITEM2);
      } else if (acrdnCtn) {
        acrdnCtnItem = closest(acrdnCtn, "." + CLS_ITEM2);
      }
      var index = this.getIndexByItem(acrdnItem);
      if (acrdnCtnItem) {
        eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
      }
      eventArgs.originalEvent = e;
      var ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;
      if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select("." + CLS_HEADER + " ." + CLS_TOOGLEICN, acrdnCtnItem)))) {
        acrdnItem.appendChild(this.contentRendering(index));
        this.ariaAttrUpdate(acrdnItem);
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      } else {
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.afterContentRender = function(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
      var _this = this;
      var acrdActive = [];
      this.trigger("clicked", eventArgs);
      var cntclkCheck = acrdnCtn && !isNullOrUndefined(select(".e-target", acrdnCtn));
      var inlineAcrdnSel = "." + CLS_CONTENT + " ." + CLS_ROOT3;
      var inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));
      var nestContCheck = acrdnCtn && isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) || !(closest(trgt, "." + CLS_ROOT3) === this.element);
      cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
      trgt.classList.remove("e-target");
      if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
        return;
      }
      var acrdcontainer = this.element.querySelector("." + CLS_CONTAINER);
      var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
      [].slice.call(acrdnchild).forEach(function(el2) {
        if (el2.classList.contains(CLS_ACTIVE)) {
          acrdActive.push(el2);
        }
      });
      var acrdAniEle = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2 + " [" + CLS_ANIMATE + "]"));
      if (acrdAniEle.length > 0) {
        for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
          var el = acrdAniEle_1[_i];
          acrdActive.push(el.parentElement);
        }
      }
      var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute("e-animate") === "true";
      var sameHeader = false;
      if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {
        var acrdnCtn_1 = select("." + CLS_CONTENT, acrdnItem);
        var acrdnRoot = closest(acrdnItem, "." + CLS_ACRDN_ROOT);
        var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
        if (isNullOrUndefined(acrdnCtn_1)) {
          return;
        }
        sameHeader = expandState === acrdnItem;
        if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
          this.collapse(acrdnCtn_1);
        } else {
          if (acrdActive.length > 0 && this.expandMode === "Single" && !sameContentCheck) {
            acrdActive.forEach(function(el2) {
              _this.collapse(select("." + CLS_CONTENT, el2));
              el2.classList.remove(CLS_EXPANDSTATE);
            });
          }
          this.expand(acrdnCtn_1);
        }
        if (!isNullOrUndefined(expandState) && !sameHeader) {
          expandState.classList.remove(CLS_EXPANDSTATE);
        }
      }
    };
    Accordion2.prototype.eleMoveFocus = function(action, root, trgt) {
      var clst;
      var clstItem = closest(trgt, "." + CLS_ITEM2);
      if (trgt === root) {
        clst = (action === "moveUp" ? trgt.lastElementChild : trgt).querySelector("." + CLS_HEADER);
      } else if (trgt.classList.contains(CLS_HEADER)) {
        clstItem = action === "moveUp" ? clstItem.previousElementSibling : clstItem.nextElementSibling;
        if (clstItem) {
          clst = select("." + CLS_HEADER, clstItem);
        }
      }
      if (clst) {
        clst.focus();
      }
    };
    Accordion2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      var header = closest(e.target, CLS_HEADER);
      if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT3) && !trgt.classList.contains(CLS_HEADER)) {
        return;
      }
      var clst;
      var root = this.element;
      var content;
      switch (e.action) {
        case "moveUp":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "moveDown":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "space":
        case "enter":
          content = trgt.nextElementSibling;
          if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {
            if (content.getAttribute("e-animate") !== "true") {
              trgt.click();
            }
          } else {
            trgt.click();
          }
          e.preventDefault();
          break;
        case "home":
        case "end":
          clst = e.action === "home" ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
          clst.focus();
          e.preventDefault();
          break;
      }
    };
    Accordion2.prototype.headerEleGenerate = function() {
      var header = this.createElement("div", { className: CLS_HEADER, id: getUniqueID("acrdn_header") });
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-disabled": "false",
        "aria-expanded": "false"
      };
      attributes(header, ariaAttr);
      return header;
    };
    Accordion2.prototype.renderInnerItem = function(item, index) {
      var innerEle = this.createElement("div", {
        className: CLS_ITEM2,
        id: item.id || getUniqueID("acrdn_item")
      });
      if (this.headerTemplate) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        append(this.getHeaderTemplate()(item, this, "headerTemplate", this.element.id + "_headerTemplate", false), hdrEle);
        innerEle.appendChild(ctnEle);
        ctnEle.appendChild(this.toggleIconGenerate());
        this.add(innerEle, CLS_SLCT);
        return innerEle;
      }
      if (item.header && this.angularnativeCondiCheck(item, "header")) {
        var header = item.header;
        if (this.enableHtmlSanitizer && typeof item.header === "string") {
          header = SanitizeHtmlHelper.sanitize(item.header);
        }
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        ctnEle.appendChild(this.fetchElement(hdrEle, header, index));
        innerEle.appendChild(ctnEle);
      }
      var hdr = select("." + CLS_HEADER, innerEle);
      if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {
        if (this.initExpand.indexOf(index) === -1) {
          this.initExpand.push(index);
        }
      }
      if (item.cssClass) {
        addClass([innerEle], item.cssClass.split(" "));
      }
      if (item.disabled) {
        addClass([innerEle], CLS_DISABLE4);
      }
      if (item.visible === false) {
        addClass([innerEle], CLS_ITEMHIDE);
      }
      if (item.iconCss) {
        var hdrIcnEle = this.createElement("div", { className: CLS_HEADERICN });
        var icon = this.createElement("span", { className: item.iconCss + " e-icons" });
        hdrIcnEle.appendChild(icon);
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          hdr.appendChild(hdrIcnEle);
          innerEle.appendChild(hdr);
        } else {
          hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
        }
      }
      if (item.content && this.angularnativeCondiCheck(item, "content")) {
        var hdrIcon = this.toggleIconGenerate();
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          innerEle.appendChild(hdr);
        }
        hdr.appendChild(hdrIcon);
        this.add(innerEle, CLS_SLCT);
      }
      return innerEle;
    };
    Accordion2.prototype.angularnativeCondiCheck = function(item, prop) {
      var property = prop === "content" ? item.content : item.header;
      var content = property;
      if (this.isAngular && !isNullOrUndefined(content.elementRef)) {
        var data = content.elementRef.nativeElement.data;
        if (isNullOrUndefined(data) || data === "" || data.indexOf("bindings=") === -1) {
          return true;
        }
        var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace("bindings=", ""));
        if (!isNullOrUndefined(parseddata) && parseddata["ng-reflect-ng-if"] === "false") {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    };
    Accordion2.prototype.fetchElement = function(ele, value, index) {
      var templateFn;
      var temString;
      try {
        if (document.querySelectorAll(value).length && value !== "Button") {
          var eleVal = document.querySelector(value);
          temString = eleVal.outerHTML.trim();
          ele.appendChild(eleVal);
          eleVal.style.display = "";
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        if (typeof value === "string") {
          ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value;
        } else if (value instanceof HTMLElement) {
          ele.appendChild(value);
          if (this.trgtEle) {
            ele.firstElementChild.style.display = "";
          }
        } else {
          templateFn = compile(value);
        }
      }
      var tempArray;
      if (!isNullOrUndefined(templateFn)) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        var templateProps = void 0;
        var templateName = void 0;
        if (ele.classList.contains(CLS_HEADERCTN)) {
          templateProps = this.element.id + index + "_header";
          templateName = "header";
        } else if (ele.classList.contains(CLS_CTENT)) {
          templateProps = this.element.id + index + "_content";
          templateName = "content";
        }
        tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);
      }
      if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {
        [].slice.call(tempArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (ele.childElementCount === 0) {
        ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value;
      }
      if (!isNullOrUndefined(temString)) {
        if (this.templateEle.indexOf(value) === -1) {
          this.templateEle.push(value);
        }
      }
      return ele;
    };
    Accordion2.prototype.ariaAttrUpdate = function(itemEle) {
      var header = select("." + CLS_HEADER, itemEle);
      var content = select("." + CLS_CONTENT, itemEle);
      header.setAttribute("aria-controls", content.id);
      content.setAttribute("aria-labelledby", header.id);
      content.setAttribute("role", "region");
    };
    Accordion2.prototype.contentRendering = function(index) {
      var itemcnt = this.createElement("div", { className: CLS_CONTENT + " " + CLS_CTNHIDE, id: getUniqueID("acrdn_panel") });
      attributes(itemcnt, { "aria-hidden": "true" });
      var ctn = this.createElement("div", { className: CLS_CTENT });
      if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, "itemTemplate", this.element.id + "_itemTemplate", false), ctn);
        itemcnt.appendChild(ctn);
      } else {
        var content = this.items[parseInt(index.toString(), 10)].content;
        if (this.enableHtmlSanitizer && typeof content === "string") {
          content = SanitizeHtmlHelper.sanitize(content);
        }
        itemcnt.appendChild(this.fetchElement(ctn, content, index));
      }
      return itemcnt;
    };
    Accordion2.prototype.expand = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute("e-animate") !== "true" || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var acrdnRoot = closest(trgtItemEle, "." + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
      var animation = {
        name: this.animation.expand.effect,
        duration: this.animation.expand.duration,
        timingFunction: this.animation.expand.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: true
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          icon.classList.add(CLS_TOGANIMATE);
          _this.expandedItemsPush(trgtItemEle);
          if (!isNullOrUndefined(expandState)) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }
          trgtItemEle.classList.add(CLS_EXPANDSTATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.expandProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.expandProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.expandAnimation = function(ef, icn, trgt, trgtItemEle, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideDown";
        animate.name = "SlideDown";
      }
      var height;
      this.lastActiveItemId = trgtItemEle.id;
      if (ef === "SlideDown") {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
          trgt.style.position = "absolute";
          height = trgtItemEle.offsetHeight;
          trgt.style.maxHeight = trgt.offsetHeight + "px";
          trgtItemEle.style.maxHeight = "";
        };
        animate.progress = function() {
          trgtItemEle.style.minHeight = height + trgt.offsetHeight + "px";
        };
        animate.end = function() {
          setStyleAttribute(trgt, { "position": "", "maxHeight": "" });
          trgtItemEle.style.minHeight = "";
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      } else {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
        };
        animate.end = function() {
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.expandProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(trgt, CLS_CTNHIDE);
      this.add(trgtItemEle, CLS_SLCTED);
      this.add(icon, CLS_EXPANDICN);
      if (progress === "end") {
        this.add(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "false");
        attributes(trgt.previousElementSibling, { "aria-expanded": "true" });
        icon.classList.remove(CLS_TOGANIMATE);
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.expandedItemsPush = function(item) {
      var index = this.getIndexByItem(item);
      if (this.expandedIndices.indexOf(index) === -1) {
        var temp = [].slice.call(this.expandedIndices);
        temp.push(index);
        this.setProperties({ expandedIndices: temp }, true);
      }
    };
    Accordion2.prototype.getIndexByItem = function(item) {
      var itemEle = this.getItemElements();
      return [].slice.call(itemEle).indexOf(item);
    };
    Accordion2.prototype.getItemElements = function() {
      var itemEle = [];
      var itemCollection = this.element.children;
      [].slice.call(itemCollection).forEach(function(el) {
        if (el.classList.contains(CLS_ITEM2)) {
          itemEle.push(el);
        }
      });
      return itemEle;
    };
    Accordion2.prototype.expandedItemsPop = function(item) {
      var index = this.getIndexByItem(item);
      var temp = [].slice.call(this.expandedIndices);
      temp.splice(temp.indexOf(index), 1);
      this.setProperties({ expandedIndices: temp }, true);
    };
    Accordion2.prototype.collapse = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var animation = {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: false
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          _this.expandedItemsPop(trgtItemEle);
          trgtItemEle.classList.remove(CLS_EXPANDSTATE);
          icon.classList.add(CLS_TOGANIMATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.collapseProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.collapseProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.collapseAnimation = function(ef, trgt, trgtItEl, icn, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideUp";
        animate.name = "SlideUp";
      }
      var height;
      var trgtHeight;
      var itemHeight;
      var remain;
      this.lastActiveItemId = trgtItEl.id;
      if (ef === "SlideUp") {
        animate.begin = function() {
          itemHeight = trgtItEl.offsetHeight;
          trgtItEl.style.minHeight = itemHeight + "px";
          trgt.style.position = "absolute";
          height = trgtItEl.offsetHeight;
          trgtHeight = trgt.offsetHeight;
          trgt.style.maxHeight = trgtHeight + "px";
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.progress = function() {
          remain = height - (trgtHeight - trgt.offsetHeight);
          if (remain < itemHeight) {
            trgtItEl.style.minHeight = remain + "px";
          }
        };
        animate.end = function() {
          trgt.style.display = "none";
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
          trgtItEl.style.minHeight = "";
          setStyleAttribute(trgt, { "position": "", "maxHeight": "", "display": "" });
        };
      } else {
        animate.begin = function() {
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.end = function() {
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.collapseProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(icon, CLS_EXPANDICN);
      this.remove(trgtItemEle, CLS_SLCTED);
      if (progress === "end") {
        this.add(trgt, CLS_CTNHIDE);
        icon.classList.remove(CLS_TOGANIMATE);
        this.remove(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "true");
        attributes(trgt.previousElementSibling, { "aria-expanded": "false" });
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.getModuleName = function() {
      return "accordion";
    };
    Accordion2.prototype.getItems = function() {
      var items;
      if (this.itemTemplate && this.headerTemplate) {
        items = this.dataSource;
      } else {
        items = this.items;
      }
      return items;
    };
    Accordion2.prototype.addItem = function(item, index) {
      var _this = this;
      var ele = this.element;
      var itemEle = this.getItemElements();
      var items = this.getItems();
      if (isNullOrUndefined(index)) {
        index = items.length;
      }
      if (ele.childElementCount >= index) {
        var addItems = item instanceof Array ? item : [item];
        addItems.forEach(function(addItem, i) {
          var itemIndex = index + i;
          items.splice(itemIndex, 0, addItem);
          var innerItemEle = _this.renderInnerItem(addItem, itemIndex);
          if (ele.childElementCount === itemIndex) {
            ele.appendChild(innerItemEle);
          } else {
            ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);
          }
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          _this.expandedIndices = [];
          _this.expandedItemRefresh();
          if (addItem && addItem.expanded) {
            _this.expandItem(true, itemIndex);
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.expandedItemRefresh = function() {
      var _this = this;
      var itemEle = this.getItemElements();
      [].slice.call(itemEle).forEach(function(el) {
        if (el.classList.contains(CLS_SLCTED)) {
          _this.expandedItemsPush(el);
        }
      });
    };
    Accordion2.prototype.removeItem = function(index) {
      if (this.isReact || this.isAngular) {
        var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        this.clearAccordionTemplate(header, this.dataSource.length > 0 ? "headerTemplate" : "header", CLS_HEADERCTN);
        this.clearAccordionTemplate(content, this.dataSource.length > 0 ? "itemTemplate" : "content", CLS_CTENT);
      }
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      var items = this.getItems();
      if (isNullOrUndefined(ele)) {
        return;
      }
      this.restoreContent(index);
      detach(ele);
      items.splice(index, 1);
      this.expandedIndices = [];
      this.expandedItemRefresh();
    };
    Accordion2.prototype.select = function(index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele) || isNullOrUndefined(select("." + CLS_HEADER, ele))) {
        return;
      }
      ele.children[0].focus();
    };
    Accordion2.prototype.hideItem = function(index, isHidden) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      if (isNullOrUndefined(isHidden)) {
        isHidden = true;
      }
      if (isHidden) {
        this.add(ele, CLS_ITEMHIDE);
      } else {
        this.remove(ele, CLS_ITEMHIDE);
      }
    };
    Accordion2.prototype.enableItem = function(index, isEnable) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      var eleHeader = ele.firstElementChild;
      if (isEnable) {
        this.remove(ele, CLS_DISABLE4);
        attributes(eleHeader, { "tabindex": "0", "aria-disabled": "false" });
        eleHeader.focus();
      } else {
        if (ele.classList.contains(CLS_ACTIVE)) {
          this.expandItem(false, index);
          this.eleMoveFocus("movedown", this.element, eleHeader);
        }
        this.add(ele, CLS_DISABLE4);
        eleHeader.setAttribute("aria-disabled", "true");
        eleHeader.removeAttribute("tabindex");
      }
    };
    Accordion2.prototype.expandItem = function(isExpand, index) {
      var _this = this;
      var itemEle = this.getItemElements();
      if (isNullOrUndefined(index)) {
        if (this.expandMode === "Single" && isExpand) {
          var ele = itemEle[itemEle.length - 1];
          this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
        } else {
          var item = select("#" + this.lastActiveItemId, this.element);
          [].slice.call(itemEle).forEach(function(el) {
            _this.itemExpand(isExpand, el, _this.getIndexByItem(el));
            el.classList.remove(CLS_EXPANDSTATE);
          });
          var expandedItem = select("." + CLS_EXPANDSTATE, this.element);
          if (expandedItem) {
            expandedItem.classList.remove(CLS_EXPANDSTATE);
          }
          if (item) {
            item.classList.add(CLS_EXPANDSTATE);
          }
        }
      } else {
        var ele = itemEle[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
          return;
        } else {
          if (this.expandMode === "Single") {
            this.expandItem(false);
          }
          this.itemExpand(isExpand, ele, index);
        }
      }
    };
    Accordion2.prototype.itemExpand = function(isExpand, ele, index) {
      var ctn = ele.children[1];
      if (ele.classList.contains(CLS_DISABLE4)) {
        return;
      }
      if (isNullOrUndefined(ctn) && isExpand) {
        ctn = this.contentRendering(index);
        ele.appendChild(ctn);
        this.ariaAttrUpdate(ele);
        this.expand(ctn);
      } else if (!isNullOrUndefined(ctn)) {
        if (isExpand) {
          this.expand(ctn);
        } else {
          this.collapse(ctn);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.destroyItems = function() {
      this.restoreContent(null);
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2)).forEach(function(el) {
        detach(el);
      });
    };
    Accordion2.prototype.restoreContent = function(index) {
      var ctnElePos;
      if (isNullOrUndefined(index)) {
        ctnElePos = this.element;
      } else {
        ctnElePos = this.element.querySelectorAll("." + CLS_ITEM2)[parseInt(index.toString(), 10)];
      }
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {
          document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Accordion2.prototype.updateItem = function(item, index) {
      if (!isNullOrUndefined(item)) {
        var items = this.getItems();
        var itemObj = items[parseInt(index.toString(), 10)];
        items.splice(index, 1);
        this.restoreContent(index);
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        if (this.isReact || this.isAngular) {
          this.clearAccordionTemplate(header, "header", CLS_HEADERCTN);
          this.clearAccordionTemplate(content, "content", CLS_CTENT);
        }
        detach(item);
        this.addItem(itemObj, index);
      }
    };
    Accordion2.prototype.setTemplate = function(template, toElement, index) {
      this.fetchElement(toElement, template, index);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clearAccordionTemplate = function(templateEle, templateName, className) {
      if (this.registeredTemplate && this.registeredTemplate["" + templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["" + templateName].length; index++) {
          var registeredItem = registeredTemplates["" + templateName][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle || isNullOrUndefined(registeredItem.parentNode)) {
            this.clearTemplate([templateName], [registeredTemplates["" + templateName][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Accordion2.prototype.getPersistData = function() {
      var keyEntity = ["expandedIndices"];
      return this.addOnPersist(keyEntity);
    };
    Accordion2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var acrdn = this.element;
      var isRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);
              for (var j = 0; j < changedProp.length; j++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);
                for (var k = 0; k < property.length; k++) {
                  var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
                  var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var newVal = Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var temp = property[parseInt(k.toString(), 10)];
                  var content = select("." + CLS_CTENT, item);
                  if (temp === "header" || temp === "iconCss" || temp === "expanded" || temp === "content" && oldVal === "") {
                    this.updateItem(item, index);
                  }
                  if (property[parseInt(k.toString(), 10)] === "cssClass" && !isNullOrUndefined(item)) {
                    if (oldVal) {
                      removeClass([item], oldVal.split(" "));
                    }
                    if (newVal) {
                      addClass([item], newVal.split(" "));
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "visible" && !isNullOrUndefined(item)) {
                    if (Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]] === false) {
                      item.classList.add(CLS_ITEMHIDE);
                    } else {
                      item.classList.remove(CLS_ITEMHIDE);
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "disabled" && !isNullOrUndefined(item)) {
                    this.enableItem(index, !newVal);
                  }
                  if (property.indexOf("header") < 0 && property[parseInt(k.toString(), 10)] === "content" && !isNullOrUndefined(item) && item.children.length === 2) {
                    if (typeof newVal === "function") {
                      if (this.isAngular || this.isReact) {
                        this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);
                      }
                      var activeContent = item.querySelector("." + CLS_CTENT);
                      activeContent.innerHTML = "";
                      this.setTemplate(newVal, activeContent, index);
                    } else {
                      if (item.classList.contains(CLS_SLCTED)) {
                        this.expandItem(false, index);
                      }
                      detach(item.querySelector("." + CLS_CONTENT));
                    }
                  }
                }
              }
            } else {
              isRefresh = true;
            }
            break;
          case "dataSource":
          case "expandedIndices":
            if (this.expandedIndices === null) {
              this.expandedIndices = [];
            }
            isRefresh = true;
            break;
          case "headerTemplate":
            this.initializeHeaderTemplate();
            isRefresh = true;
            break;
          case "itemTemplate":
            this.initializeItemTemplate();
            isRefresh = true;
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(acrdn, CLS_RTL4);
            } else {
              this.remove(acrdn, CLS_RTL4);
            }
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "expandMode":
            if (newProp.expandMode === "Single" && !isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 1) {
              this.expandItem(false);
            }
            break;
        }
      }
      if (isRefresh) {
        this.initExpand = [];
        if (!isNullOrUndefined(this.expandedIndices) && this.expandedIndices.length > 0) {
          this.initExpand = this.expandedIndices;
        }
        this.destroyItems();
        this.renderItems();
        this.initItemExpand();
      }
    };
    __decorate8([
      Collection([], AccordionItem)
    ], Accordion2.prototype, "items", void 0);
    __decorate8([
      Property([])
    ], Accordion2.prototype, "dataSource", void 0);
    __decorate8([
      Property()
    ], Accordion2.prototype, "itemTemplate", void 0);
    __decorate8([
      Property()
    ], Accordion2.prototype, "headerTemplate", void 0);
    __decorate8([
      Property("100%")
    ], Accordion2.prototype, "width", void 0);
    __decorate8([
      Property("auto")
    ], Accordion2.prototype, "height", void 0);
    __decorate8([
      Property([])
    ], Accordion2.prototype, "expandedIndices", void 0);
    __decorate8([
      Property("Multiple")
    ], Accordion2.prototype, "expandMode", void 0);
    __decorate8([
      Property(true)
    ], Accordion2.prototype, "enableHtmlSanitizer", void 0);
    __decorate8([
      Complex({}, AccordionAnimationSettings)
    ], Accordion2.prototype, "animation", void 0);
    __decorate8([
      Event()
    ], Accordion2.prototype, "clicked", void 0);
    __decorate8([
      Event()
    ], Accordion2.prototype, "expanding", void 0);
    __decorate8([
      Event()
    ], Accordion2.prototype, "expanded", void 0);
    __decorate8([
      Event()
    ], Accordion2.prototype, "created", void 0);
    __decorate8([
      Event()
    ], Accordion2.prototype, "destroyed", void 0);
    Accordion2 = __decorate8([
      NotifyPropertyChanges
    ], Accordion2);
    return Accordion2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ContextMenu = (
  /** @class */
  function(_super) {
    __extends9(ContextMenu2, _super);
    function ContextMenu2(options, element) {
      return _super.call(this, options, element) || this;
    }
    ContextMenu2.prototype.preRender = function() {
      this.isMenu = false;
      this.element.id = this.element.id || getUniqueID("ej2-contextmenu");
      _super.prototype.preRender.call(this);
    };
    ContextMenu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      this.element.style.zIndex = getZindexPartial(this.element).toString();
    };
    ContextMenu2.prototype.open = function(top, left, target) {
      _super.prototype.openMenu.call(this, null, null, top, left, null, target);
    };
    ContextMenu2.prototype.close = function() {
      _super.prototype.closeMenu.call(this);
    };
    ContextMenu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "filter":
            this.close();
            this.filter = newProp.filter;
            break;
          case "target":
            this.unWireEvents(oldProp.target);
            this.wireEvents();
            break;
        }
      }
    };
    ContextMenu2.prototype.getModuleName = function() {
      return "contextmenu";
    };
    __decorate9([
      Property("")
    ], ContextMenu2.prototype, "target", void 0);
    __decorate9([
      Property("")
    ], ContextMenu2.prototype, "filter", void 0);
    __decorate9([
      Collection([], MenuItem)
    ], ContextMenu2.prototype, "items", void 0);
    ContextMenu2 = __decorate9([
      NotifyPropertyChanges
    ], ContextMenu2);
    return ContextMenu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/menu/menu.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VMENU = "e-vertical";
var SCROLLABLE = "e-scrollable";
var HAMBURGER = "e-hamburger";
var Menu = (
  /** @class */
  function(_super) {
    __extends10(Menu2, _super);
    function Menu2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.tempItems = [];
      return _this;
    }
    Menu2.prototype.getModuleName = function() {
      return "menu";
    };
    Menu2.prototype.preRender = function() {
      this.isMenu = true;
      this.element.id = this.element.id || getUniqueID("ej2-menu");
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.template = document.querySelector(this.template).innerHTML.trim();
            this.clearChanges();
          }
        } catch (e) {
        }
        this.updateMenuItems(this.items);
      } else {
        this.updateMenuItems(this.items);
      }
      _super.prototype.preRender.call(this);
    };
    Menu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      if (this.orientation === "Vertical") {
        this.element.classList.add(VMENU);
        if (this.hamburgerMode && !this.target) {
          this.element.previousElementSibling.classList.add(VMENU);
        }
        this.element.setAttribute("aria-orientation", "vertical");
      } else {
        if (Browser.isDevice && !this.enableScrolling) {
          this.element.parentElement.classList.add(SCROLLABLE);
        }
      }
      if (this.hamburgerMode) {
        this.element.parentElement.classList.add(HAMBURGER);
        if (this.orientation === "Horizontal") {
          this.element.classList.add("e-hide-menu");
        }
      }
    };
    Menu2.prototype.updateMenuItems = function(items) {
      this.tempItems = items;
      this.items = [];
      this.tempItems.map(this.createMenuItems, this);
      this.setProperties({ items: this.items }, true);
      this.tempItems = [];
    };
    Menu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "orientation":
            if (newProp.orientation === "Vertical") {
              this.element.classList.add(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.remove("e-hide-menu");
              }
              this.element.setAttribute("aria-orientation", "vertical");
            } else {
              this.element.classList.remove(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.remove(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
              this.element.removeAttribute("aria-orientation");
            }
            break;
          case "items":
            if (!Object.keys(oldProp.items).length) {
              this.updateMenuItems(newProp.items);
            }
            break;
          case "hamburgerMode":
            if (!this.element.previousElementSibling) {
              _super.prototype.createHeaderContainer.call(this);
            }
            if (newProp.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);
              [].slice.call(this.element.getElementsByClassName("e-blankicon")).forEach(function(li) {
                li.style[_this.enableRtl ? "paddingRight" : "paddingLeft"] = "";
              });
            } else {
              this.element.parentElement.classList.remove(HAMBURGER);
              if (this.orientation === "Vertical") {
                this.setBlankIconStyle(this.element);
              }
            }
            if (this.orientation === "Vertical") {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }
              this.element.classList.remove("e-hide-menu");
            } else {
              if (this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              } else {
                this.element.previousElementSibling.classList.remove(VMENU);
              }
              this.element.classList[newProp.hamburgerMode ? "add" : "remove"]("e-hide-menu");
            }
            break;
          case "title":
            if (this.hamburgerMode && this.element.previousElementSibling) {
              newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;
              this.element.previousElementSibling.querySelector(".e-menu-title").innerHTML = newProp.title;
            }
            break;
          case "target":
            if (this.hamburgerMode) {
              this.unWireEvents(oldProp.target);
              this.wireEvents();
              if (this.orientation === "Horizontal") {
                if (!newProp.target) {
                  if (!this.element.previousElementSibling) {
                    _super.prototype.createHeaderContainer.call(this);
                  }
                  this.element.previousElementSibling.classList.remove(VMENU);
                } else {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
            }
            break;
        }
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
    };
    Menu2.prototype.createMenuItems = function(item) {
      var idx;
      var i;
      var items = this.items;
      var pIdField = this.getField("parentId");
      if (item["" + pIdField]) {
        idx = this.getIndex(item["" + pIdField].toString(), true);
        for (i = 0; i < idx.length; i++) {
          if (!items[idx[i]].items) {
            items[idx[i]].items = [];
          }
          items = items[idx[i]].items;
        }
        items.push(item);
      } else {
        this.items.push(item);
      }
    };
    Menu2.prototype.open = function() {
      _super.prototype.openHamburgerMenu.call(this);
    };
    Menu2.prototype.close = function() {
      _super.prototype.closeHamburgerMenu.call(this);
    };
    __decorate10([
      Property("Horizontal")
    ], Menu2.prototype, "orientation", void 0);
    __decorate10([
      Property("")
    ], Menu2.prototype, "target", void 0);
    __decorate10([
      Property(null)
    ], Menu2.prototype, "template", void 0);
    __decorate10([
      Property(false)
    ], Menu2.prototype, "enableScrolling", void 0);
    __decorate10([
      Property(false)
    ], Menu2.prototype, "hamburgerMode", void 0);
    __decorate10([
      Property("Menu")
    ], Menu2.prototype, "title", void 0);
    __decorate10([
      Property(true)
    ], Menu2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], Menu2.prototype, "fields", void 0);
    Menu2 = __decorate10([
      NotifyPropertyChanges
    ], Menu2);
    return Menu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/tab/tab.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_TAB = "e-tab";
var CLS_HEADER2 = "e-tab-header";
var CLS_BLA_TEM = "blazor-template";
var CLS_CONTENT2 = "e-content";
var CLS_NEST2 = "e-nested";
var CLS_ITEMS2 = "e-items";
var CLS_ITEM3 = "e-item";
var CLS_TEMPLATE2 = "e-template";
var CLS_RTL5 = "e-rtl";
var CLS_ACTIVE2 = "e-active";
var CLS_DISABLE5 = "e-disable";
var CLS_HIDDEN2 = "e-hidden";
var CLS_FOCUS = "e-focused";
var CLS_ICONS = "e-icons";
var CLS_ICON = "e-icon";
var CLS_ICON_TAB = "e-icon-tab";
var CLS_ICON_CLOSE = "e-close-icon";
var CLS_CLOSE_SHOW = "e-close-show";
var CLS_TEXT = "e-tab-text";
var CLS_INDICATOR = "e-indicator";
var CLS_WRAP = "e-tab-wrap";
var CLS_TEXT_WRAP = "e-text-wrap";
var CLS_TAB_ICON = "e-tab-icon";
var CLS_TB_ITEMS = "e-toolbar-items";
var CLS_TB_ITEM = "e-toolbar-item";
var CLS_TB_POP = "e-toolbar-pop";
var CLS_TB_POPUP = "e-toolbar-popup";
var CLS_HOR_NAV = "e-hor-nav";
var CLS_POPUP_OPEN = "e-popup-open";
var CLS_POPUP_CLOSE = "e-popup-close";
var CLS_PROGRESS = "e-progress";
var CLS_IGNORE = "e-ignore";
var CLS_OVERLAY3 = "e-overlay";
var CLS_HSCRCNT = "e-hscroll-content";
var CLS_VSCRCNT = "e-vscroll-content";
var CLS_VTAB = "e-vertical-tab";
var CLS_VERTICAL2 = "e-vertical";
var CLS_VLEFT = "e-vertical-left";
var CLS_VRIGHT = "e-vertical-right";
var CLS_HBOTTOM = "e-horizontal-bottom";
var CLS_FILL = "e-fill-mode";
var TABITEMPREFIX = "tabitem_";
var CLS_REORDER_ACTIVE_ITEM = "e-reorder-active-item";
var TabActionSettings = (
  /** @class */
  function(_super) {
    __extends11(TabActionSettings2, _super);
    function TabActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Property("SlideLeftIn")
    ], TabActionSettings2.prototype, "effect", void 0);
    __decorate11([
      Property(600)
    ], TabActionSettings2.prototype, "duration", void 0);
    __decorate11([
      Property("ease")
    ], TabActionSettings2.prototype, "easing", void 0);
    return TabActionSettings2;
  }(ChildProperty)
);
var TabAnimationSettings = (
  /** @class */
  function(_super) {
    __extends11(TabAnimationSettings2, _super);
    function TabAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Complex({ effect: "SlideLeftIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "previous", void 0);
    __decorate11([
      Complex({ effect: "SlideRightIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "next", void 0);
    return TabAnimationSettings2;
  }(ChildProperty)
);
var Header = (
  /** @class */
  function(_super) {
    __extends11(Header2, _super);
    function Header2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Property("")
    ], Header2.prototype, "text", void 0);
    __decorate11([
      Property("")
    ], Header2.prototype, "iconCss", void 0);
    __decorate11([
      Property("left")
    ], Header2.prototype, "iconPosition", void 0);
    return Header2;
  }(ChildProperty)
);
var TabItem = (
  /** @class */
  function(_super) {
    __extends11(TabItem2, _super);
    function TabItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Complex({}, Header)
    ], TabItem2.prototype, "header", void 0);
    __decorate11([
      Property(null)
    ], TabItem2.prototype, "headerTemplate", void 0);
    __decorate11([
      Property("")
    ], TabItem2.prototype, "content", void 0);
    __decorate11([
      Property("")
    ], TabItem2.prototype, "cssClass", void 0);
    __decorate11([
      Property(false)
    ], TabItem2.prototype, "disabled", void 0);
    __decorate11([
      Property(true)
    ], TabItem2.prototype, "visible", void 0);
    __decorate11([
      Property()
    ], TabItem2.prototype, "id", void 0);
    __decorate11([
      Property(-1)
    ], TabItem2.prototype, "tabIndex", void 0);
    return TabItem2;
  }(ChildProperty)
);
var Tab = (
  /** @class */
  function(_super) {
    __extends11(Tab2, _super);
    function Tab2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.show = {};
      _this.hide = {};
      _this.maxHeight = 0;
      _this.title = "Close";
      _this.isInteracted = false;
      _this.lastIndex = 0;
      _this.isAdd = false;
      _this.isIconAlone = false;
      _this.draggableItems = [];
      _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);
      _this.keyConfigs = {
        tab: "tab",
        home: "home",
        end: "end",
        enter: "enter",
        space: "space",
        delete: "delete",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      return _this;
    }
    Tab2.prototype.destroy = function() {
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      if (!isNullOrUndefined(this.tbObj)) {
        this.tbObj.destroy();
        this.tbObj = null;
      }
      this.unWireEvents();
      this.element.removeAttribute("aria-disabled");
      this.expTemplateContent();
      if (!this.isTemplate) {
        while (this.element.firstElementChild) {
          remove(this.element.firstElementChild);
        }
      } else {
        var cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        this.element.classList.remove(CLS_TEMPLATE2);
        if (!isNullOrUndefined(cntEle)) {
          cntEle.innerHTML = this.cnt;
        }
      }
      if (this.btnCls) {
        this.btnCls = null;
      }
      this.hdrEle = null;
      this.cntEle = null;
      this.tbItems = null;
      this.tbItem = null;
      this.tbPop = null;
      this.prevItem = null;
      this.popEle = null;
      this.bdrLine = null;
      this.content = null;
      this.dragItem = null;
      this.cloneElement = null;
      this.draggingItems = [];
      if (this.draggableItems && this.draggableItems.length > 0) {
        for (var i = 0; i < this.draggableItems.length; i++) {
          this.draggableItems[i].destroy();
          this.draggableItems[i] = null;
        }
        this.draggableItems = [];
      }
      _super.prototype.destroy.call(this);
      this.trigger("destroyed");
    };
    Tab2.prototype.refresh = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      _super.prototype.refresh.call(this);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT2);
      this.prevIndex = 0;
      this.isNested = false;
      this.isPopup = false;
      this.initRender = true;
      this.isSwiped = false;
      this.itemIndexArray = [];
      this.templateEle = [];
      if (this.allowDragAndDrop) {
        this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : "#" + this.element.id + " " + ("." + CLS_HEADER2);
      }
      if (!isNullOrUndefined(nested)) {
        nested.parentElement.classList.add(CLS_NEST2);
        this.isNested = true;
      }
      var name = Browser.info.name;
      var css = name === "msie" ? "e-ie" : name === "edge" ? "e-edge" : name === "safari" ? "e-safari" : "";
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      this.setCssClass(this.element, this.cssClass, true);
      attributes(this.element, { "aria-disabled": "false" });
      this.setCssClass(this.element, css, true);
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.render = function() {
      var _this = this;
      this.btnCls = this.createElement("span", { className: CLS_ICONS + " " + CLS_ICON_CLOSE, attrs: { title: this.title } });
      this.tabId = this.element.id.length > 0 ? "-" + this.element.id : getRandomId();
      this.renderContainer();
      this.wireEvents();
      this.initRender = false;
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          if (!isNullOrUndefined(_this.tbObj)) {
            _this.tbObj.refreshOverflow();
          }
          _this.refreshActiveBorder();
        });
      }
    };
    Tab2.prototype.renderContainer = function() {
      var ele = this.element;
      this.items.forEach(function(item, index) {
        if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {
          item.setProperties({ id: TABITEMPREFIX + index.toString() }, true);
        }
      });
      if (this.items.length > 0 && ele.children.length === 0) {
        ele.appendChild(this.createElement("div", { className: CLS_CONTENT2 }));
        this.setOrientation(this.headerPlacement, this.createElement("div", { className: CLS_HEADER2 }));
        this.isTemplate = false;
      } else if (this.element.children.length > 0) {
        this.isTemplate = true;
        ele.classList.add(CLS_TEMPLATE2);
        var header = ele.querySelector("." + CLS_HEADER2);
        if (header && this.headerPlacement === "Bottom") {
          this.setOrientation(this.headerPlacement, header);
        }
      }
      if (!isNullOrUndefined(select("." + CLS_HEADER2, this.element)) && !isNullOrUndefined(select("." + CLS_CONTENT2, this.element))) {
        this.renderHeader();
        this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
        if (!isNullOrUndefined(this.tbItems)) {
          rippleEffect(this.tbItems, { selector: ".e-tab-wrap" });
        }
        this.renderContent();
        if (selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
          this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
          this.bdrLine = this.createElement("div", { className: CLS_INDICATOR + " " + CLS_HIDDEN2 + " " + CLS_IGNORE });
          var scrCnt = select("." + this.scrCntClass, this.tbItems);
          if (!isNullOrUndefined(scrCnt)) {
            scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
          } else {
            this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
          }
          this.setContentHeight(true);
          this.select(this.selectedItem);
        }
        this.setRTL(this.enableRtl);
      }
    };
    Tab2.prototype.renderHeader = function() {
      var _this = this;
      var hdrPlace = this.headerPlacement;
      var tabItems = [];
      this.hdrEle = this.getTabHeader();
      this.addVerticalClass();
      if (!this.isTemplate) {
        tabItems = this.parseObject(this.items, 0);
      } else {
        if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER2)) {
          this.setProperties({ headerPlacement: "Bottom" }, true);
        }
        var count = this.hdrEle.children.length;
        var hdrItems = [];
        for (var i = 0; i < count; i++) {
          hdrItems.push(this.hdrEle.children.item(i));
        }
        if (count > 0) {
          var tabItems_1 = this.createElement("div", { className: CLS_ITEMS2 });
          this.hdrEle.appendChild(tabItems_1);
          hdrItems.forEach(function(item, index) {
            _this.lastIndex = index;
            var attr = {
              className: CLS_ITEM3,
              id: CLS_ITEM3 + _this.tabId + "_" + index
            };
            var txt = _this.createElement("span", {
              className: CLS_TEXT,
              attrs: { "role": "presentation" }
            }).outerHTML;
            var cont = _this.createElement("div", {
              className: CLS_TEXT_WRAP,
              innerHTML: txt + _this.btnCls.outerHTML
            }).outerHTML;
            var wrap = _this.createElement("div", {
              className: CLS_WRAP,
              innerHTML: cont,
              attrs: { role: "tab", tabIndex: "-1", "aria-selected": "false", "aria-controls": CLS_CONTENT2 + _this.tabId + "_" + index, "aria-disabled": "false" }
            });
            wrap.querySelector("." + CLS_TEXT).appendChild(item);
            tabItems_1.appendChild(_this.createElement("div", attr));
            selectAll("." + CLS_ITEM3, tabItems_1)[index].appendChild(wrap);
          });
        }
      }
      this.tbObj = new Toolbar({
        width: hdrPlace === "Left" || hdrPlace === "Right" ? "auto" : "100%",
        height: hdrPlace === "Left" || hdrPlace === "Right" ? "100%" : "auto",
        overflowMode: this.overflowMode,
        items: tabItems.length !== 0 ? tabItems : [],
        clicked: this.clickHandler.bind(this),
        scrollStep: this.scrollStep,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        cssClass: this.cssClass
      });
      this.tbObj.isStringTemplate = true;
      this.tbObj.createElement = this.createElement;
      this.tbObj.appendTo(this.hdrEle);
      attributes(this.hdrEle, { role: "tablist" });
      if (!isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.hdrEle.setAttribute("aria-label", this.element.getAttribute("aria-label"));
        this.element.removeAttribute("aria-label");
      } else if (!isNullOrUndefined(this.element.getAttribute("aria-labelledby"))) {
        this.hdrEle.setAttribute("aria-labelledby", this.element.getAttribute("aria-labelledby"));
        this.element.removeAttribute("aria-labelledby");
      }
      this.setCloseButton(this.showCloseButton);
      var toolbarHeader = this.tbObj.element.querySelector("." + CLS_TB_ITEMS);
      if (!isNullOrUndefined(toolbarHeader)) {
        if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === "") {
          toolbarHeader.id = this.element.id + "_tab_header_items";
        }
      }
    };
    Tab2.prototype.renderContent = function() {
      this.cntEle = select("." + CLS_CONTENT2, this.element);
      var hdrItem = selectAll("." + CLS_TB_ITEM, this.element);
      if (this.isTemplate) {
        this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : "";
        var contents = this.cntEle.children;
        for (var i = 0; i < hdrItem.length; i++) {
          if (contents.length - 1 >= i) {
            addClass([contents.item(i)], CLS_ITEM3);
            attributes(contents.item(i), { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + i });
            contents.item(i).id = CLS_CONTENT2 + this.tabId + "_" + i;
          }
        }
      }
    };
    Tab2.prototype.reRenderItems = function() {
      this.renderContainer();
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
    };
    Tab2.prototype.parseObject = function(items, index) {
      var _this = this;
      var tbItems = Array.prototype.slice.call(selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element));
      var maxId = this.lastIndex;
      if (!this.isReplace && tbItems.length > 0) {
        var idList_1 = [];
        tbItems.forEach(function(item) {
          idList_1.push(_this.getIndexFromEle(item.id));
        });
        maxId = Math.max.apply(Math, idList_1);
      }
      var tItems = [];
      var txtWrapEle;
      var spliceArray = [];
      var i = 0;
      items.forEach(function(item, i2) {
        var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
        var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
        if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === "")) {
          spliceArray.push(i2);
          return;
        }
        var txt = item.headerTemplate || item.header.text;
        if (typeof txt === "string" && _this.enableHtmlSanitizer) {
          txt = SanitizeHtmlHelper.sanitize(txt);
        }
        var itemIndex;
        if (_this.isReplace && !isNullOrUndefined(_this.tbId) && _this.tbId !== "") {
          itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf("_") + 1), 10);
          _this.tbId = "";
        } else {
          itemIndex = index + i2;
        }
        _this.lastIndex = tbItems.length === 0 ? i2 : _this.isReplace ? itemIndex : maxId + 1 + i2;
        var disabled = item.disabled ? " " + CLS_DISABLE5 + " " + CLS_OVERLAY3 : "";
        var hidden = item.visible === false ? " " + CLS_HIDDEN2 : "";
        txtWrapEle = _this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
        var tHtml = txt instanceof Object ? txt.outerHTML : txt;
        var txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== "";
        if (!isNullOrUndefined(txt.tagName)) {
          txtWrapEle.appendChild(txt);
        } else {
          _this.headerTextCompile(txtWrapEle, txt, i2);
        }
        var tEle;
        var icon = _this.createElement("span", {
          className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
        });
        var tCont = _this.createElement("div", { className: CLS_TEXT_WRAP });
        tCont.appendChild(txtWrapEle);
        if (txt !== "" && txt !== void 0 && css !== "") {
          if (pos === "left" || pos === "top") {
            tCont.insertBefore(icon, tCont.firstElementChild);
          } else {
            tCont.appendChild(icon);
          }
          tEle = txtWrapEle;
          _this.isIconAlone = false;
        } else {
          tEle = css === "" ? txtWrapEle : icon;
          if (tEle === icon) {
            detach(txtWrapEle);
            tCont.appendChild(icon);
            _this.isIconAlone = true;
          }
        }
        var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
        var wrapAttrs = item.disabled ? { role: "tab", "aria-disabled": "true" } : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "false", "aria-disabled": "false" };
        tCont.appendChild(_this.btnCls.cloneNode(true));
        var wrap = _this.createElement("div", { className: CLS_WRAP, attrs: wrapAttrs });
        wrap.appendChild(tCont);
        if (_this.itemIndexArray instanceof Array) {
          _this.itemIndexArray.splice(index + i2, 0, CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex);
        }
        var attrObj = {
          id: CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex,
          "data-id": item.id
        };
        var tItem = { htmlAttributes: attrObj, template: wrap };
        tItem.cssClass = (item.cssClass !== void 0 ? item.cssClass : " ") + " " + disabled + " " + hidden + " " + (css !== "" ? "e-i" + pos : "") + " " + (!txtEmpty ? CLS_ICON : "");
        if (pos === "top" || pos === "bottom") {
          _this.element.classList.add("e-vertical-icon");
        }
        tItems.push(tItem);
        i2++;
      });
      if (!this.isAdd) {
        spliceArray.forEach(function(spliceItemIndex) {
          _this.items.splice(spliceItemIndex, 1);
        });
      }
      if (this.isIconAlone) {
        this.element.classList.add(CLS_ICON_TAB);
      } else {
        this.element.classList.remove(CLS_ICON_TAB);
      }
      return tItems;
    };
    Tab2.prototype.removeActiveClass = function() {
      var tabHeader = this.getTabHeader();
      if (tabHeader) {
        var tabItems = selectAll("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, tabHeader);
        [].slice.call(tabItems).forEach(function(node) {
          return node.classList.remove(CLS_ACTIVE2);
        });
        [].slice.call(tabItems).forEach(function(node) {
          return node.firstElementChild.setAttribute("aria-selected", "false");
        });
      }
    };
    Tab2.prototype.checkPopupOverflow = function(ele) {
      this.tbPop = select("." + CLS_TB_POP, this.element);
      var popIcon = select(".e-hor-nav", this.element);
      var tbrItems = select("." + CLS_TB_ITEMS, this.element);
      var lastChild = tbrItems.lastChild;
      var isOverflow = false;
      if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
        isOverflow = true;
      } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
        isOverflow = true;
      }
      if (isOverflow) {
        ele.classList.add(CLS_TB_POPUP);
        this.tbPop.insertBefore(ele, selectAll("." + CLS_TB_POPUP, this.tbPop)[0]);
      }
      return true;
    };
    Tab2.prototype.popupHandler = function(target) {
      var ripEle = target.querySelector(".e-ripple-element");
      if (!isNullOrUndefined(ripEle)) {
        ripEle.outerHTML = "";
        target.querySelector("." + CLS_WRAP).classList.remove("e-ripple");
      }
      this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
      var lastChild = this.tbItem[this.tbItem.length - 1];
      if (this.tbItem.length !== 0) {
        target.classList.remove(CLS_TB_POPUP);
        target.removeAttribute("style");
        this.tbItems.appendChild(target);
        this.actEleId = target.id;
        if (this.checkPopupOverflow(lastChild)) {
          var prevEle = this.tbItems.lastChild.previousElementSibling;
          this.checkPopupOverflow(prevEle);
        }
        this.isPopup = true;
      }
      return selectAll("." + CLS_TB_ITEM, this.tbItems).length - 1;
    };
    Tab2.prototype.setCloseButton = function(val) {
      var trg = select("." + CLS_HEADER2, this.element);
      if (val === true) {
        trg.classList.add(CLS_CLOSE_SHOW);
      } else {
        trg.classList.remove(CLS_CLOSE_SHOW);
      }
      this.tbObj.refreshOverflow();
      this.refreshActiveTabBorder();
    };
    Tab2.prototype.prevCtnAnimation = function(prev, current) {
      var animation;
      var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL5);
      if (this.isPopup || prev <= current) {
        if (this.animation.previous.effect === "SlideLeftIn") {
          animation = {
            name: "SlideLeftOut",
            duration: this.animation.previous.duration,
            timingFunction: this.animation.previous.easing
          };
        } else {
          animation = null;
        }
      } else {
        if (this.animation.next.effect === "SlideRightIn") {
          animation = {
            name: "SlideRightOut",
            duration: this.animation.next.duration,
            timingFunction: this.animation.next.easing
          };
        } else {
          animation = null;
        }
      }
      return animation;
    };
    Tab2.prototype.triggerPrevAnimation = function(oldCnt, prevIndex) {
      var _this = this;
      var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
      if (!isNullOrUndefined(animateObj)) {
        animateObj.begin = function() {
          setStyleAttribute(oldCnt, { "position": "absolute" });
          oldCnt.classList.add(CLS_PROGRESS);
          oldCnt.classList.add("e-view");
        };
        animateObj.end = function() {
          oldCnt.style.display = "none";
          oldCnt.classList.remove(CLS_ACTIVE2);
          oldCnt.classList.remove(CLS_PROGRESS);
          oldCnt.classList.remove("e-view");
          setStyleAttribute(oldCnt, { "display": "", "position": "" });
          if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
            detach(oldCnt);
          }
        };
        new Animation(animateObj).animate(oldCnt);
      } else {
        oldCnt.classList.remove(CLS_ACTIVE2);
      }
    };
    Tab2.prototype.triggerAnimation = function(id, value) {
      var _this = this;
      var prevIndex = this.prevIndex;
      var oldCnt;
      var itemCollection = [].slice.call(this.element.querySelector("." + CLS_CONTENT2).children);
      itemCollection.forEach(function(item) {
        if (item.id === _this.prevActiveEle) {
          oldCnt = item;
        }
      });
      var prevEle = this.tbItem[prevIndex];
      var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));
      if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {
        var idNo = this.extIndex(prevEle.id);
        oldCnt = this.getTrgContent(this.cntEle, idNo);
      }
      if (!isNullOrUndefined(newCnt)) {
        this.prevActiveEle = newCnt.id;
      }
      var isPrevent = isNullOrUndefined(this.animation) || isNullOrUndefined(this.animation.next.effect) || isNullOrUndefined(this.animation.previous.effect) || this.animation.previous.effect === "None" || this.animation.next.effect === "None";
      if (this.initRender || value === false || isPrevent) {
        if (oldCnt && oldCnt !== newCnt) {
          oldCnt.classList.remove(CLS_ACTIVE2);
        }
        return;
      }
      var cnt = select("." + CLS_CONTENT2, this.element);
      var animateObj;
      if (this.prevIndex > this.selectedItem && !this.isPopup) {
        var openEff = this.animation.previous.effect;
        animateObj = {
          name: openEff === "None" ? "" : openEff !== "SlideLeftIn" ? openEff : "SlideLeftIn",
          duration: this.animation.previous.duration === 0 && animationMode === "Enable" ? 600 : this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
        var clsEff = this.animation.next.effect;
        animateObj = {
          name: clsEff === "None" ? "" : clsEff !== "SlideRightIn" ? clsEff : "SlideRightIn",
          duration: this.animation.next.duration === 0 && animationMode === "Enable" ? 600 : this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      }
      animateObj.progress = function() {
        cnt.classList.add(CLS_PROGRESS);
        _this.setActiveBorder();
      };
      animateObj.end = function() {
        cnt.classList.remove(CLS_PROGRESS);
        newCnt.classList.add(CLS_ACTIVE2);
      };
      if (!this.initRender && !isNullOrUndefined(oldCnt)) {
        this.triggerPrevAnimation(oldCnt, prevIndex);
      }
      this.isPopup = false;
      if (animateObj.name === "") {
        newCnt.classList.add(CLS_ACTIVE2);
      } else {
        new Animation(animateObj).animate(newCnt);
      }
    };
    Tab2.prototype.keyPressed = function(trg) {
      var trgParent = closest(trg, "." + CLS_HEADER2 + " ." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (!isNullOrUndefined(this.popEle) && trg.classList.contains("e-hor-nav")) {
        this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
      } else if (trg.classList.contains("e-scroll-nav")) {
        trg.click();
      } else {
        if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE2) === false) {
          this.selectTab(trgIndex, null, true);
          if (!isNullOrUndefined(this.popEle)) {
            this.popObj.hide(this.hide);
          }
        }
      }
    };
    Tab2.prototype.getTabHeader = function() {
      if (isNullOrUndefined(this.element)) {
        return void 0;
      }
      var headers = [].slice.call(this.element.children).filter(function(e) {
        return e.classList.contains(CLS_HEADER2);
      });
      if (headers.length > 0) {
        return headers[0];
      } else {
        var wrap = [].slice.call(this.element.children).filter(function(e) {
          return !e.classList.contains(CLS_BLA_TEM);
        })[0];
        if (!wrap) {
          return void 0;
        }
        return [].slice.call(wrap.children).filter(function(e) {
          return e.classList.contains(CLS_HEADER2);
        })[0];
      }
    };
    Tab2.prototype.getEleIndex = function(item) {
      return Array.prototype.indexOf.call(selectAll("." + CLS_TB_ITEM, this.getTabHeader()), item);
    };
    Tab2.prototype.extIndex = function(id) {
      return id.replace(CLS_ITEM3 + this.tabId + "_", "");
    };
    Tab2.prototype.expTemplateContent = function() {
      var _this = this;
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(_this.element.querySelector(eleStr))) {
          document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Tab2.prototype.templateCompile = function(ele, cnt, index) {
      var tempEle = this.createElement("div");
      this.compileElement(tempEle, cnt, "content", index);
      if (tempEle.childNodes.length !== 0) {
        ele.appendChild(tempEle);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.compileElement = function(ele, val, prop, index) {
      var templateFn;
      if (typeof val === "string") {
        val = val.trim();
        if (this.isVue) {
          templateFn = compile(this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(val) : val);
        } else {
          ele.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(val) : val;
        }
      } else {
        templateFn = compile(val);
      }
      var templateFUN;
      if (!isNullOrUndefined(templateFn)) {
        templateFUN = templateFn({}, this, prop);
      }
      if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function(el) {
          ele.appendChild(el);
        });
      }
    };
    Tab2.prototype.headerTextCompile = function(element, text, index) {
      this.compileElement(element, text, "headerTemplate", index);
    };
    Tab2.prototype.getContent = function(ele, cnt, callType, index) {
      var eleStr;
      cnt = isNullOrUndefined(cnt) ? "" : cnt;
      if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
        if (typeof cnt === "string" && this.enableHtmlSanitizer) {
          cnt = SanitizeHtmlHelper.sanitize(cnt);
        }
        if (cnt[0] === "." || cnt[0] === "#") {
          if (document.querySelectorAll(cnt).length) {
            var eleVal = document.querySelector(cnt);
            eleStr = eleVal.outerHTML.trim();
            if (callType === "clone") {
              ele.appendChild(eleVal.cloneNode(true));
            } else {
              ele.appendChild(eleVal);
              eleVal.style.display = "";
            }
          } else {
            this.templateCompile(ele, cnt, index);
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        ele.appendChild(cnt);
      }
      if (!isNullOrUndefined(eleStr)) {
        if (this.templateEle.indexOf(cnt.toString()) === -1) {
          this.templateEle.push(cnt.toString());
        }
      }
    };
    Tab2.prototype.getTrgContent = function(cntEle, no) {
      var ele;
      if (this.element.classList.contains(CLS_NEST2)) {
        ele = select("." + CLS_NEST2 + "> ." + CLS_CONTENT2 + " > #" + CLS_CONTENT2 + this.tabId + "_" + no, this.element);
      } else {
        ele = this.findEle(cntEle.children, CLS_CONTENT2 + this.tabId + "_" + no);
      }
      return ele;
    };
    Tab2.prototype.findEle = function(items, key) {
      var ele;
      for (var i = 0; i < items.length; i++) {
        if (items[i].id === key) {
          ele = items[i];
          break;
        }
      }
      return ele;
    };
    Tab2.prototype.isVertical = function() {
      var isVertical = this.headerPlacement === "Left" || this.headerPlacement === "Right" ? true : false;
      this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
      return isVertical;
    };
    Tab2.prototype.addVerticalClass = function() {
      if (this.isVertical()) {
        var tbPos = this.headerPlacement === "Left" ? CLS_VLEFT : CLS_VRIGHT;
        addClass([this.hdrEle], [CLS_VERTICAL2, tbPos]);
        if (!this.element.classList.contains(CLS_NEST2)) {
          addClass([this.element], [CLS_VTAB, tbPos]);
        } else {
          addClass([this.hdrEle], [CLS_VTAB, tbPos]);
        }
      }
      if (this.headerPlacement === "Bottom") {
        addClass([this.hdrEle], [CLS_HBOTTOM]);
      }
    };
    Tab2.prototype.updatePopAnimationConfig = function() {
      this.show = { name: this.isVertical() ? "FadeIn" : "SlideDown", duration: 100 };
      this.hide = { name: this.isVertical() ? "FadeOut" : "SlideUp", duration: 100 };
    };
    Tab2.prototype.changeOrientation = function(place) {
      this.setOrientation(place, this.hdrEle);
      var activeTab = this.hdrEle.querySelector("." + CLS_ACTIVE2);
      var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL2) ? true : false;
      removeClass([this.element], [CLS_VTAB]);
      removeClass([this.hdrEle], [CLS_VERTICAL2, CLS_VLEFT, CLS_VRIGHT]);
      if (isVertical !== this.isVertical()) {
        this.changeToolbarOrientation();
        if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {
          this.popupHandler(activeTab);
        }
      }
      this.addVerticalClass();
      this.setActiveBorder();
      this.focusItem();
    };
    Tab2.prototype.focusItem = function() {
      var curActItem = select(" #" + CLS_ITEM3 + this.tabId + "_" + this.selectedItem, this.hdrEle);
      if (!isNullOrUndefined(curActItem)) {
        curActItem.firstElementChild.focus();
      }
    };
    Tab2.prototype.changeToolbarOrientation = function() {
      this.tbObj.setProperties({ height: this.isVertical() ? "100%" : "auto", width: this.isVertical() ? "auto" : "100%" }, true);
      this.tbObj.changeOrientation();
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.setOrientation = function(place, ele) {
      var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
      var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector("." + CLS_CONTENT2));
      if (place === "Bottom" && contentPos > headerPos) {
        this.element.appendChild(ele);
      } else {
        removeClass([ele], [CLS_HBOTTOM]);
        this.element.insertBefore(ele, select("." + CLS_CONTENT2, this.element));
      }
    };
    Tab2.prototype.setCssClass = function(ele, cls, val) {
      if (cls === "" || isNullOrUndefined(cls)) {
        return;
      }
      var list = cls.split(" ");
      for (var i = 0; i < list.length; i++) {
        if (val) {
          ele.classList.add(list[i]);
        } else {
          ele.classList.remove(list[i]);
        }
      }
    };
    Tab2.prototype.setContentHeight = function(val) {
      if (this.element.classList.contains(CLS_FILL)) {
        removeClass([this.element], [CLS_FILL]);
      }
      if (isNullOrUndefined(this.cntEle)) {
        return;
      }
      var hdrEle = this.getTabHeader();
      if (this.heightAdjustMode === "None") {
        if (this.height === "auto") {
          return;
        } else {
          if (!this.isVertical()) {
            setStyleAttribute(this.cntEle, { "height": this.element.clientHeight - hdrEle.offsetHeight + "px" });
          }
        }
      } else if (this.heightAdjustMode === "Fill") {
        addClass([this.element], [CLS_FILL]);
        setStyleAttribute(this.element, { "height": "100%" });
        this.cntEle.style.height = "calc(100% - " + this.hdrEle.offsetHeight + "px)";
      } else if (this.heightAdjustMode === "Auto") {
        if (this.isTemplate === true) {
          var cnt = selectAll("." + CLS_CONTENT2 + " > ." + CLS_ITEM3, this.element);
          for (var i = 0; i < cnt.length; i++) {
            cnt[i].setAttribute("style", "display:block; visibility: visible");
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
            cnt[i].style.removeProperty("display");
            cnt[i].style.removeProperty("visibility");
          }
        } else {
          this.cntEle = select("." + CLS_CONTENT2, this.element);
          if (val === true) {
            this.cntEle.appendChild(this.createElement("div", {
              id: CLS_CONTENT2 + this.tabId + "_0",
              className: CLS_ITEM3 + " " + CLS_ACTIVE2,
              attrs: { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_0" }
            }));
          }
          var ele = this.cntEle.children.item(0);
          for (var i = 0; i < this.items.length; i++) {
            this.getContent(ele, this.items[i].content, "clone", i);
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));
            while (ele.firstChild) {
              ele.removeChild(ele.firstChild);
            }
          }
          if (this.isReact || this.isAngular || this.isVue) {
            this.clearTemplate(["content"]);
          }
          this.templateEle = [];
          this.getContent(ele, this.items[0].content, "render", 0);
          if (this.prevIndex !== this.selectedItem) {
            ele.classList.remove(CLS_ACTIVE2);
          }
        }
        setStyleAttribute(this.cntEle, { "height": this.maxHeight + "px" });
      } else {
        setStyleAttribute(this.cntEle, { "height": "auto" });
      }
    };
    Tab2.prototype.getHeight = function(ele) {
      var cs = window.getComputedStyle(ele);
      return ele.offsetHeight + parseFloat(cs.getPropertyValue("padding-top")) + parseFloat(cs.getPropertyValue("padding-bottom")) + parseFloat(cs.getPropertyValue("margin-top")) + parseFloat(cs.getPropertyValue("margin-bottom"));
    };
    Tab2.prototype.setActiveBorder = function() {
      var trgHdrEle = this.getTabHeader();
      var trg = select("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, trgHdrEle);
      if (isNullOrUndefined(trg)) {
        return;
      }
      if (!this.reorderActiveTab) {
        if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN2)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {
          trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);
        }
      } else if (trgHdrEle) {
        trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);
      }
      var root = closest(trg, "." + CLS_TAB);
      if (this.element !== root) {
        return;
      }
      this.tbItems = select("." + CLS_TB_ITEMS, trgHdrEle);
      var bar = select("." + CLS_INDICATOR, trgHdrEle);
      var scrollCnt = select("." + CLS_TB_ITEMS + " ." + this.scrCntClass, trgHdrEle);
      if (this.isVertical()) {
        setStyleAttribute(bar, { "left": "", "right": "" });
        var tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;
        if (tbHeight !== 0) {
          setStyleAttribute(bar, { "top": trg.offsetTop + "px", "height": trg.offsetHeight + "px" });
        } else {
          setStyleAttribute(bar, { "top": 0, "height": 0 });
        }
      } else {
        if (this.overflowMode === "MultiRow") {
          var top_1 = this.headerPlacement === "Bottom" ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;
          setStyleAttribute(bar, { "top": top_1 + "px", "height": "" });
        } else {
          setStyleAttribute(bar, { "top": "", "height": "" });
        }
        var tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;
        if (tbWidth !== 0) {
          setStyleAttribute(bar, { "left": trg.offsetLeft + "px", "right": tbWidth - (trg.offsetLeft + trg.offsetWidth) + "px" });
        } else {
          setStyleAttribute(bar, { "left": "auto", "right": "auto" });
        }
      }
      if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {
        this.bdrLine.classList.remove(CLS_HIDDEN2);
      }
    };
    Tab2.prototype.setActive = function(value, skipDataBind, isInteracted) {
      if (skipDataBind === void 0) {
        skipDataBind = false;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
      var trg = this.tbItem[value];
      if (value < 0 || isNaN(value) || this.tbItem.length === 0 || !isNullOrUndefined(trg) && trg.classList.contains(CLS_DISABLE5)) {
        return;
      }
      if (value >= 0 && !skipDataBind) {
        this.allowServerDataBinding = false;
        this.setProperties({ selectedItem: value }, true);
        this.allowServerDataBinding = true;
        if (!this.initRender) {
          this.serverDataBind();
        }
      }
      if (trg.classList.contains(CLS_ACTIVE2)) {
        this.setActiveBorder();
        return;
      }
      if (!this.isTemplate) {
        attributes(trg.firstElementChild, { "aria-controls": CLS_CONTENT2 + this.tabId + "_" + value });
      }
      var id = trg.id;
      this.removeActiveClass();
      trg.classList.add(CLS_ACTIVE2);
      trg.firstElementChild.setAttribute("aria-selected", "true");
      var no = Number(this.extIndex(id));
      if (isNullOrUndefined(this.prevActiveEle)) {
        this.prevActiveEle = CLS_CONTENT2 + this.tabId + "_" + no;
      }
      if (this.isTemplate) {
        if (select("." + CLS_CONTENT2, this.element).children.length > 0) {
          var trg_1 = this.findEle(select("." + CLS_CONTENT2, this.element).children, CLS_CONTENT2 + this.tabId + "_" + no);
          if (!isNullOrUndefined(trg_1)) {
            trg_1.classList.add(CLS_ACTIVE2);
          }
          this.triggerAnimation(id, this.enableAnimation);
        }
      } else {
        this.cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));
        if (isNullOrUndefined(item)) {
          this.cntEle.appendChild(this.createElement("div", {
            id: CLS_CONTENT2 + this.tabId + "_" + this.extIndex(id),
            className: CLS_ITEM3 + " " + CLS_ACTIVE2,
            attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + this.extIndex(id) }
          }));
          var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
          var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
          this.getContent(eleTrg, this.items[itemIndex].content, "render", itemIndex);
        } else {
          item.classList.add(CLS_ACTIVE2);
        }
        this.triggerAnimation(id, this.enableAnimation);
      }
      this.setActiveBorder();
      this.refreshItemVisibility(trg);
      if (!this.initRender && !skipDataBind) {
        var eventArg = {
          previousItem: this.prevItem,
          previousIndex: this.prevIndex,
          selectedItem: trg,
          selectedIndex: value,
          selectedContent: select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content),
          isSwiped: this.isSwiped,
          isInteracted,
          preventFocus: false
        };
        this.trigger("selected", eventArg, function(selectEventArgs) {
          if (!selectEventArgs.preventFocus) {
            trg.firstElementChild.focus();
          }
        });
      }
    };
    Tab2.prototype.setItems = function(items) {
      this.isReplace = true;
      this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
      this.tbObj.items = this.parseObject(items, 0);
      this.tbObj.dataBind();
      this.isReplace = false;
    };
    Tab2.prototype.setRTL = function(value) {
      this.tbObj.enableRtl = value;
      this.tbObj.dataBind();
      this.setCssClass(this.element, CLS_RTL5, value);
      this.refreshActiveBorder();
    };
    Tab2.prototype.refreshActiveBorder = function() {
      if (!isNullOrUndefined(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN2);
      }
      this.setActiveBorder();
    };
    Tab2.prototype.showPopup = function(config) {
      var tbPop = select(".e-popup.e-toolbar-pop", this.hdrEle);
      if (tbPop && tbPop.classList.contains("e-popup-close")) {
        var tbPopObj = tbPop && tbPop.ej2_instances[0];
        tbPopObj.position.X = this.headerPlacement === "Left" || this.element.classList.contains(CLS_RTL5) ? "left" : "right";
        tbPopObj.dataBind();
        tbPopObj.show(config);
      }
    };
    Tab2.prototype.bindDraggable = function() {
      var _this = this;
      if (this.allowDragAndDrop) {
        var tabHeader = this.element.querySelector("." + CLS_HEADER2);
        if (tabHeader) {
          var items = Array.prototype.slice.call(tabHeader.querySelectorAll("." + CLS_TB_ITEM));
          items.forEach(function(element) {
            _this.initializeDrag(element);
          });
        }
      }
    };
    Tab2.prototype.wireEvents = function() {
      this.bindDraggable();
      window.addEventListener("resize", this.resizeContext);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "keydown", this.spaceKeyDown, this);
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
      this.tabKeyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: { openPopup: "shift+f10", tab: "tab", shiftTab: "shift+tab" },
        eventName: "keydown"
      });
    };
    Tab2.prototype.unWireEvents = function() {
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
      if (!isNullOrUndefined(this.tabKeyModule)) {
        this.tabKeyModule.destroy();
      }
      if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      window.removeEventListener("resize", this.resizeContext);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "keydown", this.spaceKeyDown);
      this.element.classList.remove(CLS_RTL5);
      this.element.classList.remove(CLS_FOCUS);
    };
    Tab2.prototype.clickHandler = function(args) {
      this.element.classList.remove(CLS_FOCUS);
      var trg = args.originalEvent.target;
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (trg.classList.contains(CLS_ICON_CLOSE)) {
        this.removeTab(trgIndex);
      } else if (this.isVertical() && closest(trg, "." + CLS_HOR_NAV)) {
        this.showPopup(this.show);
      } else {
        this.isPopup = false;
        if (!isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {
          this.selectTab(trgIndex, args.originalEvent, true);
        }
      }
    };
    Tab2.prototype.swipeHandler = function(e) {
      if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {
        return;
      }
      if (this.isNested) {
        this.element.setAttribute("data-swipe", "true");
      }
      var nestedTab = this.element.querySelector('[data-swipe="true"]');
      if (nestedTab) {
        nestedTab.removeAttribute("data-swipe");
        return;
      }
      this.isSwiped = true;
      if (e.swipeDirection === "Right" && this.selectedItem !== 0) {
        for (var k = this.selectedItem - 1; k >= 0; k--) {
          if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(k, null, true);
            break;
          }
        }
      } else if (e.swipeDirection === "Left" && this.selectedItem !== selectAll("." + CLS_TB_ITEM, this.element).length - 1) {
        for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
          if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(i, null, true);
            break;
          }
        }
      }
      this.isSwiped = false;
    };
    Tab2.prototype.spaceKeyDown = function(e) {
      if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
        var clstHead = closest(e.target, "." + CLS_HEADER2);
        if (!isNullOrUndefined(clstHead)) {
          e.preventDefault();
        }
      }
    };
    Tab2.prototype.keyHandler = function(e) {
      if (this.element.classList.contains(CLS_DISABLE5)) {
        return;
      }
      this.element.classList.add(CLS_FOCUS);
      var trg = e.target;
      var tabHeader = this.getTabHeader();
      var actEle = select("." + CLS_ACTIVE2, tabHeader);
      this.popEle = select("." + CLS_TB_POP, tabHeader);
      if (!isNullOrUndefined(this.popEle)) {
        this.popObj = this.popEle.ej2_instances[0];
      }
      var item = closest(document.activeElement, "." + CLS_TB_ITEM);
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      switch (e.action) {
        case "space":
        case "enter":
          if (trg.parentElement.classList.contains(CLS_DISABLE5)) {
            return;
          }
          if (e.action === "enter" && trg.classList.contains("e-hor-nav")) {
            this.showPopup(this.show);
            break;
          }
          this.keyPressed(trg);
          break;
        case "tab":
        case "shiftTab":
          if (trg.classList.contains(CLS_WRAP) && closest(trg, "." + CLS_TB_ITEM).classList.contains(CLS_ACTIVE2) === false) {
            trg.setAttribute("tabindex", trg.getAttribute("data-tabindex"));
          }
          if (this.popObj && isVisible(this.popObj.element)) {
            this.popObj.hide(this.hide);
          }
          if (!isNullOrUndefined(actEle) && actEle.children.item(0).getAttribute("tabindex") === "-1") {
            actEle.children.item(0).setAttribute("tabindex", "0");
          }
          break;
        case "moveLeft":
        case "moveRight":
          if (!isNullOrUndefined(item)) {
            this.refreshItemVisibility(item);
          }
          break;
        case "openPopup":
          e.preventDefault();
          if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
            this.popObj.show(this.show);
          }
          break;
        case "delete":
          if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {
            var nxtSib = trgParent.nextSibling;
            if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
              nxtSib.firstElementChild.focus();
            }
            this.removeTab(this.getEleIndex(trgParent));
          }
          this.setActiveBorder();
          break;
      }
    };
    Tab2.prototype.refreshItemVisibility = function(target) {
      var scrCnt = select("." + this.scrCntClass, this.tbItems);
      if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {
        var scrBar = select(".e-hscroll-bar", this.tbItems);
        var scrStart = scrBar.scrollLeft;
        var scrEnd = scrStart + scrBar.offsetWidth;
        var eleStart = target.offsetLeft;
        var eleWidth = target.offsetWidth;
        var eleEnd = target.offsetLeft + target.offsetWidth;
        if (scrStart < eleStart && scrEnd < eleEnd) {
          var eleViewRange = scrEnd - eleStart;
          scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
        } else {
          if (scrStart > eleStart && scrEnd > eleEnd) {
            var eleViewRange = eleEnd - scrStart;
            scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
          }
        }
      } else {
        return;
      }
    };
    Tab2.prototype.getIndexFromEle = function(id) {
      return parseInt(id.substring(id.lastIndexOf("_") + 1), 10);
    };
    Tab2.prototype.hoverHandler = function(e) {
      var trg = e.target;
      if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
        trg.setAttribute("title", new L10n("tab", { closeButtonTitle: this.title }, this.locale).getConstant("closeButtonTitle"));
      }
    };
    Tab2.prototype.evalOnPropertyChangeItems = function(newProp, oldProp) {
      var _this = this;
      if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
        var changedProp = Object.keys(newProp.items);
        for (var i = 0; i < changedProp.length; i++) {
          var index = parseInt(Object.keys(newProp.items)[i], 10);
          var properties = Object.keys(newProp.items[index]);
          for (var j = 0; j < properties.length; j++) {
            var oldVal = Object(oldProp.items[index])[properties[j]];
            var newVal = Object(newProp.items[index])[properties[j]];
            var hdr = this.element.querySelectorAll("." + CLS_TB_ITEM)[index];
            var itemIndex = void 0;
            if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== "") {
              itemIndex = this.getIndexFromEle(hdr.id);
            } else {
              itemIndex = index;
            }
            var hdrItem = select("." + CLS_TB_ITEMS + " #" + CLS_ITEM3 + this.tabId + "_" + itemIndex, this.element);
            var cntItem = select("." + CLS_CONTENT2 + " #" + CLS_CONTENT2 + this.tabId + "_" + itemIndex, this.element);
            if (properties[j] === "header" || properties[j] === "headerTemplate") {
              var icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? "" : this.items[index].header.iconCss;
              var textVal = this.items[index].headerTemplate || this.items[index].header.text;
              if (properties[j] === "headerTemplate") {
                this.clearTabTemplate(hdrItem, properties[j], CLS_TB_ITEM);
              }
              if (textVal === "" && icon === "") {
                this.removeTab(index);
              } else {
                this.tbId = hdr.id;
                var arr = [];
                arr.push(this.items[index]);
                this.items.splice(index, 1);
                this.itemIndexArray.splice(index, 1);
                this.tbObj.items.splice(index, 1);
                var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN2);
                detach(hdrItem);
                this.isReplace = true;
                this.addTab(arr, index);
                if (isHiddenEle) {
                  this.hideTab(index);
                }
                this.isReplace = false;
              }
            }
            if (properties[j] === "content" && !isNullOrUndefined(cntItem)) {
              var strVal = typeof newVal === "string" || isNullOrUndefined(newVal.innerHTML);
              if (strVal && (newVal[0] === "." || newVal[0] === "#") && newVal.length) {
                var eleVal = document.querySelector(newVal);
                cntItem.appendChild(eleVal);
                eleVal.style.display = "";
              } else if (newVal === "" && oldVal[0] === "#") {
                document.body.appendChild(this.element.querySelector(oldVal)).style.display = "none";
                cntItem.innerHTML = newVal;
              } else if (this.isAngular || this.isReact) {
                this.clearTabTemplate(cntItem, properties[j], CLS_ITEM3);
                cntItem.innerHTML = "";
                this.templateCompile(cntItem, newVal, index);
              } else if (typeof newVal !== "function") {
                cntItem.innerHTML = newVal;
              }
            }
            if (properties[j] === "cssClass") {
              if (!isNullOrUndefined(hdrItem)) {
                hdrItem.classList.remove(oldVal);
                hdrItem.classList.add(newVal);
              }
              if (!isNullOrUndefined(cntItem)) {
                cntItem.classList.remove(oldVal);
                cntItem.classList.add(newVal);
              }
            }
            if (properties[j] === "disabled") {
              this.enableTab(index, newVal === true ? false : true);
            }
            if (properties[j] === "visible") {
              this.hideTab(index, newVal === true ? false : true);
            }
          }
        }
        if (this.isReact && this.portals && this.portals.length > 0) {
          this.renderReactTemplates(function() {
            _this.refreshActiveTabBorder();
          });
        }
      } else {
        this.lastIndex = 0;
        if (isNullOrUndefined(this.tbObj)) {
          this.reRenderItems();
        } else {
          if (this.isReact || this.isAngular) {
            this.clearTemplate();
          }
          this.setItems(newProp.items);
          if (this.templateEle.length > 0) {
            this.expTemplateContent();
          }
          this.templateEle = [];
          var selectElement = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
          while (selectElement.firstElementChild) {
            detach(selectElement.firstElementChild);
          }
          this.select(this.selectedItem);
          this.draggableItems = [];
          this.bindDraggable();
        }
      }
    };
    Tab2.prototype.clearTabTemplate = function(templateEle, templateName, className) {
      if (!this.clearTemplates) {
        return;
      }
      if (this.registeredTemplate && this.registeredTemplate[templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates[templateName].length; index++) {
          var registeredItem = registeredTemplates[templateName][index].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], [registeredTemplates[templateName][index]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[index];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Tab2.prototype.initializeDrag = function(target) {
      var _this = this;
      var dragObj = new Draggable(target, {
        dragArea: this.dragArea,
        dragTarget: "." + CLS_TB_ITEM,
        clone: true,
        helper: this.helper.bind(this),
        dragStart: this.itemDragStart.bind(this),
        drag: function(e) {
          var dragIndex = _this.getEleIndex(_this.dragItem);
          var dropIndex;
          var dropItem;
          var dragArgs = {
            draggedItem: _this.dragItem,
            event: e.event,
            target: e.target,
            droppedItem: e.target.closest("." + CLS_TB_ITEM),
            clonedElement: _this.cloneElement,
            index: dragIndex
          };
          if (!isNullOrUndefined(e.target.closest("." + CLS_TAB)) && !e.target.closest("." + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== "." + CLS_HEADER2) {
            _this.trigger("dragging", dragArgs);
          } else {
            if (!e.target.closest(_this.dragArea) && _this.overflowMode !== "Popup") {
              document.body.style.cursor = "not-allowed";
              addClass([_this.cloneElement], CLS_HIDDEN2);
              if (_this.dragItem.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.dragItem], CLS_HIDDEN2);
              }
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
            } else {
              document.body.style.cursor = "";
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
              if (_this.cloneElement.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.cloneElement], CLS_HIDDEN2);
              }
            }
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              var scrollRightNavEle = _this.element.querySelector(".e-scroll-right-nav");
              var scrollLeftNavEle = _this.element.querySelector(".e-scroll-left-nav");
              var hscrollBar = _this.element.querySelector(".e-hscroll-bar");
              if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                hscrollBar.scrollLeft -= 10;
              }
              if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {
                hscrollBar.scrollLeft += 10;
              }
            }
            _this.cloneElement.style.pointerEvents = "none";
            dropItem = closest(e.target, "." + CLS_TB_ITEM + ".e-draggable");
            var scrollContentWidth = 0;
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              scrollContentWidth = _this.element.querySelector(".e-hscroll-content").offsetWidth;
            }
            if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest("." + CLS_TAB).isSameNode(_this.dragItem.closest("." + CLS_TAB))) {
              dropIndex = _this.getEleIndex(dropItem);
              if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
              if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
            }
            _this.droppedIndex = _this.getEleIndex(_this.dragItem);
            _this.trigger("dragging", dragArgs);
          }
        },
        dragStop: this.itemDragStop.bind(this)
      });
      this.draggableItems.push(dragObj);
    };
    Tab2.prototype.helper = function(e) {
      this.cloneElement = this.createElement("div");
      if (e.element) {
        this.cloneElement = e.element.cloneNode(true);
        addClass([this.cloneElement], "e-tab-clone-element");
        if (this.element.querySelector("." + CLS_HEADER2).classList.contains(CLS_CLOSE_SHOW)) {
          addClass([this.cloneElement], CLS_CLOSE_SHOW);
        }
        removeClass([this.cloneElement.querySelector("." + CLS_WRAP)], "e-ripple");
        if (!isNullOrUndefined(this.cloneElement.querySelector(".e-ripple-element"))) {
          remove(this.cloneElement.querySelector(".e-ripple-element"));
        }
        document.body.appendChild(this.cloneElement);
      }
      return this.cloneElement;
    };
    Tab2.prototype.itemDragStart = function(e) {
      var _this = this;
      this.draggingItems = this.items.map(function(x) {
        return x;
      });
      this.dragItem = e.element;
      var dragArgs = {
        draggedItem: e.element,
        event: e.event,
        target: e.target,
        droppedItem: null,
        index: this.getEleIndex(this.dragItem),
        clonedElement: this.cloneElement,
        cancel: false
      };
      this.trigger("onDragStart", dragArgs, function(tabItemDragArgs) {
        if (tabItemDragArgs.cancel) {
          var dragObj = e.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          detach(_this.cloneElement);
        } else {
          _this.removeActiveClass();
          addClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
          _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
        }
      });
    };
    Tab2.prototype.dragAction = function(dropItem, dragsIndex, dropIndex) {
      if (this.items.length > 0) {
        var item = this.draggingItems[dragsIndex];
        this.draggingItems.splice(dragsIndex, 1);
        this.draggingItems.splice(dropIndex, 0, item);
      }
      if (this.overflowMode === "MultiRow") {
        dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
      }
      if (dragsIndex > dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          } else {
            var lastEle = dropItem.parentElement.lastChild;
            if (dropItem.isSameNode(lastEle)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
        }
      }
      if (dragsIndex < dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
        }
      }
    };
    Tab2.prototype.itemDragStop = function(e) {
      var _this = this;
      detach(this.cloneElement);
      this.cloneElement = null;
      this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
      document.body.style.cursor = "";
      var dragStopArgs = {
        draggedItem: this.dragItem,
        event: e.event,
        target: e.target,
        droppedItem: this.tbItem[this.droppedIndex],
        clonedElement: null,
        index: this.droppedIndex,
        cancel: false
      };
      this.trigger("dragged", dragStopArgs, function(tabItemDropArgs) {
        if (tabItemDropArgs.cancel) {
          _this.refresh();
        } else {
          if (_this.items.length > 0 && _this.draggingItems.length > 0) {
            _this.items = _this.draggingItems;
            _this.selectedItem = _this.droppedIndex;
            _this.refresh();
          } else {
            _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "";
            removeClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
            _this.selectTab(_this.droppedIndex, null, true);
          }
        }
      });
      this.dragItem = null;
    };
    Tab2.prototype.enableTab = function(index, value) {
      var tbItems = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(tbItems)) {
        return;
      }
      if (value === true) {
        tbItems.classList.remove(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.setAttribute("tabindex", tbItems.firstElementChild.getAttribute("data-tabindex"));
      } else {
        tbItems.classList.add(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.removeAttribute("tabindex");
        if (tbItems.classList.contains(CLS_ACTIVE2)) {
          this.select(index + 1);
        }
      }
      if (!isNullOrUndefined(this.items[index])) {
        this.items[index].disabled = !value;
        this.dataBind();
      }
      tbItems.firstElementChild.setAttribute("aria-disabled", value === true ? "false" : "true");
    };
    Tab2.prototype.addTab = function(items, index) {
      var _this = this;
      var addArgs = { addedItems: items, cancel: false };
      if (!this.isReplace) {
        this.trigger("adding", addArgs, function(tabAddingArgs) {
          if (!tabAddingArgs.cancel) {
            _this.addingTabContent(items, index);
          }
        });
      } else {
        this.addingTabContent(items, index);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.addingTabContent = function(items, index) {
      var _this = this;
      var lastEleIndex = 0;
      this.hdrEle = select("." + CLS_HEADER2, this.element);
      if (isNullOrUndefined(this.hdrEle)) {
        this.items = items;
        this.reRenderItems();
        this.bindDraggable();
      } else {
        var itemsCount = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element).length;
        if (itemsCount !== 0) {
          lastEleIndex = this.lastIndex + 1;
        }
        if (isNullOrUndefined(index)) {
          index = itemsCount - 1;
        }
        if (itemsCount < index || index < 0 || isNaN(index)) {
          return;
        }
        if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {
          this.hdrEle.style.display = "";
        }
        if (!isNullOrUndefined(this.bdrLine)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
        this.isAdd = true;
        var tabItems_2 = this.parseObject(items, index);
        this.isAdd = false;
        var i_1 = 0;
        var textValue_1;
        items.forEach(function(item, place) {
          textValue_1 = item.headerTemplate || item.header.text;
          if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue_1) || textValue_1.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {
            if (tabItems_2[place]) {
              if (isNullOrUndefined(item.id)) {
                item.id = CLS_ITEM3 + _this.tabId + "_" + TABITEMPREFIX + (lastEleIndex + place).toString();
              }
              tabItems_2[place].htmlAttributes["data-id"] = item.id;
            }
            _this.items.splice(index + i_1, 0, item);
            i_1++;
          }
          if (_this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {
            var no = lastEleIndex + place;
            var ele = _this.createElement("div", {
              id: CLS_CONTENT2 + _this.tabId + "_" + no,
              className: CLS_ITEM3,
              attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + "_" + no }
            });
            _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);
            var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());
            _this.getContent(eleTrg, item.content, "render", index);
          }
        });
        this.tbObj.addItems(tabItems_2, index);
        if (!this.isReplace) {
          this.trigger("added", { addedItems: items });
        }
        if (this.selectedItem === index) {
          this.select(index);
        } else {
          this.setActiveBorder();
          this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
        }
        this.bindDraggable();
      }
    };
    Tab2.prototype.removeTab = function(index) {
      var _this = this;
      var trg = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(trg)) {
        return;
      }
      var removeArgs = { removedItem: trg, removedIndex: index, cancel: false };
      this.trigger("removing", removeArgs, function(tabRemovingArgs) {
        if (!tabRemovingArgs.cancel) {
          var header = select("#" + CLS_ITEM3 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_TB_ITEMS, _this.element));
          if (!isNullOrUndefined(header)) {
            _this.clearTabTemplate(header, "headerTemplate", CLS_TB_ITEM);
          }
          _this.tbObj.removeItems(index);
          if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {
            index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);
          }
          var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);
          _this.items.splice(targetEleIndex, 1);
          _this.itemIndexArray.splice(targetEleIndex, 1);
          _this.refreshActiveBorder();
          var cntTrg = select("#" + CLS_CONTENT2 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_CONTENT2, _this.element));
          if (!isNullOrUndefined(cntTrg)) {
            _this.clearTabTemplate(cntTrg, "content", CLS_ITEM3);
            detach(cntTrg);
          }
          _this.trigger("removed", tabRemovingArgs);
          if (_this.draggableItems && _this.draggableItems.length > 0) {
            _this.draggableItems[index].destroy();
            _this.draggableItems[index] = null;
            _this.draggableItems.splice(index, 1);
          }
          if (trg.classList.contains(CLS_ACTIVE2)) {
            index = index > selectAll("." + CLS_TB_ITEM + ":not(." + CLS_TB_POPUP + ")", _this.element).length - 1 ? index - 1 : index;
            _this.enableAnimation = false;
            _this.selectedItem = index;
            _this.select(index);
          } else if (index !== _this.selectedItem) {
            if (index < _this.selectedItem) {
              index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);
              _this.setProperties({ selectedItem: index > -1 ? index : _this.selectedItem }, true);
              _this.prevIndex = _this.selectedItem;
            }
            _this.tbItem = selectAll("." + CLS_TB_ITEM, _this.getTabHeader());
          }
          if (selectAll("." + CLS_TB_ITEM, _this.element).length === 0) {
            _this.hdrEle.style.display = "none";
          }
          _this.enableAnimation = true;
        }
      });
    };
    Tab2.prototype.hideTab = function(index, value) {
      var items;
      var item = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(item)) {
        return;
      }
      if (isNullOrUndefined(value)) {
        value = true;
      }
      this.bdrLine.classList.add(CLS_HIDDEN2);
      if (value === true) {
        item.classList.add(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        if (items.length !== 0 && item.classList.contains(CLS_ACTIVE2)) {
          if (index !== 0) {
            for (var i = index - 1; i >= 0; i--) {
              if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
                this.select(i);
                break;
              } else if (i === 0) {
                for (var k = index + 1; k < this.tbItem.length; k++) {
                  if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                    this.select(k);
                    break;
                  }
                }
              }
            }
          } else {
            for (var k = index + 1; k < this.tbItem.length; k++) {
              if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                this.select(k);
                break;
              }
            }
          }
        } else if (items.length === 0) {
          this.element.classList.add(CLS_HIDDEN2);
        }
      } else {
        this.element.classList.remove(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        item.classList.remove(CLS_HIDDEN2);
        if (items.length === 0) {
          this.select(index);
        }
      }
      this.setActiveBorder();
      if (!isNullOrUndefined(item.firstElementChild)) {
        item.firstElementChild.setAttribute("aria-hidden", "" + value);
      }
      if (this.overflowMode === "Popup" && this.tbObj) {
        this.tbObj.refreshOverflow();
      }
    };
    Tab2.prototype.selectTab = function(args, event2, isInteracted) {
      if (event2 === void 0) {
        event2 = null;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.isInteracted = isInteracted;
      this.select(args, event2);
    };
    Tab2.prototype.select = function(args, event2) {
      var _this = this;
      var tabHeader = this.getTabHeader();
      this.tbItems = select("." + CLS_TB_ITEMS, tabHeader);
      this.tbItem = selectAll("." + CLS_TB_ITEM, tabHeader);
      this.content = select("." + CLS_CONTENT2, this.element);
      this.prevItem = this.tbItem[this.prevIndex];
      if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
        this.selectedItem = 0;
      } else {
        this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
      }
      var trg = this.tbItem[args];
      if (isNullOrUndefined(trg)) {
        this.selectedID = "0";
      } else {
        this.selectingID = this.extIndex(trg.id);
      }
      if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE5)) {
        this.prevItem.children.item(0).setAttribute("tabindex", this.prevItem.firstElementChild.getAttribute("tabindex"));
      }
      var eventArg = {
        event: event2,
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: this.tbItem[this.selectedItem],
        selectedIndex: this.selectedItem,
        selectedContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectedID, this.content) : null,
        selectingItem: trg,
        selectingIndex: args,
        selectingContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content) : null,
        isSwiped: this.isSwiped,
        isInteracted: this.isInteracted,
        cancel: false
      };
      if (!this.initRender) {
        this.trigger("selecting", eventArg, function(selectArgs) {
          if (!selectArgs.cancel) {
            _this.selectingContent(args, _this.isInteracted);
          }
        });
      } else {
        this.selectingContent(args, this.isInteracted);
      }
      this.isInteracted = false;
    };
    Tab2.prototype.selectingContent = function(args, isInteracted) {
      if (typeof args === "number") {
        if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE5) || this.tbItem[args].classList.contains(CLS_HIDDEN2))) {
          for (var i = args + 1; i < this.items.length; i++) {
            if (this.items[i].disabled === false && this.items[i].visible === true) {
              args = i;
              break;
            } else {
              args = 0;
            }
          }
        }
        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
          this.prevIndex = this.selectedItem;
          this.prevItem = this.tbItem[this.prevIndex];
          if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {
            this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);
            if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {
              this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
              var item = this.items[args];
              this.items.splice(args, 1);
              this.items.splice(this.tbItem.length - 1, 0, item);
              var itemId = this.itemIndexArray[args];
              this.itemIndexArray.splice(args, 1);
              this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);
            }
          } else {
            this.setActive(args, null, isInteracted);
          }
        } else {
          this.setActive(0, null, isInteracted);
        }
      } else if (args instanceof HTMLElement) {
        this.setActive(this.getEleIndex(args), null, isInteracted);
      }
    };
    Tab2.prototype.getItemIndex = function(tabItemId) {
      var tabIndex;
      for (var i = 0; i < this.tbItem.length; i++) {
        var value = this.tbItem[i].getAttribute("data-id");
        if (tabItemId === value) {
          tabIndex = i;
          break;
        }
      }
      return tabIndex;
    };
    Tab2.prototype.disable = function(value) {
      this.setCssClass(this.element, CLS_DISABLE5, value);
      this.element.setAttribute("aria-disabled", "" + value);
    };
    Tab2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedItem", "actEleId"]);
    };
    Tab2.prototype.getModuleName = function() {
      return "tab";
    };
    Tab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var sortedKeys = Object.keys(newProp).sort(function(a, b) {
        if (a === "items")
          return -1;
        if (b === "items")
          return 1;
        return 0;
      });
      for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
        var prop = sortedKeys_1[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, { width: formatUnit(newProp.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { height: formatUnit(newProp.height) });
            this.setContentHeight(false);
            break;
          case "cssClass":
            var headerEle = this.element.querySelector("." + CLS_HEADER2);
            if (oldProp.cssClass !== "" && !isNullOrUndefined(oldProp.cssClass)) {
              this.setCssClass(this.element, oldProp.cssClass, false);
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, oldProp.cssClass, false);
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            } else {
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            }
            break;
          case "items":
            this.evalOnPropertyChangeItems(newProp, oldProp);
            break;
          case "showCloseButton":
            this.setCloseButton(newProp.showCloseButton);
            break;
          case "reorderActiveTab":
            this.refreshActiveTabBorder();
            break;
          case "selectedItem":
            this.selectedItem = oldProp.selectedItem;
            this.select(newProp.selectedItem);
            break;
          case "headerPlacement":
            this.changeOrientation(newProp.headerPlacement);
            break;
          case "enableRtl":
            this.setRTL(newProp.enableRtl);
            break;
          case "overflowMode":
            this.tbObj.overflowMode = newProp.overflowMode;
            this.tbObj.dataBind();
            this.refreshActiveTabBorder();
            break;
          case "heightAdjustMode":
            this.setContentHeight(false);
            this.select(this.selectedItem);
            break;
          case "scrollStep":
            if (this.tbObj) {
              this.tbObj.scrollStep = this.scrollStep;
            }
            break;
          case "allowDragAndDrop":
            this.bindDraggable();
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.draggableItems.forEach(function(item) {
                item.dragArea = _this.dragArea;
              });
              this.refresh();
            }
            break;
        }
      }
    };
    Tab2.prototype.refreshActiveTab = function() {
      if (this.isReact && this.isTemplate) {
        this.clearTemplate();
      }
      if (!this.isTemplate) {
        if (this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2)) {
          detach(this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).children[0]);
          detach(this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0]);
          var item = this.items[this.selectedItem];
          var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
          var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
          var text = item.headerTemplate || item.header.text;
          var txtWrap = this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
          if (!isNullOrUndefined(text.tagName)) {
            txtWrap.appendChild(text);
          } else {
            this.headerTextCompile(txtWrap, text, this.selectedItem);
          }
          var tEle = void 0;
          var icon = this.createElement("span", {
            className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
          });
          var tConts = this.createElement("div", { className: CLS_TEXT_WRAP });
          tConts.appendChild(txtWrap);
          if (text !== "" && text !== void 0 && css !== "") {
            if (pos === "left" || pos === "top") {
              tConts.insertBefore(icon, tConts.firstElementChild);
            } else {
              tConts.appendChild(icon);
            }
            tEle = txtWrap;
            this.isIconAlone = false;
          } else {
            tEle = css === "" ? txtWrap : icon;
            if (tEle === icon) {
              detach(txtWrap);
              tConts.appendChild(icon);
              this.isIconAlone = true;
            }
          }
          var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
          var wrapAtt = item.disabled ? {} : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "true", "aria-disabled": "false" };
          tConts.appendChild(this.btnCls.cloneNode(true));
          var wraper = this.createElement("div", { className: CLS_WRAP, attrs: wrapAtt });
          wraper.appendChild(tConts);
          if (pos === "top" || pos === "bottom") {
            this.element.classList.add("e-vertical-icon");
          }
          this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wraper);
          var crElem = this.createElement("div");
          var cnt = item.content;
          var eleStr = void 0;
          if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
            if (typeof cnt === "string" && this.enableHtmlSanitizer) {
              cnt = SanitizeHtmlHelper.sanitize(cnt);
            }
            if (cnt[0] === "." || cnt[0] === "#") {
              if (document.querySelectorAll(cnt).length) {
                var eleVal = document.querySelector(cnt);
                eleStr = eleVal.outerHTML.trim();
                crElem.appendChild(eleVal);
                eleVal.style.display = "";
              } else {
                this.compileElement(crElem, cnt, "content", this.selectedItem);
              }
            } else {
              this.compileElement(crElem, cnt, "content", this.selectedItem);
            }
          } else {
            crElem.appendChild(cnt);
          }
          if (!isNullOrUndefined(eleStr)) {
            if (this.templateEle.indexOf(cnt.toString()) === -1) {
              this.templateEle.push(cnt.toString());
            }
          }
          this.element.querySelector("." + CLS_ITEM3 + "." + CLS_ACTIVE2).appendChild(crElem);
        }
      } else {
        var tabItems = this.element.querySelector("." + CLS_TB_ITEMS);
        var element = this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2);
        var index = this.getIndexFromEle(element.id);
        var header = element.innerText;
        var detachContent = this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0];
        var mainContents = detachContent.innerHTML;
        detach(element);
        detach(detachContent);
        var attr = {
          className: CLS_TB_ITEM + " " + CLS_TEMPLATE2 + " " + CLS_ACTIVE2,
          id: CLS_ITEM3 + this.tabId + "_" + index
        };
        var txtString = this.createElement("span", {
          className: CLS_TEXT,
          innerHTML: header,
          attrs: { "role": "presentation" }
        }).outerHTML;
        var conte = this.createElement("div", {
          className: CLS_TEXT_WRAP,
          innerHTML: txtString + this.btnCls.outerHTML
        }).outerHTML;
        var tabIndex = element.firstElementChild.getAttribute("data-tabindex");
        var wrap = this.createElement("div", {
          className: CLS_WRAP,
          innerHTML: conte,
          attrs: { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-controls": CLS_CONTENT2 + this.tabId + "_" + index, "aria-selected": "true", "aria-disabled": "false" }
        });
        tabItems.insertBefore(this.createElement("div", attr), tabItems.children[index + 1]);
        this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wrap);
        var crElem = this.createElement("div", { innerHTML: mainContents });
        this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).appendChild(crElem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.refreshActiveTabBorder = function() {
      var activeEle = select("." + CLS_TB_ITEM + "." + CLS_TB_POPUP + "." + CLS_ACTIVE2, this.element);
      if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {
        this.select(this.getEleIndex(activeEle));
      }
      this.refreshActiveBorder();
    };
    __decorate11([
      Collection([], TabItem)
    ], Tab2.prototype, "items", void 0);
    __decorate11([
      Property("100%")
    ], Tab2.prototype, "width", void 0);
    __decorate11([
      Property("auto")
    ], Tab2.prototype, "height", void 0);
    __decorate11([
      Property("")
    ], Tab2.prototype, "cssClass", void 0);
    __decorate11([
      Property(0)
    ], Tab2.prototype, "selectedItem", void 0);
    __decorate11([
      Property("Top")
    ], Tab2.prototype, "headerPlacement", void 0);
    __decorate11([
      Property("Content")
    ], Tab2.prototype, "heightAdjustMode", void 0);
    __decorate11([
      Property("Scrollable")
    ], Tab2.prototype, "overflowMode", void 0);
    __decorate11([
      Property("Dynamic")
    ], Tab2.prototype, "loadOn", void 0);
    __decorate11([
      Property(false)
    ], Tab2.prototype, "enablePersistence", void 0);
    __decorate11([
      Property(true)
    ], Tab2.prototype, "enableHtmlSanitizer", void 0);
    __decorate11([
      Property(false)
    ], Tab2.prototype, "showCloseButton", void 0);
    __decorate11([
      Property(true)
    ], Tab2.prototype, "reorderActiveTab", void 0);
    __decorate11([
      Property()
    ], Tab2.prototype, "scrollStep", void 0);
    __decorate11([
      Property()
    ], Tab2.prototype, "dragArea", void 0);
    __decorate11([
      Property(false)
    ], Tab2.prototype, "allowDragAndDrop", void 0);
    __decorate11([
      Property(true)
    ], Tab2.prototype, "clearTemplates", void 0);
    __decorate11([
      Complex({}, TabAnimationSettings)
    ], Tab2.prototype, "animation", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "created", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "adding", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "added", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "selecting", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "selected", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "removing", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "removed", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "onDragStart", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "dragging", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "dragged", void 0);
    __decorate11([
      Event()
    ], Tab2.prototype, "destroyed", void 0);
    Tab2 = __decorate11([
      NotifyPropertyChanges
    ], Tab2);
    return Tab2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT = "e-treeview";
var CONTROL = "e-control";
var COLLAPSIBLE = "e-icon-collapsible";
var EXPANDABLE = "e-icon-expandable";
var LISTITEM = "e-list-item";
var LISTTEXT = "e-list-text";
var LISTWRAP = "e-text-wrap";
var IELISTWRAP = "e-ie-wrap";
var PARENTITEM = "e-list-parent";
var HOVER = "e-hover";
var ACTIVE = "e-active";
var LOAD = "e-icons-spinner";
var PROCESS = "e-process";
var ICON = "e-icons";
var TEXTWRAP = "e-text-content";
var INPUT = "e-input";
var INPUTGROUP = "e-input-group";
var TREEINPUT = "e-tree-input";
var EDITING = "e-editing";
var RTL2 = "e-rtl";
var INTERACTION = "e-interaction";
var DRAGITEM = "e-drag-item";
var DROPPABLE = "e-droppable";
var DRAGGING = "e-dragging";
var SIBLING = "e-sibling";
var DROPIN = "e-drop-in";
var DROPNEXT = "e-drop-next";
var DROPOUT = "e-drop-out";
var NODROP = "e-no-drop";
var FULLROWWRAP = "e-fullrow-wrap";
var FULLROW = "e-fullrow";
var SELECTED2 = "e-selected";
var EXPANDED = "e-expanded";
var NODECOLLAPSED = "e-node-collapsed";
var DISABLE = "e-disable";
var DROPCOUNT = "e-drop-count";
var CHECK = "e-check";
var INDETERMINATE = "e-stop";
var CHECKBOXWRAP = "e-treeview-checkbox";
var CHECKBOXFRAME = "e-frame";
var CHECKBOXRIPPLE = "e-ripple-container";
var RIPPLE = "e-ripple";
var RIPPLEELMENT = "e-ripple-element";
var FOCUS = "e-node-focus";
var IMAGE = "e-list-img";
var BIGGER = "e-bigger";
var SMALL = "e-small";
var CHILD = "e-has-child";
var ITEM_ANIMATION_ACTIVE = "e-animation-active";
var DISABLED2 = "e-disabled";
var PREVENTSELECT = "e-prevent";
var treeAriaAttr = {
  treeRole: "group",
  itemRole: "treeitem",
  listRole: "group",
  itemText: "",
  wrapperRole: ""
};
var FieldsSettings = (
  /** @class */
  function(_super) {
    __extends12(FieldsSettings2, _super);
    function FieldsSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate12([
      Property("child")
    ], FieldsSettings2.prototype, "child", void 0);
    __decorate12([
      Property([])
    ], FieldsSettings2.prototype, "dataSource", void 0);
    __decorate12([
      Property("expanded")
    ], FieldsSettings2.prototype, "expanded", void 0);
    __decorate12([
      Property("hasChildren")
    ], FieldsSettings2.prototype, "hasChildren", void 0);
    __decorate12([
      Property("htmlAttributes")
    ], FieldsSettings2.prototype, "htmlAttributes", void 0);
    __decorate12([
      Property("iconCss")
    ], FieldsSettings2.prototype, "iconCss", void 0);
    __decorate12([
      Property("id")
    ], FieldsSettings2.prototype, "id", void 0);
    __decorate12([
      Property("imageUrl")
    ], FieldsSettings2.prototype, "imageUrl", void 0);
    __decorate12([
      Property("isChecked")
    ], FieldsSettings2.prototype, "isChecked", void 0);
    __decorate12([
      Property("parentID")
    ], FieldsSettings2.prototype, "parentID", void 0);
    __decorate12([
      Property(null)
    ], FieldsSettings2.prototype, "query", void 0);
    __decorate12([
      Property("selectable")
    ], FieldsSettings2.prototype, "selectable", void 0);
    __decorate12([
      Property("selected")
    ], FieldsSettings2.prototype, "selected", void 0);
    __decorate12([
      Property(null)
    ], FieldsSettings2.prototype, "tableName", void 0);
    __decorate12([
      Property("text")
    ], FieldsSettings2.prototype, "text", void 0);
    __decorate12([
      Property("tooltip")
    ], FieldsSettings2.prototype, "tooltip", void 0);
    __decorate12([
      Property("navigateUrl")
    ], FieldsSettings2.prototype, "navigateUrl", void 0);
    return FieldsSettings2;
  }(ChildProperty)
);
var ActionSettings = (
  /** @class */
  function(_super) {
    __extends12(ActionSettings2, _super);
    function ActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate12([
      Property("SlideDown")
    ], ActionSettings2.prototype, "effect", void 0);
    __decorate12([
      Property(400)
    ], ActionSettings2.prototype, "duration", void 0);
    __decorate12([
      Property("linear")
    ], ActionSettings2.prototype, "easing", void 0);
    return ActionSettings2;
  }(ChildProperty)
);
var NodeAnimationSettings = (
  /** @class */
  function(_super) {
    __extends12(NodeAnimationSettings2, _super);
    function NodeAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate12([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "collapse", void 0);
    __decorate12([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "expand", void 0);
    return NodeAnimationSettings2;
  }(ChildProperty)
);
var TreeView = (
  /** @class */
  function(_super) {
    __extends12(TreeView2, _super);
    function TreeView2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isRefreshed = false;
      _this.preventExpand = false;
      _this.checkedElement = [];
      _this.disableNode = [];
      _this.validArr = [];
      _this.validNodes = [];
      _this.expandChildren = [];
      _this.isFieldChange = false;
      _this.changeDataSource = false;
      _this.hasTemplate = false;
      _this.isFirstRender = false;
      _this.isNodeDropped = false;
      _this.isInteracted = false;
      _this.isRightClick = false;
      _this.mouseDownStatus = false;
      _this.isDropIn = false;
      return _this;
    }
    TreeView_1 = TreeView2;
    TreeView2.prototype.getModuleName = function() {
      return "treeview";
    };
    TreeView2.prototype.preRender = function() {
      var _this = this;
      this.checkActionNodes = [];
      this.parentNodeCheck = [];
      this.dragStartAction = false;
      this.isAnimate = false;
      this.keyConfigs = {
        escape: "escape",
        end: "end",
        enter: "enter",
        f2: "f2",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        ctrlA: "ctrl+A",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        shiftSpace: "shift+space",
        ctrlSpace: "ctrl+space"
      };
      this.listBaseOption = {
        expandCollapse: true,
        showIcon: true,
        expandIconClass: EXPANDABLE,
        ariaAttributes: treeAriaAttr,
        expandIconPosition: "Left",
        itemCreated: function(e) {
          _this.beforeNodeCreate(e);
        },
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        itemNavigable: this.fullRowNavigable
      };
      this.updateListProp(this.fields);
      this.aniObj = new Animation({});
      this.treeList = [];
      this.isLoaded = false;
      this.isInitalExpand = false;
      this.expandChildren = [];
      this.index = 0;
      this.setTouchClass();
      if (isNullOrUndefined(this.selectedNodes)) {
        this.setProperties({ selectedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.checkedNodes)) {
        this.setProperties({ checkedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.expandedNodes)) {
        this.setProperties({ expandedNodes: [] }, true);
      } else {
        this.isInitalExpand = true;
      }
    };
    TreeView2.prototype.getPersistData = function() {
      var keyEntity = ["selectedNodes", "checkedNodes", "expandedNodes"];
      return this.addOnPersist(keyEntity);
    };
    TreeView2.prototype.render = function() {
      this.initialRender = true;
      this.initialize();
      this.setDataBinding(false);
      this.setDisabledMode();
      this.setExpandOnType();
      if (!this.disabled) {
        this.setRipple();
      }
      this.wireEditingEvents(this.allowEditing);
      this.setDragAndDrop(this.allowDragAndDrop);
      if (!this.disabled) {
        this.wireEvents();
      }
      this.initialRender = false;
      this.renderComplete();
    };
    TreeView2.prototype.initialize = function() {
      this.element.setAttribute("role", "tree");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
      this.setCssClass(null, this.cssClass);
      this.setEnableRtl();
      this.setFullRow(this.fullRowSelect);
      this.setTextWrap();
      this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
    };
    TreeView2.prototype.setDisabledMode = function() {
      if (this.disabled) {
        this.element.classList.add(DISABLED2);
        this.element.setAttribute("aria-disabled", "true");
      } else {
        this.element.classList.remove(DISABLED2);
        this.element.setAttribute("aria-disabled", "false");
      }
    };
    TreeView2.prototype.setEnableRtl = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL2);
    };
    TreeView2.prototype.setRipple = function() {
      var tempStr = "." + FULLROW + ",." + TEXTWRAP;
      var rippleModel = {
        selector: tempStr,
        ignore: "." + TEXTWRAP + " > ." + ICON + ",." + INPUTGROUP + ",." + INPUT + ", ." + CHECKBOXWRAP
      };
      this.rippleFn = rippleEffect(this.element, rippleModel);
      var iconModel = {
        selector: "." + TEXTWRAP + " > ." + ICON,
        isCenterRipple: true
      };
      this.rippleIconFn = rippleEffect(this.element, iconModel);
    };
    TreeView2.prototype.setFullRow = function(isEnabled) {
      (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);
    };
    TreeView2.prototype.setMultiSelect = function(isEnabled) {
      if (isEnabled) {
        this.element.setAttribute("aria-multiselectable", "true");
      } else {
        this.element.setAttribute("aria-multiselectable", "false");
      }
    };
    TreeView2.prototype.templateComplier = function(template) {
      if (template) {
        this.hasTemplate = true;
        this.element.classList.add(INTERACTION);
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e) {
          return compile(template);
        }
      }
      this.element.classList.remove(INTERACTION);
      return void 0;
    };
    TreeView2.prototype.setDataBinding = function(changeDataSource) {
      var _this = this;
      this.treeList.push("false");
      if (this.fields.dataSource instanceof DataManager) {
        this.isOffline = this.fields.dataSource.dataSource.offline;
        if (this.fields.dataSource.ready) {
          this.fields.dataSource.ready.then(function(e) {
            _this.isOffline = _this.fields.dataSource.dataSource.offline;
            if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {
              _this.treeList.pop();
              _this.treeData = e.result;
              _this.isNumberTypeId = _this.getType();
              _this.setRootData();
              _this.renderItems(true);
              if (_this.treeList.length === 0 && !_this.isLoaded) {
                _this.finalize();
              }
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        } else {
          this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function(e) {
            _this.treeList.pop();
            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();
            _this.setRootData();
            if (changeDataSource) {
              _this.changeDataSource = true;
            }
            _this.renderItems(true);
            _this.changeDataSource = false;
            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        this.treeList.pop();
        if (isNullOrUndefined(this.fields.dataSource)) {
          this.rootData = this.treeData = [];
        } else {
          this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
          this.setRootData();
        }
        this.isNumberTypeId = this.getType();
        this.renderItems(false);
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.getQuery = function(mapper, value) {
      if (value === void 0) {
        value = null;
      }
      var columns = [];
      var query;
      if (!mapper.query) {
        query = new Query();
        var prop = this.getActualProperties(mapper);
        for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
          var col = _a[_i];
          if (col !== "dataSource" && col !== "tableName" && col !== "child" && !!mapper["" + col] && col !== "url" && columns.indexOf(mapper["" + col]) === -1) {
            columns.push(mapper["" + col]);
          }
        }
        query.select(columns);
        if (Object.prototype.hasOwnProperty.call(prop, "tableName")) {
          query.from(mapper.tableName);
        }
      } else {
        query = mapper.query.clone();
      }
      ListBase.addSorting(this.sortOrder, mapper.text, query);
      if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {
        query.where(mapper.parentID, "equal", this.isNumberTypeId ? parseFloat(value) : value);
      }
      return query;
    };
    TreeView2.prototype.getType = function() {
      return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === "number" ? true : false : false;
    };
    TreeView2.prototype.setRootData = function() {
      this.dataType = this.getDataType(this.treeData, this.fields);
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        var rootItems = this.getChildNodes(this.treeData, void 0, true);
        if (isNullOrUndefined(rootItems)) {
          this.rootData = [];
        } else {
          this.rootData = rootItems;
        }
      } else {
        this.rootData = this.treeData;
      }
    };
    TreeView2.prototype.isChildObject = function() {
      if (typeof this.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    TreeView2.prototype.renderItems = function(isSorted) {
      this.listBaseOption.ariaAttributes.level = 1;
      var sortedData = this.getSortedData(this.rootData);
      this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
      this.element.appendChild(this.ulElement);
      var rootNodes = this.ulElement.querySelectorAll(".e-list-item");
      if (this.loadOnDemand === false) {
        var i = 0;
        while (i < rootNodes.length) {
          this.renderChildNodes(rootNodes[parseInt(i.toString(), 10)], true, null, true);
          i++;
        }
      }
      var parentEle = selectAll("." + PARENTITEM, this.element);
      if (parentEle.length === 1 && (rootNodes && rootNodes.length !== 0) || this.loadOnDemand) {
        this.finalizeNode(this.element);
      }
      this.parentNodeCheck = [];
      this.parentCheckData = [];
      this.updateCheckedStateFromDS();
      if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateCheckedStateFromDS = function() {
      this.validNodes = [];
      if (this.treeData && this.showCheckBox) {
        if (this.dataType === 1) {
          var mapper = this.fields;
          var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < resultData.length; i++) {
            var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id] ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
              this.checkedNodes.push(resultId);
            }
            if (resultData[parseInt(i.toString(), 10)][this.fields.hasChildren]) {
              var id = resultData[parseInt(i.toString(), 10)][this.fields.id];
              var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", id, false));
              for (var child = 0; child < childData.length; child++) {
                var childId = childData[parseInt(child.toString(), 10)][this.fields.id] ? childData[parseInt(child.toString(), 10)][this.fields.id].toString() : null;
                if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                  this.checkedNodes.push(childId);
                }
              }
            }
          }
          for (var i = 0; i < this.checkedNodes.length; i++) {
            var mapper_1 = this.fields;
            var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, "equal", this.checkedNodes[parseInt(i.toString(), 10)], true));
            if (checkState[0] && this.autoCheck) {
              this.getCheckedNodeDetails(mapper_1, checkState);
              this.checkIndeterminateState(checkState[0]);
            }
            if (checkState.length > 0) {
              var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
            var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, "equal", this.checkedNodes[parseInt(i.toString(), 10)], true));
            for (var index = 0; index < checkedData.length; index++) {
              var checkedId = checkedData[parseInt(index.toString(), 10)][this.fields.id] ? checkedData[parseInt(index.toString(), 10)][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                this.checkedNodes.push(checkedId);
              }
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
          }
        } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
          for (var index = 0; index < this.treeData.length; index++) {
            var fieldId = this.treeData[parseInt(index.toString(), 10)][this.fields.id] ? this.treeData[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
            if (this.treeData[parseInt(index.toString(), 10)][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
              this.checkedNodes.push(fieldId);
            }
            if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {
              this.validNodes.push(fieldId);
            }
            var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(index.toString(), 10)]);
            if (childItems) {
              this.updateChildCheckState(childItems, this.treeData[parseInt(index.toString(), 10)]);
            }
          }
          this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;
        }
        this.setProperties({ checkedNodes: this.validNodes }, true);
      }
    };
    TreeView2.prototype.getCheckedNodeDetails = function(mapper, checkNodes) {
      var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
      var count = 0;
      var element = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
      var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');
      if (!element && !parentEle) {
        if (this.parentNodeCheck.indexOf(id) === -1) {
          this.parentNodeCheck.push(id);
        }
        var childNodes = this.getChildNodes(this.treeData, id);
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
          if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
            this.checkedNodes.push(id);
          }
        }
        var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", id, true));
        this.getCheckedNodeDetails(mapper, preElement);
      } else if (parentEle) {
        var check = select("." + CHECK, parentEle);
        if (!check) {
          this.changeState(parentEle, "indeterminate", null, true, true);
        }
      }
    };
    TreeView2.prototype.updateParentCheckState = function() {
      var indeterminate = selectAll("." + INDETERMINATE, this.element);
      var childCheckedElement;
      for (var i = 0; i < indeterminate.length; i++) {
        var node = closest(indeterminate[parseInt(i.toString(), 10)], "." + LISTITEM);
        var nodeId = node.getAttribute("data-uid").toString();
        if (this.dataType === 1) {
          childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, "equal", nodeId, true));
        } else {
          childCheckedElement = this.getChildNodes(this.treeData, nodeId);
        }
        var count = 0;
        if (childCheckedElement) {
          for (var j = 0; j < childCheckedElement.length; j++) {
            var childId = childCheckedElement[parseInt(j.toString(), 10)][this.fields.id].toString();
            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }
          if (count === childCheckedElement.length) {
            var nodeCheck = node.getAttribute("data-uid");
            if (this.checkedNodes.indexOf(nodeCheck) === -1) {
              this.checkedNodes.push(nodeCheck);
            }
            this.changeState(node, "check", null, true, true);
          } else if (count === 0 && this.checkedNodes.length === 0) {
            this.changeState(node, "uncheck", null, true, true);
          }
        }
      }
    };
    TreeView2.prototype.checkIndeterminateState = function(data) {
      var element;
      if (this.dataType === 1) {
        element = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
      } else {
        element = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
      }
      if (element) {
        var ariaChecked = element.getAttribute("aria-checked");
        if (ariaChecked !== "true") {
          this.changeState(element, "indeterminate", null, true, true);
        }
      } else if (this.dataType === 2) {
        if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
          this.parentNodeCheck.push(data[this.fields.id].toString());
        }
      }
    };
    TreeView2.prototype.updateChildCheckState = function(childItems, treeData) {
      var count = 0;
      var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
        if (childItems[parseInt(index.toString(), 10)][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }
        if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {
          this.validNodes.push(checkedChild);
        }
        var subChildItems = getValue(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);
        if (subChildItems && subChildItems.length) {
          if (this.parentCheckData.indexOf(treeData) === -1) {
            this.parentCheckData.push(treeData);
          }
          this.updateChildCheckState(subChildItems, childItems[parseInt(index.toString(), 10)]);
        }
        if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
          this.checkedNodes.push(checkedParent);
        }
      }
      if (count !== 0 && this.autoCheck) {
        this.checkIndeterminateState(treeData);
        for (var len = 0; len < this.parentCheckData.length; len++) {
          if (treeData !== this.parentCheckData[parseInt(len.toString(), 10)] && this.parentCheckData[parseInt(len.toString(), 10)]) {
            this.checkIndeterminateState(this.parentCheckData[parseInt(len.toString(), 10)]);
          }
        }
      }
      this.parentCheckData = [];
    };
    TreeView2.prototype.beforeNodeCreate = function(e) {
      if (this.showCheckBox) {
        var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });
        checkboxEle.classList.add(CHECKBOXWRAP);
        var icon = select("div." + ICON, e.item);
        var id = e.item.getAttribute("data-uid");
        e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        var checkValue = getValue(e.fields.isChecked, e.curData);
        if (this.checkedNodes.indexOf(id) > -1) {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === "true") {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else {
          e.item.setAttribute("aria-checked", "false");
        }
        var frame = select("." + CHECKBOXFRAME, checkboxEle);
        EventHandler.add(frame, "mousedown", this.frameMouseHandler, this);
        EventHandler.add(frame, "mouseup", this.frameMouseHandler, this);
      }
      if (this.fullRowSelect) {
        this.createFullRow(e.item);
      }
      if (this.allowMultiSelection && !e.item.classList.contains(SELECTED2)) {
        e.item.setAttribute("aria-selected", "false");
      }
      var fields = e.fields;
      this.addActionClass(e, fields.selected, SELECTED2);
      this.addActionClass(e, fields.expanded, EXPANDED);
      e.item.setAttribute("tabindex", "-1");
      EventHandler.add(e.item, "focus", this.focusIn, this);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        var textEle = e.item.querySelector("." + LISTTEXT);
        var dataId = e.item.getAttribute("data-uid");
        textEle.innerHTML = "";
        this.renderNodeTemplate(e.curData, textEle, dataId);
      }
      var eventArgs = {
        node: e.item,
        nodeData: e.curData,
        text: e.text
      };
      if (!this.isRefreshed) {
        this.trigger("drawNode", eventArgs);
        if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {
          e.item.classList.add(PREVENTSELECT);
          e.item.firstElementChild.setAttribute("style", "cursor: not-allowed");
        }
      }
    };
    TreeView2.prototype.frameMouseHandler = function(e) {
      var rippleSpan = select("." + CHECKBOXRIPPLE, e.target.parentElement);
      rippleMouseHandler(e, rippleSpan);
    };
    TreeView2.prototype.addActionClass = function(e, action, cssClass2) {
      var data = e.curData;
      var actionValue = getValue(action, data);
      if (!isNullOrUndefined(actionValue) && actionValue.toString() !== "false") {
        e.item.classList.add(cssClass2);
      }
    };
    TreeView2.prototype.getDataType = function(ds, mapper) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (this.isOffline) {
            if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)])) && !isNullOrUndefined(getValue(mapper.parentID, ds[parseInt(i.toString(), 10)]))) {
              return 1;
            }
          } else if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)]))) {
            return 1;
          }
        }
        return 2;
      }
      for (var i = 0, len = ds.length; i < len; i++) {
        if (typeof mapper.child === "string" && (!isNullOrUndefined(getValue(mapper.child, ds[parseInt(i.toString(), 10)])) || Object.prototype.hasOwnProperty.call(ds[parseInt(i.toString(), 10)], mapper.child))) {
          return 2;
        }
        if (this.isChildObject()) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(mapper.parentID, ds[parseInt(i.toString(), 10)])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[parseInt(i.toString(), 10)]))) {
          return 1;
        }
      }
      return 1;
    };
    TreeView2.prototype.getGroupedData = function(dataSource, groupBy) {
      var cusQuery = new Query().group(groupBy);
      var ds = ListBase.getDataSource(dataSource, cusQuery);
      var grpItem = [];
      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[parseInt(j.toString(), 10)].items;
        grpItem.push(itemObj);
      }
      return grpItem;
    };
    TreeView2.prototype.getSortedData = function(list) {
      if (list && this.sortOrder !== "None") {
        list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));
      }
      return list;
    };
    TreeView2.prototype.finalizeNode = function(element) {
      var _this = this;
      var iNodes = selectAll("." + IMAGE, element);
      for (var k = 0; k < iNodes.length; k++) {
        iNodes[parseInt(k.toString(), 10)].setAttribute("alt", IMAGE);
      }
      if (this.isLoaded) {
        var sNodes = selectAll("." + SELECTED2, element);
        for (var i = 0; i < sNodes.length; i++) {
          this.selectNode(sNodes[parseInt(i.toString(), 10)], null);
          break;
        }
        removeClass(sNodes, SELECTED2);
      }
      var cNodes = selectAll("." + LISTITEM + ":not(." + EXPANDED + ")", element);
      for (var j = 0; j < cNodes.length; j++) {
        var icon = select("div." + ICON, cNodes[parseInt(j.toString(), 10)]);
        if (icon && icon.classList.contains(EXPANDABLE)) {
          this.disableExpandAttr(cNodes[parseInt(j.toString(), 10)]);
        }
      }
      var eNodes = selectAll("." + EXPANDED, element);
      if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
        this.isInitalExpand = this.treeData.filter(function(e) {
          return e[_this.fields.expanded] === true;
        }).length > 0 ? true : this.isInitalExpand;
      }
      if (!this.isInitalExpand) {
        for (var i = 0; i < eNodes.length; i++) {
          this.renderChildNodes(eNodes[parseInt(i.toString(), 10)]);
        }
      }
      removeClass(eNodes, EXPANDED);
      this.updateList();
      if (this.isLoaded) {
        this.updateCheckedProp();
      }
    };
    TreeView2.prototype.updateCheckedProp = function() {
      if (this.showCheckBox) {
        var nodes = [].concat([], this.checkedNodes);
        this.setProperties({ checkedNodes: nodes }, true);
      }
    };
    TreeView2.prototype.ensureIndeterminate = function() {
      if (this.autoCheck) {
        var liElement = selectAll("li", this.element);
        var ulElement = void 0;
        for (var i = 0; i < liElement.length; i++) {
          if (liElement[parseInt(i.toString(), 10)].classList.contains(LISTITEM)) {
            ulElement = select("." + PARENTITEM, liElement[parseInt(i.toString(), 10)]);
            if (ulElement) {
              this.ensureParentCheckState(liElement[parseInt(i.toString(), 10)]);
            } else {
              this.ensureChildCheckState(liElement[parseInt(i.toString(), 10)]);
            }
          }
        }
      } else {
        var indeterminate = selectAll("." + INDETERMINATE, this.element);
        for (var i = 0; i < indeterminate.length; i++) {
          indeterminate[parseInt(i.toString(), 10)].classList.remove(INDETERMINATE);
        }
      }
    };
    TreeView2.prototype.ensureParentCheckState = function(element) {
      if (!isNullOrUndefined(element)) {
        if (element.classList.contains(ROOT)) {
          return;
        }
        var ulElement = element;
        if (element.classList.contains(LISTITEM)) {
          ulElement = select("." + PARENTITEM, element);
        }
        var checkedNodes = selectAll("." + CHECK, ulElement);
        var indeterminateNodes = selectAll("." + INDETERMINATE, ulElement);
        var nodes = selectAll("." + LISTITEM, ulElement);
        var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];
        if (nodes.length === checkedNodes.length) {
          this.changeState(checkBoxEle, "check", null, true, true);
        } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
          this.changeState(checkBoxEle, "indeterminate", null, true, true);
        } else if (checkedNodes.length === 0) {
          this.changeState(checkBoxEle, "uncheck", null, true, true);
        }
        var parentUL = closest(element, "." + PARENTITEM);
        if (!isNullOrUndefined(parentUL)) {
          var currentParent = closest(parentUL, "." + LISTITEM);
          this.ensureParentCheckState(currentParent);
        }
      }
    };
    TreeView2.prototype.ensureChildCheckState = function(element, e) {
      if (!isNullOrUndefined(element)) {
        var childElement = select("." + PARENTITEM, element);
        var checkBoxes = void 0;
        if (!isNullOrUndefined(childElement)) {
          checkBoxes = selectAll("." + CHECKBOXWRAP, childElement);
          var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
          var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);
          var childCheck = childElement.querySelectorAll("li");
          var checkedState = void 0;
          for (var index = 0; index < checkBoxes.length; index++) {
            var childId = childCheck[parseInt(index.toString(), 10)].getAttribute("data-uid");
            if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]))) {
              checkedState = getValue(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]) ? "check" : "uncheck";
              if (this.ele !== -1) {
                checkedState = isChecked ? "check" : "uncheck";
              }
              if (checkedState === "uncheck" && (!isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1)) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                checkedState = "indeterminate";
              }
            } else {
              var isNodeChecked = checkBoxes[parseInt(index.toString(), 10)].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
              if (isChecked) {
                checkedState = "check";
              } else if (isNodeChecked && !this.isLoaded) {
                checkedState = "check";
              } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                checkedState = "check";
              } else if (childCheck[parseInt(index.toString(), 10)].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else {
                checkedState = "uncheck";
              }
            }
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], checkedState, e, true, true);
          }
        }
        if (this.autoCheck && this.isLoaded) {
          this.updateParentCheckState();
        }
      }
    };
    TreeView2.prototype.doCheckBoxAction = function(nodes, doCheck) {
      if (!isNullOrUndefined(nodes)) {
        for (var len = nodes.length - 1; len >= 0; len--) {
          var liEle = this.getElement(nodes[parseInt(len.toString(), 10)]);
          if (isNullOrUndefined(liEle)) {
            var node = nodes[len - (nodes.length - 1)] ? nodes[len - (nodes.length - 1)].toString() : nodes[parseInt(len.toString(), 10)] ? nodes[parseInt(len.toString(), 10)].toString() : null;
            if (node !== "" && doCheck && node) {
              this.setValidCheckedNode(node);
              this.dynamicCheckState(node, doCheck);
            } else if (this.checkedNodes.indexOf(node) !== -1 && node !== "" && !doCheck) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
              var childItems = this.getChildNodes(this.treeData, node);
              if (childItems) {
                for (var i = 0; i < childItems.length; i++) {
                  var id = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                    var ele = this.element.querySelector('[data-uid="' + id + '"]');
                    if (ele) {
                      this.changeState(ele, "uncheck", null);
                    }
                  }
                }
                if (this.parentNodeCheck.indexOf(node) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                }
              }
              if (node) {
                this.dynamicCheckState(node, doCheck);
              }
              this.updateField(this.treeData, this.fields, node, "isChecked", null);
            }
            continue;
          }
          var checkBox = select("." + PARENTITEM + " ." + CHECKBOXWRAP, liEle);
          this.validateCheckNode(checkBox, !doCheck, liEle, null);
        }
      } else {
        var checkBoxes = selectAll("." + CHECKBOXWRAP, this.element);
        if (this.loadOnDemand) {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? "check" : "uncheck", null, null, null, doCheck);
          }
        } else {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);
            this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? "check" : "uncheck");
          }
        }
      }
      if (nodes) {
        for (var j = 0; j < nodes.length - 1; j++) {
          var node = nodes[parseInt(j.toString(), 10)] ? nodes[parseInt(j.toString(), 10)].toString() : "";
          if (!doCheck) {
            this.updateField(this.treeData, this.fields, node, "isChecked", null);
          }
        }
      }
      if (this.autoCheck) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateFieldChecked = function(checkbox, doCheck) {
      var currLi = closest(checkbox, "." + LISTITEM);
      var id = currLi.getAttribute("data-uid");
      var nodeDetails = this.getNodeData(currLi);
      if (nodeDetails.isChecked === "true" && !doCheck) {
        this.updateField(this.treeData, this.fields, id, "isChecked", null);
      }
    };
    TreeView2.prototype.dynamicCheckState = function(node, doCheck) {
      if (this.dataType === 1) {
        var count = 0;
        var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, "equal", node, true));
        if (resultId[0]) {
          var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
          var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
          var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
          var element = this.element.querySelector('[data-uid="' + id + '"]');
          var childNodes = this.getChildNodes(this.treeData, parent_1);
          if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
              var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
          }
          if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {
            this.changeState(element, "uncheck", null);
          } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {
            this.changeState(element, "check", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {
            this.changeState(parentElement, "uncheck", null);
          } else if (!element && !parentElement && id === node && this.autoCheck) {
            this.updateIndeterminate(node, doCheck);
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
        var id = void 0;
        var parentElement = void 0;
        var check = void 0;
        for (var i = 0; i < this.treeData.length; i++) {
          id = this.treeData[parseInt(i.toString(), 10)][this.fields.id] ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString() : "";
          parentElement = this.element.querySelector('[data-uid="' + id + '"]');
          check = parentElement ? select("." + CHECK, parentElement) : null;
          if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
            this.changeState(parentElement, "uncheck", null);
          }
          var subChild = getValue(this.fields.child.toString(), this.treeData[parseInt(i.toString(), 10)]);
          if (subChild) {
            this.updateChildIndeterminate(subChild, id, node, doCheck, id);
          }
        }
      }
    };
    TreeView2.prototype.updateIndeterminate = function(node, doCheck) {
      var indeterminateData = this.getTreeData(node);
      var count = 0;
      var parent;
      if (this.dataType === 1) {
        parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
      }
      var childNodes = this.getChildNodes(this.treeData, parent);
      if (childNodes) {
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id] ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }
      }
      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
      if (parentElement && doCheck) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
        this.changeState(parentElement, "uncheck", null);
      } else if (!parentElement) {
        if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
        } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
          this.parentNodeCheck.push(parent);
        }
        this.updateIndeterminate(parent, doCheck);
        if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
        }
      }
    };
    TreeView2.prototype.updateChildIndeterminate = function(subChild, parent, node, doCheck, child) {
      var count = 0;
      for (var j = 0; j < subChild.length; j++) {
        var subId = subChild[parseInt(j.toString(), 10)][this.fields.id] ? subChild[parseInt(j.toString(), 10)][this.fields.id].toString() : "";
        if (this.checkedNodes.indexOf(subId) !== -1) {
          count++;
        }
        var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
        var indeterminate = parentElement ? select("." + INDETERMINATE, parentElement) : null;
        var check = parentElement ? select("." + CHECK, parentElement) : null;
        var element = this.element.querySelector('[data-uid="' + subId + '"]');
        var childElementCheck = element ? select("." + CHECK, element) : null;
        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
          this.changeState(parentElement, "indeterminate", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {
          if (this.autoCheck) {
            this.changeState(parentElement, "uncheck", null);
          } else {
            if (count !== 0) {
              this.changeState(parentElement, "indeterminate", null);
            } else {
              this.changeState(parentElement, "uncheck", null);
            }
          }
        } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {
          this.changeState(element, "uncheck", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
          indeterminate.classList.remove(INDETERMINATE);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {
          this.changeState(parentElement, "uncheck", null);
        } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {
          this.changeState(element, "uncheck", null);
        } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
          var childElement = this.element.querySelector('[data-uid="' + child + '"]');
          if (doCheck && count !== 0) {
            this.changeState(childElement, "indeterminate", null);
          } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
            this.checkedNodes.push(parent);
          } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
          }
          if (this.parentNodeCheck.indexOf(parent) === -1) {
            this.parentNodeCheck.push(parent);
          }
        }
        var innerChild = getValue(this.fields.child.toString(), subChild[parseInt(j.toString(), 10)]);
        if (innerChild) {
          this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
        }
      }
    };
    TreeView2.prototype.changeState = function(wrapper, state, e, isPrevent, isAdd, doCheck) {
      var _this = this;
      var eventArgs;
      var currLi = closest(wrapper, "." + LISTITEM);
      if (wrapper === currLi) {
        wrapper = select("." + CHECKBOXWRAP, currLi);
      }
      if (!isPrevent) {
        this.checkActionNodes = [];
        eventArgs = this.getCheckEvent(currLi, state, e);
        this.trigger("nodeChecking", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
          }
        });
      } else {
        this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
      }
    };
    TreeView2.prototype.nodeCheckAction = function(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        this.addCheck(currLi);
        ariaState = "true";
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
        removeClass([frameSpan], [CHECK, INDETERMINATE]);
        this.removeCheck(currLi);
        ariaState = "false";
      } else if (state === "indeterminate" && this.autoCheck) {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);
        this.removeCheck(currLi);
        ariaState = "mixed";
      }
      ariaState = state === "check" ? "true" : state === "uncheck" ? "false" : ariaState;
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      if (isAdd) {
        var data = [].concat([], this.checkActionNodes);
        eventArgs = this.getCheckEvent(currLi, state, e);
        if (isUndefined(isPrevent)) {
          eventArgs.data = data;
        }
      }
      if (doCheck !== void 0) {
        this.ensureStateChange(currLi, doCheck);
      }
      if (!isPrevent) {
        if (!isNullOrUndefined(ariaState)) {
          currLi.setAttribute("aria-checked", ariaState);
          eventArgs.data[0].checked = ariaState;
          this.trigger("nodeChecked", eventArgs);
          this.checkActionNodes = [];
        }
      }
    };
    TreeView2.prototype.addCheck = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {
        this.checkedNodes.push(id);
      }
    };
    TreeView2.prototype.removeCheck = function(liEle) {
      var index = this.checkedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.checkedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.getCheckEvent = function(currLi, action, e) {
      this.checkActionNodes.push(this.getNodeData(currLi));
      var nodeData = this.checkActionNodes;
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, data: nodeData };
    };
    TreeView2.prototype.finalize = function() {
      var firstUl = select("." + PARENTITEM, this.element);
      if (!isNullOrUndefined(firstUl)) {
        firstUl.setAttribute("role", treeAriaAttr.treeRole);
        this.setMultiSelect(this.allowMultiSelection);
        var firstNode = select("." + LISTITEM, this.element);
        if (firstNode) {
          firstNode.setAttribute("tabindex", "0");
          this.updateIdAttr(null, firstNode);
        }
        if (this.allowTextWrap) {
          this.updateWrap();
        }
        this.renderReactTemplates();
        this.hasPid = this.rootData[0] ? Object.prototype.hasOwnProperty.call(this.rootData[0], this.fields.parentID) : false;
        this.doExpandAction();
      }
    };
    TreeView2.prototype.setTextWrap = function() {
      (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);
      if (Browser.isIE) {
        (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);
      }
    };
    TreeView2.prototype.updateWrap = function(ulEle) {
      if (!this.fullRowSelect) {
        return;
      }
      var liEle = ulEle ? selectAll("." + LISTITEM, ulEle) : this.liList;
      var length = liEle.length;
      for (var i = 0; i < length; i++) {
        this.calculateWrap(liEle[parseInt(i.toString(), 10)]);
      }
    };
    TreeView2.prototype.calculateWrap = function(liEle) {
      var element = select("." + FULLROW, liEle);
      if (element && element.nextElementSibling) {
        element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + "px" : "";
      }
    };
    TreeView2.prototype.doExpandAction = function() {
      var _this = this;
      var eUids = this.expandedNodes;
      if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
        this.isInitalExpand = this.treeData.filter(function(e) {
          return e[_this.fields.expanded] === true;
        }).length > 0 ? true : this.isInitalExpand;
      }
      if (this.isInitalExpand && eUids.length > 0) {
        this.setProperties({ expandedNodes: [] }, true);
        if (this.fields.dataSource instanceof DataManager) {
          this.expandGivenNodes(eUids);
        } else {
          for (var i = 0; i < eUids.length; i++) {
            var eNode = select('[data-uid="' + eUids[parseInt(i.toString(), 10)] + '"]', this.element);
            if (!isNullOrUndefined(eNode)) {
              var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
              if (!isNullOrUndefined(icon)) {
                this.expandAction(eNode, icon, null);
              }
            } else {
              if (eUids[parseInt(i.toString(), 10)] && this.expandChildren.indexOf(eUids[parseInt(i.toString(), 10)]) === -1) {
                this.expandChildren.push(eUids[parseInt(i.toString(), 10)].toString());
              }
              continue;
            }
          }
          this.afterFinalized();
        }
      } else {
        this.afterFinalized();
      }
    };
    TreeView2.prototype.expandGivenNodes = function(arr) {
      var _this = this;
      this.expandCallback(arr[this.index], function() {
        _this.index++;
        if (_this.index < arr.length) {
          _this.expandGivenNodes(arr);
        } else {
          _this.afterFinalized();
        }
      });
      if (this.index > 0) {
        this.index = 0;
      }
    };
    TreeView2.prototype.expandCallback = function(eUid, callback) {
      var eNode = select('[data-uid="' + eUid + '"]', this.element);
      if (!isNullOrUndefined(eNode)) {
        var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
        if (!isNullOrUndefined(icon)) {
          this.expandAction(eNode, icon, null, false, callback);
        }
        callback();
      } else {
        callback();
      }
    };
    TreeView2.prototype.afterFinalized = function() {
      this.doSelectionAction();
      this.updateCheckedProp();
      this.isAnimate = true;
      this.isInitalExpand = false;
      if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {
        var eventArgs = { data: this.treeData };
        this.trigger("dataBound", eventArgs);
      }
      this.isLoaded = true;
      this.isNodeDropped = false;
    };
    TreeView2.prototype.doSelectionAction = function() {
      var sNodes = selectAll("." + SELECTED2, this.element);
      var sUids = this.selectedNodes;
      if (sUids.length > 0) {
        this.setProperties({ selectedNodes: [] }, true);
        for (var i = 0; i < sUids.length; i++) {
          var sNode = select('[data-uid="' + sUids[parseInt(i.toString(), 10)] + '"]', this.element);
          if (sNode && !sNode.classList.contains("e-active")) {
            this.selectNode(sNode, null, true);
          } else {
            this.selectedNodes.push(sUids[parseInt(i.toString(), 10)]);
          }
          if (!this.allowMultiSelection) {
            break;
          }
        }
      } else {
        this.selectGivenNodes(sNodes);
      }
      removeClass(sNodes, SELECTED2);
    };
    TreeView2.prototype.selectGivenNodes = function(sNodes) {
      for (var i = 0; i < sNodes.length; i++) {
        if (!sNodes[parseInt(i.toString(), 10)].classList.contains("e-disable")) {
          this.selectNode(sNodes[parseInt(i.toString(), 10)], null, true);
        }
        if (!this.allowMultiSelection) {
          break;
        }
      }
    };
    TreeView2.prototype.clickHandler = function(event2) {
      var target = Browser.isDevice && event2.originalEvent.changedTouches && !Browser.isIos ? document.elementFromPoint(event2.originalEvent.changedTouches[0].clientX, event2.originalEvent.changedTouches[0].clientY) : event2.originalEvent.target;
      EventHandler.remove(this.element, "contextmenu", this.preventContextMenu);
      if (!target || this.dragStartAction) {
        return;
      } else {
        var classList2 = target.classList;
        var li = closest(target, "." + LISTITEM);
        if (!li || li.classList.contains(PREVENTSELECT) && !(classList2.contains(EXPANDABLE) || classList2.contains(COLLAPSIBLE))) {
          return;
        } else if (event2.originalEvent.which !== 3) {
          var rippleElement = select("." + RIPPLEELMENT, li);
          var rippleIcons = select("." + ICON, li);
          this.removeHover();
          this.setFocusElement(li);
          if (this.showCheckBox && !li.classList.contains("e-disable")) {
            var checkWrapper = closest(target, "." + CHECKBOXWRAP);
            if (!isNullOrUndefined(checkWrapper)) {
              var checkElement = select("." + CHECKBOXFRAME, checkWrapper);
              this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event2.originalEvent);
              this.triggerClickEvent(event2.originalEvent, li);
              return;
            }
          }
          if (classList2.contains(EXPANDABLE)) {
            this.expandAction(li, target, event2);
          } else if (classList2.contains(COLLAPSIBLE)) {
            this.collapseNode(li, target, event2);
          } else if (rippleElement && rippleIcons) {
            if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {
              this.expandAction(li, rippleIcons, event2);
            } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {
              this.collapseNode(li, rippleIcons, event2);
            } else if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          } else {
            if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          }
        }
        if (event2.originalEvent.which === 3) {
          this.isRightClick = true;
        }
        this.triggerClickEvent(event2.originalEvent, li);
      }
    };
    TreeView2.prototype.nodeCheckedEvent = function(wrapper, isCheck, e) {
      var eventArgs = this.getCheckEvent(wrapper, isCheck ? "uncheck" : "check", e);
      eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
      this.trigger("nodeChecked", eventArgs);
    };
    TreeView2.prototype.triggerClickEvent = function(e, li) {
      var eventArgs = {
        event: e,
        node: li
      };
      this.trigger("nodeClicked", eventArgs);
    };
    TreeView2.prototype.expandNode = function(currLi, icon, loaded) {
      var _this = this;
      this.renderReactTemplates();
      if (icon.classList.contains(LOAD)) {
        this.hideSpinner(icon);
      }
      if (!this.initialRender) {
        icon.classList.add("interaction");
      }
      if (loaded !== true || loaded === true && currLi.classList.contains("e-expanded")) {
        if (this.preventExpand !== true) {
          removeClass([icon], EXPANDABLE);
          addClass([icon], COLLAPSIBLE);
          var start_1 = 0;
          var end_1 = 0;
          var ul_1 = select("." + PARENTITEM, currLi);
          var liEle_1 = currLi;
          this.setHeight(liEle_1, ul_1);
          var activeElement_1 = select("." + LISTITEM + "." + ACTIVE, currLi);
          if (this.isAnimate && !this.isRefreshed) {
            this.aniObj.animate(ul_1, {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration === 0 && animationMode === "Enable" ? 400 : this.animation.expand.duration,
              timingFunction: this.animation.expand.easing,
              begin: function() {
                liEle_1.style.overflow = "hidden";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
                }
                start_1 = liEle_1.offsetHeight;
                end_1 = select("." + TEXTWRAP, currLi).offsetHeight;
              },
              progress: function(args) {
                args.element.style.display = "block";
                _this.animateHeight(args, start_1, end_1);
              },
              end: function(args) {
                args.element.style.display = "block";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
                }
                _this.expandedNode(liEle_1, ul_1, icon);
              }
            });
          } else {
            this.expandedNode(liEle_1, ul_1, icon);
          }
        }
      } else {
        var ul = select("." + PARENTITEM, currLi);
        ul.style.display = "none";
        if (this.fields.dataSource instanceof DataManager === true) {
          this.preventExpand = false;
        }
      }
      if (this.initialRender) {
        icon.classList.add("interaction");
      }
    };
    TreeView2.prototype.expandedNode = function(currLi, ul, icon) {
      ul.style.display = "block";
      currLi.style.display = "block";
      currLi.style.overflow = "";
      currLi.style.height = "";
      removeClass([icon], PROCESS);
      this.addExpand(currLi);
      if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {
        this.updateWrap(currLi);
        this.isFirstRender = false;
      }
      if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, null);
        this.expandArgs.isInteracted = this.isInteracted;
        this.trigger("nodeExpanded", this.expandArgs);
      }
    };
    TreeView2.prototype.addExpand = function(liEle) {
      liEle.setAttribute("aria-expanded", "true");
      removeClass([liEle], NODECOLLAPSED);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {
        this.expandedNodes.push(id);
      }
    };
    TreeView2.prototype.collapseNode = function(currLi, icon, e) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      var colArgs;
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = colArgs.isInteracted;
        this.trigger("nodeCollapsing", colArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeCollapseAction(currLi, icon, observedArgs);
          }
        });
      } else {
        this.nodeCollapseAction(currLi, icon, colArgs);
      }
    };
    TreeView2.prototype.nodeCollapseAction = function(currLi, icon, colArgs) {
      var _this = this;
      removeClass([icon], COLLAPSIBLE);
      addClass([icon], EXPANDABLE);
      var start = 0;
      var end = 0;
      var ul = select("." + PARENTITEM, currLi);
      var liEle = currLi;
      var activeElement = select("." + LISTITEM + "." + ACTIVE, currLi);
      if (this.isAnimate) {
        this.aniObj.animate(ul, {
          name: this.animation.collapse.effect,
          duration: this.animation.collapse.duration === 0 && animationMode === "Enable" ? 400 : this.animation.collapse.duration,
          timingFunction: this.animation.collapse.easing,
          begin: function() {
            liEle.style.overflow = "hidden";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
            }
            start = select("." + TEXTWRAP, currLi).offsetHeight;
            end = liEle.offsetHeight;
          },
          progress: function(args) {
            _this.animateHeight(args, start, end);
          },
          end: function(args) {
            args.element.style.display = "none";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
            }
            _this.collapsedNode(liEle, ul, icon, colArgs);
          }
        });
      } else {
        this.collapsedNode(liEle, ul, icon, colArgs);
      }
    };
    TreeView2.prototype.collapsedNode = function(liEle, ul, icon, colArgs) {
      ul.style.display = "none";
      liEle.style.overflow = "";
      liEle.style.height = "";
      removeClass([icon], PROCESS);
      this.removeExpand(liEle);
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(liEle, null);
        colArgs.isInteracted = this.isInteracted;
        this.trigger("nodeCollapsed", colArgs);
      }
    };
    TreeView2.prototype.removeExpand = function(liEle, toRemove) {
      if (toRemove) {
        liEle.removeAttribute("aria-expanded");
      } else {
        this.disableExpandAttr(liEle);
      }
      var index = this.expandedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.expandedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.disableExpandAttr = function(liEle) {
      liEle.setAttribute("aria-expanded", "false");
      addClass([liEle], NODECOLLAPSED);
    };
    TreeView2.prototype.setHeight = function(currLi, ul) {
      ul.style.display = "block";
      ul.style.visibility = "hidden";
      currLi.style.height = currLi.offsetHeight + "px";
      ul.style.display = "none";
      ul.style.visibility = "";
    };
    TreeView2.prototype.animateHeight = function(args, start, end) {
      var remaining = (args.duration - args.timeStamp) / args.duration;
      var currentHeight = (end - start) * remaining + start;
      args.element.parentElement.style.height = currentHeight + "px";
    };
    TreeView2.prototype.renderChildNodes = function(parentLi, expandChild, callback, loaded) {
      var _this = this;
      var eicon = select("div." + ICON, parentLi);
      if (isNullOrUndefined(eicon)) {
        return;
      }
      this.showSpinner(eicon);
      var childItems;
      if (this.fields.dataSource instanceof DataManager) {
        var level = this.parents(parentLi, "." + PARENTITEM).length;
        var mapper_2 = this.getChildFields(this.fields, level, 1);
        if (isNullOrUndefined(mapper_2) || isNullOrUndefined(mapper_2.dataSource)) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        }
        this.treeList.push("false");
        if (this.fields.dataSource instanceof DataManager && this.isOffline) {
          this.treeList.pop();
          childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"));
          this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
        } else {
          mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute("data-uid"))).then(function(e) {
            _this.treeList.pop();
            childItems = e.result;
            if (_this.dataType === 1) {
              _this.dataType = 2;
            }
            _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"), false, parseFloat(parentLi.getAttribute("aria-level")) + 1);
        this.currentLoadData = this.getSortedData(childItems);
        if (isNullOrUndefined(childItems) || childItems.length === 0) {
          detach(eicon);
          if (eicon.classList.contains(LOAD)) {
            this.hideSpinner(eicon);
          }
          this.removeExpand(parentLi, true);
          return;
        } else {
          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
          parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));
          this.expandNode(parentLi, eicon, loaded);
          this.setSelectionForChildNodes(childItems);
          this.ensureCheckNode(parentLi);
          this.finalizeNode(parentLi);
          this.disableTreeNodes(childItems);
          this.renderSubChild(parentLi, expandChild, loaded);
        }
      }
    };
    TreeView2.prototype.loadChild = function(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
      this.currentLoadData = childItems;
      if (isNullOrUndefined(childItems) || childItems.length === 0) {
        detach(eicon);
        this.removeExpand(parentLi, true);
      } else {
        this.updateListProp(mapper);
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          var id = parentLi.getAttribute("data-uid");
          var nodeData = this.getNodeObject(id);
          setValue("child", childItems, nodeData);
        }
        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
        parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }
      if (callback) {
        callback();
      }
      if (expandChild) {
        this.expandedNodes.push(parentLi.getAttribute("data-uid"));
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.disableTreeNodes = function(childItems) {
      var i = 0;
      while (i < childItems.length) {
        var id = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        if (this.disableNode !== void 0 && this.disableNode.indexOf(id) !== -1) {
          this.doDisableAction([id]);
        }
        i++;
      }
    };
    TreeView2.prototype.setSelectionForChildNodes = function(nodes) {
      var i;
      for (i = 0; i < nodes.length; i++) {
        var id = nodes[parseInt(i.toString(), 10)][this.fields.id] ? nodes[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        if (this.selectedNodes !== void 0 && this.selectedNodes.indexOf(id) !== -1) {
          this.doSelectionAction();
        }
      }
    };
    TreeView2.prototype.ensureCheckNode = function(element) {
      if (this.showCheckBox) {
        this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute("data-uid")) : null;
        if (this.autoCheck) {
          this.ensureChildCheckState(element);
          this.ensureParentCheckState(element);
        }
      }
      this.currentLoadData = null;
    };
    TreeView2.prototype.getFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return mapper;
      } else {
        return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return this.getChildMapper(mapper);
      } else {
        return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildMapper = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    TreeView2.prototype.getChildNodes = function(obj, parentId, isRoot, level) {
      var _this = this;
      if (isRoot === void 0) {
        isRoot = false;
      }
      var childNodes;
      if (isNullOrUndefined(obj)) {
        return childNodes;
      } else if (this.dataType === 1) {
        return this.getChildGroup(this.groupedData, parentId, isRoot);
      } else {
        if (typeof this.fields.child === "string") {
          var index = obj.findIndex(function(data) {
            return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
          });
          if (index !== -1) {
            return getValue(this.fields.child, obj[parseInt(index.toString(), 10)]);
          }
          if (index === -1) {
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var tempArray = getValue(this.fields.child, obj[parseInt(i.toString(), 10)]);
              var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
                return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
              }) : -1;
              if (childIndex !== -1) {
                return getValue(this.fields.child, tempArray[parseInt(childIndex.toString(), 10)]);
              } else if (!isNullOrUndefined(tempArray)) {
                childNodes = this.getChildNodes(tempArray, parentId);
                if (childNodes !== void 0) {
                  break;
                }
              }
            }
          }
        } else if (this.isChildObject()) {
          var tempField = !isNullOrUndefined(level) ? this.fields : this.fields.child;
          var i = 1;
          while (i < level) {
            if (!isNullOrUndefined(tempField.child)) {
              tempField = tempField.child;
            } else {
              break;
            }
            i++;
          }
          this.updateListProp(tempField);
          var index = obj.findIndex(function(data) {
            return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
          });
          if (index !== -1) {
            return getValue("child", obj[parseInt(index.toString(), 10)]);
          }
          if (index === -1) {
            for (var i_1 = 0, objlen = obj.length; i_1 < objlen; i_1++) {
              var tempArray = getValue("child", obj[parseInt(i_1.toString(), 10)]);
              var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
                return getValue(_this.fields.child.id, data) && getValue(_this.fields.child.id, data).toString() === parentId;
              }) : -1;
              if (childIndex !== -1) {
                return getValue("child", tempArray[parseInt(childIndex.toString(), 10)]);
              } else if (!isNullOrUndefined(tempArray)) {
                childNodes = this.getChildNodes(tempArray, parentId, false, level);
                if (childNodes !== void 0) {
                  break;
                }
              }
            }
          }
        }
      }
      return childNodes;
    };
    TreeView2.prototype.getChildGroup = function(data, parentId, isRoot) {
      var childNodes;
      if (isNullOrUndefined(data)) {
        return childNodes;
      }
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        if (!isNullOrUndefined(data[parseInt(i.toString(), 10)][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[parseInt(i.toString(), 10)][0]))) {
          if (getValue(this.fields.parentID, data[parseInt(i.toString(), 10)][0]).toString() === parentId) {
            return data[parseInt(i.toString(), 10)];
          }
        } else if (isRoot) {
          return data[parseInt(i.toString(), 10)];
        } else {
          return [];
        }
      }
      return childNodes;
    };
    TreeView2.prototype.renderSubChild = function(element, expandChild, loaded) {
      if (expandChild) {
        var cIcons = selectAll("." + EXPANDABLE, element);
        for (var i = 0, len = cIcons.length; i < len; i++) {
          var icon = cIcons[parseInt(i.toString(), 10)];
          if (element.querySelector(".e-icons") !== cIcons[parseInt(i.toString(), 10)]) {
            var curLi = closest(icon, "." + LISTITEM);
            this.expandArgs = this.getExpandEvent(curLi, null);
            if (loaded !== true) {
              this.trigger("nodeExpanding", this.expandArgs);
            }
            this.renderChildNodes(curLi, expandChild, null, loaded);
          }
        }
      }
    };
    TreeView2.prototype.toggleSelect = function(li, e, multiSelect) {
      if (!li.classList.contains("e-disable")) {
        if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
          this.unselectNode(li, e);
        } else {
          this.selectNode(li, e, multiSelect);
        }
      }
    };
    TreeView2.prototype.isActive = function(li) {
      return li.classList.contains(ACTIVE) ? true : false;
    };
    TreeView2.prototype.selectNode = function(li, e, multiSelect) {
      var _this = this;
      if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {
        this.setFocusElement(li);
        return;
      }
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {
            _this.nodeSelectAction(li, e, observedArgs, multiSelect);
          }
        });
      } else {
        this.nodeSelectAction(li, e, eventArgs, multiSelect);
      }
    };
    TreeView2.prototype.nodeSelectAction = function(li, e, eventArgs, multiSelect) {
      if (!this.allowMultiSelection || !multiSelect && (!e || e && !(e.ctrlKey || e.metaKey))) {
        this.removeSelectAll();
      }
      if (this.allowMultiSelection && e && e.shiftKey) {
        if (!this.startNode) {
          this.startNode = li;
        }
        var startIndex = this.liList.indexOf(this.startNode);
        var endIndex = this.liList.indexOf(li);
        if (startIndex > endIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex; i <= endIndex; i++) {
          var currNode = this.liList[parseInt(i.toString(), 10)];
          if (isVisible(currNode) && !currNode.classList.contains("e-disable")) {
            this.addSelect(currNode);
          }
        }
      } else {
        this.startNode = li;
        this.addSelect(li);
      }
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
        this.isRightClick = false;
      }
      this.isRightClick = false;
    };
    TreeView2.prototype.unselectNode = function(li, e) {
      var _this = this;
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "un-select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeUnselectAction(li, observedArgs);
          }
        });
      } else {
        this.nodeUnselectAction(li, eventArgs);
      }
    };
    TreeView2.prototype.nodeUnselectAction = function(li, eventArgs) {
      this.removeSelect(li);
      this.setFocusElement(li);
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
      }
    };
    TreeView2.prototype.setFocusElement = function(li) {
      if (!isNullOrUndefined(li)) {
        var focusedNode = this.getFocusedNode();
        if (focusedNode) {
          removeClass([focusedNode], FOCUS);
          focusedNode.setAttribute("tabindex", "-1");
        }
        addClass([li], FOCUS);
        li.setAttribute("tabindex", "0");
        EventHandler.add(li, "blur", this.focusOut, this);
        this.updateIdAttr(focusedNode, li);
      }
    };
    TreeView2.prototype.addSelect = function(liEle) {
      liEle.setAttribute("aria-selected", "true");
      addClass([liEle], ACTIVE);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {
        this.selectedNodes.push(id);
      }
    };
    TreeView2.prototype.removeSelect = function(liEle) {
      if (this.allowMultiSelection) {
        liEle.setAttribute("aria-selected", "false");
      } else {
        liEle.removeAttribute("aria-selected");
      }
      removeClass([liEle], ACTIVE);
      var index = this.selectedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.selectedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.removeSelectAll = function() {
      var selectedLI = this.element.querySelectorAll("." + ACTIVE);
      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];
        if (this.allowMultiSelection) {
          ele.setAttribute("aria-selected", "false");
        } else {
          ele.removeAttribute("aria-selected");
        }
      }
      removeClass(selectedLI, ACTIVE);
      this.setProperties({ selectedNodes: [] }, true);
    };
    TreeView2.prototype.getSelectEvent = function(currLi, action, e) {
      var nodeData = this.getNodeData(currLi);
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData };
    };
    TreeView2.prototype.setExpandOnType = function() {
      this.expandOnType = this.expandOn === "Auto" ? Browser.isDevice ? "Click" : "DblClick" : this.expandOn;
    };
    TreeView2.prototype.expandHandler = function(e) {
      var target = Browser.isDevice && e.originalEvent.changedTouches && !Browser.isIos ? document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY) : e.originalEvent.target;
      if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, "." + CHECKBOXWRAP)) {
        return;
      } else {
        this.expandCollapseAction(closest(target, "." + LISTITEM), e);
      }
    };
    TreeView2.prototype.expandCollapseAction = function(currLi, e) {
      var icon = select("div." + ICON, currLi);
      if (!icon || icon.classList.contains(PROCESS)) {
        return;
      } else {
        var classList2 = icon.classList;
        if (classList2.contains(EXPANDABLE)) {
          this.expandAction(currLi, icon, e);
        } else if (classList2.contains(COLLAPSIBLE)) {
          this.collapseNode(currLi, icon, e);
        }
      }
    };
    TreeView2.prototype.expandAction = function(currLi, icon, e, expandChild, callback) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      if (this.isLoaded && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = this.expandArgs.isInteracted;
        this.trigger("nodeExpanding", this.expandArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeExpandAction(currLi, icon, expandChild, callback);
          }
        });
      } else {
        this.nodeExpandAction(currLi, icon, expandChild, callback);
      }
    };
    TreeView2.prototype.nodeExpandAction = function(currLi, icon, expandChild, callback) {
      var ul = select("." + PARENTITEM, currLi);
      if (ul && ul.nodeName === "UL") {
        this.expandNode(currLi, icon);
      } else {
        this.isFirstRender = true;
        this.renderChildNodes(currLi, expandChild, callback);
        var liEles = selectAll("." + LISTITEM, currLi);
        for (var i = 0; i < liEles.length; i++) {
          var id = this.getId(liEles[parseInt(i.toString(), 10)]);
          if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== void 0) {
            var icon_1 = select("." + EXPANDABLE, select("." + TEXTWRAP, liEles[parseInt(i.toString(), 10)]));
            if (!isNullOrUndefined(icon_1)) {
              this.expandAction(liEles[parseInt(i.toString(), 10)], icon_1, null);
            }
            this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
          }
        }
      }
    };
    TreeView2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var target = e.target;
      var focusedNode = this.getFocusedNode();
      if (target && target.classList.contains(INPUT)) {
        var inpEle = target;
        if (e.action === "enter") {
          inpEle.blur();
        } else if (e.action === "escape") {
          inpEle.value = this.oldText;
          inpEle.blur();
        }
        return;
      }
      e.preventDefault();
      var eventArgs = {
        cancel: false,
        event: e,
        node: focusedNode
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              if (_this.showCheckBox) {
                _this.checkNode(e);
              } else {
                _this.toggleSelect(focusedNode, e);
              }
              break;
            case "moveRight":
              _this.openNode(_this.enableRtl ? false : true, e);
              break;
            case "moveLeft":
              _this.openNode(_this.enableRtl ? true : false, e);
              break;
            case "shiftDown":
              _this.shiftKeySelect(true, e);
              break;
            case "moveDown":
            case "ctrlDown":
            case "csDown":
              _this.navigateNode(true);
              break;
            case "shiftUp":
              _this.shiftKeySelect(false, e);
              break;
            case "moveUp":
            case "ctrlUp":
            case "csUp":
              _this.navigateNode(false);
              break;
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
              _this.navigateRootNode(true);
              break;
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
              _this.navigateRootNode(false);
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
            case "shiftSpace":
            case "ctrlSpace":
              _this.toggleSelect(focusedNode, e);
              break;
            case "f2":
              if (_this.allowEditing && !focusedNode.classList.contains("e-disable")) {
                _this.createTextbox(focusedNode);
              }
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                var sNodes = selectAll("." + LISTITEM + ":not(." + ACTIVE + ")", _this.element);
                _this.selectGivenNodes(sNodes);
              }
              break;
          }
        }
      });
    };
    TreeView2.prototype.navigateToFocus = function(isUp) {
      var focusNode = this.getFocusedNode().querySelector("." + TEXTWRAP);
      var pos = focusNode.getBoundingClientRect();
      var parent = this.getScrollParent(this.element);
      if (!isNullOrUndefined(parent)) {
        var parentPos = parent.getBoundingClientRect();
        if (pos.bottom > parentPos.bottom) {
          parent.scrollTop += pos.bottom - parentPos.bottom;
        } else if (pos.top < parentPos.top) {
          parent.scrollTop -= parentPos.top - pos.top;
        }
      }
      var isVisible2 = this.isVisibleInViewport(focusNode);
      if (!isVisible2) {
        focusNode.scrollIntoView(isUp);
      }
    };
    TreeView2.prototype.isVisibleInViewport = function(txtWrap) {
      var pos = txtWrap.getBoundingClientRect();
      return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
    };
    TreeView2.prototype.getScrollParent = function(node) {
      if (isNullOrUndefined(node)) {
        return null;
      }
      return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
    };
    TreeView2.prototype.shiftKeySelect = function(isTowards, e) {
      if (this.allowMultiSelection) {
        var focusedNode = this.getFocusedNode();
        var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
        this.removeHover();
        this.setFocusElement(nextNode);
        this.toggleSelect(nextNode, e, false);
        this.navigateToFocus(!isTowards);
      } else {
        this.navigateNode(isTowards);
      }
    };
    TreeView2.prototype.checkNode = function(e) {
      var focusedNode = this.getFocusedNode();
      var checkWrap = select("." + CHECKBOXWRAP, focusedNode);
      var isChecked = select(" ." + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);
      if (!focusedNode.classList.contains("e-disable")) {
        if (focusedNode.getElementsByClassName("e-checkbox-disabled").length === 0) {
          this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }
      }
    };
    TreeView2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e) {
      var _this = this;
      var currLi = closest(checkWrap, "." + LISTITEM);
      this.checkActionNodes = [];
      var ariaState = !isCheck ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      var eventArgs = this.getCheckEvent(currLi, isCheck ? "uncheck" : "check", e);
      this.trigger("nodeChecking", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
        }
      });
    };
    TreeView2.prototype.nodeCheckingAction = function(checkWrap, isCheck, li, eventArgs, e) {
      if (this.checkedElement.indexOf(li.getAttribute("data-uid")) === -1) {
        this.checkedElement.push(li.getAttribute("data-uid"));
        if (this.autoCheck) {
          var child = this.getChildNodes(this.treeData, li.getAttribute("data-uid"));
          if (child !== null) {
            this.allCheckNode(child, this.checkedElement, null, null, false);
          } else {
            child = null;
          }
        }
      }
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true);
      if (this.autoCheck) {
        this.ensureChildCheckState(li);
        this.ensureParentCheckState(closest(closest(li, "." + PARENTITEM), "." + LISTITEM));
        var doCheck = void 0;
        if (eventArgs.action === "check") {
          doCheck = true;
        } else if (eventArgs.action === "uncheck") {
          doCheck = false;
        }
        this.ensureStateChange(li, doCheck);
      }
      this.nodeCheckedEvent(checkWrap, isCheck, e);
    };
    TreeView2.prototype.ensureStateChange = function(li, doCheck) {
      var childElement = select("." + PARENTITEM, li);
      var parentIndex = li.getAttribute("data-uid");
      var mapper = this.fields;
      if (this.dataType === 1 && this.autoCheck) {
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", parentIndex, true));
        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id] ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
          var isCheck = resultData[parseInt(i.toString(), 10)][this.fields.isChecked] ? resultData[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
          if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
            this.checkedNodes.push(resultId);
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, resultId, "isChecked", null);
            }
            if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
              var childNodes = this.getChildNodes(this.treeData, resultId);
              this.getChildItems(childNodes, doCheck);
              if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
              }
            }
          } else {
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
          }
        }
      } else if (this.dataType === 1 && !this.autoCheck) {
        if (!doCheck) {
          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < checkedData.length; i++) {
            var id = checkedData[parseInt(i.toString(), 10)][this.fields.id] ? checkedData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(id) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
            }
            this.updateField(this.treeData, this.fields, id, "isChecked", null);
          }
          this.checkedNodes = [];
        } else {
          for (var i = 0; i < this.treeData.length; i++) {
            var checkedId = this.treeData[parseInt(i.toString(), 10)][this.fields.id] ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(checkedId) === -1) {
              this.checkedNodes.push(checkedId);
            }
          }
        }
      } else {
        var childItems = this.getChildNodes(this.treeData, parentIndex);
        if (childItems) {
          this.childStateChange(childItems, parentIndex, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.getChildItems = function(childItems, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var childId = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : null;
        var childIsCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked] ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
        if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
        }
        if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
          this.checkedNodes.push(childId);
        }
        if (childIsCheck === "true" && !doCheck) {
          this.updateField(this.treeData, this.fields, childId, "isChecked", null);
        }
        var subChildItems = this.getChildNodes(this.treeData, childId);
        if (subChildItems.length > 0) {
          this.getChildItems(subChildItems, doCheck);
        }
      }
    };
    TreeView2.prototype.childStateChange = function(childItems, parent, childElement, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var checkedChild = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : "";
        var isCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked] ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString() : null;
        if (this.autoCheck) {
          if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);
            if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
            }
          } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            }
          }
        } else if (!this.autoCheck) {
          if (!doCheck) {
            if (this.checkedNodes.indexOf(checkedChild) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            }
            this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            this.checkedNodes = [];
          } else {
            if (this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
        }
        var subChild = this.getChildNodes([childItems[parseInt(i.toString(), 10)]], checkedChild);
        if (subChild) {
          this.childStateChange(subChild, parent, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.allCheckNode = function(child, newCheck, checked, childCheck, validateCheck) {
      if (child) {
        for (var length_1 = 0; length_1 < child.length; length_1++) {
          var childId = getValue(this.fields.id, child[parseInt(length_1.toString(), 10)]);
          var check = this.element.querySelector('[data-uid="' + childId + '"]');
          if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
            if (check === null && !isNullOrUndefined(child[parseInt(length_1.toString(), 10)][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
              if (child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2) {
                newCheck.push(childId.toString());
              } else {
                childCheck = null;
              }
              childCheck = child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
            }
          }
          if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {
            newCheck.push(childId.toString());
          }
          var hierChildId = getValue(this.fields.child.toString(), child[parseInt(length_1.toString(), 10)]);
          if (getValue(this.fields.hasChildren, child[parseInt(length_1.toString(), 10)]) === true || hierChildId) {
            var id = getValue(this.fields.id, child[parseInt(length_1.toString(), 10)]);
            var childId_1 = void 0;
            if (this.dataType === 1) {
              childId_1 = this.getChildNodes(this.treeData, id.toString());
            } else {
              childId_1 = hierChildId;
            }
            if (childId_1) {
              if (isNullOrUndefined(validateCheck)) {
                this.allCheckNode(childId_1, newCheck, checked, childCheck);
              } else {
                this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
              }
              childCheck = null;
            }
          }
          childCheck = null;
        }
      }
    };
    TreeView2.prototype.openNode = function(toBeOpened, e) {
      var focusedNode = this.getFocusedNode();
      var icon = select("div." + ICON, focusedNode);
      if (toBeOpened) {
        if (!icon) {
          return;
        } else if (icon.classList.contains(EXPANDABLE)) {
          this.expandAction(focusedNode, icon, e);
        } else {
          this.focusNextNode(focusedNode, true);
        }
      } else {
        if (icon && icon.classList.contains(COLLAPSIBLE)) {
          this.collapseNode(focusedNode, icon, e);
        } else {
          var parentLi = closest(closest(focusedNode, "." + PARENTITEM), "." + LISTITEM);
          if (!parentLi) {
            return;
          } else {
            if (!parentLi.classList.contains("e-disable")) {
              this.setFocus(focusedNode, parentLi);
              this.navigateToFocus(true);
            }
          }
        }
      }
    };
    TreeView2.prototype.navigateNode = function(isTowards) {
      var focusedNode = this.getFocusedNode();
      this.focusNextNode(focusedNode, isTowards);
    };
    TreeView2.prototype.navigateRootNode = function(isBackwards) {
      var focusedNode = this.getFocusedNode();
      var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
      if (!rootNode.classList.contains("e-disable")) {
        this.setFocus(focusedNode, rootNode);
        this.navigateToFocus(isBackwards);
      }
    };
    TreeView2.prototype.getFocusedNode = function() {
      var selectedItem;
      var fNode = select("." + LISTITEM + '[tabindex="0"]', this.element);
      if (isNullOrUndefined(fNode)) {
        selectedItem = select("." + LISTITEM, this.element);
      }
      return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
    };
    TreeView2.prototype.focusNextNode = function(li, isTowards) {
      var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
      this.setFocus(li, nextNode);
      this.navigateToFocus(!isTowards);
      if (nextNode.classList.contains("e-disable") || nextNode.classList.contains("e-prevent")) {
        var lastChild = nextNode.lastChild;
        if (nextNode.previousSibling == null && nextNode.classList.contains("e-level-1")) {
          this.focusNextNode(nextNode, true);
        } else if (nextNode.nextSibling == null && nextNode.classList.contains("e-node-collapsed")) {
          this.focusNextNode(nextNode, false);
        } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {
          this.focusNextNode(nextNode, false);
        } else {
          this.focusNextNode(nextNode, isTowards);
        }
      }
    };
    TreeView2.prototype.getNextNode = function(li) {
      var index = this.liList.indexOf(li);
      var nextNode;
      do {
        index++;
        nextNode = this.liList[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(nextNode)) {
          return li;
        }
      } while (!isVisible(nextNode));
      return nextNode;
    };
    TreeView2.prototype.getPrevNode = function(li) {
      var index = this.liList.indexOf(li);
      var prevNode;
      do {
        index--;
        prevNode = this.liList[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(prevNode)) {
          return li;
        }
      } while (!isVisible(prevNode));
      return prevNode;
    };
    TreeView2.prototype.getRootNode = function() {
      var index = 0;
      var rootNode;
      do {
        rootNode = this.liList[parseInt(index.toString(), 10)];
        index++;
      } while (!isVisible(rootNode));
      return rootNode;
    };
    TreeView2.prototype.getEndNode = function() {
      var index = this.liList.length - 1;
      var endNode;
      do {
        endNode = this.liList[parseInt(index.toString(), 10)];
        index--;
      } while (!isVisible(endNode));
      return endNode;
    };
    TreeView2.prototype.setFocus = function(preNode, nextNode) {
      removeClass([preNode], FOCUS);
      preNode.setAttribute("tabindex", "-1");
      if (!nextNode.classList.contains("e-disable") && !nextNode.classList.contains(PREVENTSELECT)) {
        addClass([nextNode], FOCUS);
        nextNode.setAttribute("tabindex", "0");
        nextNode.focus();
        EventHandler.add(nextNode, "blur", this.focusOut, this);
        this.updateIdAttr(preNode, nextNode);
      }
    };
    TreeView2.prototype.updateIdAttr = function(preNode, nextNode) {
      this.element.removeAttribute("aria-activedescendant");
      if (preNode) {
        preNode.removeAttribute("id");
      }
      nextNode.setAttribute("id", this.element.id + "_active");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
    };
    TreeView2.prototype.focusIn = function() {
      if (!this.mouseDownStatus) {
        var focusedElement = this.getFocusedNode();
        if (focusedElement.classList.contains("e-disable") || focusedElement.classList.contains("e-prevent")) {
          focusedElement.setAttribute("tabindex", "-1");
          this.navigateNode(true);
        } else {
          focusedElement.setAttribute("tabindex", "0");
          addClass([focusedElement], FOCUS);
          EventHandler.add(focusedElement, "blur", this.focusOut, this);
        }
        this.mouseDownStatus = false;
      }
    };
    TreeView2.prototype.focusOut = function(event2) {
      var focusedElement = this.getFocusedNode();
      if (event2.target === focusedElement) {
        removeClass([focusedElement], FOCUS);
        EventHandler.remove(focusedElement, "blur", this.focusOut);
      }
    };
    TreeView2.prototype.onMouseOver = function(e) {
      if (Browser.isDevice) {
        return;
      }
      var target = e.target;
      var classList2 = target.classList;
      var currentLi = closest(target, "." + LISTITEM);
      if (!currentLi || classList2.contains(PARENTITEM) || classList2.contains(LISTITEM)) {
        this.removeHover();
        return;
      } else {
        if (currentLi && !currentLi.classList.contains("e-disable")) {
          this.setHover(currentLi);
        }
      }
    };
    TreeView2.prototype.setHover = function(li) {
      if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {
        this.removeHover();
        addClass([li], HOVER);
      }
    };
    TreeView2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    TreeView2.prototype.removeHover = function() {
      var hoveredNode = selectAll("." + HOVER, this.element);
      if (hoveredNode && hoveredNode.length) {
        removeClass(hoveredNode, HOVER);
      }
    };
    TreeView2.prototype.getNodeData = function(currLi, fromDS) {
      if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, "." + CONTROL)) && closest(currLi, "." + CONTROL).classList.contains(ROOT)) {
        var id = currLi.getAttribute("data-uid");
        var text = this.getText(currLi, fromDS);
        var pNode = closest(currLi.parentNode, "." + LISTITEM);
        var pid = pNode ? pNode.getAttribute("data-uid") : null;
        var selected = currLi.classList.contains(ACTIVE);
        var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;
        var expanded = currLi.getAttribute("aria-expanded") === "true" ? true : false;
        var hasChildren = currLi.getAttribute("aria-expanded") !== null ? true : (select("." + EXPANDABLE, currLi) || select("." + COLLAPSIBLE, currLi)) != null ? true : false;
        var checked = null;
        var checkboxElement = select("." + CHECKBOXWRAP, currLi);
        if (this.showCheckBox && checkboxElement) {
          checked = currLi.getAttribute("aria-checked");
        }
        return {
          id,
          text,
          parentID: pid,
          selected,
          selectable,
          expanded,
          isChecked: checked,
          hasChildren
        };
      }
      return { id: "", text: "", parentID: "", selected: false, expanded: false, isChecked: "", hasChildren: false };
    };
    TreeView2.prototype.getText = function(currLi, fromDS) {
      if (fromDS) {
        var nodeData = this.getNodeObject(currLi.getAttribute("data-uid"));
        var level = parseFloat(currLi.getAttribute("aria-level"));
        var nodeFields = this.getFields(this.fields, level, 1);
        return getValue(nodeFields.text, nodeData);
      }
      return select("." + LISTTEXT, currLi).textContent;
    };
    TreeView2.prototype.getExpandEvent = function(currLi, e) {
      var nodeData = this.getNodeData(currLi);
      return { cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData, event: e };
    };
    TreeView2.prototype.renderNodeTemplate = function(data, textEle, dataId) {
      var tempArr = this.nodeTemplateFn(data, this, "nodeTemplate" + dataId, this.element.id + "nodeTemplate", this.isStringTemplate, void 0, textEle, this.root);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, textEle);
      }
    };
    TreeView2.prototype.destroyTemplate = function(liEle) {
      this.clearTemplate(["nodeTemplate" + liEle.getAttribute("data-uid")]);
    };
    TreeView2.prototype.reRenderNodes = function() {
      this.updateListProp(this.fields);
      if (Browser.isIE) {
        this.ulElement = this.element.querySelector(".e-list-parent.e-ul");
        this.ulElement.parentElement.removeChild(this.ulElement);
      } else {
        this.element.innerHTML = "";
      }
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.clearTemplate();
      }
      this.setTouchClass();
      this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);
      this.checkedElement = [];
      this.isLoaded = false;
      this.setDataBinding(true);
    };
    TreeView2.prototype.setCssClass = function(oldClass, newClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass([this.element], oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass([this.element], newClass.split(" "));
      }
    };
    TreeView2.prototype.editingHandler = function(e) {
      var target = e.target;
      if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
        return;
      } else {
        var liEle = closest(target, "." + LISTITEM);
        this.createTextbox(liEle);
      }
    };
    TreeView2.prototype.createTextbox = function(liEle) {
      var _this = this;
      var oldInpEle = select("." + TREEINPUT, this.element);
      if (oldInpEle) {
        oldInpEle.blur();
      }
      var textEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var innerEle = this.createElement("input", { className: TREEINPUT, attrs: { value: this.oldText } });
      var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var inpWidth = textEle.offsetWidth + 5;
          var style_1 = "width:" + inpWidth + "px";
          addClass([liEle], EDITING);
          if (!isNullOrUndefined(_this.nodeTemplateFn)) {
            _this.destroyTemplate(liEle);
          }
          if (_this.isReact) {
            setTimeout(function() {
              _this.renderTextBox(eventArgs, textEle, style_1);
            }, 5);
          } else {
            _this.renderTextBox(eventArgs, textEle, style_1);
          }
        }
      });
    };
    TreeView2.prototype.renderTextBox = function(eventArgs, textEle, style) {
      textEle.innerHTML = eventArgs.innerHtml;
      var inpEle = select("." + TREEINPUT, textEle);
      this.inputObj = Input.createInput({
        element: inpEle,
        properties: {
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputObj.container.setAttribute("style", style);
      inpEle.focus();
      var inputEle = inpEle;
      inputEle.setSelectionRange(0, inputEle.value.length);
      this.wireInputEvents(inpEle);
    };
    TreeView2.prototype.updateOldText = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      this.editData = this.getNodeObject(id);
      var level = parseFloat(liEle.getAttribute("aria-level"));
      this.editFields = this.getFields(this.fields, level, 1);
      this.oldText = getValue(this.editFields.text, this.editData);
    };
    TreeView2.prototype.inputFocusOut = function(e) {
      if (!select("." + TREEINPUT, this.element)) {
        return;
      }
      var target = e.target;
      var newText = target.value;
      var txtEle = closest(target, "." + LISTTEXT);
      var liEle = closest(target, "." + LISTITEM);
      detach(this.inputObj.container);
      Input.destroy({ element: target, properties: this.properties });
      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
        this.crudOperation("update", null, liEle, newText, null, null, true);
      } else {
        this.appendNewText(liEle, txtEle, newText, true);
      }
      EventHandler.remove(target, "blur", this.inputFocusOut);
    };
    TreeView2.prototype.appendNewText = function(liEle, txtEle, newText, isInput) {
      var _this = this;
      var eventArgs = this.getEditEvent(liEle, newText, null);
      this.trigger("nodeEdited", eventArgs, function(observedArgs) {
        newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;
        _this.updateText(liEle, txtEle, newText, isInput);
        if (observedArgs.oldText !== newText) {
          _this.triggerEvent("nodeEdited", [_this.getNode(liEle)]);
        }
      });
    };
    TreeView2.prototype.updateText = function(liEle, txtEle, newText, isInput) {
      var newData = setValue(this.editFields.text, newText, this.editData);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        txtEle.innerText = "";
        var dataId = liEle.getAttribute("data-uid");
        this.renderNodeTemplate(newData, txtEle, dataId);
        this.renderReactTemplates();
      } else {
        if (this.enableHtmlSanitizer) {
          txtEle.innerText = SanitizeHtmlHelper.sanitize(newText);
        } else {
          txtEle.innerHTML = newText;
        }
      }
      if (isInput) {
        removeClass([liEle], EDITING);
        liEle.focus();
        EventHandler.add(liEle, "blur", this.focusOut, this);
        addClass([liEle], FOCUS);
      }
      if (this.allowTextWrap) {
        this.calculateWrap(liEle);
      }
    };
    TreeView2.prototype.getElement = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return this.element.querySelector('[data-uid="' + ele + '"]');
      } else if (typeof ele === "object") {
        return getElement(ele);
      } else {
        return null;
      }
    };
    TreeView2.prototype.getId = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return ele;
      } else if (typeof ele === "object") {
        return getElement(ele).getAttribute("data-uid");
      } else {
        return null;
      }
    };
    TreeView2.prototype.getEditEvent = function(liEle, newText, inpEle) {
      var data = this.getNodeData(liEle);
      return { cancel: false, newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };
    };
    TreeView2.prototype.getNodeObject = function(id) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return childNodes;
      } else if (this.dataType === 1) {
        for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
          var dataId = getValue(this.fields.id, this.treeData[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(this.treeData[parseInt(i.toString(), 10)]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeData[parseInt(i.toString(), 10)];
          }
        }
      } else {
        return this.getChildNodeObject(this.treeData, this.fields, id);
      }
      return childNodes;
    };
    TreeView2.prototype.getChildNodeObject = function(obj, mapper, id) {
      var newList;
      if (isNullOrUndefined(obj)) {
        return newList;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && dataId && dataId.toString() === id) {
          return obj[parseInt(i.toString(), 10)];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var child = "child";
          newList = this.getChildNodeObject(getValue(child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.isChildObject()) {
          var children = "child";
          var childData = getValue(children, obj[parseInt(i.toString(), 10)]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        }
      }
      return newList;
    };
    TreeView2.prototype.setDragAndDrop = function(toBind) {
      if (toBind && !this.disabled) {
        this.initializeDrag();
      } else {
        this.destroyDrag();
      }
    };
    TreeView2.prototype.initializeDrag = function() {
      var _this = this;
      var virtualEle;
      this.dragObj = new Draggable(this.element, {
        enableTailMode: true,
        enableAutoScroll: true,
        dragArea: this.dragArea,
        dragTarget: "." + TEXTWRAP,
        enableTapHold: true,
        tapHoldThreshold: 100,
        helper: function(e) {
          _this.dragTarget = e.sender.target;
          var dragRoot = closest(_this.dragTarget, "." + ROOT);
          var dragWrap = closest(_this.dragTarget, "." + TEXTWRAP);
          _this.dragLi = closest(_this.dragTarget, "." + LISTITEM);
          if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
            dragWrap = _this.dragTarget.nextElementSibling;
          }
          if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains("e-disable")) {
            return false;
          }
          var cloneEle = dragWrap.cloneNode(true);
          if (isNullOrUndefined(select("div." + ICON, cloneEle))) {
            var icon = _this.createElement("div", { className: ICON + " " + EXPANDABLE });
            cloneEle.insertBefore(icon, cloneEle.children[0]);
          }
          var cssClass2 = DRAGITEM + " " + ROOT + " " + _this.cssClass + " " + (_this.enableRtl ? RTL2 : "");
          virtualEle = _this.createElement("div", { className: cssClass2 });
          virtualEle.appendChild(cloneEle);
          var nLen = _this.selectedNodes.length;
          if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {
            var cNode = _this.createElement("span", { className: DROPCOUNT, innerHTML: "" + nLen });
            virtualEle.appendChild(cNode);
          }
          document.body.appendChild(virtualEle);
          document.body.style.cursor = "";
          _this.dragData = _this.getNodeData(_this.dragLi);
          return virtualEle;
        },
        dragStart: function(e) {
          addClass([_this.element], DRAGGING);
          var listItem = closest(e.target, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);
          if (eventArgs.draggedNode.classList.contains(EDITING)) {
            _this.dragObj.intDestroy(e.event);
            _this.dragCancelAction(virtualEle);
          } else {
            _this.trigger("nodeDragStart", eventArgs, function(observedArgs) {
              if (observedArgs.cancel) {
                _this.dragObj.intDestroy(e.event);
                _this.dragCancelAction(virtualEle);
              } else {
                _this.dragStartAction = true;
              }
            });
          }
        },
        drag: function(e) {
          _this.dragObj.setProperties({ cursorAt: { top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20 } });
          _this.dragAction(e, virtualEle);
        },
        dragStop: function(e) {
          removeClass([_this.element], DRAGGING);
          if (!e.target.classList.contains("e-sibling")) {
            _this.removeVirtualEle();
          }
          var dropTarget = e.target;
          var preventTargetExpand = false;
          var dropRoot = closest(dropTarget, "." + DROPPABLE);
          var isHelperElement = true;
          if (!dropTarget || !dropRoot) {
            detach(e.helper);
            document.body.style.cursor = "";
          }
          var listItem = closest(dropTarget, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);
          eventArgs.preventTargetExpand = preventTargetExpand;
          _this.trigger("nodeDragStop", eventArgs, function(observedArgs) {
            _this.dragParent = observedArgs.draggedParentNode;
            _this.preventExpand = observedArgs.preventTargetExpand;
            if (observedArgs.cancel) {
              if (e.helper.parentNode) {
                detach(e.helper);
              }
              document.body.style.cursor = "";
              isHelperElement = false;
              if (dropTarget.classList.contains("e-sibling")) {
                _this.removeVirtualEle();
              }
            }
            _this.dragStartAction = false;
          });
        }
      });
      this.dropObj = new Droppable(this.element, {
        out: function(e) {
          if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING) && (_this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT))) {
            document.body.style.cursor = "not-allowed";
          }
        },
        over: function() {
          document.body.style.cursor = "";
        },
        drop: function(e) {
          _this.dropAction(e);
          _this.removeVirtualEle();
        }
      });
    };
    TreeView2.prototype.dragCancelAction = function(virtualEle) {
      detach(virtualEle);
      removeClass([this.element], DRAGGING);
      this.dragStartAction = false;
    };
    TreeView2.prototype.dragAction = function(e, virtualEle) {
      var dropRoot = closest(e.target, "." + DROPPABLE);
      var dropWrap = closest(e.target, "." + TEXTWRAP);
      var icon = select("div." + ICON, virtualEle);
      removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
      this.isDropIn = false;
      this.removeVirtualEle();
      document.body.style.cursor = "";
      var classList2 = e.target.classList;
      if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList2) && classList2.contains(FULLROW)) {
        dropWrap = e.target.nextElementSibling;
      }
      if (dropRoot) {
        var dropLi = closest(e.target, "." + LISTITEM);
        var checkWrapper = closest(e.target, "." + CHECKBOXWRAP);
        var collapse = closest(e.target, "." + COLLAPSIBLE);
        var expand = closest(e.target, "." + EXPANDABLE);
        if (!dropRoot.classList.contains(ROOT) || dropWrap && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          if (this.hasTemplate && dropLi) {
            var templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
            if (e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
              this.isDropIn = true;
            }
          } else {
            if (dropLi && e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10) && !checkWrapper || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
              this.isDropIn = true;
            }
          }
        } else if (e.target.nodeName === "LI" && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          addClass([icon], DROPNEXT);
          this.renderVirtualEle(e);
        } else if (e.target.classList.contains(SIBLING)) {
          addClass([icon], DROPNEXT);
        } else {
          addClass([icon], DROPOUT);
        }
      } else {
        addClass([icon], NODROP);
        document.body.style.cursor = "not-allowed";
      }
      var listItem = closest(e.target, ".e-list-item");
      var level;
      if (listItem) {
        level = parseInt(listItem.getAttribute("aria-level"), 10);
      }
      var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);
      if (eventArgs.dropIndicator) {
        removeClass([icon], eventArgs.dropIndicator);
      }
      this.trigger("nodeDragging", eventArgs);
      if (eventArgs.dropIndicator) {
        addClass([icon], eventArgs.dropIndicator);
      }
    };
    TreeView2.prototype.appendIndicator = function(dropLi, icon, index) {
      addClass([icon], DROPNEXT);
      var virEle = this.createElement("div", { className: SIBLING });
      dropLi.insertBefore(virEle, dropLi.children[parseInt(index.toString(), 10)]);
    };
    TreeView2.prototype.dropAction = function(e) {
      var offsetY = e.event.offsetY;
      var dropTarget = e.target;
      var dragObj;
      var level;
      var drop = false;
      var nodeData = [];
      var liArray = [];
      var dragInstance = e.dragData.draggable;
      for (var i = 0; i < dragInstance.ej2_instances.length; i++) {
        if (dragInstance.ej2_instances[parseInt(i.toString(), 10)] instanceof TreeView_1) {
          dragObj = dragInstance.ej2_instances[parseInt(i.toString(), 10)];
          break;
        }
      }
      if (dragObj && dragObj.dragTarget) {
        var dragTarget = dragObj.dragTarget;
        var dragLi = closest(dragTarget, "." + LISTITEM);
        var dropLi = closest(dropTarget, "." + LISTITEM);
        liArray.push(dragLi);
        if (dropLi == null && dropTarget.classList.contains(ROOT)) {
          dropLi = dropTarget.firstElementChild;
        }
        detach(e.droppedElement);
        document.body.style.cursor = "";
        if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          if (this.fields.dataSource instanceof DataManager === false) {
            this.preventExpand = false;
          }
          return;
        }
        if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {
          var sNodes = selectAll("." + ACTIVE, dragObj.element);
          liArray = sNodes;
          if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
            for (var i = sNodes.length - 1; i >= 0; i--) {
              if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) || this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);
            }
          } else {
            for (var i = 0; i < sNodes.length; i++) {
              if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) || this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);
            }
          }
        } else {
          this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
        }
        level = parseInt(dragLi.getAttribute("aria-level"), 10);
        drop = true;
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      for (var i = 0; i < liArray.length; i++) {
        nodeData.push(this.getNode(liArray[parseInt(i.toString(), 10)]));
      }
      this.trigger("nodeDropped", this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
      if (dragObj.element.id !== this.element.id) {
        dragObj.triggerEvent("nodeDropped", nodeData);
        this.isNodeDropped = true;
        this.fields.dataSource = this.treeData;
      }
      this.triggerEvent("nodeDropped", nodeData);
    };
    TreeView2.prototype.appendNode = function(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
      var checkWrapper = closest(dropTarget, "." + CHECKBOXWRAP);
      var collapse = closest(e.target, "." + COLLAPSIBLE);
      var expand = closest(e.target, "." + EXPANDABLE);
      if (!dragLi.classList.contains("e-disable") && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
        if (dropTarget.nodeName === "LI") {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {
          if (dropTarget.firstElementChild.nodeName === "UL") {
            this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
          }
        } else if (dropTarget.classList.contains("e-icon-collapsible") || dropTarget.classList.contains("e-icon-expandable")) {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else {
          this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, null, dropTarget);
        }
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true, dropTarget);
      }
      if (this.showCheckBox) {
        this.ensureIndeterminate();
      }
    };
    TreeView2.prototype.dropAsSiblingNode = function(dragLi, dropLi, e, dragObj) {
      var dropUl = closest(dropLi, "." + PARENTITEM);
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var pre;
      if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      } else if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        if (e.event.offsetY < 5 || e.event.offsetX < 3) {
          pre = true;
        } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
          pre = false;
        }
      }
      if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        var target = e.target.closest("li");
        dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
      } else {
        dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
      }
      this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.dropAsChildNode = function(dragLi, dropLi, dragObj, index, e, pos, isCheck, dropTarget) {
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var dropParentUl = closest(dropLi, "." + PARENTITEM);
      var templateTarget;
      if (e && e.target) {
        templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
      }
      if (e && (pos < 7 && !dropTarget.classList.contains("e-sibling") || dropTarget.classList.contains("e-sibling") && !dropLi.lastChild.classList.contains("e-sibling")) && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi);
        this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
      } else if (e && (e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10) && !isCheck && !this.hasTemplate) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else {
        var dropUl = this.expandParent(dropLi);
        var childLi = !isNullOrUndefined(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;
        dropUl.insertBefore(dragLi, childLi);
        this.moveData(dragLi, childLi, dropUl, true, dragObj);
      }
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.moveData = function(dragLi, dropLi, dropUl, pre, dragObj) {
      var dropParentLi = closest(dropUl, "." + LISTITEM);
      var id = this.getId(dragLi);
      var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
      var refId = this.getId(dropLi);
      var index = this.getDataPos(this.treeData, this.fields, refId);
      var parentId = this.getId(dropParentLi);
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", true);
        var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;
        if (isNullOrUndefined(parentId) && !this.hasPid) {
          delete removedData[0][this.fields.parentID];
        } else {
          var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
          setValue(this.fields.parentID, currPid, removedData[0]);
        }
        this.treeData.splice(pos, 0, removedData[0]);
        if (dragObj.element.id !== this.element.id) {
          var childData = dragObj.removeChildNodes(id);
          pos++;
          for (var i = 0, len = childData.length; i < len; i++) {
            this.treeData.splice(pos, 0, childData[parseInt(i.toString(), 10)]);
            pos++;
          }
          dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
      }
    };
    TreeView2.prototype.expandParent = function(dropLi) {
      var dropIcon = select("div." + ICON, dropLi);
      if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
        this.expandAction(dropLi, dropIcon, null);
      }
      var dropUl = select("." + PARENTITEM, dropLi);
      if (this.preventExpand === true && !dropUl && dropIcon) {
        this.renderChildNodes(dropLi);
      }
      dropUl = select("." + PARENTITEM, dropLi);
      if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {
        dropUl.style.display = "none";
      }
      if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {
        dropUl.style.display = "block";
      }
      if (isNullOrUndefined(dropUl) && this.preventExpand === true) {
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        var icon = select("div." + ICON, dropLi);
        if (icon) {
          icon.classList.add("e-icon-expandable");
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        if (icon) {
          removeClass([icon], COLLAPSIBLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        dropLi.setAttribute("aria-expanded", "false");
        dropUl.style.display = "none";
      }
      if (isNullOrUndefined(dropUl)) {
        var args = this.expandArgs;
        if (isNullOrUndefined(args) || args && args.name !== "nodeExpanding") {
          this.trigger("nodeExpanding", this.getExpandEvent(dropLi, null));
        }
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        }
        var icon = select("div." + ICON, dropLi);
        if (icon) {
          removeClass([icon], EXPANDABLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
          icon = select("div." + ICON, dropLi);
          removeClass([icon], EXPANDABLE);
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        this.addExpand(dropLi);
        this.trigger("nodeExpanded", this.getExpandEvent(dropLi, null));
      }
      return dropUl;
    };
    TreeView2.prototype.updateElement = function(dragParentUl, dragParentLi) {
      if (dragParentLi && dragParentUl.childElementCount === 0) {
        var dragIcon = select("div." + ICON, dragParentLi);
        detach(dragParentUl);
        detach(dragIcon);
        var parentId = this.getId(dragParentLi);
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", false);
        this.removeExpand(dragParentLi, true);
      }
    };
    TreeView2.prototype.updateAriaLevel = function(dragLi) {
      var level = this.parents(dragLi, "." + PARENTITEM).length;
      dragLi.setAttribute("aria-level", "" + level);
      this.updateChildAriaLevel(select("." + PARENTITEM, dragLi), level + 1);
    };
    TreeView2.prototype.updateChildAriaLevel = function(element, level) {
      if (!isNullOrUndefined(element)) {
        var cNodes = element.childNodes;
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[parseInt(i.toString(), 10)];
          liEle.setAttribute("aria-level", "" + level);
          this.updateChildAriaLevel(select("." + PARENTITEM, liEle), level + 1);
        }
      }
    };
    TreeView2.prototype.renderVirtualEle = function(e) {
      var pre;
      if (e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      }
      var virEle = this.createElement("div", { className: SIBLING });
      var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
      e.target.insertBefore(virEle, e.target.children[parseInt(index.toString(), 10)]);
    };
    TreeView2.prototype.removeVirtualEle = function() {
      var sibEle = select("." + SIBLING);
      if (sibEle) {
        detach(sibEle);
      }
    };
    TreeView2.prototype.destroyDrag = function() {
      if (this.dragObj && this.dropObj) {
        this.dragObj.destroy();
        this.dropObj.destroy();
      }
    };
    TreeView2.prototype.getDragEvent = function(event2, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
      var dropLi = dropTarget ? closest(dropTarget, "." + LISTITEM) : null;
      var dropData = dropLi ? this.getNodeData(dropLi) : null;
      var draggedNode = obj ? obj.dragLi : dragNode;
      var draggedNodeData = obj ? obj.dragData : null;
      var newParent = dropTarget ? this.parents(dropTarget, "." + LISTITEM) : null;
      var dragLiParent = obj.dragLi.parentElement;
      var dragParent = obj.dragLi ? closest(dragLiParent, "." + LISTITEM) : null;
      var targetParent = null;
      var indexValue = null;
      var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
      var iconClass = null;
      var node = drop === true ? draggedNode : dropLi;
      var index = node ? closest(node, ".e-list-parent") : null;
      var i = 0;
      var position = null;
      dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, "." + ROOT) : dragParent;
      dragParent = drop === true ? this.dragParent : dragParent;
      if (cloneEle) {
        while (i < 4) {
          if (select("." + ICON, cloneEle).classList.contains(iconCss[parseInt(i.toString(), 10)])) {
            iconClass = iconCss[parseInt(i.toString(), 10)];
            break;
          }
          i++;
        }
      }
      if (index) {
        var dropTar = 0;
        for (i = 0; i < index.childElementCount; i++) {
          dropTar = drop !== true && index.children[parseInt(i.toString(), 10)] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;
          if (drop !== true && index.children[parseInt(i.toString(), 10)].classList.contains("e-hover")) {
            indexValue = event2.offsetY >= 23 ? i + 1 : i;
            break;
          } else if (index.children[parseInt(i.toString(), 10)] === node) {
            indexValue = event2.offsetY >= 23 ? i : i;
            break;
          }
        }
        indexValue = dropTar !== 0 ? --indexValue : indexValue;
        position = this.isDropIn ? "Inside" : event2.offsetY < 7 ? "Before" : "After";
      }
      if (dropTarget) {
        if (newParent.length === 0) {
          targetParent = null;
        } else if (dropTarget.classList.contains(LISTITEM)) {
          targetParent = newParent[0];
        } else {
          targetParent = newParent[1];
        }
      }
      if (dropLi === draggedNode) {
        targetParent = dropLi;
      }
      if (dropTarget && target.offsetHeight <= 33 && event2.offsetY < target.offsetHeight - 10 && event2.offsetY > 6) {
        targetParent = dropLi;
        if (drop !== true) {
          level = ++level;
          var parent_2 = targetParent ? select(".e-list-parent", targetParent) : null;
          indexValue = parent_2 ? parent_2.children.length : 0;
          if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {
            var parent_3 = targetParent.hasAttribute("data-uid") ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute("data-uid").toString()) : null;
            indexValue = parent_3 ? parent_3.length : 0;
          }
        }
      }
      return {
        cancel: false,
        clonedNode: cloneEle,
        event: event2,
        draggedNode,
        draggedNodeData,
        droppedNode: dropLi,
        droppedNodeData: dropData,
        dropIndex: indexValue,
        dropLevel: level,
        draggedParentNode: dragParent,
        dropTarget: targetParent,
        dropIndicator: iconClass,
        target,
        position
      };
    };
    TreeView2.prototype.addFullRow = function(toAdd) {
      var len = this.liList.length;
      if (toAdd) {
        for (var i = 0; i < len; i++) {
          this.createFullRow(this.liList[parseInt(i.toString(), 10)]);
        }
      } else {
        for (var i = 0; i < len; i++) {
          var rowDiv = select("." + FULLROW, this.liList[parseInt(i.toString(), 10)]);
          detach(rowDiv);
        }
      }
    };
    TreeView2.prototype.createFullRow = function(item) {
      var rowDiv = this.createElement("div", { className: FULLROW });
      item.insertBefore(rowDiv, item.childNodes[0]);
    };
    TreeView2.prototype.addMultiSelect = function(toAdd) {
      if (toAdd) {
        var liEles = selectAll("." + LISTITEM + ':not([aria-selected="true"])', this.element);
        for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
          var ele = liEles_1[_i];
          ele.setAttribute("aria-selected", "false");
        }
      } else {
        var liEles = selectAll("." + LISTITEM + '[aria-selected="false"]', this.element);
        for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
          var ele = liEles_2[_a];
          ele.removeAttribute("aria-selected");
        }
      }
    };
    TreeView2.prototype.collapseByLevel = function(element, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element)) {
        var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[parseInt(i.toString(), 10)];
          var icon = select("." + COLLAPSIBLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.collapseNode(liEle, icon, null);
          }
          this.collapseByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.collapseAllNodes = function(excludeHiddenNodes) {
      var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + COLLAPSIBLE, this.element));
      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[parseInt(i.toString(), 10)];
        var liEle = closest(icon, "." + LISTITEM);
        this.collapseNode(liEle, icon, null);
      }
    };
    TreeView2.prototype.expandByLevel = function(element, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element)) {
        var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
        for (var i = 0, len = eNodes.length; i < len; i++) {
          var liEle = eNodes[parseInt(i.toString(), 10)];
          var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.expandAction(liEle, icon, null);
          }
          this.expandByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.expandAllNodes = function(excludeHiddenNodes) {
      var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + EXPANDABLE, this.element));
      for (var i = 0, len = eIcons.length; i < len; i++) {
        var icon = eIcons[parseInt(i.toString(), 10)];
        var liEle = closest(icon, "." + LISTITEM);
        this.expandAction(liEle, icon, null, true);
      }
    };
    TreeView2.prototype.getVisibleNodes = function(excludeHiddenNodes, nodes) {
      var vNodes = Array.prototype.slice.call(nodes);
      if (excludeHiddenNodes) {
        for (var i = 0; i < vNodes.length; i++) {
          if (!isVisible(vNodes[parseInt(i.toString(), 10)])) {
            vNodes.splice(i, 1);
            i--;
          }
        }
      }
      return vNodes;
    };
    TreeView2.prototype.removeNode = function(node) {
      var dragParentUl = closest(node, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.destroyTemplate(node);
      }
      detach(node);
      this.updateElement(dragParentUl, dragParentLi);
      this.removeData(node);
    };
    TreeView2.prototype.updateInstance = function() {
      this.updateList();
      this.updateSelectedNodes();
      this.updateExpandedNodes();
    };
    TreeView2.prototype.updateList = function() {
      this.liList = Array.prototype.slice.call(selectAll("." + LISTITEM, this.element));
    };
    TreeView2.prototype.updateSelectedNodes = function() {
      this.setProperties({ selectedNodes: [] }, true);
      var sNodes = selectAll("." + ACTIVE, this.element);
      this.selectGivenNodes(sNodes);
    };
    TreeView2.prototype.updateExpandedNodes = function() {
      this.setProperties({ expandedNodes: [] }, true);
      var eNodes = selectAll('[aria-expanded="true"]', this.element);
      for (var i = 0, len = eNodes.length; i < len; i++) {
        this.addExpand(eNodes[parseInt(i.toString(), 10)]);
      }
    };
    TreeView2.prototype.removeData = function(node) {
      if (this.dataType === 1) {
        var dm = new DataManager(this.treeData);
        var id = this.getId(node);
        var data = {};
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = newId;
        dm.remove(this.fields.id, data);
        this.removeChildNodes(id);
      } else {
        var id = this.getId(node);
        this.updateChildField(this.treeData, this.fields, id, null, null, true);
      }
    };
    TreeView2.prototype.removeChildNodes = function(parentId) {
      var cNodes = this.getChildGroup(this.groupedData, parentId, false);
      var childData = [];
      if (cNodes) {
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var dm = new DataManager(this.treeData);
          var id = getValue(this.fields.id, cNodes[parseInt(i.toString(), 10)]).toString();
          var data = {};
          var currId = this.isNumberTypeId ? parseFloat(id) : id;
          data[this.fields.id] = currId;
          var nodeData = dm.remove(this.fields.id, data);
          childData.push(nodeData[0]);
          this.removeChildNodes(id);
        }
      }
      return childData;
    };
    TreeView2.prototype.doGivenAction = function(nodes, selector, toExpand) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var icon = select("." + selector, select("." + TEXTWRAP, liEle));
        if (!isNullOrUndefined(icon)) {
          if (toExpand) {
            this.expandAction(liEle, icon, null);
          } else {
            this.collapseNode(liEle, icon, null);
          }
        }
      }
    };
    TreeView2.prototype.addGivenNodes = function(nodes, dropLi, index, isRemote, dropEle) {
      if (nodes.length === 0) {
        return;
      }
      var sNodes = this.getSortedData(nodes);
      var level = dropLi ? parseFloat(dropLi.getAttribute("aria-level")) + 1 : 1;
      if (isRemote) {
        this.updateMapper(level);
      }
      var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);
      var id = this.getId(dropLi);
      var dropIcon1;
      if (!isNullOrUndefined(dropLi)) {
        dropIcon1 = select("div." + ICON, dropLi);
      }
      if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
        this.preventExpand = true;
      }
      if (this.dataType !== 1) {
        this.addChildData(this.treeData, this.fields, id, nodes, index);
        this.isFirstRender = false;
      }
      var dropUl;
      if (!dropEle) {
        dropUl = dropLi ? this.expandParent(dropLi) : select("." + PARENTITEM, this.element);
      } else {
        dropUl = dropEle;
      }
      var refNode = !isNullOrUndefined(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;
      if (!this.isFirstRender || this.dataType === 1) {
        var args = this.expandArgs;
        if (refNode || this.sortOrder === "None") {
          for (var i = 0; i < li.length; i++) {
            dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);
          }
          if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
            this.preventExpand = false;
            var dropIcon = select("div." + ICON, dropLi);
            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name !== "nodeExpanding")) {
              this.expandAction(dropLi, dropIcon, null);
            }
          }
        }
        if (!refNode && (this.sortOrder === "Ascending" || this.sortOrder === "Descending")) {
          if (dropUl.childNodes.length === 0) {
            for (var i = 0; i < li.length; i++) {
              dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);
            }
            if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
              this.preventExpand = false;
              var dropIcon = select("div." + ICON, dropLi);
              if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name !== "nodeExpanding")) {
                this.expandAction(dropLi, dropIcon, null);
              }
            }
          } else {
            var cNodes = dropUl.childNodes;
            for (var i = 0; i < li.length; i++) {
              for (var j = 0; j < cNodes.length; j++) {
                var returnValue = this.sortOrder === "Ascending" ? cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() > li[parseInt(i.toString(), 10)].innerText.toUpperCase() : cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() < li[parseInt(i.toString(), 10)].innerText.toUpperCase();
                if (returnValue) {
                  dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[parseInt(j.toString(), 10)]);
                  break;
                }
                dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[cNodes.length]);
              }
            }
          }
        }
      }
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, id, "hasChildren", true);
        var refId = this.getId(refNode);
        var pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);
        for (var j = 0; j < nodes.length; j++) {
          if (!isNullOrUndefined(id)) {
            var currId = this.isNumberTypeId ? parseFloat(id) : id;
            setValue(this.fields.parentID, currId, nodes[parseInt(j.toString(), 10)]);
          }
          this.treeData.splice(pos, 0, nodes[parseInt(j.toString(), 10)]);
          pos++;
        }
      }
      this.finalizeNode(dropUl);
    };
    TreeView2.prototype.updateMapper = function(level) {
      var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
      this.updateListProp(mapper);
    };
    TreeView2.prototype.updateListProp = function(mapper) {
      var prop = this.getActualProperties(mapper);
      this.listBaseOption.fields = prop;
      this.listBaseOption.fields.url = Object.prototype.hasOwnProperty.call(prop, "navigateUrl") ? prop.navigateUrl : "navigateUrl";
    };
    TreeView2.prototype.getDataPos = function(obj, mapper, id) {
      var pos = null;
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {
          return i;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var data = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          pos = this.getDataPos(data, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var items = getValue("child", obj[parseInt(i.toString(), 10)]);
          pos = this.getDataPos(items, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        }
      }
      return pos;
    };
    TreeView2.prototype.addChildData = function(obj, mapper, id, data, index) {
      var updated;
      if (isNullOrUndefined(id)) {
        index = isNullOrUndefined(index) ? obj.length : index;
        for (var k = 0, len = data.length; k < len; k++) {
          obj.splice(index, 0, data[parseInt(k.toString(), 10)]);
          index++;
        }
        return updated;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {
          if (typeof mapper.child === "string" && (Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], mapper.child) && obj[parseInt(i.toString(), 10)][mapper.child] !== null) || this.fields.dataSource instanceof DataManager && Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], "child")) {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            var childData = getValue(key, obj[parseInt(i.toString(), 10)]);
            if (isNullOrUndefined(childData)) {
              childData = [];
            }
            index = isNullOrUndefined(index) ? childData.length : index;
            for (var k = 0, len = data.length; k < len; k++) {
              childData.splice(index, 0, data[parseInt(k.toString(), 10)]);
              index++;
            }
          } else {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            obj[parseInt(i.toString(), 10)]["" + key] = data;
          }
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childObj = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue("child", obj[parseInt(i.toString(), 10)]);
          updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        }
      }
      return updated;
    };
    TreeView2.prototype.doDisableAction = function(nodes) {
      var validNodes = this.nodeType(nodes);
      var validID = this.checkValidId(validNodes);
      this.validArr = [];
      for (var i = 0, len = validID.length; i < len; i++) {
        var id = validID[parseInt(i.toString(), 10)][this.fields.id].toString();
        if (id && this.disableNode.indexOf(id) === -1) {
          this.disableNode.push(id);
        }
        var liEle = this.getElement(id);
        if (liEle) {
          liEle.setAttribute("aria-disabled", "true");
          addClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.doEnableAction = function(nodes) {
      var strNodes = this.nodeType(nodes);
      for (var i = 0, len = strNodes.length; i < len; i++) {
        var liEle = this.getElement(strNodes[parseInt(i.toString(), 10)]);
        var id = strNodes[parseInt(i.toString(), 10)];
        if (id && this.disableNode.indexOf(id) !== -1) {
          this.disableNode.splice(this.disableNode.indexOf(id), 1);
        }
        if (liEle) {
          liEle.removeAttribute("aria-disabled");
          removeClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.nodeType = function(nodes) {
      var validID = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var id = void 0;
        if (typeof nodes[parseInt(i.toString(), 10)] == "string") {
          id = nodes[parseInt(i.toString(), 10)] ? nodes[parseInt(i.toString(), 10)].toString() : null;
        } else if (typeof nodes[parseInt(i.toString(), 10)] === "object") {
          id = nodes[parseInt(i.toString(), 10)] ? nodes[parseInt(i.toString(), 10)].getAttribute("data-uid").toString() : null;
        }
        if (validID.indexOf(id) === -1) {
          validID.push(id);
        }
      }
      return validID;
    };
    TreeView2.prototype.checkValidId = function(node) {
      var _this = this;
      if (this.dataType === 1) {
        this.validArr = this.treeData.filter(function(data) {
          return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
        });
      } else if (this.dataType === 2) {
        for (var k = 0; k < this.treeData.length; k++) {
          var id = this.treeData[parseInt(k.toString(), 10)][this.fields.id] ? this.treeData[parseInt(k.toString(), 10)][this.fields.id].toString() : null;
          if (node.indexOf(id) !== -1) {
            this.validArr.push(this.treeData[parseInt(k.toString(), 10)]);
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(k.toString(), 10)]);
          if (childItems) {
            this.filterNestedChild(childItems, node);
          }
        }
      }
      return this.validArr;
    };
    TreeView2.prototype.filterNestedChild = function(treeData, nodes) {
      for (var k = 0; k < treeData.length; k++) {
        var id = treeData[parseInt(k.toString(), 10)][this.fields.id] ? treeData[parseInt(k.toString(), 10)][this.fields.id].toString() : null;
        if (nodes.indexOf(id) !== -1) {
          this.validArr.push(treeData[parseInt(k.toString(), 10)]);
        }
        var childItems = getValue(this.fields.child.toString(), treeData[parseInt(k.toString(), 10)]);
        if (childItems) {
          this.filterNestedChild(childItems, nodes);
        }
      }
    };
    TreeView2.prototype.setTouchClass = function() {
      var ele = closest(this.element, "." + BIGGER);
      this.touchClass = isNullOrUndefined(ele) ? "" : SMALL;
    };
    TreeView2.prototype.updatePersistProp = function() {
      this.removeField(this.treeData, this.fields, ["selected", "expanded"]);
      var sleNodes = this.selectedNodes;
      for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
        this.updateField(this.treeData, this.fields, sleNodes[parseInt(l.toString(), 10)], "selected", true);
      }
      var enodes = this.expandedNodes;
      for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
        this.updateField(this.treeData, this.fields, enodes[parseInt(k.toString(), 10)], "expanded", true);
      }
      if (this.showCheckBox) {
        this.removeField(this.treeData, this.fields, ["isChecked"]);
        var cnodes = this.checkedNodes;
        for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
          this.updateField(this.treeData, this.fields, cnodes[parseInt(m.toString(), 10)], "isChecked", true);
        }
      }
    };
    TreeView2.prototype.removeField = function(obj, mapper, names) {
      if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {
        return;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        for (var j = 0; j < names.length; j++) {
          var field = this.getMapperProp(mapper, names[parseInt(j.toString(), 10)]);
          if (!isNullOrUndefined(obj[parseInt(i.toString(), 10)]["" + field])) {
            delete obj[parseInt(i.toString(), 10)]["" + field];
          }
        }
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          this.removeField(getValue(mapper.child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          this.removeField(getValue("child", obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);
        }
      }
    };
    TreeView2.prototype.getMapperProp = function(mapper, fieldName) {
      switch (fieldName) {
        case "selected":
          return !isNullOrUndefined(mapper.selected) ? mapper.selected : "selected";
        case "expanded":
          return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : "expanded";
        case "isChecked":
          return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : "isChecked";
        case "hasChildren":
          return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : "hasChildren";
        default:
          return fieldName;
      }
    };
    TreeView2.prototype.updateField = function(obj, mapper, id, key, value) {
      if (isNullOrUndefined(id)) {
        return;
      } else if (this.dataType === 1) {
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", newId, false));
        setValue(this.getMapperProp(mapper, key), value, resultData[0]);
      } else {
        this.updateChildField(obj, mapper, id, key, value);
      }
    };
    TreeView2.prototype.updateChildField = function(obj, mapper, id, key, value, remove2) {
      var removedData;
      if (isNullOrUndefined(obj)) {
        return removedData;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[parseInt(i.toString(), 10)]);
        if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {
          if (remove2) {
            removedData = obj.splice(i, 1);
          } else {
            setValue(this.getMapperProp(mapper, key), value, obj[parseInt(i.toString(), 10)]);
            removedData = [];
          }
          return removedData;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[parseInt(i.toString(), 10)]))) {
          var childData = getValue(mapper.child, obj[parseInt(i.toString(), 10)]);
          removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[parseInt(i.toString(), 10)]))) {
          var childItems = getValue("child", obj[parseInt(i.toString(), 10)]);
          removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        }
      }
      return removedData;
    };
    TreeView2.prototype.triggerEvent = function(action, node) {
      this.renderReactTemplates();
      if (action === "addNodes") {
        var nodeData = [];
        for (var i = 0; i < node.length; i++) {
          nodeData.push(this.getNode(this.getElement(isNullOrUndefined(node[parseInt(i.toString(), 10)][this.fields.id]) ? getValue(this.fields.id, node[parseInt(i.toString(), 10)]).toString() : null)));
        }
        node = nodeData;
      }
      var eventArgs = { data: this.treeData, action, nodeData: node };
      this.trigger("dataSourceChanged", eventArgs);
    };
    TreeView2.prototype.wireInputEvents = function(inpEle) {
      EventHandler.add(inpEle, "blur", this.inputFocusOut, this);
    };
    TreeView2.prototype.wireEditingEvents = function(toBind) {
      var _this = this;
      if (toBind && !this.disabled) {
        this.touchEditObj = new Touch(this.element, {
          tap: function(e) {
            if (_this.isDoubleTapped(e) && e.tapCount === 2) {
              e.originalEvent.preventDefault();
              _this.editingHandler(e.originalEvent);
            }
          }
        });
      } else {
        if (this.touchEditObj) {
          this.touchEditObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireClickEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        this.touchClickObj = new Touch(this.element, {
          tap: function(e) {
            _this.clickHandler(e);
          }
        });
      } else {
        if (this.touchClickObj) {
          this.touchClickObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireExpandOnEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        this.touchExpandObj = new Touch(this.element, {
          tap: function(e) {
            if ((_this.expandOnType === "Click" || _this.expandOnType === "DblClick" && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {
              _this.expandHandler(e);
            }
          }
        });
      } else {
        if (this.touchExpandObj) {
          this.touchExpandObj.destroy();
        }
      }
    };
    TreeView2.prototype.mouseDownHandler = function(e) {
      this.mouseDownStatus = true;
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (e.ctrlKey && this.allowMultiSelection) {
        EventHandler.add(this.element, "contextmenu", this.preventContextMenu, this);
      }
    };
    TreeView2.prototype.preventContextMenu = function(e) {
      e.preventDefault();
    };
    TreeView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this);
      this.wireClickEvent(true);
      if (this.expandOnType !== "None") {
        this.wireExpandOnEvent(true);
      }
      EventHandler.add(this.element, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.element, "mouseout", this.onMouseLeave, this);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    TreeView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "mousedown", this.mouseDownHandler);
      this.wireClickEvent(false);
      this.wireExpandOnEvent(false);
      EventHandler.remove(this.element, "mouseover", this.onMouseOver);
      EventHandler.remove(this.element, "mouseout", this.onMouseLeave);
      if (!this.disabled) {
        this.keyboardModule.destroy();
      }
    };
    TreeView2.prototype.parents = function(element, selector) {
      var matched = [];
      var el = element.parentNode;
      while (!isNullOrUndefined(el)) {
        if (matches(el, selector)) {
          matched.push(el);
        }
        el = el.parentNode;
      }
      return matched;
    };
    TreeView2.prototype.isDoubleTapped = function(e) {
      var target = e.originalEvent.target;
      var secondTap;
      if (target && e.tapCount) {
        if (e.tapCount === 1) {
          this.firstTap = closest(target, "." + LISTITEM);
        } else if (e.tapCount === 2) {
          secondTap = closest(target, "." + LISTITEM);
        }
      }
      return this.firstTap === secondTap;
    };
    TreeView2.prototype.isDescendant = function(parent, child) {
      var node = child.parentNode;
      while (!isNullOrUndefined(node)) {
        if (node === parent) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    };
    TreeView2.prototype.showSpinner = function(element) {
      addClass([element], LOAD);
      createSpinner({
        target: element,
        width: Browser.isDevice ? 16 : 14
      }, this.createElement);
      showSpinner(element);
    };
    TreeView2.prototype.hideSpinner = function(element) {
      hideSpinner(element);
      element.innerHTML = "";
      removeClass([element], LOAD);
    };
    TreeView2.prototype.setCheckedNodes = function(nodes) {
      nodes = JSON.parse(JSON.stringify(nodes));
      this.uncheckAll(this.checkedNodes);
      this.setIndeterminate(nodes);
      if (nodes.length > 0) {
        this.checkAll(nodes);
      }
    };
    TreeView2.prototype.setValidCheckedNode = function(node) {
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", node, true));
        if (resultData[0]) {
          this.setChildCheckState(resultData, node, resultData[0]);
          if (this.autoCheck) {
            var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
            var childNodes = this.getChildNodes(this.treeData, parent_4);
            var count = 0;
            for (var len = 0; len < childNodes.length; len++) {
              var childId = childNodes[parseInt(len.toString(), 10)][this.fields.id].toString();
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
            if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
              this.checkedNodes.push(parent_4);
            }
          }
        }
      } else if (this.dataType === 2) {
        for (var a = 0; a < this.treeData.length; a++) {
          var index = this.treeData[parseInt(a.toString(), 10)][this.fields.id] ? this.treeData[parseInt(a.toString(), 10)][this.fields.id].toString() : "";
          if (index === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
            break;
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[parseInt(a.toString(), 10)]);
          if (childItems) {
            this.setChildCheckState(childItems, node, this.treeData[parseInt(a.toString(), 10)]);
          }
        }
      }
    };
    TreeView2.prototype.setChildCheckState = function(childItems, node, treeData) {
      var checkedParent;
      var count = 0;
      if (this.dataType === 1) {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkNode = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : null;
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
              this.checkedNodes.push(checkNode);
            }
          }
          if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = this.getChildNodes(this.treeData, checkNode);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, treeData);
          }
        }
      } else {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : "";
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
          if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = getValue(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, childItems[parseInt(index.toString(), 10)]);
          }
          if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
            count++;
          }
          if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
            this.checkedNodes.push(checkedParent);
          }
        }
      }
    };
    TreeView2.prototype.setIndeterminate = function(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        this.setValidCheckedNode(nodes[parseInt(i.toString(), 10)]);
      }
    };
    TreeView2.prototype.updatePosition = function(id, newData, isRefreshChild, childValue) {
      if (this.dataType === 1) {
        var pos = this.getDataPos(this.treeData, this.fields, id);
        this.treeData.splice(pos, 1, newData);
        if (isRefreshChild) {
          this.removeChildNodes(id);
          for (var j = 0; j < childValue.length; j++) {
            this.treeData.splice(pos, 0, childValue[parseInt(j.toString(), 10)]);
            pos++;
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.updateChildPosition(this.treeData, this.fields, id, [newData], void 0);
      }
    };
    TreeView2.prototype.updateChildPosition = function(treeData, mapper, currID, newData, index) {
      var found;
      for (var i = 0, objlen = treeData.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, treeData[parseInt(i.toString(), 10)]);
        if (treeData[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === currID) {
          treeData[parseInt(i.toString(), 10)] = newData[0];
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, treeData[parseInt(i.toString(), 10)]))) {
          var childObj = getValue(mapper.child, treeData[parseInt(i.toString(), 10)]);
          found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", treeData[parseInt(i.toString(), 10)]))) {
          var childData = getValue("child", treeData[parseInt(i.toString(), 10)]);
          found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        }
      }
      return found;
    };
    TreeView2.prototype.dynamicState = function() {
      this.setDragAndDrop(this.allowDragAndDrop);
      this.wireEditingEvents(this.allowEditing);
      if (!this.disabled) {
        this.wireEvents();
        this.setRipple();
      } else {
        this.unWireEvents();
        this.rippleFn();
        this.rippleIconFn();
      }
    };
    TreeView2.prototype.crudOperation = function(operation, nodes, target, newText, newNode, index, prevent) {
      var _this = this;
      var data = this.fields.dataSource;
      var matchedArr = [];
      var query = this.getQuery(this.fields);
      var key = this.fields.id;
      var crud;
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var nodesID = [];
      if (nodes) {
        nodesID = this.nodeType(nodes);
      } else if (target) {
        if (typeof target == "string") {
          nodesID[0] = target.toString();
        } else if (typeof target === "object") {
          nodesID[0] = target.getAttribute("data-uid").toString();
        }
      }
      for (var i = 0, len = nodesID.length; i < len; i++) {
        var liEle = this.getElement(nodesID[parseInt(i.toString(), 10)]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var removedData = this.getNodeObject(nodesID[parseInt(i.toString(), 10)]);
        matchedArr.push(removedData);
      }
      switch (operation) {
        case "delete":
          if (nodes.length === 1) {
            crud = data.remove(key, matchedArr[0], query.fromTable, query);
          } else {
            changes.deletedRecords = matchedArr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function() {
            return _this.deleteSuccess(nodesID);
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
        case "update":
          matchedArr[0][this.fields.text] = newText;
          crud = data.update(key, matchedArr[0], query.fromTable, query);
          crud.then(function() {
            return _this.editSucess(target, newText, prevent);
          }).catch(function(e) {
            return _this.dmFailure(e, target, prevent);
          });
          break;
        case "insert":
          if (newNode.length === 1) {
            crud = data.insert(newNode[0], query.fromTable, query);
          } else {
            var arr = [];
            for (var i = 0, len = newNode.length; i < len; i++) {
              arr.push(newNode[parseInt(i.toString(), 10)]);
            }
            changes.addedRecords = arr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function() {
            var dropLi = _this.getElement(target);
            _this.addSuccess(newNode, dropLi, index);
            _this.preventExpand = false;
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
      }
    };
    TreeView2.prototype.deleteSuccess = function(nodes) {
      var nodeData = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);
        nodeData.push(this.getNode(liEle));
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        this.removeNode(liEle);
      }
      this.updateInstance();
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.triggerEvent("removeNode", nodeData);
    };
    TreeView2.prototype.editSucess = function(target, newText, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.appendNewText(liEle, txtEle, newText, prevent);
    };
    TreeView2.prototype.addSuccess = function(nodes, dropLi, index) {
      var _this = this;
      var dropUl;
      var icon = dropLi ? dropLi.querySelector("." + ICON) : null;
      if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector("." + PARENTITEM) === null) {
        this.renderChildNodes(dropLi, null, function() {
          dropUl = dropLi.querySelector("." + PARENTITEM);
          _this.addGivenNodes(nodes, dropLi, index, true, dropUl);
          _this.triggerEvent("addNodes", nodes);
        });
      } else {
        this.addGivenNodes(nodes, dropLi, index, true);
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.dmFailure = function(e, target, prevent) {
      if (target) {
        this.updatePreviousText(target, prevent);
      }
      this.trigger("actionFailure", { error: e });
    };
    TreeView2.prototype.updatePreviousText = function(target, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateText(liEle, txtEle, this.oldText, prevent);
    };
    TreeView2.prototype.getHierarchicalParentId = function(node, data, parentsID) {
      var _this = this;
      var index = data.findIndex(function(data2) {
        return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
      });
      if (index === -1) {
        for (var i = 0; i < data.length; i++) {
          var childItems = getValue(this.fields.child.toString(), data[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(childItems)) {
            index = childItems.findIndex(function(data2) {
              return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
            });
            if (index === -1) {
              this.getHierarchicalParentId(node, childItems, parentsID);
            } else {
              parentsID.push(data[parseInt(i.toString(), 10)][this.fields.id].toString());
              this.getHierarchicalParentId(data[parseInt(i.toString(), 10)][this.fields.id].toString(), this.treeData, parentsID);
              break;
            }
          }
        }
      }
      return parentsID;
    };
    TreeView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.setDragAndDrop(this.allowDragAndDrop);
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.dragObj.dragArea = this.dragArea;
            }
            break;
          case "allowEditing":
            this.wireEditingEvents(this.allowEditing);
            break;
          case "allowMultiSelection":
            if (this.selectedNodes.length > 1) {
              var sNode = this.getElement(this.selectedNodes[0]);
              this.isLoaded = false;
              this.removeSelectAll();
              this.selectNode(sNode, null);
              this.isLoaded = true;
            }
            this.setMultiSelect(this.allowMultiSelection);
            this.addMultiSelect(this.allowMultiSelection);
            break;
          case "allowTextWrap":
            this.setTextWrap();
            this.updateWrap();
            break;
          case "checkedNodes":
            if (this.showCheckBox) {
              this.checkedNodes = oldProp.checkedNodes;
              this.setCheckedNodes(newProp.checkedNodes);
            }
            break;
          case "autoCheck":
            if (this.showCheckBox) {
              this.autoCheck = newProp.autoCheck;
              this.ensureIndeterminate();
            }
            break;
          case "cssClass":
            this.setCssClass(oldProp.cssClass, newProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "expandedNodes":
            this.isAnimate = false;
            this.setProperties({ expandedNodes: [] }, true);
            this.collapseAll();
            this.isInitalExpand = true;
            this.setProperties({ expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);
            this.doExpandAction();
            this.isInitalExpand = false;
            this.isAnimate = true;
            break;
          case "expandOn":
            this.wireExpandOnEvent(false);
            this.setExpandOnType();
            if (this.expandOnType !== "None" && !this.disabled) {
              this.wireExpandOnEvent(true);
            }
            break;
          case "disabled":
            this.setDisabledMode();
            this.dynamicState();
            break;
          case "fields":
            this.isAnimate = false;
            this.isFieldChange = true;
            this.initialRender = true;
            if (!this.isReact || this.isReact && !(this.fields.dataSource instanceof DataManager)) {
              this.reRenderNodes();
            }
            this.initialRender = false;
            this.isAnimate = true;
            this.isFieldChange = false;
            break;
          case "fullRowSelect":
            this.setFullRow(this.fullRowSelect);
            this.addFullRow(this.fullRowSelect);
            if (this.allowTextWrap) {
              this.setTextWrap();
              this.updateWrap();
            }
            break;
          case "loadOnDemand":
            if (this.loadOnDemand === false && !this.onLoaded) {
              var nodes = this.element.querySelectorAll("li");
              var i = 0;
              while (i < nodes.length) {
                if (nodes[parseInt(i.toString(), 10)].getAttribute("aria-expanded") !== "true") {
                  this.renderChildNodes(nodes[parseInt(i.toString(), 10)], true, null, true);
                }
                i++;
              }
              this.onLoaded = true;
            }
            break;
          case "nodeTemplate":
            this.hasTemplate = false;
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
            this.reRenderNodes();
            break;
          case "selectedNodes":
            this.removeSelectAll();
            this.setProperties({ selectedNodes: newProp.selectedNodes }, true);
            this.doSelectionAction();
            break;
          case "showCheckBox":
            this.reRenderNodes();
            break;
          case "sortOrder":
            this.reRenderNodes();
            break;
          case "fullRowNavigable":
            this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);
            this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
            this.reRenderNodes();
            break;
        }
      }
    };
    TreeView2.prototype.destroy = function() {
      this.clearTemplate();
      this.element.removeAttribute("aria-activedescendant");
      this.unWireEvents();
      this.wireEditingEvents(false);
      if (!this.disabled) {
        this.rippleFn();
        this.rippleIconFn();
      }
      this.setCssClass(this.cssClass, null);
      this.setDragAndDrop(false);
      this.setFullRow(false);
      if (this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      }
      this.ulElement = null;
      this.liList = null;
      this.startNode = null;
      this.firstTap = null;
      this.expandArgs = null;
      this.dragLi = null;
      this.dragTarget = null;
      this.dragParent = null;
      this.dragObj = null;
      this.dropObj = null;
      this.inputObj = null;
      this.touchEditObj = null;
      this.touchExpandObj = null;
      this.touchClickObj = null;
      _super.prototype.destroy.call(this);
    };
    TreeView2.prototype.addNodes = function(nodes, target, index, preventTargetExpand) {
      if (isNullOrUndefined(nodes)) {
        return;
      }
      nodes = JSON.parse(JSON.stringify(nodes));
      var dropLi = this.getElement(target);
      this.preventExpand = preventTargetExpand;
      if (this.fields.dataSource instanceof DataManager) {
        if (!this.isOffline) {
          this.crudOperation("insert", null, target, null, nodes, index, this.preventExpand);
        } else {
          this.addSuccess(nodes, dropLi, index);
        }
      } else if (this.dataType === 2) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        if (dropLi) {
          this.addGivenNodes(nodes, dropLi, index);
        } else {
          nodes = this.getSortedData(nodes);
          for (var i = 0; i < nodes.length; i++) {
            var pid = getValue(this.fields.parentID, nodes[parseInt(i.toString(), 10)]);
            dropLi = pid ? this.getElement(pid.toString()) : pid;
            this.addGivenNodes([nodes[parseInt(i.toString(), 10)]], dropLi, index);
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.updateCheckedStateFromDS();
      if (this.showCheckBox && dropLi) {
        this.ensureParentCheckState(dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.beginEdit = function(node) {
      var ele = this.getElement(node);
      if (isNullOrUndefined(ele) || this.disabled) {
        return;
      }
      this.createTextbox(ele);
    };
    TreeView2.prototype.checkAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, true);
      }
    };
    TreeView2.prototype.collapseAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, COLLAPSIBLE, false);
      } else {
        if (level > 0) {
          this.collapseByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.collapseAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.disableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doDisableAction(nodes);
      }
    };
    TreeView2.prototype.enableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doEnableAction(nodes);
      }
    };
    TreeView2.prototype.ensureVisible = function(node) {
      var parentsId = [];
      if (this.dataType === 1) {
        var nodeData = this.getTreeData(node);
        while (nodeData.length !== 0 && !isNullOrUndefined(nodeData[0][this.fields.parentID])) {
          parentsId.push(nodeData[0][this.fields.parentID].toString());
          nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());
        }
      } else if (this.dataType === 2) {
        parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId);
      }
      this.expandAll(parentsId.reverse());
      var liEle = this.getElement(node);
      if (!isNullOrUndefined(liEle)) {
        if (typeof node == "object") {
          var parents = this.parents(liEle, "." + LISTITEM);
          this.expandAll(parents);
        }
        setTimeout(function() {
          liEle.scrollIntoView({ behavior: "smooth" });
        }, 450);
      }
    };
    TreeView2.prototype.expandAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, EXPANDABLE, true);
      } else {
        if (level > 0) {
          this.expandByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.expandAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.getAllCheckedNodes = function() {
      var checkNodes = this.checkedNodes;
      return checkNodes;
    };
    TreeView2.prototype.getDisabledNodes = function() {
      var disabledNodes = this.disableNode;
      return disabledNodes;
    };
    TreeView2.prototype.getNode = function(node) {
      var ele = this.getElement(node);
      return this.getNodeData(ele, true);
    };
    TreeView2.prototype.getTreeData = function(node) {
      var id = this.getId(node);
      this.updatePersistProp();
      if (isNullOrUndefined(id)) {
        return this.treeData;
      } else {
        var data = this.getNodeObject(id);
        return isNullOrUndefined(data) ? [] : [data];
      }
    };
    TreeView2.prototype.moveNodes = function(sourceNodes, target, index, preventTargetExpand) {
      var dropLi = this.getElement(target);
      var nodeData = [];
      if (isNullOrUndefined(dropLi)) {
        return;
      }
      for (var i = 0; i < sourceNodes.length; i++) {
        var dragLi = this.getElement(sourceNodes[parseInt(i.toString(), 10)]);
        nodeData.push(this.getNode(dragLi));
        if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          continue;
        }
        this.preventExpand = preventTargetExpand;
        this.dropAsChildNode(dragLi, dropLi, this, index, null, null, null, dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      this.triggerEvent("moveNodes", nodeData);
    };
    TreeView2.prototype.refreshNode = function(target, newData) {
      if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {
        return;
      }
      var isRefreshChild = false;
      if (this.dataType === 1 && newData.length > 1) {
        isRefreshChild = true;
      } else if (this.dataType === 2 && newData.length === 1) {
        var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);
        if (!isNullOrUndefined(updatedChildValue)) {
          isRefreshChild = true;
        }
      }
      var liEle = this.getElement(target);
      var id = liEle ? liEle.getAttribute("data-uid") : target ? target.toString() : null;
      this.refreshData = this.getNodeObject(id);
      newData = JSON.parse(JSON.stringify(newData));
      var newNodeData;
      var parentData;
      if (this.dataType === 1 && isRefreshChild) {
        for (var k = 0; k < newData.length; k++) {
          if (isNullOrUndefined(newData[parseInt(k.toString(), 10)][this.fields.parentID])) {
            parentData = newData[parseInt(k.toString(), 10)];
            newData.splice(k, 1);
            break;
          }
        }
        newNodeData = extend({}, this.refreshData, parentData);
      } else {
        newNodeData = extend({}, this.refreshData, newData[0]);
      }
      if (isNullOrUndefined(liEle)) {
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        return;
      }
      this.isRefreshed = true;
      var level = parseFloat(liEle.getAttribute("aria-level"));
      var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);
      var ul = select("." + PARENTITEM, liEle);
      var childItems = getValue(this.fields.child.toString(), newNodeData);
      if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {
        var parentEle = liEle.parentElement;
        var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);
        remove(liEle);
        parentEle.insertBefore(newliEle[0], parentEle.childNodes[parseInt(index.toString(), 10)]);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        if (isRefreshChild && ul) {
          this.expandAll([id]);
        }
      } else {
        var txtEle = select("." + TEXTWRAP, liEle);
        var newTextEle = select("." + TEXTWRAP, newliEle[0]);
        var icon = select("div." + ICON, txtEle);
        var newIcon = select("div." + ICON, newTextEle);
        if (icon && newIcon) {
          if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
            removeClass([newIcon], EXPANDABLE);
            addClass([newIcon], COLLAPSIBLE);
          } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
            removeClass([newIcon], COLLAPSIBLE);
            addClass([newIcon], EXPANDABLE);
          } else if (icon.classList.contains("interaction")) {
            addClass([newIcon], "interaction");
          }
        }
        remove(txtEle);
        var fullEle = select("." + FULLROW, liEle);
        fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
      }
      liEle = this.getElement(target);
      if (newNodeData[this.fields.tooltip]) {
        liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
      }
      if (Object.prototype.hasOwnProperty.call(newNodeData, this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
        var attr = {};
        merge(attr, newNodeData[this.fields.htmlAttributes]);
        if (attr.class) {
          addClass([liEle], attr.class.split(" "));
          delete attr.class;
        } else {
          attributes(liEle, attr);
        }
      }
      if (this.selectedNodes.indexOf(id) !== -1) {
        liEle.setAttribute("aria-selected", "true");
        addClass([liEle], ACTIVE);
      }
      this.isRefreshed = false;
      this.triggerEvent("refreshNode", [this.getNode(liEle)]);
    };
    TreeView2.prototype.removeNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          this.crudOperation("delete", nodes);
        } else {
          this.deleteSuccess(nodes);
        }
      }
    };
    TreeView2.prototype.updateNode = function(target, newText) {
      var _this = this;
      if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {
        return;
      }
      var liEle = this.getElement(target);
      if (isNullOrUndefined(liEle)) {
        return;
      }
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var eventArgs = this.getEditEvent(liEle, null, null);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {
            _this.crudOperation("update", null, target, newText, null, null, false);
          } else {
            _this.appendNewText(liEle, txtEle, newText, false);
          }
        }
      });
    };
    TreeView2.prototype.uncheckAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, false);
      }
    };
    var TreeView_1;
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "allowDragAndDrop", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "allowEditing", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "allowMultiSelection", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "allowTextWrap", void 0);
    __decorate12([
      Complex({}, NodeAnimationSettings)
    ], TreeView2.prototype, "animation", void 0);
    __decorate12([
      Property()
    ], TreeView2.prototype, "checkedNodes", void 0);
    __decorate12([
      Property("")
    ], TreeView2.prototype, "cssClass", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "disabled", void 0);
    __decorate12([
      Property(null)
    ], TreeView2.prototype, "dragArea", void 0);
    __decorate12([
      Property(true)
    ], TreeView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "enablePersistence", void 0);
    __decorate12([
      Property()
    ], TreeView2.prototype, "expandedNodes", void 0);
    __decorate12([
      Property("Auto")
    ], TreeView2.prototype, "expandOn", void 0);
    __decorate12([
      Complex({}, FieldsSettings)
    ], TreeView2.prototype, "fields", void 0);
    __decorate12([
      Property(true)
    ], TreeView2.prototype, "fullRowSelect", void 0);
    __decorate12([
      Property(true)
    ], TreeView2.prototype, "loadOnDemand", void 0);
    __decorate12([
      Property()
    ], TreeView2.prototype, "locale", void 0);
    __decorate12([
      Property()
    ], TreeView2.prototype, "nodeTemplate", void 0);
    __decorate12([
      Property()
    ], TreeView2.prototype, "selectedNodes", void 0);
    __decorate12([
      Property("None")
    ], TreeView2.prototype, "sortOrder", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "showCheckBox", void 0);
    __decorate12([
      Property(true)
    ], TreeView2.prototype, "autoCheck", void 0);
    __decorate12([
      Property(false)
    ], TreeView2.prototype, "fullRowNavigable", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "actionFailure", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "created", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "dataBound", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "dataSourceChanged", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "drawNode", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "destroyed", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "keyPress", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeChecked", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeChecking", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeClicked", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeCollapsed", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeCollapsing", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeDragging", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeDragStart", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeDragStop", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeDropped", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeEdited", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeEditing", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeExpanded", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeExpanding", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeSelected", void 0);
    __decorate12([
      Event()
    ], TreeView2.prototype, "nodeSelecting", void 0);
    TreeView2 = TreeView_1 = __decorate12([
      NotifyPropertyChanges
    ], TreeView2);
    return TreeView2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL2 = "e-control";
var ROOT2 = "e-sidebar";
var DOCKER = "e-dock";
var CLOSE = "e-close";
var OPEN = "e-open";
var TRASITION = "e-transition";
var DEFAULTBACKDROP = "e-sidebar-overlay";
var RTL3 = "e-rtl";
var RIGHT = "e-right";
var LEFT = "e-left";
var OVER = "e-over";
var PUSH = "e-push";
var SLIDE = "e-slide";
var VISIBILITY = "e-visibility";
var DISPLAY = "e-sidebar-display";
var MAINCONTENTANIMATION = "e-content-animation";
var DISABLEANIMATION = "e-disable-animation";
var CONTEXT = "e-sidebar-context";
var SIDEBARABSOLUTE = "e-sidebar-absolute";
var Sidebar = (
  /** @class */
  function(_super) {
    __extends13(Sidebar2, _super);
    function Sidebar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Sidebar2.prototype.preRender = function() {
      this.setWidth();
    };
    Sidebar2.prototype.render = function() {
      this.initialize();
      this.wireEvents();
      this.renderComplete();
    };
    Sidebar2.prototype.initialize = function() {
      this.setTarget();
      this.addClass();
      this.setZindex();
      if (this.enableDock) {
        this.setDock();
      }
      if (this.isOpen) {
        this.show();
        this.firstRender = true;
      } else {
        this.setMediaQuery();
      }
      this.checkType(true);
      this.setType(this.type);
      this.setCloseOnDocumentClick();
      this.setEnableRTL();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.setEnableRTL = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL3);
    };
    Sidebar2.prototype.setTarget = function() {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);
      if (typeof this.target === "string") {
        this.setProperties({ target: document.querySelector(this.target) }, true);
      }
      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        addClass([this.element], SIDEBARABSOLUTE);
        addClass([this.target], CONTEXT);
        this.targetEle = this.getTargetElement();
      }
    };
    Sidebar2.prototype.getTargetElement = function() {
      var siblingElement = this.element.nextElementSibling;
      while (!isNullOrUndefined(siblingElement)) {
        if (!siblingElement.classList.contains(ROOT2)) {
          break;
        }
        siblingElement = siblingElement.nextElementSibling;
      }
      return siblingElement;
    };
    Sidebar2.prototype.setCloseOnDocumentClick = function() {
      if (this.closeOnDocumentClick) {
        EventHandler.add(document, "mousedown touchstart", this.documentclickHandler, this);
      } else {
        EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      }
    };
    Sidebar2.prototype.setWidth = function() {
      if (this.enableDock && this.position === "Left") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (this.enableDock && this.position === "Right") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (!this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.width) });
      }
    };
    Sidebar2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    Sidebar2.prototype.setZindex = function() {
      setStyleAttribute(this.element, { "z-index": "" + this.zIndex });
    };
    Sidebar2.prototype.addClass = function() {
      if (this.element.tagName === "EJS-SIDEBAR") {
        addClass([this.element], DISPLAY);
      }
      var classELement = document.querySelector(".e-main-content");
      if (!isNullOrUndefined(classELement || this.targetEle)) {
        addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : null;
      if (!this.enableDock && this.type !== "Auto") {
        addClass([this.element], [VISIBILITY]);
      }
      removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
      this.element.classList.add(ROOT2);
      addClass([this.element], this.position === "Right" ? RIGHT : LEFT);
      if (this.enableDock) {
        addClass([this.element], DOCKER);
      }
      if (!isNullOrUndefined(this.tabIndex)) {
        this.element.setAttribute("tabindex", this.tabIndex);
      }
      if (this.type === "Auto" && !Browser.isDevice) {
        this.show();
      } else if (!this.isOpen) {
        addClass([this.element], [CLOSE, DISABLEANIMATION]);
      }
    };
    Sidebar2.prototype.checkType = function(val) {
      if (!(this.type === "Push" || this.type === "Over" || this.type === "Slide")) {
        this.type = "Auto";
      } else {
        if (!this.element.classList.contains(CLOSE) && !val) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.transitionEnd = function(e) {
      this.setDock();
      if (!isNullOrUndefined(e) && !this.firstRender) {
        this.triggerChange();
      }
      this.firstRender = false;
      EventHandler.remove(this.element, "transitionend", this.transitionEnd);
    };
    Sidebar2.prototype.destroyBackDrop = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (this.target && this.showBackdrop && sibling && !isNullOrUndefined(this.defaultBackdropDiv)) {
        removeClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    Sidebar2.prototype.hide = function(e) {
      var _this = this;
      var closeArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("close", closeArguments, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          if (_this.element.classList.contains(CLOSE)) {
            return;
          }
          if (_this.element.classList.contains(OPEN) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], CLOSE);
          removeClass([_this.element], OPEN);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.enableDock ? _this.dockSize : _this.width) });
          _this.setType(_this.type);
          var sibling = document.querySelector(".e-main-content") || _this.targetEle;
          if (!_this.enableDock && sibling) {
            sibling.style.transform = "translateX(0px)";
            sibling.style[_this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
          }
          _this.destroyBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.remove("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: false }, true);
          if (_this.enableDock) {
            setTimeout(function() {
              return _this.setTimeOut();
            }, 50);
          }
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setTimeOut = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var elementWidth = this.element.getBoundingClientRect().width;
      if (this.element.classList.contains(OPEN) && sibling && !(this.type === "Over" && this.enableDock)) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        } else {
          sibling.style.marginRight = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        }
      } else if (this.element.classList.contains(CLOSE) && sibling) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        } else {
          sibling.style.marginRight = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        }
      }
    };
    Sidebar2.prototype.show = function(e) {
      var _this = this;
      var openArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("open", openArguments, function(observedopenArgs) {
        if (!observedopenArgs.cancel) {
          removeClass([_this.element], [VISIBILITY, DISABLEANIMATION]);
          if (_this.element.classList.contains(OPEN)) {
            return;
          }
          if (_this.element.classList.contains(CLOSE) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], [OPEN, TRASITION]);
          setStyleAttribute(_this.element, { "transform": "" });
          removeClass([_this.element], CLOSE);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.width) });
          _this.setType(_this.type);
          _this.createBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.add("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: true }, true);
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setAnimation = function() {
      if (this.animate) {
        removeClass([this.element], DISABLEANIMATION);
      } else {
        addClass([this.element], DISABLEANIMATION);
      }
    };
    Sidebar2.prototype.triggerChange = function() {
      var changeArguments = { name: "change", element: this.element };
      this.trigger("change", changeArguments);
    };
    Sidebar2.prototype.setDock = function() {
      if (this.enableDock && this.position === "Left" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(-100%) translateX(" + this.setDimension(this.dockSize) + ")" });
      } else if (this.enableDock && this.position === "Right" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(100%) translateX(-" + this.setDimension(this.dockSize) + ")" });
      }
      if (this.element.classList.contains(CLOSE) && this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      }
    };
    Sidebar2.prototype.createBackDrop = function() {
      if (this.target && this.showBackdrop && this.getState()) {
        var targetString = this.target;
        var sibling = document.querySelector(".e-main-content") || this.targetEle;
        this.defaultBackdropDiv = this.createElement("div");
        addClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
        setStyleAttribute(this.defaultBackdropDiv, { height: targetString.style.height });
        sibling.appendChild(this.defaultBackdropDiv);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = this.createElement("div");
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
    };
    Sidebar2.prototype.getPersistData = function() {
      return this.addOnPersist(["type", "position", "isOpen"]);
    };
    Sidebar2.prototype.getModuleName = function() {
      return "sidebar";
    };
    Sidebar2.prototype.toggle = function() {
      if (this.element.classList.contains(OPEN)) {
        this.hide();
      } else {
        this.show();
      }
    };
    Sidebar2.prototype.getState = function() {
      return this.element.classList.contains(OPEN) ? true : false;
    };
    Sidebar2.prototype.setMediaQuery = function() {
      if (this.mediaQuery) {
        var media = false;
        if (typeof this.mediaQuery === "string") {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }
        if (media && this.windowWidth !== window.innerWidth) {
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.resize = function() {
      if (this.type === "Auto") {
        if (Browser.isDevice) {
          addClass([this.element], OVER);
        } else {
          addClass([this.element], PUSH);
        }
      }
      this.setMediaQuery();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.documentclickHandler = function(e) {
      if (closest(e.target, "." + CONTROL2 + "." + ROOT2)) {
        return;
      }
      this.hide(e);
    };
    Sidebar2.prototype.enableGestureHandler = function(args) {
      if (!this.isOpen && this.position === "Left" && args.swipeDirection === "Right" && (args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      } else if (this.isOpen && this.position === "Left" && args.swipeDirection === "Left") {
        this.hide();
      } else if (this.isOpen && this.position === "Right" && args.swipeDirection === "Right") {
        this.hide();
      } else if (!this.isOpen && this.position === "Right" && args.swipeDirection === "Left" && (window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      }
    };
    Sidebar2.prototype.setEnableGestures = function() {
      if (this.enableGestures) {
        this.mainContentEle = new Touch(document.body, { swipe: this.enableGestureHandler.bind(this) });
        this.sidebarEle = new Touch(this.element, { swipe: this.enableGestureHandler.bind(this) });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };
    Sidebar2.prototype.wireEvents = function() {
      this.setEnableGestures();
      EventHandler.add(window, "resize", this.resize, this);
    };
    Sidebar2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.resize);
      EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }
      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };
    Sidebar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var isRendered = this.isServerRendered;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isOpen":
            if (this.isOpen) {
              this.show();
            } else {
              this.hide();
            }
            break;
          case "width":
            this.setWidth();
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "animate":
            this.setAnimation();
            break;
          case "type":
            this.checkType(false);
            removeClass([this.element], [VISIBILITY]);
            this.addClass();
            addClass([this.element], this.type === "Auto" ? Browser.isDevice ? ["e-over"] : ["e-push"] : ["e-" + this.type.toLowerCase()]);
            break;
          case "position":
            this.element.style.transform = "";
            this.setDock();
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginRight" : "marginLeft"] = "0px";
            }
            if (this.position === "Right") {
              removeClass([this.element], LEFT);
              addClass([this.element], RIGHT);
            } else {
              removeClass([this.element], RIGHT);
              addClass([this.element], LEFT);
            }
            this.setType(this.type);
            break;
          case "showBackdrop":
            if (this.showBackdrop) {
              this.createBackDrop();
            } else {
              if (this.modal) {
                this.modal.style.display = "none";
                this.modal.outerHTML = "";
                this.modal = null;
              }
            }
            break;
          case "target":
            if (typeof this.target === "string") {
              this.setProperties({ target: document.querySelector(this.target) }, true);
            }
            if (isNullOrUndefined(this.target)) {
              removeClass([this.element], SIDEBARABSOLUTE);
              removeClass([oldProp.target], CONTEXT);
              setStyleAttribute(sibling, { "margin-left": 0, "margin-right": 0 });
              document.body.insertAdjacentElement("afterbegin", this.element);
            }
            this.isServerRendered = false;
            _super.prototype.refresh.call(this);
            this.isServerRendered = isRendered;
            break;
          case "closeOnDocumentClick":
            this.setCloseOnDocumentClick();
            break;
          case "enableDock":
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "zIndex":
            this.setZindex();
            break;
          case "mediaQuery":
            this.setMediaQuery();
            break;
          case "enableGestures":
            this.setEnableGestures();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
        }
      }
    };
    Sidebar2.prototype.setType = function(type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      this.setZindex();
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (sibling) {
        sibling.style.transform = "translateX(0px)";
        if (!Browser.isDevice && this.type !== "Auto" && !(this.type === "Over" && this.enableDock)) {
          sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
        }
      }
      var margin = this.position === "Left" ? elementWidth + "px" : elementWidth + "px";
      var eleWidth = this.position === "Left" ? elementWidth : -elementWidth;
      removeClass([this.element], [PUSH, OVER, SLIDE]);
      switch (type) {
        case "Push":
          addClass([this.element], [PUSH]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
          }
          break;
        case "Slide":
          addClass([this.element], [SLIDE]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style.transform = "translateX(" + eleWidth + "px)";
          }
          break;
        case "Over":
          addClass([this.element], [OVER]);
          if (this.enableDock && (this.element.classList.contains(CLOSE) || this.isOpen)) {
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = this.setDimension(this.dockSize);
            }
          }
          break;
        case "Auto":
          addClass([this.element], [TRASITION]);
          if (Browser.isDevice) {
            if (sibling && this.enableDock && !this.getState()) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
              addClass([this.element], PUSH);
            } else {
              addClass([this.element], OVER);
            }
          } else {
            addClass([this.element], PUSH);
            if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
            }
          }
          this.createBackDrop();
      }
    };
    Sidebar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.target) {
        removeClass([this.target], CONTEXT);
      }
      this.destroyBackDrop();
      if (this.element) {
        removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION, DISABLEANIMATION]);
        removeClass([this.element], SIDEBARABSOLUTE);
        this.element.style.width = "";
        this.element.style.zIndex = "";
        this.element.style.transform = "";
        if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      this.windowWidth = null;
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (!isNullOrUndefined(sibling)) {
        sibling.style.margin = "";
        sibling.style.transform = "";
      }
      this.unWireEvents();
    };
    __decorate13([
      Property("auto")
    ], Sidebar2.prototype, "dockSize", void 0);
    __decorate13([
      Property(null)
    ], Sidebar2.prototype, "mediaQuery", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "enableDock", void 0);
    __decorate13([
      Property("en-US")
    ], Sidebar2.prototype, "locale", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "enablePersistence", void 0);
    __decorate13([
      Property(true)
    ], Sidebar2.prototype, "enableGestures", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "isOpen", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "enableRtl", void 0);
    __decorate13([
      Property(true)
    ], Sidebar2.prototype, "animate", void 0);
    __decorate13([
      Property("auto")
    ], Sidebar2.prototype, "height", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "closeOnDocumentClick", void 0);
    __decorate13([
      Property("Left")
    ], Sidebar2.prototype, "position", void 0);
    __decorate13([
      Property(null)
    ], Sidebar2.prototype, "target", void 0);
    __decorate13([
      Property(false)
    ], Sidebar2.prototype, "showBackdrop", void 0);
    __decorate13([
      Property("Auto")
    ], Sidebar2.prototype, "type", void 0);
    __decorate13([
      Property("auto")
    ], Sidebar2.prototype, "width", void 0);
    __decorate13([
      Property(1e3)
    ], Sidebar2.prototype, "zIndex", void 0);
    __decorate13([
      Event()
    ], Sidebar2.prototype, "created", void 0);
    __decorate13([
      Event()
    ], Sidebar2.prototype, "close", void 0);
    __decorate13([
      Event()
    ], Sidebar2.prototype, "open", void 0);
    __decorate13([
      Event()
    ], Sidebar2.prototype, "change", void 0);
    __decorate13([
      Event()
    ], Sidebar2.prototype, "destroyed", void 0);
    Sidebar2 = __decorate13([
      NotifyPropertyChanges
    ], Sidebar2);
    return Sidebar2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICONRIGHT = "e-icon-right";
var ITEMTEXTCLASS = "e-breadcrumb-text";
var ICONCLASS = "e-breadcrumb-icon";
var MENUCLASS = "e-breadcrumb-menu";
var ITEMCLASS = "e-breadcrumb-item";
var POPUPCLASS = "e-breadcrumb-popup";
var WRAPMODECLASS = "e-breadcrumb-wrap-mode";
var SCROLLMODECLASS = "e-breadcrumb-scroll-mode";
var TABINDEX = "tabindex";
var DISABLEDCLASS = "e-disabled";
var ARIADISABLED = "aria-disabled";
var DOT = ".";
var BreadcrumbOverflowMode;
(function(BreadcrumbOverflowMode2) {
  BreadcrumbOverflowMode2["Hidden"] = "Hidden";
  BreadcrumbOverflowMode2["Collapsed"] = "Collapsed";
  BreadcrumbOverflowMode2["Menu"] = "Menu";
  BreadcrumbOverflowMode2["Wrap"] = "Wrap";
  BreadcrumbOverflowMode2["Scroll"] = "Scroll";
  BreadcrumbOverflowMode2["None"] = "None";
})(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));
var BreadcrumbItem = (
  /** @class */
  function(_super) {
    __extends14(BreadcrumbItem2, _super);
    function BreadcrumbItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property("")
    ], BreadcrumbItem2.prototype, "text", void 0);
    __decorate14([
      Property("")
    ], BreadcrumbItem2.prototype, "id", void 0);
    __decorate14([
      Property("")
    ], BreadcrumbItem2.prototype, "url", void 0);
    __decorate14([
      Property(null)
    ], BreadcrumbItem2.prototype, "iconCss", void 0);
    __decorate14([
      Property(false)
    ], BreadcrumbItem2.prototype, "disabled", void 0);
    return BreadcrumbItem2;
  }(ChildProperty)
);
var Breadcrumb = (
  /** @class */
  function(_super) {
    __extends14(Breadcrumb2, _super);
    function Breadcrumb2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isPopupCreated = false;
      return _this;
    }
    Breadcrumb2.prototype.preRender = function() {
    };
    Breadcrumb2.prototype.render = function() {
      this.initialize();
      this.renderItems(this.items);
      this.wireEvents();
    };
    Breadcrumb2.prototype.initialize = function() {
      this._maxItems = this.maxItems;
      if (isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.element.setAttribute("aria-label", "breadcrumb");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      if (this.disabled) {
        this.element.classList.add(DISABLEDCLASS);
        this.element.setAttribute(ARIADISABLED, "true");
      }
      if (this.overflowMode === "Wrap") {
        this.element.classList.add(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        this.element.classList.add(SCROLLMODECLASS);
      }
      this.initItems();
      this.initPvtProps();
    };
    Breadcrumb2.prototype.initPvtProps = function() {
      if (this.overflowMode === "Hidden" && this._maxItems > 0) {
        this.endIndex = this.getEndIndex();
        this.startIndex = this.endIndex + 1 - (this._maxItems - 1);
      }
      if (this.overflowMode === "Menu") {
        if (this._maxItems >= 0) {
          this.startIndex = this._maxItems > 1 ? 1 : 0;
          this.endIndex = this.getEndIndex();
          this.popupUl = this.createElement("ul", { attrs: { TABINDEX: "0", "role": "menu" } });
        } else {
          this.startIndex = this.endIndex = null;
        }
      }
    };
    Breadcrumb2.prototype.getEndIndex = function() {
      var _this = this;
      var endIndex;
      if (this.activeItem) {
        this.items.forEach(function(item, idx) {
          if (item.url === _this.activeItem || item.text === _this.activeItem) {
            endIndex = idx;
          }
        });
      } else {
        endIndex = this.items.length - 1;
      }
      return endIndex;
    };
    Breadcrumb2.prototype.initItems = function() {
      if (!this.items.length) {
        var baseUri = void 0;
        var uri = void 0;
        var items = [];
        if (this.url) {
          var url = new URL(this.url, window.location.origin);
          baseUri = url.origin + "/";
          uri = url.href.split(baseUri)[1].split("/");
        } else {
          baseUri = window.location.origin + "/";
          uri = window.location.href.split(baseUri)[1].split("/");
        }
        items.push({ iconCss: "e-icons e-home", url: baseUri });
        for (var i = 0; i < uri.length; i++) {
          if (uri[i]) {
            items.push({ text: uri[i], url: baseUri + uri[i] });
            baseUri += uri[i] + "/";
          }
        }
        this.setProperties({ items }, true);
      }
    };
    Breadcrumb2.prototype.renderItems = function(items) {
      var _this = this;
      var item;
      var isSingleLevel;
      var isIconRight = this.element.classList.contains(ICONRIGHT);
      var itemsLength = items.length;
      if (itemsLength) {
        var isActiveItem = void 0;
        var isLastItem = void 0;
        var isLastItemInPopup_1;
        var j_1 = 0;
        var wrapDiv = void 0;
        var len = itemsLength * 2 - 1;
        var isItemCancelled_1 = false;
        var ol = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-wrapped-ol" : "" });
        var firstOl = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-first-ol" : "" });
        var showIcon = this.hasField(items, "iconCss");
        var isCollasped = this.overflowMode === "Collapsed" && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;
        var isDefaultOverflowMode_1 = this.overflowMode === "Hidden" && this._maxItems > 0;
        if (this.overflowMode === "Menu" && this.popupUl) {
          this.popupUl.innerHTML = "";
        }
        var listBaseOptions = {
          moduleName: this.getModuleName(),
          showIcon,
          itemNavigable: true,
          itemCreated: function(args) {
            var isLastItem2 = args.curData.isLastItem;
            if (isLastItem2 && args.item.children.length && !_this.itemTemplate) {
              delete args.curData.isLastItem;
              if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {
                args.item.innerHTML = _this.createElement("span", { className: ITEMTEXTCLASS, innerHTML: args.item.children[0].innerHTML }).outerHTML;
              }
            }
            if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {
              args.item.classList.add("e-icon-item");
            }
            if (isDefaultOverflowMode_1) {
              args.item.setAttribute("item-index", j_1.toString());
            }
            var eventArgs = {
              item: extend({}, args.curData.properties ? args.curData.properties : args.curData),
              element: args.item,
              cancel: false
            };
            _this.trigger("beforeItemRender", eventArgs);
            isItemCancelled_1 = eventArgs.cancel;
            var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);
            if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {
              args.item.querySelector(".e-anchor-wrap").appendChild(args.item.querySelector(DOT + ICONCLASS));
            }
            if (eventArgs.item.disabled) {
              args.item.setAttribute(ARIADISABLED, "true");
              args.item.classList.add(DISABLEDCLASS);
            }
            if (eventArgs.item.id) {
              args.item.setAttribute("id", eventArgs.item.id);
            }
            if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {
              args.item.children[0].setAttribute(TABINDEX, "-1");
            }
            if (args.curData.isEmptyUrl) {
              args.item.children[0].removeAttribute("href");
              if ((!isLastItem2 || isLastItem2 && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {
                args.item.children[0].setAttribute(TABINDEX, "0");
                EventHandler.add(args.item.children[0], "keydown", _this.keyDownHandler, _this);
              }
            }
            args.item.removeAttribute("role");
            if (isLastItem2) {
              args.item.setAttribute("data-active-item", "");
            }
            if (!_this.itemTemplate) {
              _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);
            }
          }
        };
        for (var i = 0; i < len; i % 2 && j_1++, i++) {
          isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);
          if (isCollasped && i > 1 && i < len - 2) {
            continue;
          } else if (isDefaultOverflowMode_1 && ((j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true)) && j_1 !== 0) {
            continue;
          }
          if (i % 2) {
            wrapDiv = this.createElement("div", { className: "e-breadcrumb-item-wrapper" });
            if (this.separatorTemplate && this.separatorTemplate === "/" || isNullOrUndefined(this.separatorTemplate)) {
              listBaseOptions.template = initializeCSPTemplate(function() {
                return "/";
              });
            } else {
              listBaseOptions.template = this.separatorTemplate;
            }
            listBaseOptions.itemClass = "e-breadcrumb-separator";
            isSingleLevel = false;
            item = [{ previousItem: items[j_1], nextItem: items[j_1 + 1] }];
          } else {
            listBaseOptions.itemClass = "";
            if (this.itemTemplate) {
              listBaseOptions.template = this.itemTemplate;
              isSingleLevel = false;
            } else {
              isSingleLevel = true;
            }
            item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];
            if (!item[0].url && !this.itemTemplate) {
              item = [extend({}, item[0], { isEmptyUrl: true, url: "#" })];
            }
            isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === "Menu") && j_1 === this.endIndex;
            if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {
              item[0].isLastItem = true;
            }
          }
          var parent_1 = ol;
          var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;
          if (this.overflowMode === "Menu" && (j_1 >= this.startIndex && (j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true)) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {
            if (i % 2) {
              continue;
            } else {
              parent_1 = this.popupUl;
              if (isLastItem) {
                isLastItemInPopup_1 = true;
              }
            }
          } else if (this.overflowMode === "Wrap") {
            if (i === 0) {
              parent_1 = firstOl;
            } else {
              parent_1 = wrapDiv;
            }
          }
          var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;
          if (!isItemCancelled_1) {
            append(li, parent_1);
          } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === "Menu" || this.overflowMode === "Wrap") {
            items.splice(j_1, 1);
            this.initPvtProps();
            return this.reRenderItems();
          } else if (i === len - 1 || isLastItem) {
            remove(parent_1.lastElementChild);
          }
          if (this.overflowMode === "Wrap" && i !== 0 && i % 2 === 0) {
            ol.appendChild(wrapDiv);
          }
          if (isCollasped && i === 1) {
            var li_1 = this.createElement("li", { className: "e-icons e-breadcrumb-collapsed", attrs: { TABINDEX: "0" } });
            EventHandler.add(li_1, "keyup", this.expandHandler, this);
            ol.appendChild(li_1);
          }
          if (this.overflowMode === "Menu" && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {
            var menu = this.getMenuElement();
            EventHandler.add(menu, "keyup", this.keyDownHandler, this);
            ol.appendChild(menu);
          }
          if (isActiveItem || isLastItem) {
            break;
          }
          if (isItemCancelled_1) {
            i++;
          }
        }
        if (this.isReact) {
          this.renderReactTemplates();
          setTimeout(function() {
            _this.calculateMaxItems();
          }, 5);
        }
        if (this.overflowMode === "Wrap") {
          this.element.appendChild(firstOl);
        }
        this.element.appendChild(ol);
        if (!this.isReact) {
          this.calculateMaxItems();
        }
      }
    };
    Breadcrumb2.prototype.calculateMaxItems = function() {
      if (this.overflowMode === "Hidden" || this.overflowMode === "Collapsed" || this.overflowMode === "Menu") {
        var maxItems = void 0;
        var width = this.element.offsetWidth;
        var liElems = [].slice.call(this.element.children[0].children).reverse();
        var liWidth = this.overflowMode === "Menu" ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);
        if (this.overflowMode === "Menu") {
          var menuEle = this.getMenuElement();
          this.element.appendChild(menuEle);
          liWidth += menuEle.offsetWidth;
          remove(menuEle);
        }
        for (var i = 0; i < liElems.length - 2; i++) {
          if (liWidth > width) {
            maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === "Menu" && i <= 2 ? 0 : 1);
            if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {
              this._maxItems = maxItems;
              this.initPvtProps();
              return this.reRenderItems();
            } else {
              break;
            }
          } else {
            if (this.overflowMode === "Menu" && i === 2) {
              liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;
              if (liWidth > width) {
                this._maxItems = 1;
                this.initPvtProps();
                return this.reRenderItems();
              }
            }
            if (!(this.overflowMode === "Menu" && liElems[i].classList.contains(MENUCLASS))) {
              liWidth += liElems[i].offsetWidth;
            }
          }
        }
      } else if ((this.overflowMode === "Wrap" || this.overflowMode === "Scroll") && this._maxItems > 0) {
        var width = 0;
        var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);
        if (liElems.length > this._maxItems + this._maxItems - 1) {
          for (var i = this.overflowMode === "Wrap" ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {
            width += liElems[i].offsetWidth;
          }
          width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;
          if (this.overflowMode === "Wrap") {
            this.element.querySelector(".e-breadcrumb-wrapped-ol").style.width = width + "px";
          } else {
            this.element.style.width = width + "px";
          }
        }
      }
    };
    Breadcrumb2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    Breadcrumb2.prototype.getMenuElement = function() {
      return this.createElement("li", { className: "e-icons e-breadcrumb-menu", attrs: { TABINDEX: "0" } });
    };
    Breadcrumb2.prototype.beforeItemRenderChanges = function(prevItem, currItem, elem, isRightIcon) {
      var wrapElem = elem.querySelector(".e-anchor-wrap");
      if (wrapElem) {
        wrapElem.parentElement.setAttribute("aria-label", "home");
      }
      if (currItem.text !== prevItem.text && wrapElem) {
        wrapElem.childNodes.forEach(function(child) {
          if (child.nodeType === Node.TEXT_NODE) {
            child.textContent = currItem.text;
          }
        });
      }
      if (currItem.iconCss !== prevItem.iconCss && wrapElem) {
        var iconElem = elem.querySelector(DOT + ICONCLASS);
        if (iconElem) {
          if (currItem.iconCss) {
            removeClass([iconElem], prevItem.iconCss.split(" "));
            addClass([iconElem], currItem.iconCss.split(" "));
          } else {
            remove(iconElem);
          }
        } else if (currItem.iconCss) {
          var iconElem_1 = this.createElement("span", { className: ICONCLASS + " " + currItem.iconCss });
          if (isRightIcon) {
            append([iconElem_1], wrapElem);
          } else {
            wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);
          }
        }
      }
      if (currItem.url !== prevItem.url && this.enableNavigation) {
        var anchor = elem.querySelector("a." + ITEMTEXTCLASS);
        if (anchor) {
          if (currItem.url) {
            anchor.setAttribute("href", currItem.url);
          } else {
            anchor.removeAttribute("href");
          }
        }
      }
    };
    Breadcrumb2.prototype.reRenderItems = function() {
      this.element.innerHTML = "";
      this.renderItems(this.items);
    };
    Breadcrumb2.prototype.clickHandler = function(e) {
      var li = closest(e.target, DOT + ITEMCLASS + ":not(.e-breadcrumb-separator)");
      if (!this.enableNavigation) {
        e.preventDefault();
      }
      if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {
        var idx = void 0;
        if (this.overflowMode === "Wrap") {
          idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);
        } else {
          idx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (this.overflowMode === "Menu") {
          if (closest(e.target, DOT + POPUPCLASS)) {
            idx += this.startIndex;
            this.endIndex = idx;
            if (e.type === "keydown") {
              this.documentClickHandler(e);
            }
          } else if (this.element.querySelector(DOT + MENUCLASS)) {
            if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {
              idx += this.popupUl.childElementCount * 2 - 2;
              idx = Math.floor(idx / 2);
              this.endIndex = idx;
            } else {
              this.startIndex = this.endIndex = idx;
            }
          } else {
            idx = Math.floor(idx / 2);
            this.startIndex = this.endIndex = idx;
          }
        } else {
          idx = Math.floor(idx / 2);
        }
        if (this.overflowMode === "Hidden" && this._maxItems > 0 && this.endIndex !== 0) {
          idx = parseInt(li.getAttribute("item-index"), 10);
          if (this.startIndex > 1) {
            this.startIndex -= this.endIndex - idx;
          }
          this.endIndex = idx;
        }
        var itemClickArgs = {
          element: li,
          item: this.items[idx],
          event: e,
          cancel: false
        };
        this.trigger("itemClick", itemClickArgs);
        if (itemClickArgs.cancel) {
          return;
        }
        if (this.items[idx]) {
          this.activeItem = this.items[idx].url || this.items[idx].text;
        }
        this.dataBind();
      }
      if (e.target.classList.contains("e-breadcrumb-collapsed")) {
        this.isExpanded = true;
        this.reRenderItems();
      }
      if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {
        this.renderPopup();
      }
    };
    Breadcrumb2.prototype.renderPopup = function() {
      var _this = this;
      var wrapper = this.createElement("div", { className: POPUPCLASS + " " + this.cssClass + (this.enableRtl ? " e-rtl" : "") });
      document.body.appendChild(wrapper);
      this.isPopupCreated = true;
      this.popupObj = new Popup(wrapper, {
        content: this.popupUl,
        relateTo: this.element.querySelector(DOT + MENUCLASS),
        enableRtl: this.enableRtl,
        position: { X: "left", Y: "bottom" },
        collision: { X: "fit", Y: "flip" },
        open: function() {
          if (_this.popupUl) {
            _this.popupUl.focus();
          }
        }
      });
      this.popupWireEvents();
      this.popupObj.show();
    };
    Breadcrumb2.prototype.documentClickHandler = function(e) {
      if (this.overflowMode === "Menu" && this.popupObj && this.popupObj.element.classList.contains("e-popup-open") && !closest(e.target, DOT + MENUCLASS)) {
        this.popupObj.hide();
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
    };
    Breadcrumb2.prototype.resize = function() {
      this._maxItems = this.maxItems;
      this.initPvtProps();
      this.reRenderItems();
    };
    Breadcrumb2.prototype.expandHandler = function(e) {
      if (e.key === "Enter") {
        this.isExpanded = true;
        this.reRenderItems();
      }
    };
    Breadcrumb2.prototype.keyDownHandler = function(e) {
      if (e.key === "Enter") {
        this.clickHandler(e);
      }
    };
    Breadcrumb2.prototype.popupKeyDownHandler = function(e) {
      if (e.key === "Escape") {
        this.documentClickHandler(e);
      }
    };
    Breadcrumb2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
          case "enableActiveItemNavigation":
            this.reRenderItems();
            break;
          case "activeItem":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            break;
          case "overflowMode":
          case "maxItems":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            if (oldProp.overflowMode === "Wrap") {
              this.element.classList.remove(WRAPMODECLASS);
            } else if (newProp.overflowMode === "Wrap") {
              this.element.classList.add(WRAPMODECLASS);
            }
            if (oldProp.overflowMode === "Scroll") {
              this.element.classList.remove(SCROLLMODECLASS);
            } else if (newProp.overflowMode === "Scroll") {
              this.element.classList.add(SCROLLMODECLASS);
            }
            break;
          case "url":
            this.initItems();
            this.reRenderItems();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && (newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1)) {
              this.reRenderItems();
            }
            break;
          case "enableRtl":
            this.element.classList.toggle("e-rtl");
            break;
          case "disabled":
            this.element.classList.toggle(DISABLEDCLASS);
            this.element.setAttribute(ARIADISABLED, newProp.disabled + "");
            break;
        }
      }
    };
    Breadcrumb2.prototype.wireEvents = function() {
      this.delegateClickHanlder = this.documentClickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHanlder, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resize.bind(this));
    };
    Breadcrumb2.prototype.popupWireEvents = function() {
      EventHandler.add(this.popupObj.element, "click", this.clickHandler, this);
      EventHandler.add(this.popupObj.element, "keydown", this.popupKeyDownHandler, this);
    };
    Breadcrumb2.prototype.unWireEvents = function() {
      EventHandler.remove(document, "click", this.delegateClickHanlder);
      EventHandler.remove(this.element, "click", this.clickHandler);
      window.removeEventListener("resize", this.resize.bind(this));
      if (this.popupObj) {
        EventHandler.remove(this.popupObj.element, "click", this.clickHandler);
        EventHandler.remove(this.popupObj.element, "keydown", this.popupKeyDownHandler);
      }
    };
    Breadcrumb2.prototype.getPersistData = function() {
      return this.addOnPersist(["activeItem"]);
    };
    Breadcrumb2.prototype.getModuleName = function() {
      return "breadcrumb";
    };
    Breadcrumb2.prototype.destroy = function() {
      var _this = this;
      var classes = [];
      var attributes2 = ["aria-label"];
      if (this.cssClass) {
        classes.concat(this.cssClass.split(" "));
      }
      if (this.enableRtl) {
        classes.push("e-rtl");
      }
      if (this.disabled) {
        classes.push(DISABLEDCLASS);
        attributes2.push(ARIADISABLED);
      }
      if (this.overflowMode === "Wrap") {
        classes.push(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        classes.push(SCROLLMODECLASS);
      }
      this.unWireEvents();
      this.element.innerHTML = "";
      removeClass([this.element], classes);
      attributes2.forEach(function(attribute) {
        _this.element.removeAttribute(attribute);
      });
      _super.prototype.destroy.call(this);
    };
    __decorate14([
      Property("")
    ], Breadcrumb2.prototype, "url", void 0);
    __decorate14([
      Collection([], BreadcrumbItem)
    ], Breadcrumb2.prototype, "items", void 0);
    __decorate14([
      Property("")
    ], Breadcrumb2.prototype, "activeItem", void 0);
    __decorate14([
      Property(-1)
    ], Breadcrumb2.prototype, "maxItems", void 0);
    __decorate14([
      Property("Menu")
    ], Breadcrumb2.prototype, "overflowMode", void 0);
    __decorate14([
      Property("")
    ], Breadcrumb2.prototype, "cssClass", void 0);
    __decorate14([
      Property(null)
    ], Breadcrumb2.prototype, "itemTemplate", void 0);
    __decorate14([
      Property("/")
    ], Breadcrumb2.prototype, "separatorTemplate", void 0);
    __decorate14([
      Property(true)
    ], Breadcrumb2.prototype, "enableNavigation", void 0);
    __decorate14([
      Property(false)
    ], Breadcrumb2.prototype, "enableActiveItemNavigation", void 0);
    __decorate14([
      Property(false)
    ], Breadcrumb2.prototype, "disabled", void 0);
    __decorate14([
      Property("")
    ], Breadcrumb2.prototype, "locale", void 0);
    __decorate14([
      Event()
    ], Breadcrumb2.prototype, "beforeItemRender", void 0);
    __decorate14([
      Event()
    ], Breadcrumb2.prototype, "itemClick", void 0);
    __decorate14([
      Event()
    ], Breadcrumb2.prototype, "created", void 0);
    Breadcrumb2 = __decorate14([
      NotifyPropertyChanges
    ], Breadcrumb2);
    return Breadcrumb2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_CAROUSEL = "e-carousel";
var CLS_ACTIVE3 = "e-active";
var CLS_RTL6 = "e-rtl";
var CLS_PARTIAL = "e-partial";
var CLS_SWIPE = "e-swipe";
var CLS_SLIDE_CONTAINER = "e-carousel-slide-container";
var CLS_ITEMS3 = "e-carousel-items";
var CLS_CLONED = "e-cloned";
var CLS_ITEM4 = "e-carousel-item";
var CLS_PREVIOUS = "e-previous";
var CLS_NEXT = "e-next";
var CLS_PREV_ICON = "e-previous-icon";
var CLS_NEXT_ICON = "e-next-icon";
var CLS_NAVIGATORS = "e-carousel-navigators";
var CLS_INDICATORS = "e-carousel-indicators";
var CLS_INDICATOR_BARS = "e-indicator-bars";
var CLS_INDICATOR_BAR = "e-indicator-bar";
var CLS_INDICATOR2 = "e-indicator";
var CLS_ICON2 = "e-icons";
var CLS_PLAY_PAUSE = "e-play-pause";
var CLS_PLAY_ICON = "e-play-icon";
var CLS_PAUSE_ICON = "e-pause-icon";
var CLS_PREV_BUTTON = "e-previous-button";
var CLS_NEXT_BUTTON = "e-next-button";
var CLS_PLAY_BUTTON = "e-play-button";
var CLS_FLAT = "e-flat";
var CLS_ROUND = "e-round";
var CLS_HOVER_ARROWS = "e-hover-arrows";
var CLS_HOVER = "e-carousel-hover";
var CLS_TEMPLATE3 = "e-template";
var CLS_SLIDE_ANIMATION = "e-carousel-slide-animation";
var CLS_FADE_ANIMATION = "e-carousel-fade-animation";
var CLS_CUSTOM_ANIMATION = "e-carousel-custom-animation";
var CLS_ANIMATION_NONE = "e-carousel-animation-none";
var CLS_PREV_SLIDE = "e-prev";
var CLS_NEXT_SLIDE = "e-next";
var CLS_TRANSITION_START = "e-transition-start";
var CLS_TRANSITION_END = "e-transition-end";
var CarouselSwipeMode;
(function(CarouselSwipeMode2) {
  CarouselSwipeMode2[CarouselSwipeMode2["Touch"] = 1] = "Touch";
  CarouselSwipeMode2[CarouselSwipeMode2["Mouse"] = 2] = "Mouse";
})(CarouselSwipeMode || (CarouselSwipeMode = {}));
var CarouselItem = (
  /** @class */
  function(_super) {
    __extends15(CarouselItem2, _super);
    function CarouselItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([
      Property()
    ], CarouselItem2.prototype, "cssClass", void 0);
    __decorate15([
      Property()
    ], CarouselItem2.prototype, "interval", void 0);
    __decorate15([
      Property()
    ], CarouselItem2.prototype, "template", void 0);
    __decorate15([
      Property()
    ], CarouselItem2.prototype, "htmlAttributes", void 0);
    return CarouselItem2;
  }(ChildProperty)
);
var Carousel = (
  /** @class */
  function(_super) {
    __extends15(Carousel2, _super);
    function Carousel2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isSwipe = false;
      return _this;
    }
    Carousel2.prototype.getModuleName = function() {
      return CLS_CAROUSEL.replace("e-", "");
    };
    Carousel2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedIndex"]);
    };
    Carousel2.prototype.preRender = function() {
      this.keyConfigs = {
        home: "home",
        end: "end",
        space: "space",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      var defaultLocale = {
        nextSlide: "Next slide",
        of: "of",
        pauseSlideTransition: "Pause slide transition",
        playSlideTransition: "Play slide transition",
        previousSlide: "Previous slide",
        slide: "Slide",
        slideShow: "Slide show"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);
    };
    Carousel2.prototype.render = function() {
      this.initialize();
      this.renderSlides();
      this.renderNavigators();
      this.renderPlayButton();
      this.renderIndicators();
      this.applyAnimation();
      this.wireEvents();
    };
    Carousel2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var target;
      var rtlElement;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "animationEffect":
            this.applyAnimation();
            break;
          case "cssClass":
            classList(this.element, [newProp.cssClass], [oldProp.cssClass]);
            break;
          case "selectedIndex":
            this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? "Previous" : "Next");
            this.autoSlide();
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              this.setHtmlAttributes(this.htmlAttributes, this.element);
            }
            break;
          case "enableTouchSwipe":
            if (!this.enableTouchSwipe && this.touchModule) {
              this.touchModule.destroy();
            }
            if (this.element.querySelector("." + CLS_ITEMS3)) {
              this.renderTouchActions();
            }
            break;
          case "loop":
            if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {
              this.applySlideInterval();
            }
            this.handleNavigatorsActions(this.selectedIndex);
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              this.reRenderSlides();
            }
            break;
          case "enableRtl":
            rtlElement = [].slice.call(this.element.querySelectorAll("." + CLS_PREV_BUTTON + ",\n                ." + CLS_NEXT_BUTTON + ", ." + CLS_PLAY_BUTTON));
            rtlElement.push(this.element);
            if (this.enableRtl) {
              addClass(rtlElement, CLS_RTL6);
            } else {
              removeClass(rtlElement, CLS_RTL6);
            }
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              var cloneCount = this.loop ? this.getNumOfItems() : 0;
              var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
              this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
            }
            break;
          case "buttonsVisibility":
            target = this.element.querySelector("." + CLS_NAVIGATORS);
            if (target) {
              switch (this.buttonsVisibility) {
                case "Hidden":
                  this.resetTemplates(["previousButtonTemplate", "nextButtonTemplate"]);
                  remove(target);
                  break;
                case "VisibleOnHover":
                  addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
                case "Visible":
                  removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
              }
            } else {
              this.renderNavigators();
              this.renderPlayButton();
            }
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(this.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(this.height) });
            break;
          case "autoPlay":
            if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {
              this.playButtonClickHandler(null, true);
            }
            this.autoSlide();
            break;
          case "interval":
            this.autoSlide();
            break;
          case "showIndicators":
          case "indicatorsType":
            target = this.element.querySelector("." + CLS_INDICATORS);
            if (target) {
              this.resetTemplates(["indicatorsTemplate"]);
              remove(target);
            }
            this.renderIndicators();
            break;
          case "showPlayButton":
            target = this.element.querySelector("." + CLS_PLAY_PAUSE);
            if (!this.showPlayButton && target) {
              remove(target);
              this.resetTemplates(["playButtonTemplate"]);
            }
            this.renderPlayButton();
            break;
          case "items":
          case "dataSource": {
            var selectedData = prop === "dataSource" ? this.dataSource : this.items;
            if (!isNullOrUndefined(selectedData) && selectedData.length > 0 && this.selectedIndex >= selectedData.length) {
              this.setActiveSlide(selectedData.length - 1, "Previous");
              this.autoSlide();
            }
            this.reRenderSlides();
            this.reRenderIndicators();
            break;
          }
          case "partialVisible":
            if (this.partialVisible) {
              addClass([this.element], CLS_PARTIAL);
            } else {
              removeClass([this.element], CLS_PARTIAL);
            }
            this.reRenderSlides();
            break;
          case "swipeMode":
            EventHandler.remove(this.element, "mousedown touchstart", this.swipeStart);
            EventHandler.remove(this.element, "mousemove touchmove", this.swiping);
            EventHandler.remove(this.element, "mouseup touchend", this.swipStop);
            this.swipeModehandlers();
            this.reRenderSlides();
            break;
        }
      }
    };
    Carousel2.prototype.reRenderSlides = function() {
      var target = this.element.querySelector("." + CLS_ITEMS3);
      if (target) {
        this.resetTemplates(["itemTemplate"]);
        remove(target);
      }
      this.renderSlides();
    };
    Carousel2.prototype.reRenderIndicators = function() {
      var target = this.element.querySelector("." + CLS_INDICATORS);
      if (target) {
        this.resetTemplates(["indicatorsTemplate"]);
        remove(target);
      }
      this.renderIndicators();
    };
    Carousel2.prototype.initialize = function() {
      var carouselClasses = [];
      carouselClasses.push(CLS_CAROUSEL);
      if (this.cssClass) {
        carouselClasses.push(this.cssClass);
      }
      if (this.enableRtl) {
        carouselClasses.push(CLS_RTL6);
      }
      if (this.partialVisible) {
        carouselClasses.push(CLS_PARTIAL);
      }
      if (!(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
        carouselClasses.push(CLS_SWIPE);
      }
      addClass([this.element], carouselClasses);
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      attributes(this.element, { "role": "group", "aria-roledescription": "carousel", "aria-label": this.localeObj.getConstant("slideShow") });
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    Carousel2.prototype.renderSlides = function() {
      var _this = this;
      var slideContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      if (!slideContainer) {
        slideContainer = this.createElement("div", { className: CLS_SLIDE_CONTAINER, attrs: { "tabindex": "0", "role": "tabpanel" } });
        this.element.appendChild(slideContainer);
      }
      this.itemsContainer = this.createElement("div", { className: CLS_ITEMS3, attrs: { "aria-live": this.autoPlay ? "off" : "polite" } });
      slideContainer.appendChild(this.itemsContainer);
      var numOfItems = this.getNumOfItems();
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
          this.dataSource.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      if (this.items.length > 0) {
        this.slideItems = this.items;
        this.items.forEach(function(item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer);
        });
      } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
        this.slideItems = this.dataSource;
        this.dataSource.forEach(function(item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer);
        });
      }
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (!isNullOrUndefined(this.dataSource) && this.dataSource.length > 0) {
          this.dataSource.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      this.renderTemplates();
      this.itemsContainer.style.setProperty("--carousel-items-count", "" + this.itemsContainer.children.length);
      var slideWidth = isNullOrUndefined(this.itemsContainer.firstElementChild) ? 0 : this.itemsContainer.firstElementChild.clientWidth;
      this.itemsContainer.style.transitionProperty = "none";
      var cloneCount = this.loop ? numOfItems : 0;
      this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
      this.autoSlide();
      this.renderTouchActions();
      this.renderKeyboardActions();
    };
    Carousel2.prototype.getTranslateX = function(slideWidth, count) {
      if (count === void 0) {
        count = 1;
      }
      return this.enableRtl ? "translateX(" + slideWidth * count + "px)" : "translateX(" + -slideWidth * count + "px)";
    };
    Carousel2.prototype.renderSlide = function(item, itemTemplate, index, container, isClone) {
      if (isClone === void 0) {
        isClone = false;
      }
      var itemEle = this.createElement("div", {
        id: getUniqueID("carousel_item"),
        className: CLS_ITEM4 + " " + (item.cssClass ? item.cssClass : "") + " " + (this.selectedIndex === index && !isClone ? CLS_ACTIVE3 : ""),
        attrs: {
          "aria-hidden": this.selectedIndex === index && !isClone ? "false" : "true",
          "data-index": index.toString(),
          "role": "group",
          "aria-roledescription": "slide"
        }
      });
      if (isClone) {
        itemEle.classList.add(CLS_CLONED);
      }
      if (!isNullOrUndefined(item.htmlAttributes)) {
        this.setHtmlAttributes(item.htmlAttributes, itemEle);
      }
      var templateId = this.element.id + "_template";
      var template = this.templateParser(itemTemplate)(item, this, "itemTemplate", templateId, false);
      append(template, itemEle);
      container.appendChild(itemEle);
    };
    Carousel2.prototype.renderNavigators = function() {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      var navigators = this.createElement("div", { className: CLS_NAVIGATORS });
      var itemsContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      itemsContainer.insertAdjacentElement("afterend", navigators);
      if (!isNullOrUndefined(this.slideItems) && this.slideItems.length > 1) {
        this.renderNavigatorButton("Previous");
        this.renderNavigatorButton("Next");
      }
      this.renderTemplates();
    };
    Carousel2.prototype.renderNavigatorButton = function(direction) {
      var buttonContainer = this.createElement("div", {
        className: (direction === "Previous" ? CLS_PREVIOUS : CLS_NEXT) + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (direction === "Previous" && this.previousButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_previousButtonTemplate";
        var template = this.templateParser(this.previousButtonTemplate)({ type: "Previous" }, this, "previousButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else if (direction === "Next" && this.nextButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_nextButtonTemplate";
        var template = this.templateParser(this.nextButtonTemplate)({ type: "Next" }, this, "nextButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else {
        var button = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(direction === "Previous" ? "previousSlide" : "nextSlide"), "type": "button" }
        });
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + (direction === "Previous" ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),
          iconCss: CLS_ICON2 + " " + (direction === "Previous" ? CLS_PREV_ICON : CLS_NEXT_ICON),
          enableRtl: this.enableRtl,
          disabled: !this.loop && this.selectedIndex === (direction === "Previous" ? 0 : this.slideItems.length - 1)
        });
        buttonObj.appendTo(button);
        buttonContainer.appendChild(button);
      }
      this.element.querySelector("." + CLS_NAVIGATORS).appendChild(buttonContainer);
      EventHandler.add(buttonContainer, "click", this.navigatorClickHandler, this);
    };
    Carousel2.prototype.renderPlayButton = function() {
      if (isNullOrUndefined(this.slideItems) || this.buttonsVisibility === "Hidden" || !this.showPlayButton || this.slideItems.length <= 1) {
        return;
      }
      var playPauseWrap = this.createElement("div", {
        className: CLS_PLAY_PAUSE + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (this.playButtonTemplate) {
        addClass([playPauseWrap], CLS_TEMPLATE3);
        var templateId = this.element.id + "_playButtonTemplate";
        var template = this.templateParser(this.playButtonTemplate)({}, this, "playButtonTemplate", templateId, false);
        append(template, playPauseWrap);
      } else {
        var playButton = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"), "type": "button" }
        });
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + CLS_PLAY_BUTTON,
          iconCss: CLS_ICON2 + " " + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),
          isToggle: true,
          enableRtl: this.enableRtl
        });
        if (isLastSlide) {
          this.setProperties({ autoPlay: false }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", "polite");
        }
        buttonObj.appendTo(playButton);
        playPauseWrap.appendChild(playButton);
      }
      var navigators = this.element.querySelector("." + CLS_NAVIGATORS);
      navigators.insertBefore(playPauseWrap, navigators.lastElementChild);
      this.renderTemplates();
      EventHandler.add(playPauseWrap, "click", this.playButtonClickHandler, this);
    };
    Carousel2.prototype.renderIndicators = function() {
      var _this = this;
      if (!this.showIndicators || isNullOrUndefined(this.indicatorsType)) {
        return;
      }
      var indicatorClass = "e-default";
      if (!this.indicatorsTemplate) {
        indicatorClass = "e-" + this.indicatorsType.toLowerCase();
      }
      var indicatorWrap = this.createElement("div", { className: CLS_INDICATORS + " " + indicatorClass });
      var indicatorBars = this.createElement("div", { className: CLS_INDICATOR_BARS });
      indicatorWrap.appendChild(indicatorBars);
      var progress;
      if (this.slideItems) {
        switch (this.indicatorsType) {
          case "Fraction":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              indicatorBars.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
            }
            break;
          case "Progress":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              progress = this.createElement("div", { className: CLS_INDICATOR_BAR });
              progress.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
              progress.style.setProperty("--carousel-items-count", "" + this.slideItems.length);
              indicatorBars.appendChild(progress);
            }
            break;
          case "Default":
          case "Dynamic":
            this.slideItems.forEach(function(item, index) {
              var indicatorBar = _this.createElement("div", {
                className: CLS_INDICATOR_BAR + " " + (_this.selectedIndex === index ? CLS_ACTIVE3 : _this.selectedIndex - 1 === index ? CLS_PREV_SLIDE : _this.selectedIndex + 1 === index ? CLS_NEXT_SLIDE : ""),
                attrs: { "data-index": index.toString(), "aria-current": _this.selectedIndex === index ? "true" : "false" }
              });
              indicatorBar.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
              if (_this.indicatorsTemplate) {
                _this.renderIndicatorTemplate(indicatorBar, index);
              } else if (_this.indicatorsType === "Default") {
                var indicator = _this.createElement("button", { className: CLS_INDICATOR2, attrs: { "type": "button", "aria-label": _this.localeObj.getConstant("slide") + " " + (index + 1) + " " + _this.localeObj.getConstant("of") + " " + _this.slideItems.length } });
                indicatorBar.appendChild(indicator);
                indicator.appendChild(_this.createElement("div", {}));
                var buttonObj = new Button({ cssClass: "e-flat e-small" });
                buttonObj.appendTo(indicator);
              }
              indicatorBars.appendChild(indicatorBar);
              if (_this.indicatorsType === "Default") {
                EventHandler.add(indicatorBar, "click", _this.indicatorClickHandler, _this);
              }
            });
            break;
        }
      }
      this.element.appendChild(indicatorWrap);
    };
    Carousel2.prototype.renderIndicatorTemplate = function(indicatorBar, index) {
      if (index === void 0) {
        index = 0;
      }
      addClass([indicatorBar], CLS_TEMPLATE3);
      var templateId = this.element.id + "_indicatorsTemplate";
      var template = this.templateParser(this.indicatorsTemplate)({ index, selectedIndex: this.selectedIndex }, this, "indicatorsTemplate", templateId, false);
      append(template, indicatorBar);
    };
    Carousel2.prototype.renderKeyboardActions = function() {
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
    };
    Carousel2.prototype.renderTouchActions = function() {
      if (!this.enableTouchSwipe) {
        return;
      }
      this.touchModule = new Touch(this.element, { swipe: this.swipeHandler.bind(this) });
    };
    Carousel2.prototype.applyAnimation = function() {
      removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);
      switch (this.animationEffect) {
        case "Slide":
          addClass([this.element], CLS_SLIDE_ANIMATION);
          break;
        case "Fade":
          addClass([this.element], CLS_FADE_ANIMATION);
          break;
        case "None":
          addClass([this.element], CLS_ANIMATION_NONE);
          break;
        case "Custom":
          addClass([this.element], CLS_CUSTOM_ANIMATION);
          break;
      }
    };
    Carousel2.prototype.autoSlide = function() {
      if (isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      this.resetSlideInterval();
      this.applySlideInterval();
    };
    Carousel2.prototype.autoSlideChange = function() {
      var activeSlide = this.element.querySelector("." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide)) {
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      if (!this.loop && activeIndex === this.slideItems.length - 1) {
        this.resetSlideInterval();
      } else {
        var index = (activeIndex + 1) % this.slideItems.length;
        if (!this.element.classList.contains(CLS_HOVER)) {
          this.setActiveSlide(index, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.applySlideInterval = function() {
      var _this = this;
      if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {
        return;
      }
      var itemInterval = this.interval;
      if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex || 0].interval)) {
        itemInterval = this.items[this.selectedIndex || 0].interval;
      }
      this.autoSlideInterval = setInterval(function() {
        return _this.autoSlideChange();
      }, itemInterval);
    };
    Carousel2.prototype.resetSlideInterval = function() {
      clearInterval(this.autoSlideInterval);
      this.autoSlideInterval = null;
    };
    Carousel2.prototype.getSlideIndex = function(direction) {
      var currentIndex = this.selectedIndex || 0;
      if (direction === "Previous") {
        currentIndex--;
        if (currentIndex < 0) {
          currentIndex = this.slideItems.length - 1;
        }
      } else {
        currentIndex++;
        if (currentIndex === this.slideItems.length) {
          currentIndex = 0;
        }
      }
      return currentIndex;
    };
    Carousel2.prototype.setActiveSlide = function(currentIndex, direction, isSwiped) {
      var _this = this;
      if (isSwiped === void 0) {
        isSwiped = false;
      }
      if (this.element.querySelectorAll("." + CLS_ITEM4 + "." + CLS_PREV_SLIDE + ",." + CLS_ITEM4 + "." + CLS_NEXT_SLIDE).length > 0) {
        return;
      }
      currentIndex = isNullOrUndefined(currentIndex) ? 0 : currentIndex;
      var allSlides = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM4 + ":not(.e-cloned)"));
      var activeSlide = this.element.querySelector("." + CLS_ITEM4 + "." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide) && this.showIndicators) {
        var activeIndicator = this.element.querySelector("." + CLS_INDICATOR_BAR + "." + CLS_ACTIVE3);
        var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);
        addClass([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE3);
        return;
      } else if (isNullOrUndefined(activeSlide)) {
        addClass([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];
      var eventArgs = {
        currentIndex: activeIndex,
        nextIndex: currentIndex,
        currentSlide: activeSlide,
        nextSlide: currentSlide,
        slideDirection: direction,
        isSwiped,
        cancel: false
      };
      this.trigger("slideChanging", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        _this.setProperties({ selectedIndex: currentIndex }, true);
        attributes(args.currentSlide, { "aria-hidden": "true" });
        attributes(args.nextSlide, { "aria-hidden": "false" });
        _this.refreshIndicators(activeIndex, currentIndex);
        _this.slideChangedEventArgs = {
          currentIndex: args.nextIndex,
          previousIndex: args.currentIndex,
          currentSlide: args.nextSlide,
          previousSlide: args.currentSlide,
          slideDirection: direction,
          isSwiped
        };
        var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;
        var numOfItems = _this.getNumOfItems();
        if (!_this.isSwipe) {
          _this.itemsContainer.style.transitionDuration = "0.6s";
        }
        _this.isSwipe = false;
        if (_this.animationEffect === "Fade") {
          _this.itemsContainer.classList.add("e-fade-in-out");
        } else {
          _this.itemsContainer.style.transitionProperty = "transform";
        }
        if (_this.loop) {
          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === "Next") {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, allSlides.length + numOfItems);
          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === "Previous") {
            _this.itemsContainer.style.transform = _this.partialVisible ? _this.getTranslateX(slideWidth) : "translateX(0px)";
          } else {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex + numOfItems);
          }
        } else {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex);
        }
        if (_this.animationEffect === "Slide") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_PREV_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);
          } else {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);
          }
        } else if (_this.animationEffect === "Fade") {
          removeClass([args.currentSlide], CLS_ACTIVE3);
          addClass([args.nextSlide], CLS_ACTIVE3);
        } else if (_this.animationEffect === "Custom") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            addClass([args.currentSlide], CLS_PREV_SLIDE);
          } else {
            addClass([args.currentSlide], CLS_PREV_SLIDE);
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
          }
        } else {
          _this.onTransitionEnd();
        }
        _this.handleNavigatorsActions(currentIndex);
      });
    };
    Carousel2.prototype.onTransitionEnd = function() {
      var _this = this;
      removeClass(this.element.querySelectorAll("." + CLS_ITEMS3), "e-fade-in-out");
      var numOfItems = this.getNumOfItems();
      if (this.slideChangedEventArgs) {
        this.itemsContainer.style.transitionProperty = "none";
        if (this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === "Next" || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === "Previous")) {
          var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + numOfItems);
        }
        addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE3);
        removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE3);
        this.trigger("slideChanged", this.slideChangedEventArgs, function() {
          removeClass(_this.element.querySelectorAll("." + CLS_ITEM4), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);
          _this.slideChangedEventArgs = null;
        });
      }
    };
    Carousel2.prototype.refreshIndicators = function(activeIndex, currentIndex) {
      var _this = this;
      var slideIndicator = this.element.querySelector("." + CLS_INDICATOR_BARS);
      if (isNullOrUndefined(slideIndicator)) {
        return;
      }
      var indicators = [].slice.call(slideIndicator.childNodes);
      switch (this.indicatorsType) {
        case "Default":
        case "Dynamic":
          attributes(indicators[parseInt(activeIndex.toString(), 10)], { "aria-current": "false" });
          attributes(indicators[parseInt(currentIndex.toString(), 10)], { "aria-current": "true" });
          removeClass(indicators, [CLS_ACTIVE3, CLS_PREV_SLIDE, CLS_NEXT_SLIDE]);
          addClass([indicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
          if (indicators[currentIndex - 1]) {
            addClass([indicators[currentIndex - 1]], CLS_PREV_SLIDE);
          }
          if (indicators[currentIndex + 1]) {
            addClass([indicators[currentIndex + 1]], CLS_NEXT_SLIDE);
          }
          indicators.forEach(function(item) {
            return item.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
          });
          break;
        case "Fraction":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
          }
          break;
        case "Progress":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.firstElementChild.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
          }
          break;
      }
    };
    Carousel2.prototype.setHtmlAttributes = function(attribute, element) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (key === "class") {
          addClass([element], attribute["" + key]);
        } else {
          element.setAttribute(key, attribute["" + key]);
        }
      }
    };
    Carousel2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Carousel2.prototype.getNavigatorState = function(target, isPrevious) {
      var button = target.querySelector("." + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));
      if (button) {
        var buttonObj = getInstance(button, Button);
        return buttonObj.disabled;
      }
      return false;
    };
    Carousel2.prototype.navigatorClickHandler = function(e) {
      var target = e.currentTarget;
      var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));
      if (isDisabled) {
        return;
      }
      var direction = target.classList.contains(CLS_PREVIOUS) ? "Previous" : "Next";
      this.setActiveSlide(this.getSlideIndex(direction), direction);
      this.autoSlide();
    };
    Carousel2.prototype.indicatorClickHandler = function(e) {
      var target = closest(e.target, "." + CLS_INDICATOR_BAR);
      var index = parseInt(target.dataset.index, 10);
      if (this.selectedIndex !== index) {
        this.setActiveSlide(index, this.selectedIndex > index ? "Previous" : "Next");
        this.autoSlide();
      }
    };
    Carousel2.prototype.playButtonClickHandler = function(e, isPropertyChange) {
      if (isPropertyChange === void 0) {
        isPropertyChange = false;
      }
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      if (playButton) {
        var buttonObj = getInstance(playButton, Button);
        if (!isPropertyChange) {
          this.setProperties({ autoPlay: !this.autoPlay }, true);
        }
        playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
        buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
        buttonObj.dataBind();
        this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
        if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {
          this.setActiveSlide(0, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.keyHandler = function(e) {
      var direction;
      var slideIndex;
      var isSlideTransition = false;
      var target = e.target;
      e.preventDefault();
      switch (e.action) {
        case "space":
          if (this.showIndicators && target.classList.contains(CLS_INDICATOR2)) {
            target.click();
          } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {
            this.playButtonClickHandler(e);
          } else if (target.classList.contains(CLS_NEXT_BUTTON)) {
            this.next();
          } else if (target.classList.contains(CLS_PREV_BUTTON)) {
            this.prev();
          }
          break;
        case "end":
          slideIndex = this.slideItems.length - 1;
          direction = "Next";
          isSlideTransition = true;
          break;
        case "home":
          slideIndex = 0;
          direction = "Previous";
          isSlideTransition = true;
          break;
        case "moveUp":
        case "moveLeft":
        case "moveDown":
        case "moveRight":
          if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {
            this.element.focus();
          }
          direction = e.action === "moveUp" || e.action === "moveLeft" ? "Previous" : "Next";
          slideIndex = this.getSlideIndex(direction);
          isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);
          break;
      }
      if (isSlideTransition) {
        this.setActiveSlide(slideIndex, direction);
        this.autoSlide();
        isSlideTransition = false;
      }
    };
    Carousel2.prototype.swipeHandler = function(e) {
      if (this.element.classList.contains(CLS_HOVER) || isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      var direction = e.swipeDirection === "Right" ? "Previous" : "Next";
      var slideIndex = this.getSlideIndex(direction);
      if (!this.isSuspendSlideTransition(slideIndex, direction)) {
        this.setActiveSlide(slideIndex, direction, true);
        this.autoSlide();
      }
    };
    Carousel2.prototype.isSuspendSlideTransition = function(index, direction) {
      return !this.loop && (direction === "Next" && index === 0 || direction === "Previous" && index === this.slideItems.length - 1);
    };
    Carousel2.prototype.handleNavigatorsActions = function(index) {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      if (this.showPlayButton) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;
        if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {
          isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE3);
        }
        if (isButtonUpdate) {
          this.setProperties({ autoPlay: !isLastSlide }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
          var buttonObj = getInstance(playButton, Button);
          buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
          buttonObj.dataBind();
        }
      }
      var prevButton = this.element.querySelector("." + CLS_PREV_BUTTON);
      if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {
        var buttonObj = getInstance(prevButton, Button);
        buttonObj.disabled = !this.loop && index === 0;
        buttonObj.dataBind();
      }
      var nextButton = this.element.querySelector("." + CLS_NEXT_BUTTON);
      if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {
        var buttonObj = getInstance(nextButton, Button);
        buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;
        buttonObj.dataBind();
      }
    };
    Carousel2.prototype.onHoverActions = function(e) {
      var navigator2 = this.element.querySelector("." + CLS_NAVIGATORS);
      switch (e.type) {
        case "mouseenter":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator2) {
            removeClass([].slice.call(navigator2.childNodes), CLS_HOVER_ARROWS);
          }
          if (this.pauseOnHover) {
            addClass([this.element], CLS_HOVER);
          }
          break;
        case "mouseleave":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator2) {
            addClass([].slice.call(navigator2.childNodes), CLS_HOVER_ARROWS);
          }
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.onFocusActions = function(e) {
      switch (e.type) {
        case "focusin":
          addClass([this.element], CLS_HOVER);
          break;
        case "focusout":
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.destroyButtons = function() {
      var buttonCollections = [].slice.call(this.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = getInstance(button, Button);
        if (instance) {
          instance.destroy();
        }
      }
    };
    Carousel2.prototype.getNumOfItems = function() {
      return this.partialVisible ? 2 : 1;
    };
    Carousel2.prototype.getTranslateValue = function(element) {
      var style = getComputedStyle(element);
      return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
    };
    Carousel2.prototype.swipeStart = function(e) {
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      this.isSwipe = false;
      this.itemsContainer.classList.add("e-swipe-start");
      this.prevPageX = e.touches ? e.touches[0].pageX : e.pageX;
      this.initialTranslate = this.getTranslateValue(this.itemsContainer);
    };
    Carousel2.prototype.swiping = function(e) {
      if (!this.itemsContainer.classList.contains("e-swipe-start")) {
        return;
      }
      e.preventDefault();
      var pageX = e.touches ? e.touches[0].pageX : e.pageX;
      var positionDiff = this.prevPageX - pageX;
      if (!this.loop && (this.enableRtl && (this.selectedIndex === 0 && positionDiff > 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff < 0) || !this.enableRtl && (this.selectedIndex === 0 && positionDiff < 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff > 0))) {
        return;
      }
      this.itemsContainer.style.transform = "translateX(" + (this.initialTranslate + (this.enableRtl ? positionDiff : -positionDiff)) + "px)";
    };
    Carousel2.prototype.swipStop = function() {
      this.isSwipe = true;
      var time = Date.now() - this.timeStampStart;
      var distanceX = this.getTranslateValue(this.itemsContainer) - this.initialTranslate;
      distanceX = distanceX < 0 ? distanceX * -1 : distanceX;
      if (this.isSwipe) {
        var offsetDist = distanceX * (Browser.isDevice ? 6 : 1.66);
        this.itemsContainer.style.transitionDuration = (Browser.isDevice ? distanceX : offsetDist) / time / 10 + "s";
      }
      var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
      var threshold = slideWidth / 2;
      this.itemsContainer.classList.remove("e-swipe-start");
      var value = this.getTranslateValue(this.itemsContainer);
      if (value - this.initialTranslate < -threshold) {
        this.swipeNavigation(!this.enableRtl);
      } else if (value - this.initialTranslate > threshold) {
        this.swipeNavigation(this.enableRtl);
      } else {
        this.itemsContainer.style.transform = "translateX(" + this.initialTranslate + "px)";
        if (this.animationEffect === "Fade") {
          this.itemsContainer.classList.add("e-fade-in-out");
        }
      }
    };
    Carousel2.prototype.swipeNavigation = function(isRtl) {
      if (isRtl) {
        this.next();
      } else {
        this.prev();
      }
    };
    Carousel2.prototype.swipeModehandlers = function() {
      if ((this.swipeMode & CarouselSwipeMode.Touch) === CarouselSwipeMode.Touch) {
        EventHandler.add(this.itemsContainer, "touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "touchend", this.swipStop, this);
      }
      if ((this.swipeMode & CarouselSwipeMode.Mouse) === CarouselSwipeMode.Mouse) {
        EventHandler.add(this.itemsContainer, "mousedown", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup", this.swipStop, this);
      }
      if (this.swipeMode === 0 && (this.swipeMode & CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch) === (CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch)) {
        EventHandler.add(this.itemsContainer, "mousedown touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup touchend", this.swipStop, this);
      }
    };
    Carousel2.prototype.resizeHandler = function() {
      if (this.itemsContainer && this.itemsContainer.firstElementChild) {
        var numOfItems = this.getNumOfItems();
        var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
        if (this.loop) {
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + numOfItems);
        } else {
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex);
        }
      }
    };
    Carousel2.prototype.wireEvents = function() {
      if (!(this.animationEffect === "Custom")) {
        this.swipeModehandlers();
      }
      EventHandler.add(this.element, "focusin focusout", this.onFocusActions, this);
      EventHandler.add(this.element, "mouseenter mouseleave", this.onHoverActions, this);
      EventHandler.add(this.element.firstElementChild, "animationend", this.onTransitionEnd, this);
      EventHandler.add(this.element.firstElementChild, "transitionend", this.onTransitionEnd, this);
      EventHandler.add(window, "resize", this.resizeHandler, this);
    };
    Carousel2.prototype.unWireEvents = function() {
      var _this = this;
      var indicators = [].slice.call(this.element.querySelectorAll("." + CLS_INDICATOR_BAR));
      indicators.forEach(function(indicator) {
        EventHandler.remove(indicator, "click", _this.indicatorClickHandler);
      });
      var navigators = [].slice.call(this.element.querySelectorAll("." + CLS_PREVIOUS + ",." + CLS_NEXT));
      navigators.forEach(function(navigator2) {
        EventHandler.remove(navigator2, "click", _this.navigatorClickHandler);
      });
      var playIcon = this.element.querySelector("." + CLS_PLAY_PAUSE);
      if (playIcon) {
        EventHandler.remove(playIcon, "click", this.playButtonClickHandler);
      }
      EventHandler.remove(this.element.firstElementChild, "animationend", this.onTransitionEnd);
      EventHandler.remove(this.element.firstElementChild, "transitionend", this.onTransitionEnd);
      EventHandler.clearEvents(this.element);
      EventHandler.clearEvents(this.itemsContainer);
      EventHandler.remove(window, "resize", this.resizeHandler);
    };
    Carousel2.prototype.prev = function() {
      if (!this.loop && this.selectedIndex === 0) {
        return;
      }
      var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;
      this.setActiveSlide(index, "Previous");
      this.autoSlide();
    };
    Carousel2.prototype.next = function() {
      if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {
        return;
      }
      var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;
      this.setActiveSlide(index, "Next");
      this.autoSlide();
    };
    Carousel2.prototype.play = function() {
      var playIcon = this.element.querySelector("." + CLS_PLAY_ICON);
      if (this.showPlayButton && playIcon) {
        classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("pauseSlideTransition"));
      }
      this.setProperties({ autoPlay: true }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.applySlideInterval();
    };
    Carousel2.prototype.pause = function() {
      var pauseIcon = this.element.querySelector("." + CLS_PAUSE_ICON);
      if (this.showPlayButton && pauseIcon) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
        classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);
      }
      this.setProperties({ autoPlay: false }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.resetSlideInterval();
    };
    Carousel2.prototype.renderTemplates = function() {
      if (this.isAngular || this.isReact) {
        this.renderReactTemplates();
      }
    };
    Carousel2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Carousel2.prototype.destroy = function() {
      var _this = this;
      this.resetTemplates();
      if (this.touchModule) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      this.keyModule.destroy();
      this.keyModule = null;
      this.resetSlideInterval();
      this.destroyButtons();
      this.unWireEvents();
      [].slice.call(this.element.children).forEach(function(ele) {
        _this.element.removeChild(ele);
      });
      removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL6, CLS_SWIPE]);
      ["role", "style"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      this.itemsContainer = null;
      _super.prototype.destroy.call(this);
    };
    __decorate15([
      Collection([], CarouselItem)
    ], Carousel2.prototype, "items", void 0);
    __decorate15([
      Property("Slide")
    ], Carousel2.prototype, "animationEffect", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "previousButtonTemplate", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "nextButtonTemplate", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "indicatorsTemplate", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "playButtonTemplate", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "cssClass", void 0);
    __decorate15([
      Property([])
    ], Carousel2.prototype, "dataSource", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "itemTemplate", void 0);
    __decorate15([
      Property(0)
    ], Carousel2.prototype, "selectedIndex", void 0);
    __decorate15([
      Property("100%")
    ], Carousel2.prototype, "width", void 0);
    __decorate15([
      Property("100%")
    ], Carousel2.prototype, "height", void 0);
    __decorate15([
      Property(5e3)
    ], Carousel2.prototype, "interval", void 0);
    __decorate15([
      Property(true)
    ], Carousel2.prototype, "autoPlay", void 0);
    __decorate15([
      Property(true)
    ], Carousel2.prototype, "pauseOnHover", void 0);
    __decorate15([
      Property(true)
    ], Carousel2.prototype, "loop", void 0);
    __decorate15([
      Property(false)
    ], Carousel2.prototype, "showPlayButton", void 0);
    __decorate15([
      Property(true)
    ], Carousel2.prototype, "enableTouchSwipe", void 0);
    __decorate15([
      Property(true)
    ], Carousel2.prototype, "showIndicators", void 0);
    __decorate15([
      Property("Default")
    ], Carousel2.prototype, "indicatorsType", void 0);
    __decorate15([
      Property("Visible")
    ], Carousel2.prototype, "buttonsVisibility", void 0);
    __decorate15([
      Property(false)
    ], Carousel2.prototype, "partialVisible", void 0);
    __decorate15([
      Property(CarouselSwipeMode.Touch)
    ], Carousel2.prototype, "swipeMode", void 0);
    __decorate15([
      Property()
    ], Carousel2.prototype, "htmlAttributes", void 0);
    __decorate15([
      Event()
    ], Carousel2.prototype, "slideChanging", void 0);
    __decorate15([
      Event()
    ], Carousel2.prototype, "slideChanged", void 0);
    Carousel2 = __decorate15([
      NotifyPropertyChanges
    ], Carousel2);
    return Carousel2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_APPBAR = "e-appbar";
var CLS_HORIZONTAL_BOTTOM = "e-horizontal-bottom";
var CLS_STICKY = "e-sticky";
var CLS_PROMINENT = "e-prominent";
var CLS_DENSE = "e-dense";
var CLS_RTL7 = "e-rtl";
var CLS_LIGHT = "e-light";
var CLS_DARK = "e-dark";
var CLS_PRIMARY = "e-primary";
var CLS_INHERIT = "e-inherit";
var AppBar = (
  /** @class */
  function(_super) {
    __extends16(AppBar2, _super);
    function AppBar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    AppBar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove(CLS_APPBAR);
      this.element.removeAttribute("style");
      this.element.removeAttribute("role");
    };
    AppBar2.prototype.getModuleName = function() {
      return "appbar";
    };
    AppBar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    AppBar2.prototype.preRender = function() {
    };
    AppBar2.prototype.render = function() {
      this.element.classList.add(CLS_APPBAR);
      if (this.element.tagName !== "HEADER") {
        this.element.setAttribute("role", "banner");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (this.position === "Bottom") {
        this.element.classList.add(CLS_HORIZONTAL_BOTTOM);
      }
      if (this.isSticky) {
        this.element.classList.add(CLS_STICKY);
      }
      if (this.enableRtl) {
        this.element.classList.add(CLS_RTL7);
      }
      this.setHeightMode();
      this.setColorMode();
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    AppBar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "mode":
            removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);
            this.setHeightMode();
            break;
          case "position":
            if (this.position === "Bottom") {
              addClass([this.element], CLS_HORIZONTAL_BOTTOM);
            } else {
              removeClass([this.element], CLS_HORIZONTAL_BOTTOM);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "isSticky":
            if (this.isSticky) {
              addClass([this.element], CLS_STICKY);
            } else {
              removeClass([this.element], CLS_STICKY);
            }
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              if (!isNullOrUndefined(oldProp.htmlAttributes)) {
                var keys = Object.keys(oldProp.htmlAttributes);
                for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                  var key = keys_1[_b];
                  if (key === "class") {
                    removeClass([this.element], oldProp.htmlAttributes["" + key]);
                  } else {
                    this.element.removeAttribute(key);
                  }
                }
              }
              this.setHtmlAttributes(newProp.htmlAttributes, this.element);
            }
            break;
          case "colorMode":
            removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);
            this.setColorMode();
            break;
          case "enableRtl":
            if (this.enableRtl) {
              addClass([this.element], CLS_RTL7);
            } else {
              removeClass([this.element], CLS_RTL7);
            }
            break;
        }
      }
    };
    AppBar2.prototype.setHtmlAttributes = function(attribute, element) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        if (key === "class") {
          addClass([element], attribute["" + key]);
        } else {
          element.setAttribute(key, attribute["" + key]);
        }
      }
    };
    AppBar2.prototype.setHeightMode = function() {
      if (this.mode === "Prominent") {
        this.element.classList.add(CLS_PROMINENT);
      } else if (this.mode === "Dense") {
        this.element.classList.add(CLS_DENSE);
      }
    };
    AppBar2.prototype.setColorMode = function() {
      switch (this.colorMode) {
        case "Light":
          this.element.classList.add(CLS_LIGHT);
          break;
        case "Dark":
          this.element.classList.add(CLS_DARK);
          break;
        case "Primary":
          this.element.classList.add(CLS_PRIMARY);
          break;
        case "Inherit":
          this.element.classList.add(CLS_INHERIT);
          break;
      }
    };
    __decorate16([
      Property("Regular")
    ], AppBar2.prototype, "mode", void 0);
    __decorate16([
      Property("Top")
    ], AppBar2.prototype, "position", void 0);
    __decorate16([
      Property()
    ], AppBar2.prototype, "cssClass", void 0);
    __decorate16([
      Property(false)
    ], AppBar2.prototype, "isSticky", void 0);
    __decorate16([
      Property()
    ], AppBar2.prototype, "htmlAttributes", void 0);
    __decorate16([
      Property("Light")
    ], AppBar2.prototype, "colorMode", void 0);
    __decorate16([
      Event()
    ], AppBar2.prototype, "created", void 0);
    __decorate16([
      Event()
    ], AppBar2.prototype, "destroyed", void 0);
    AppBar2 = __decorate16([
      NotifyPropertyChanges
    ], AppBar2);
    return AppBar2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper-base/stepper-base.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PROGRESSVALUE = "--progress-value";
var StepStatus;
(function(StepStatus2) {
  StepStatus2["NotStarted"] = "NotStarted";
  StepStatus2["InProgress"] = "InProgress";
  StepStatus2["Completed"] = "Completed";
})(StepStatus || (StepStatus = {}));
var Step = (
  /** @class */
  function(_super) {
    __extends17(Step2, _super);
    function Step2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate17([
      Property("")
    ], Step2.prototype, "cssClass", void 0);
    __decorate17([
      Property(false)
    ], Step2.prototype, "disabled", void 0);
    __decorate17([
      Property("")
    ], Step2.prototype, "iconCss", void 0);
    __decorate17([
      Property(null)
    ], Step2.prototype, "isValid", void 0);
    __decorate17([
      Property("")
    ], Step2.prototype, "label", void 0);
    __decorate17([
      Property(false)
    ], Step2.prototype, "optional", void 0);
    __decorate17([
      Property(StepStatus.NotStarted)
    ], Step2.prototype, "status", void 0);
    __decorate17([
      Property("")
    ], Step2.prototype, "text", void 0);
    return Step2;
  }(ChildProperty)
);
var StepperOrientation;
(function(StepperOrientation2) {
  StepperOrientation2["Horizontal"] = "Horizontal";
  StepperOrientation2["Vertical"] = "Vertical";
})(StepperOrientation || (StepperOrientation = {}));
var StepperBase = (
  /** @class */
  function(_super) {
    __extends17(StepperBase2, _super);
    function StepperBase2(options, element) {
      return _super.call(this, options, element) || this;
    }
    StepperBase2.prototype.preRender = function() {
    };
    StepperBase2.prototype.getModuleName = function() {
      return "stepperBase";
    };
    StepperBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    StepperBase2.prototype.render = function() {
    };
    StepperBase2.prototype.updateOrientaion = function(wrapper) {
      if (wrapper.classList.contains("e-horizontal") || wrapper.classList.contains("e-vertical")) {
        wrapper.classList.remove("e-horizontal", "e-vertical");
      }
      if (!isNullOrUndefined(this.orientation)) {
        wrapper.classList.add("e-" + this.orientation.toLocaleLowerCase());
      }
    };
    StepperBase2.prototype.renderProgressBar = function(wrapper) {
      this.progressStep = this.createElement("div", { className: "e-stepper-progressbar" });
      this.progressbar = this.createElement("div", { className: "e-progressbar-value" });
      this.progressStep.appendChild(this.progressbar);
      wrapper.prepend(this.progressStep);
      this.progressbar.style.setProperty(PROGRESSVALUE, "0%");
      var beforeLabel = wrapper.querySelector("li").querySelector(".e-step-label-container");
      if (wrapper.classList.contains("e-vertical")) {
        if (wrapper.classList.contains("e-label-bottom") || wrapper.classList.contains("e-label-top")) {
          var stepsContainer = wrapper.querySelector(".e-stepper-steps");
          this.progressStep.style.setProperty("--progress-position", stepsContainer.offsetWidth / 2 + "px");
        } else {
          this.progressStep.style.setProperty("--progress-position", this.progressBarPosition / 2 - 1 + "px");
        }
      }
      if (beforeLabel && beforeLabel.classList.contains("e-label-before")) {
        this.progressStep.style.setProperty("--progress-position", this.progressBarPosition - 1 + 5 + "px");
      }
      if (wrapper.classList.contains("e-horizontal")) {
        this.setProgressPosition(wrapper);
      }
    };
    StepperBase2.prototype.setProgressPosition = function(wrapper, isResize) {
      var stepItemContainer = wrapper.querySelector(".e-step-container");
      var stepItemEle = stepItemContainer.firstElementChild;
      if (isResize !== true) {
        var topPos = 0;
        if (wrapper.classList.contains("e-label-before")) {
          topPos = stepItemContainer.offsetParent.offsetHeight - stepItemEle.offsetHeight / 2 - 1;
        } else {
          topPos = stepItemEle.offsetHeight / 2;
        }
        this.progressStep.style.setProperty("--progress-top-position", topPos + "px");
      }
      var lastEle = wrapper.querySelector(".e-stepper-steps").lastChild.firstChild;
      if (wrapper.classList.contains("e-rtl")) {
        var leftPost = stepItemEle.offsetLeft + stepItemEle.offsetWidth - wrapper.querySelector(".e-stepper-steps").offsetWidth;
        this.progressStep.style.setProperty("--progress-left-position", Math.abs(leftPost) + "px");
        this.progressStep.style.setProperty("--progress-bar-width", Math.abs(lastEle.offsetLeft - stepItemEle.offsetLeft) + "px");
      } else {
        this.progressStep.style.setProperty("--progress-left-position", stepItemEle.offsetLeft + 1 + "px");
        this.progressStep.style.setProperty("--progress-bar-width", lastEle.offsetWidth + lastEle.offsetLeft - 2 - (stepItemEle.offsetLeft + 2) + "px");
      }
    };
    StepperBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    __decorate17([
      Collection([], Step)
    ], StepperBase2.prototype, "steps", void 0);
    __decorate17([
      Property("")
    ], StepperBase2.prototype, "cssClass", void 0);
    __decorate17([
      Property(false)
    ], StepperBase2.prototype, "readOnly", void 0);
    __decorate17([
      Property(StepperOrientation.Horizontal)
    ], StepperBase2.prototype, "orientation", void 0);
    __decorate17([
      Event()
    ], StepperBase2.prototype, "created", void 0);
    StepperBase2 = __decorate17([
      NotifyPropertyChanges
    ], StepperBase2);
    return StepperBase2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper/stepper.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ITEMCONTAINER = "e-step-container";
var ITEMLIST = "e-stepper-steps";
var ICONCSS = "e-indicator";
var TEXTCSS = "e-step-text-container";
var STEPLABEL = "e-step-label-container";
var OPTIONAL = "e-step-label-optional";
var SELECTED3 = "e-step-selected";
var INPROGRESS = "e-step-inprogress";
var NOTSTARTED = "e-step-notstarted";
var FOCUS2 = "e-step-focus";
var COMPLETED = "e-step-completed";
var DISABLED3 = "e-step-disabled";
var READONLY = "e-stepper-readonly";
var PROGRESSVALUE2 = "--progress-value";
var RTL4 = "e-rtl";
var TEMPLATE = "e-step-template";
var LABELAFTER = "e-label-after";
var LABELBEFORE = "e-label-before";
var VERTICALSTEP = "e-vertical";
var HORIZSTEP = "e-horizontal";
var STEPICON = "e-step-item";
var STEPTEXT = "e-step-text";
var TEXT = "e-text";
var STEPSLABEL = "e-step-label";
var LABEL = "e-label";
var STEPINDICATOR = "e-step-type-indicator";
var LABELINDICATOR = "e-step-type-label";
var INDICATORICON = "e-step-indicator";
var STEPPERTOOLTIP = "e-stepper-tooltip";
var STEPPERIPROGRESSTIP = "e-step-inprogress-tip";
var LINEARSTEP = "e-linear";
var PREVSTEP = "e-previous";
var NEXTSTEP = "e-next";
var StepperAnimationSettings = (
  /** @class */
  function(_super) {
    __extends18(StepperAnimationSettings2, _super);
    function StepperAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([
      Property(true)
    ], StepperAnimationSettings2.prototype, "enable", void 0);
    __decorate18([
      Property(2e3)
    ], StepperAnimationSettings2.prototype, "duration", void 0);
    __decorate18([
      Property(0)
    ], StepperAnimationSettings2.prototype, "delay", void 0);
    return StepperAnimationSettings2;
  }(ChildProperty)
);
var StepLabelPosition;
(function(StepLabelPosition2) {
  StepLabelPosition2["Top"] = "Top";
  StepLabelPosition2["Bottom"] = "Bottom";
  StepLabelPosition2["Start"] = "Start";
  StepLabelPosition2["End"] = "End";
})(StepLabelPosition || (StepLabelPosition = {}));
var StepType;
(function(StepType2) {
  StepType2["Default"] = "Default";
  StepType2["Label"] = "Label";
  StepType2["Indicator"] = "Indicator";
})(StepType || (StepType = {}));
var Stepper = (
  /** @class */
  function(_super) {
    __extends18(Stepper2, _super);
    function Stepper2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.stepperItemElements = [];
      return _this;
    }
    Stepper2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      var localeText = { optional: "Optional" };
      this.l10n = new L10n("stepper", localeText, this.locale);
      this.keyConfigs = {
        downarrow: "downarrow",
        leftarrow: "leftarrow",
        rightarrow: "rightarrow",
        uparrow: "uparrow",
        space: "space",
        enter: "enter",
        home: "home",
        end: "end",
        tab: "tab",
        shiftTab: "shift+tab",
        escape: "escape"
      };
      this.tooltipOpen = false;
    };
    Stepper2.prototype.getModuleName = function() {
      return "stepper";
    };
    Stepper2.prototype.render = function() {
      this.initialize();
      this.navigationHandler(this.activeStep, null, false);
      this.updateStepperStatus(true);
    };
    Stepper2.prototype.initialize = function() {
      var _this = this;
      this.element.setAttribute("aria-label", this.element.id);
      this.updatePosition();
      this.stepperItemList = this.createElement("ol", { className: ITEMLIST });
      this.updateOrientaion(this.element);
      this.updateStepType();
      this.element.appendChild(this.stepperItemList);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.trim().split(" "));
      }
      if (this.readOnly) {
        this.element.classList.add(READONLY);
      }
      if (this.enableRtl) {
        this.element.classList.add(RTL4);
      }
      this.wireEvents();
      this.updateTemplateFunction();
      this.renderItems();
      if (this.steps.length > 0) {
        if (this.steps.length > 1) {
          if (this.isAngular && this.template) {
            setTimeout(function() {
              _this.renderProgressBar(_this.element);
            });
          } else {
            this.renderProgressBar(this.element);
          }
        }
        this.checkValidStep();
        this.updateAnimation();
        this.updateTooltip();
        this.wireKeyboardEvent();
      }
    };
    Stepper2.prototype.updatePosition = function() {
      this.progressBarPosition = this.beforeLabelWidth = this.textEleWidth = 0;
    };
    Stepper2.prototype.renderDefault = function(index) {
      return !this.steps[parseInt(index.toString(), 10)].iconCss && !this.steps[parseInt(index.toString(), 10)].text && !this.steps[parseInt(index.toString(), 10)].label ? true : false;
    };
    Stepper2.prototype.updateAnimation = function() {
      var progressEle = this.element.querySelector(".e-progressbar-value");
      if (this.animation.enable) {
        if (this.animation.duration >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--duration", this.animation.duration + "ms");
          }
        }
        if (this.animation.delay >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--delay", this.animation.delay + "ms");
          }
        }
      } else {
        if (progressEle) {
          progressEle.style.setProperty("--delay", "0ms");
          progressEle.style.setProperty("--duration", "0ms");
        }
      }
    };
    Stepper2.prototype.updateStepType = function() {
      if (!isNullOrUndefined(this.stepType) && (this.stepType.toLowerCase() === "indicator" || this.stepType.toLowerCase() === "label" || this.stepType.toLowerCase() === "default")) {
        if (this.stepType.toLowerCase() !== "default") {
          this.element.classList.add("e-step-type-" + this.stepType.toLowerCase());
        }
        if ((this.stepType.toLowerCase() === "indicator" || "label") && this.labelContainer) {
          this.clearLabelPosition();
        }
      }
    };
    Stepper2.prototype.wireEvents = function() {
      var _this = this;
      EventHandler.add(window, "resize", function() {
        if (_this.stepperItemList && _this.progressbar && _this.element.classList.contains(HORIZSTEP)) {
          _this.setProgressPosition(_this.element, true);
        }
      }, this);
      EventHandler.add(window, "click", function() {
        _this.updateStepFocus();
      }, this);
    };
    Stepper2.prototype.updateStepFocus = function() {
      if (this.isKeyNavFocus) {
        this.isKeyNavFocus = false;
        var isFocus = this.element.querySelector("." + FOCUS2);
        if (isFocus) {
          isFocus.classList.remove(FOCUS2);
          this.element.classList.remove("e-steps-focus");
        }
      }
    };
    Stepper2.prototype.updateStepperStatus = function(isInitial) {
      for (var index = 0; index < this.steps.length; index++) {
        var item = this.steps[parseInt(index.toString(), 10)];
        var status_1 = item.status.toLowerCase();
        if (isInitial && this.activeStep === 0 && index === 0) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          item.status = StepStatus.InProgress;
          this.isProtectedOnChange = prevOnChange;
        }
        if (item && status_1 !== "notstarted" && index === this.activeStep) {
          for (var i = 0; i < this.steps.length; i++) {
            var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
            itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED, NOTSTARTED);
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            if (status_1 === "completed") {
              this.updateStatusClass(i, index, itemElement);
            } else {
              this.updateStatusClass(i, index, itemElement, true);
            }
            this.isProtectedOnChange = prevOnChange;
          }
        } else if (item && status_1 !== "notstarted" && index !== this.activeStep) {
          this.navigationHandler(this.activeStep, null, true);
        }
      }
    };
    Stepper2.prototype.updateStatusClass = function(currentStep, index, ele, isInprogress) {
      var stepItem = this.steps[parseInt(currentStep.toString(), 10)];
      if (currentStep < index) {
        ele.classList.add(COMPLETED);
        stepItem.status = StepStatus.Completed;
      } else if (currentStep === index) {
        ele.classList.add(isInprogress ? INPROGRESS : COMPLETED, SELECTED3);
      } else {
        ele.classList.add(NOTSTARTED);
      }
    };
    Stepper2.prototype.renderItems = function() {
      var _this = this;
      for (var index = 0; index < this.steps.length; index++) {
        this.stepperItemContainer = this.createElement("li", { className: ITEMCONTAINER });
        this.stepperItemContainer.classList[index === 0 ? "add" : "remove"](SELECTED3, INPROGRESS);
        this.stepperItemContainer.classList[index !== 0 ? "add" : "remove"](NOTSTARTED);
        if (this.element.classList.contains(HORIZSTEP)) {
          this.stepperItemContainer.style.setProperty("--max-width", 100 / this.steps.length + "%");
        }
        var stepSpan = this.createElement("span", { className: "e-step" });
        var item = this.steps[parseInt(index.toString(), 10)];
        if (this.renderDefault(index) && (isNullOrUndefined(this.template) || this.template === "")) {
          var isIndicator = !this.element.classList.contains("e-step-type-default") && this.stepType.toLowerCase() === "indicator" ? true : false;
          if (isIndicator) {
            stepSpan.classList.add("e-icons", INDICATORICON);
          }
          if (!isIndicator && item.isValid == null) {
            stepSpan.classList.add("e-step-content");
            stepSpan.innerHTML = (index + 1).toString();
          }
          this.stepperItemContainer.appendChild(stepSpan);
        } else if (isNullOrUndefined(this.template) || this.template === "") {
          var isRender = true;
          if ((item.iconCss || !item.iconCss && item.text && item.label) && (!item.text && !item.label || !this.element.classList.contains(LABELINDICATOR))) {
            if (item.iconCss) {
              var itemIcon = item.iconCss.trim().split(" ");
              stepSpan.classList.add(ICONCSS);
              for (var i = 0; i < itemIcon.length; i++) {
                stepSpan.classList.add(itemIcon[parseInt(i.toString(), 10)]);
              }
              this.stepperItemContainer.classList.add(STEPICON);
            } else if (!item.iconCss && item.text && item.label) {
              stepSpan.classList.add(ICONCSS);
              stepSpan.innerHTML = item.text;
              this.stepperItemContainer.classList.add(STEPICON);
            }
            this.stepperItemContainer.appendChild(stepSpan);
            if (this.element.classList.contains(HORIZSTEP) && (this.labelPosition.toLowerCase() === "start" || this.labelPosition.toLowerCase() === "end") && item.label || this.element.classList.contains(VERTICALSTEP) && (this.labelPosition.toLowerCase() === "top" || this.labelPosition.toLowerCase() === "bottom") && item.label) {
              this.element.classList.add("e-label-" + this.labelPosition.toLowerCase());
              var textSpan = this.createElement("span", { className: TEXTCSS + " " + TEXT });
              textSpan.innerText = item.label;
              this.stepperItemContainer.appendChild(textSpan);
              this.stepperItemContainer.classList.add(STEPTEXT);
              isRender = false;
            }
          }
          if (item.text && (!item.iconCss || !this.element.classList.contains(STEPINDICATOR)) && isRender && !(item.iconCss && item.label)) {
            if (!item.iconCss && this.element.classList.contains(STEPINDICATOR) || (!item.iconCss || this.element.classList.contains(LABELINDICATOR)) && !item.label) {
              if (!item.iconCss && !item.label) {
                this.element.classList.add("e-step-type-indicator");
              }
              this.checkValidState(item, stepSpan);
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              item.label = null;
              this.isProtectedOnChange = prevOnChange;
            } else {
              var textSpan = this.createElement("span", { className: TEXT });
              if (!item.label) {
                textSpan.innerText = item.text;
                textSpan.classList.add(TEXTCSS);
                this.stepperItemContainer.appendChild(textSpan);
                this.stepperItemContainer.classList.add(STEPTEXT);
              }
              if (item.label && this.element.classList.contains(LABELINDICATOR)) {
                textSpan.innerText = item.label;
              }
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              item.text = item.label ? null : item.text;
              this.isProtectedOnChange = prevOnChange;
            }
          }
          if (item.label && (!item.iconCss || !this.element.classList.contains(STEPINDICATOR)) && isRender) {
            if (!item.iconCss && !item.text && this.element.classList.contains(STEPINDICATOR)) {
              this.checkValidState(item, stepSpan, true);
            } else if (!(this.element.classList.contains(LABELINDICATOR) && item.text) || this.element.classList.contains(LABELINDICATOR) && item.label) {
              this.labelContainer = this.createElement("span", { className: STEPLABEL });
              var labelSpan = this.createElement("span", { className: LABEL });
              labelSpan.innerText = item.label;
              this.labelContainer.appendChild(labelSpan);
              this.stepperItemContainer.classList.add(STEPSLABEL);
              this.updateLabelPosition();
              if (!item.iconCss && !item.text && !this.stepperItemContainer.classList.contains(STEPICON) || this.element.classList.contains(LABELINDICATOR)) {
                this.stepperItemContainer.classList.add("e-step-label-only");
                if (item.isValid !== null) {
                  var iconSpan = this.createElement("span", { className: "e-step-validation-icon e-icons" });
                  this.labelContainer.appendChild(iconSpan);
                }
              }
            }
          }
        }
        if (item.optional) {
          var optionalSpan = this.createElement("span", { className: OPTIONAL });
          this.l10n.setLocale(this.locale);
          var optionalContent = this.l10n.getConstant("optional");
          optionalSpan.innerText = optionalContent;
          if (item.label && (this.labelContainer && (this.element.classList.contains(LABELAFTER) && !this.stepperItemContainer.classList.contains("e-step-label-only") || this.element.classList.contains(HORIZSTEP) && this.element.classList.contains(LABELBEFORE) && !this.stepperItemContainer.classList.contains("e-step-label-only"))) || this.element.classList.contains(VERTICALSTEP) && this.element.classList.contains(LABELBEFORE)) {
            this.labelContainer.appendChild(optionalSpan);
          } else {
            this.stepperItemContainer.appendChild(optionalSpan);
          }
          if (item.isValid !== null) {
            this.stepperItemContainer.classList.add(item.isValid ? "e-step-valid" : "e-step-error");
          }
        }
        if (item.cssClass) {
          addClass([this.stepperItemContainer], item.cssClass.trim().split(" "));
        }
        if (item.disabled) {
          this.stepperItemContainer.classList[item.disabled ? "add" : "remove"](DISABLED3);
          attributes(this.stepperItemContainer, { "tabindex": "-1", "aria-disabled": "true" });
        }
        if (item.isValid !== null) {
          if (item.isValid) {
            this.stepperItemContainer.classList.add("e-step-valid");
          } else {
            this.stepperItemContainer.classList.add("e-step-error");
          }
        }
        this.renderItemContent(index, false);
        if (this.stepperItemContainer.classList.contains(INPROGRESS)) {
          attributes(this.stepperItemContainer, { "tabindex": "0", "aria-current": "true" });
        } else {
          attributes(this.stepperItemContainer, { "tabindex": "-1" });
        }
        this.wireItemsEvents(this.stepperItemContainer, index);
        this.stepperItemElements.push(this.stepperItemContainer);
        var eventArgs = { element: this.stepperItemContainer, index };
        this.trigger("beforeStepRender", eventArgs, function(args) {
          _this.stepperItemList.appendChild(args.element);
        });
        if (this.isAngular && this.template) {
          setTimeout(function() {
            _this.calculateProgressBarPosition();
          });
        } else {
          this.calculateProgressBarPosition();
        }
      }
      if (this.element.classList.contains(VERTICALSTEP)) {
        if (this.element.classList.contains(LABELBEFORE)) {
          var listItems = this.stepperItemList.querySelectorAll("." + LABEL);
          for (var i = 0; i < listItems.length; i++) {
            var labelEle = listItems[parseInt(i.toString(), 10)];
            labelEle.style.setProperty("--label-width", this.beforeLabelWidth + 5 + "px");
          }
        }
      }
    };
    Stepper2.prototype.calculateProgressBarPosition = function() {
      var isBeforeLabel = this.element.classList.contains(LABELBEFORE) ? true : false;
      var isStepVertical = this.element.classList.contains(VERTICALSTEP) ? true : false;
      if (isStepVertical) {
        var iconOnly = this.stepperItemContainer.classList.contains(STEPICON) && !this.stepperItemContainer.classList.contains(STEPTEXT) && !this.stepperItemContainer.classList.contains(STEPSLABEL) ? true : false;
        var textEle = this.stepperItemContainer.querySelector("." + TEXTCSS);
        if (textEle) {
          this.textEleWidth = this.textEleWidth < textEle.offsetWidth ? textEle.offsetWidth : this.textEleWidth;
        }
        if (isBeforeLabel) {
          var itemWidth = void 0;
          var labelWidth = this.stepperItemContainer.querySelector("." + LABEL).offsetWidth + 15;
          if (this.beforeLabelWidth < labelWidth) {
            this.beforeLabelWidth = labelWidth;
          }
          if (this.element.querySelector("ol").lastChild.querySelector("." + ICONCSS)) {
            itemWidth = this.beforeLabelWidth + this.stepperItemContainer.querySelector("." + ICONCSS).offsetWidth / 2;
          } else if (this.stepperItemContainer.querySelector("." + TEXTCSS)) {
            itemWidth = this.beforeLabelWidth + this.stepperItemContainer.querySelector("." + TEXTCSS).offsetWidth / 2;
          }
          if (this.progressBarPosition < itemWidth) {
            this.progressBarPosition = itemWidth;
          }
        } else if (this.progressBarPosition < (iconOnly ? this.stepperItemContainer.offsetWidth : this.element.querySelector("ol").lastChild.firstChild.offsetWidth)) {
          this.progressBarPosition = iconOnly ? this.stepperItemContainer.offsetWidth : this.element.querySelector("ol").lastChild.firstChild.offsetWidth;
        }
      }
    };
    Stepper2.prototype.checkValidState = function(item, stepSpan, isLabel) {
      if (item.isValid == null) {
        stepSpan.classList.add("e-step-content");
        if (isLabel) {
          stepSpan.innerHTML = item.label;
        } else {
          stepSpan.innerHTML = item.label ? item.label : item.text;
        }
        this.stepperItemContainer.appendChild(stepSpan);
      } else {
        stepSpan.classList.add(ICONCSS);
        this.stepperItemContainer.appendChild(stepSpan);
        this.stepperItemContainer.classList.add(STEPICON);
      }
    };
    Stepper2.prototype.updateCurrentLabel = function() {
      var currentLabelPos;
      if (this.element.classList.contains(HORIZSTEP)) {
        currentLabelPos = this.labelPosition.toLowerCase() === "top" ? "before" : this.labelPosition.toLowerCase() === "bottom" ? "after" : this.labelPosition.toLowerCase();
      } else {
        currentLabelPos = this.labelPosition.toLowerCase() === "start" ? "before" : this.labelPosition.toLowerCase() === "end" ? "after" : this.labelPosition.toLowerCase();
      }
      return currentLabelPos;
    };
    Stepper2.prototype.updateLabelPosition = function() {
      this.clearLabelPosition();
      this.labelContainer.classList.add("e-label-" + this.updateCurrentLabel());
      if (this.labelPosition.toLowerCase() === "start" && this.orientation.toLowerCase() === "vertical") {
        if (this.stepperItemContainer.firstChild) {
          this.stepperItemContainer.firstChild.before(this.labelContainer);
        } else {
          this.stepperItemContainer.appendChild(this.labelContainer);
        }
      } else {
        this.stepperItemContainer.appendChild(this.labelContainer);
      }
      this.element.classList.add("e-label-" + this.updateCurrentLabel());
    };
    Stepper2.prototype.clearLabelPosition = function() {
      var removeCss = this.labelContainer.classList.value.match(/(e-label-[after|before]+)/g);
      if (removeCss) {
        removeClass([this.labelContainer], removeCss);
        removeClass([this.element], removeCss);
      }
    };
    Stepper2.prototype.checkValidStep = function() {
      for (var index = 0; index < this.steps.length; index++) {
        var item = this.steps[parseInt(index.toString(), 10)];
        var itemElement = this.stepperItemElements[parseInt(index.toString(), 10)];
        if (item.isValid !== null) {
          var indicatorEle = void 0;
          var iconEle = void 0;
          if (this.element.classList.contains(STEPINDICATOR) && !item.iconCss) {
            indicatorEle = itemElement.querySelector("." + ICONCSS);
          } else {
            iconEle = itemElement.querySelector("." + ICONCSS);
          }
          if (!indicatorEle && this.element.classList.contains(STEPINDICATOR) && this.renderDefault(index)) {
            indicatorEle = itemElement.querySelector("." + INDICATORICON);
          }
          var textLabelIcon = itemElement.querySelector(".e-step-validation-icon");
          var itemIcon = item.iconCss.trim().split(" ");
          var validStep = itemElement.classList.contains("e-step-valid");
          if (indicatorEle) {
            indicatorEle.classList.remove(INDICATORICON);
            if (indicatorEle.innerHTML !== "") {
              indicatorEle.innerHTML = "";
            }
            indicatorEle.classList.add("e-icons", validStep ? "e-check" : "e-circle-info", ICONCSS);
          }
          if (this.renderDefault(index) && !this.element.classList.contains(STEPINDICATOR)) {
            var stepSpan = itemElement.querySelector(".e-step");
            stepSpan.classList.add("e-icons", validStep ? "e-check" : "e-circle-info", ICONCSS);
          }
          if (iconEle) {
            if (iconEle.innerHTML !== "") {
              iconEle.innerHTML = "";
            } else if (itemIcon.length > 0) {
              for (var i = 0; i < itemIcon.length; i++) {
                iconEle.classList.remove(itemIcon[parseInt(i.toString(), 10)]);
              }
            }
            iconEle.classList.add("e-icons", validStep ? "e-check" : "e-circle-info");
          }
          if (textLabelIcon) {
            textLabelIcon.classList.add(validStep ? "e-circle-check" : "e-circle-info");
            if (this.element.classList.contains(VERTICALSTEP)) {
              var labelEle = itemElement.querySelector("." + LABEL);
              var textEle = itemElement.querySelector("." + TEXT);
              var itemWidth = textEle ? textEle.offsetWidth + textEle.getBoundingClientRect().left : labelEle.offsetWidth + labelEle.getBoundingClientRect().left;
              var validationIcon = itemElement.querySelector(".e-step-validation-icon");
              validationIcon.style.setProperty("--icon-position", itemWidth + 20 + "px");
            }
          }
        }
      }
    };
    Stepper2.prototype.updateTooltip = function() {
      if (this.showTooltip) {
        this.tooltipObj = new Tooltip({
          target: ".e-step-container",
          windowCollision: true,
          opensOn: "Custom",
          cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP,
          position: "TopCenter"
        });
        this.tooltipObj.appendTo(this.stepperItemList);
      } else {
        if (!isNullOrUndefined(this.tooltipObj)) {
          this.tooltipObj.destroy();
          this.tooltipObj = null;
        }
      }
    };
    Stepper2.prototype.wireItemsEvents = function(itemElement, index) {
      var _this = this;
      EventHandler.add(itemElement, "click", function(e) {
        if (_this.linear) {
          var linearModeValue = index - _this.activeStep;
          if (Math.abs(linearModeValue) === 1) {
            _this.stepClickHandler(index, e, itemElement);
          }
        } else {
          _this.stepClickHandler(index, e, itemElement);
        }
      }, this);
      EventHandler.add(itemElement, "mouseover", function() {
        return _this.openStepperTooltip(index);
      }, this);
      EventHandler.add(itemElement, "mouseleave", function() {
        return _this.closeStepperTooltip();
      }, this);
    };
    Stepper2.prototype.openStepperTooltip = function(index) {
      var currentStep = this.steps[parseInt(index.toString(), 10)];
      if (this.showTooltip && (currentStep.label || currentStep.text)) {
        if (!this.tooltipOpen) {
          this.updateTooltipContent(index);
          this.tooltipObj.open(this.stepperItemElements[parseInt(index.toString(), 10)]);
          if (this.stepType.toLocaleLowerCase() !== "label" && (this.stepType.toLocaleLowerCase() === "indicator" || currentStep.label !== "" && currentStep.iconCss !== "" || currentStep.label === null && currentStep.iconCss === "" && currentStep.text !== "")) {
            var tooltipPopupClass = currentStep.status.toLowerCase() === "inprogress" ? STEPPERTOOLTIP + " " + STEPPERIPROGRESSTIP + " " + (this.cssClass ? this.cssClass : "") : STEPPERTOOLTIP + " " + (this.cssClass ? this.cssClass : "");
            this.tooltipObj.setProperties({ cssClass: tooltipPopupClass.trim() });
          }
          this.tooltipOpen = true;
        }
      }
    };
    Stepper2.prototype.closeStepperTooltip = function() {
      if (this.tooltipOpen) {
        this.tooltipObj.close();
        this.tooltipOpen = false;
      }
    };
    Stepper2.prototype.updateTooltipContent = function(index) {
      if (this.showTooltip) {
        if (this.isReact) {
          this.clearTemplate(["stepperTooltipTemplate"]);
        }
        var content = void 0;
        var currentStep = this.steps[parseInt(index.toString(), 10)];
        if (this.tooltipTemplate) {
          content = this.createElement("span", { className: "e-stepper-tooltip-content" });
          var templateFunction = this.getTemplateFunction(this.tooltipTemplate);
          append(templateFunction({ value: currentStep }, this, "stepperTooltipTemplate", this.element.id + "tooltipTemplate", this.isStringTemplate), content);
          this.tooltipObj.setProperties({ content }, true);
        } else {
          var content_1 = currentStep.label ? currentStep.label : currentStep.text;
          this.tooltipObj.setProperties({ content: initializeCSPTemplate(function() {
            return content_1;
          }) }, true);
        }
        this.renderReactTemplates();
      }
    };
    Stepper2.prototype.stepClickHandler = function(index, e, itemElement) {
      var clickEventArgs = {
        element: itemElement,
        event: e,
        previousStep: this.activeStep,
        activeStep: index
      };
      this.trigger("stepClick", clickEventArgs);
      this.navigateToStep(index, e, itemElement, true);
    };
    Stepper2.prototype.updateTemplateFunction = function() {
      this.templateFunction = this.template ? this.getTemplateFunction(this.template) : null;
    };
    Stepper2.prototype.renderItemContent = function(index, isrerender) {
      var listItems = this.stepperItemList.querySelectorAll("li");
      if (isrerender) {
        this.removeItemContent(listItems[parseInt(index.toString(), 10)]);
      }
      if (this.template) {
        if (isrerender) {
          listItems[parseInt(index.toString(), 10)].classList.add(TEMPLATE);
        } else {
          this.stepperItemContainer.classList.add(TEMPLATE);
        }
        var item = this.steps[parseInt(index.toString(), 10)];
        append(this.templateFunction({ step: item, currentStep: index }, this, "stepperTemplate", this.element.id + "_stepperTemplate", this.isStringTemplate), isrerender ? listItems[parseInt(index.toString(), 10)] : this.stepperItemContainer);
      }
      this.renderReactTemplates();
    };
    Stepper2.prototype.removeItemContent = function(ele) {
      ele.classList.remove(TEMPLATE);
      var firstChild = ele.firstElementChild;
      for (var i = 0; i < ele.childElementCount; i++) {
        firstChild.remove();
      }
    };
    Stepper2.prototype.updateContent = function() {
      if (this.isReact) {
        this.clearTemplate(["stepperTemplate"]);
      }
      for (var i = 0; i < this.steps.length; i++) {
        this.renderItemContent(i, true);
      }
    };
    Stepper2.prototype.getTemplateFunction = function(template) {
      if (typeof template === "string") {
        var content = "";
        try {
          var tempEle = select(template);
          if (tempEle) {
            content = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
          } else {
            content = template;
          }
        } catch (e) {
          content = template;
        }
        return compile(content);
      } else {
        return compile(template);
      }
    };
    Stepper2.prototype.navigateToStep = function(index, e, itemElement, isInteracted, isUpdated) {
      var _this = this;
      var eventArgs = {
        element: itemElement,
        event: e,
        isInteracted,
        previousStep: this.activeStep,
        activeStep: index,
        cancel: false
      };
      if (isUpdated !== false) {
        var previousStep_1 = this.activeStep;
        this.trigger("stepChanging", eventArgs, function(args) {
          if (args.cancel) {
            return;
          }
          _this.navigationHandler(index);
          var eventArgs2 = {
            element: itemElement,
            event: e,
            isInteracted,
            previousStep: previousStep_1,
            activeStep: _this.activeStep
          };
          _this.trigger("stepChanged", eventArgs2);
        });
      } else {
        this.navigationHandler(index);
      }
    };
    Stepper2.prototype.navigationHandler = function(index, stepStatus, isUpdated) {
      index = index >= this.steps.length - 1 ? this.steps.length - 1 : index;
      var Itemslength = this.stepperItemElements.length;
      if (index >= 0 && index < Itemslength - 1) {
        index = this.stepperItemElements[parseInt(index.toString(), 10)].classList.contains(DISABLED3) ? this.activeStep : index;
      }
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.activeStep = parseInt(index.toString(), 10);
      this.isProtectedOnChange = prevOnChange;
      for (var i = 0; i < this.steps.length; i++) {
        var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
        var item = this.steps[parseInt(i.toString(), 10)];
        itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED, NOTSTARTED);
        if (i === this.activeStep) {
          itemElement.classList.add(SELECTED3);
        }
        if (this.activeStep >= 0 && this.progressbar) {
          if (this.element.classList.contains(HORIZSTEP)) {
            if ((this.element.classList.contains(LABELBEFORE) || this.element.classList.contains(LABELAFTER)) && !this.element.classList.contains(STEPINDICATOR) && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(STEPICON)) {
              var progressPos = this.element.querySelector(".e-stepper-progressbar");
              var selectedEle = this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].firstChild;
              var value = this.activeStep === 0 ? 0 : (selectedEle.offsetLeft - progressPos.offsetLeft + selectedEle.offsetWidth / 2) / progressPos.offsetWidth * 100;
              if (this.element.classList.contains(RTL4)) {
                value = (progressPos.getBoundingClientRect().right - selectedEle.getBoundingClientRect().right + selectedEle.offsetWidth / 2) / progressPos.offsetWidth * 100;
                this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
              } else {
                this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
              }
            } else {
              var totalLiWidth = 0;
              var activeLiWidth = 0;
              for (var j = 0; j < this.stepperItemElements.length; j++) {
                totalLiWidth = totalLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth;
                if (j <= this.activeStep) {
                  if (j < this.activeStep) {
                    activeLiWidth = activeLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth;
                  } else if (j === this.activeStep && j !== 0) {
                    activeLiWidth = activeLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth / 2;
                  }
                }
              }
              var spaceWidth = (this.stepperItemList.offsetWidth - totalLiWidth) / (this.stepperItemElements.length - 1);
              var progressValue = (activeLiWidth + spaceWidth * this.activeStep) / this.stepperItemList.offsetWidth * 100;
              this.progressbar.style.setProperty(PROGRESSVALUE2, progressValue + "%");
            }
          } else {
            this.progressbar.style.setProperty(PROGRESSVALUE2, 100 / (this.steps.length - 1) * index + "%");
          }
        } else if (this.activeStep < 0 && this.progressbar) {
          this.progressbar.style.setProperty(PROGRESSVALUE2, "0%");
        }
        if (i === this.activeStep) {
          itemElement.classList.add(INPROGRESS);
        } else if (this.activeStep > 0 && i < this.activeStep) {
          itemElement.classList.add(COMPLETED);
        } else {
          itemElement.classList.add(NOTSTARTED);
        }
        if (itemElement.classList.contains(INPROGRESS)) {
          attributes(itemElement, { "tabindex": "0", "aria-current": "true" });
        } else {
          attributes(itemElement, { "tabindex": "-1", "aria-current": "false" });
        }
        var prevOnChange_1 = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        if (isUpdated !== false) {
          if (i < this.activeStep || this.steps.length - 1 === this.activeStep && item.status.toLowerCase() === "completed") {
            item.status = StepStatus.Completed;
          } else if (i === this.activeStep) {
            item.status = StepStatus.InProgress;
          } else if (i > this.activeStep) {
            item.status = StepStatus.NotStarted;
          }
          if (stepStatus && this.activeStep === i) {
            item.status = stepStatus;
          }
          if (item.status.toLowerCase() === "completed") {
            itemElement.classList.remove(SELECTED3, INPROGRESS, NOTSTARTED);
            itemElement.classList.add(COMPLETED);
          }
          if (item.status.toLowerCase() === "notstarted") {
            itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED);
            itemElement.classList.add(NOTSTARTED);
          }
        }
        this.isProtectedOnChange = prevOnChange_1;
        if (this.renderDefault(i) && this.element.classList.contains(STEPINDICATOR) && !itemElement.classList.contains("e-step-valid") && !itemElement.classList.contains("e-step-error")) {
          if (itemElement.classList.contains(COMPLETED)) {
            itemElement.firstChild.classList.remove("e-icons", "e-step-indicator");
            itemElement.firstChild.classList.add(ICONCSS, "e-icons", "e-check");
          } else if (itemElement.classList.contains(INPROGRESS) || itemElement.classList.contains(NOTSTARTED)) {
            itemElement.firstChild.classList.remove(ICONCSS, "e-icons", "e-check");
            itemElement.firstChild.classList.add("e-icons", "e-step-indicator");
          }
        }
      }
      this.updateStepInteractions();
    };
    Stepper2.prototype.updateStepInteractions = function() {
      var _this = this;
      this.element.classList.toggle(LINEARSTEP, this.linear);
      this.stepperItemElements.forEach(function(step, index) {
        var isPreviousStep = index === _this.activeStep - 1;
        var isNextStep = index === _this.activeStep + 1;
        step.classList.toggle(PREVSTEP, isPreviousStep);
        step.classList.toggle(NEXTSTEP, isNextStep);
      });
    };
    Stepper2.prototype.removeItemElements = function() {
      for (var i = 0; i < this.stepperItemElements.length; i++) {
        remove(this.stepperItemElements[parseInt(i.toString(), 10)]);
      }
      this.stepperItemElements = [];
    };
    Stepper2.prototype.nextStep = function() {
      if (this.activeStep !== this.steps.length - 1) {
        this.navigateToStep(this.activeStep + 1, null, null, false);
      }
    };
    Stepper2.prototype.previousStep = function() {
      if (this.activeStep > 0) {
        this.navigateToStep(this.activeStep - 1, null, null, false);
      }
    };
    Stepper2.prototype.reset = function() {
      if (this.activeStep === 0) {
        this.updateStepInteractions();
      } else {
        var isDisabled = this.stepperItemElements[0].classList.contains(DISABLED3) ? true : false;
        this.navigateToStep(isDisabled ? -1 : 0, null, null, false);
      }
    };
    Stepper2.prototype.updateElementClassArray = function() {
      var classArray = [
        RTL4,
        READONLY,
        "e-steps-focus",
        LABELAFTER,
        LABELBEFORE,
        "e-label-top",
        "e-label-bottom",
        "e-label-start",
        "e-label-end",
        STEPINDICATOR,
        LABELINDICATOR,
        VERTICALSTEP,
        HORIZSTEP,
        LINEARSTEP
      ];
      removeClass([this.element], classArray);
    };
    Stepper2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      EventHandler.remove(window, "resize", function() {
        if (_this.stepperItemList && _this.progressbar) {
          _this.setProgressPosition(_this.element, true);
        }
      });
      EventHandler.remove(window, "click", function() {
        _this.updateStepFocus();
      });
      this.removeItemElements();
      this.clearTemplate();
      if (this.stepperItemList) {
        remove(this.stepperItemList);
      }
      this.stepperItemList = null;
      if (this.progressStep) {
        remove(this.progressStep);
      }
      this.progressStep = null;
      this.progressbar = null;
      this.progressBarPosition = null;
      this.stepperItemContainer = null;
      this.textContainer = null;
      this.labelContainer = null;
      this.updateElementClassArray();
      this.element.removeAttribute("aria-label");
      if (this.showTooltip) {
        this.tooltipObj.destroy();
        this.tooltipObj = null;
      }
      if (this.keyboardModuleStepper) {
        this.keyboardModuleStepper.destroy();
      }
      this.keyboardModuleStepper = null;
    };
    Stepper2.prototype.wireKeyboardEvent = function() {
      this.keyboardModuleStepper = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    Stepper2.prototype.keyActionHandler = function(e) {
      if (this.readOnly) {
        return;
      }
      switch (e.action) {
        case "uparrow":
        case "downarrow":
        case "leftarrow":
        case "rightarrow":
        case "tab":
        case "shiftTab":
          this.handleNavigation(this.enableRtl && this.element.classList.contains(HORIZSTEP) ? e.action === "leftarrow" || e.action === "tab" || e.action === "uparrow" : e.action === "rightarrow" || e.action === "tab" || e.action === "downarrow", e);
          break;
        case "space":
        case "enter":
        case "escape":
          this.handleNavigation(null, e);
          break;
        case "home":
        case "end":
          this.handleNavigation(null, e, this.enableRtl);
          break;
      }
    };
    Stepper2.prototype.handleNavigation = function(isNextStep, e, isRTL) {
      this.isKeyNavFocus = true;
      this.element.classList.add("e-steps-focus");
      var focusedEle = this.element.querySelector("." + FOCUS2);
      if (!focusedEle) {
        focusedEle = this.element.querySelector("." + SELECTED3);
      }
      var stepItems = Array.prototype.slice.call(this.stepperItemList.children);
      var index = stepItems.indexOf(focusedEle);
      if (e.action === "tab" || e.action === "shiftTab" || e.action === "downarrow" || e.action === "uparrow" || e.action === "space" || e.action === "home" || e.action === "end") {
        if (e.action === "tab" && index === stepItems.length - 1 || e.action === "shiftTab" && index === 0) {
          if (focusedEle.classList.contains(FOCUS2)) {
            this.updateStepFocus();
            return;
          }
        } else {
          e.preventDefault();
        }
      }
      if (e.action === "escape") {
        stepItems[parseInt(index.toString(), 10)].classList.remove(FOCUS2);
        this.element.classList.remove("e-steps-focus");
      }
      if (!(e.action === "space" || e.action === "enter")) {
        var prevIndex = index;
        index = isNextStep ? index + 1 : index - 1;
        while (index >= 0 && index < stepItems.length && stepItems[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
          index = isNextStep ? index + 1 : index - 1;
        }
        index = index < 0 ? 0 : index > stepItems.length - 1 ? stepItems.length - 1 : index;
        if (stepItems[parseInt(prevIndex.toString(), 10)].classList.contains(FOCUS2)) {
          stepItems[parseInt(prevIndex.toString(), 10)].classList.remove(FOCUS2);
        }
        if (e.action === "home" || e.action === "end") {
          if (e.action === "home") {
            index = isRTL ? stepItems.length - 1 : 0;
          } else {
            index = isRTL ? 0 : stepItems.length - 1;
          }
        }
        if (index >= 0 && index < stepItems.length) {
          stepItems[parseInt(index.toString(), 10)].classList.add(FOCUS2);
        }
      } else if (e.action === "space" || e.action === "enter") {
        var isupdateFocus = false;
        if (this.linear) {
          var linearModeValue = this.activeStep - index;
          if (Math.abs(linearModeValue) === 1) {
            this.navigateToStep(index, null, null, true);
            isupdateFocus = true;
          }
        } else {
          this.navigateToStep(index, null, null, true);
          isupdateFocus = true;
        }
        if (isupdateFocus) {
          this.updateStepFocus();
          this.stepperItemElements[index].focus();
        }
      }
    };
    Stepper2.prototype.renderStepperItems = function(isUpdate, isStepType) {
      this.updateElementClassArray();
      this.removeItemElements();
      this.element.querySelector(".e-stepper-progressbar").remove();
      if (isUpdate) {
        this.updatePosition();
      }
      if (isStepType) {
        this.updateStepType();
      }
      if (this.readOnly && !this.element.classList.contains(READONLY)) {
        this.element.classList.add(READONLY);
      }
      if (this.enableRtl && !this.element.classList.contains(RTL4)) {
        this.element.classList.add(RTL4);
      }
      this.updateOrientaion(this.element);
      this.renderItems();
      this.renderProgressBar(this.element);
      this.checkValidStep();
      this.updateAnimation();
      this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
    };
    Stepper2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "steps": {
            if (!(newProp.steps instanceof Array && oldProp.steps instanceof Array)) {
              var stepCounts = Object.keys(newProp.steps);
              for (var i = 0; i < stepCounts.length; i++) {
                var index = parseInt(Object.keys(newProp.steps)[i], 10);
                var changedPropsCount = Object.keys(newProp.steps[index]).length;
                for (var j = 0; j < changedPropsCount; j++) {
                  var property = Object.keys(newProp.steps[index])[j];
                  if (property === "status") {
                    if (this.activeStep === index) {
                      this.navigationHandler(index, newProp.steps[index].status);
                    } else {
                      this.steps[index].status = oldProp.steps[index].status;
                    }
                  } else {
                    this.removeItemElements();
                    this.renderItems();
                    this.updateStepperStatus();
                  }
                  this.checkValidStep();
                }
              }
            } else {
              this.renderStepperItems(true, true);
            }
            break;
          }
          case "orientation":
            this.updateOrientaion(this.element);
            this.renderStepperItems(true);
            break;
          case "activeStep":
            this.activeStep = newProp.activeStep > this.steps.length - 1 || newProp.activeStep < -1 ? oldProp.activeStep : this.activeStep;
            if (this.activeStep >= 0 && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(DISABLED3)) {
              this.activeStep = oldProp.activeStep;
            }
            if (this.linear) {
              var linearModeValue = oldProp.activeStep - this.activeStep;
              if (Math.abs(linearModeValue) === 1) {
                this.navigateToStep(this.activeStep, null, null, true);
              }
            } else {
              this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
            }
            break;
          case "enableRtl":
            this.element.classList[this.enableRtl ? "add" : "remove"](RTL4);
            break;
          case "readOnly":
            this.element.classList[this.readOnly ? "add" : "remove"](READONLY);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.trim().split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.trim().split(" "));
            }
            if (this.tooltipObj) {
              this.tooltipObj.setProperties({ cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP });
            }
            break;
          case "labelPosition":
            this.renderStepperItems(true);
            break;
          case "showTooltip":
            this.updateTooltip();
            break;
          case "stepType":
            this.renderStepperItems(true, true);
            break;
          case "template":
            this.updateTemplateFunction();
            this.updateContent();
            break;
          case "animation":
            this.updateAnimation();
            break;
          case "linear":
            this.updateStepInteractions();
            break;
        }
      }
    };
    __decorate18([
      Property(0)
    ], Stepper2.prototype, "activeStep", void 0);
    __decorate18([
      Complex({}, StepperAnimationSettings)
    ], Stepper2.prototype, "animation", void 0);
    __decorate18([
      Property(false)
    ], Stepper2.prototype, "linear", void 0);
    __decorate18([
      Property(false)
    ], Stepper2.prototype, "showTooltip", void 0);
    __decorate18([
      Property("")
    ], Stepper2.prototype, "template", void 0);
    __decorate18([
      Property("")
    ], Stepper2.prototype, "tooltipTemplate", void 0);
    __decorate18([
      Property(StepLabelPosition.Bottom)
    ], Stepper2.prototype, "labelPosition", void 0);
    __decorate18([
      Property(StepType.Default)
    ], Stepper2.prototype, "stepType", void 0);
    __decorate18([
      Event()
    ], Stepper2.prototype, "stepChanged", void 0);
    __decorate18([
      Event()
    ], Stepper2.prototype, "stepChanging", void 0);
    __decorate18([
      Event()
    ], Stepper2.prototype, "stepClick", void 0);
    __decorate18([
      Event()
    ], Stepper2.prototype, "beforeStepRender", void 0);
    Stepper2 = __decorate18([
      NotifyPropertyChanges
    ], Stepper2);
    return Stepper2;
  }(StepperBase)
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/calendar.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OTHERMONTH = "e-other-month";
var OTHERDECADE = "e-other-year";
var ROOT3 = "e-calendar";
var DEVICE = "e-device";
var HEADER2 = "e-header";
var RTL5 = "e-rtl";
var CONTENT = "e-content";
var CONTENTTABLE = "e-calendar-content-table";
var YEAR = "e-year";
var MONTH = "e-month";
var DECADE = "e-decade";
var ICON2 = "e-icons";
var PREVICON = "e-prev";
var NEXTICON = "e-next";
var PREVSPAN = "e-date-icon-prev";
var NEXTSPAN = "e-date-icon-next ";
var ICONCONTAINER = "e-icon-container";
var DISABLED4 = "e-disabled";
var OVERLAY = "e-overlay";
var WEEKEND = "e-weekend";
var WEEKNUMBER = "e-week-number";
var SELECTED4 = "e-selected";
var FOCUSEDDATE = "e-focused-date";
var FOCUSEDCELL = "e-focused-cell";
var OTHERMONTHROW = "e-month-hide";
var TODAY = "e-today";
var TITLE = "e-title";
var LINK = "e-day";
var CELL = "e-cell";
var WEEKHEADER = "e-week-header";
var ZOOMIN = "e-zoomin";
var FOOTER = "e-footer-container";
var BTN = "e-btn";
var FLAT = "e-flat";
var CSS = "e-css";
var PRIMARY = "e-primary";
var DAYHEADERLONG = "e-calendar-day-header-lg";
var dayMilliSeconds = 864e5;
var minutesMilliSeconds = 6e4;
var CalendarBase = (
  /** @class */
  function(_super) {
    __extends19(CalendarBase2, _super);
    function CalendarBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.effect = "";
      _this.isPopupClicked = false;
      _this.isDateSelected = true;
      _this.isTodayClicked = false;
      _this.preventChange = false;
      _this.previousDates = false;
      return _this;
    }
    CalendarBase2.prototype.render = function() {
      this.rangeValidation(this.min, this.max);
      this.calendarEleCopy = this.element.cloneNode(true);
      if (this.calendarMode === "Islamic") {
        if (+this.min.setSeconds(0) === +new Date(1900, 0, 1, 0, 0, 0)) {
          this.min = new Date(1944, 2, 18);
        }
        if (+this.max === +new Date(2099, 11, 31)) {
          this.max = new Date(2069, 10, 16);
        }
      }
      this.globalize = new Internationalization(this.locale);
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: this.globalize.getFirstDayOfWeek() }, true);
      }
      this.todayDisabled = false;
      this.todayDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (this.getModuleName() === "calendar") {
        this.element.classList.add(ROOT3);
        if (this.enableRtl) {
          this.element.classList.add(RTL5);
        }
        if (Browser.isDevice) {
          this.element.classList.add(DEVICE);
        }
        attributes(this.element, {
          "data-role": "calendar"
        });
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.setAttribute("tabindex", this.tabIndex);
      } else {
        this.calendarElement = this.createElement("div");
        this.calendarElement.classList.add(ROOT3);
        if (this.enableRtl) {
          this.calendarElement.classList.add(RTL5);
        }
        if (Browser.isDevice) {
          this.calendarElement.classList.add(DEVICE);
        }
        attributes(this.calendarElement, {
          "data-role": "calendar"
        });
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.createHeader();
      this.createContent();
      this.wireEvents();
    };
    CalendarBase2.prototype.rangeValidation = function(min, max) {
      if (isNullOrUndefined(min)) {
        this.setProperties({ min: new Date(1900, 0, 1) }, true);
      }
      if (isNullOrUndefined(max)) {
        this.setProperties({ max: new Date(2099, 11, 31) }, true);
      }
    };
    CalendarBase2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        altUpArrow: "alt+uparrow",
        spacebar: "space",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow"
      };
      return this.defaultKeyConfigs;
    };
    CalendarBase2.prototype.validateDate = function(value) {
      this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(this.max))) }, true);
      this.currentDate = this.currentDate ? this.currentDate : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (!isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max) {
        this.currentDate = new Date(this.checkValue(value));
      }
    };
    CalendarBase2.prototype.setOverlayIndex = function(popupWrapper, popupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(popupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(popupElement.style.zIndex, 10) ? parseInt(popupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    CalendarBase2.prototype.minMaxUpdate = function(value) {
      if (!(+this.min <= +this.max)) {
        this.setProperties({ min: this.min }, true);
        addClass([this.element], OVERLAY);
      } else {
        removeClass([this.element], OVERLAY);
      }
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (+this.min <= +this.max && value && +value <= +this.max && +value >= +this.min) {
        this.currentDate = new Date(this.checkValue(value));
      } else {
        if (+this.min <= +this.max && !value && +this.currentDate > +this.max) {
          this.currentDate = new Date(this.checkValue(this.max));
        } else {
          if (+this.currentDate < +this.min) {
            this.currentDate = new Date(this.checkValue(this.min));
          }
        }
      }
    };
    CalendarBase2.prototype.createHeader = function() {
      var ariaPrevAttrs = {
        "aria-disabled": "false",
        "aria-label": "previous month"
      };
      var ariaNextAttrs = {
        "aria-disabled": "false",
        "aria-label": "next month"
      };
      var ariaTitleAttrs = {
        "aria-atomic": "true",
        "aria-live": "assertive",
        "aria-label": "title"
      };
      var tabIndexAttr = { "tabindex": "0" };
      this.headerElement = this.createElement("div", { className: HEADER2 });
      var iconContainer = this.createElement("div", { className: ICONCONTAINER });
      this.previousIcon = this.createElement("button", { className: "" + PREVICON, attrs: { type: "button" } });
      rippleEffect(this.previousIcon, {
        duration: 400,
        selector: ".e-prev",
        isCenterRipple: true
      });
      attributes(this.previousIcon, ariaPrevAttrs);
      attributes(this.previousIcon, tabIndexAttr);
      this.nextIcon = this.createElement("button", { className: "" + NEXTICON, attrs: { type: "button" } });
      rippleEffect(this.nextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      if (this.getModuleName() === "daterangepicker") {
        attributes(this.previousIcon, { tabIndex: "-1" });
        attributes(this.nextIcon, { tabIndex: "-1" });
      }
      attributes(this.nextIcon, ariaNextAttrs);
      attributes(this.nextIcon, tabIndexAttr);
      this.headerTitleElement = this.createElement("div", { className: "" + LINK + " " + TITLE });
      attributes(this.headerTitleElement, ariaTitleAttrs);
      attributes(this.headerTitleElement, tabIndexAttr);
      this.headerElement.appendChild(this.headerTitleElement);
      this.previousIcon.appendChild(this.createElement("span", { className: "" + PREVSPAN + " " + ICON2 }));
      this.nextIcon.appendChild(this.createElement("span", { className: "" + NEXTSPAN + " " + ICON2 }));
      iconContainer.appendChild(this.previousIcon);
      iconContainer.appendChild(this.nextIcon);
      this.headerElement.appendChild(iconContainer);
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.headerElement);
      } else {
        this.calendarElement.appendChild(this.headerElement);
      }
      this.adjustLongHeaderSize();
    };
    CalendarBase2.prototype.createContent = function() {
      this.contentElement = this.createElement("div", { className: CONTENT });
      this.table = this.createElement("table", { attrs: { "class": CONTENTTABLE, "tabIndex": "0", "role": "grid", "aria-activedescendant": "", "aria-labelledby": this.element.id } });
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.contentElement);
      } else {
        this.calendarElement.appendChild(this.contentElement);
      }
      this.contentElement.appendChild(this.table);
      this.createContentHeader();
      this.createContentBody();
      if (this.showTodayButton) {
        this.createContentFooter();
      }
      if (this.getModuleName() !== "daterangepicker") {
        EventHandler.add(this.table, "focus", this.addContentFocus, this);
        EventHandler.add(this.table, "blur", this.removeContentFocus, this);
      }
    };
    CalendarBase2.prototype.addContentFocus = function(args) {
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.add(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.add(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.removeContentFocus = function(args) {
      var focusedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-focused-date") : null;
      var selectedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-selected") : null;
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.remove(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.remove(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.getCultureValues = function() {
      var culShortNames = [];
      var cldrObj;
      var dayFormat = "days.stand-alone." + this.dayHeaderFormat.toLowerCase();
      if (this.locale === "en" || this.locale === "en-US") {
        cldrObj = getValue(dayFormat, getDefaultDateObject());
      } else {
        cldrObj = this.getCultureObjects(cldrData, "" + this.locale);
      }
      if (!isNullOrUndefined(cldrObj)) {
        for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
          var obj = _a[_i];
          culShortNames.push(getValue(obj, cldrObj));
        }
      }
      return culShortNames;
    };
    CalendarBase2.prototype.toCapitalize = function(text) {
      return !isNullOrUndefined(text) && text.length ? text[0].toUpperCase() + text.slice(1) : text;
    };
    CalendarBase2.prototype.createContentHeader = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.element.querySelectorAll(".e-content .e-week-header")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
        }
      }
      var daysCount = 6;
      var html = "";
      if (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: 0 }, true);
      }
      this.tableHeadElement = this.createElement("thead", { className: WEEKHEADER });
      if (this.weekNumber) {
        html += '<th class="e-week-number" aria-hidden="true"></th>';
        if (this.getModuleName() === "calendar") {
          addClass([this.element], "" + WEEKNUMBER);
        } else {
          addClass([this.calendarElement], "" + WEEKNUMBER);
        }
      }
      var shortNames = this.getCultureValues().length > 0 && this.getCultureValues() ? this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek) : null;
      if (!isNullOrUndefined(shortNames)) {
        for (var days = 0; days <= daysCount; days++) {
          html += '<th  class="">' + this.toCapitalize(shortNames[days]) + "</th>";
        }
      }
      html = "<tr>" + html + "</tr>";
      this.tableHeadElement.innerHTML = html;
      this.table.appendChild(this.tableHeadElement);
    };
    CalendarBase2.prototype.createContentBody = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0])) {
          detach(this.element.querySelectorAll(".e-content tbody")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]);
        }
      }
      switch (this.start) {
        case "Year":
          this.renderYears();
          break;
        case "Decade":
          this.renderDecades();
          break;
        default:
          this.renderMonths();
      }
    };
    CalendarBase2.prototype.updateFooter = function() {
      this.todayElement.textContent = this.l10.getConstant("today");
      this.todayElement.setAttribute("aria-label", this.l10.getConstant("today"));
      this.todayElement.setAttribute("tabindex", "0");
    };
    CalendarBase2.prototype.createContentFooter = function() {
      if (this.showTodayButton) {
        var minimum = /* @__PURE__ */ new Date(+this.min);
        var maximum = /* @__PURE__ */ new Date(+this.max);
        var l10nLocale = { today: "Today" };
        this.globalize = new Internationalization(this.locale);
        this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
        this.todayElement = this.createElement("button", { attrs: { role: "button" } });
        rippleEffect(this.todayElement);
        this.updateFooter();
        addClass([this.todayElement], [BTN, TODAY, FLAT, PRIMARY, CSS]);
        if (!(+new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0))) || this.todayDisabled) {
          addClass([this.todayElement], DISABLED4);
        }
        this.footer = this.createElement("div", { className: FOOTER });
        this.footer.appendChild(this.todayElement);
        if (this.getModuleName() === "calendar") {
          this.element.appendChild(this.footer);
        }
        if (this.getModuleName() === "datepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (this.getModuleName() === "datetimepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (!this.todayElement.classList.contains(DISABLED4)) {
          EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
        }
      }
    };
    CalendarBase2.prototype.wireEvents = function(id, ref, keyConfig, moduleName) {
      EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      if (this.getModuleName() === "calendar") {
        this.keyboardModule = new KeyboardEvents(this.element, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.calendarElement, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
    };
    CalendarBase2.prototype.dateWireEvents = function(id, ref, keyConfig, moduleName) {
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, keyConfig);
      this.serverModuleName = moduleName;
    };
    CalendarBase2.prototype.todayButtonClick = function(e, value, isCustomDate) {
      if (this.showTodayButton) {
        if (this.currentView() === this.depth) {
          this.effect = "";
        } else {
          this.effect = "e-zoomin";
        }
        if (this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
          this.navigateTo(this.depth, new Date(this.checkValue(value)), isCustomDate);
        } else {
          this.navigateTo("Month", new Date(this.checkValue(value)), isCustomDate);
        }
      }
    };
    CalendarBase2.prototype.resetCalendar = function() {
      this.calendarElement && detach(this.calendarElement);
      this.tableBodyElement && detach(this.tableBodyElement);
      this.table && detach(this.table);
      this.tableHeadElement && detach(this.tableHeadElement);
      this.nextIcon && detach(this.nextIcon);
      this.previousIcon && detach(this.previousIcon);
      this.footer && detach(this.footer);
      this.todayElement = null;
      this.renderDayCellArgs = null;
      this.calendarElement = this.tableBodyElement = this.footer = this.tableHeadElement = this.nextIcon = this.previousIcon = this.table = null;
    };
    CalendarBase2.prototype.keyActionHandle = function(e, value, multiSelection) {
      if (this.calendarElement === null && e.action === "escape") {
        return;
      }
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate;
      if (multiSelection) {
        if (!isNullOrUndefined(focusedDate) && +value === parseInt(focusedDate.getAttribute("id").split("_")[0], 10)) {
          selectedDate = focusedDate;
        } else {
          selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
        }
      } else {
        selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      }
      var view = this.getViewNumber(this.currentView());
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      this.effect = "";
      switch (e.action) {
        case "moveLeft":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            this.keyboardNavigate(-1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveRight":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            this.keyboardNavigate(1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveUp":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            if (view === 0) {
              this.keyboardNavigate(-7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(-4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "moveDown":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            if (view === 0) {
              this.keyboardNavigate(7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "select":
          if (e.target === this.headerTitleElement) {
            this.navigateTitle(e);
          } else if (e.target === this.previousIcon && !e.target.className.includes(DISABLED4)) {
            this.navigatePrevious(e);
          } else if (e.target === this.nextIcon && !e.target.className.includes(DISABLED4)) {
            this.navigateNext(e);
          } else if (e.target === this.todayElement && !e.target.className.includes(DISABLED4)) {
            this.todayButtonClick(e, value);
            if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
              this.element.focus();
            }
          } else {
            var element = !isNullOrUndefined(focusedDate) ? focusedDate : selectedDate;
            if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED4)) {
              if (levelRestrict) {
                var d = new Date(parseInt("" + element.id, 0));
                this.selectDate(e, d, element);
                if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
                  this.element.focus();
                }
              } else {
                if (!e.target.className.includes(DISABLED4)) {
                  this.contentClick(null, --view, element, value);
                }
              }
            }
          }
          break;
        case "controlUp":
          this.title();
          e.preventDefault();
          break;
        case "controlDown":
          if (!isNullOrUndefined(focusedDate) && !levelRestrict || !isNullOrUndefined(selectedDate) && !levelRestrict) {
            this.contentClick(null, --view, focusedDate || selectedDate, value);
          }
          e.preventDefault();
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "pageUp":
          this.addMonths(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "pageDown":
          this.addMonths(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageUp":
          this.addYears(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageDown":
          this.addYears(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "controlHome":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1));
          e.preventDefault();
          break;
        case "controlEnd":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31));
          e.preventDefault();
          break;
        case "tab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.todayElement) {
            e.preventDefault();
            if (this.isAngular) {
              this.inputElement.focus();
            } else {
              this.element.focus();
            }
            this.hide();
          }
          break;
        case "shiftTab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.headerTitleElement) {
            e.preventDefault();
            this.element.focus();
            this.hide();
          }
          break;
        case "escape":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && (e.target === this.headerTitleElement || e.target === this.previousIcon || e.target === this.nextIcon || e.target === this.todayElement)) {
            this.hide();
          }
          break;
      }
    };
    CalendarBase2.prototype.keyboardNavigate = function(number, currentView, e, max, min) {
      var date = new Date(this.checkValue(this.currentDate));
      switch (currentView) {
        case 2:
          this.addYears(this.currentDate, number);
          if (this.isMonthYearRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderDecades(e);
          } else {
            this.currentDate = date;
          }
          break;
        case 1:
          this.addMonths(this.currentDate, number);
          if (this.calendarMode === "Gregorian") {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          } else {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          }
          break;
        case 0:
          this.addDay(this.currentDate, number, e, max, min);
          if (this.isMinMaxRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderMonths(e);
          } else {
            this.currentDate = date;
          }
          break;
      }
    };
    CalendarBase2.prototype.preRender = function(value) {
      var _this = this;
      this.navigatePreviousHandler = this.navigatePrevious.bind(this);
      this.navigateNextHandler = this.navigateNext.bind(this);
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.navigateHandler = function(e) {
        _this.triggerNavigate(e);
      };
    };
    CalendarBase2.prototype.minMaxDate = function(localDate) {
      var currentDate = new Date((/* @__PURE__ */ new Date(+localDate)).setHours(0, 0, 0, 0));
      var minDate = new Date((/* @__PURE__ */ new Date(+this.min)).setHours(0, 0, 0, 0));
      var maxDate = new Date((/* @__PURE__ */ new Date(+this.max)).setHours(0, 0, 0, 0));
      if (+currentDate === +minDate || +currentDate === +maxDate) {
        if (+localDate < +this.min) {
          localDate = /* @__PURE__ */ new Date(+this.min);
        }
        if (+localDate > +this.max) {
          localDate = /* @__PURE__ */ new Date(+this.max);
        }
      }
      return localDate;
    };
    CalendarBase2.prototype.renderMonths = function(e, value, isCustomDate) {
      var numCells = this.weekNumber ? 8 : 7;
      var tdEles;
      if (this.calendarMode === "Gregorian") {
        tdEles = this.renderDays(this.currentDate, value, null, null, isCustomDate, e);
      } else {
        tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
      }
      this.createContentHeader();
      if (this.calendarMode === "Gregorian") {
        this.renderTemplate(tdEles, numCells, MONTH, e, value);
      } else {
        this.islamicModule.islamicRenderTemplate(tdEles, numCells, MONTH, e, value);
      }
    };
    CalendarBase2.prototype.renderDays = function(currentDate, value, multiSelection, values, isTodayDate, e) {
      var tdEles = [];
      var cellsCount = 42;
      var todayDate = isTodayDate ? /* @__PURE__ */ new Date(+currentDate) : this.getDate(/* @__PURE__ */ new Date(), this.timezone);
      var localDate = new Date(this.checkValue(currentDate));
      var minMaxDate;
      var currentMonth = localDate.getMonth();
      this.titleUpdate(currentDate, "days");
      var d = localDate;
      localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
      while (localDate.getDay() !== this.firstDayOfWeek) {
        this.setStartDate(localDate, -1 * dayMilliSeconds);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.createElement("td", { className: CELL });
        var weekAnchor = this.createElement("span");
        if (day % 7 === 0 && this.weekNumber) {
          var numberOfDays = this.weekRule === "FirstDay" ? 6 : this.weekRule === "FirstFourDayWeek" ? 3 : 0;
          var finalDate = new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate() + numberOfDays);
          weekAnchor.textContent = "" + this.getWeek(finalDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.minMaxDate(localDate);
        var dateFormatOptions = { type: "dateTime", skeleton: "full" };
        var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.dayCell(localDate);
        var title = this.globalize.formatDate(localDate, { type: "date", skeleton: "full" });
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, { format: "d", type: "date", skeleton: "yMd" });
        var disabled = this.min > localDate || this.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED4);
          addClass([tdEle], OVERLAY);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        if (currentMonth !== localDate.getMonth()) {
          addClass([tdEle], OTHERMONTH);
          dayLink.setAttribute("aria-disabled", "true");
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND);
        }
        tdEle.appendChild(dayLink);
        this.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.renderDayCellArgs;
        this.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          var selectDate = new Date(this.checkValue(value));
          var argsDate = new Date(this.checkValue(argument.date));
          if (multiSelection) {
            if (!isNullOrUndefined(values) && values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.globalize.formatDate(argument.date, { type: "date", skeleton: "yMd" }));
                var tempDateString = +new Date(this.globalize.formatDate(values[index], { type: "date", skeleton: "yMd" }));
                if (localDateString === tempDateString) {
                  values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (selectDate && +selectDate === +argsDate) {
            this.setProperties({ value: null }, true);
          }
        }
        if (this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED4)) {
          addClass([tdEle], DISABLED4);
          addClass([tdEle], OVERLAY);
          dayLink.setAttribute("aria-disabled", "true");
          if (+this.renderDayCellArgs.date === +this.todayDate) {
            this.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH);
        var disabledCls = tdEle.classList.contains(DISABLED4);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        var currentTarget = void 0;
        if (!isNullOrUndefined(e) && e.type === "click") {
          currentTarget = e.currentTarget;
        }
        if (multiSelection && !isNullOrUndefined(values) && !disabledCls) {
          for (var tempValue = 0; tempValue < values.length; tempValue++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = { format: null, type: "date", skeleton: "short", calendar: type };
            var localDateString = this.globalize.formatDate(localDate, formatOptions);
            var tempDateString = this.globalize.formatDate(values[tempValue], formatOptions);
            if (localDateString === tempDateString && this.getDateVal(localDate, values[tempValue]) || this.getDateVal(localDate, value)) {
              addClass([tdEle], SELECTED4);
            }
            if (!isNullOrUndefined(currentTarget) && currentTarget.innerText === tdEle.innerText && this.previousDates && tdEle.classList.contains(SELECTED4) && currentTarget.classList.contains(SELECTED4)) {
              removeClass([tdEle], SELECTED4);
              this.previousDates = false;
              var copyValues = this.copyValues(values);
              for (var i = 0; i < copyValues.length; i++) {
                var type_1 = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
                var formatOptions_1 = { format: null, type: "date", skeleton: "short", calendar: type_1 };
                var localDateString_1 = this.globalize.formatDate(date, formatOptions_1);
                var tempDateString_1 = this.globalize.formatDate(copyValues[i], formatOptions_1);
                if (localDateString_1 === tempDateString_1) {
                  var index = copyValues.indexOf(copyValues[i]);
                  copyValues.splice(index, 1);
                  values.splice(index, 1);
                }
              }
              this.setProperties({ values: copyValues }, true);
            } else {
              this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (values.length <= 0) {
            this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!disabledCls && this.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED4);
        }
        this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        if (!isNullOrUndefined(date) && date.getFullYear() === todayDate.getFullYear() && date.getMonth() === todayDate.getMonth() && date.getDate() === todayDate.getDate()) {
          addClass([tdEle], TODAY);
        }
        tdEles.push(this.renderDayCellArgs.element);
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      return tdEles;
    };
    CalendarBase2.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
      if (currentDate.getDate() === localDate.getDate() && !otherMonth && !disabled) {
        addClass([tableElement], FOCUSEDDATE);
      } else {
        if (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
        if (currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
      }
    };
    CalendarBase2.prototype.renderYears = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.checkValue(this.currentDate));
      var mon = curDate.getMonth();
      var yr = curDate.getFullYear();
      var localDate = curDate;
      var curYrs = localDate.getFullYear();
      var minYr = new Date(this.checkValue(this.min)).getFullYear();
      var minMonth = new Date(this.checkValue(this.min)).getMonth();
      var maxYr = new Date(this.checkValue(this.max)).getFullYear();
      var maxMonth = new Date(this.checkValue(this.max)).getMonth();
      localDate.setMonth(0);
      this.titleUpdate(this.currentDate, "months");
      localDate.setDate(1);
      for (var month = 0; month < 12; ++month) {
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        var localMonth = value && value.getMonth() === localDate.getMonth();
        var select3 = value && value.getFullYear() === yr && localMonth;
        var title = this.globalize.formatDate(localDate, { type: "date", format: "MMM y" });
        dayLink.textContent = this.toCapitalize(this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "MMM"
        }));
        if (this.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED4);
        } else if (!valueUtil && select3) {
          addClass([tdEle], SELECTED4);
        } else {
          if (localDate.getMonth() === mon && this.currentDate.getMonth() === mon) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        localDate.setDate(1);
        localDate.setMonth(localDate.getMonth() + 1);
        if (!tdEle.classList.contains(DISABLED4)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + title);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, YEAR, e, value);
    };
    CalendarBase2.prototype.renderDecades = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.checkValue(this.currentDate));
      localDate.setMonth(0);
      localDate.setDate(1);
      var localYr = localDate.getFullYear();
      var startYr = new Date(localDate.setFullYear(localYr - localYr % 10));
      var endYr = new Date(localDate.setFullYear(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.globalize.formatDate(startYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      var endHdrYr = this.globalize.formatDate(endYr, { format: null, type: "dateTime", skeleton: "y" });
      this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      var start = new Date(localYr - localYr % 10 - 1, 0, 1);
      var startYear = start.getFullYear();
      for (var rowIterator = 0; rowIterator < yearCell; ++rowIterator) {
        var year = startYear + rowIterator;
        localDate.setFullYear(year);
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "y"
        });
        if (year < startFullYr || year > endFullYr) {
          addClass([tdEle], OTHERDECADE);
          dayLink.setAttribute("aria-disabled", "true");
          if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
            addClass([tdEle], SELECTED4);
          }
          if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
            addClass([tdEle], DISABLED4);
          }
        } else if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
          addClass([tdEle], DISABLED4);
        } else if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
          addClass([tdEle], SELECTED4);
        } else {
          if (localDate.getFullYear() === this.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED4)) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        if (!tdEle.classList.contains(DISABLED4)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + dayLink.textContent);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    CalendarBase2.prototype.dayCell = function(localDate) {
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = { skeleton: "full", type: "dateTime", calendar: type };
      var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
      var value;
      if (!isNullOrUndefined(date)) {
        value = date.valueOf();
      }
      var attrs = {
        className: CELL,
        attrs: { "id": "" + getUniqueID("" + value), "aria-selected": "false" }
      };
      return this.createElement("td", attrs);
    };
    CalendarBase2.prototype.firstDay = function(date) {
      var collection = this.currentView() !== "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE);
      if (collection.length) {
        for (var i = 0; i < collection.length; i++) {
          if (!collection[i].classList.contains(DISABLED4)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.lastDay = function(date, view) {
      var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
      if (view !== 2) {
        var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
        if (timeOffset) {
          lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60);
        }
        return this.findLastDay(lastDate);
      } else {
        return this.findLastDay(this.firstDay(lastDate));
      }
    };
    CalendarBase2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    CalendarBase2.prototype.findLastDay = function(date) {
      var collection = this.currentView() === "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH);
      if (collection.length) {
        for (var i = collection.length - 1; i >= 0; i--) {
          if (!collection[i].classList.contains(DISABLED4)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.removeTableHeadElement = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      }
    };
    CalendarBase2.prototype.renderTemplate = function(elements, count, classNm, e, value) {
      var view = this.getViewNumber(this.currentView());
      var trEle;
      this.tableBodyElement = this.createElement("tbody");
      this.table.appendChild(this.tableBodyElement);
      removeClass([this.contentElement, this.headerElement], [MONTH, DECADE, YEAR]);
      addClass([this.contentElement, this.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowIterator = 0;
      for (var dayCell = 0; dayCell < elements.length / count; ++dayCell) {
        trEle = this.createElement("tr");
        for (rowIterator = 0 + rowIterator; rowIterator < row; rowIterator++) {
          if (!elements[rowIterator].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowIterator].children[0])) {
            addClass([elements[rowIterator].children[0]], [LINK]);
            rippleEffect(elements[rowIterator].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowIterator]);
          if (this.weekNumber && rowIterator === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (!this.weekNumber && rowIterator === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (this.weekNumber) {
            if (rowIterator === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          } else {
            if (rowIterator === numberCell && elements[numberCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          }
        }
        row = row + count;
        rowIterator = rowIterator + 0;
        this.tableBodyElement.appendChild(trEle);
      }
      this.table.querySelector("tbody").className = this.effect;
      if (this.calendarMode === "Gregorian") {
        this.iconHandler();
      } else {
        this.islamicModule.islamicIconHandler();
      }
      if (view !== this.getViewNumber(this.currentView()) || view === 0 && view !== this.getViewNumber(this.currentView())) {
        this.navigateHandler(e);
      }
      this.setAriaActiveDescendant();
    };
    CalendarBase2.prototype.clickHandler = function(e, value) {
      this.clickEventEmitter(e);
      var eve = e.currentTarget;
      var view = this.getViewNumber(this.currentView());
      if (eve.classList.contains(OTHERMONTH)) {
        this.contentClick(e, 0, null, value);
      } else if (view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
        this.contentClick(e, 1, null, value);
      } else if (2 === view) {
        this.contentClick(e, 1, null, value);
      } else if (!eve.classList.contains(OTHERMONTH) && view === 0) {
        this.selectDate(e, this.getIdValue(e, null), null);
      } else {
        this.contentClick(e, 0, eve, value);
      }
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.clickEventEmitter = function(e) {
      e.preventDefault();
    };
    CalendarBase2.prototype.contentClick = function(e, view, element, value) {
      var currentView = this.getViewNumber(this.currentView());
      var d = this.getIdValue(e, element);
      switch (view) {
        case 0:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            detach(this.tableBodyElement);
            this.currentDate = d;
            this.effect = ZOOMIN;
            this.renderMonths(e);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setMonth(d.getMonth());
              if (d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth()) {
                this.currentDate.setDate(0);
              }
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.currentDate = d;
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderMonths(e);
          }
          break;
        case 1:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            this.selectDate(e, d, null);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.islamicPreviousHeader = this.headerElement.textContent;
              var islamicDate = this.islamicModule.getIslamicDate(d);
              this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month, 1);
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderYears(e);
          }
      }
    };
    CalendarBase2.prototype.switchView = function(view, e, multiSelection, isCustomDate) {
      switch (view) {
        case 0:
          detach(this.tableBodyElement);
          this.renderMonths(e, null, isCustomDate);
          break;
        case 1:
          detach(this.tableBodyElement);
          this.renderYears(e);
          break;
        case 2:
          detach(this.tableBodyElement);
          this.renderDecades(e);
      }
    };
    CalendarBase2.prototype.getModuleName = function() {
      return "calendar";
    };
    CalendarBase2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({ args: [this], member: "islamic", name: "Islamic" });
      }
      return modules;
    };
    CalendarBase2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    CalendarBase2.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
      this.effect = "";
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              if (this.getModuleName() === "calendar") {
                this.element.classList.add("e-rtl");
              } else {
                this.calendarElement.classList.add("e-rtl");
              }
            } else {
              if (this.getModuleName() === "calendar") {
                this.element.classList.remove("e-rtl");
              } else {
                this.calendarElement.classList.remove("e-rtl");
              }
            }
            break;
          case "dayHeaderFormat":
            this.getCultureValues();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
            } else if (this.calendarElement) {
              this.createContentHeader();
            }
            this.adjustLongHeaderSize();
            break;
          case "min":
          case "max":
            this.rangeValidation(this.min, this.max);
            if (prop === "min") {
              this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(newProp.min))) }, true);
            } else {
              this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(newProp.max))) }, true);
            }
            this.setProperties({ start: this.currentView() }, true);
            if (this.tableBodyElement) {
              detach(this.tableBodyElement);
            }
            this.minMaxUpdate();
            if (multiSelection) {
              this.validateValues(multiSelection, values);
            }
            if (this.getModuleName() !== "datepicker") {
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentBody();
            }
            if ((this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement) {
              detach(this.todayElement);
              detach(this.footer);
              this.todayElement = this.footer = null;
              this.createContentFooter();
            } else {
              if (this.footer && this.todayElement && this.todayElement.classList.contains("e-disabled")) {
                removeClass([this.todayElement], DISABLED4);
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = null;
                this.createContentFooter();
              }
            }
            break;
          case "start":
          case "depth":
          case "weekNumber":
          case "firstDayOfWeek":
          case "weekRule":
            this.checkView();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            if (this.getModuleName() === "calendar") {
              var l10nLocale = { today: "Today" };
              this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
            }
            this.l10.setLocale(this.locale);
            if (this.showTodayButton) {
              this.updateFooter();
            }
            break;
          case "showTodayButton":
            if (newProp.showTodayButton) {
              this.createContentFooter();
            } else {
              if (!isNullOrUndefined(this.todayElement) && !isNullOrUndefined(this.footer)) {
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = void 0;
              }
            }
            this.setProperties({ showTodayButton: newProp.showTodayButton }, true);
            break;
        }
      }
    };
    CalendarBase2.prototype.validateValues = function(multiSelection, values) {
      if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
        var copyValues = this.copyValues(values);
        for (var skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
          var tempValue = copyValues[skipIndex];
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var tempValueString = void 0;
          if (this.calendarMode === "Gregorian") {
            tempValueString = this.globalize.formatDate(tempValue, { type: "date", skeleton: "yMd" });
          } else {
            tempValueString = this.globalize.formatDate(tempValue, { type: "dateTime", skeleton: "full", calendar: "islamic" });
          }
          var minFormatOption = { type: "date", skeleton: "yMd", calendar: type };
          var minStringValue = this.globalize.formatDate(this.min, minFormatOption);
          var minString = minStringValue;
          var maxFormatOption = { type: "date", skeleton: "yMd", calendar: type };
          var maxStringValue = this.globalize.formatDate(this.max, maxFormatOption);
          var maxString = maxStringValue;
          if (+new Date(tempValueString) < +new Date(minString) || +new Date(tempValueString) > +new Date(maxString)) {
            copyValues.splice(skipIndex, 1);
            skipIndex = -1;
          }
        }
        this.setProperties({ values: copyValues }, true);
      }
    };
    CalendarBase2.prototype.setValueUpdate = function() {
      if (!isNullOrUndefined(this.tableBodyElement)) {
        detach(this.tableBodyElement);
        this.setProperties({ start: this.currentView() }, true);
        this.createContentBody();
      }
    };
    CalendarBase2.prototype.copyValues = function(values) {
      var copyValues = [];
      if (!isNullOrUndefined(values) && values.length > 0) {
        for (var index = 0; index < values.length; index++) {
          copyValues.push(/* @__PURE__ */ new Date(+values[index]));
        }
      }
      return copyValues;
    };
    CalendarBase2.prototype.titleUpdate = function(date, view) {
      var globalize = new Internationalization(this.locale);
      var dayFormatOptions;
      var monthFormatOptions;
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      if (this.calendarMode === "Gregorian") {
        dayFormatOptions = globalize.formatDate(date, { type: "dateTime", skeleton: "yMMMM", calendar: type });
        monthFormatOptions = globalize.formatDate(date, {
          format: null,
          type: "dateTime",
          skeleton: "y",
          calendar: type
        });
      } else {
        dayFormatOptions = globalize.formatDate(date, { type: "dateTime", format: "MMMM y", calendar: type });
        monthFormatOptions = globalize.formatDate(date, { type: "dateTime", format: "y", calendar: type });
      }
      switch (view) {
        case "days":
          this.headerTitleElement.textContent = this.toCapitalize(dayFormatOptions);
          break;
        case "months":
          this.headerTitleElement.textContent = monthFormatOptions;
      }
    };
    CalendarBase2.prototype.setActiveDescendant = function() {
      var id;
      var focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedEle = this.tableBodyElement.querySelector("tr td.e-selected");
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var title;
      var view = this.currentView();
      if (view === "Month") {
        title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "full", calendar: type });
      } else if (view === "Year") {
        if (type !== "islamic") {
          title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "yMMMM", calendar: type });
        } else {
          title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "GyMMM", calendar: type });
        }
      } else {
        title = this.globalize.formatDate(this.currentDate, {
          format: null,
          type: "date",
          skeleton: "y",
          calendar: type
        });
      }
      if (selectedEle || focusedEle) {
        if (!isNullOrUndefined(selectedEle)) {
          selectedEle.setAttribute("aria-selected", "true");
        }
        (focusedEle || selectedEle).setAttribute("aria-label", title);
        id = (focusedEle || selectedEle).getAttribute("id");
      }
      return id;
    };
    CalendarBase2.prototype.iconHandler = function() {
      new Date(this.checkValue(this.currentDate)).setDate(1);
      switch (this.currentView()) {
        case "Month":
          this.previousIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Year":
          this.previousIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Decade":
          this.previousIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.max) > -1);
      }
    };
    CalendarBase2.prototype.destroy = function() {
      if (this.getModuleName() === "calendar" && this.element) {
        removeClass([this.element], [ROOT3]);
      } else {
        if (this.calendarElement && this.element) {
          removeClass([this.element], [ROOT3]);
        }
      }
      if (this.getModuleName() === "calendar" && this.element) {
        if (!isNullOrUndefined(this.headerTitleElement)) {
          EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle);
        }
        if (this.todayElement) {
          EventHandler.remove(this.todayElement, "click", this.todayButtonClick);
        }
        this.previousIconHandler(true);
        this.nextIconHandler(true);
        this.keyboardModule.destroy();
        this.element.removeAttribute("data-role");
        if (!isNullOrUndefined(this.calendarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      if (this.element) {
        this.element.innerHTML = "";
      }
      this.todayElement = null;
      this.tableBodyElement = null;
      this.todayButtonEvent = null;
      this.renderDayCellArgs = null;
      this.headerElement = null;
      this.nextIcon = null;
      this.table = null;
      this.tableHeadElement = null;
      this.previousIcon = null;
      this.headerTitleElement = null;
      this.footer = null;
      this.contentElement = null;
      _super.prototype.destroy.call(this);
    };
    CalendarBase2.prototype.title = function(e) {
      var currentView = this.getViewNumber(this.currentView());
      this.effect = ZOOMIN;
      this.switchView(++currentView, e);
    };
    CalendarBase2.prototype.getViewNumber = function(stringVal) {
      if (stringVal === "Month") {
        return 0;
      } else if (stringVal === "Year") {
        return 1;
      } else {
        return 2;
      }
    };
    CalendarBase2.prototype.navigateTitle = function(e) {
      e.preventDefault();
      this.title(e);
    };
    CalendarBase2.prototype.previous = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, -10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigatePrevious = function(e) {
      !Browser.isDevice && e.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.previous();
      } else {
        this.islamicModule.islamicPrevious();
      }
      this.triggerNavigate(e);
    };
    CalendarBase2.prototype.next = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, 10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigateNext = function(eve) {
      !Browser.isDevice && eve.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.next();
      } else {
        this.islamicModule.islamicNext();
      }
      this.triggerNavigate(eve);
    };
    CalendarBase2.prototype.navigateTo = function(view, date, isCustomDate) {
      if (+date >= +this.min && +date <= +this.max) {
        this.currentDate = date;
      }
      if (+date <= +this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
      if (+date >= +this.max) {
        this.currentDate = new Date(this.checkValue(this.max));
      }
      if (this.getViewNumber(this.depth) >= this.getViewNumber(view)) {
        if (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) {
          view = this.depth;
        }
      }
      this.switchView(this.getViewNumber(view), null, null, isCustomDate);
    };
    CalendarBase2.prototype.currentView = function() {
      if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(YEAR)) {
        return "Year";
      } else if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(DECADE)) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    CalendarBase2.prototype.getDateVal = function(date, value) {
      return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
    };
    CalendarBase2.prototype.getCultureObjects = function(ld, c) {
      var gregorianFormat = ".dates.calendars.gregorian.days.format." + this.dayHeaderFormat.toLowerCase();
      var islamicFormat = ".dates.calendars.islamic.days.format." + this.dayHeaderFormat.toLowerCase();
      var mainVal = "main.";
      if (this.calendarMode === "Gregorian") {
        return getValue(mainVal + "" + this.locale + gregorianFormat, ld);
      } else {
        return getValue("main." + this.locale + islamicFormat, ld);
      }
    };
    CalendarBase2.prototype.getWeek = function(d) {
      var currentDate = new Date(this.checkValue(d)).valueOf();
      var date = new Date(d.getFullYear(), 0, 1).valueOf();
      return Math.ceil((currentDate - date + dayMilliSeconds) / dayMilliSeconds / 7);
    };
    CalendarBase2.prototype.setStartDate = function(date, time) {
      var tzOffset = date.getTimezoneOffset();
      var d = new Date(date.getTime() + time);
      var tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
      date.setTime(d.getTime() + tzOffsetDiff * minutesMilliSeconds);
    };
    CalendarBase2.prototype.addMonths = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setMonth(date.getMonth() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month + i, 1);
      }
    };
    CalendarBase2.prototype.addYears = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setFullYear(date.getFullYear() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year + i, islamicDate.month, 1);
      }
    };
    CalendarBase2.prototype.getIdValue = function(e, element) {
      var eve;
      if (e) {
        eve = e.currentTarget;
      } else {
        eve = element;
      }
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = { type: "dateTime", skeleton: "full", calendar: type };
      var dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions);
      var date = this.globalize.parseDate(dateString, dateFormatOptions);
      var value = date.valueOf() - date.valueOf() % 1e3;
      return new Date(value);
    };
    CalendarBase2.prototype.adjustLongHeaderSize = function() {
      removeClass([this.element], DAYHEADERLONG);
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.getModuleName() === "calendar" ? this.element : this.calendarElement], DAYHEADERLONG);
      }
    };
    CalendarBase2.prototype.selectDate = function(e, date, node, multiSelection, values) {
      var element = node || e.currentTarget;
      this.isDateSelected = false;
      if (this.currentView() === "Decade") {
        this.setDateDecade(this.currentDate, date.getFullYear());
      } else if (this.currentView() === "Year") {
        this.setDateYear(this.currentDate, date);
      } else {
        if (multiSelection && !this.checkPresentDate(date, values)) {
          var copyValues = this.copyValues(values);
          if (!isNullOrUndefined(values) && copyValues.length > 0) {
            copyValues.push(new Date(this.checkValue(date)));
            this.setProperties({ values: copyValues }, true);
            this.setProperties({ value: values[values.length - 1] }, true);
          } else {
            this.setProperties({ values: [new Date(this.checkValue(date))] }, true);
          }
        } else {
          this.setProperties({ value: new Date(this.checkValue(date)) }, true);
        }
        this.currentDate = new Date(this.checkValue(date));
      }
      var tableBodyElement = closest(element, "." + ROOT3);
      if (isNullOrUndefined(tableBodyElement)) {
        tableBodyElement = this.tableBodyElement;
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + SELECTED4))) {
        removeClass([tableBodyElement.querySelector("." + SELECTED4)], SELECTED4);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDDATE))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDDATE)], FOCUSEDDATE);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDCELL))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDCELL)], FOCUSEDCELL);
      }
      if (multiSelection) {
        var copyValues = this.copyValues(values);
        var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td"));
        for (var index = 0; index < collection.length; index++) {
          var tempElement = tableBodyElement.querySelectorAll("td." + FOCUSEDDATE)[0];
          var selectedElement = tableBodyElement.querySelectorAll("td." + SELECTED4)[0];
          if (collection[index] === tempElement) {
            removeClass([collection[index]], FOCUSEDDATE);
          }
          if (collection[index] === selectedElement && !this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values)) {
            removeClass([collection[index]], SELECTED4);
          }
        }
        if (element.classList.contains(SELECTED4)) {
          removeClass([element], SELECTED4);
          for (var i = 0; i < copyValues.length; i++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = { format: null, type: "date", skeleton: "short", calendar: type };
            var localDateString = this.globalize.formatDate(date, formatOptions);
            var tempDateString = this.globalize.formatDate(copyValues[i], formatOptions);
            if (localDateString === tempDateString) {
              var index = copyValues.indexOf(copyValues[i]);
              copyValues.splice(index, 1);
              addClass([element], FOCUSEDDATE);
            }
          }
          this.setProperties({ values: copyValues }, true);
        } else {
          addClass([element], SELECTED4);
        }
      } else {
        addClass([element], SELECTED4);
      }
      this.isDateSelected = true;
    };
    CalendarBase2.prototype.checkPresentDate = function(dates, values) {
      var previousValue = false;
      if (!isNullOrUndefined(values)) {
        for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var localDateString = this.globalize.formatDate(dates, {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          var tempDateString = this.globalize.formatDate(values[checkPrevious], {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          if (localDateString === tempDateString) {
            previousValue = true;
          }
        }
      }
      return previousValue;
    };
    CalendarBase2.prototype.setAriaActiveDescendant = function() {
      attributes(this.table, {
        "aria-activedescendant": "" + this.setActiveDescendant()
      });
    };
    CalendarBase2.prototype.previousIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler);
          addClass([this.previousIcon], "" + DISABLED4);
          addClass([this.previousIcon], "" + OVERLAY);
          this.previousIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler);
        removeClass([this.previousIcon], "" + DISABLED4);
        removeClass([this.previousIcon], "" + OVERLAY);
        this.previousIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.renderDayCellEvent = function(args) {
      extend(this.renderDayCellArgs, { name: "renderDayCell" });
      this.trigger("renderDayCell", args);
    };
    CalendarBase2.prototype.navigatedEvent = function(eve) {
      extend(this.navigatedArgs, { name: "navigated", event: eve });
      this.trigger("navigated", this.navigatedArgs);
    };
    CalendarBase2.prototype.triggerNavigate = function(event2) {
      this.navigatedArgs = { view: this.currentView(), date: this.currentDate };
      this.navigatedEvent(event2);
    };
    CalendarBase2.prototype.nextIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler);
          addClass([this.nextIcon], DISABLED4);
          addClass([this.nextIcon], OVERLAY);
          this.nextIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.nextIcon, "click", this.navigateNextHandler);
        removeClass([this.nextIcon], DISABLED4);
        removeClass([this.nextIcon], OVERLAY);
        this.nextIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.compare = function(startDate, endDate, modifier) {
      var start = endDate.getFullYear();
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (startDate.getFullYear() > end) {
        result = 1;
      } else if (startDate.getFullYear() < start) {
        result = -1;
      }
      return result;
    };
    CalendarBase2.prototype.isMinMaxRange = function(date) {
      return +date >= +this.min && +date <= +this.max;
    };
    CalendarBase2.prototype.isMonthYearRange = function(date) {
      if (this.calendarMode === "Gregorian") {
        return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        return islamicDate.month >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).month && islamicDate.year >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).year && islamicDate.month <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).month && islamicDate.year <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).year;
      }
    };
    CalendarBase2.prototype.compareYear = function(start, end) {
      return this.compare(start, end, 0);
    };
    CalendarBase2.prototype.compareDecade = function(start, end) {
      return this.compare(start, end, 10);
    };
    CalendarBase2.prototype.shiftArray = function(array, i) {
      return array.slice(i).concat(array.slice(0, i));
    };
    CalendarBase2.prototype.addDay = function(date, i, e, max, min) {
      var column = i;
      var value = /* @__PURE__ */ new Date(+date);
      if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
        while (this.findNextTD(/* @__PURE__ */ new Date(+date), column, max, min)) {
          column += i;
        }
        var rangeValue = new Date(value.setDate(value.getDate() + column));
        column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
      }
      date.setDate(date.getDate() + column);
    };
    CalendarBase2.prototype.findNextTD = function(date, column, max, min) {
      var value = new Date(date.setDate(date.getDate() + column));
      var collection = [];
      var isDisabled = false;
      if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
        var tdEles = void 0;
        if (this.calendarMode === "Gregorian") {
          tdEles = this.renderDays(value);
        } else {
          tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
        }
        collection = tdEles.filter(function(element) {
          return element.classList.contains(DISABLED4);
        });
      } else {
        collection = this.tableBodyElement.querySelectorAll("td." + DISABLED4);
      }
      if (+value <= +max && +value >= +min) {
        if (collection.length) {
          for (var i = 0; i < collection.length; i++) {
            isDisabled = +value === +new Date(parseInt(collection[i].id, 0)) ? true : false;
            if (isDisabled) {
              break;
            }
          }
        }
      }
      return isDisabled;
    };
    CalendarBase2.prototype.getMaxDays = function(d) {
      var date;
      var tmpDate = new Date(this.checkValue(d));
      date = 28;
      var month = tmpDate.getMonth();
      while (tmpDate.getMonth() === month) {
        ++date;
        tmpDate.setDate(date);
      }
      return date - 1;
    };
    CalendarBase2.prototype.setDateDecade = function(date, year) {
      date.setFullYear(year);
      this.setProperties({ value: new Date(this.checkValue(date)) }, true);
    };
    CalendarBase2.prototype.setDateYear = function(date, value) {
      date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate());
      if (value.getMonth() !== date.getMonth()) {
        date.setDate(0);
        this.currentDate = new Date(this.checkValue(value));
      }
      this.setProperties({ value: new Date(this.checkValue(date)) }, true);
    };
    CalendarBase2.prototype.compareMonth = function(start, end) {
      var result;
      if (start.getFullYear() > end.getFullYear()) {
        result = 1;
      } else if (start.getFullYear() < end.getFullYear()) {
        result = -1;
      } else {
        result = start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
      }
      return result;
    };
    CalendarBase2.prototype.checkValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    CalendarBase2.prototype.checkView = function() {
      if (this.start !== "Decade" && this.start !== "Year") {
        this.setProperties({ start: "Month" }, true);
      }
      if (this.depth !== "Decade" && this.depth !== "Year") {
        this.setProperties({ depth: "Month" }, true);
      }
      if (this.getViewNumber(this.depth) > this.getViewNumber(this.start)) {
        this.setProperties({ depth: "Month" }, true);
      }
    };
    CalendarBase2.prototype.getDate = function(date, timezone) {
      if (timezone) {
        date = new Date(date.toLocaleString("en-US", { timeZone: timezone }));
      }
      return date;
    };
    __decorate19([
      Property(new Date(1900, 0, 1))
    ], CalendarBase2.prototype, "min", void 0);
    __decorate19([
      Property(true)
    ], CalendarBase2.prototype, "enabled", void 0);
    __decorate19([
      Property(null)
    ], CalendarBase2.prototype, "cssClass", void 0);
    __decorate19([
      Property(new Date(2099, 11, 31))
    ], CalendarBase2.prototype, "max", void 0);
    __decorate19([
      Property(null)
    ], CalendarBase2.prototype, "firstDayOfWeek", void 0);
    __decorate19([
      Property("Gregorian")
    ], CalendarBase2.prototype, "calendarMode", void 0);
    __decorate19([
      Property("Month")
    ], CalendarBase2.prototype, "start", void 0);
    __decorate19([
      Property("Month")
    ], CalendarBase2.prototype, "depth", void 0);
    __decorate19([
      Property(false)
    ], CalendarBase2.prototype, "weekNumber", void 0);
    __decorate19([
      Property("FirstDay")
    ], CalendarBase2.prototype, "weekRule", void 0);
    __decorate19([
      Property(true)
    ], CalendarBase2.prototype, "showTodayButton", void 0);
    __decorate19([
      Property("Short")
    ], CalendarBase2.prototype, "dayHeaderFormat", void 0);
    __decorate19([
      Property(false)
    ], CalendarBase2.prototype, "enablePersistence", void 0);
    __decorate19([
      Property(null)
    ], CalendarBase2.prototype, "keyConfigs", void 0);
    __decorate19([
      Property(null)
    ], CalendarBase2.prototype, "serverTimezoneOffset", void 0);
    __decorate19([
      Event()
    ], CalendarBase2.prototype, "created", void 0);
    __decorate19([
      Event()
    ], CalendarBase2.prototype, "destroyed", void 0);
    __decorate19([
      Event()
    ], CalendarBase2.prototype, "navigated", void 0);
    __decorate19([
      Event()
    ], CalendarBase2.prototype, "renderDayCell", void 0);
    CalendarBase2 = __decorate19([
      NotifyPropertyChanges
    ], CalendarBase2);
    return CalendarBase2;
  }(Component2)
);
var Calendar = (
  /** @class */
  function(_super) {
    __extends19(Calendar2, _super);
    function Calendar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Calendar2.prototype.render = function() {
      if (this.calendarMode === "Islamic" && this.islamicModule === void 0) {
        throwError("Requires the injectable Islamic modules to render Calendar in Islamic mode");
      }
      if (this.isMultiSelection && typeof this.values === "object" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var tempValues = [];
        var copyValues = [];
        for (var limit = 0; limit < this.values.length; limit++) {
          if (tempValues.indexOf(+this.values[limit]) === -1) {
            tempValues.push(+this.values[limit]);
            copyValues.push(this.values[limit]);
          }
        }
        this.setProperties({ values: copyValues }, true);
        for (var index = 0; index < this.values.length; index++) {
          if (!this.checkDateValue(this.values[index])) {
            if (typeof this.values[index] === "string" && this.checkDateValue(new Date(this.checkValue(this.values[index])))) {
              var copyDate = new Date(this.checkValue(this.values[index]));
              this.values.splice(index, 1);
              this.values.splice(index, 0, copyDate);
            } else {
              this.values.splice(index, 1);
            }
          }
        }
        this.setProperties({ value: this.values[this.values.length - 1] }, true);
        this.previousValues = this.values.length;
      }
      this.validateDate();
      this.minMaxUpdate();
      if (this.getModuleName() === "calendar") {
        this.setEnable(this.enabled);
        this.setClass(this.cssClass);
      }
      _super.prototype.render.call(this);
      if (this.getModuleName() === "calendar") {
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.add(form, "reset", this.formResetHandler.bind(this));
        }
        this.setTimeZone(this.serverTimezoneOffset);
      }
      this.renderComplete();
    };
    Calendar2.prototype.setEnable = function(enable) {
      if (!enable) {
        addClass([this.element], DISABLED4);
      } else {
        removeClass([this.element], DISABLED4);
      }
    };
    Calendar2.prototype.setClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCssClass) && oldCssClass !== "") {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (!isNullOrUndefined(newCssClass)) {
        addClass([this.element], newCssClass.split(" "));
      }
    };
    Calendar2.prototype.isDayLightSaving = function() {
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    Calendar2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var serverTimezoneDiff = offsetValue;
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    Calendar2.prototype.formResetHandler = function() {
      this.setProperties({ value: null }, true);
    };
    Calendar2.prototype.validateDate = function() {
      if (typeof this.value === "string") {
        this.setProperties({ value: this.checkDateValue(new Date(this.checkValue(this.value))) }, true);
      }
      _super.prototype.validateDate.call(this, this.value);
      if (!isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max) {
        this.currentDate = new Date(this.checkValue(this.value));
      }
      if (isNaN(+this.value)) {
        this.setProperties({ value: null }, true);
      }
    };
    Calendar2.prototype.minMaxUpdate = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max) {
          this.setProperties({ value: this.min }, true);
          this.changedArgs = { value: this.value };
        } else {
          if (!isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max) {
            this.setProperties({ value: this.max }, true);
            this.changedArgs = { value: this.value };
          }
        }
      }
      if (this.getModuleName() !== "calendar" && !isNullOrUndefined(this.value)) {
        if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max) {
          _super.prototype.minMaxUpdate.call(this, this.min);
        } else {
          if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max) {
            _super.prototype.minMaxUpdate.call(this, this.max);
          }
        }
      } else {
        _super.prototype.minMaxUpdate.call(this, this.value);
      }
    };
    Calendar2.prototype.generateTodayVal = function(value) {
      var tempValue = /* @__PURE__ */ new Date();
      if (!isNullOrUndefined(this.timezone)) {
        tempValue = _super.prototype.getDate.call(this, tempValue, this.timezone);
      }
      if (value && isNullOrUndefined(this.timezone)) {
        tempValue.setHours(value.getHours());
        tempValue.setMinutes(value.getMinutes());
        tempValue.setSeconds(value.getSeconds());
        tempValue.setMilliseconds(value.getMilliseconds());
      } else {
        tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0);
      }
      return tempValue;
    };
    Calendar2.prototype.todayButtonClick = function(e) {
      if (this.showTodayButton) {
        var tempValue = this.generateTodayVal(this.value);
        this.setProperties({ value: tempValue }, true);
        this.isTodayClicked = true;
        this.todayButtonEvent = e;
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (!_super.prototype.checkPresentDate.call(this, tempValue, this.values)) {
            copyValues.push(tempValue);
            this.setProperties({ values: copyValues });
          }
        }
        _super.prototype.todayButtonClick.call(this, e, /* @__PURE__ */ new Date(+this.value));
      }
    };
    Calendar2.prototype.keyActionHandle = function(e) {
      _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
    };
    Calendar2.prototype.preRender = function() {
      var _this = this;
      this.changeHandler = function(e) {
        _this.triggerChange(e);
      };
      this.checkView();
      _super.prototype.preRender.call(this, this.value);
    };
    Calendar2.prototype.createContent = function() {
      this.previousDate = this.value;
      this.previousDateTime = this.value;
      _super.prototype.createContent.call(this);
    };
    Calendar2.prototype.minMaxDate = function(localDate) {
      return _super.prototype.minMaxDate.call(this, localDate);
    };
    Calendar2.prototype.renderMonths = function(e, value, isCustomDate) {
      _super.prototype.renderMonths.call(this, e, this.value, isCustomDate);
    };
    Calendar2.prototype.renderDays = function(currentDate, value, isMultiSelect, values, isCustomDate, e) {
      var tempDays = _super.prototype.renderDays.call(this, currentDate, this.value, this.isMultiSelection, this.values, isCustomDate, e);
      if (this.isMultiSelection) {
        _super.prototype.validateValues.call(this, this.isMultiSelection, this.values);
      }
      return tempDays;
    };
    Calendar2.prototype.renderYears = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderYears.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderYears(e, this.value);
      }
    };
    Calendar2.prototype.renderDecades = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderDecades.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderDecade(e, this.value);
      }
    };
    Calendar2.prototype.renderTemplate = function(elements, count, classNm, e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderTemplate.call(this, elements, count, classNm, e, this.value);
      } else {
        this.islamicModule.islamicRenderTemplate(elements, count, classNm, e, this.value);
      }
      this.changedArgs = { value: this.value, values: this.values };
      e && e.type === "click" && e.currentTarget.classList.contains(OTHERMONTH) ? this.changeHandler(e) : this.changeHandler();
    };
    Calendar2.prototype.clickHandler = function(e) {
      var eve = e.currentTarget;
      this.isPopupClicked = true;
      if (eve.classList.contains(OTHERMONTH)) {
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (copyValues.toString().indexOf(this.getIdValue(e, null).toString()) === -1) {
            copyValues.push(this.getIdValue(e, null));
            this.setProperties({ values: copyValues }, true);
            this.setProperties({ value: this.values[this.values.length - 1] }, true);
          } else {
            this.previousDates = true;
          }
        } else {
          this.setProperties({ value: this.getIdValue(e, null) }, true);
        }
      }
      var storeView = this.currentView();
      _super.prototype.clickHandler.call(this, e, this.value);
      if (this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && storeView === "Year") {
        this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
      }
    };
    Calendar2.prototype.switchView = function(view, e, isMultiSelection, isCustomDate) {
      _super.prototype.switchView.call(this, view, e, this.isMultiSelection, isCustomDate);
    };
    Calendar2.prototype.getModuleName = function() {
      _super.prototype.getModuleName.call(this);
      return "calendar";
    };
    Calendar2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      var keyEntity = ["value", "values"];
      return this.addOnPersist(keyEntity);
    };
    Calendar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      this.effect = "";
      this.rangeValidation(this.min, this.max);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            if (this.isDateSelected) {
              if (typeof newProp.value === "string") {
                this.setProperties({ value: new Date(this.checkValue(newProp.value)) }, true);
              } else {
                newProp.value = new Date(this.checkValue(newProp.value));
              }
              if (isNaN(+this.value)) {
                this.setProperties({ value: oldProp.value }, true);
              }
              this.update();
            }
            break;
          case "values":
            if (this.isDateSelected) {
              if (typeof newProp.values === "string" || typeof newProp.values === "number") {
                this.setProperties({ values: null }, true);
              } else {
                var copyValues = this.copyValues(this.values);
                for (var index = 0; index < copyValues.length; index++) {
                  var tempDate = copyValues[index];
                  if (this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues)) {
                    copyValues.push(tempDate);
                  }
                }
                this.setProperties({ values: copyValues }, true);
                if (this.values.length > 0) {
                  this.setProperties({ value: newProp.values[newProp.values.length - 1] }, true);
                }
              }
              this.validateValues(this.isMultiSelection, this.values);
              this.update();
            }
            break;
          case "isMultiSelection":
            if (this.isDateSelected) {
              this.setProperties({ isMultiSelection: newProp.isMultiSelection }, true);
              this.update();
            }
            break;
          case "enabled":
            this.setEnable(this.enabled);
            break;
          case "cssClass":
            if (this.getModuleName() === "calendar") {
              this.setClass(newProp.cssClass, oldProp.cssClass);
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    Calendar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "calendar") {
        this.changedArgs = null;
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }
      }
    };
    Calendar2.prototype.navigateTo = function(view, date, isCustomDate) {
      this.minMaxUpdate();
      _super.prototype.navigateTo.call(this, view, date, isCustomDate);
    };
    Calendar2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    Calendar2.prototype.addDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number") {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var i = 0; i < tempDates.length; i++) {
            if (this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues)) {
              if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
                copyValues.push(tempDates[i]);
              } else {
                copyValues = [/* @__PURE__ */ new Date(+tempDates[i])];
              }
            }
          }
        } else {
          if (this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues)) {
            if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
              copyValues.push(dates);
            } else {
              copyValues = [/* @__PURE__ */ new Date(+dates)];
            }
          }
        }
        this.setProperties({ values: copyValues }, true);
        if (this.isMultiSelection) {
          this.setProperties({ value: this.values[this.values.length - 1] }, true);
        }
        this.validateValues(this.isMultiSelection, copyValues);
        this.update();
        this.changedArgs = { value: this.value, values: this.values };
        this.changeHandler();
      }
    };
    Calendar2.prototype.removeDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var index = 0; index < tempDates.length; index++) {
            for (var i = 0; i < copyValues.length; i++) {
              if (+copyValues[i] === +tempDates[index]) {
                copyValues.splice(i, 1);
              }
            }
          }
        } else {
          for (var i = 0; i < copyValues.length; i++) {
            if (+copyValues[i] === +dates) {
              copyValues.splice(i, 1);
            }
          }
        }
        this.setProperties({ values: copyValues }, false);
        this.update();
        if (this.isMultiSelection) {
          this.setProperties({ value: this.values[this.values.length - 1] }, true);
        }
        this.changedArgs = { value: this.value, values: this.values };
        this.changeHandler();
      }
    };
    Calendar2.prototype.setTodayDate = function(date) {
      var todayDate = /* @__PURE__ */ new Date(+date);
      this.setProperties({ value: todayDate }, true);
      _super.prototype.todayButtonClick.call(this, null, todayDate, true);
    };
    Calendar2.prototype.update = function() {
      this.validateDate();
      this.minMaxUpdate();
      _super.prototype.setValueUpdate.call(this);
    };
    Calendar2.prototype.selectDate = function(e, date, element) {
      _super.prototype.selectDate.call(this, e, date, element, this.isMultiSelection, this.values);
      if (this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0) {
        this.setProperties({ value: this.values[this.values.length - 1] }, true);
      }
      this.changedArgs = { value: this.value, values: this.values };
      this.changeHandler(e);
    };
    Calendar2.prototype.changeEvent = function(e) {
      if ((this.value && this.value.valueOf()) !== (this.previousDate && +this.previousDate.valueOf()) || this.isMultiSelection) {
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = /* @__PURE__ */ new Date(+this.value);
      }
    };
    Calendar2.prototype.triggerChange = function(e) {
      if (!isNullOrUndefined(this.todayButtonEvent) && this.isTodayClicked) {
        e = this.todayButtonEvent;
        this.isTodayClicked = false;
      }
      this.changedArgs.event = e || null;
      this.changedArgs.isInteracted = !isNullOrUndefined(e);
      if (!isNullOrUndefined(this.value)) {
        this.setProperties({ value: this.value }, true);
      }
      if (!this.isMultiSelection && +this.value !== Number.NaN && (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || this.previousDate === null && !isNaN(+this.value))) {
        this.changeEvent(e);
      } else if (!isNullOrUndefined(this.values) && this.previousValues !== this.values.length) {
        this.changeEvent(e);
        this.previousValues = this.values.length;
      }
    };
    __decorate19([
      Property(null)
    ], Calendar2.prototype, "value", void 0);
    __decorate19([
      Property(null)
    ], Calendar2.prototype, "values", void 0);
    __decorate19([
      Property(false)
    ], Calendar2.prototype, "isMultiSelection", void 0);
    __decorate19([
      Event()
    ], Calendar2.prototype, "change", void 0);
    Calendar2 = __decorate19([
      NotifyPropertyChanges
    ], Calendar2);
    return Calendar2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/islamic.js
var OTHERMONTH2 = "e-other-month";
var YEAR2 = "e-year";
var MONTH2 = "e-month";
var DECADE2 = "e-decade";
var DISABLED5 = "e-disabled";
var OVERLAY2 = "e-overlay";
var WEEKEND2 = "e-weekend";
var WEEKNUMBER2 = "e-week-number";
var SELECTED5 = "e-selected";
var FOCUSEDDATE2 = "e-focused-date";
var OTHERMONTHROW2 = "e-month-hide";
var TODAY2 = "e-today";
var LINK2 = "e-day";
var CELL2 = "e-cell";
var dayMilliSeconds2 = 864e5;
var minDecade = 2060;
var maxDecade = 2069;
var Islamic = (
  /** @class */
  function() {
    function Islamic3(instance) {
      this.calendarInstance = instance;
    }
    Islamic3.prototype.getModuleName = function() {
      return "islamic";
    };
    Islamic3.prototype.islamicTitleUpdate = function(date, view) {
      var globalize = new Internationalization(this.calendarInstance.locale);
      switch (view) {
        case "days":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, { type: "dateTime", format: "MMMMyyyy", calendar: "islamic" });
          break;
        case "months":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, { type: "dateTime", format: "yyyy", calendar: "islamic" });
      }
    };
    Islamic3.prototype.islamicRenderDays = function(currentDate, value, multiSelection, values) {
      var tdEles = [];
      var cellsCount = 42;
      var localDate = new Date(this.islamicInValue(currentDate));
      var minMaxDate;
      this.islamicTitleUpdate(currentDate, "days");
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = this.toGregorian(islamicDate.year, islamicDate.month, 1);
      var currentMonth = islamicDate.month;
      localDate = gregorianObject;
      while (localDate.getDay() !== this.calendarInstance.firstDayOfWeek) {
        this.calendarInstance.setStartDate(localDate, -1 * dayMilliSeconds2);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.calendarInstance.createElement("td", { className: CELL2 });
        var weekAnchor = this.calendarInstance.createElement("span");
        if (day % 7 === 0 && this.calendarInstance.weekNumber) {
          weekAnchor.textContent = "" + this.calendarInstance.getWeek(localDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER2);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.calendarInstance.minMaxDate(localDate);
        var dateFormatOptions = { type: "dateTime", skeleton: "full", calendar: "islamic" };
        var date = this.calendarInstance.globalize.parseDate(this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.islamicDayCell(localDate);
        var title = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "full", calendar: "islamic" });
        var dayLink = this.calendarInstance.createElement("span");
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "d", calendar: "islamic" });
        var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED5);
          addClass([tdEle], OVERLAY2);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        var hijriMonthObject = this.getIslamicDate(localDate);
        if (currentMonth !== hijriMonthObject.month) {
          addClass([tdEle], OTHERMONTH2);
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND2);
        }
        tdEle.appendChild(dayLink);
        this.calendarInstance.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.calendarInstance.renderDayCellArgs;
        this.calendarInstance.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          if (this.calendarInstance.isMultiSelection) {
            if (!isNullOrUndefined(this.calendarInstance.values) && this.calendarInstance.values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.calendarInstance.globalize.formatDate(argument.date, { type: "date", skeleton: "yMd", calendar: "islamic" }));
                var tempDateString = +new Date(this.calendarInstance.globalize.formatDate(this.calendarInstance.values[index], { type: "date", skeleton: "yMd", calendar: "islamic" }));
                if (localDateString === tempDateString) {
                  this.calendarInstance.values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (value && +value === +argument.date) {
            this.calendarInstance.setProperties({ value: null }, true);
          }
        }
        if (this.calendarInstance.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED5)) {
          addClass([tdEle], DISABLED5);
          addClass([tdEle], OVERLAY2);
          if (+this.calendarInstance.renderDayCellArgs.date === +this.calendarInstance.todayDate) {
            this.calendarInstance.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH2);
        var disabledCls = tdEle.classList.contains(DISABLED5);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        if (this.calendarInstance.isMultiSelection && !isNullOrUndefined(this.calendarInstance.values) && !otherMnthBool && !disabledCls) {
          for (var tempValue = 0; tempValue < this.calendarInstance.values.length; tempValue++) {
            var localDateString = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "short", calendar: "islamic" });
            var tempDateString = this.calendarInstance.globalize.formatDate(this.calendarInstance.values[tempValue], { type: "date", skeleton: "short", calendar: "islamic" });
            if (localDateString === tempDateString && this.calendarInstance.getDateVal(localDate, this.calendarInstance.values[tempValue])) {
              addClass([tdEle], SELECTED5);
            } else {
              this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (this.calendarInstance.values.length <= 0) {
            this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!otherMnthBool && !disabledCls && this.calendarInstance.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED5);
        } else {
          this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        }
        if (date.getDate() === (/* @__PURE__ */ new Date()).getDate() && date.getMonth() === (/* @__PURE__ */ new Date()).getMonth()) {
          if (date.getFullYear() === (/* @__PURE__ */ new Date()).getFullYear()) {
            addClass([tdEle], TODAY2);
          }
        }
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        tdEles.push(this.calendarInstance.renderDayCellArgs.element);
        this.calendarInstance.addDay(localDate, 1, null, this.calendarInstance.max, this.calendarInstance.min);
      }
      return tdEles;
    };
    Islamic3.prototype.islamicIconHandler = function() {
      new Date(this.islamicInValue(this.calendarInstance.currentDate)).setDate(1);
      var date = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      switch (this.calendarInstance.currentView()) {
        case "Month":
          {
            var prevMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.min) < 1;
            var nextMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevMonthCompare);
            this.calendarInstance.nextIconHandler(nextMonthCompare);
          }
          break;
        case "Year":
          {
            var prevYearCompare = this.hijriCompareYear(date, this.calendarInstance.min) < 1;
            var nextYearCompare = this.hijriCompareYear(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevYearCompare);
            this.calendarInstance.nextIconHandler(nextYearCompare);
          }
          break;
        case "Decade": {
          var startIslamicYear = 1361;
          var gregorianValue = HijriParser.toGregorian(startIslamicYear, 1, 1);
          var prevDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.min) < 1;
          var nextDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.max) > -1;
          prevDecadeCompare = HijriParser.toGregorian(this.calendarInstance.headerTitleElement.textContent.split("-")[0].trim(), 1, 1).getFullYear() === gregorianValue.getFullYear() ? true : prevDecadeCompare;
          this.calendarInstance.previousIconHandler(prevDecadeCompare);
          this.calendarInstance.nextIconHandler(nextDecadeCompare);
        }
      }
    };
    Islamic3.prototype.islamicNext = function() {
      this.calendarInstance.effect = "";
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 1, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month + 1, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Decade":
          this.calendarInstance.nextIconClicked = true;
          if (islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1) {
            islamicDate.year = islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1 ? islamicDate.year + 1 : islamicDate.year;
          }
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 10, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
      }
    };
    Islamic3.prototype.islamicPrevious = function() {
      var currentView = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      this.calendarInstance.effect = "";
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 1, islamicDate.month, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Decade":
          this.calendarInstance.previousIconClicked = true;
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 10, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
      }
    };
    Islamic3.prototype.islamicRenderYears = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var localDate = curDate;
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var mon = islamicDate.month;
      var yr = islamicDate.year;
      var curYrs = islamicDate.year;
      var minYr = this.getIslamicDate(this.calendarInstance.min).year;
      var minMonth = this.getIslamicDate(this.calendarInstance.min).month;
      var maxYr = this.getIslamicDate(this.calendarInstance.max).year;
      var maxMonth = this.getIslamicDate(this.calendarInstance.max).month;
      this.islamicTitleUpdate(this.calendarInstance.currentDate, "months");
      for (var month = 1; month <= 12; ++month) {
        var islamicDate_1 = this.getIslamicDate(localDate);
        var gregorianObject_1 = HijriParser.toGregorian(islamicDate_1.year, month, 1);
        localDate = gregorianObject_1;
        var tdEle = this.islamicDayCell(localDate);
        var dayLink = this.calendarInstance.createElement("span");
        var localMonth = value && this.getIslamicDate(value).month === this.getIslamicDate(localDate).month;
        var select3 = value && this.getIslamicDate(value).year === yr && localMonth;
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "dateTime", format: "MMM", calendar: "islamic" });
        if (this.calendarInstance.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.calendarInstance.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED5);
        } else if (!valueUtil && select3) {
          addClass([tdEle], SELECTED5);
        } else {
          if (this.getIslamicDate(localDate).month === mon && this.getIslamicDate(this.calendarInstance.currentDate).month === mon) {
            addClass([tdEle], FOCUSEDDATE2);
          }
        }
        if (!tdEle.classList.contains(DISABLED5)) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.islamicRenderTemplate(tdEles, numCells, YEAR2, e, value);
    };
    Islamic3.prototype.islamicRenderDecade = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var localYr = localDate.getFullYear();
      var startYr = new Date(this.islamicInValue(localYr - localYr % 10));
      var endYr = new Date(this.islamicInValue(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.calendarInstance.globalize.formatDate(startYr, { type: "dateTime", format: "y", calendar: "islamic" });
      var endHdrYr = this.calendarInstance.globalize.formatDate(endYr, { type: "dateTime", format: "y", calendar: "islamic" });
      if (this.calendarInstance.locale === "ar") {
        startHdrYr = Number(startHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
        endHdrYr = Number(endHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
      }
      var splityear = this.calendarInstance.headerElement.textContent.split("-");
      if (!isNullOrUndefined(e) && splityear[0] !== startHdrYr && e.action === "home" || !isNullOrUndefined(e) && e.type === "keydown" && e.action === "end") {
        startHdrYr = this.calendarInstance.headerElement.textContent.split("-")[0].trim();
        endHdrYr = this.calendarInstance.headerElement.textContent.split("-")[1].trim();
      }
      if (this.calendarInstance.islamicPreviousHeader) {
        startHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[0].trim();
        endHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[1].trim();
        this.calendarInstance.islamicPreviousHeader = null;
      }
      if (this.calendarInstance.previousIconClicked) {
        var i = 0;
        for (i = 0; i <= splityear.length; i++) {
          endHdrYr = endHdrYr - splityear[i] === 2 || splityear[i] - endHdrYr === 2 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr - splityear[i] === 3 || splityear[i] - endHdrYr === 3 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - splityear[i] === 4 || splityear[i] - endHdrYr === 4 ? (parseInt(endHdrYr, 10) + 3).toString() : endHdrYr - splityear[i] === 5 || splityear[i] - endHdrYr === 5 ? (parseInt(endHdrYr, 10) + 4).toString() : endHdrYr;
          if (endHdrYr - splityear[i] === 0 || splityear[i] - endHdrYr === 0) {
            endHdrYr = (parseInt(endHdrYr, 10) - 1).toString();
          }
        }
        if (endHdrYr - splityear[i] === 8 || splityear[i] - endHdrYr === 8) {
          endHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        if (endHdrYr - splityear[i] === 7 || splityear[i] - endHdrYr === 7) {
          endHdrYr = (parseInt(endHdrYr, 10) - 8).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        startHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(startHdrYr, 10) + 1).toString() : endHdrYr - startHdrYr === 11 ? (parseInt(startHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 12 ? (parseInt(startHdrYr, 10) + 3).toString() : startHdrYr;
        if (endHdrYr - startHdrYr === 8) {
          startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
        }
      }
      if (this.calendarInstance.nextIconClicked) {
        for (var i = 0; i <= splityear.length; i++) {
          if (startHdrYr - splityear[i] === 0 || splityear[i] - startHdrYr === 0) {
            startHdrYr = (parseInt(startHdrYr, 10) + 1).toString();
          }
          if (startHdrYr - splityear[i] === 2 && startHdrYr > splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
          }
          if (splityear[i] - startHdrYr === 1 && startHdrYr < splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) + 2).toString();
          }
        }
        if (startHdrYr - this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim() > 1) {
          startHdrYr = (parseInt(this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim(), 10) + 1).toString();
          endHdrYr = (parseInt(startHdrYr, 10) + 9).toString();
        }
        endHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(endHdrYr, 10) - 1).toString() : endHdrYr;
        endHdrYr = endHdrYr - startHdrYr === 7 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 8 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr;
      }
      if (this.calendarInstance.locale === "ar") {
        var startHeaderYear = this.calendarInstance.globalize.formatDate(startYr, { type: "dateTime", format: "y", calendar: "islamic" });
        var endHeaderYear = this.calendarInstance.globalize.formatDate(endYr, { type: "dateTime", format: "y", calendar: "islamic" });
        this.calendarInstance.headerTitleElement.textContent = startHeaderYear + " - " + endHeaderYear;
      } else {
        this.calendarInstance.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      }
      this.calendarInstance.nextIconClicked = this.calendarInstance.previousIconClicked = false;
      var year = (parseInt(startHdrYr, 10) - 2).toString();
      startFullYr = Math.round(parseInt(startHdrYr, 10) * 0.97 + 622);
      endFullYr = Math.round(parseInt(endHdrYr, 10) * 0.97 + 622);
      var startYear = Math.round(parseInt(year, 10) * 0.97 + 622);
      for (var rowCount = 1; rowCount <= yearCell; ++rowCount) {
        var year_1 = startYear + rowCount;
        localDate.setFullYear(year_1);
        localDate.setDate(1);
        localDate.setMonth(0);
        if (this.getIslamicDate(localDate).year - islamicDate.year > 1) {
          localDate.setMonth(1);
          rowCount = rowCount - 1;
          localDate.setFullYear(localDate.getFullYear() - 1);
        }
        islamicDate = this.getIslamicDate(localDate);
        var gregorianObject_2 = HijriParser.toGregorian(islamicDate.year, 1, 1);
        localDate = gregorianObject_2;
        if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || islamicDate.year >= startHdrYr && islamicDate.year <= endFullYr || islamicDate.year === parseInt(endHdrYr, 10) + 1) {
          var tdEle = this.islamicDayCell(localDate);
          attributes(tdEle, { "role": "gridcell" });
          var dayLink = this.calendarInstance.createElement("span");
          dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "dateTime", format: "y", calendar: "islamic" });
          if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || year_1 < startFullYr || year_1 > endFullYr && islamicDate.year !== parseInt(endHdrYr, 10)) {
            addClass([tdEle], OTHERMONTH2);
          } else if (year_1 < new Date(this.islamicInValue(this.calendarInstance.min)).getFullYear() || year_1 > new Date(this.islamicInValue(this.calendarInstance.max)).getFullYear()) {
            addClass([tdEle], DISABLED5);
          } else if (!isNullOrUndefined(value) && this.getIslamicDate(localDate).year === this.getIslamicDate(value).year) {
            addClass([tdEle], SELECTED5);
          } else {
            if (localDate.getFullYear() === this.calendarInstance.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED5)) {
              addClass([tdEle], FOCUSEDDATE2);
            }
          }
          if (!tdEle.classList.contains(DISABLED5)) {
            EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
          }
          tdEle.appendChild(dayLink);
          if (!isNullOrUndefined(e) && e.action === "home" && islamicDate.year.toString() === startHdrYr || !isNullOrUndefined(e) && e.action === "end" && islamicDate.year.toString() === endHdrYr) {
            addClass([tdEle], FOCUSEDDATE2);
          }
          tdEles.push(tdEle);
        }
      }
      this.islamicRenderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    Islamic3.prototype.islamicDayCell = function(localDate) {
      var dateFormatOptions = { skeleton: "full", type: "dateTime", calendar: "islamic" };
      var formatDate = this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions);
      var date = this.calendarInstance.globalize.parseDate(formatDate, dateFormatOptions);
      var value = date.valueOf();
      var attrs = {
        className: CELL2,
        attrs: { "id": "" + getUniqueID("" + value), "aria-selected": "false", "role": "gridcell" }
      };
      return this.calendarInstance.createElement("td", attrs);
    };
    Islamic3.prototype.islamicRenderTemplate = function(elements, count, classNm, e, value) {
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var trEle;
      this.calendarInstance.tableBodyElement = this.calendarInstance.createElement("tbody");
      this.calendarInstance.table.appendChild(this.calendarInstance.tableBodyElement);
      removeClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [MONTH2, DECADE2, YEAR2]);
      addClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowCount = 0;
      for (var dayCell = 0; dayCell < Math.round(elements.length / count); ++dayCell) {
        trEle = this.calendarInstance.createElement("tr", { attrs: { "role": "row" } });
        for (rowCount = 0 + rowCount; rowCount < row; rowCount++) {
          if (!elements[rowCount].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowCount].children[0])) {
            addClass([elements[rowCount].children[0]], [LINK2]);
            rippleEffect(elements[rowCount].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowCount]);
          if (this.calendarInstance.weekNumber && rowCount === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (!this.calendarInstance.weekNumber && rowCount === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (this.calendarInstance.weekNumber) {
            if (rowCount === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          } else {
            if (rowCount === numberCell && elements[numberCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          }
        }
        row = row + count;
        rowCount = rowCount + 0;
        this.calendarInstance.tableBodyElement.appendChild(trEle);
      }
      this.calendarInstance.table.querySelector("tbody").className = this.calendarInstance.effect;
      this.islamicIconHandler();
      if (view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView()) || view === 0 && view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView())) {
        this.calendarInstance.navigateHandler(e);
      }
      this.calendarInstance.setAriaActiveDescendant();
      this.calendarInstance.changedArgs = { value: this.calendarInstance.value, values: this.calendarInstance.values };
      this.calendarInstance.changeHandler();
    };
    Islamic3.prototype.islamicCompareMonth = function(start, end) {
      var hijriStart = this.getIslamicDate(start);
      var hijriEnd = this.getIslamicDate(end);
      var result;
      if (hijriStart.year > hijriEnd.year) {
        result = 1;
      } else if (hijriStart.year < hijriEnd.year) {
        result = -1;
      } else {
        result = hijriStart.month === hijriEnd.month ? 0 : hijriStart.month > hijriEnd.month ? 1 : -1;
      }
      return result;
    };
    Islamic3.prototype.islamicCompare = function(startDate, endDate, modifier) {
      var hijriStart = this.getIslamicDate(startDate);
      var hijriEnd = this.getIslamicDate(endDate);
      var start = hijriEnd.year;
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (hijriStart.year > end) {
        result = 1;
      } else if (this.calendarInstance.currentView() === "Decade" && hijriStart.year < start && !(startDate.getFullYear() >= minDecade && startDate.getFullYear() <= maxDecade)) {
        result = -1;
      } else if (hijriStart.year < start && this.calendarInstance.currentView() === "Year") {
        result = -1;
      }
      return result;
    };
    Islamic3.prototype.getIslamicDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    Islamic3.prototype.toGregorian = function(year, month, date) {
      return HijriParser.toGregorian(year, month, date);
    };
    Islamic3.prototype.hijriCompareYear = function(start, end) {
      return this.islamicCompare(start, end, 0);
    };
    Islamic3.prototype.hijriCompareDecade = function(start, end) {
      return this.islamicCompare(start, end, 10);
    };
    Islamic3.prototype.destroy = function() {
      this.calendarInstance = null;
    };
    Islamic3.prototype.islamicInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    return Islamic3;
  }()
);

// node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER = "e-date-wrapper";
var ROOT4 = "e-datepicker";
var LIBRARY = "e-lib";
var CONTROL3 = "e-control";
var POPUPWRAPPER = "e-popup-wrapper";
var INPUTWRAPPER = "e-input-group-icon";
var POPUP2 = "e-popup";
var INPUTCONTAINER = "e-input-group";
var INPUTFOCUS = "e-input-focus";
var INPUTROOT = "e-input";
var ERROR = "e-error";
var ACTIVE2 = "e-active";
var OVERFLOW = "e-date-overflow";
var DATEICON = "e-date-icon";
var ICONS2 = "e-icons";
var OPENDURATION = 300;
var OFFSETVALUE = 4;
var SELECTED6 = "e-selected";
var FOCUSEDDATE3 = "e-focused-date";
var NONEDIT = "e-non-edit";
var containerAttr = ["title", "class", "style"];
var DatePicker = (
  /** @class */
  function(_super) {
    __extends20(DatePicker2, _super);
    function DatePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isDateIconClicked = false;
      _this.isAltKeyPressed = false;
      _this.isInteracted = true;
      _this.invalidValueString = null;
      _this.checkPreviousValue = null;
      _this.maskedDateValue = "";
      _this.preventChange = false;
      _this.isIconClicked = false;
      _this.isDynamicValueChanged = false;
      _this.moduleName = _this.getModuleName();
      _this.isFocused = false;
      _this.isBlur = false;
      _this.isKeyAction = false;
      _this.datepickerOptions = options;
      return _this;
    }
    DatePicker2.prototype.render = function() {
      this.initialize();
      this.bindEvents();
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
      this.setTimeZone(this.serverTimezoneOffset);
    };
    DatePicker2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = offsetValue;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
        this.updateInput();
      }
    };
    DatePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    DatePicker2.prototype.setAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.updateIconState();
    };
    DatePicker2.prototype.updateIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDIT]);
        } else {
          addClass([this.inputWrapper.container], [NONEDIT]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDIT]);
      }
    };
    DatePicker2.prototype.initialize = function() {
      this.checkInvalidValue(this.value);
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setAllowEdit();
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInput(true);
        this.updateInputValue(this.maskedDateValue);
      } else if (!this.enableMask) {
        this.updateInput(true);
      }
      this.previousElementValue = this.inputElement.value;
      this.previousDate = !isNullOrUndefined(this.value) ? /* @__PURE__ */ new Date(+this.value) : null;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputValueCopy = this.value;
    };
    DatePicker2.prototype.createInput = function() {
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-invalid": "false",
        "aria-label": this.getModuleName()
      };
      if (this.getModuleName() === "datepicker") {
        var l10nLocale = { placeholder: this.placeholder };
        this.globalize = new Internationalization(this.locale);
        this.l10n = new L10n("datepicker", l10nLocale, this.locale);
        this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      }
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      var isBindClearAction = this.enableMask ? false : true;
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        bindClearAction: isBindClearAction,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [INPUTWRAPPER + " " + DATEICON + " " + ICONS2]
      }, this.createElement);
      this.setWidth(this.width);
      if (this.inputElement.name !== "") {
        this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name"));
      } else {
        this.inputElement.setAttribute("name", "" + this.element.id);
      }
      attributes(this.inputElement, ariaAttrs);
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
      Input.addAttributes({ "aria-label": "select", "role": "button" }, this.inputWrapper.buttons[0]);
      addClass([this.inputWrapper.container], DATEWRAPPER);
    };
    DatePicker2.prototype.updateInput = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      if (this.value && !this.isCalendar()) {
        this.disabledDates(isDynamic, isBlur);
      }
      if (isNaN(+new Date(this.checkValue(this.value)))) {
        this.setProperties({ value: null }, true);
      }
      if (this.strictMode) {
        _super.prototype.validateDate.call(this);
        this.minMaxUpdates();
        _super.prototype.minMaxUpdate.call(this);
      }
      if (!isNullOrUndefined(this.value)) {
        var dateValue = this.value;
        var dateString = void 0;
        var tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            });
          } else {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            });
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          dateString = this.globalize.formatDate(this.value, formatOptions);
        }
        if (+dateValue <= +this.max && +dateValue >= +this.min) {
          this.updateInputValue(dateString);
        } else {
          var value = +dateValue >= +this.max || !+this.value || (!+this.value || +dateValue <= +this.min);
          if (!this.strictMode && value) {
            this.updateInputValue(dateString);
          }
        }
      }
      if (isNullOrUndefined(this.value) && this.strictMode) {
        if (!this.enableMask) {
          this.updateInputValue("");
        } else {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.updateInputValue(this.invalidValueString);
      }
      this.changedArgs = { value: this.value };
      this.errorClass();
      this.updateIconState();
    };
    DatePicker2.prototype.minMaxUpdates = function() {
      if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {
        this.setProperties({ value: this.min }, true);
        this.changedArgs = { value: this.value };
      } else {
        if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {
          this.setProperties({ value: this.max }, true);
          this.changedArgs = { value: this.value };
        }
      }
    };
    DatePicker2.prototype.checkStringValue = function(val) {
      var returnDate = null;
      var formatOptions = null;
      var formatDateTime = null;
      if (this.getModuleName() === "datetimepicker") {
        var culture = new Internationalization(this.locale);
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd" };
          formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime" };
        } else {
          formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime", calendar: "islamic" };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
      }
      returnDate = this.checkDateValue(this.globalize.parseDate(val, formatOptions));
      if (isNullOrUndefined(returnDate) && this.getModuleName() === "datetimepicker") {
        returnDate = this.checkDateValue(this.globalize.parseDate(val, formatDateTime));
      }
      return returnDate;
    };
    DatePicker2.prototype.checkInvalidValue = function(value) {
      if (!(value instanceof Date) && !isNullOrUndefined(value)) {
        var valueDate = null;
        var valueString = value;
        if (typeof value === "number") {
          valueString = value.toString();
        }
        var formatOptions = null;
        var formatDateTime = null;
        if (this.getModuleName() === "datetimepicker") {
          var culture = new Internationalization(this.locale);
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd" };
            formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime" };
          } else {
            formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
            formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime", calendar: "islamic" };
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
        }
        var invalid = false;
        if (typeof valueString !== "string") {
          valueString = null;
          invalid = true;
        } else {
          if (typeof valueString === "string") {
            valueString = valueString.trim();
          }
          valueDate = this.checkStringValue(valueString);
          if (!valueDate) {
            var extISOString = null;
            var basicISOString = null;
            extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
              invalid = true;
            } else {
              valueDate = new Date(valueString);
            }
          }
        }
        if (invalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({ value: null }, true);
        } else {
          this.setProperties({ value: valueDate }, true);
        }
      }
    };
    DatePicker2.prototype.bindInputEvent = function() {
      if (!isNullOrUndefined(this.formatString) || this.enableMask) {
        if (this.enableMask || this.formatString.indexOf("y") === -1) {
          EventHandler.add(this.inputElement, "input", this.inputHandler, this);
        } else {
          EventHandler.remove(this.inputElement, "input", this.inputHandler);
        }
      }
    };
    DatePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler, this);
      EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "keyup", this.keyupHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      this.bindInputEvent();
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.resetFormHandler, this);
      }
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardModules = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyActionHandle.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DatePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown":
        case "Home":
        case "End":
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            if (e.code !== "Delete") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    DatePicker2.prototype.unBindEvents = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler);
      }
      EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "keyup", this.keyupHandler);
      if (this.enableMask) {
        EventHandler.remove(this.inputElement, "keydown", this.keydownHandler);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
    };
    DatePicker2.prototype.resetFormHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var value = this.inputElement.getAttribute("value");
        if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
          value = "";
          this.inputValueCopy = null;
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({ value: this.inputValueCopy }, true);
        this.restoreValue();
        if (this.inputElement) {
          this.updateInputValue(value);
          this.errorClass();
        }
      }
    };
    DatePicker2.prototype.restoreValue = function() {
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.previousDate = this.value;
      this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.globalize.formatDate(this.inputValueCopy, {
        format: this.formatString,
        type: "dateTime",
        skeleton: "yMd"
      });
    };
    DatePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    DatePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    DatePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      this.clear(e);
    };
    DatePicker2.prototype.mouseUpHandler = function(e) {
      if (this.enableMask) {
        e.preventDefault();
        this.notify("setMaskSelection", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.clear = function(event2) {
      this.setProperties({ value: null }, true);
      if (!this.enableMask) {
        this.updateInputValue("");
      }
      var clearedArgs = {
        event: event2
      };
      this.trigger("cleared", clearedArgs);
      this.invalidValueString = "";
      this.updateInput();
      this.popupUpdate();
      this.changeEvent(event2);
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    DatePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnDateIconClick");
    };
    DatePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DatePicker2.prototype.dateIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
        this.inputElement.blur();
      }
      e.preventDefault();
      if (!this.readonly) {
        if (this.isCalendar()) {
          this.hide(e);
        } else {
          this.isDateIconClicked = true;
          this.show(null, e);
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          this.inputElement.focus();
          addClass([this.inputWrapper.container], [INPUTFOCUS]);
          addClass(this.inputWrapper.buttons, ACTIVE2);
        }
      }
      this.isIconClicked = false;
    };
    DatePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (!isNullOrUndefined(this.htmlAttributes["" + key])) {
            if (containerAttr.indexOf(key) > -1) {
              if (key === "class") {
                var updatedClassValues = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
                if (updatedClassValues !== "") {
                  addClass([this.inputWrapper.container], updatedClassValues.split(" "));
                }
              } else if (key === "style") {
                var setStyle = this.inputWrapper.container.getAttribute(key);
                if (!isNullOrUndefined(setStyle)) {
                  if (setStyle.charAt(setStyle.length - 1) === ";") {
                    setStyle = setStyle + this.htmlAttributes["" + key];
                  } else {
                    setStyle = setStyle + ";" + this.htmlAttributes["" + key];
                  }
                } else {
                  setStyle = this.htmlAttributes["" + key];
                }
                this.inputWrapper.container.setAttribute(key, setStyle);
              } else {
                this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
              }
            }
          }
        }
      }
    };
    DatePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DatePicker2.prototype.updateCssClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newCssClass, [this.inputWrapper.container], oldCssClass);
      if (this.popupWrapper) {
        Input.setCssClass(newCssClass, [this.popupWrapper], oldCssClass);
      }
    };
    DatePicker2.prototype.calendarKeyActionHandle = function(e) {
      switch (e.action) {
        case "escape":
          if (this.isCalendar()) {
            this.hide(e);
          } else {
            this.inputWrapper.container.children[this.index].blur();
          }
          break;
        case "enter":
          if (!this.isCalendar()) {
            this.show(null, e);
          } else {
            if (+this.value !== +this.currentDate && !this.isCalendar()) {
              this.inputWrapper.container.children[this.index].focus();
            }
          }
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          break;
      }
    };
    DatePicker2.prototype.inputFocusHandler = function() {
      this.isFocused = true;
      if (!this.enabled) {
        return;
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      var focusArguments = {
        model: this
      };
      this.isDateIconClicked = false;
      this.trigger("focus", focusArguments);
      this.updateIconState();
      if (this.openOnFocus && !this.isIconClicked) {
        this.show();
      }
    };
    DatePicker2.prototype.inputHandler = function() {
      this.isPopupClicked = false;
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.strictModeUpdate();
      if (this.inputElement.value === "" && isNullOrUndefined(this.value)) {
        this.invalidValueString = null;
        this.updateInputValue("");
      }
      this.isBlur = true;
      this.updateInput(false, true);
      this.isBlur = false;
      this.popupUpdate();
      this.changeTrigger(e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      this.errorClass();
      if (this.isCalendar() && document.activeElement === this.inputElement) {
        this.hide(e);
      }
      if (this.getModuleName() === "datepicker") {
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
      if (this.isCalendar()) {
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
          eventName: "keydown",
          keyAction: this.calendarKeyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
      this.isPopupClicked = false;
    };
    DatePicker2.prototype.documentHandler = function(e) {
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(e.target) && e.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(e.target)) && e.type !== "touchstart") {
        e.preventDefault();
      }
      var target = e.target;
      if (!closest(target, ".e-datepicker.e-popup-wrapper") && !isNullOrUndefined(this.inputWrapper) && !(closest(target, "." + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains("e-day") && !target.classList.contains("e-dlg-overlay")) {
        this.hide(e);
        this.focusOut();
      } else if (closest(target, ".e-datepicker.e-popup-wrapper")) {
        if (target.classList.contains("e-day") && !isNullOrUndefined(e.target.parentElement) && e.target.parentElement.classList.contains("e-selected") && closest(target, ".e-content") && closest(target, ".e-content").classList.contains("e-" + this.depth.toLowerCase())) {
          this.hide(e);
        } else if (closest(target, ".e-footer-container") && target.classList.contains("e-today") && target.classList.contains("e-btn") && +/* @__PURE__ */ new Date(+this.value) === +_super.prototype.generateTodayVal.call(this, this.value)) {
          this.hide(e);
        }
      }
    };
    DatePicker2.prototype.inputKeyActionHandle = function(e) {
      var clickedView = this.currentView();
      switch (e.action) {
        case "altUpArrow":
          this.isAltKeyPressed = false;
          this.hide(e);
          this.inputElement.focus();
          break;
        case "altDownArrow":
          this.isAltKeyPressed = true;
          this.strictModeUpdate();
          this.updateInput();
          this.changeTrigger(e);
          if (this.getModuleName() === "datepicker") {
            this.show(null, e);
          }
          break;
        case "escape":
          this.hide(e);
          break;
        case "enter":
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (!this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          if (this.isCalendar()) {
            e.preventDefault();
            e.stopPropagation();
          }
          break;
        case "tab":
        case "shiftTab": {
          var start = this.inputElement.selectionStart;
          var end = this.inputElement.selectionEnd;
          if (this.enableMask && !this.popupObj && !this.readonly) {
            var length_1 = this.inputElement.value.length;
            if (start === 0 && end === length_1 || end !== length_1 && e.action === "tab" || start !== 0 && e.action === "shiftTab") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
            start = this.inputElement.selectionStart;
            end = this.inputElement.selectionEnd;
          }
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (this.enableMask) {
            this.inputElement.selectionStart = start;
            this.inputElement.selectionEnd = end;
          }
          if (e.action === "tab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            e.preventDefault();
            this.headerTitleElement.focus();
          }
          if (e.action === "shiftTab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          break;
        }
        default:
          this.defaultAction(e);
          if (e.action === "select" && clickedView === this.depth) {
            this.hide(e);
          }
      }
    };
    DatePicker2.prototype.defaultAction = function(e) {
      this.previousDate = !isNullOrUndefined(this.value) && /* @__PURE__ */ new Date(+this.value) || null;
      if (this.isCalendar()) {
        _super.prototype.keyActionHandle.call(this, e);
        if (this.isCalendar()) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      }
    };
    DatePicker2.prototype.popupUpdate = function() {
      if (isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || (this.getModuleName() !== "datetimepicker" && +this.value !== +this.previousDate || this.getModuleName() === "datetimepicker" && +this.value !== +this.previousDateTime)) {
        if (this.popupObj) {
          if (this.popupObj.element.querySelectorAll("." + SELECTED6).length > 0) {
            removeClass(this.popupObj.element.querySelectorAll("." + SELECTED6), [SELECTED6]);
          }
        }
        if (!isNullOrUndefined(this.value)) {
          if (+this.value >= +this.min && +this.value <= +this.max) {
            var targetdate = new Date(this.checkValue(this.value));
            _super.prototype.navigateTo.call(this, "Month", targetdate);
          }
        }
      }
    };
    DatePicker2.prototype.strictModeUpdate = function() {
      var format;
      var pattern = /^y/;
      var charPattern = /[^a-zA-Z]/;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        format = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else if (!pattern.test(this.formatString) || charPattern.test(this.formatString)) {
        format = isNullOrUndefined(this.formatString) ? this.formatString : this.formatString.replace("dd", "d");
      }
      if (!isNullOrUndefined(format)) {
        var len = format.split("M").length - 1;
        if (len < 3) {
          format = format.replace("MM", "M");
        }
      } else {
        format = this.formatString;
      }
      var dateOptions;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        dateOptions = formatOptions;
      }
      var date;
      if (typeof this.inputElement.value === "string") {
        this.inputElement.value = this.inputElement.value.trim();
      }
      if (this.getModuleName() === "datetimepicker") {
        if (this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions))) {
          var modifiedValue = this.inputElement.value.replace(/(am|pm|Am|aM|pM|Pm)/g, function(match) {
            return match.toLocaleUpperCase();
          });
          date = this.globalize.parseDate(modifiedValue, dateOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.parseDate(this.inputElement.value, formatOptions);
        }
      } else {
        date = this.globalize.parseDate(this.inputElement.value, dateOptions);
        date = !isNullOrUndefined(date) && isNaN(+date) ? null : date;
        if (!isNullOrUndefined(this.formatString) && this.inputElement.value !== "" && this.strictMode) {
          if ((this.isPopupClicked || !this.isPopupClicked && this.inputElement.value === this.previousElementValue) && this.formatString.indexOf("y") === -1) {
            date.setFullYear(this.value.getFullYear());
          }
        }
      }
      if (this.getModuleName() === "datepicker" && (this.value && !isNaN(+this.value)) && date) {
        date.setHours(this.value.getHours(), this.value.getMinutes(), this.value.getSeconds(), this.value.getMilliseconds());
      }
      if (this.strictMode && date) {
        this.updateInputValue(this.globalize.formatDate(date, dateOptions));
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({ value: date }, true);
        }
      } else if (!this.strictMode) {
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({ value: date }, true);
        }
      }
      if (this.strictMode && !date && this.inputElement.value === (this.enableMask ? this.maskedDateValue : "")) {
        this.setProperties({ value: null }, true);
      }
      if (isNaN(+this.value)) {
        this.setProperties({ value: null }, true);
      }
      if (isNullOrUndefined(this.value)) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
    };
    DatePicker2.prototype.createCalendar = function() {
      var _this = this;
      this.popupWrapper = this.createElement("div", { className: "" + ROOT4 + " " + POPUPWRAPPER, id: this.inputElement.id + "_options" });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (Browser.isDevice) {
        this.modelHeader();
        this.modal = this.createElement("div");
        this.modal.className = "" + ROOT4 + " e-date-modal";
        document.body.className += " " + OVERFLOW;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
      this.calendarElement.querySelector("table tbody").className = "";
      this.popupObj = new Popup(this.popupWrapper, {
        content: this.calendarElement,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? { X: "center", Y: "center" } : this.enableRtl ? { X: "right", Y: "bottom" } : { X: "left", Y: "bottom" },
        offsetY: OFFSETVALUE,
        targetType: "container",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : this.enableRtl ? { X: "fit", Y: "flip" } : { X: "flip", Y: "flip" },
        open: function() {
          if (Browser.isDevice && _this.fullScreenMode) {
            _this.iconRight = parseInt(window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).marginRight, 10) > 16 ? true : false;
            _this.touchModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
              swipe: _this.CalendarSwipeHandler.bind(_this)
            });
            EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.TouchStartHandler, _this);
          }
          if (_this.getModuleName() !== "datetimepicker") {
            if (document.activeElement !== _this.inputElement) {
              _this.defaultKeyConfigs = extend(_this.defaultKeyConfigs, _this.keyConfigs);
              _this.calendarElement.children[1].firstElementChild.focus();
              _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
              _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
            }
          }
        },
        close: function() {
          if (_this.isDateIconClicked) {
            _this.inputWrapper.container.children[_this.index].focus();
          }
          if (_this.value) {
            _this.disabledDates();
          }
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          _this.resetCalendar();
          detach(_this.popupWrapper);
          _this.popupObj = _this.popupWrapper = null;
          _this.preventArgs = null;
          _this.calendarKeyboardModules = null;
          _this.setAriaAttributes();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      this.popupObj.element.className += " " + this.cssClass;
      this.setAriaAttributes();
    };
    DatePicker2.prototype.CalendarSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRight) {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchStart = false;
      }
    };
    DatePicker2.prototype.TouchStartHandler = function(e) {
      this.touchStart = true;
    };
    DatePicker2.prototype.setAriaDisabled = function() {
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
    };
    DatePicker2.prototype.modelHeader = function() {
      var dateOptions;
      var modelHeader = this.createElement("div", { className: "e-model-header" });
      var yearHeading = this.createElement("h1", { className: "e-model-year" });
      var h2 = this.createElement("div");
      var daySpan = this.createElement("span", { className: "e-model-day" });
      var monthSpan = this.createElement("span", { className: "e-model-month" });
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "y", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "y", skeleton: "dateTime", calendar: "islamic" };
      }
      yearHeading.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "E", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "E", skeleton: "dateTime", calendar: "islamic" };
      }
      daySpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions) + ", ";
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "MMM d", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "MMM d", skeleton: "dateTime", calendar: "islamic" };
      }
      monthSpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.fullScreenMode) {
        var modelCloseIcon = this.createElement("span", { className: "e-popup-close" });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelCloseHandler, this);
        var modelTodayButton = this.calendarElement.querySelector("button.e-today");
        h2.classList.add("e-day-wrapper");
        modelTodayButton.classList.add("e-outline");
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTodayButton);
      }
      if (!this.fullScreenMode) {
        modelHeader.appendChild(yearHeading);
      }
      h2.appendChild(daySpan);
      h2.appendChild(monthSpan);
      modelHeader.appendChild(h2);
      this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
    };
    DatePicker2.prototype.modelCloseHandler = function(e) {
      this.hide();
    };
    DatePicker2.prototype.changeTrigger = function(event2) {
      if (this.inputElement.value !== this.previousElementValue) {
        if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
          if (this.isDynamicValueChanged && this.isCalendar()) {
            this.popupUpdate();
          }
          this.changedArgs.value = this.value;
          this.changedArgs.event = event2 || null;
          this.changedArgs.element = this.element;
          this.changedArgs.isInteracted = !isNullOrUndefined(event2);
          if (this.isAngular && this.preventChange) {
            this.preventChange = false;
          } else {
            this.trigger("change", this.changedArgs);
          }
          this.previousElementValue = this.inputElement.value;
          this.previousDate = !isNaN(+new Date(this.checkValue(this.value))) ? new Date(this.checkValue(this.value)) : null;
          this.isInteracted = true;
        }
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.navigatedEvent = function() {
      this.trigger("navigated", this.navigatedArgs);
    };
    DatePicker2.prototype.keyupHandler = function(e) {
      this.isKeyAction = this.inputElement.value !== this.previousElementValue ? true : false;
    };
    DatePicker2.prototype.changeEvent = function(event2) {
      if (!this.isIconClicked && !(this.isBlur || this.isKeyAction)) {
        this.selectCalendar(event2);
      }
      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
        this.changedArgs.event = event2 ? event2 : null;
        this.changedArgs.element = this.element;
        this.changedArgs.isInteracted = this.isInteracted;
        if (!this.isDynamicValueChanged) {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = this.value && /* @__PURE__ */ new Date(+this.value);
        if (!this.isDynamicValueChanged) {
          this.hide(event2);
        }
        this.previousElementValue = this.inputElement.value;
        this.errorClass();
      } else if (event2) {
        this.hide(event2);
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({ args: [this], member: "islamic", name: "Islamic" });
      }
      if (this.enableMask) {
        modules.push({ args: [this], member: "MaskedDateTime" });
      }
      return modules;
    };
    DatePicker2.prototype.selectCalendar = function(e) {
      var date;
      var tempFormat;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else {
        tempFormat = this.formatString;
      }
      if (this.value) {
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: tempFormat, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: tempFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        }
        if (this.enableMask) {
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!isNullOrUndefined(date)) {
        this.updateInputValue(date);
        if (this.enableMask) {
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.isCalendar = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + POPUPWRAPPER)) {
        return true;
      }
      return false;
    };
    DatePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else if (typeof width === "string") {
        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DatePicker2.prototype.show = function(type, e) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        var prevent_1 = true;
        var outOfRange = void 0;
        if (!isNullOrUndefined(this.value) && !(+this.value >= +new Date(this.checkValue(this.min)) && +this.value <= +new Date(this.checkValue(this.max)))) {
          outOfRange = new Date(this.checkValue(this.value));
          this.setProperties({ "value": null }, true);
        } else {
          outOfRange = this.value || null;
        }
        if (!this.isCalendar()) {
          _super.prototype.render.call(this);
          this.setProperties({ "value": outOfRange || null }, true);
          this.previousDate = outOfRange;
          this.createCalendar();
        }
        if (Browser.isDevice) {
          this.mobilePopupWrapper = this.createElement("div", { className: "e-datepick-mob-popup-wrap" });
          document.body.appendChild(this.mobilePopupWrapper);
        }
        this.preventArgs = {
          preventDefault: function() {
            prevent_1 = false;
          },
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          appendTo: Browser.isDevice ? this.mobilePopupWrapper : document.body
        };
        var eventArgs = this.preventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.preventArgs = eventArgs2;
          if (prevent_1 && !_this.preventArgs.cancel) {
            addClass(_this.inputWrapper.buttons, ACTIVE2);
            _this.preventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupObj.refreshPosition(_this.inputElement);
            var openAnimation = {
              name: "FadeIn",
              duration: Browser.isDevice ? 0 : OPENDURATION
            };
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _super.prototype.setOverlayIndex.call(_this, _this.mobilePopupWrapper, _this.popupObj.element, _this.modal, Browser.isDevice);
            _this.setAriaAttributes();
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.popupObj = null;
          }
          if (!isNullOrUndefined(_this.inputElement) && _this.inputElement.value === "") {
            if (!isNullOrUndefined(_this.tableBodyElement) && _this.tableBodyElement.querySelectorAll("td.e-selected").length > 0) {
              addClass([_this.tableBodyElement.querySelector("td.e-selected")], FOCUSEDDATE3);
              removeClass(_this.tableBodyElement.querySelectorAll("td.e-selected"), SELECTED6);
            }
          }
          EventHandler.add(document, "mousedown touchstart", _this.documentHandler, _this);
        });
        if (Browser.isDevice) {
          var dlgOverlay = this.createElement("div", { className: "e-dlg-overlay" });
          dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
          this.mobilePopupWrapper.appendChild(dlgOverlay);
        }
      }
    };
    DatePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var prevent_2 = true;
        this.preventArgs = {
          preventDefault: function() {
            prevent_2 = false;
          },
          popup: this.popupObj,
          event: event2 || null,
          cancel: false
        };
        removeClass(this.inputWrapper.buttons, ACTIVE2);
        removeClass([document.body], OVERFLOW);
        var eventArgs = this.preventArgs;
        if (this.isCalendar()) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventCallback(prevent_2, eventArgs2);
          });
        } else {
          this.closeEventCallback(prevent_2, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DatePicker2.prototype.closeEventCallback = function(prevent, eventArgs) {
      this.preventArgs = eventArgs;
      if (this.isCalendar() && (prevent && !this.preventArgs.cancel)) {
        this.popupObj.hide();
        this.isAltKeyPressed = false;
        this.keyboardModule.destroy();
        removeClass(this.inputWrapper.buttons, ACTIVE2);
      }
      this.setAriaAttributes();
      if (Browser.isDevice && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
      if (Browser.isDevice) {
        if (!isNullOrUndefined(this.mobilePopupWrapper) && (prevent && (isNullOrUndefined(this.preventArgs) || !this.preventArgs.cancel))) {
          this.mobilePopupWrapper.remove();
          this.mobilePopupWrapper = null;
        }
      }
      EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DatePicker2.prototype.focusIn = function(triggerEvent) {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS]);
      }
    };
    DatePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS]);
        this.inputElement.blur();
      }
    };
    DatePicker2.prototype.currentView = function() {
      var currentView;
      if (this.calendarElement) {
        currentView = _super.prototype.currentView.call(this);
      }
      return currentView;
    };
    DatePicker2.prototype.navigateTo = function(view, date) {
      if (this.calendarElement) {
        _super.prototype.navigateTo.call(this, view, date);
      }
    };
    DatePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      _super.prototype.destroy.call(this);
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      if (!isNullOrUndefined(this.keyboardModules)) {
        this.keyboardModules.destroy();
      }
      if (this.popupObj && this.popupObj.element.classList.contains(POPUP2)) {
        _super.prototype.destroy.call(this);
      }
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-disabled": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-label": this.getModuleName()
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.inputElementCopy.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
        this.ensureInputAttribute();
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObj = this.popupWrapper = null;
        this.keyboardModule.destroy();
      }
      if (this.ngTag === null) {
        if (this.inputElement) {
          if (!isNullOrUndefined(this.inputWrapper)) {
            this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement);
          }
          removeClass([this.inputElement], [INPUTROOT]);
        }
        removeClass([this.element], [ROOT4]);
        if (!isNullOrUndefined(this.inputWrapper)) {
          detach(this.inputWrapper.container);
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
      this.inputWrapper = null;
      this.keyboardModules = null;
    };
    DatePicker2.prototype.ensureInputAttribute = function() {
      var prop = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        prop[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < prop.length; i++) {
        if (isNullOrUndefined(this.inputElementCopy.getAttribute(prop[i]))) {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(prop[i]);
        } else {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = this.inputElementCopy.getAttribute(prop[i]);
          }
          this.inputElement.setAttribute(prop[i], this.inputElementCopy.getAttribute(prop[i]));
        }
      }
    };
    DatePicker2.prototype.preRender = function() {
      this.inputElementCopy = this.element.cloneNode(true);
      removeClass([this.inputElementCopy], [ROOT4, CONTROL3, LIBRARY]);
      this.inputElement = this.element;
      this.formElement = closest(this.inputElement, "form");
      this.index = this.showClearButton ? 2 : 1;
      this.ngTag = null;
      if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
        this.ngTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      if (this.element.getAttribute("id")) {
        if (this.ngTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        if (this.getModuleName() === "datetimepicker") {
          this.element.id = getUniqueID("ej2-datetimepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, { "id": this.element.id + "_input" });
          }
        } else {
          this.element.id = getUniqueID("ej2-datepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, { "id": this.element.id + "_input" });
          }
        }
      }
      if (this.ngTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.checkHtmlAttributes(false);
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
    };
    DatePicker2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        altUpArrow: "alt+uparrow",
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        shiftTab: "shift+tab",
        tab: "tab"
      };
      return this.defaultKeyConfigs;
    };
    DatePicker2.prototype.validationAttribute = function(target, inputElement) {
      var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      inputElement.setAttribute("name", nameAttribute);
      target.removeAttribute("name");
      var attribute = ["required", "aria-required", "form"];
      for (var i = 0; i < attribute.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attribute[i]))) {
          continue;
        }
        var attr = target.getAttribute(attribute[i]);
        inputElement.setAttribute(attribute[i], attr);
        target.removeAttribute(attribute[i]);
      }
    };
    DatePicker2.prototype.checkFormat = function() {
      var culture = new Internationalization(this.locale);
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = culture.getDatePattern({ skeleton: skeletonString, type: "dateTime" });
          } else {
            this.formatString = culture.getDatePattern({ skeleton: skeletonString, type: "date" });
          }
        } else {
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = this.dateTimeFormat;
          } else {
            this.formatString = null;
          }
        }
      } else {
        this.formatString = null;
      }
    };
    DatePicker2.prototype.checkHtmlAttributes = function(dynamic) {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      var attributes2 = dynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type"];
      var options;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          options = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          options = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
      }
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["enabled"] === void 0 || dynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled }, !dynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["readonly"] === void 0 || dynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !dynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["placeholder"] === void 0 || dynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !dynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "value":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["value"] === void 0 || dynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !dynamic);
              }
              break;
            case "min":
              if (+this.min === +new Date(1900, 0, 1) || dynamic) {
                var min = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(min), {}), !dynamic);
              }
              break;
            case "max":
              if (+this.max === +new Date(2099, 11, 31) || dynamic) {
                var max = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(max), {}), !dynamic);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DatePicker2.prototype.getModuleName = function() {
      return "datepicker";
    };
    DatePicker2.prototype.disabledDates = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      var globalize;
      var valueCopy = this.checkDateValue(this.value) ? /* @__PURE__ */ new Date(+this.value) : new Date(this.checkValue(this.value));
      var previousValCopy = this.previousDate;
      this.minMaxUpdates();
      if (!isDynamic || isDynamic && !isNullOrUndefined(this.renderDayCell)) {
        _super.prototype.render.call(this);
      }
      this.previousDate = previousValCopy;
      var date = valueCopy && +valueCopy;
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + date);
      if (!this.strictMode) {
        if (typeof this.value === "string" || typeof this.value === "object" && +this.value !== +valueCopy) {
          this.setProperties({ value: valueCopy }, true);
        }
      }
      if (!isNullOrUndefined(this.calendarElement) && !isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {
        if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled")) {
          if (!this.strictMode) {
            this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
          }
        }
      }
      var inputVal;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          });
        } else {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          });
        }
        inputVal = globalize;
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        inputVal = this.globalize.formatDate(valueCopy, formatOptions);
      }
      if (!this.popupObj) {
        this.updateInputValue(inputVal);
        if (this.enableMask) {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime",
            isBlur
          });
        }
      }
    };
    DatePicker2.prototype.setAriaAttributes = function() {
      if (this.isCalendar()) {
        Input.addAttributes({ "aria-expanded": "true" }, this.inputElement);
        attributes(this.inputElement, { "aria-owns": this.inputElement.id + "_options" });
        attributes(this.inputElement, { "aria-controls": this.inputElement.id });
        if (this.value) {
          attributes(this.inputElement, { "aria-activedescendant": "" + this.setActiveDescendant() });
        }
      } else {
        Input.addAttributes({ "aria-expanded": "false" }, this.inputElement);
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DatePicker2.prototype.errorClass = function() {
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value);
      var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
      if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.min) && !isNullOrUndefined(this.max) && !(new Date(this.value).setMilliseconds(0) >= new Date(this.min).setMilliseconds(0) && new Date(this.value).setMilliseconds(0) <= new Date(this.max).setMilliseconds(0)) || (!this.strictMode && this.inputElement.value !== "" && this.inputElement.value !== this.maskedDateValue && isNullOrUndefined(this.value) || isDisabledDate)) {
        addClass([this.inputWrapper.container], ERROR);
        attributes(this.inputElement, { "aria-invalid": "true" });
      } else if (!isNullOrUndefined(this.inputWrapper)) {
        removeClass([this.inputWrapper.container], ERROR);
        attributes(this.inputElement, { "aria-invalid": "false" });
      }
    };
    DatePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.isInteracted = false;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            this.previousElementValue = this.inputElement.value;
            if (isNullOrUndefined(this.value)) {
              if (this.enableMask) {
                this.updateInputValue(this.maskedDateValue);
              } else {
                this.updateInputValue("");
              }
              this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
            }
            this.updateInput(true);
            if (+this.previousDate !== +this.value) {
              this.changeTrigger(null);
            }
            this.isInteracted = true;
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "format":
            this.checkFormat();
            this.bindInputEvent();
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "allowEdit":
            this.setAllowEdit();
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            this.setAriaDisabled();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.datepickerOptions && this.datepickerOptions.placeholder == null) {
              this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "start":
          case "depth":
            this.checkView();
            if (this.calendarElement) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            this.index = this.showClearButton ? 2 : 1;
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
              this.bindInputEvent();
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
          default:
            if (this.calendarElement && this.isCalendar()) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "width", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "value", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "cssClass", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "strictMode", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "format", void 0);
    __decorate20([
      Property(true)
    ], DatePicker2.prototype, "enabled", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "fullScreenMode", void 0);
    __decorate20([
      Property({})
    ], DatePicker2.prototype, "htmlAttributes", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "values", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "isMultiSelection", void 0);
    __decorate20([
      Property(true)
    ], DatePicker2.prototype, "showClearButton", void 0);
    __decorate20([
      Property(true)
    ], DatePicker2.prototype, "allowEdit", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "keyConfigs", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "enablePersistence", void 0);
    __decorate20([
      Property(1e3)
    ], DatePicker2.prototype, "zIndex", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "readonly", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "placeholder", void 0);
    __decorate20([
      Property("Never")
    ], DatePicker2.prototype, "floatLabelType", void 0);
    __decorate20([
      Property(null)
    ], DatePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "openOnFocus", void 0);
    __decorate20([
      Property(false)
    ], DatePicker2.prototype, "enableMask", void 0);
    __decorate20([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], DatePicker2.prototype, "maskPlaceholder", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "open", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "cleared", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "close", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "blur", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "focus", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "created", void 0);
    __decorate20([
      Event()
    ], DatePicker2.prototype, "destroyed", void 0);
    DatePicker2 = __decorate20([
      NotifyPropertyChanges
    ], DatePicker2);
    return DatePicker2;
  }(Calendar)
);

// node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATERANGEWRAPPER = "e-date-range-wrapper";
var INPUTCONTAINER2 = "e-input-group";
var DATERANGEICON = "e-input-group-icon e-range-icon e-icons";
var POPUP3 = "e-popup";
var LEFTCALENDER = "e-left-calendar";
var RIGHTCALENDER = "e-right-calendar";
var LEFTCONTAINER = "e-left-container";
var RIGHTCONTAINER = "e-right-container";
var ROOT5 = "e-daterangepicker";
var LIBRARY2 = "e-lib";
var CONTROL4 = "e-control";
var ERROR2 = "e-error";
var ACTIVE3 = "e-active";
var STARTENDCONTAINER = "e-start-end";
var STARTDATE = "e-start-date";
var ENDDATE = "e-end-date";
var STARTBUTTON = "e-start-btn";
var INPUTFOCUS2 = "e-input-focus";
var ENDBUTTON = "e-end-btn";
var RANGEHOVER = "e-range-hover";
var OTHERMONTH3 = "e-other-month";
var STARTLABEL = "e-start-label";
var ENDLABEL = "e-end-label";
var DISABLED6 = "e-disabled";
var SELECTED7 = "e-selected";
var CALENDAR = "e-calendar";
var NEXTICON2 = "e-next";
var PREVICON2 = "e-prev";
var HEADER3 = "e-header";
var TITLE2 = "e-title";
var ICONCONTAINER2 = "e-icon-container";
var RANGECONTAINER = "e-date-range-container";
var RANGEHEADER = "e-range-header";
var PRESETS = "e-presets";
var FOOTER2 = "e-footer";
var RANGEBORDER = "e-range-border";
var TODAY3 = "e-today";
var FOCUSDATE = "e-focused-date";
var CONTENT2 = "e-content";
var DAYSPAN = "e-day-span";
var WEEKNUMBER3 = "e-week-number";
var DATEDISABLED = "e-date-disabled";
var ICONDISABLED = "e-icon-disabled";
var CALENDARCONTAINER = "e-calendar-container";
var SEPARATOR2 = "e-separator";
var APPLY = "e-apply";
var CANCEL = "e-cancel";
var DEVICE2 = "e-device";
var OVERLAY3 = "e-overlay";
var CHANGEICON = "e-change-icon e-icons";
var LISTCLASS = "e-list-item";
var RTL6 = "e-rtl";
var HOVER2 = "e-hover";
var OVERFLOW2 = "e-range-overflow";
var OFFSETVALUE2 = 4;
var PRIMARY2 = "e-primary";
var FLAT2 = "e-flat";
var CSS2 = "e-css";
var ZOOMIN2 = "e-zoomin";
var NONEDITABLE = "e-non-edit";
var DAYHEADERLONG2 = "e-daterange-day-header-lg";
var HIDDENELEMENT = "e-daterange-hidden";
var wrapperAttr = ["title", "class", "style"];
var Presets = (
  /** @class */
  function(_super) {
    __extends21(Presets2, _super);
    function Presets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property()
    ], Presets2.prototype, "label", void 0);
    __decorate21([
      Property()
    ], Presets2.prototype, "start", void 0);
    __decorate21([
      Property()
    ], Presets2.prototype, "end", void 0);
    return Presets2;
  }(ChildProperty)
);
var DateRangePicker = (
  /** @class */
  function(_super) {
    __extends21(DateRangePicker2, _super);
    function DateRangePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isCustomRange = false;
      _this.isCustomWindow = false;
      _this.presetsItem = [];
      _this.liCollections = [];
      _this.previousEleValue = "";
      _this.isKeyPopup = false;
      _this.dateDisabled = false;
      _this.isRangeIconClicked = false;
      _this.isMaxDaysClicked = false;
      _this.disabledDays = [];
      _this.preventBlur = false;
      _this.preventFocus = false;
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.dateRangeOptions = options;
      return _this;
    }
    DateRangePicker2.prototype.render = function() {
      this.initialize();
      this.setProperties({ startDate: this.startValue }, true);
      this.setProperties({ endDate: this.endValue }, true);
      this.setModelValue();
      this.setDataAttribute(false);
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    DateRangePicker2.prototype.preRender = function() {
      this.keyInputConfigs = {
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        tab: "tab",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        spacebar: "space"
      };
      this.defaultConstant = {
        placeholder: this.placeholder,
        startLabel: "Start Date",
        endLabel: "End Date",
        customRange: "Custom Range",
        applyText: "Apply",
        cancelText: "Cancel",
        selectedDays: "Selected Days",
        days: "days"
      };
      this.isMobile = Browser.isDevice ? true : window.matchMedia("(max-width:550px)").matches;
      this.inputElement = this.element;
      this.angularTag = null;
      if (this.element.tagName === "EJS-DATERANGEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT5, CONTROL4, LIBRARY2]);
      this.updateHtmlAttributeToElement();
      if (this.element.getAttribute("id")) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2-datetimepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, { "id": this.element.id + "_input" });
        }
      }
      this.checkInvalidRange(this.value);
      if (!this.invalidValueString && typeof this.value === "string") {
        var rangeArray = this.value.split(" " + this.separator + " ");
        this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
      }
      this.initProperty();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
      this.navNextFunction = this.navNextMonth.bind(this);
      this.navPrevFunction = this.navPrevMonth.bind(this);
      this.deviceNavNextFunction = this.deviceNavNext.bind(this);
      this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.formElement = closest(this.element, "form");
    };
    DateRangePicker2.prototype.updateValue = function() {
      if (this.value && this.value.length > 0) {
        if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {
          this.setProperties({ startDate: this.value[0] }, true);
          this.startValue = this.value[0];
        } else if (typeof this.value[0] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.startValue = null;
            this.setValue();
          } else {
            this.setProperties({ startDate: new Date(this.checkValue(this.value[0])) }, true);
            this.startValue = new Date(this.checkValue(this.value[0]));
          }
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {
          this.setProperties({ endDate: this.value[1] }, true);
          this.endValue = this.value[1];
        } else if (typeof this.value[1] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.setProperties({ endDate: null }, true);
            this.endValue = null;
            this.setValue();
          } else {
            this.setProperties({ endDate: new Date(this.checkValue(this.value[1])) }, true);
            this.endValue = new Date(this.checkValue(this.value[1]));
            this.setValue();
          }
        } else {
          this.setProperties({ endDate: null }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (this.value && this.value.start) {
        if (this.value.start instanceof Date && !isNaN(+this.value.start)) {
          this.setProperties({ startDate: this.value.start }, true);
          this.startValue = this.value.start;
        } else if (typeof this.value.start === "string") {
          this.setProperties({ startDate: new Date(this.checkValue(this.value.start)) }, true);
          this.startValue = new Date(this.checkValue(this.value.start));
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value.end instanceof Date && !isNaN(+this.value.end)) {
          this.setProperties({ endDate: this.value.end }, true);
          this.endValue = this.value.end;
        } else if (typeof this.value.end === "string") {
          this.setProperties({ endDate: new Date(this.checkValue(this.value.end)) }, true);
          this.endValue = new Date(this.checkValue(this.value.end));
          this.setValue();
        } else {
          this.setProperties({ endDate: null }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (isNullOrUndefined(this.value)) {
        this.endValue = this.checkDateValue(new Date(this.checkValue(this.endDate)));
        this.startValue = this.checkDateValue(new Date(this.checkValue(this.startDate)));
        this.setValue();
      }
    };
    DateRangePicker2.prototype.initProperty = function() {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: this.globalize.getFirstDayOfWeek() }, true);
      }
      this.updateValue();
    };
    DateRangePicker2.prototype.checkFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({ skeleton: skeletonString, type: "date" });
        } else {
          this.formatString = null;
        }
      } else {
        this.formatString = null;
      }
    };
    DateRangePicker2.prototype.initialize = function() {
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.checkHtmlAttributes(false);
      merge(this.defaultKeyConfigs, { shiftTab: "shift+tab", tab: "tab" });
      var start = this.checkDateValue(new Date(this.checkValue(this.startValue)));
      this.setProperties({ startDate: start }, true);
      this.setProperties({ endValue: this.checkDateValue(new Date(this.checkValue(this.endValue))) }, true);
      this.setValue();
      this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(this.max))) }, true);
      this.l10n = new L10n("daterangepicker", this.defaultConstant, this.locale);
      this.l10n.setLocale(this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      this.processPresets();
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setRangeAllowEdit();
      this.bindEvents();
    };
    DateRangePicker2.prototype.setDataAttribute = function(isDynamic) {
      var attributes2 = {};
      if (!isDynamic) {
        for (var i = 0; i < this.element.attributes.length; i++) {
          attributes2[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
        }
      } else {
        attributes2 = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var pro = _a[_i];
        if (pro.indexOf("data") === 0) {
          this.firstHiddenChild.setAttribute(pro, attributes2["" + pro]);
          this.secondHiddenChild.setAttribute(pro, attributes2["" + pro]);
        }
      }
    };
    DateRangePicker2.prototype.setRangeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.updateClearIconState();
    };
    DateRangePicker2.prototype.updateClearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [NONEDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDITABLE]);
      }
    };
    DateRangePicker2.prototype.validationAttribute = function(element, input2) {
      var name = element.getAttribute("name") ? element.getAttribute("name") : element.getAttribute("id");
      input2.setAttribute("name", name);
      element.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(element.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = element.getAttribute(attributes2[i]);
        input2.setAttribute(attributes2[i], attr);
        element.removeAttribute(attributes2[i]);
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.inputWrapper.container], updatedClassValue.split(" "));
              }
            } else if (key === "style") {
              var dateRangeStyle = this.inputWrapper.container.getAttribute(key);
              dateRangeStyle = !isNullOrUndefined(dateRangeStyle) ? dateRangeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, dateRangeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateCssClass = function(cssNewClass, cssOldClass) {
      if (!isNullOrUndefined(cssOldClass)) {
        cssOldClass = cssOldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssNewClass)) {
        cssNewClass = cssNewClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssNewClass, [this.inputWrapper.container], cssOldClass);
      if (this.popupWrapper) {
        Input.setCssClass(cssNewClass, [this.popupWrapper], cssOldClass);
      }
    };
    DateRangePicker2.prototype.processPresets = function() {
      this.presetsItem = [];
      var i = 0;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
          var range = _a[_i];
          var id = range.label.replace(/\s+/g, "") + "_" + ++i;
          if (typeof range.end === "string") {
            this.presetsItem.push({
              id,
              text: range.label,
              end: new Date(this.checkValue(range.end)),
              start: new Date(this.checkValue(range.start))
            });
          } else {
            this.presetsItem.push({ id, text: range.label, start: range.start, end: range.end });
          }
        }
        var startDate = isNullOrUndefined(this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
        var endDate = isNullOrUndefined(this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
        this.presetsItem.push({ id: "custom_range", text: this.l10n.getConstant("customRange"), start: startDate, end: endDate });
        if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
          this.isCustomRange = true;
          this.activeIndex = this.presetsItem.length - 1;
        }
      }
    };
    DateRangePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
      if (!this.isMobile) {
        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
        this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {
          eventName: "keydown",
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyInputConfigs
        });
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (this.enabled) {
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.inputElement.tabIndex = -1;
      }
    };
    DateRangePicker2.prototype.unBindEvents = function() {
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.inputKeyboardModule)) {
          this.inputKeyboardModule.destroy();
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.inputElement.tabIndex = -1;
    };
    DateRangePicker2.prototype.updateHiddenInput = function() {
      if (this.firstHiddenChild && this.secondHiddenChild) {
        var format = { format: this.formatString, type: "datetime", skeleton: "yMd" };
        if (typeof this.startDate === "string") {
          this.startDate = this.globalize.parseDate(this.startDate, format);
        }
        if (typeof this.endDate === "string") {
          this.endDate = this.globalize.parseDate(this.endDate, format);
        }
        this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value;
        this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value;
        this.dispatchEvent(this.firstHiddenChild, "focusout");
        this.dispatchEvent(this.firstHiddenChild, "change");
      }
    };
    DateRangePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DateRangePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.valueType = this.value;
      e.preventDefault();
      this.clear();
      var clearedArgs = {
        event: e
      };
      this.setProperties({ endDate: this.checkDateValue(this.endValue) }, true);
      this.setProperties({ startDate: this.checkDateValue(this.startValue) }, true);
      this.trigger("cleared", clearedArgs);
      this.changeTrigger(e);
      this.clearRange();
      this.hide(e);
      if (closest(this.element, "form")) {
        var element = this.firstHiddenChild;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    DateRangePicker2.prototype.restoreValue = function() {
      this.previousEleValue = this.inputElement.value;
      this.previousStartValue = this.startValue;
      this.previousEndValue = this.endValue;
      this.valueType = null;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.setValue();
      this.setModelValue();
    };
    DateRangePicker2.prototype.formResetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.formElement && e.target === this.formElement && !this.inputElement.disabled) {
        var val = this.inputElement.getAttribute("value");
        if (!isNullOrUndefined(this.startCopy)) {
          if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.value.start)) {
            this.setProperties({ value: { start: this.startCopy, end: this.endCopy } }, true);
            this.startValue = this.value.start;
            this.endValue = this.value.end;
          } else {
            this.setProperties({ value: [this.startCopy, this.endCopy] }, true);
            this.startValue = this.value[0];
            this.endValue = this.value[1];
          }
          this.setProperties({ startDate: this.startValue, endDate: this.endValue }, true);
        } else {
          this.setProperties({ value: null, startDate: null, endDate: null }, true);
          this.startValue = this.endValue = null;
        }
        if (this.element.tagName === "EJS-DATERANGEPICKER") {
          this.setProperties({ value: null, startDate: null, endDate: null }, true);
          val = "";
          this.startValue = this.endValue = null;
          this.inputElement.setAttribute("value", "");
        }
        this.restoreValue();
        if (this.inputElement) {
          Input.setValue(val, this.inputElement, this.floatLabelType, this.showClearButton);
          this.errorClass();
        }
      }
    };
    DateRangePicker2.prototype.clear = function() {
      if (this.startValue !== null) {
        this.startValue = null;
      }
      if (this.endValue !== null) {
        this.endValue = null;
      }
      if (this.value && this.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      }
      if (this.value !== null && this.value.length > 0) {
        this.setProperties({ value: null }, true);
      }
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      if (!isNullOrUndefined(this.applyButton)) {
        this.applyButton.disabled = this.applyButton.element.disabled = true;
      }
      this.removeSelection();
    };
    DateRangePicker2.prototype.rangeIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isMobile) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      this.targetElement = null;
      if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
        this.applyFunction(e);
      } else {
        this.isRangeIconClicked = true;
        this.inputWrapper.container.children[0].focus();
        this.show(null, e);
        if (!this.isMobile) {
          if (!isNullOrUndefined(this.leftCalendar)) {
            this.isRangeIconClicked = false;
            this.calendarFocus();
            this.isRangeIconClicked = true;
          }
        }
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
    };
    DateRangePicker2.prototype.checkHtmlAttributes = function(isDynamic) {
      this.globalize = new Internationalization(this.locale);
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
        "startDate",
        "endDate",
        "minDays",
        "maxDays",
        "min",
        "max",
        "disabled",
        "readonly",
        "style",
        "name",
        "placeholder",
        "type",
        "value"
      ];
      var format = { format: this.formatString, type: "date", skeleton: "yMd" };
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["enabled"] === void 0 || isDynamic) {
                var disabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ enabled: !disabled }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["value"] === void 0 || isDynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, value, {}), !isDynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "min":
              if (isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "max":
              if (isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "startDate":
              if (isNullOrUndefined(this.startDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.startValue = dateValue;
                this.setValue();
              }
              break;
            case "endDate":
              if (isNullOrUndefined(this.endDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.endValue = dateValue;
                this.setValue();
              }
              break;
            case "minDays":
              if (isNullOrUndefined(this.minDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "maxDays":
              if (isNullOrUndefined(this.maxDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DateRangePicker2.prototype.createPopup = function() {
      for (var i = 0; i < this.presetsItem.length; i++) {
        if (i !== this.presetsItem.length - 1 && this.presetsItem[i].id === "custom_range") {
          this.presetsItem.splice(i, 1);
        }
      }
      this.activeIndex = this.presetsItem.length - 1;
      this.isCustomRange = true;
      for (var i = 0; i <= this.presetsItem.length - 2; i++) {
        var startDate = this.presetsItem[i].start;
        var endDate = this.presetsItem[i].end;
        if (this.startValue && this.endValue) {
          if (startDate.getDate() === this.startValue.getDate() && startDate.getMonth() === this.startValue.getMonth() && startDate.getFullYear() === this.startValue.getFullYear() && endDate.getDate() === this.endValue.getDate() && endDate.getMonth() === this.endValue.getMonth() && endDate.getFullYear() === this.endValue.getFullYear()) {
            this.activeIndex = i;
            this.isCustomRange = false;
          }
        }
      }
      this.popupWrapper = createElement("div", { id: this.element.id + "_popup", className: ROOT5 + " " + POPUP3 });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      this.adjustLongHeaderWidth();
      var isPreset = !this.isCustomRange || this.isMobile;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
        this.isCustomWindow = false;
        this.createPresets();
        this.listRippleEffect();
        this.renderPopup();
      } else {
        this.isCustomWindow = true;
        this.renderControl();
      }
    };
    DateRangePicker2.prototype.renderControl = function() {
      this.createControl();
      this.bindCalendarEvents();
      this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.updateHeader();
    };
    DateRangePicker2.prototype.clearCalendarEvents = function() {
      if (this.leftCalPrevIcon && this.leftCalNextIcon && this.rightCalPrevIcon && this.rightCalNextIcon) {
        EventHandler.clearEvents(this.leftCalPrevIcon);
        EventHandler.clearEvents(this.leftCalNextIcon);
        EventHandler.clearEvents(this.rightCalPrevIcon);
        EventHandler.clearEvents(this.rightCalNextIcon);
      }
    };
    DateRangePicker2.prototype.updateNavIcons = function() {
      _super.prototype.iconHandler.call(this);
    };
    DateRangePicker2.prototype.calendarIconEvent = function() {
      this.clearCalendarEvents();
      if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.leftCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.leftCalNextIcon, "mousedown", this.navNextFunction);
      }
      if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.rightCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.rightCalNextIcon, "mousedown", this.navNextFunction);
      }
    };
    DateRangePicker2.prototype.bindCalendarEvents = function() {
      if (!this.isMobile) {
        this.updateNavIcons();
        this.calendarIconEvent();
        this.calendarIconRipple();
        this.headerTitleElement = this.popupObj.element.querySelector("." + RIGHTCALENDER + " ." + HEADER3 + " ." + TITLE2);
        this.headerTitleElement = this.popupObj.element.querySelector("." + LEFTCALENDER + " ." + HEADER3 + " ." + TITLE2);
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
        this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.deviceCalendarEvent();
        EventHandler.add(this.startButton.element, "click", this.deviceHeaderClick, this);
        EventHandler.add(this.endButton.element, "click", this.deviceHeaderClick, this);
      }
      if (this.start === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.calendarIconRipple = function() {
      rippleEffect(this.leftCalPrevIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.leftCalNextIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
      rippleEffect(this.rightCalPrevIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.rightCalNextIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
    };
    DateRangePicker2.prototype.deviceCalendarEvent = function() {
      EventHandler.clearEvents(this.nextIcon);
      EventHandler.clearEvents(this.previousIcon);
      rippleEffect(this.nextIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.previousIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
      if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.nextIcon, "mousedown", this.deviceNavNextFunction);
      }
      if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED6)) {
        EventHandler.add(this.previousIcon, "mousedown", this.deviceNavPrevFunction);
      }
    };
    DateRangePicker2.prototype.deviceNavNext = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigateNext(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.deviceNavPrevious = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigatePrevious(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.updateDeviceCalendar = function(calendar) {
      if (calendar) {
        this.previousIcon = calendar.querySelector("." + PREVICON2);
        this.nextIcon = calendar.querySelector("." + NEXTICON2);
        this.calendarElement = calendar;
        this.deviceCalendar = calendar;
        this.contentElement = calendar.querySelector("." + CONTENT2);
        this.tableBodyElement = select("." + CONTENT2 + " tbody", calendar);
        this.table = calendar.querySelector("." + CONTENT2).getElementsByTagName("table")[0];
        this.headerTitleElement = calendar.querySelector("." + HEADER3 + " ." + TITLE2);
        this.headerElement = calendar.querySelector("." + HEADER3);
      }
    };
    DateRangePicker2.prototype.deviceHeaderClick = function(event2) {
      var element = event2.currentTarget;
      if (element.classList.contains(STARTBUTTON) && !isNullOrUndefined(this.startValue)) {
        this.endButton.element.classList.remove(ACTIVE3);
        this.startButton.element.classList.add(ACTIVE3);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + STARTDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.removeClassDisabled();
      } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        this.startButton.element.classList.remove(ACTIVE3);
        this.endButton.element.classList.add(ACTIVE3);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + ENDDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        this.selectableDates();
      }
    };
    DateRangePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      this.preventBlur = false;
      var focusArguments = {
        model: this
      };
      if (!this.preventFocus) {
        this.trigger("focus", focusArguments);
      }
      this.updateClearIconState();
      if (this.openOnFocus && !this.preventFocus) {
        this.preventFocus = true;
        this.show();
      } else {
        this.preventFocus = true;
      }
    };
    DateRangePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.preventBlur) {
        var value = this.inputElement.value;
        if (!isNullOrUndefined(this.presetsItem)) {
          if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {
            this.activeIndex = this.presetsItem.length - 1;
            this.isCustomRange = true;
          }
        }
        if (!isNullOrUndefined(value) && value.trim() !== "") {
          var range = value.split(" " + this.separator + " ");
          if (range.length > 1) {
            this.invalidValueString = null;
            var dateOptions = { format: this.formatString, type: "date", skeleton: "yMd" };
            var start = this.globalize.parseDate(range[0], dateOptions);
            var end = this.globalize.parseDate(range[1], dateOptions);
            var startDate = this.getStartEndDate(start, false, range, dateOptions);
            var endDate = this.getStartEndDate(end, true, range, dateOptions);
            if (!isNullOrUndefined(startDate) && !isNaN(+startDate) && !isNullOrUndefined(endDate) && !isNaN(+endDate)) {
              var prevStartVal = this.startValue;
              this.startValue = startDate;
              var prevEndVal = this.endValue;
              this.endValue = endDate;
              this.setValue();
              this.refreshControl();
              if (value !== this.previousEleValue) {
                this.changeTrigger(e);
              }
              if (!this.preventBlur && document.activeElement !== this.inputElement) {
                this.preventFocus = false;
                var blurArguments = {
                  model: this
                };
                this.trigger("blur", blurArguments);
              }
              this.updateHiddenInput();
              if (this.isMobile && this.isPopupOpen()) {
                this.startValue = prevStartVal;
                this.endValue = prevEndVal;
              }
              return;
            } else {
              if (!this.strictMode) {
                this.startValue = null;
                this.endValue = null;
                this.setValue();
              }
            }
          } else {
            if (!this.strictMode) {
              this.startValue = null;
              this.endValue = null;
              this.setValue();
            }
          }
        }
        if (!this.strictMode) {
          if (isNullOrUndefined(this.popupObj)) {
            this.currentDate = null;
          }
          this.previousStartValue = this.previousEndValue = null;
          this.startValue = null;
          this.endValue = null;
          this.setValue();
        } else {
          if (!isNullOrUndefined(value) && value.trim() === "") {
            this.startValue = null;
            this.endValue = null;
          }
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
          this.updateInput();
        }
        this.errorClass();
        this.changeTrigger(e);
        if (!this.preventBlur && document.activeElement !== this.inputElement) {
          this.preventFocus = false;
          var blurArguments = {
            model: this
          };
          this.trigger("blur", blurArguments);
        }
      }
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.getStartEndDate = function(date, isEnd, range, dateOptions) {
      if (this.depth === "Month") {
        return this.globalize.parseDate(range[isEnd ? 1 : 0].trim(), dateOptions);
      } else if (this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      }
    };
    DateRangePicker2.prototype.clearRange = function() {
      this.previousStartValue = this.previousEndValue = null;
      this.currentDate = null;
    };
    DateRangePicker2.prototype.errorClass = function() {
      var inputStr = this.inputElement.value.trim();
      if ((isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && inputStr !== "" || (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max) || (this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue))) && inputStr !== "") {
        addClass([this.inputWrapper.container], ERROR2);
        attributes(this.inputElement, { "aria-invalid": "true" });
      } else {
        if (this.inputWrapper) {
          removeClass([this.inputWrapper.container], ERROR2);
          attributes(this.inputElement, { "aria-invalid": "false" });
        }
      }
    };
    DateRangePicker2.prototype.keyCalendarUpdate = function(isLeftCalendar, ele, isRemoveFocus) {
      if (isRemoveFocus === void 0) {
        isRemoveFocus = true;
      }
      if (isRemoveFocus) {
        this.removeFocusedDate();
      }
      if (isLeftCalendar) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.leftCalendar;
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.rightCalendar;
      }
      this.updateCalendarElement(ele);
      this.table.focus();
      return ele;
    };
    DateRangePicker2.prototype.navInCalendar = function(e, isLeftCalendar, leftLimit, rightLimit, ele) {
      var view = this.getViewNumber(this.currentView());
      var date;
      var min = this.min;
      var max;
      if (!isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !isNullOrUndefined(this.startValue)) {
        max = new Date((/* @__PURE__ */ new Date(+this.startValue)).setDate(this.startValue.getDate() + (this.maxDays - 1)));
      } else {
        max = this.max;
      }
      switch (e.action) {
        case "moveRight":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, 1, e, max, min);
          if (isLeftCalendar && +date === +rightLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.keyboardNavigate(1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveLeft":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, -1, e, max, min);
          if (!isLeftCalendar) {
            if (+date === +leftLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
          }
          this.keyboardNavigate(-1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveUp":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, -7, e, max, min);
            if (+date <= +leftLimit && !isLeftCalendar) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            this.keyboardNavigate(-7, view, e, max, min);
          } else {
            this.keyboardNavigate(-4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "moveDown":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, 7, e, max, min);
            if (isLeftCalendar && +date >= +rightLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            this.keyboardNavigate(7, view, e, max, min);
          } else {
            this.keyboardNavigate(4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            ele = this.keyCalendarUpdate(false, ele, false);
            this.currentDate = this.firstCellToFocus(this.rightCalendar);
            view = this.getViewNumber(this.currentView());
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
        case "shiftTab":
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            ele = this.keyCalendarUpdate(true, ele, false);
            this.currentDate = this.firstCellToFocus(this.leftCalendar);
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
      }
    };
    DateRangePicker2.prototype.firstCellToFocus = function(calendar) {
      var focusAbleEle = this.getViewNumber(this.currentView()) === 2 ? calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-year)") : calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-month)");
      var focusEleID = focusAbleEle && focusAbleEle.id ? focusAbleEle.id.split("_")[0] : null;
      var currentFirstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
      var focusDate = focusEleID ? /* @__PURE__ */ new Date(+focusEleID) : currentFirstDay;
      return focusDate;
    };
    DateRangePicker2.prototype.keyInputHandler = function(e, value) {
      var date;
      var view = this.getViewNumber(this.currentView());
      var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);
      var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);
      var ele = closest(e.target, "." + RIGHTCALENDER);
      ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
      var isLeftCalendar = ele.classList.contains(LEFTCALENDER);
      this.updateCalendarElement(ele);
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      var focusedDate = ele.querySelector("tr td." + FOCUSDATE);
      var startDate = ele.querySelector("tr td." + STARTDATE);
      var endDate = ele.querySelector("tr td." + ENDDATE);
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      var leftCalendar = closest(e.target, "." + LEFTCALENDER);
      var rightCalendar = closest(e.target, "." + RIGHTCALENDER);
      var presetElement = closest(e.target, "." + PRESETS);
      if (!isNullOrUndefined(focusedDate)) {
        this.currentDate = this.currentDate;
      } else if (!isNullOrUndefined(endDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else if (!isNullOrUndefined(startDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
      } else if (!this.dateDisabled) {
        this.currentDate.setDate(1);
      }
      this.effect = "";
      switch (e.action) {
        case "altUpArrow":
          if (this.isPopupOpen()) {
            this.hide(e);
            this.preventFocus = true;
            this.inputElement.focus();
            addClass([this.inputWrapper.container], [INPUTFOCUS2]);
          }
          break;
        case "select":
          if (levelRestrict) {
            var element = !isNullOrUndefined(focusedDate) ? focusedDate : startDate;
            if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED6)) {
              this.selectRange(null, element);
            }
          } else {
            if (!isNullOrUndefined(selectedDate) && !levelRestrict || !isNullOrUndefined(focusedDate)) {
              if (!isNullOrUndefined(this.value)) {
                if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                  value = this.startDate;
                } else {
                  value = this.endDate;
                }
              }
              this.controlDown = e;
              this.contentClick(null, --view, focusedDate || selectedDate, value);
            }
          }
          e.preventDefault();
          break;
        case "controlHome":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
            if (!isLeftCalendar && +yearDate < +leftDateLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 0, 1));
            this.keyNavigation(ele, e);
          }
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else if (!isNullOrUndefined(rightCalendar)) {
            if (!isNullOrUndefined(this.presetElement)) {
              this.presetElement.focus();
              this.removeFocusedDate();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(presetElement)) {
              this.cancelButton.element.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            if (this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(rightCalendar)) {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "controlUp":
          if (this.calendarElement.classList.contains(LEFTCALENDER)) {
            this.calendarNavigation(e, this.calendarElement);
          } else {
            this.calendarNavigation(e, this.calendarElement);
          }
          e.preventDefault();
          break;
        case "controlDown":
          if ((!isNullOrUndefined(selectedDate) || !isNullOrUndefined(focusedDate)) && !levelRestrict) {
            if (!isNullOrUndefined(this.value)) {
              if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                value = this.startDate;
              } else {
                value = this.endDate;
              }
            }
            this.controlDown = e;
            this.contentClick(null, --view, selectedDate || focusedDate, value);
          }
          e.preventDefault();
          break;
        case "controlEnd":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 11, 31);
            if (isLeftCalendar && +yearDate > +rightDateLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 11, 31));
            this.keyNavigation(ele, e);
          }
          break;
        case "pageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addMonths(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "pageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addMonths(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addYears(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addYears(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftTab":
          if (!isNullOrUndefined(this.presetElement)) {
            this.presetElement.setAttribute("tabindex", "0");
            this.presetElement.focus();
            this.removeFocusedDate();
          }
          if (isLeftCalendar) {
            e.preventDefault();
          }
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.leftCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        case "spacebar":
          if (this.applyButton && !this.applyButton.disabled) {
            this.applyFunction(e);
          }
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.rightCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        default:
          this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          this.checkMinMaxDays();
      }
      this.presetHeight();
    };
    DateRangePicker2.prototype.tabKeyValidation = function(ele, calendarPos) {
      var isLeftCalendar = ele.classList.contains(calendarPos);
      var rightHeader = this.rightCalendar.querySelector(".e-header");
      var leftHeader = this.leftCalendar.querySelector(".e-header");
      var isRightMonth = rightHeader ? rightHeader.classList.contains("e-month") : false;
      var isLeftMonth = leftHeader ? leftHeader.classList.contains("e-month") : false;
      var isRightYear = rightHeader ? rightHeader.classList.contains("e-year") : false;
      var isLeftYear = leftHeader ? leftHeader.classList.contains("e-year") : false;
      var isRightDecade = rightHeader ? rightHeader.classList.contains("e-decade") : false;
      var isLeftDecade = leftHeader ? leftHeader.classList.contains("e-decade") : false;
      return isLeftCalendar && (isLeftMonth || isLeftYear || isLeftDecade) && (isRightMonth || isRightYear || isRightDecade) && !this.isMobile;
    };
    DateRangePicker2.prototype.keyNavigation = function(calendar, e) {
      this.bindCalendarCellEvents(calendar);
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.updateNavIcons();
      this.calendarIconEvent();
      this.updateRange([calendar]);
      this.dateDisabled = this.isDateDisabled(this.currentDate);
      e.preventDefault();
    };
    DateRangePicker2.prototype.inputHandler = function(e) {
      switch (e.action) {
        case "altDownArrow":
          if (!this.isPopupOpen()) {
            if (this.inputElement.value === "") {
              this.clear();
              this.changeTrigger(e);
              this.clearRange();
            }
            this.show(null, e);
            this.isRangeIconClicked = false;
            if (!this.isMobile) {
              if (!isNullOrUndefined(this.leftCalendar)) {
                this.calendarFocus();
              }
            }
            this.isKeyPopup = true;
          }
          break;
        case "escape":
          if (this.isPopupOpen()) {
            this.hide(e);
          }
          break;
        case "enter":
          if (document.activeElement === this.inputElement) {
            this.inputBlurHandler(e);
            this.hide(e);
          }
          break;
        case "tab":
          if (document.activeElement === this.inputElement && this.isPopupOpen()) {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.bindCalendarCellEvents = function(calendar) {
      var tdCells;
      if (calendar) {
        tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
      } else {
        tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
      }
      for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {
        var cell = tdCells_1[_i];
        EventHandler.clearEvents(cell);
        var disabledCell = cell.classList.contains(DISABLED6) || cell.classList.contains(DATEDISABLED);
        if (!disabledCell && !cell.classList.contains(WEEKNUMBER3)) {
          if (!this.isMobile) {
            EventHandler.add(cell, "mouseover", this.hoverSelection, this);
          }
          EventHandler.add(cell, "mousedown", this.selectRange, this);
        }
      }
    };
    DateRangePicker2.prototype.removeFocusedDate = function() {
      var isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);
      var focusedDate = this.popupObj.element.querySelectorAll("." + CALENDAR + " ." + FOCUSDATE);
      for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
        var ele = focusedDate_1[_i];
        var today = /* @__PURE__ */ new Date();
        var eleDate = this.getIdValue(null, ele);
        if (this.depth === "Month" && this.currentView() === "Month" && (!ele.classList.contains(TODAY3) || ele.classList.contains(TODAY3) && isDate) || this.depth === "Year" && this.currentView() === "Year" && (!this.isSameMonth(today, eleDate) && !this.isSameYear(today, eleDate) || isDate) || this.depth === "Decade" && this.currentView() === "Decade" && (!this.isSameYear(today, eleDate) || isDate)) {
          ele.classList.remove(FOCUSDATE);
          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {
            ele.removeAttribute("aria-label");
          }
        }
      }
    };
    DateRangePicker2.prototype.hoverSelection = function(event2, element) {
      var currentElement = element || event2.currentTarget;
      var currentDate = this.getIdValue(null, currentElement);
      if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max) {
        if (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
          for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {
            var ele = tdCells_2[_i];
            var isDisabledCell = !ele.classList.contains(DISABLED6) || ele.classList.contains(DATEDISABLED);
            if (!ele.classList.contains(WEEKNUMBER3) && isDisabledCell) {
              var eleDate = this.getIdValue(null, ele);
              var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
              var eleDateValue = /* @__PURE__ */ new Date(+eleDate);
              if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {
                addClass([ele], RANGEHOVER);
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.isSameStartEnd = function(startVal, endVal) {
      var isSame = false;
      if (this.depth === "Month") {
        if (startVal.setHours(0, 0, 0, 0) === endVal.setHours(0, 0, 0, 0)) {
          isSame = true;
        }
      } else if (this.depth === "Year") {
        if (startVal.getFullYear() === endVal.getFullYear() && startVal.getMonth() === endVal.getMonth()) {
          isSame = true;
        }
      } else if (this.depth === "Decade") {
        if (startVal.getFullYear() === endVal.getFullYear()) {
          isSame = true;
        }
      }
      return isSame;
    };
    DateRangePicker2.prototype.updateRange = function(elementCollection) {
      if (!isNullOrUndefined(this.startValue)) {
        for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {
          var calendar = elementCollection_1[_i];
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {
            var ele = tdCells_3[_a];
            if (!ele.classList.contains(WEEKNUMBER3) && !ele.classList.contains(DISABLED6)) {
              var eleDate = this.getIdValue(null, ele);
              var eleDateValue = this.getIdValue(null, ele);
              if (!isNullOrUndefined(this.endValue)) {
                if (this.currentView() === this.depth && +eleDateValue.setHours(0, 0, 0, 0) >= +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) && !this.isSameStartEnd(/* @__PURE__ */ new Date(+this.startValue), /* @__PURE__ */ new Date(+this.endValue)) && +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) >= +this.min && +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) <= +this.max && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], RANGEHOVER);
                }
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
              if (ele.classList.contains(SELECTED7) && ele.classList.contains(ENDDATE) && +eleDateValue !== +this.endValue) {
                removeClass([ele], [SELECTED7]);
                removeClass([ele], [ENDDATE]);
              }
              if (ele.classList.contains(RANGEHOVER) && +eleDateValue > +this.endValue) {
                removeClass([ele], [RANGEHOVER]);
              }
              if (!ele.classList.contains(OTHERMONTH3)) {
                var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
                var eleDateValue_1 = /* @__PURE__ */ new Date(+eleDate);
                if (this.currentView() === this.depth && +eleDateValue_1.setHours(0, 0, 0, 0) === +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [STARTDATE, SELECTED7]);
                  this.addSelectedAttributes(ele, this.startValue, true);
                }
                var endDateValue = /* @__PURE__ */ new Date(+this.endValue);
                if (this.currentView() === "Year") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), eleDateValue_1.getMonth() + 1, 0);
                } else if (this.currentView() === "Decade") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), 11, 31);
                }
                if (this.currentView() === this.depth && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) === +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [ENDDATE, SELECTED7]);
                  this.addSelectedAttributes(ele, this.startValue, false);
                }
                if (+eleDate === +this.startValue && !isNullOrUndefined(this.endValue) && +eleDate === +this.endValue) {
                  this.addSelectedAttributes(ele, this.endValue, false, true);
                }
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.checkMinMaxDays = function() {
      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
        if (!this.isMobile) {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + LEFTCALENDER));
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + RIGHTCALENDER));
        } else {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        }
      }
    };
    DateRangePicker2.prototype.rangeArgs = function(e) {
      var inputValue;
      var range;
      var startDate = !isNullOrUndefined(this.startValue) ? this.globalize.formatDate(this.startValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      var endDate = !isNullOrUndefined(this.endValue) ? this.globalize.formatDate(this.endValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        inputValue = startDate + " " + this.separator + " " + endDate;
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
      } else {
        inputValue = "";
        range = 0;
      }
      var args = {
        value: this.value,
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range,
        event: e || null,
        element: this.element,
        isInteracted: !isNullOrUndefined(e),
        text: inputValue
      };
      return args;
    };
    DateRangePicker2.prototype.otherMonthSelect = function(ele, isStartDate, sameDate) {
      var value = +this.getIdValue(null, ele);
      var dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace("/id", "" + value);
      var tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);
      if (!isNullOrUndefined(tdCell)) {
        if (isStartDate) {
          addClass([tdCell], [STARTDATE, SELECTED7]);
          this.addSelectedAttributes(tdCell, this.startValue, true);
        } else {
          addClass([tdCell], [ENDDATE, SELECTED7]);
          this.addSelectedAttributes(tdCell, this.endValue, true);
        }
        if (sameDate) {
          this.addSelectedAttributes(ele, this.endValue, false, true);
        }
      }
    };
    DateRangePicker2.prototype.selectRange = function(event2, element) {
      var leftCalendar;
      var rightCalendar;
      if (event2) {
        event2.preventDefault();
      }
      var date = isNullOrUndefined(event2) ? this.getIdValue(null, element) : this.getIdValue(event2, null);
      var y = date.getFullYear();
      var m = date.getMonth();
      var firstDay = new Date(y, m, 1);
      var lastDay = new Date(y, m + 1, 0);
      var firstMonth = new Date(y, 0, 1);
      var lastMonth = new Date(y, 11, 31);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE3)) {
          this.removeSelection();
        }
      } else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE3)) {
        this.removeSelection();
      }
      var ele = element || event2.currentTarget;
      if (isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.previousStartValue)) {
          date.setHours(this.previousStartValue.getHours());
          date.setMinutes(this.previousStartValue.getMinutes());
          date.setSeconds(this.previousStartValue.getSeconds());
        }
        this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
        this.endValue = null;
        this.setValue();
        addClass([ele], STARTDATE);
        this.addSelectedAttributes(ele, this.startValue, true);
        if (ele.classList.contains(OTHERMONTH3)) {
          this.otherMonthSelect(ele, true);
        }
        this.checkMinMaxDays();
        this.applyButton.disabled = true;
        this.applyButton.element.disabled = true;
        if (this.isMobile) {
          this.endButton.element.classList.add(ACTIVE3);
          this.startButton.element.classList.remove(ACTIVE3);
          this.endButton.element.removeAttribute("disabled");
          this.selectableDates();
        }
        this.trigger("select", this.rangeArgs(event2));
      } else {
        if (+date === +this.startValue || +date > +this.startValue) {
          if (+date === +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) {
            return;
          }
          this.endValue = null;
          this.setValue();
          if (this.isMobile || element) {
            this.hoverSelection(event2, element);
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            date.setHours(this.previousEndValue.getHours());
            date.setMinutes(this.previousEndValue.getMinutes());
            date.setSeconds(this.previousEndValue.getSeconds());
          }
          this.endValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? lastDay : lastMonth;
          this.setValue();
          var endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          if (this.isMobile) {
            this.startButton.element.classList.remove(ACTIVE3);
            this.endButton.element.classList.add(ACTIVE3);
            for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
              var ele_1 = endEle_1[_i];
              ele_1.removeAttribute("aria-label");
              if (!ele_1.classList.contains(STARTDATE)) {
                ele_1.setAttribute("aria-selected", "false");
                removeClass([ele_1], [ENDDATE, SELECTED7]);
              } else {
                this.addSelectedAttributes(ele_1, this.startValue, true);
                removeClass([ele_1], [ENDDATE]);
              }
            }
          }
          addClass([ele], ENDDATE);
          if (+this.endValue === +this.startValue) {
            this.addSelectedAttributes(ele, this.endValue, false, true);
          } else {
            this.addSelectedAttributes(ele, this.endValue, false);
          }
          if (ele.classList.contains(OTHERMONTH3)) {
            if (+this.endValue === +this.startValue) {
              this.otherMonthSelect(ele, false, true);
            } else {
              this.otherMonthSelect(ele, false);
            }
          }
          endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {
            var ele_2 = endEle_2[_a];
            if (ele_2.classList.contains(STARTDATE)) {
              removeClass([ele_2], [RANGEHOVER]);
            }
          }
          this.applyButton.disabled = false;
          this.applyButton.element.disabled = false;
          if (!this.isMobile) {
            this.removeClassDisabled();
          }
          if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
            this.disabledDateRender();
          }
          this.trigger("select", this.rangeArgs(event2));
        } else if (+date < +this.startValue) {
          this.removeClassDisabled();
          this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
          this.setValue();
          this.removeSelectedAttributes();
          removeClass(this.popupObj.element.querySelectorAll("." + STARTDATE), [STARTDATE, SELECTED7]);
          addClass([ele], STARTDATE);
          this.addSelectedAttributes(ele, this.startValue, true);
          if (ele.classList.contains(OTHERMONTH3)) {
            this.otherMonthSelect(ele, true);
          }
          this.checkMinMaxDays();
        }
      }
      if (event2) {
        leftCalendar = closest(event2.target, "." + LEFTCALENDER);
      }
      if (!isNullOrUndefined(leftCalendar)) {
        this.leftCalendar.children[1].firstElementChild.focus();
      } else {
        if (event2) {
          rightCalendar = event2 && closest(event2.target, "." + RIGHTCALENDER);
        }
        if (!isNullOrUndefined(rightCalendar)) {
          this.rightCalendar.children[1].firstElementChild.focus();
        }
      }
      addClass([ele], SELECTED7);
      this.calendarIconEvent();
      this.updateHeader();
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.selectableDates = function() {
      if (!isNullOrUndefined(this.startValue)) {
        var tdCells = this.calendarElement.querySelectorAll("." + CALENDAR + " td");
        var isStartDate = false;
        if (this.currentView() === this.depth) {
          for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
            var ele = tdCells_4[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              if (!ele.classList.contains(DISABLED6)) {
                var eleDate = this.getIdValue(null, ele);
                if (+eleDate < +this.startValue) {
                  addClass([ele], [DATEDISABLED, DISABLED6, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                  continue;
                } else {
                  break;
                }
              }
            }
            if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH3)) {
              isStartDate = true;
              break;
            }
          }
          if (isStartDate) {
            if (!this.previousIcon.classList.contains(DISABLED6)) {
              addClass([this.previousIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
            }
          }
        } else {
          for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
            var ele = tdCells_5[_a];
            var startMonth = this.startValue.getMonth();
            var startYear = this.startValue.getFullYear();
            var element = this.getIdValue(null, ele);
            if (!this.startButton.element.classList.contains(ACTIVE3) && (this.currentView() === "Year" && element.getMonth() < startMonth && element.getFullYear() <= startYear || this.currentView() === "Decade" && element.getMonth() <= startMonth && element.getFullYear() < startYear)) {
              addClass([ele], [DISABLED6]);
            } else {
              break;
            }
          }
          if (tdCells[0].classList.contains(DISABLED6)) {
            this.previousIconHandler(true);
          } else if (tdCells[tdCells.length - 1].classList.contains(DISABLED6)) {
            this.nextIconHandler(true);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateMinMaxDays = function(calendar) {
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) || this.isMobile && this.endButton.element.classList.contains(ACTIVE3)) {
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
          var startValueSelected = this.removeTimeValueFromDate(this.startValue);
          var minDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.minDays - 1)));
          var maxDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.maxDays - 1)));
          minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null;
          maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;
          if (this.currentView() === "Year") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear(), minDate.getMonth(), 0);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);
          } else if (this.currentView() === "Decade") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear() - 1, 11, 1);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), 0, 1);
          }
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          var maxEle = void 0;
          for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {
            var ele = tdCells_6[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              var eleDate = this.getIdValue(null, ele);
              eleDate = this.removeTimeValueFromDate(eleDate);
              if (!isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED6)) {
                minDate.setDate(minDate.getDate() + 1);
              }
              if (!ele.classList.contains(DISABLED6)) {
                if (+eleDate <= +startValueSelected) {
                  continue;
                }
                if (!isNullOrUndefined(minDate) && +eleDate < +minDate) {
                  addClass([ele], [DATEDISABLED, DISABLED6, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                }
                if (!isNullOrUndefined(maxDate) && +eleDate > +maxDate) {
                  addClass([ele], [DATEDISABLED, DISABLED6, OVERLAY3]);
                  this.isMaxDaysClicked = true;
                  EventHandler.clearEvents(ele);
                  if (isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH3)) {
                    maxEle = ele;
                  }
                }
              }
            }
          }
          if (!isNullOrUndefined(maxEle)) {
            if (this.isMobile) {
              if (!this.nextIcon.classList.contains(DISABLED6)) {
                addClass([this.nextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
              }
            } else {
              var calendar_1 = closest(maxEle, "." + RIGHTCALENDER);
              calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1;
              var isLeftCalendar = calendar_1.classList.contains(LEFTCALENDER);
              if (!isLeftCalendar) {
                if (!this.rightCalNextIcon.classList.contains(DISABLED6)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
                }
              } else {
                if (!this.rightCalNextIcon.classList.contains(DISABLED6)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
                }
                if (!this.leftCalNextIcon.classList.contains(DISABLED6)) {
                  addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
                }
                if (!this.rightCalPrevIcon.classList.contains(DISABLED6)) {
                  addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
                }
              }
            }
          }
        }
      } else {
        this.isMaxDaysClicked = false;
      }
    };
    DateRangePicker2.prototype.removeTimeValueFromDate = function(value) {
      var dateValue = new Date(value.getFullYear(), value.getMonth(), value.getDate());
      return dateValue;
    };
    DateRangePicker2.prototype.removeClassDisabled = function() {
      var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td." + DATEDISABLED);
      for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {
        var ele = tdCells_7[_i];
        if (ele.classList.contains(DATEDISABLED)) {
          removeClass([ele], [DATEDISABLED, DISABLED6, OVERLAY3]);
          EventHandler.add(ele, "click", this.selectRange, this);
          if (!this.isMobile) {
            EventHandler.add(ele, "mouseover", this.hoverSelection, this);
          }
        }
      }
      if (this.isMobile) {
        if (this.nextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.nextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
        }
        if (this.previousIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.previousIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
        }
      } else {
        if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
        }
        if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
        }
        if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED6, OVERLAY3]);
        }
      }
    };
    DateRangePicker2.prototype.updateHeader = function() {
      var format = { type: "date", skeleton: "yMMMd" };
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = range.toString() + " " + this.l10n.getConstant("days");
      } else {
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        }
        if (!isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
        }
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
        }
      }
      if (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue)) {
        if (!this.isMobile) {
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
        }
      }
      if (this.popupObj.element.querySelector("#custom_range")) {
        this.popupObj.element.querySelector("#custom_range").textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
      }
    };
    DateRangePicker2.prototype.removeSelection = function() {
      this.startValue = null;
      this.endValue = null;
      this.setValue();
      this.removeSelectedAttributes();
      if (this.popupObj) {
        if (this.popupObj.element.querySelectorAll("." + SELECTED7).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + SELECTED7), [STARTDATE, ENDDATE, SELECTED7]);
        }
        if (this.popupObj.element.querySelectorAll("." + FOCUSDATE).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + FOCUSDATE), FOCUSDATE);
        }
        if (this.popupObj.element.querySelectorAll("." + RANGEHOVER).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + RANGEHOVER), [RANGEHOVER]);
        }
      }
    };
    DateRangePicker2.prototype.addSelectedAttributes = function(ele, date, isStartDate, sameDate) {
      if (ele) {
        var title = this.globalize.formatDate(date, { type: "date", skeleton: "full" });
        if (!isNullOrUndefined(sameDate) && sameDate) {
          ele.setAttribute("aria-label", "The current start and end date is " + title);
        } else {
          ele.setAttribute("aria-label", "The current " + (isStartDate ? "start" : "end") + " date is " + title);
        }
        ele.setAttribute("aria-selected", "true");
      }
    };
    DateRangePicker2.prototype.removeSelectedAttributes = function() {
      if (this.popupObj) {
        var start = this.popupObj.element.querySelectorAll("." + STARTDATE);
        for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {
          var ele = start_1[_i];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
        var end = this.popupObj.element.querySelectorAll("." + ENDDATE);
        for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {
          var ele = end_1[_a];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
      }
    };
    DateRangePicker2.prototype.updateCalendarElement = function(calendar) {
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.calendarElement = this.leftCalendar;
        this.currentDate = this.leftCalCurrentDate;
        this.previousIcon = this.leftCalPrevIcon;
        this.nextIcon = this.leftCalNextIcon;
      } else {
        this.calendarElement = this.rightCalendar;
        this.currentDate = this.rightCalCurrentDate;
        this.previousIcon = this.rightCalPrevIcon;
        this.nextIcon = this.rightCalNextIcon;
      }
      this.contentElement = calendar.querySelector("." + CONTENT2);
      this.tableBodyElement = select("." + CONTENT2 + " tbody", calendar);
      this.table = calendar.querySelector("." + CONTENT2).getElementsByTagName("table")[0];
      this.headerTitleElement = calendar.querySelector("." + HEADER3 + " ." + TITLE2);
      this.headerElement = calendar.querySelector("." + HEADER3);
    };
    DateRangePicker2.prototype.navPrevMonth = function(e) {
      e.preventDefault();
      var ele = closest(e.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(e.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigatePrevious(e);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.deviceNavigation = function(ele) {
      this.deviceCalendarEvent();
      this.updateRange([this.popupObj.element.querySelector("." + CALENDAR)]);
      if (this.endButton.element.classList.contains(ACTIVE3)) {
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
      }
      if (this.endButton.element.classList.contains(ACTIVE3)) {
        this.selectableDates();
      }
      if (this.currentView() === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.updateControl = function(calendar, customDate) {
      if (customDate === void 0) {
        customDate = null;
      }
      if (calendar.classList.contains(RIGHTCALENDER)) {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+(customDate ? customDate : this.currentDate));
      } else {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.calendarIconEvent();
      if (this.depth === "Month" && this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.depth === "Year" && this.leftCalendar.querySelector(".e-content").classList.contains("e-year") && this.rightCalendar.querySelector(".e-content").classList.contains("e-year") || this.depth === "Decade" && this.leftCalendar.querySelector(".e-content").classList.contains("e-decade") && this.rightCalendar.querySelector(".e-content").classList.contains("e-decade") || this.isMobile) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
      this.updateRange([calendar]);
    };
    DateRangePicker2.prototype.navNextMonth = function(event2) {
      event2.preventDefault();
      var ele = closest(event2.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(event2.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigateNext(event2);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.isPopupOpen = function() {
      if (!isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP3)) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.createRangeHeader = function() {
      var labelContainer = this.createElement("div", { className: STARTENDCONTAINER });
      if (!this.isMobile) {
        var startLabel = this.createElement("a", { className: STARTLABEL });
        var endLabel = this.createElement("a", { className: ENDLABEL });
        var changeIcon = this.createElement("span", { className: CHANGEICON });
        attributes(startLabel, { "aria-atomic": "true", "aria-live": "assertive", "aria-label": "Start Date", "role": "button" });
        attributes(endLabel, { "aria-atomic": "true", "aria-live": "assertive", "aria-label": "End Date", "role": "button" });
        labelContainer.appendChild(startLabel);
        labelContainer.appendChild(changeIcon);
        labelContainer.appendChild(endLabel);
        startLabel.textContent = this.l10n.getConstant("startLabel");
        endLabel.textContent = this.l10n.getConstant("endLabel");
      } else {
        var endBtn = this.createElement("button", { className: ENDBUTTON });
        var startBtn = this.createElement("button", { className: STARTBUTTON });
        this.startButton = new Button({ content: this.l10n.getConstant("startLabel") }, startBtn);
        this.endButton = new Button({ content: this.l10n.getConstant("endLabel") }, endBtn);
        labelContainer.appendChild(startBtn);
        labelContainer.appendChild(endBtn);
      }
      return labelContainer;
    };
    DateRangePicker2.prototype.disableInput = function() {
      if (this.strictMode) {
        if (!isNullOrUndefined(this.previousStartValue) && !isNullOrUndefined(this.previousEndValue)) {
          this.startValue = this.previousStartValue;
          this.endValue = this.previousEndValue;
          this.setValue();
          this.updateInput();
        }
      } else {
        this.updateInput();
        this.clearRange();
        this.setProperties({ startDate: null }, true);
        this.setProperties({ endDate: null }, true);
        this.startValue = null;
        this.endValue = null;
        this.setValue();
        this.errorClass();
      }
      this.setProperties({ enabled: false }, true);
      Input.setEnabled(this.enabled, this.inputElement);
      this.bindEvents();
    };
    DateRangePicker2.prototype.validateMinMax = function() {
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (!(this.min <= this.max)) {
        this.disableInput();
        return;
      }
      if (!isNullOrUndefined(this.minDays) && !isNullOrUndefined(this.maxDays)) {
        if (this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays) {
          this.maxDays = null;
        }
      }
      if (!isNullOrUndefined(this.minDays) && this.minDays < 0) {
        this.minDays = null;
      }
      if (!isNullOrUndefined(this.maxDays) && this.maxDays < 0) {
        this.maxDays = null;
      }
    };
    DateRangePicker2.prototype.validateRangeStrict = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (+this.startValue <= +this.min) {
          this.startValue = this.min;
          this.setValue();
        } else if (+this.startValue >= +this.min && +this.startValue >= +this.max) {
          this.startValue = this.max;
        }
      }
      if (!isNullOrUndefined(this.endValue)) {
        if (+this.endValue > +this.max) {
          this.endValue = this.max;
          this.setValue();
        } else if (+this.endValue < +this.min) {
          this.endValue = this.min;
          this.setValue();
        }
      }
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateRange = function() {
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateMinMaxDays = function() {
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) {
          if (this.strictMode) {
            var date = /* @__PURE__ */ new Date(+this.startValue);
            date.setDate(date.getDate() + (this.minDays - 1));
            if (+date > +this.max) {
              this.endValue = this.max;
              this.setValue();
            } else {
              this.endValue = date;
              this.setValue();
            }
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
        if (!isNullOrUndefined(this.maxDays) && this.maxDays > 0 && !(range <= this.maxDays)) {
          if (this.strictMode) {
            this.endValue = /* @__PURE__ */ new Date(+this.startValue);
            this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1));
            this.setValue();
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
      }
    };
    DateRangePicker2.prototype.renderCalendar = function() {
      this.calendarElement = this.createElement("div");
      this.calendarElement.classList.add(CALENDAR);
      if (this.enableRtl) {
        this.calendarElement.classList.add(RTL6);
      }
      attributes(this.calendarElement, { "data-role": "calendar" });
      _super.prototype.createHeader.call(this);
      _super.prototype.createContent.call(this);
    };
    DateRangePicker2.prototype.isSameMonth = function(start, end) {
      if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameYear = function(start, end) {
      if (start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameDecade = function(start, end) {
      var startYear = start.getFullYear();
      var endYear = end.getFullYear();
      if (startYear - startYear % 10 === endYear - endYear % 10) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.startMonthCurrentDate = function() {
      if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.max);
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      } else if (this.currentDate < this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
    };
    DateRangePicker2.prototype.selectNextMonth = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameMonth(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setDate(1);
        var month = this.currentDate.getMonth() + 1;
        this.currentDate.setMonth(month);
      }
    };
    DateRangePicker2.prototype.selectNextYear = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameYear(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setMonth(0);
        var yr = this.currentDate.getFullYear() + 1;
        this.currentDate.setFullYear(yr);
        return;
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setMonth(0);
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);
      }
    };
    DateRangePicker2.prototype.selectNextDecade = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameDecade(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        var decyr = this.currentDate.getFullYear() + 10;
        this.currentDate.setFullYear(decyr);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 10);
      }
    };
    DateRangePicker2.prototype.selectStartMonth = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.max);
          this.currentDate.setDate(1);
          this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        } else if (!(this.startValue >= this.min && this.startValue <= this.max) || this.isDateDisabled(this.startValue)) {
          this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        } else {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
      } else {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.startMonthCurrentDate();
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
      this.startMonthCurrentDate();
    };
    DateRangePicker2.prototype.createCalendar = function() {
      var calendarContainer = this.createElement("div", { className: CALENDARCONTAINER });
      if (!this.isMobile) {
        this.selectStartMonth();
        this.renderCalendar();
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        this.calendarElement.classList.add(LEFTCALENDER);
        this.leftCalPrevIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + PREVICON2);
        this.leftCalNextIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + NEXTICON2);
        this.leftTitle = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + LEFTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3).appendChild(this.leftCalNextIcon);
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3).appendChild(this.leftCalPrevIcon);
        prepend([this.leftCalPrevIcon], this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER3));
        this.leftCalendar = this.calendarElement;
        var leftContainer = this.createElement("div", { className: LEFTCONTAINER });
        var rightContainer = this.createElement("div", { className: RIGHTCONTAINER });
        leftContainer.appendChild(this.leftCalendar);
        calendarContainer.appendChild(leftContainer);
        if (!this.isMobile) {
          EventHandler.add(this.leftTitle, "click", this.leftNavTitle, this);
        }
        if (this.start === "Month") {
          this.selectNextMonth();
        }
        if (this.start === "Year") {
          this.selectNextYear();
        }
        if (this.start === "Decade") {
          this.selectNextDecade();
        }
        this.renderCalendar();
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        addClass([this.calendarElement], RIGHTCALENDER);
        this.rightCalendar = this.calendarElement;
        removeClass([this.leftCalendar && this.leftCalendar.querySelector(".e-content tbody")], "e-zoomin");
        removeClass([this.rightCalendar && this.rightCalendar.querySelector(".e-content tbody")], "e-zoomin");
        this.rightCalPrevIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + PREVICON2);
        this.rightCalNextIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + NEXTICON2);
        this.rightTitle = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("table").setAttribute("tabindex", "0");
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3).appendChild(this.rightCalNextIcon);
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3).appendChild(this.rightCalPrevIcon);
        prepend([this.rightCalPrevIcon], this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER3));
        rightContainer.appendChild(this.rightCalendar);
        calendarContainer.appendChild(rightContainer);
        if (!this.isMobile) {
          EventHandler.add(this.rightTitle, "click", this.rightNavTitle, this);
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
        _super.prototype.validateDate.call(this);
        _super.prototype.minMaxUpdate.call(this);
        _super.prototype.render.call(this);
        var prevIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + PREVICON2);
        var nextIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + NEXTICON2);
        remove(this.calendarElement.querySelector("." + CALENDAR + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3).appendChild(nextIcon);
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3).appendChild(prevIcon);
        prepend([prevIcon], this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3));
        this.deviceCalendar = this.calendarElement;
        calendarContainer.appendChild(this.calendarElement);
        this.headerTitleElement = this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER3 + " ." + TITLE2);
      }
      return calendarContainer;
    };
    DateRangePicker2.prototype.leftNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.leftCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.calendarNavigation = function(e, element) {
      this.table = element.querySelector("table");
      this.headerTitleElement = element.querySelector(".e-title");
      this.tableBodyElement = element.querySelector("tbody");
      this.tableHeadElement = element.querySelector("thead");
      this.contentElement = element.querySelector(".e-content");
      this.updateCalendarElement(element);
      _super.prototype.navigateTitle.call(this, e);
      this.updateNavIcons();
    };
    DateRangePicker2.prototype.rightNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.rightCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.clickEventEmitter = function(e) {
      if (!this.isMobile) {
        if (closest(e.target, ".e-calendar.e-left-calendar")) {
          this.calendarElement = this.leftCalendar;
          this.updateCalendarElement(this.leftCalendar);
        } else {
          this.calendarElement = this.rightCalendar;
          this.updateCalendarElement(this.rightCalendar);
        }
      }
    };
    DateRangePicker2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    DateRangePicker2.prototype.getCalendarView = function(view) {
      if (view === "Year") {
        return "Year";
      } else if (view === "Decade") {
        return "Decade";
      } else {
        return "Month";
      }
    };
    DateRangePicker2.prototype.navigatedEvent = function(e) {
      this.trigger("navigated", this.navigatedArgs);
      if (!isNullOrUndefined(this.popupObj)) {
        var element = void 0;
        var view = this.getCalendarView(this.currentView());
        if (this.isMobile) {
          if (view === this.depth) {
            this.bindCalendarCellEvents();
            this.deviceNavigation();
            this.removeFocusedDate();
            this.checkMinMaxDays();
          } else {
            this.selectableDates();
          }
        } else {
          if (!this.isMobile && view === this.depth) {
            element = this.calendarElement.classList.contains("e-left-calendar") ? this.leftCalendar : this.rightCalendar;
            if (element === this.leftCalendar && (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown))) {
              this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.leftCalCurrentDate;
              this.updateCalendarElement(this.leftCalendar);
              this.updateControl(this.leftCalendar);
              this.updateCalendarElement(this.rightCalendar);
              _super.prototype.navigateTo.call(this, view, this.rightCalCurrentDate);
              var customDate = this.rightCalCurrentDate ? this.rightCalCurrentDate : this.currentDate;
              this.updateControl(this.rightCalendar, customDate);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            } else if (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown)) {
              this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.rightCalCurrentDate;
              this.updateCalendarElement(this.rightCalendar);
              this.updateControl(this.rightCalendar);
              this.updateCalendarElement(this.leftCalendar);
              if (this.startValue && isNullOrUndefined(this.endValue)) {
                if (view === "Month" && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else if (view === "Year" && this.startValue.getFullYear() < this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else {
                  _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
                }
              } else {
                _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
              }
              this.updateControl(this.leftCalendar);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            }
            this.checkMinMaxDays();
          } else {
            this.updateNavIcons();
            this.calendarIconEvent();
          }
        }
      }
    };
    DateRangePicker2.prototype.createControl = function() {
      var controlContainer = this.createElement("div", { className: RANGECONTAINER });
      var headerContainer = this.createElement("div", { className: RANGEHEADER });
      if (this.isMobile && this.fullScreenMode) {
        var modelHeaderIconWrapper = this.createElement("div", { className: "e-model-header-wrapper" });
        var modelCloseIcon = this.createElement("span", { className: "e-popup-close" });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
        var modelApplyButton = this.createElement("span", { className: "e-apply" });
        EventHandler.add(modelApplyButton, "mousedown touchstart", this.applyFunction, this);
        modelHeaderIconWrapper.appendChild(modelCloseIcon);
        modelHeaderIconWrapper.appendChild(modelApplyButton);
        headerContainer.appendChild(modelHeaderIconWrapper);
      }
      var labelContainer = this.createRangeHeader();
      headerContainer.appendChild(labelContainer);
      var daySpan = this.createElement("div", { className: DAYSPAN });
      attributes(daySpan, { "aria-label": "Selected Days" });
      daySpan.textContent = this.l10n.getConstant("selectedDays");
      headerContainer.appendChild(daySpan);
      var separator = this.createElement("div", { className: SEPARATOR2 });
      var calendarContainer = this.createCalendar();
      controlContainer.appendChild(headerContainer);
      controlContainer.appendChild(separator);
      controlContainer.appendChild(calendarContainer);
      var footerSection = this.createElement("div", { className: FOOTER2 });
      var cancelBtn = this.createElement("button", { className: CANCEL + " " + FLAT2 + " " + CSS2 });
      var applyBtn = this.createElement("button");
      addClass([applyBtn], [APPLY, FLAT2, PRIMARY2, CSS2]);
      footerSection.appendChild(applyBtn);
      footerSection.appendChild(cancelBtn);
      var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);
      this.cancelButton = new Button({ content: this.l10n.getConstant("cancelText") }, cancelBtn);
      this.applyButton = new Button({ content: this.l10n.getConstant("applyText"), disabled: !enable }, applyBtn);
      EventHandler.add(applyBtn, "click", this.applyFunction, this);
      EventHandler.add(cancelBtn, "click", this.cancelFunction, this);
      this.popupWrapper.appendChild(controlContainer);
      if (!this.isMobile) {
        if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
          this.createPresets();
          this.listRippleEffect();
          addClass([controlContainer], RANGEBORDER);
          addClass([this.popupWrapper], "e-preset-wrapper");
          var presets = this.popupWrapper.querySelector("." + PRESETS);
          presets.style.height = this.popupWrapper.querySelector("." + RANGECONTAINER).getBoundingClientRect().height + "px";
        }
      }
      this.popupWrapper.appendChild(footerSection);
      if (this.isMobile) {
        this.deviceHeaderUpdate();
      }
      this.renderPopup();
    };
    DateRangePicker2.prototype.modelRangeCloseHandler = function(e) {
      this.hide();
    };
    DateRangePicker2.prototype.cancelFunction = function(eve) {
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      eve.preventDefault();
      if (this.isKeyPopup) {
        this.inputElement.focus();
        this.isKeyPopup = false;
      }
      this.startValue = null;
      this.endValue = null;
      this.removeSelection();
      this.hide(eve);
    };
    DateRangePicker2.prototype.deviceHeaderUpdate = function() {
      if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.endButton.element.setAttribute("disabled", "");
        this.startButton.element.classList.add(ACTIVE3);
      } else if (!isNullOrUndefined(this.startValue)) {
        this.startButton.element.classList.add(ACTIVE3);
      }
    };
    DateRangePicker2.prototype.applyFunction = function(eve) {
      var isValueChanged = false;
      if (eve.type !== "touchstart") {
        eve.preventDefault();
      }
      if (this.closeEventArgs && this.closeEventArgs.cancel) {
        this.startValue = this.popupWrapper.querySelector(".e-start-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-start-date"));
        this.endValue = this.popupWrapper.querySelector(".e-end-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-end-date"));
        this.setValue();
      }
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      if (eve.type !== "touchstart" && this.closeEventArgs && !this.closeEventArgs.cancel) {
        eve.preventDefault();
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        if (!(this.previousStartValue && this.previousEndValue && this.startValue.getDate() === this.previousStartValue.getDate() && this.startValue.getMonth() === this.previousStartValue.getMonth() && this.startValue.getFullYear() === this.previousStartValue.getFullYear() && this.endValue.getDate() === this.previousEndValue.getDate() && this.endValue.getMonth() === this.previousEndValue.getMonth() && this.endValue.getFullYear() === this.previousEndValue.getFullYear())) {
          Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
        this.previousEleValue = this.inputElement.value;
        if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
          isValueChanged = true;
        }
        this.changeTrigger(eve);
        this.hide(eve ? eve : null);
        this.errorClass();
        isValueChanged = true;
      } else {
        this.hide(eve ? eve : null);
      }
      if (!closest(eve.target, "." + INPUTCONTAINER2) && !isValueChanged) {
        this.focusOut();
      }
      if (!this.isMobile) {
        this.isKeyPopup = false;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.children[1].focus();
          this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
          this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
            eventName: "keydown",
            keyConfigs: this.keyInputConfigs,
            keyAction: this.popupKeyActionHandle.bind(this)
          });
        }
      }
    };
    DateRangePicker2.prototype.onMouseClick = function(event2, item) {
      if (event2.type === "touchstart") {
        return;
      }
      var target = item || event2.target;
      var li = closest(target, "." + LISTCLASS);
      var isClick = li && li.classList.contains(ACTIVE3);
      if (li && li.classList.contains(LISTCLASS)) {
        this.setListSelection(li, event2);
      }
      this.preventFocus = true;
      this.inputElement.focus();
      if (!this.isMobile) {
        this.preventFocus = true;
        if (li && li.classList.contains(LISTCLASS) && li.getAttribute("id") === "custom_range") {
          this.leftCalendar.children[1].firstElementChild.focus();
        } else {
          if (!isClick && event2.type === "keydown") {
            this.inputElement.focus();
          }
        }
      }
    };
    DateRangePicker2.prototype.onMouseOver = function(event2) {
      var li = closest(event2.target, "." + LISTCLASS);
      if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER2)) {
        addClass([li], HOVER2);
      }
    };
    DateRangePicker2.prototype.onMouseLeave = function(event2) {
      var item = closest(event2.target, "." + HOVER2);
      if (!isNullOrUndefined(item)) {
        removeClass([item], HOVER2);
      }
    };
    DateRangePicker2.prototype.setListSelection = function(li, event2) {
      if (li && (!li.classList.contains(ACTIVE3) || this.isMobile && li.classList.contains(ACTIVE3))) {
        if (this.isMobile && li.classList.contains(ACTIVE3)) {
          this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
          var values_1 = this.presetsItem[this.activeIndex];
          if (values_1.id === "custom_range") {
            this.renderCustomPopup();
            return;
          }
          return;
        }
        this.removeListSelection();
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        addClass([li], ACTIVE3);
        li.setAttribute("aria-selected", "true");
        var values = this.presetsItem[this.activeIndex];
        if (values.id === "custom_range") {
          this.renderCustomPopup();
        } else {
          this.applyPresetRange(values, event2);
        }
      }
    };
    DateRangePicker2.prototype.removeListSelection = function() {
      var item = this.presetElement.querySelector("." + ACTIVE3);
      if (!isNullOrUndefined(item)) {
        removeClass([item], ACTIVE3);
        item.removeAttribute("aria-selected");
      }
    };
    DateRangePicker2.prototype.setValue = function() {
      this.modelValue = [this.startValue, this.endValue];
    };
    DateRangePicker2.prototype.applyPresetRange = function(values, e) {
      this.hide(null);
      this.presetsItem[this.presetsItem.length - 1].start = null;
      this.presetsItem[this.presetsItem.length - 1].end = null;
      this.startValue = values.start;
      this.endValue = values.end;
      this.setValue();
      this.refreshControl();
      this.trigger("select", this.rangeArgs(e));
      this.changeTrigger(e);
      this.previousEleValue = this.inputElement.value;
      this.isCustomRange = false;
      this.leftCalendar = this.rightCalendar = null;
      if (this.isKeyPopup) {
        this.isRangeIconClicked = false;
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.showPopup = function(element, event2) {
      this.presetHeight();
      if (this.zIndex === 1e3) {
        this.popupObj.show(null, this.element);
      } else {
        this.popupObj.show(null, null);
      }
      if (this.isMobile) {
        this.popupObj.refreshPosition();
      }
    };
    DateRangePicker2.prototype.renderCustomPopup = function() {
      this.isCustomWindow = true;
      this.popupObj.hide();
      this.popupWrapper = this.createElement("div", { id: this.element.id + "_popup", className: ROOT5 + " " + POPUP3 });
      this.renderControl();
      this.openEventArgs.appendTo.appendChild(this.popupWrapper);
      this.showPopup();
      this.isCustomRange = true;
      if (!this.isMobile) {
        this.calendarFocus();
      }
    };
    DateRangePicker2.prototype.listRippleEffect = function() {
      for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
        var li = _a[_i];
        rippleEffect(li);
      }
    };
    DateRangePicker2.prototype.createPresets = function() {
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        this.presetElement = this.createElement("div", { className: PRESETS, attrs: { "tabindex": "0" } });
        var listTag = ListBase.createList(this.createElement, this.presetsItem, null, true);
        attributes(listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options", "tabindex": "0", "aria-label": "daterangepicker-preset" });
        this.presetElement.appendChild(listTag);
        this.popupWrapper.appendChild(this.presetElement);
        var customElement = this.presetElement.querySelector("#custom_range");
        if (!isNullOrUndefined(customElement)) {
          customElement.textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
        }
        this.liCollections = this.presetElement.querySelectorAll("." + LISTCLASS);
        this.wireListEvents();
        if (this.isMobile) {
          if (this.fullScreenMode) {
            var modelWrapper = createElement("div", { className: "e-range-mob-popup-wrap" });
            var modelHeader = this.createElement("div", { className: "e-model-header" });
            var modelTitleSpan = this.createElement("span", { className: "e-model-title" });
            modelTitleSpan.textContent = "Select Preset";
            var modelCloseIcon = this.createElement("span", { className: "e-popup-close" });
            EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
            var presetContent = this.presetElement;
            modelHeader.appendChild(modelCloseIcon);
            modelHeader.appendChild(modelTitleSpan);
            modelWrapper.appendChild(modelHeader);
            modelWrapper.appendChild(presetContent);
            this.popupWrapper.insertBefore(modelWrapper, this.popupWrapper.firstElementChild);
            this.presetElement.style.width = "100%";
          } else {
            this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + "px";
          }
        }
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {
          addClass([this.liCollections[this.activeIndex]], ACTIVE3);
        }
      }
    };
    DateRangePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.presetElement, "click", this.onMouseClick, this);
      if (!this.isMobile) {
        EventHandler.add(this.presetElement, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.presetElement, "mouseout", this.onMouseLeave, this);
      }
    };
    DateRangePicker2.prototype.unWireListEvents = function() {
      if (!isNullOrUndefined(this.presetElement)) {
        EventHandler.remove(this.presetElement, "click touchstart", this.onMouseClick);
        if (!this.isMobile) {
          EventHandler.remove(this.presetElement, "mouseover", this.onMouseOver);
          EventHandler.remove(this.presetElement, "mouseout", this.onMouseLeave);
        }
      }
    };
    DateRangePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.popupWrapper.classList.add("e-control");
      var popupWidth = this.popupWrapper.getBoundingClientRect().width;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== "") {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (this.isMobile && this.isCustomWindow) {
        this.modal = this.createElement("div");
        document.body.appendChild(this.modal);
      }
      this.popupObj = new Popup(this.popupWrapper, {
        relateTo: this.isMobile && this.isCustomWindow ? document.body : !isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container,
        position: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? { X: "left", Y: "bottom" } : { X: "center", Y: "center" } : this.enableRtl ? { X: "left", Y: "bottom" } : { X: "right", Y: "bottom" },
        offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
        offsetY: OFFSETVALUE2,
        collision: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? { X: "fit" } : { X: "fit", Y: "fit" } : { X: "fit", Y: "flip" },
        targetType: this.isMobile && this.isCustomWindow ? "container" : "relative",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        open: function() {
          if (_this.isMobile && _this.fullScreenMode) {
            _this.iconRangeRight = _this.calendarElement && window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).cssFloat;
            if (_this.iconRangeRight) {
              _this.touchRangeModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
                swipe: _this.dateRangeSwipeHandler.bind(_this)
              });
              EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.touchStartRangeHandler, _this);
            }
          }
          attributes(_this.inputElement, { "aria-expanded": "true", "aria-owns": _this.element.id, "aria-controls": _this.inputElement.id });
          if (_this.value) {
            attributes(_this.inputElement, { "aria-activedescendant": _this.inputElement.id });
          } else {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          addClass([_this.inputWrapper.buttons[0]], ACTIVE3);
          if (!_this.isMobile) {
            if (_this.cancelButton) {
              _this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { tab: "tab", altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
              _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
            }
            if (!isNullOrUndefined(_this.leftCalendar)) {
              if (!_this.isRangeIconClicked) {
                _this.calendarFocus();
              }
            }
            if (!isNullOrUndefined(_this.presetElement)) {
              _this.keyInputConfigs = extend(_this.keyInputConfigs, _this.keyConfigs);
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.presetKeyActionHandler.bind(_this),
                keyConfigs: _this.keyInputConfigs
              });
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
              if (isNullOrUndefined(_this.leftCalendar)) {
                _this.preventBlur = true;
                _this.presetElement.focus();
              } else {
                _this.presetElement.setAttribute("tabindex", "-1");
              }
            }
            _this.popupKeyBoardHandler();
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.add(document, "keydown", _this.popupCloseHandler, _this);
          }
        },
        close: function() {
          attributes(_this.inputElement, { "aria-expanded": "false" });
          _this.inputElement.removeAttribute("aria-owns");
          _this.inputElement.removeAttribute("aria-controls");
          _this.inputElement.removeAttribute("aria-activedescendant");
          removeClass([_this.inputWrapper.buttons[0]], ACTIVE3);
          if (_this.isRangeIconClicked) {
            _this.inputWrapper.container.children[1].focus();
          }
          if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {
            _this.unWireListEvents();
          }
          if (!isNullOrUndefined(_this.popupObj)) {
            if (!isNullOrUndefined(_this.popupObj.element.parentElement)) {
              detach(_this.popupObj.element);
            }
            _this.popupObj.destroy();
            _this.popupObj = null;
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.remove(document, "keydown", _this.popupCloseHandler);
          }
        },
        targetExitViewport: function() {
          var popupEle = _this.popupObj && _this.popupObj.element;
          if (!Browser.isDevice && popupEle && popupEle.getBoundingClientRect().height < window.innerHeight) {
            _this.hide();
          }
        }
      });
      if (this.isMobile) {
        this.popupObj.element.classList.add(DEVICE2);
        if (!this.isMobile) {
          this.popupObj.element.classList.add("e-bigger");
        }
      }
      if (this.isMobile && this.isCustomWindow) {
        addClass([this.modal], [DEVICE2, ROOT5, "e-range-modal"]);
        document.body.className += " " + OVERFLOW2;
        this.modal.style.display = "block";
      }
      EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
    };
    DateRangePicker2.prototype.dateRangeSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRangeRight === "left") {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchRangeStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchRangeStart = false;
      }
    };
    DateRangePicker2.prototype.touchStartRangeHandler = function(e) {
      this.touchRangeStart = true;
    };
    DateRangePicker2.prototype.popupCloseHandler = function(e) {
      switch (e.keyCode) {
        case 27:
          this.hide(e);
          break;
      }
    };
    DateRangePicker2.prototype.calendarFocus = function() {
      var startDate = this.popupObj && this.popupObj.element.querySelector("." + STARTDATE);
      if (startDate) {
        var ele = closest(startDate, "." + RIGHTCALENDER);
        ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          ele.children[1].firstElementChild.focus();
        }
        addClass([startDate], FOCUSDATE);
      } else {
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          this.leftCalendar.children[1].firstElementChild.focus();
        }
      }
    };
    DateRangePicker2.prototype.presetHeight = function() {
      var presets = this.popupObj && this.popupObj.element.querySelector("." + PRESETS);
      var rangeContainer = this.popupObj && this.popupObj.element.querySelector("." + RANGECONTAINER);
      if (!isNullOrUndefined(presets) && !isNullOrUndefined(rangeContainer)) {
        presets.style.height = rangeContainer.getBoundingClientRect().height + "px";
      }
    };
    DateRangePicker2.prototype.presetKeyActionHandler = function(e) {
      switch (e.action) {
        case "moveDown":
          this.listMoveDown(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "moveUp":
          this.listMoveUp(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "enter":
          {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem)) {
              if (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem) {
                this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                var values = this.presetsItem[this.activeIndex];
                if (values.id === "custom_range") {
                  this.calendarFocus();
                  actItem.classList.remove(HOVER2);
                  e.preventDefault();
                  return;
                }
              }
            }
            if (!isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem)) {
              this.onMouseClick(e, hvrItem || actItem);
            }
            e.preventDefault();
          }
          break;
        case "tab":
          if (this.leftCalendar) {
            var item = this.getHoverLI();
            if (!isNullOrUndefined(item)) {
              item.classList.remove(HOVER2);
            }
          } else {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.listMoveDown = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER2);
          addClass([li], HOVER2);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER2);
        }
      } else {
        addClass([this.liCollections[0]], HOVER2);
      }
    };
    DateRangePicker2.prototype.listMoveUp = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER2);
          addClass([li], HOVER2);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER2);
        }
      }
    };
    DateRangePicker2.prototype.getHoverLI = function() {
      var item = this.presetElement.querySelector("." + HOVER2);
      return item;
    };
    DateRangePicker2.prototype.getActiveLI = function() {
      var item = this.presetElement.querySelector("." + ACTIVE3);
      return item;
    };
    DateRangePicker2.prototype.popupKeyBoardHandler = function() {
      this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: { escape: "escape" }
      });
      this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
      this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: this.keyInputConfigs
      });
    };
    DateRangePicker2.prototype.setScrollPosition = function() {
      var listHeight = this.presetElement.getBoundingClientRect().height;
      var hover2 = this.presetElement.querySelector("." + HOVER2);
      var active = this.presetElement.querySelector("." + ACTIVE3);
      var element = !isNullOrUndefined(hover2) ? hover2 : active;
      if (!isNullOrUndefined(element)) {
        var nextEle = element.nextElementSibling;
        var height = nextEle ? nextEle.offsetTop : element.offsetTop;
        var liHeight = element.getBoundingClientRect().height;
        if (height + element.offsetTop > listHeight) {
          this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height;
        } else {
          this.presetElement.scrollTop = 0;
        }
      }
    };
    DateRangePicker2.prototype.popupKeyActionHandle = function(e) {
      var presetElement = closest(e.target, "." + PRESETS);
      switch (e.action) {
        case "escape":
          if (this.isPopupOpen()) {
            if (this.isKeyPopup) {
              this.inputElement.focus();
              this.isKeyPopup = false;
            }
            this.hide(e);
          } else {
            this.inputWrapper.container.children[1].blur();
          }
          break;
        case "enter":
          if (!this.isPopupOpen()) {
            this.show(null, e);
          } else {
            this.inputWrapper.container.children[1].focus();
          }
          break;
        case "tab":
          this.hide(e);
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.cancelButton.element.focus();
          } else {
            if (document.activeElement === this.cancelButton.element && this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else {
            if (document.activeElement === this.applyButton.element && this.applyButton.element.disabled !== true) {
              this.cancelButton.element.focus();
            } else {
              if (!isNullOrUndefined(this.presetElement) && document.activeElement === this.cancelButton.element) {
                this.presetElement.focus();
              } else {
                this.rightCalendar.children[1].firstElementChild.focus();
              }
            }
          }
          e.preventDefault();
          break;
      }
    };
    DateRangePicker2.prototype.documentHandler = function(e) {
      if (isNullOrUndefined(this.popupObj)) {
        return;
      }
      var target = e.target;
      if (!this.inputWrapper.container.contains(target) || !isNullOrUndefined(this.popupObj) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && e.type !== "mousedown") {
        if (e.type !== "touchstart" && (e.type === "mousedown" || this.closeEventArgs && !this.closeEventArgs.cancel)) {
          e.preventDefault();
        }
      }
      if ((isNullOrUndefined(this.targetElement) || !isNullOrUndefined(this.targetElement) && !(target === this.targetElement)) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && !(closest(target, "." + INPUTCONTAINER2) === this.inputWrapper.container) && !(closest(target, ".e-daterangepicker.e-popup") && !target.classList.contains("e-day")) && !target.classList.contains("e-dlg-overlay")) {
        this.preventBlur = false;
        if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
          this.applyFunction(e);
          if (!this.isMobile) {
            this.isRangeIconClicked = false;
          }
        }
      }
    };
    DateRangePicker2.prototype.createInput = function() {
      if (this.fullScreenMode && this.isMobile) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        floatLabelType: this.floatLabelType,
        element: this.inputElement,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [DATERANGEICON]
      }, this.createElement);
      attributes(this.inputElement, {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      });
      Input.addAttributes({ "aria-label": "select", "role": "button" }, this.inputWrapper.buttons[0]);
      this.setEleWidth(this.width);
      addClass([this.inputWrapper.container], DATERANGEWRAPPER);
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, { "name": this.element.id });
      }
      if (this.inputElement.type === "hidden") {
        this.inputWrapper.container.style.display = "none";
      }
      this.refreshControl();
      this.previousEleValue = this.inputElement.value;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.startCopy = this.startDate;
      this.endCopy = this.endDate;
    };
    DateRangePicker2.prototype.setEleWidth = function(width) {
      if (typeof width === "string") {
        this.inputWrapper.container.style.width = this.width;
      } else if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DateRangePicker2.prototype.adjustLongHeaderWidth = function() {
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.popupWrapper], DAYHEADERLONG2);
      }
    };
    DateRangePicker2.prototype.refreshControl = function() {
      this.validateMinMax();
      if (this.strictMode) {
        this.validateRangeStrict();
      }
      var isDisabled = this.disabledDates();
      if (this.strictMode && isDisabled) {
        this.startValue = this.previousStartValue;
        this.setProperties({ startDate: this.startValue }, true);
        this.endValue = this.previousEndValue;
        this.setProperties({ endDate: this.endValue }, true);
        this.setValue();
      }
      this.updateInput();
      if (!this.strictMode) {
        this.validateRange();
      }
      if (!this.strictMode && isDisabled) {
        this.clearRange();
      }
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isDisabled && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.errorClass();
      this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
      this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
    };
    DateRangePicker2.prototype.updateInput = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var formatOption = { format: this.formatString, type: "date", skeleton: "yMd" };
        var startDate = this.globalize.formatDate(this.startValue, formatOption);
        var endDate = this.globalize.formatDate(this.endValue, formatOption);
        Input.setValue(startDate + " " + this.separator + " " + endDate, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        Input.setValue(this.invalidValueString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DateRangePicker2.prototype.checkInvalidRange = function(value) {
      if (!isNullOrUndefined(value)) {
        var invalid = false;
        var startinvalue = void 0;
        var endinvalue = void 0;
        var startString = null;
        var endString = null;
        var valueString = null;
        var startObject = false;
        var endObject = false;
        var invalidobject = false;
        if (typeof value === "string") {
          var range = value.split(" " + this.separator + " ");
          if (range.length === 2) {
            startString = range[0];
            endString = range[1];
          } else {
            invalid = true;
            valueString = value;
          }
        } else {
          if (value.length > 0) {
            startinvalue = value[0];
            endinvalue = value[1];
          } else {
            startinvalue = value.start;
            endinvalue = value.end;
          }
          if (!(startinvalue instanceof Date) && typeof startinvalue !== "object") {
            startString = this.getstringvalue(startinvalue);
          } else if (startinvalue instanceof Date) {
            startObject = true;
          } else if (!isNullOrUndefined(startinvalue)) {
            invalidobject = true;
          }
          if (!(endinvalue instanceof Date) && typeof endinvalue !== "object") {
            endString = this.getstringvalue(endinvalue);
          } else if (endinvalue instanceof Date) {
            endObject = true;
          } else if (!isNullOrUndefined(endinvalue)) {
            invalidobject = true;
          }
        }
        if (isNullOrUndefined(startString) && !startObject && !isNullOrUndefined(endString) || !isNullOrUndefined(startString) && !endObject && isNullOrUndefined(endString)) {
          invalid = true;
        }
        if (invalidobject) {
          startString = endString = valueString = null;
          invalid = true;
        }
        if (startString) {
          invalid = invalid || this.checkInvalidValue(startString);
        }
        if (endString) {
          invalid = invalid || this.checkInvalidValue(endString);
        }
        if (invalid) {
          if (startObject && !invalidobject) {
            startString = startinvalue.toLocaleDateString();
          }
          if (endObject && !invalidobject) {
            endString = endinvalue.toLocaleDateString();
          }
          if (!isNullOrUndefined(startString) && !isNullOrUndefined(endString)) {
            valueString = startString + " " + this.separator + " " + endString;
          } else if (!isNullOrUndefined(startString)) {
            valueString = startString;
          } else if (!isNullOrUndefined(endString)) {
            valueString = endString;
          }
          this.invalidValueString = valueString;
          this.setProperties({ value: null }, true);
          this.setProperties({ startValue: null }, true);
          this.setProperties({ endValue: null }, true);
          this.startDate = null;
          this.endDate = null;
        }
      }
    };
    DateRangePicker2.prototype.getstringvalue = function(value) {
      var stringValue = null;
      if (!isNullOrUndefined(value) && typeof value === "number") {
        stringValue = value.toString();
      } else if (!isNullOrUndefined(value) && typeof value === "string") {
        stringValue = "" + value;
      }
      return stringValue;
    };
    DateRangePicker2.prototype.checkInvalidValue = function(value) {
      var valueString = value;
      var invalid = false;
      var formatOpt = null;
      formatOpt = { format: this.formatString, type: "date", skeleton: "yMd" };
      if (typeof valueString !== "string") {
        invalid = true;
      } else {
        var globalize = new Internationalization(this.locale);
        if (!this.checkDateValue(globalize.parseDate(valueString, formatOpt))) {
          var extISOStr = null;
          var basISOString = null;
          extISOStr = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOStr.test(valueString) && !basISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
            invalid = true;
          }
        }
      }
      return invalid;
    };
    DateRangePicker2.prototype.isDateDisabled = function(date) {
      if (isNullOrUndefined(date)) {
        return false;
      }
      var value = /* @__PURE__ */ new Date(+date);
      if (+value < +this.min || +value > +this.max) {
        return true;
      }
      this.virtualRenderCellArgs = {
        date: value,
        isDisabled: false
      };
      var args = this.virtualRenderCellArgs;
      this.virtualRenderCellEvent(args);
      if (args.isDisabled) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.disabledDateRender = function() {
      this.disabledDays = [];
      this.disabledDayCnt = null;
      var localDate = /* @__PURE__ */ new Date(+this.startValue);
      var count = 0;
      while (+localDate <= +this.endValue && +this.endValue <= +this.max) {
        this.virtualRenderCellArgs = {
          date: localDate,
          isDisabled: false
        };
        var args = this.virtualRenderCellArgs;
        this.virtualRenderCellEvent(args);
        if (args.isDisabled) {
          this.disabledDays.push(/* @__PURE__ */ new Date(+args.date));
          if (+localDate > +this.startValue && +localDate < +this.endValue) {
            count++;
          }
        }
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      this.disabledDayCnt = count;
    };
    DateRangePicker2.prototype.virtualRenderCellEvent = function(args) {
      extend(this.virtualRenderCellArgs, { name: "renderDayCell" });
      this.trigger("renderDayCell", args);
    };
    DateRangePicker2.prototype.disabledDates = function() {
      var isStartDisabled = false;
      var isEndDisabled = false;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        isStartDisabled = this.isDateDisabled(this.startValue);
        isEndDisabled = this.isDateDisabled(this.endValue);
        if (!this.isPopupOpen()) {
          this.currentDate = null;
        }
        this.setValue();
      }
      return isStartDisabled || isEndDisabled;
    };
    DateRangePicker2.prototype.setModelValue = function() {
      if (!this.value && this.startDate === null && this.endDate === null) {
        this.setProperties({ value: null }, true);
      } else if (this.value === null || this.value.start === null) {
        if (this.value === null) {
          this.setProperties({ value: [this.startDate, this.endDate] }, true);
        } else if (this.value.start === null) {
          this.setProperties({ value: { start: this.startDate, end: this.endDate } }, true);
        }
      } else {
        if (this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0) {
          if (+this.startDate !== +this.value[0] || +this.endDate !== +this.value[1]) {
            this.setProperties({ value: [this.startDate, this.endDate] }, true);
          }
          if (this.value && this.value[0] == null && this.value[1] == null) {
            this.setProperties({ value: null }, true);
          }
        } else {
          if (this.value && this.value.start) {
            this.setProperties({ value: { start: this.startDate, end: this.endDate } }, true);
          }
        }
      }
      this.createHiddenInput();
    };
    DateRangePicker2.prototype.dispatchEvent = function(element, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      element.dispatchEvent(evt);
      this.firstHiddenChild.dispatchEvent(evt);
    };
    DateRangePicker2.prototype.changeTrigger = function(e) {
      if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
        this.setProperties({ endDate: this.checkDateValue(this.endValue) }, true);
        this.setProperties({ startDate: this.checkDateValue(this.startValue) }, true);
        this.setModelValue();
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.rangeArgs(e));
        }
      }
      this.previousEleValue = this.inputElement.value;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
    };
    DateRangePicker2.prototype.navigateTo = function(view, date) {
      if (this.isPopupOpen()) {
        if (view.toLowerCase() === "month") {
          view = "Month";
        } else if (view.toLowerCase() === "year") {
          view = "Year";
        } else if (view.toLowerCase() === "decade") {
          view = "Decade";
        } else {
          return;
        }
        if (this.getViewNumber(view) < this.getViewNumber(this.depth)) {
          view = this.depth;
        }
        if (this.isMobile) {
          _super.prototype.navigateTo.call(this, view, date);
        } else {
          if (date < this.min) {
            date = /* @__PURE__ */ new Date(+this.min);
          } else if (date >= this.max) {
            date = /* @__PURE__ */ new Date(+this.max);
          }
          if (view === "Month" && this.isSameMonth(date, this.max)) {
            date = new Date(this.max.getFullYear(), this.max.getMonth() - 1, this.min.getDate());
          } else if (view === "Year" && this.isSameYear(date, this.max)) {
            date = new Date(this.max.getFullYear() - 1, this.max.getMonth(), this.max.getDate());
          } else if (view === "Decade" && this.isSameDecade(date, this.max)) {
            date = new Date(this.max.getFullYear() - 10, this.max.getMonth(), this.max.getDate());
          }
          this.leftCalCurrentDate = date;
          this.navigate(this.leftCalendar, this.leftCalCurrentDate, view);
          if (view === "Month") {
            date = new Date(this.currentDate.setMonth(this.currentDate.getMonth() + 1));
          } else if (view === "Year") {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 1));
          } else {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 10));
          }
          this.rightCalCurrentDate = date;
          this.navigate(this.rightCalendar, this.rightCalCurrentDate, view);
          this.leftKeyboardModule = this.rightKeyboardModule = null;
          this.updateNavIcons();
        }
        if (this.currentView() === this.depth) {
          this.bindCalendarCellEvents();
        }
        this.removeFocusedDate();
        this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      }
    };
    DateRangePicker2.prototype.navigate = function(calendar, date, view) {
      this.calendarElement = calendar;
      this.table = calendar.querySelector("table");
      this.tableBodyElement = calendar.querySelector("tbody");
      this.headerTitleElement = calendar.querySelector(".e-title");
      this.tableHeadElement = calendar.querySelector("thead");
      this.contentElement = calendar.querySelector(".e-content");
      this.previousIcon = calendar.querySelector(".e-prev");
      this.nextIcon = calendar.querySelector(".e-next");
      this.effect = ZOOMIN2;
      _super.prototype.navigateTo.call(this, view, date);
    };
    DateRangePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.focusOut = function() {
      var isBlur = this.preventBlur;
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.preventBlur = false;
        this.inputElement.blur();
        this.preventBlur = isBlur;
      }
    };
    DateRangePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.hide(null);
      var ariaAttrs = {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "aria-invalid": "false",
        "spellcheck": "false"
      };
      if (this.inputElement) {
        removeClass([this.inputElement], [ROOT5]);
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.inputElement.classList.remove("e-input");
        if (!isNullOrUndefined(this.inputWrapper)) {
          EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
          if (this.angularTag === null) {
            this.inputWrapper.container.parentElement.appendChild(this.inputElement);
          }
          detach(this.inputWrapper.container);
        }
      }
      if (!isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {
        this.inputKeyboardModule.destroy();
      }
      if (this.popupObj) {
        if (!this.isMobile) {
          this.clearCalendarEvents();
        }
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      if (!isNullOrUndefined(this.firstHiddenChild) && !isNullOrUndefined(this.secondHiddenChild)) {
        detach(this.firstHiddenChild);
        detach(this.secondHiddenChild);
        this.firstHiddenChild = this.secondHiddenChild = null;
        this.inputElement.setAttribute("name", this.element.getAttribute("data-name"));
        this.inputElement.removeAttribute("data-name");
      }
      this.closeEventArgs = null;
      this.leftCalendar = null;
      this.rightTitle = null;
      this.leftTitle = null;
      this.openEventArgs = null;
      this.leftCalNextIcon = null;
      this.rightCalendar = null;
      this.closeEventArgs = null;
      this.rightCalPrevIcon = null;
      this.leftCalPrevIcon = null;
      this.popupKeyboardModule = null;
      this.cancelButton = null;
      this.applyButton = null;
      this.calendarElement = null;
      this.leftKeyboardModule = null;
      this.rightCalNextIcon = null;
      this.leftCalNextIcon = null;
      this.btnKeyboardModule = null;
      this.rightKeyboardModule = null;
      this.leftKeyboardModule = null;
      this.presetKeyboardModule = null;
      this.liCollections = null;
      this.popupObj = null;
      this.popupWrapper = null;
    };
    DateRangePicker2.prototype.ensureInputAttribute = function() {
      var attr = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        attr[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < attr.length; i++) {
        if (isNullOrUndefined(this.cloneElement.getAttribute(attr[i]))) {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(attr[i]);
        } else {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(attr[i]);
          }
          this.inputElement.setAttribute(attr[i], this.cloneElement.getAttribute(attr[i]));
        }
      }
    };
    DateRangePicker2.prototype.getModuleName = function() {
      return "daterangepicker";
    };
    DateRangePicker2.prototype.getPersistData = function() {
      var keyEntity = ["startDate", "endDate", "value"];
      return this.addOnPersist(keyEntity);
    };
    DateRangePicker2.prototype.getSelectedRange = function() {
      var range;
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
          this.disabledDateRender();
        }
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
      } else {
        range = 0;
      }
      return { startDate: this.startValue, endDate: this.endValue, daySpan: range };
    };
    DateRangePicker2.prototype.show = function(element, event2) {
      var _this = this;
      if (this.isMobile && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        if (!this.isPopupOpen()) {
          if (element) {
            this.targetElement = element;
          }
          this.createPopup();
          if (this.isMobile || Browser.isDevice) {
            this.mobileRangePopupWrap = this.createElement("div", { className: "e-daterangepick-mob-popup-wrap" });
            document.body.appendChild(this.mobileRangePopupWrap);
          }
          this.openEventArgs = {
            popup: this.popupObj || null,
            cancel: false,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null,
            appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body
          };
          var eventArgs = this.openEventArgs;
          this.trigger("open", eventArgs, function(eventArgs2) {
            _this.openEventArgs = eventArgs2;
            if (!_this.openEventArgs.cancel) {
              _this.openEventArgs.appendTo.appendChild(_this.popupWrapper);
              _this.showPopup(element, event2);
              var isPreset = !_this.isCustomRange || _this.isMobile && _this.isCustomRange;
              if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) && isPreset) {
                _this.setScrollPosition();
              }
              _this.checkMinMaxDays();
              if (_this.isMobile && !isNullOrUndefined(_this.startDate) && isNullOrUndefined(_this.endDate)) {
                _this.endButton.element.classList.add(ACTIVE3);
                _this.startButton.element.classList.remove(ACTIVE3);
                _this.endButton.element.removeAttribute("disabled");
                _this.selectableDates();
              }
              _super.prototype.setOverlayIndex.call(_this, _this.mobileRangePopupWrap, _this.popupObj.element, _this.modal, _this.isMobile || Browser.isDevice);
            }
          });
          if (Browser.isDevice) {
            var dlgOverlay = this.createElement("div", { className: "e-dlg-overlay" });
            dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
            this.mobileRangePopupWrap.appendChild(dlgOverlay);
          }
        }
      }
    };
    DateRangePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (this.popupObj) {
        if (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue)) {
          this.clearRange();
        } else {
          if (!isNullOrUndefined(this.previousStartValue)) {
            this.startValue = new Date(this.checkValue(this.previousStartValue));
            this.setValue();
            this.currentDate = new Date(this.checkValue(this.startValue));
          } else {
            this.startValue = null;
            this.setValue();
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            this.endValue = new Date(this.checkValue(this.previousEndValue));
            this.setValue();
          } else {
            this.endValue = null;
            this.setValue();
          }
        }
        if (this.isPopupOpen()) {
          this.closeEventArgs = {
            cancel: false,
            popup: this.popupObj,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null
          };
          var eventArgs = this.closeEventArgs;
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventArgs = eventArgs2;
            if (!_this.closeEventArgs.cancel) {
              if (_this.isMobile) {
                if (!isNullOrUndefined(_this.startButton) && !isNullOrUndefined(_this.endButton)) {
                  EventHandler.remove(_this.startButton.element, "click touchstart", _this.deviceHeaderClick);
                  EventHandler.remove(_this.endButton.element, "click touchstart", _this.deviceHeaderClick);
                }
              }
              if (_this.popupObj) {
                _this.popupObj.hide();
                if (_this.preventBlur) {
                  _this.inputElement.focus();
                  addClass([_this.inputWrapper.container], [INPUTFOCUS2]);
                }
              }
              if (!_this.isMobile) {
                if (!isNullOrUndefined(_this.leftKeyboardModule) && !isNullOrUndefined(_this.rightKeyboardModule)) {
                  _this.leftKeyboardModule.destroy();
                  _this.rightKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.presetElement)) {
                  _this.presetKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.cancelButton)) {
                  _this.btnKeyboardModule.destroy();
                }
              }
              _this.targetElement = null;
              removeClass([document.body], OVERFLOW2);
              EventHandler.remove(document, "mousedown touchstart", _this.documentHandler);
              if (_this.isMobile && _this.modal) {
                _this.modal.style.display = "none";
                _this.modal.outerHTML = "";
                _this.modal = null;
              }
              if (_this.isMobile || Browser.isDevice) {
                if (!isNullOrUndefined(_this.mobileRangePopupWrap)) {
                  _this.mobileRangePopupWrap.remove();
                  _this.mobileRangePopupWrap = null;
                }
              }
              _this.isKeyPopup = _this.dateDisabled = false;
            } else {
              removeClass([_this.inputWrapper.buttons[0]], ACTIVE3);
            }
            _this.updateClearIconState();
            _this.updateHiddenInput();
            if (_this.isMobile && _this.allowEdit && !_this.readonly) {
              _this.inputElement.removeAttribute("readonly");
            }
          });
        }
      } else {
        this.updateClearIconState();
        this.updateHiddenInput();
        if (this.isMobile && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    DateRangePicker2.prototype.setLocale = function() {
      this.globalize = new Internationalization(this.locale);
      this.l10n.setLocale(this.locale);
      if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
        this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
        Input.setPlaceholder(this.placeholder, this.inputElement);
      }
      this.updateInput();
      this.updateHiddenInput();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.refreshChange = function() {
      this.checkView();
      this.refreshControl();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.setDate = function() {
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      this.refreshChange();
    };
    DateRangePicker2.prototype.enableInput = function() {
      if (+this.min <= +this.max) {
        this.setProperties({ enabled: true }, true);
        Input.setEnabled(this.enabled, this.inputElement);
        if (this.element.hasAttribute("disabled")) {
          this.bindEvents();
        }
      }
    };
    DateRangePicker2.prototype.clearModelvalue = function(newProp, oldProp) {
      this.setProperties({ startDate: null }, true);
      this.setProperties({ endDate: null }, true);
      if (oldProp.value && oldProp.value.length > 0) {
        this.setProperties({ value: null }, true);
      } else if (oldProp.value && oldProp.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      } else if (oldProp.value && !oldProp.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      }
      this.updateValue();
      this.setDate();
    };
    DateRangePicker2.prototype.createHiddenInput = function() {
      if (isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild)) {
        this.firstHiddenChild = this.createElement("input");
        this.secondHiddenChild = this.createElement("input");
      }
      if (!isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        this.inputElement.setAttribute("data-name", this.inputElement.getAttribute("name"));
        this.inputElement.removeAttribute("name");
      }
      attributes(this.firstHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT
      });
      attributes(this.secondHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT
      });
      var format = { format: this.formatString, type: "datetime", skeleton: "yMd" };
      this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format);
      this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format);
      this.inputElement.parentElement.appendChild(this.firstHiddenChild);
      this.inputElement.parentElement.appendChild(this.secondHiddenChild);
    };
    DateRangePicker2.prototype.setMinMaxDays = function() {
      if (this.isPopupOpen()) {
        this.removeClassDisabled();
        this.checkMinMaxDays();
        if (this.isMobile) {
          this.selectableDates();
        }
        if (!this.strictMode && (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue))) {
          this.removeSelection();
        } else {
          this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
        }
        this.updateHeader();
      }
    };
    DateRangePicker2.prototype.getStartEndValue = function(date, isEnd) {
      if (this.depth === "Month") {
        return this.checkDateValue(new Date(this.checkValue(date)));
      } else if (this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      }
    };
    DateRangePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var format = { format: this.formatString, type: "date", skeleton: "yMd" };
      var isDynamicValueChange = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell", "select"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          isDynamicValueChange = true;
        }
        switch (prop) {
          case "width":
            this.setEleWidth(this.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "separator":
            this.previousEleValue = this.inputElement.value;
            this.setProperties({ separator: newProp.separator }, true);
            this.updateInput();
            this.changeTrigger();
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.setProperties({ placeholder: newProp.placeholder }, true);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            this.setRangeAllowEdit();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            this.setProperties({ enabled: newProp.enabled }, true);
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "allowEdit":
            this.setRangeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({ enableRtl: newProp.enableRtl }, true);
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkFormat();
            this.updateInput();
            this.changeTrigger();
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
              this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.setLocale();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.setDataAttribute(true);
            this.checkHtmlAttributes(true);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "startDate":
            if (typeof newProp.startDate === "string") {
              newProp.startDate = this.globalize.parseDate(newProp.startDate, format);
            }
            if (+this.initStartDate !== +newProp.startDate) {
              this.startValue = this.getStartEndValue(newProp.startDate, false);
              this.setDate();
              this.setValue();
            }
            break;
          case "endDate":
            if (typeof newProp.endDate === "string") {
              newProp.endDate = this.globalize.parseDate(newProp.endDate, format);
            }
            if (+this.initEndDate !== +newProp.endDate) {
              this.endValue = this.getStartEndValue(newProp.endDate, true);
              this.setDate();
              this.setValue();
            }
            break;
          case "value":
            isDynamicValueChange = true;
            this.invalidValueString = null;
            this.checkInvalidRange(newProp.value);
            if (typeof newProp.value === "string") {
              if (!this.invalidValueString) {
                var rangeArray = newProp.value.split(" " + this.separator + " ");
                this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
                this.updateValue();
                this.setDate();
              } else {
                this.clearModelvalue(newProp, oldProp);
              }
            } else {
              if (!isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start) {
                this.valueType = newProp.value;
                if (newProp.value[0] === null || newProp.value.start === null) {
                  if (newProp.value.length === 1 || newProp.value.start) {
                    this.clearModelvalue(newProp, oldProp);
                  } else if (newProp.value[1] === null || newProp.value.start === null) {
                    this.clearModelvalue(newProp, oldProp);
                  }
                } else if (+this.initStartDate !== +newProp.value[0] || +this.initEndDate !== +newProp.value[1] || +this.initStartDate !== +(newProp.value.start || +this.initEndDate !== +newProp.value.start)) {
                  if (newProp.value.length === 1) {
                    this.modelValue = newProp.value;
                  } else if (newProp.value.start) {
                    this.modelValue = newProp.value;
                  }
                  this.updateValue();
                  this.setDate();
                }
              } else {
                if (isNullOrUndefined(this.value) || newProp.value.start == null) {
                  this.valueType = newProp.value;
                  this.startValue = null;
                  this.endValue = null;
                  this.clearModelvalue(newProp, oldProp);
                }
              }
            }
            if (this.isPopupOpen()) {
              if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
                this.removeSelection();
                if (this.isMobile) {
                  this.deviceHeaderUpdate();
                }
                return;
              }
              if (this.isMobile) {
                this.navigate(this.deviceCalendar, this.startValue, this.currentView());
                this.deviceHeaderUpdate();
              } else {
                this.navigate(this.leftCalendar, this.startValue, this.currentView());
                this.updateControl(this.leftCalendar);
                this.navigate(this.rightCalendar, this.endValue, this.currentView());
                this.updateControl(this.rightCalendar);
              }
              this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
              this.updateHeader();
              this.applyButton.disabled = this.applyButton.element.disabled = false;
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "minDays":
            isDynamicValueChange = true;
            this.setProperties({ minDays: newProp.minDays }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "maxDays":
            isDynamicValueChange = true;
            this.setProperties({ maxDays: newProp.maxDays }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "min":
            this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(newProp.min))) }, true);
            this.previousEleValue = this.inputElement.value;
            this.enableInput();
            this.refreshChange();
            break;
          case "max":
            this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(newProp.max))) }, true);
            this.enableInput();
            this.refreshChange();
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.setProperties({ strictMode: newProp.strictMode }, true);
            this.refreshChange();
            break;
          case "presets":
            this.setProperties({ presets: newProp.presets }, true);
            this.processPresets();
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "start":
            this.setProperties({ start: newProp.start }, true);
            this.refreshChange();
            break;
          case "depth":
            this.setProperties({ depth: newProp.depth }, true);
            this.refreshChange();
            break;
        }
        if (!isDynamicValueChange) {
          this.hide(null);
        }
      }
    };
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "value", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "enablePersistence", void 0);
    __decorate21([
      Property(new Date(1900, 0, 1))
    ], DateRangePicker2.prototype, "min", void 0);
    __decorate21([
      Property(new Date(2099, 11, 31))
    ], DateRangePicker2.prototype, "max", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "locale", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "weekNumber", void 0);
    __decorate21([
      Property("Gregorian")
    ], DateRangePicker2.prototype, "calendarMode", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "openOnFocus", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "fullScreenMode", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "created", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "destroyed", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "change", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "cleared", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "navigated", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "renderDayCell", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "startDate", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "endDate", void 0);
    __decorate21([
      Collection([{}], Presets)
    ], DateRangePicker2.prototype, "presets", void 0);
    __decorate21([
      Property("")
    ], DateRangePicker2.prototype, "width", void 0);
    __decorate21([
      Property(1e3)
    ], DateRangePicker2.prototype, "zIndex", void 0);
    __decorate21([
      Property(true)
    ], DateRangePicker2.prototype, "showClearButton", void 0);
    __decorate21([
      Property(true)
    ], DateRangePicker2.prototype, "showTodayButton", void 0);
    __decorate21([
      Property("Month")
    ], DateRangePicker2.prototype, "start", void 0);
    __decorate21([
      Property("Month")
    ], DateRangePicker2.prototype, "depth", void 0);
    __decorate21([
      Property("")
    ], DateRangePicker2.prototype, "cssClass", void 0);
    __decorate21([
      Property("-")
    ], DateRangePicker2.prototype, "separator", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "minDays", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "maxDays", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "strictMode", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "keyConfigs", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "format", void 0);
    __decorate21([
      Property(true)
    ], DateRangePicker2.prototype, "enabled", void 0);
    __decorate21([
      Property(false)
    ], DateRangePicker2.prototype, "readonly", void 0);
    __decorate21([
      Property(true)
    ], DateRangePicker2.prototype, "allowEdit", void 0);
    __decorate21([
      Property("Never")
    ], DateRangePicker2.prototype, "floatLabelType", void 0);
    __decorate21([
      Property(null)
    ], DateRangePicker2.prototype, "placeholder", void 0);
    __decorate21([
      Property({})
    ], DateRangePicker2.prototype, "htmlAttributes", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "open", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "close", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "select", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "focus", void 0);
    __decorate21([
      Event()
    ], DateRangePicker2.prototype, "blur", void 0);
    DateRangePicker2 = __decorate21([
      NotifyPropertyChanges
    ], DateRangePicker2);
    return DateRangePicker2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WRAPPERCLASS = "e-time-wrapper";
var POPUP4 = "e-popup";
var ERROR3 = "e-error";
var POPUPDIMENSION = "240px";
var DAY = (/* @__PURE__ */ new Date()).getDate();
var MONTH3 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR3 = (/* @__PURE__ */ new Date()).getFullYear();
var ROOT6 = "e-timepicker";
var LIBRARY3 = "e-lib";
var CONTROL5 = "e-control";
var CONTENT3 = "e-content";
var SELECTED8 = "e-active";
var HOVER3 = "e-hover";
var NAVIGATION = "e-navigation";
var DISABLED7 = "e-disabled";
var ICONANIMATION = "e-icon-anim";
var FOCUS3 = "e-input-focus";
var LISTCLASS2 = "e-list-item";
var HALFPOSITION = 2;
var ANIMATIONDURATION = 50;
var OVERFLOW3 = "e-time-overflow";
var OFFSETVAL = 4;
var EDITABLE = "e-non-edit";
var wrapperAttributes = ["title", "class", "style"];
var TimePickerBase;
(function(TimePickerBase2) {
  function createListItems(createdEl, min, max, globalize, timeFormat, step) {
    var formatOptions;
    if (this.calendarMode === "Gregorian") {
      formatOptions = { format: timeFormat, type: "time" };
    } else {
      formatOptions = { format: timeFormat, type: "time", calendar: "islamic" };
    }
    var start;
    var interval = step * 6e4;
    var listItems = [];
    var timeCollections = [];
    start = +min.setMilliseconds(0);
    var end = +max.setMilliseconds(0);
    while (end >= start) {
      timeCollections.push(start);
      listItems.push(globalize.formatDate(new Date(start), { format: timeFormat, type: "time" }));
      start += interval;
    }
    var listTag = ListBase.createList(createdEl, listItems, null, true);
    return { collection: timeCollections, list: listTag };
  }
  TimePickerBase2.createListItems = createListItems;
})(TimePickerBase || (TimePickerBase = {}));
var TimeMaskPlaceholder = (
  /** @class */
  function(_super) {
    __extends22(TimeMaskPlaceholder2, _super);
    function TimeMaskPlaceholder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate22([
      Property("day")
    ], TimeMaskPlaceholder2.prototype, "day", void 0);
    __decorate22([
      Property("month")
    ], TimeMaskPlaceholder2.prototype, "month", void 0);
    __decorate22([
      Property("year")
    ], TimeMaskPlaceholder2.prototype, "year", void 0);
    __decorate22([
      Property("day of the week")
    ], TimeMaskPlaceholder2.prototype, "dayOfTheWeek", void 0);
    __decorate22([
      Property("hour")
    ], TimeMaskPlaceholder2.prototype, "hour", void 0);
    __decorate22([
      Property("minute")
    ], TimeMaskPlaceholder2.prototype, "minute", void 0);
    __decorate22([
      Property("second")
    ], TimeMaskPlaceholder2.prototype, "second", void 0);
    return TimeMaskPlaceholder2;
  }(ChildProperty)
);
var TimePicker = (
  /** @class */
  function(_super) {
    __extends22(TimePicker2, _super);
    function TimePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.liCollections = [];
      _this.timeCollections = [];
      _this.disableItemCollection = [];
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.maskedDateValue = "";
      _this.moduleName = _this.getModuleName();
      _this.timeOptions = options;
      return _this;
    }
    TimePicker2.prototype.preRender = function() {
      this.keyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT6, CONTROL5, LIBRARY3]);
      this.inputElement = this.element;
      this.angularTag = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-TIMEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      this.openPopupEventArgs = {
        appendTo: document.body
      };
    };
    TimePicker2.prototype.render = function() {
      this.initialize();
      this.createInputElement();
      this.updateHtmlAttributeToWrapper();
      this.setTimeAllowEdit();
      this.setEnable();
      this.validateInterval();
      this.bindEvents();
      this.validateDisable();
      this.setTimeZone();
      this.setValue(this.getFormattedValue(this.value));
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInputValue(this.maskedDateValue);
        this.checkErrorState(this.maskedDateValue);
      }
      this.anchor = this.inputElement;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputEleValue = this.getDateObject(this.inputElement.value);
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    TimePicker2.prototype.setTimeZone = function() {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = this.serverTimezoneOffset;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    TimePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    TimePicker2.prototype.setTimeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.clearIconState();
    };
    TimePicker2.prototype.clearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [EDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [EDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [EDITABLE]);
      }
    };
    TimePicker2.prototype.validateDisable = function() {
      this.setMinMax(this.initMin, this.initMax);
      if (!isNullOrUndefined(this.value)) {
        this.popupCreation();
        this.popupObj.destroy();
        this.popupWrapper = this.popupObj = null;
      }
      if (!isNaN(+this.value) && this.value !== null) {
        if (!this.valueIsDisable(this.value)) {
          if (this.strictMode) {
            this.resetState();
          }
          this.initValue = null;
          this.initMax = this.getDateObject(this.initMax);
          this.initMin = this.getDateObject(this.initMin);
          this.timeCollections = this.liCollections = [];
          this.setMinMax(this.initMin, this.initMax);
        }
      }
    };
    TimePicker2.prototype.validationAttribute = function(target, input2) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      input2.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        input2.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    TimePicker2.prototype.initialize = function() {
      this.globalize = new Internationalization(this.locale);
      this.defaultCulture = new Internationalization("en");
      this.checkTimeFormat();
      this.checkInvalidValue(this.value);
      this.setProperties({ value: this.checkDateValue(new Date(this.checkInValue(this.value))) }, true);
      this.setProperties({ min: this.checkDateValue(new Date(this.checkInValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkInValue(this.max))) }, true);
      this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkInValue(this.scrollTo))) }, true);
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.checkAttributes(false);
      var localeText = { placeholder: this.placeholder };
      this.l10n = new L10n("timepicker", localeText, this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      this.initValue = this.checkDateValue(this.value);
      this.initMin = this.checkDateValue(this.min);
      this.initMax = this.checkDateValue(this.max);
      this.isNavigate = this.isPreventBlur = this.isTextSelected = false;
      this.activeIndex = this.valueWithMinutes = this.prevDate = null;
      if (!isNullOrUndefined(this.element.getAttribute("id"))) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2_timepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, { "id": this.element.id + "_input" });
        }
      }
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, { "name": this.element.id });
      }
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.checkTimeFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (!isNullOrUndefined(this.format.skeleton) && this.format.skeleton !== "") {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({ type: "time", skeleton: skeletonString });
        } else {
          this.formatString = this.globalize.getDatePattern({ type: "time", skeleton: "short" });
        }
      } else {
        this.formatString = null;
      }
    };
    TimePicker2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    TimePicker2.prototype.createInputElement = function() {
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassesValue = this.cssClass;
      var isBindClearAction = this.enableMask ? false : true;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassesValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        bindClearAction: isBindClearAction,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassesValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [" e-input-group-icon e-time-icon e-icons"]
      }, this.createElement);
      this.inputWrapper.container.style.width = this.setWidth(this.width);
      attributes(this.inputElement, {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "false",
        "aria-invalid": "false"
      });
      if (!this.isNullOrEmpty(this.inputStyle)) {
        Input.addAttributes({ "style": this.inputStyle }, this.inputElement);
      }
      addClass([this.inputWrapper.container], WRAPPERCLASS);
    };
    TimePicker2.prototype.getCldrDateTimeFormat = function() {
      var culture = new Internationalization(this.locale);
      var cldrTime;
      var dateFormat = culture.getDatePattern({ skeleton: "yMd" });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.cldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.checkInvalidValue = function(value) {
      var isInvalid = false;
      if (typeof value !== "object" && !isNullOrUndefined(value)) {
        var valueString = value;
        if (typeof valueString === "string") {
          valueString = valueString.trim();
        }
        var valueExpression = null;
        var valueExp = null;
        if (typeof value === "number") {
          valueString = value.toString();
        } else if (typeof value === "string") {
          if (!/^[a-zA-Z0-9- ]*$/.test(value)) {
            valueExpression = this.setCurrentDate(this.getDateObject(value));
            if (isNullOrUndefined(valueExpression)) {
              valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                format: this.getCldrDateTimeFormat(),
                type: "datetime"
              }));
              if (isNullOrUndefined(valueExpression)) {
                valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                  format: this.formatString,
                  type: "dateTime",
                  skeleton: "yMd"
                }));
              }
            }
          }
        }
        valueExp = this.globalize.parseDate(valueString, {
          format: this.getCldrDateTimeFormat(),
          type: "datetime"
        });
        valueExpression = !isNullOrUndefined(valueExp) && valueExp instanceof Date && !isNaN(+valueExp) ? valueExp : null;
        if (isNullOrUndefined(valueExpression) && valueString.replace(/\s/g, "").length) {
          var extISOString = null;
          var basicISOString = null;
          extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(value) || isNaN(+/* @__PURE__ */ new Date("" + valueString))) {
            isInvalid = true;
          } else {
            valueExpression = /* @__PURE__ */ new Date("" + valueString);
          }
        }
        if (isInvalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({ value: null }, true);
          this.initValue = null;
        } else {
          this.setProperties({ value: valueExpression }, true);
          this.initValue = this.value;
        }
      }
    };
    TimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableMask) {
        modules.push({ args: [this], member: "MaskedDateTime" });
      }
      return modules;
    };
    TimePicker2.prototype.cldrFormat = function(type) {
      var cldrDateTimeString;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTimeString = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTimeString = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTimeString;
    };
    TimePicker2.prototype.destroy = function() {
      this.hide();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.unBindEvents();
      var ariaAttribute = {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "true",
        "aria-invalid": "false"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
        if (this.angularTag === null) {
          this.inputWrapper.container.parentElement.appendChild(this.inputElement);
        }
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.enableElement([this.inputElement]);
        this.inputElement.classList.remove("e-input");
        if (isNullOrUndefined(this.cloneElement.getAttribute("disabled"))) {
          Input.setEnabled(true, this.inputElement, this.floatLabelType);
        }
      }
      if (this.inputWrapper.container) {
        detach(this.inputWrapper.container);
      }
      this.inputWrapper = this.popupWrapper = this.cloneElement = void 0;
      this.liCollections = this.timeCollections = this.disableItemCollection = [];
      if (!isNullOrUndefined(this.rippleFn)) {
        this.rippleFn();
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.rippleFn = null;
      this.openPopupEventArgs = null;
      this.selectedElement = null;
      this.listTag = null;
      this.liCollections = null;
    };
    TimePicker2.prototype.ensureInputAttribute = function() {
      var propertyList = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        propertyList[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < propertyList.length; i++) {
        if (!isNullOrUndefined(this.cloneElement.getAttribute(propertyList[i]))) {
          this.inputElement.setAttribute(propertyList[i], this.cloneElement.getAttribute(propertyList[i]));
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(propertyList[i]);
          }
        } else {
          this.inputElement.removeAttribute(propertyList[i]);
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
        }
      }
    };
    TimePicker2.prototype.popupCreation = function() {
      this.popupWrapper = this.createElement("div", {
        className: ROOT6 + " " + POPUP4,
        attrs: { "id": this.element.id + "_popup", "style": "visibility:hidden" }
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.generateList();
        append([this.listWrapper], this.popupWrapper);
      }
      this.addSelection();
      this.renderPopup();
      detach(this.popupWrapper);
    };
    TimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION, 10);
      var popupHeight = this.popupWrapper.getBoundingClientRect().height;
      return popupHeight > height ? height : popupHeight;
    };
    TimePicker2.prototype.generateList = function() {
      this.createListItems();
      this.wireListEvents();
      var rippleModel = { duration: 300, selector: "." + LISTCLASS2 };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS2);
    };
    TimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      this.popupObj = new Popup(this.popupWrapper, {
        width: this.setPopupWidth(this.width),
        zIndex: this.zIndex,
        targetType: "relative",
        position: Browser.isDevice ? { X: "center", Y: "center" } : { X: "left", Y: "bottom" },
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : { X: "flip", Y: "flip" },
        enableRtl: this.enableRtl,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        offsetY: OFFSETVAL,
        open: function() {
          _this.popupWrapper.style.visibility = "visible";
          addClass([_this.inputWrapper.buttons[0]], SELECTED8);
        },
        close: function() {
          removeClass([_this.inputWrapper.buttons[0]], SELECTED8);
          _this.unWireListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObj.element);
          _this.popupObj.destroy();
          _this.popupWrapper.innerHTML = "";
          _this.listWrapper = _this.popupWrapper = _this.listTag = void 0;
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (!Browser.isDevice) {
        this.popupObj.collision = { X: "none", Y: "flip" };
      }
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObj.element.style.maxHeight = "100%";
        this.popupObj.element.style.width = "100%";
      } else {
        this.popupObj.element.style.maxHeight = POPUPDIMENSION;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelHeader = this.createElement("div", { className: "e-model-header" });
        var modelTitleSpan = this.createElement("span", { className: "e-model-title" });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", { className: "e-popup-close" });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.timePopupCloseHandler, this);
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        this.popupWrapper.insertBefore(modelHeader, this.popupWrapper.firstElementChild);
      }
    };
    TimePicker2.prototype.timePopupCloseHandler = function(e) {
      this.hide();
    };
    TimePicker2.prototype.getFormattedValue = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, { skeleton: "medium", type: "time" });
      }
    };
    TimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = !this.isNullOrEmpty(this.initValue);
        if (this.checkDateValue(dateValue)) {
          var date = value ? this.initValue.getDate() : DAY;
          var month = value ? this.initValue.getMonth() : MONTH3;
          var year = value ? this.initValue.getFullYear() : YEAR3;
          return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds());
        }
      }
      return null;
    };
    TimePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassesValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassesValue !== "") {
                addClass([this.inputWrapper.container], updatedClassesValue.split(" "));
              }
            } else if (key === "style") {
              var timeStyle = this.inputWrapper.container.getAttribute(key);
              timeStyle = !isNullOrUndefined(timeStyle) ? timeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, timeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    TimePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    TimePicker2.prototype.updateCssClass = function(cssClassNew, cssClassOld) {
      if (!isNullOrUndefined(cssClassOld)) {
        cssClassOld = cssClassOld.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssClassNew)) {
        cssClassNew = cssClassNew.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssClassNew, [this.inputWrapper.container], cssClassOld);
      if (this.popupWrapper) {
        Input.setCssClass(cssClassNew, [this.popupWrapper], cssClassOld);
      }
    };
    TimePicker2.prototype.removeErrorClass = function() {
      removeClass([this.inputWrapper.container], ERROR3);
      attributes(this.inputElement, { "aria-invalid": "false" });
    };
    TimePicker2.prototype.checkErrorState = function(val) {
      var value = this.getDateObject(val);
      if (this.validateState(value) && !this.invalidValueString || this.enableMask && this.inputElement.value === this.maskedDateValue) {
        this.removeErrorClass();
      } else {
        addClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, { "aria-invalid": "true" });
      }
    };
    TimePicker2.prototype.validateInterval = function() {
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.enableElement([this.inputWrapper.buttons[0]]);
      } else {
        this.disableTimeIcon();
      }
    };
    TimePicker2.prototype.disableTimeIcon = function() {
      this.disableElement([this.inputWrapper.buttons[0]]);
      this.hide();
    };
    TimePicker2.prototype.disableElement = function(element) {
      addClass(element, DISABLED7);
    };
    TimePicker2.prototype.enableElement = function(element) {
      removeClass(element, DISABLED7);
    };
    TimePicker2.prototype.selectInputText = function() {
      this.inputElement.setSelectionRange(0, this.inputElement.value.length);
    };
    TimePicker2.prototype.setCursorToEnd = function() {
      this.inputElement.setSelectionRange(this.inputElement.value.length, this.inputElement.value.length);
    };
    TimePicker2.prototype.getMeridianText = function() {
      var meridian;
      if (this.locale === "en" || this.locale === "en-US") {
        meridian = getValue("dayPeriods.format.wide", getDefaultDateObject());
      } else {
        var gregorianFormat = ".dates.calendars.gregorian.dayPeriods.format.abbreviated";
        var mainVal = "main.";
        meridian = getValue(mainVal + "" + this.locale + gregorianFormat, cldrData);
      }
      return meridian;
    };
    TimePicker2.prototype.getCursorSelection = function() {
      var input2 = this.inputElement;
      var start = 0;
      var end = 0;
      if (!isNaN(input2.selectionStart)) {
        start = input2.selectionStart;
        end = input2.selectionEnd;
      }
      return { start: Math.abs(start), end: Math.abs(end) };
    };
    TimePicker2.prototype.getActiveElement = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        return this.popupWrapper.querySelectorAll("." + SELECTED8);
      } else {
        return null;
      }
    };
    TimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    TimePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    TimePicker2.prototype.setPopupWidth = function(width) {
      width = this.setWidth(width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    TimePicker2.prototype.setScrollPosition = function() {
      var element = this.selectedElement;
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else if (this.popupWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    TimePicker2.prototype.findScrollTop = function(element) {
      var listHeight = this.getPopupHeight();
      var nextEle = element.nextElementSibling;
      var height = nextEle ? nextEle.offsetTop : element.offsetTop;
      var liHeight = element.getBoundingClientRect().height;
      if (height + element.offsetTop > listHeight) {
        this.popupWrapper.scrollTop = nextEle ? height - (listHeight / HALFPOSITION + liHeight / HALFPOSITION) : height;
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.setScrollTo = function() {
      var element;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          var initialTime = this.timeCollections[0];
          var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
          element = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
        }
      } else {
        this.popupWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.getText = function() {
      return isNullOrUndefined(this.checkDateValue(this.value)) ? "" : this.getValue(this.value);
    };
    TimePicker2.prototype.getValue = function(value) {
      return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
        format: this.cldrTimeFormat(),
        type: "time"
      });
    };
    TimePicker2.prototype.cldrDateFormat = function() {
      var cldrDate;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDate = getValue("dateFormats.short", getDefaultDateObject());
      } else {
        cldrDate = this.getCultureDateObject(cldrData, "" + this.locale);
      }
      return cldrDate;
    };
    TimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.formatString)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.dateToNumeric = function() {
      var cldrTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrTime = getValue("timeFormats.medium", getDefaultDateObject());
      } else {
        cldrTime = getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.medium", cldrData);
      }
      return cldrTime;
    };
    TimePicker2.prototype.getExactDateTime = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, { format: this.dateToNumeric(), type: "time" });
      }
    };
    TimePicker2.prototype.setValue = function(value) {
      var time = this.checkValue(value);
      if (!this.strictMode && !this.validateState(time)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        if (this.isNullOrEmpty(time)) {
          this.initValue = null;
          this.validateMinMax(this.value, this.min, this.max);
        } else {
          this.initValue = this.compareFormatChange(time);
        }
      }
      this.updateInput(true, this.initValue);
    };
    TimePicker2.prototype.compareFormatChange = function(value) {
      if (isNullOrUndefined(value)) {
        return null;
      }
      return value !== this.getText() ? this.getDateObject(value) : this.getDateObject(this.value);
    };
    TimePicker2.prototype.updatePlaceHolder = function() {
      Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
    };
    TimePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    TimePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnTimeIconClick");
    };
    TimePicker2.prototype.popupHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      if (this.isPopupOpen()) {
        this.closePopup(0, e);
      } else {
        this.inputElement.focus();
        this.show(e);
      }
    };
    TimePicker2.prototype.mouseDownHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.readonly) {
        this.inputElement.setSelectionRange(0, 0);
        EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      }
    };
    TimePicker2.prototype.mouseUpHandler = function(event2) {
      if (!this.readonly) {
        event2.preventDefault();
        if (this.enableMask) {
          event2.preventDefault();
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
          return;
        } else {
          EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
          var curPos = this.getCursorSelection();
          if (!(curPos.start === 0 && curPos.end === this.inputElement.value.length)) {
            if (this.inputElement.value.length > 0) {
              this.cursorDetails = this.focusSelection();
            }
            this.inputElement.setSelectionRange(this.cursorDetails.start, this.cursorDetails.end);
          }
        }
      }
    };
    TimePicker2.prototype.focusSelection = function() {
      var regex = new RegExp("^[a-zA-Z0-9]+$");
      var split = this.inputElement.value.split("");
      split.push(" ");
      var curPos = this.getCursorSelection();
      var start = 0;
      var end = 0;
      var isSeparator = false;
      if (!this.isTextSelected) {
        for (var i = 0; i < split.length; i++) {
          if (!regex.test(split[i])) {
            end = i;
            isSeparator = true;
          }
          if (isSeparator) {
            if (curPos.start >= start && curPos.end <= end) {
              end = end;
              this.isTextSelected = true;
              break;
            } else {
              start = i + 1;
              isSeparator = false;
            }
          }
        }
      } else {
        start = curPos.start;
        end = curPos.end;
        this.isTextSelected = false;
      }
      return { start, end };
    };
    TimePicker2.prototype.inputHandler = function(event2) {
      if (!this.readonly && this.enabled) {
        if (!(event2.action === "right" || event2.action === "left" || event2.action === "tab" || (event2.action === "home" || event2.action === "end" || event2.action === "up" || event2.action === "down") && !this.isPopupOpen() && !this.enableMask)) {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "home":
          case "end":
          case "up":
          case "down":
            if (!this.isPopupOpen()) {
              this.popupCreation();
              this.popupObj.destroy();
              this.popupObj = this.popupWrapper = null;
            }
            if (this.enableMask && !this.readonly && !this.isPopupOpen()) {
              event2.preventDefault();
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            if (this.isPopupOpen()) {
              this.keyHandler(event2);
            }
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.updateValue(this.valueWithMinutes, event2);
            } else {
              this.updateValue(this.inputElement.value, event2);
            }
            this.hide();
            this.isNavigate = false;
            if (this.isPopupOpen()) {
              event2.stopPropagation();
            }
            break;
          case "open":
            this.show(event2);
            break;
          case "escape":
            this.updateInputValue(this.objToString(this.value));
            if (this.enableMask) {
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
              this.createMask();
            }
            this.previousState(this.value);
            this.hide();
            break;
          case "close":
            this.hide();
            break;
          case "right":
          case "left":
          case "tab":
          case "shiftTab":
            if (!this.isPopupOpen() && this.enableMask && !this.readonly) {
              if (this.inputElement.selectionStart === 0 && this.inputElement.selectionEnd === this.inputElement.value.length || this.inputElement.selectionEnd !== this.inputElement.value.length && event2.action === "tab" || this.inputElement.selectionStart !== 0 && event2.action === "shiftTab" || (event2.action === "left" || event2.action === "right")) {
                event2.preventDefault();
              }
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    TimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS2);
      this.setSelection(li, event2);
      if (li && li.classList.contains(LISTCLASS2)) {
        this.hide();
      }
    };
    TimePicker2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (this.isPopupOpen() && this.popupWrapper) {
        var args = {
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          name: "open"
        };
        removeClass([document.body], OVERFLOW3);
        this.trigger("close", args, function(args2) {
          if (!args2.cancel) {
            var animModel = {
              name: "FadeOut",
              duration: ANIMATIONDURATION,
              delay: delay ? delay : 0
            };
            _this.popupObj.hide(new Animation(animModel));
            removeClass([_this.inputWrapper.container], [ICONANIMATION]);
            attributes(_this.inputElement, { "aria-expanded": "false" });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-controls");
            _this.inputElement.removeAttribute("aria-activedescendant");
            EventHandler.remove(document, "mousedown touchstart", _this.documentClickHandler);
          }
          if (Browser.isDevice && _this.modal) {
            _this.modal.style.display = "none";
            _this.modal.outerHTML = "";
            _this.modal = null;
          }
          if (Browser.isDevice) {
            if (!isNullOrUndefined(_this.mobileTimePopupWrap)) {
              _this.mobileTimePopupWrap.remove();
              _this.mobileTimePopupWrap = null;
            }
          }
          if (Browser.isDevice && _this.allowEdit && !_this.readonly) {
            _this.inputElement.removeAttribute("readonly");
          }
        });
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    TimePicker2.prototype.disposeServerPopup = function() {
      if (this.popupWrapper) {
        this.popupWrapper.style.visibility = "hidden";
        this.popupWrapper.style.top = "-9999px";
        this.popupWrapper.style.left = "-9999px";
        this.popupWrapper.style.width = "0px";
        this.popupWrapper.style.height = "0px";
      }
    };
    TimePicker2.prototype.checkValueChange = function(event2, isNavigation) {
      if (!this.strictMode && !this.validateState(this.valueWithMinutes)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.setProperties({ value: this.compareFormatChange(this.inputElement.value) }, true);
        this.initValue = this.valueWithMinutes = this.compareFormatChange(this.inputElement.value);
        this.prevValue = this.inputElement.value;
        if (+this.prevDate !== +this.value) {
          this.changeEvent(event2);
        }
      } else {
        if (!isNavigation) {
          if (this.prevValue !== this.inputElement.value || isNullOrUndefined(this.checkDateValue(this.value))) {
            this.valueProcess(event2, this.compareFormatChange(this.inputElement.value));
          }
        } else {
          var value = this.getDateObject(new Date(this.timeCollections[this.activeIndex]));
          if (+this.prevDate !== +value) {
            this.valueProcess(event2, value);
          }
        }
      }
    };
    TimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS2);
      this.setHover(currentLi, HOVER3);
    };
    TimePicker2.prototype.setHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeHover(className);
        addClass([li], className);
        if (className === NAVIGATION) {
          li.setAttribute("aria-selected", "true");
        }
      }
    };
    TimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li)) {
        this.checkValue(li.getAttribute("data-value"));
        if (this.enableMask) {
          this.createMask();
        }
        this.selectedElement = li;
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], SELECTED8);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.checkValueChange(event2, true);
      }
    };
    TimePicker2.prototype.onMouseLeave = function() {
      this.removeHover(HOVER3);
    };
    TimePicker2.prototype.scrollHandler = function() {
      if (this.getModuleName() === "timepicker" && Browser.isDevice) {
        return;
      } else {
        this.hide();
      }
    };
    TimePicker2.prototype.setMinMax = function(minVal, maxVal) {
      if (isNullOrUndefined(this.checkDateValue(minVal))) {
        this.initMin = this.getDateObject("12:00:00 AM");
      }
      if (isNullOrUndefined(this.checkDateValue(maxVal))) {
        this.initMax = this.getDateObject("11:59:59 PM");
      }
    };
    TimePicker2.prototype.validateMinMax = function(dateVal, minVal, maxVal) {
      var value = dateVal instanceof Date ? dateVal : this.getDateObject(dateVal);
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        dateVal = this.strictOperation(this.initMin, this.initMax, dateVal, value);
      } else if (+this.createDateObj(this.getFormattedValue(this.initMin)) > +this.createDateObj(this.getFormattedValue(this.initMax))) {
        this.disableTimeIcon();
      }
      if (this.strictMode) {
        dateVal = this.valueIsDisable(dateVal) ? dateVal : null;
      }
      this.checkErrorState(dateVal);
      return dateVal;
    };
    TimePicker2.prototype.valueIsDisable = function(value) {
      if (this.disableItemCollection.length > 0) {
        if (this.disableItemCollection.length === this.timeCollections.length) {
          return false;
        }
        var time = value instanceof Date ? this.objToString(value) : value;
        for (var index = 0; index < this.disableItemCollection.length; index++) {
          if (time === this.disableItemCollection[index]) {
            return false;
          }
        }
      }
      return true;
    };
    TimePicker2.prototype.validateState = function(val) {
      if (!this.strictMode) {
        if (this.valueIsDisable(val)) {
          var value = typeof val === "string" ? this.setCurrentDate(this.getDateObject(val)) : this.setCurrentDate(this.getDateObject(val));
          var maxValue = this.setCurrentDate(this.getDateObject(this.initMax));
          var minValue = this.setCurrentDate(this.getDateObject(this.initMin));
          if (!isNullOrUndefined(this.checkDateValue(value))) {
            if (+value > +maxValue || +value < +minValue) {
              return false;
            }
          } else {
            if (+maxValue < +minValue || this.inputElement.value !== "") {
              return false;
            }
          }
        } else {
          return false;
        }
      }
      return true;
    };
    TimePicker2.prototype.strictOperation = function(minimum, maximum, dateVal, val) {
      var maxValue = this.createDateObj(this.getFormattedValue(maximum));
      var minValue = this.createDateObj(this.getFormattedValue(minimum));
      var value = this.createDateObj(this.getFormattedValue(val));
      if (this.strictMode) {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          this.initValue = this.getDateObject(maxValue);
          this.updateInputValue(this.getValue(this.initValue));
          if (this.enableMask) {
            this.createMask();
          }
          return this.inputElement.value;
        } else if (+minValue >= +value) {
          return this.getDateObject(minValue);
        } else if (+value >= +maxValue || +minValue === +maxValue) {
          return this.getDateObject(maxValue);
        }
      } else {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          if (!isNaN(+this.createDateObj(dateVal))) {
            return dateVal;
          }
        }
      }
      return dateVal;
    };
    TimePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.popupHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      EventHandler.add(this.inputElement, "input", this.inputEventHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyConfigure = extend(this.keyConfigure, this.keyConfigs);
        this.inputEvent = new KeyboardEvents(this.inputWrapper.container, {
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
        if (this.showClearButton && this.inputElement) {
          EventHandler.add(this.inputElement, "mousedown", this.mouseDownHandler, this);
        }
      }
    };
    TimePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    TimePicker2.prototype.formResetHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var timeValue = this.inputElement.getAttribute("value");
        var val = this.checkDateValue(this.inputEleValue);
        if (this.element.tagName === "EJS-TIMEPICKER") {
          val = null;
          timeValue = "";
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({ value: val }, true);
        this.prevDate = this.value;
        this.valueWithMinutes = this.value;
        this.initValue = this.value;
        if (this.inputElement) {
          this.updateInputValue(timeValue);
          if (this.enableMask) {
            if (!timeValue) {
              this.updateInputValue(this.maskedDateValue);
            }
            this.createMask();
          }
          this.checkErrorState(timeValue);
          this.prevValue = this.inputElement.value;
        }
      }
    };
    TimePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    TimePicker2.prototype.inputEventHandler = function() {
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.unBindEvents = function() {
      if (this.inputWrapper) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.popupHandler);
      }
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "input", this.inputEventHandler);
      if (this.inputEvent) {
        this.inputEvent.destroy();
      }
      EventHandler.remove(this.inputElement, "mousedown touchstart", this.mouseDownHandler);
      if (this.showClearButton && !isNullOrUndefined(this.inputWrapper) && !isNullOrUndefined(this.inputWrapper.clearButton)) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.clearHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    TimePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
    };
    TimePicker2.prototype.raiseClearedEvent = function(e) {
      var clearedArgs = {
        event: e
      };
      this.trigger("cleared", clearedArgs);
    };
    TimePicker2.prototype.clearHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      if (!isNullOrUndefined(this.value)) {
        this.clear(e);
      } else {
        this.resetState();
        this.raiseClearedEvent(e);
      }
      if (this.popupWrapper) {
        this.popupWrapper.scrollTop = 0;
      }
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    TimePicker2.prototype.clear = function(event2) {
      this.setProperties({ value: null }, true);
      this.initValue = null;
      this.resetState();
      this.raiseClearedEvent(event2);
      this.changeEvent(event2);
    };
    TimePicker2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.zIndex = this.zIndex;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["step", "disabled", "readonly", "style", "name", "value", "min", "max", "placeholder"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "style":
              this.inputStyle = this.inputElement.getAttribute(prop);
              break;
            case "readonly":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "placeholder":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({ min: value }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({ max: value }, !isDynamic);
                }
              }
              break;
            case "value":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.initValue = value;
                  this.updateInput(false, this.initValue);
                  this.setProperties({ value }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    TimePicker2.prototype.setCurrentDate = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      }
      return new Date(YEAR3, MONTH3, DAY, value.getHours(), value.getMinutes(), value.getSeconds());
    };
    TimePicker2.prototype.getTextFormat = function() {
      var time = 0;
      if (this.cldrTimeFormat().split(" ")[0] === "a" || this.cldrTimeFormat().indexOf("a") === 0) {
        time = 1;
      } else if (this.cldrTimeFormat().indexOf("a") < 0) {
        var strArray = this.cldrTimeFormat().split(" ");
        for (var i = 0; i < strArray.length; i++) {
          if (strArray[i].toLowerCase().indexOf("h") >= 0) {
            time = i;
            break;
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.updateValue = function(value, event2) {
      var val;
      if (this.isNullOrEmpty(value)) {
        this.resetState();
      } else {
        val = this.checkValue(value);
        if (this.strictMode) {
          var inputVal = val === null && value.trim().length > 0 ? this.previousState(this.prevDate) : this.inputElement.value;
          this.updateInputValue(inputVal);
          if (this.enableMask) {
            if (!inputVal) {
              this.updateInputValue(this.maskedDateValue);
            }
            if (isNullOrUndefined(val) && value !== this.maskedDateValue) {
              this.createMask();
            }
            if (isNullOrUndefined(val) && value === this.maskedDateValue) {
              this.updateInputValue(this.maskedDateValue);
            }
          }
        }
      }
      this.checkValueChange(event2, typeof value === "string" ? false : true);
    };
    TimePicker2.prototype.previousState = function(date) {
      var value = this.getDateObject(date);
      for (var i = 0; i < this.timeCollections.length; i++) {
        if (+value === this.timeCollections[i]) {
          this.activeIndex = i;
          this.selectedElement = this.liCollections[i];
          this.valueWithMinutes = new Date(this.timeCollections[i]);
          break;
        }
      }
      return this.getValue(date);
    };
    TimePicker2.prototype.resetState = function() {
      this.removeSelection();
      Input.setValue("", this.inputElement, this.floatLabelType, false);
      this.valueWithMinutes = this.activeIndex = null;
      if (!this.strictMode) {
        this.checkErrorState(null);
      }
    };
    TimePicker2.prototype.objToString = function(val) {
      if (isNullOrUndefined(this.checkDateValue(val))) {
        return null;
      } else {
        return this.globalize.formatDate(val, { format: this.cldrTimeFormat(), type: "time" });
      }
    };
    TimePicker2.prototype.checkValue = function(value) {
      if (!this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.validateValue(date, value);
      }
      this.resetState();
      return this.valueWithMinutes = null;
    };
    TimePicker2.prototype.validateValue = function(date, value) {
      var time;
      var val = this.validateMinMax(value, this.min, this.max);
      var newval = this.getDateObject(val);
      if (this.getFormattedValue(newval) !== this.getFormattedValue(this.value)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = this.objToString(this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = this.objToString(this.valueWithMinutes);
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        var value_1 = val.trim().length > 0 ? val : "";
        this.updateInputValue(value_1);
        if (this.enableMask) {
          if (!value_1) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      } else {
        this.updateInputValue(time);
        if (this.enableMask) {
          if (time === "") {
            this.updateInputValue(this.maskedDateValue);
          }
          if (isNullOrUndefined(time) && value !== this.maskedDateValue) {
            this.createMask();
          }
          if (isNullOrUndefined(time) && value === this.maskedDateValue) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    TimePicker2.prototype.findNextElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var timeVal = null;
      var count = this.liCollections.length;
      var collections = this.timeCollections;
      if (!isNullOrUndefined(this.checkDateValue(value)) || !isNullOrUndefined(this.activeIndex)) {
        if (event2.action === "home") {
          var index = this.validLiElement(0);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else if (event2.action === "end") {
          var index = this.validLiElement(collections.length - 1, true);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < count; i++) {
              if (+value < this.timeCollections[i]) {
                var index = this.validLiElement(i);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === count - 1) {
                var index = this.validLiElement(0);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          } else {
            for (var i = count - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                var index = this.validLiElement(i, true);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === 0) {
                var index = this.validLiElement(count - 1);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(isNullOrUndefined(timeVal) ? null : new Date(timeVal));
      } else {
        this.selectNextItem(event2);
      }
    };
    TimePicker2.prototype.selectNextItem = function(event2) {
      var index = this.validLiElement(0, event2.action === "down" ? false : true);
      this.activeIndex = index;
      this.selectedElement = this.liCollections[index];
      this.elementValue(new Date(this.timeCollections[index]));
    };
    TimePicker2.prototype.elementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        this.checkValue(value);
      }
    };
    TimePicker2.prototype.validLiElement = function(index, backward) {
      var elementIndex = null;
      var items = isNullOrUndefined(this.popupWrapper) ? this.liCollections : this.popupWrapper.querySelectorAll("." + LISTCLASS2);
      var isCheck = true;
      if (items.length) {
        if (backward) {
          for (var i = index; i >= 0; i--) {
            if (!items[i].classList.contains(DISABLED7)) {
              elementIndex = i;
              break;
            } else if (i === 0) {
              if (isCheck) {
                index = i = items.length;
                isCheck = false;
              }
            }
          }
        } else {
          for (var i = index; i <= items.length - 1; i++) {
            if (!items[i].classList.contains(DISABLED7)) {
              elementIndex = i;
              break;
            } else if (i === items.length - 1) {
              if (isCheck) {
                index = i = -1;
                isCheck = false;
              }
            }
          }
        }
      }
      return elementIndex;
    };
    TimePicker2.prototype.keyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0 || !isNullOrUndefined(this.inputWrapper) && this.inputWrapper.buttons[0].classList.contains(DISABLED7)) {
        return;
      }
      var count = this.timeCollections.length;
      if (isNullOrUndefined(this.getActiveElement()) || this.getActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            var index = this.validLiElement(0, event2.action === "down" ? false : true);
            this.activeIndex = index;
            this.selectedElement = this.liCollections[index];
            this.elementValue(new Date(this.timeCollections[index]));
          } else {
            this.findNextElement(event2);
          }
        } else {
          this.findNextElement(event2);
        }
      } else {
        var nextItem = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === count ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? count - 1 : this.activeIndex;
          this.activeIndex = index = this.validLiElement(this.activeIndex, event2.keyCode === 40 || event2.keyCode === 39 ? false : true);
          nextItem = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          var index = this.validLiElement(0);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        } else if (event2.action === "end") {
          var index = this.validLiElement(count - 1, true);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(new Date(nextItem));
      }
      this.isNavigate = true;
      this.setHover(this.selectedElement, NAVIGATION);
      this.setActiveDescendant();
      if (this.enableMask) {
        this.selectInputText();
      }
      if (this.isPopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setScrollPosition();
      }
    };
    TimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.timeFormats.short", ld);
    };
    TimePicker2.prototype.getCultureDateObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.dateFormats.short", ld);
    };
    TimePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    TimePicker2.prototype.unWireListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        if (!Browser.isDevice) {
          EventHandler.remove(this.listWrapper, "mouseover", this.onMouseOver);
          EventHandler.remove(this.listWrapper, "mouseout", this.onMouseLeave);
        }
      }
    };
    TimePicker2.prototype.valueProcess = function(event2, value) {
      var result = isNullOrUndefined(this.checkDateValue(value)) ? null : value;
      if (+this.prevDate !== +result) {
        this.initValue = result;
        this.changeEvent(event2);
      }
    };
    TimePicker2.prototype.changeEvent = function(e) {
      this.addSelection();
      this.updateInput(true, this.initValue);
      var eventArgs = {
        event: e || null,
        value: this.value,
        text: this.inputElement.value,
        isInteracted: !isNullOrUndefined(e),
        element: this.element
      };
      eventArgs.value = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      this.prevDate = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      if (this.isAngular && this.preventChange) {
        this.preventChange = false;
      } else {
        this.trigger("change", eventArgs);
      }
      this.invalidValueString = null;
      this.checkErrorState(this.value);
    };
    TimePicker2.prototype.updateInput = function(isUpdate, date) {
      if (isUpdate) {
        this.prevValue = this.getValue(this.prevDate);
      }
      this.prevDate = this.valueWithMinutes = date;
      if (typeof date !== "number" || (this.value && +(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0)) !== +date) {
        this.setProperties({ value: date }, true);
        if (this.enableMask && this.value) {
          this.createMask();
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.checkErrorState(this.invalidValueString);
        this.updateInputValue(this.invalidValueString);
      }
      this.clearIconState();
    };
    TimePicker2.prototype.setActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, { "aria-activedescendant": this.selectedElement.getAttribute("id") });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    TimePicker2.prototype.removeSelection = function() {
      this.removeHover(HOVER3);
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + SELECTED8);
        if (items.length) {
          removeClass(items, SELECTED8);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.removeHover = function(className) {
      var hoveredItem = this.getHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
        if (className === NAVIGATION) {
          hoveredItem[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.getHoverItem = function(className) {
      var hoveredItem;
      if (!isNullOrUndefined(this.popupWrapper)) {
        hoveredItem = this.popupWrapper.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    TimePicker2.prototype.setActiveClass = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.getDateObject(this.valueWithMinutes)) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              break;
            }
          }
        }
      }
    };
    TimePicker2.prototype.addSelection = function() {
      this.selectedElement = null;
      this.removeSelection();
      this.setActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], SELECTED8);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    TimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS2) && !li.classList.contains(DISABLED7);
    };
    TimePicker2.prototype.createDateObj = function(val) {
      var formatStr = null;
      var today = this.globalize.formatDate(/* @__PURE__ */ new Date(), { format: formatStr, skeleton: "short", type: "date" });
      var value = null;
      if (typeof val === "string") {
        if (val.toUpperCase().indexOf("AM") > -1 || val.toUpperCase().indexOf("PM") > -1) {
          today = this.defaultCulture.formatDate(/* @__PURE__ */ new Date(), { format: formatStr, skeleton: "short", type: "date" });
          value = isNaN(+/* @__PURE__ */ new Date(today + " " + val)) ? null : new Date((/* @__PURE__ */ new Date(today + " " + val)).setMilliseconds(0));
          if (isNullOrUndefined(value)) {
            value = this.timeParse(today, val);
          }
        } else {
          value = this.timeParse(today, val);
        }
      } else if (val instanceof Date) {
        value = val;
      }
      return value;
    };
    TimePicker2.prototype.timeParse = function(today, val) {
      var value;
      value = this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.cldrTimeFormat(),
        type: "datetime"
      });
      value = isNullOrUndefined(value) ? this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.dateToNumeric(),
        type: "datetime"
      }) : value;
      value = isNullOrUndefined(value) ? value : new Date(value.setMilliseconds(0));
      return value;
    };
    TimePicker2.prototype.createListItems = function() {
      var _this = this;
      this.listWrapper = this.createElement("div", { className: CONTENT3, attrs: { "tabindex": "-1" } });
      var start;
      var interval = this.step * 6e4;
      var listItems = [];
      this.timeCollections = [];
      this.disableItemCollection = [];
      start = +this.getDateObject(this.initMin).setMilliseconds(0);
      var end = +this.getDateObject(this.initMax).setMilliseconds(0);
      while (end >= start) {
        this.timeCollections.push(start);
        listItems.push(this.globalize.formatDate(new Date(start), { format: this.cldrTimeFormat(), type: "time" }));
        start += interval;
      }
      var listBaseOptions = {
        itemCreated: function(args) {
          var eventArgs = {
            element: args.item,
            text: args.text,
            value: _this.getDateObject(args.text),
            isDisabled: false
          };
          _this.trigger("itemRender", eventArgs, function(eventArgs2) {
            if (eventArgs2.isDisabled) {
              eventArgs2.element.classList.add(DISABLED7);
            }
            if (eventArgs2.element.classList.contains(DISABLED7)) {
              _this.disableItemCollection.push(eventArgs2.element.getAttribute("data-value"));
            }
          });
        }
      };
      this.listTag = ListBase.createList(this.createElement, listItems, listBaseOptions, true);
      attributes(this.listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options", "tabindex": "0" });
      append([this.listTag], this.listWrapper);
    };
    TimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + this.popupObj.element.id + '"]') && target !== this.inputElement && target !== (this.inputWrapper && this.inputWrapper.buttons[0]) && target !== (this.inputWrapper && this.inputWrapper.clearButton) && target !== (this.inputWrapper && this.inputWrapper.container) && !target.classList.contains("e-dlg-overlay")) {
        if (this.isPopupOpen()) {
          this.hide();
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement && target === this.popupWrapper;
        }
      }
    };
    TimePicker2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement, this.floatLabelType);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], DISABLED7);
        attributes(this.inputElement, { "aria-disabled": "false" });
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.hide();
        addClass([this.inputWrapper.container], DISABLED7);
        attributes(this.inputElement, { "aria-disabled": "true" });
        this.inputElement.tabIndex = -1;
      }
    };
    TimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.initMin = this.checkDateValue(new Date(this.checkInValue(date.min)));
        this.setProperties({ min: this.initMin }, true);
      } else {
        this.initMax = this.checkDateValue(new Date(this.checkInValue(date.max)));
        this.setProperties({ max: this.initMax }, true);
      }
      if (this.inputElement.value === "") {
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        this.checkValue(this.inputElement.value);
      }
      this.checkValueChange(null, false);
    };
    TimePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isPreventBlur && this.isPopupOpen()) {
        this.inputElement.focus();
        return;
      }
      this.closePopup(0, e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      removeClass([this.inputWrapper.container], [FOCUS3]);
      if (this.getText() !== this.inputElement.value) {
        this.updateValue(this.inputElement.value, e);
      } else if (this.inputElement.value.trim().length === 0) {
        this.resetState();
      }
      this.cursorDetails = null;
      this.isNavigate = false;
      if (this.inputElement.value === "") {
        this.invalidValueString = null;
      }
      var blurArguments = {
        model: this
      };
      this.trigger("blur", blurArguments);
    };
    TimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [FOCUS3]);
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
    };
    TimePicker2.prototype.isPopupOpen = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + ROOT6)) {
        return true;
      }
      return false;
    };
    TimePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      var focusArguments = {
        model: this
      };
      if (!this.readonly && !Browser.isDevice && !this.enableMask) {
        this.selectInputText();
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      this.trigger("focus", focusArguments);
      this.clearIconState();
      if (this.openOnFocus) {
        this.show();
      }
    };
    TimePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    TimePicker2.prototype.hide = function() {
      this.closePopup(100, null);
      this.clearIconState();
    };
    TimePicker2.prototype.show = function(event2) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupWrapper) {
        return;
      } else {
        this.popupCreation();
        if (Browser.isDevice && this.listWrapper) {
          this.modal = this.createElement("div");
          this.modal.className = "" + ROOT6 + " e-time-modal";
          document.body.className += " " + OVERFLOW3;
          document.body.appendChild(this.modal);
        }
        if (Browser.isDevice) {
          this.mobileTimePopupWrap = this.createElement("div", { className: "e-timepicker-mob-popup-wrap" });
          document.body.appendChild(this.mobileTimePopupWrap);
        }
        this.openPopupEventArgs = {
          popup: this.popupObj || null,
          cancel: false,
          event: event2 || null,
          name: "open",
          appendTo: Browser.isDevice ? this.mobileTimePopupWrap : document.body
        };
        var eventArgs = this.openPopupEventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.openPopupEventArgs = eventArgs2;
          if (!_this.openPopupEventArgs.cancel && !_this.inputWrapper.buttons[0].classList.contains(DISABLED7)) {
            _this.openPopupEventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupAlignment(_this.openPopupEventArgs);
            _this.setScrollPosition();
            if (!Browser.isDevice) {
              _this.inputElement.focus();
            }
            var openAnimation = {
              name: "FadeIn",
              duration: ANIMATIONDURATION
            };
            _this.popupObj.refreshPosition(_this.anchor);
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _this.setActiveDescendant();
            attributes(_this.inputElement, { "aria-expanded": "true" });
            attributes(_this.inputElement, { "aria-owns": _this.inputElement.id + "_options" });
            attributes(_this.inputElement, { "aria-controls": _this.inputElement.id });
            addClass([_this.inputWrapper.container], FOCUS3);
            EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
            _this.setOverlayIndex(_this.mobileTimePopupWrap, _this.popupObj.element, _this.modal, Browser.isDevice);
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.listTag = void 0;
            _this.liCollections = _this.timeCollections = _this.disableItemCollection = [];
            _this.popupObj = null;
          }
        });
        if (Browser.isDevice) {
          var dlgOverlay = this.createElement("div", { className: "e-dlg-overlay" });
          dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
          this.mobileTimePopupWrap.appendChild(dlgOverlay);
        }
      }
    };
    TimePicker2.prototype.setOverlayIndex = function(popupWrapper, timePopupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(timePopupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(timePopupElement.style.zIndex, 10) ? parseInt(timePopupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    TimePicker2.prototype.formatValues = function(type) {
      var value;
      if (typeof type === "number") {
        value = formatUnit(type);
      } else if (typeof type === "string") {
        value = type.match(/px|%|em/) ? type : isNaN(parseInt(type, 10)) ? type : formatUnit(type);
      }
      return value;
    };
    TimePicker2.prototype.popupAlignment = function(args) {
      args.popup.position.X = this.formatValues(args.popup.position.X);
      args.popup.position.Y = this.formatValues(args.popup.position.Y);
      if (!isNaN(parseFloat(args.popup.position.X)) || !isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.relateTo = this.anchor = document.body;
        this.popupObj.targetType = "container";
      }
      if (!isNaN(parseFloat(args.popup.position.X))) {
        this.popupObj.offsetX = parseFloat(args.popup.position.X);
      }
      if (!isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.offsetY = parseFloat(args.popup.position.Y);
      }
      if (!Browser.isDevice) {
        switch (args.popup.position.X) {
          case "left":
            break;
          case "right":
            args.popup.offsetX = this.containerStyle.width;
            break;
          case "center":
            args.popup.offsetX = -(this.containerStyle.width / 2);
            break;
        }
        switch (args.popup.position.Y) {
          case "top":
            break;
          case "bottom":
            break;
          case "center":
            args.popup.offsetY = -(this.containerStyle.height / 2);
            break;
        }
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.inputWrapper.container;
          this.anchor = this.inputElement;
          this.popupObj.targetType = "relative";
        }
      } else {
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.anchor = document.body;
          this.popupObj.offsetY = 0;
          this.popupObj.targetType = "container";
          this.popupObj.collision = { X: "fit", Y: "fit" };
        }
      }
    };
    TimePicker2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TimePicker2.prototype.getModuleName = function() {
      return "timepicker";
    };
    TimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement, this.floatLabelType);
            if (this.readonly) {
              this.hide();
            }
            this.setTimeAllowEdit();
            break;
          case "enabled":
            this.setProperties({ enabled: newProp.enabled }, true);
            this.setEnable();
            break;
          case "allowEdit":
            this.setTimeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({ enableRtl: newProp.enableRtl }, true);
            this.setEnableRtl();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            this.setZIndex();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "locale":
            this.setProperties({ locale: newProp.locale }, true);
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.timeOptions && this.timeOptions.placeholder == null) {
              this.updatePlaceHolder();
            }
            this.setValue(this.value);
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "width":
            setStyleAttribute(this.inputWrapper.container, { "width": this.setWidth(newProp.width) });
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkTimeFormat();
            this.setValue(this.value);
            if (this.enableMask) {
              this.createMask();
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "value":
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            if (!this.invalidValueString) {
              if (typeof newProp.value === "string") {
                this.setProperties({ value: this.checkDateValue(new Date(newProp.value)) }, true);
                newProp.value = this.value;
              } else {
                if ((newProp.value && +(/* @__PURE__ */ new Date(+newProp.value)).setMilliseconds(0)) !== +this.value) {
                  newProp.value = this.checkDateValue(/* @__PURE__ */ new Date("" + newProp.value));
                }
              }
              this.initValue = newProp.value;
              newProp.value = this.compareFormatChange(this.checkValue(newProp.value));
            } else {
              this.updateInputValue(this.invalidValueString);
              this.checkErrorState(this.invalidValueString);
            }
            if (this.enableMask && isNullOrUndefined(newProp.value)) {
              this.updateInputValue(this.maskedDateValue);
              this.checkErrorState(this.maskedDateValue);
            }
            this.checkValueChange(null, false);
            if (this.isPopupOpen()) {
              this.setScrollPosition();
            }
            if (this.isAngular && this.preventChange) {
              this.preventChange = false;
            }
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            if (newProp.strictMode) {
              this.checkErrorState(null);
            }
            this.setProperties({ strictMode: newProp.strictMode }, true);
            this.checkValue(this.inputElement.value);
            this.checkValueChange(null, false);
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))) {
              if (this.popupWrapper) {
                this.setScrollTo();
              }
              this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo))) }, true);
            } else {
              this.setProperties({ scrollTo: null }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
        }
      }
    };
    TimePicker2.prototype.checkInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "width", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "cssClass", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "strictMode", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "keyConfigs", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "format", void 0);
    __decorate22([
      Property(true)
    ], TimePicker2.prototype, "enabled", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "fullScreenMode", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "readonly", void 0);
    __decorate22([
      Property({})
    ], TimePicker2.prototype, "htmlAttributes", void 0);
    __decorate22([
      Property("Never")
    ], TimePicker2.prototype, "floatLabelType", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "placeholder", void 0);
    __decorate22([
      Property(1e3)
    ], TimePicker2.prototype, "zIndex", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "enablePersistence", void 0);
    __decorate22([
      Property(true)
    ], TimePicker2.prototype, "showClearButton", void 0);
    __decorate22([
      Property(30)
    ], TimePicker2.prototype, "step", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "scrollTo", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "value", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "min", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "max", void 0);
    __decorate22([
      Property(true)
    ], TimePicker2.prototype, "allowEdit", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "openOnFocus", void 0);
    __decorate22([
      Property(false)
    ], TimePicker2.prototype, "enableMask", void 0);
    __decorate22([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], TimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate22([
      Property(null)
    ], TimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "change", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "created", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "destroyed", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "open", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "itemRender", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "close", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "cleared", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "blur", void 0);
    __decorate22([
      Event()
    ], TimePicker2.prototype, "focus", void 0);
    TimePicker2 = __decorate22([
      NotifyPropertyChanges
    ], TimePicker2);
    return TimePicker2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER2 = "e-date-wrapper";
var DATEPICKERROOT = "e-datepicker";
var DATETIMEWRAPPER = "e-datetime-wrapper";
var DAY2 = (/* @__PURE__ */ new Date()).getDate();
var MONTH4 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR4 = (/* @__PURE__ */ new Date()).getFullYear();
var HOUR = (/* @__PURE__ */ new Date()).getHours();
var MINUTE = (/* @__PURE__ */ new Date()).getMinutes();
var SECOND = (/* @__PURE__ */ new Date()).getSeconds();
var MILLISECOND = (/* @__PURE__ */ new Date()).getMilliseconds();
var ROOT7 = "e-datetimepicker";
var DATETIMEPOPUPWRAPPER = "e-datetimepopup-wrapper";
var INPUTWRAPPER2 = "e-input-group-icon";
var POPUP5 = "e-popup";
var TIMEICON = "e-time-icon";
var INPUTFOCUS3 = "e-input-focus";
var POPUPDIMENSION2 = "250px";
var ICONANIMATION2 = "e-icon-anim";
var DISABLED8 = "e-disabled";
var ERROR4 = "e-error";
var CONTENT4 = "e-content";
var NAVIGATION2 = "e-navigation";
var ACTIVE4 = "e-active";
var HOVER4 = "e-hover";
var ICONS3 = "e-icons";
var HALFPOSITION2 = 2;
var LISTCLASS3 = "e-list-item";
var ANIMATIONDURATION2 = 100;
var OVERFLOW4 = "e-time-overflow";
var DateTimePicker = (
  /** @class */
  function(_super) {
    __extends23(DateTimePicker2, _super);
    function DateTimePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.valueWithMinutes = null;
      _this.scrollInvoked = false;
      _this.moduleName = _this.getModuleName();
      _this.formatRegex = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|'[^']*'|'[^']*'/g;
      _this.dateFormatString = "";
      _this.dateTimeOptions = options;
      return _this;
    }
    DateTimePicker2.prototype.focusHandler = function() {
      if (!this.enabled) {
        return;
      }
      addClass([this.inputWrapper.container], INPUTFOCUS3);
    };
    DateTimePicker2.prototype.focusIn = function() {
      _super.prototype.focusIn.call(this);
    };
    DateTimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [INPUTFOCUS3]);
      }
    };
    DateTimePicker2.prototype.blurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isTimePopupOpen() && this.isPreventBlur) {
        this.inputElement.focus();
        return;
      }
      removeClass([this.inputWrapper.container], INPUTFOCUS3);
      var blurArguments = {
        model: this
      };
      if (this.isTimePopupOpen()) {
        this.hide(e);
      }
      this.trigger("blur", blurArguments);
    };
    DateTimePicker2.prototype.destroy = function() {
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      if (this.popupObject && this.popupObject.element.classList.contains(POPUP5)) {
        this.popupObject.destroy();
        detach(this.dateTimeWrapper);
        this.dateTimeWrapper = void 0;
        this.liCollections = this.timeCollections = [];
        if (!isNullOrUndefined(this.rippleFn)) {
          this.rippleFn();
        }
      }
      var ariaAttribute = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-invalid": "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObject = this.popupWrapper = null;
        this.keyboardHandler.destroy();
      }
      this.unBindInputEvents();
      this.liCollections = null;
      this.rippleFn = null;
      this.selectedElement = null;
      this.listTag = null;
      this.timeIcon = null;
      this.popupObject = null;
      this.preventArgs = null;
      this.keyboardModule = null;
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
    };
    DateTimePicker2.prototype.render = function() {
      this.timekeyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.valueWithMinutes = null;
      this.previousDateTime = null;
      this.isPreventBlur = false;
      this.cloneElement = this.element.cloneNode(true);
      this.dateTimeFormat = this.cldrDateTimeFormat();
      this.initValue = this.value;
      if (typeof this.min === "string") {
        this.min = this.checkDateValue(new Date(this.min));
      }
      if (typeof this.max === "string") {
        this.max = this.checkDateValue(new Date(this.max));
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      _super.prototype.updateHtmlAttributeToElement.call(this);
      this.checkAttributes(false);
      var localeText = { placeholder: this.placeholder };
      this.l10n = new L10n("datetimepicker", localeText, this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      _super.prototype.render.call(this);
      this.createInputElement();
      _super.prototype.updateHtmlAttributeToWrapper.call(this);
      this.bindInputEvents();
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.setValue(true);
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkValue(this.scrollTo))) }, true);
      this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      if (this.element.tagName === "EJS-DATETIMEPICKER") {
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.removeAttribute("tabindex");
        if (!this.enabled) {
          this.inputElement.tabIndex = -1;
        }
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
      }
      this.renderComplete();
    };
    DateTimePicker2.prototype.setValue = function(isDynamic) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      this.initValue = this.validateMinMaxRange(this.value);
      if (!this.strictMode && this.isDateObject(this.initValue)) {
        var value = this.validateMinMaxRange(this.initValue);
        Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton);
        this.setProperties({ value }, true);
      } else {
        if (isNullOrUndefined(this.value)) {
          this.initValue = null;
          this.setProperties({ value: null }, true);
        }
      }
      this.valueWithMinutes = this.value;
      _super.prototype.updateInput.call(this, isDynamic);
    };
    DateTimePicker2.prototype.validateMinMaxRange = function(value) {
      var result = value;
      if (this.isDateObject(value)) {
        result = this.validateValue(value);
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
        }
      }
      this.checkValidState(result);
      return result;
    };
    DateTimePicker2.prototype.checkValidState = function(value) {
      this.isValidState = true;
      if (!this.strictMode) {
        if (+value > +this.max || +value < +this.min) {
          this.isValidState = false;
        }
      }
      this.checkErrorState();
    };
    DateTimePicker2.prototype.checkErrorState = function() {
      if (this.isValidState) {
        removeClass([this.inputWrapper.container], ERROR4);
      } else {
        addClass([this.inputWrapper.container], ERROR4);
      }
      attributes(this.inputElement, { "aria-invalid": this.isValidState ? "false" : "true" });
    };
    DateTimePicker2.prototype.validateValue = function(value) {
      var dateVal = value;
      if (this.strictMode) {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = this.max;
        } else if (+value < +this.min) {
          dateVal = this.min;
        } else if (+value > +this.max) {
          dateVal = this.max;
        }
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = value;
        }
      }
      return dateVal;
    };
    DateTimePicker2.prototype.disablePopupButton = function(isDisable) {
      if (isDisable) {
        addClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED8);
        this.hide();
      } else {
        removeClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED8);
      }
    };
    DateTimePicker2.prototype.getFormattedValue = function(value) {
      var dateOptions;
      if (!isNullOrUndefined(value)) {
        if (this.calendarMode === "Gregorian") {
          dateOptions = { format: this.cldrDateTimeFormat(), type: "dateTime", skeleton: "yMd" };
        } else {
          dateOptions = { format: this.cldrDateTimeFormat(), type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        return this.globalize.formatDate(value, dateOptions);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.isDateObject = function(value) {
      return !isNullOrUndefined(value) && !isNaN(+value) ? true : false;
    };
    DateTimePicker2.prototype.createInputElement = function() {
      removeClass([this.inputElement], DATEPICKERROOT);
      removeClass([this.inputWrapper.container], DATEWRAPPER2);
      addClass([this.inputWrapper.container], DATETIMEWRAPPER);
      addClass([this.inputElement], ROOT7);
      this.renderTimeIcon();
    };
    DateTimePicker2.prototype.renderTimeIcon = function() {
      this.timeIcon = Input.appendSpan(INPUTWRAPPER2 + " " + TIMEICON + " " + ICONS3, this.inputWrapper.container);
    };
    DateTimePicker2.prototype.bindInputEvents = function() {
      EventHandler.add(this.timeIcon, "mousedown", this.timeHandler, this);
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateHandler, this);
      EventHandler.add(this.inputElement, "blur", this.blurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.focusHandler, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardHandler = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyAction.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DateTimePicker2.prototype.unBindInputEvents = function() {
      EventHandler.remove(this.timeIcon, "mousedown touchstart", this.timeHandler);
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateHandler);
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "blur", this.blurHandler);
        EventHandler.remove(this.inputElement, "focus", this.focusHandler);
      }
      if (this.keyboardHandler) {
        this.keyboardHandler.destroy();
      }
    };
    DateTimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.timeFormat)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.timeFormat;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.cldrDateTimeFormat = function() {
      var cldrTime;
      var culture = new Internationalization(this.locale);
      var dateFormat = culture.getDatePattern({ skeleton: "yMd" });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.getCldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.getCldrFormat = function(type) {
      var cldrDateTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTime = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTime = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTime;
    };
    DateTimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    DateTimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      if (this.calendarMode === "Gregorian") {
        return getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.short", ld);
      } else {
        return getValue("main." + this.locale + ".dates.calendars.islamic.timeFormats.short", ld);
      }
    };
    DateTimePicker2.prototype.timeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      if (e.currentTarget === this.timeIcon) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        }
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        } else {
          this.inputElement.focus();
          this.popupCreation("time", e);
          addClass([this.inputWrapper.container], [INPUTFOCUS3]);
        }
      }
      this.isIconClicked = false;
    };
    DateTimePicker2.prototype.dateHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (e.currentTarget === this.inputWrapper.buttons[0]) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        }
        if (!isNullOrUndefined(this.popupWrapper)) {
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.show = function(type, e) {
      if (this.enabled && this.readonly || !this.enabled) {
        return;
      } else {
        if (type === "time" && !this.dateTimeWrapper) {
          if (this.isDatePopupOpen()) {
            this.hide(e);
          }
          this.popupCreation("time", e);
        } else if (!this.popupObj) {
          if (this.isTimePopupOpen()) {
            this.hide(e);
          }
          _super.prototype.show.call(this);
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.toggle = function(e) {
      if (this.isDatePopupOpen()) {
        _super.prototype.hide.call(this, e);
        this.show("time", null);
      } else if (this.isTimePopupOpen()) {
        this.hide(e);
        _super.prototype.show.call(this, null, e);
        this.popupCreation("date", null);
      } else {
        this.show(null, e);
      }
    };
    DateTimePicker2.prototype.listCreation = function() {
      var dateObject;
      if (this.calendarMode === "Gregorian") {
        this.cldrDateTimeFormat().replace(this.formatRegex, this.TimePopupFormat());
        if (this.dateFormatString === "") {
          this.dateFormatString = this.cldrDateTimeFormat();
        }
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.dateFormatString,
          type: "datetime"
        });
      } else {
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.cldrDateTimeFormat(),
          type: "datetime",
          calendar: "islamic"
        });
      }
      var value = isNullOrUndefined(this.value) ? this.inputElement.value !== "" ? dateObject : /* @__PURE__ */ new Date() : this.value;
      this.valueWithMinutes = value;
      this.listWrapper = createElement("div", { className: CONTENT4, attrs: { "tabindex": "0" } });
      var min = this.startTime(value);
      var max = this.endTime(value);
      var listDetails = TimePickerBase.createListItems(this.createElement, min, max, this.globalize, this.cldrTimeFormat(), this.step);
      this.timeCollections = listDetails.collection;
      this.listTag = listDetails.list;
      attributes(this.listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options" });
      append([listDetails.list], this.listWrapper);
      this.wireTimeListEvents();
      var rippleModel = { duration: 300, selector: "." + LISTCLASS3 };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS3);
    };
    DateTimePicker2.prototype.popupCreation = function(type, e) {
      if (Browser.isDevice) {
        this.element.setAttribute("readonly", "readonly");
      }
      if (type === "date") {
        if (!this.readonly && this.popupWrapper) {
          addClass([this.popupWrapper], DATETIMEPOPUPWRAPPER);
          attributes(this.popupWrapper, { "id": this.element.id + "_options" });
        }
      } else {
        if (!this.readonly) {
          this.dateTimeWrapper = createElement("div", {
            className: ROOT7 + " " + POPUP5,
            attrs: { "id": this.element.id + "_timepopup", "style": "visibility:hidden ; display:block" }
          });
          if (!isNullOrUndefined(this.cssClass)) {
            this.dateTimeWrapper.className += " " + this.cssClass;
          }
          if (!isNullOrUndefined(this.step) && this.step > 0) {
            this.listCreation();
            append([this.listWrapper], this.dateTimeWrapper);
          }
          document.body.appendChild(this.dateTimeWrapper);
          this.addTimeSelection();
          this.renderPopup();
          this.setTimeScrollPosition();
          this.openPopup(e);
          if (!Browser.isDevice || Browser.isDevice && !this.fullScreenMode) {
            this.popupObject.refreshPosition(this.inputElement);
          }
          if (Browser.isDevice && this.fullScreenMode) {
            this.dateTimeWrapper.style.left = "0px";
          }
          if (Browser.isDevice) {
            var dlgOverlay = this.createElement("div", { className: "e-dlg-overlay" });
            dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
            this.timeModal.appendChild(dlgOverlay);
          }
        }
      }
    };
    DateTimePicker2.prototype.openPopup = function(e) {
      var _this = this;
      this.preventArgs = {
        cancel: false,
        popup: this.popupObject,
        event: e || null
      };
      var eventArgs = this.preventArgs;
      this.trigger("open", eventArgs, function(eventArgs2) {
        _this.preventArgs = eventArgs2;
        if (!_this.preventArgs.cancel && !_this.readonly) {
          var openAnimation = {
            name: "FadeIn",
            duration: ANIMATIONDURATION2
          };
          if (_this.zIndex === 1e3) {
            _this.popupObject.show(new Animation(openAnimation), _this.element);
          } else {
            _this.popupObject.show(new Animation(openAnimation), null);
          }
          addClass([_this.inputWrapper.container], [ICONANIMATION2]);
          attributes(_this.inputElement, { "aria-expanded": "true" });
          attributes(_this.inputElement, { "aria-owns": _this.inputElement.id + "_options" });
          attributes(_this.inputElement, { "aria-controls": _this.inputElement.id });
          EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
        }
      });
    };
    DateTimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObject) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObject.element && this.popupObject.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + (this.popupObject && this.popupObject.element.id + '"]')) && target !== this.inputElement && target !== this.timeIcon && !isNullOrUndefined(this.inputWrapper) && target !== this.inputWrapper.container && !target.classList.contains("e-dlg-overlay")) {
        if (this.isTimePopupOpen()) {
          this.hide(event2);
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = document.activeElement === this.inputElement && (Browser.isIE || Browser.info.name === "edge") && target === this.popupObject.element;
        }
      }
    };
    DateTimePicker2.prototype.isTimePopupOpen = function() {
      return this.dateTimeWrapper && this.dateTimeWrapper.classList.contains("" + ROOT7) ? true : false;
    };
    DateTimePicker2.prototype.isDatePopupOpen = function() {
      return this.popupWrapper && this.popupWrapper.classList.contains("" + DATETIMEPOPUPWRAPPER) ? true : false;
    };
    DateTimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      if (Browser.isDevice) {
        this.timeModal = createElement("div");
        this.timeModal.className = "" + ROOT7 + " e-time-modal";
        document.body.className += " " + OVERFLOW4;
        this.timeModal.style.display = "block";
        document.body.appendChild(this.timeModal);
      }
      var offset = 4;
      this.popupObject = new Popup(this.dateTimeWrapper, {
        width: this.setPopupWidth(),
        zIndex: this.zIndex,
        targetType: "container",
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : { X: "flip", Y: "flip" },
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? { X: "center", Y: "center" } : { X: "left", Y: "bottom" },
        enableRtl: this.enableRtl,
        offsetY: offset,
        open: function() {
          _this.dateTimeWrapper.style.visibility = "visible";
          addClass([_this.timeIcon], ACTIVE4);
          if (!Browser.isDevice) {
            _this.timekeyConfigure = extend(_this.timekeyConfigure, _this.keyConfigs);
            _this.inputEvent = new KeyboardEvents(_this.inputWrapper.container, {
              keyAction: _this.timeKeyActionHandle.bind(_this),
              keyConfigs: _this.timekeyConfigure,
              eventName: "keydown"
            });
          }
        },
        close: function() {
          removeClass([_this.timeIcon], ACTIVE4);
          _this.unWireTimeListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObject.element);
          _this.popupObject.destroy();
          _this.dateTimeWrapper.innerHTML = "";
          _this.listWrapper = _this.dateTimeWrapper = void 0;
          if (_this.inputEvent) {
            _this.inputEvent.destroy();
          }
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObject.element.style.display = "flex";
        this.popupObject.element.style.maxHeight = "100%";
        this.popupObject.element.style.width = "100%";
      } else {
        this.popupObject.element.style.maxHeight = POPUPDIMENSION2;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelWrapper = createElement("div", { className: "e-datetime-mob-popup-wrap" });
        var modelHeader = this.createElement("div", { className: "e-model-header" });
        var modelTitleSpan = this.createElement("span", { className: "e-model-title" });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", { className: "e-popup-close" });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.dateTimeCloseHandler, this);
        var timeContent = this.dateTimeWrapper.querySelector(".e-content");
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        modelWrapper.appendChild(modelHeader);
        modelWrapper.appendChild(timeContent);
        this.dateTimeWrapper.insertBefore(modelWrapper, this.dateTimeWrapper.firstElementChild);
      }
    };
    DateTimePicker2.prototype.dateTimeCloseHandler = function(e) {
      this.hide();
    };
    DateTimePicker2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width;
      } else {
        width = "100%";
      }
      return width;
    };
    DateTimePicker2.prototype.setPopupWidth = function() {
      var width = this.setDimension(this.width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    DateTimePicker2.prototype.wireTimeListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    DateTimePicker2.prototype.unWireTimeListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
        if (!Browser.isDevice) {
          EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
          EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
        }
      }
    };
    DateTimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS3);
      this.setTimeHover(currentLi, HOVER4);
    };
    DateTimePicker2.prototype.onMouseLeave = function() {
      this.removeTimeHover(HOVER4);
    };
    DateTimePicker2.prototype.setTimeHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeTimeHover(className);
        addClass([li], className);
      }
    };
    DateTimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION2, 10);
      var popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
      if (Browser.isDevice && this.fullScreenMode) {
        return popupHeight;
      } else {
        return popupHeight > height ? height : popupHeight;
      }
    };
    DateTimePicker2.prototype.changeEvent = function(e) {
      _super.prototype.changeEvent.call(this, e);
      if ((this.value && this.value.valueOf()) !== (this.previousDateTime && +this.previousDateTime.valueOf())) {
        this.valueWithMinutes = this.value;
        this.setInputValue("date");
        this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      }
    };
    DateTimePicker2.prototype.updateValue = function(e) {
      this.setInputValue("time");
      if (+this.previousDateTime !== +this.value) {
        this.changedArgs = {
          value: this.value,
          event: e || null,
          isInteracted: !isNullOrUndefined(e),
          element: this.element
        };
        this.addTimeSelection();
        this.trigger("change", this.changedArgs);
        this.previousDateTime = this.previousDate = this.value;
      }
    };
    DateTimePicker2.prototype.setTimeScrollPosition = function() {
      var popupElement = this.selectedElement;
      if (!isNullOrUndefined(popupElement)) {
        this.findScrollTop(popupElement);
      } else if (this.dateTimeWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    DateTimePicker2.prototype.findScrollTop = function(element) {
      var listHeight = this.getPopupHeight();
      var nextElement = element.nextElementSibling;
      var height = nextElement ? nextElement.offsetTop : element.offsetTop;
      var lineHeight = element.getBoundingClientRect().height;
      if (height + element.offsetTop > listHeight) {
        if (Browser.isDevice && this.fullScreenMode) {
          var listContent = this.dateTimeWrapper.querySelector(".e-content");
          listContent.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        } else {
          this.dateTimeWrapper.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        }
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setScrollTo = function() {
      var element;
      var items = this.dateTimeWrapper.querySelectorAll("." + LISTCLASS3);
      if (items.length >= 0) {
        this.scrollInvoked = true;
        var initialTime = this.timeCollections[0];
        var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
        element = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setInputValue = function(type) {
      if (type === "date") {
        this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime());
        this.setProperties({ value: this.getFullDateTime() }, true);
      } else {
        var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
        Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousElementValue = this.inputElement.value;
        this.setProperties({ value: new Date(this.timeCollections[this.activeIndex]) }, true);
        if (this.enableMask) {
          this.createMask();
        }
      }
      this.updateIconState();
    };
    DateTimePicker2.prototype.getFullDateTime = function() {
      var value = null;
      if (this.isDateObject(this.valueWithMinutes)) {
        value = this.combineDateTime(this.valueWithMinutes);
      } else {
        value = this.previousDate;
      }
      return this.validateMinMaxRange(value);
    };
    DateTimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    DateTimePicker2.prototype.combineDateTime = function(value) {
      if (this.isDateObject(value)) {
        var day = this.previousDate.getDate();
        var month = this.previousDate.getMonth();
        var year = this.previousDate.getFullYear();
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var seconds = value.getSeconds();
        return new Date(year, month, day, hour, minutes, seconds);
      } else {
        return this.previousDate;
      }
    };
    DateTimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS3);
      if (li && li.classList.contains(LISTCLASS3)) {
        this.timeValue = li.getAttribute("data-value");
        this.hide(event2);
      }
      this.setSelection(li, event2);
    };
    DateTimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li) && !li.classList.contains(ACTIVE4)) {
        this.selectedElement = li;
        var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.activeIndex = index;
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], ACTIVE4);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.updateValue(event2);
      }
    };
    DateTimePicker2.prototype.setTimeActiveClass = function() {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      if (!isNullOrUndefined(collections)) {
        var items = collections.querySelectorAll("." + LISTCLASS3);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.valueWithMinutes) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              this.setTimeActiveDescendant();
              break;
            }
          }
        }
      }
    };
    DateTimePicker2.prototype.setTimeActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, { "aria-activedescendant": this.selectedElement.getAttribute("id") });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DateTimePicker2.prototype.addTimeSelection = function() {
      this.selectedElement = null;
      this.removeTimeSelection();
      this.setTimeActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], ACTIVE4);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    DateTimePicker2.prototype.removeTimeSelection = function() {
      this.removeTimeHover(HOVER4);
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        var items = this.dateTimeWrapper.querySelectorAll("." + ACTIVE4);
        if (items.length) {
          removeClass(items, ACTIVE4);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    DateTimePicker2.prototype.removeTimeHover = function(className) {
      var hoveredItem = this.getTimeHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
      }
    };
    DateTimePicker2.prototype.getTimeHoverItem = function(className) {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      var hoveredItem;
      if (!isNullOrUndefined(collections)) {
        hoveredItem = collections.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    DateTimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS3) && !li.classList.contains(DISABLED8);
    };
    DateTimePicker2.prototype.calculateStartEnd = function(value, range, method) {
      var day = value.getDate();
      var month = value.getMonth();
      var year = value.getFullYear();
      var hours = value.getHours();
      var minutes = value.getMinutes();
      var seconds = value.getSeconds();
      var milliseconds = value.getMilliseconds();
      if (range) {
        if (method === "starttime") {
          return new Date(year, month, day, 0, 0, 0);
        } else {
          return new Date(year, month, day, 23, 59, 59);
        }
      } else {
        return new Date(year, month, day, hours, minutes, seconds, milliseconds);
      }
    };
    DateTimePicker2.prototype.startTime = function(date) {
      var tempStartValue;
      var start;
      var tempMin = this.min;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMin.getDate() && +value.getMonth() === +tempMin.getMonth() && +value.getFullYear() === +tempMin.getFullYear() || +new Date(value.getFullYear(), value.getMonth(), value.getDate()) <= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate())) {
        start = false;
        tempStartValue = this.min;
      } else if (+value < +this.max && +value > +this.min) {
        start = true;
        tempStartValue = value;
      } else if (+value >= +this.max) {
        start = true;
        tempStartValue = this.max;
      }
      return this.calculateStartEnd(tempStartValue, start, "starttime");
    };
    DateTimePicker2.prototype.TimePopupFormat = function() {
      var format = "";
      var formatCount = 0;
      var proxy = this;
      function formatValueSpecifier(formattext) {
        switch (formattext) {
          case "d":
          case "dd":
          case "ddd":
          case "dddd":
          case "M":
          case "MM":
          case "MMM":
          case "MMMM":
          case "y":
          case "yy":
          case "yyy":
          case "yyyy":
            if (format === "") {
              format = format + formattext;
            } else {
              format = format + "/" + formattext;
            }
            formatCount = formatCount + 1;
            break;
        }
        if (formatCount > 2) {
          proxy.dateFormatString = format;
        }
        return format;
      }
      return formatValueSpecifier;
    };
    DateTimePicker2.prototype.endTime = function(date) {
      var tempEndValue;
      var end;
      var tempMax = this.max;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMax.getDate() && +value.getMonth() === +tempMax.getMonth() && +value.getFullYear() === +tempMax.getFullYear() || +new Date(value.getUTCFullYear(), value.getMonth(), value.getDate()) >= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate())) {
        end = false;
        tempEndValue = this.max;
      } else if (+value < +this.max && +value > +this.min) {
        end = true;
        tempEndValue = value;
      } else if (+value <= +this.min) {
        end = true;
        tempEndValue = this.min;
      }
      return this.calculateStartEnd(tempEndValue, end, "endtime");
    };
    DateTimePicker2.prototype.hide = function(e) {
      var _this = this;
      if (this.popupObj || this.dateTimeWrapper) {
        this.preventArgs = {
          cancel: false,
          popup: this.popupObj || this.popupObject,
          event: e || null
        };
        var eventArgs = this.preventArgs;
        if (isNullOrUndefined(this.popupObj)) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.dateTimeCloseEventCallback(e, eventArgs2);
          });
        } else {
          this.dateTimeCloseEventCallback(e, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DateTimePicker2.prototype.dateTimeCloseEventCallback = function(e, eventArgs) {
      this.preventArgs = eventArgs;
      if (!this.preventArgs.cancel) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        } else if (this.isTimePopupOpen()) {
          this.closePopup(e);
          removeClass([document.body], OVERFLOW4);
          if (Browser.isDevice && this.timeModal) {
            this.timeModal.style.display = "none";
            this.timeModal.outerHTML = "";
            this.timeModal = null;
          }
          this.setTimeActiveDescendant();
        }
      }
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DateTimePicker2.prototype.closePopup = function(e) {
      if (this.isTimePopupOpen() && this.popupObject) {
        var animModel = {
          name: "FadeOut",
          duration: ANIMATIONDURATION2,
          delay: 0
        };
        this.popupObject.hide(new Animation(animModel));
        this.inputWrapper.container.classList.remove(ICONANIMATION2);
        attributes(this.inputElement, { "aria-expanded": "false" });
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
      }
    };
    DateTimePicker2.prototype.preRender = function() {
      this.checkFormat();
      this.dateTimeFormat = this.cldrDateTimeFormat();
      _super.prototype.preRender.call(this);
      removeClass([this.inputElementCopy], [ROOT7]);
    };
    DateTimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.setProperties({ min: this.validateValue(date.min) }, true);
      } else {
        this.setProperties({ max: this.validateValue(date.max) }, true);
      }
    };
    DateTimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["style", "name", "step", "disabled", "readonly", "value", "min", "max", "placeholder", "type"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ min: value }, !isDynamic);
                }
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ value }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ max: value }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    DateTimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({ args: [this], member: "islamic", name: "Islamic" });
      }
      if (this.enableMask) {
        modules.push(this.maskedDateModule());
      }
      return modules;
    };
    DateTimePicker2.prototype.maskedDateModule = function() {
      var modules = { args: [this], member: "MaskedDateTime" };
      return modules;
    };
    DateTimePicker2.prototype.getTimeActiveElement = function() {
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        return this.dateTimeWrapper.querySelectorAll("." + ACTIVE4);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.createDateObj = function(val) {
      return val instanceof Date ? val : null;
    };
    DateTimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = this.valueWithMinutes;
        var status_1 = !isNullOrUndefined(value);
        if (this.checkDateValue(dateValue)) {
          var date = status_1 ? value.getDate() : DAY2;
          var month = status_1 ? value.getMonth() : MONTH4;
          var year = status_1 ? value.getFullYear() : YEAR4;
          var hour = status_1 ? value.getHours() : HOUR;
          var minute = status_1 ? value.getMinutes() : MINUTE;
          var second = status_1 ? value.getSeconds() : SECOND;
          var millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
          if (!this.scrollInvoked) {
            return new Date(year, month, date, hour, minute, second, millisecond);
          } else {
            this.scrollInvoked = false;
            return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds(), dateValue.getMilliseconds());
          }
        }
      }
      return null;
    };
    DateTimePicker2.prototype.findNextTimeElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var dateTimeVal = null;
      var listCount = this.liCollections.length;
      if (!isNullOrUndefined(this.activeIndex) || !isNullOrUndefined(this.checkDateValue(value))) {
        if (event2.action === "home") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[0]));
          this.activeIndex = 0;
        } else if (event2.action === "end") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1]));
          this.activeIndex = this.timeCollections.length - 1;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < listCount; i++) {
              if (+value < this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          } else {
            for (var i = listCount - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
      }
    };
    DateTimePicker2.prototype.setTimeValue = function(date, value) {
      var dateString;
      var time;
      var val = this.validateMinMaxRange(value);
      var newval = this.createDateObj(val);
      if (this.getFormattedValue(newval) !== (!isNullOrUndefined(this.value) ? this.getFormattedValue(this.value) : null)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      }
      if (this.calendarMode === "Gregorian") {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd"
        });
      } else {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd",
          calendar: "islamic"
        });
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      return time;
    };
    DateTimePicker2.prototype.timeElementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.setTimeValue(date, value);
      }
      return null;
    };
    DateTimePicker2.prototype.timeKeyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0) {
        return;
      }
      var listCount = this.timeCollections.length;
      if (isNullOrUndefined(this.getTimeActiveElement()) || this.getTimeActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            this.activeIndex = 0;
            this.selectedElement = this.liCollections[0];
            this.timeElementValue(new Date(this.timeCollections[0]));
          } else {
            this.findNextTimeElement(event2);
          }
        }
      } else {
        var nextItemValue = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === listCount ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? listCount - 1 : this.activeIndex;
          nextItemValue = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          this.activeIndex = 0;
          nextItemValue = this.timeCollections[0];
        } else if (event2.action === "end") {
          this.activeIndex = listCount - 1;
          nextItemValue = this.timeCollections[listCount - 1];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(new Date(nextItemValue));
      }
      this.isNavigate = true;
      this.setTimeHover(this.selectedElement, NAVIGATION2);
      this.setTimeActiveDescendant();
      if (this.isTimePopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setTimeScrollPosition();
      }
    };
    DateTimePicker2.prototype.timeKeyActionHandle = function(event2) {
      if (this.enabled) {
        if (event2.action !== "right" && event2.action !== "left" && event2.action !== "tab") {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "up":
          case "down":
          case "home":
          case "end":
            this.timeKeyHandler(event2);
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.setInputValue("time");
              if (+this.previousDateTime !== +this.value) {
                this.changedArgs.value = this.value;
                this.addTimeSelection();
                this.previousDateTime = this.value;
              }
            } else {
              this.updateValue(event2);
            }
            this.hide(event2);
            addClass([this.inputWrapper.container], INPUTFOCUS3);
            this.isNavigate = false;
            event2.stopPropagation();
            break;
          case "escape":
            this.hide(event2);
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    DateTimePicker2.prototype.inputKeyAction = function(event2) {
      switch (event2.action) {
        case "altDownArrow":
          this.strictModeUpdate();
          this.updateInput();
          this.toggle(event2);
          break;
      }
    };
    DateTimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            newProp.value = this.validateValue(newProp.value);
            if (this.enableMask) {
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton);
            }
            this.valueWithMinutes = newProp.value;
            this.setProperties({ value: newProp.value }, true);
            if (this.popupObj) {
              this.popupUpdate();
            }
            this.previousDateTime = new Date(this.inputElement.value);
            this.updateInput();
            this.changeTrigger(null);
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask && this.value) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            this.updateInput();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "cssClass":
            if (!isNullOrUndefined(oldProp.cssClass)) {
              oldProp.cssClass = oldProp.cssClass.replace(/\s+/g, " ").trim();
            }
            if (!isNullOrUndefined(newProp.cssClass)) {
              newProp.cssClass = newProp.cssClass.replace(/\s+/g, " ").trim();
            }
            Input.setCssClass(newProp.cssClass, [this.inputWrapper.container], oldProp.cssClass);
            if (this.dateTimeWrapper) {
              Input.setCssClass(newProp.cssClass, [this.dateTimeWrapper], oldProp.cssClass);
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateTimeOptions && this.dateTimeOptions.placeholder == null) {
              this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
              Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
            }
            this.dateTimeFormat = this.cldrDateTimeFormat();
            _super.prototype.updateInput.call(this);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkFormat();
            this.dateTimeFormat = this.formatString;
            this.setValue();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))) {
              if (this.dateTimeWrapper) {
                this.setScrollTo();
              }
              this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkValue(newProp.scrollTo))) }, true);
            } else {
              this.setProperties({ scrollTo: null }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.maskedDateValue = "";
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    DateTimePicker2.prototype.getModuleName = function() {
      return "datetimepicker";
    };
    DateTimePicker2.prototype.restoreValue = function() {
      this.previousDateTime = this.previousDate;
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.valueWithMinutes = this.value;
      this.previousDate = this.value;
      this.previousElementValue = this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.getFormattedValue(this.inputValueCopy);
    };
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "timeFormat", void 0);
    __decorate23([
      Property(30)
    ], DateTimePicker2.prototype, "step", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "scrollTo", void 0);
    __decorate23([
      Property(1e3)
    ], DateTimePicker2.prototype, "zIndex", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "value", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "keyConfigs", void 0);
    __decorate23([
      Property({})
    ], DateTimePicker2.prototype, "htmlAttributes", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "enablePersistence", void 0);
    __decorate23([
      Property(true)
    ], DateTimePicker2.prototype, "allowEdit", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "isMultiSelection", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "values", void 0);
    __decorate23([
      Property(true)
    ], DateTimePicker2.prototype, "showClearButton", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "placeholder", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "strictMode", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "fullScreenMode", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate23([
      Property(new Date(1900, 0, 1))
    ], DateTimePicker2.prototype, "min", void 0);
    __decorate23([
      Property(new Date(2099, 11, 31))
    ], DateTimePicker2.prototype, "max", void 0);
    __decorate23([
      Property(null)
    ], DateTimePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate23([
      Property("Gregorian")
    ], DateTimePicker2.prototype, "calendarMode", void 0);
    __decorate23([
      Property("Month")
    ], DateTimePicker2.prototype, "start", void 0);
    __decorate23([
      Property("Month")
    ], DateTimePicker2.prototype, "depth", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "weekNumber", void 0);
    __decorate23([
      Property(true)
    ], DateTimePicker2.prototype, "showTodayButton", void 0);
    __decorate23([
      Property("Short")
    ], DateTimePicker2.prototype, "dayHeaderFormat", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "openOnFocus", void 0);
    __decorate23([
      Property(false)
    ], DateTimePicker2.prototype, "enableMask", void 0);
    __decorate23([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], DateTimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "open", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "close", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "cleared", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "blur", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "focus", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "created", void 0);
    __decorate23([
      Event()
    ], DateTimePicker2.prototype, "destroyed", void 0);
    DateTimePicker2 = __decorate23([
      NotifyPropertyChanges
    ], DateTimePicker2);
    return DateTimePicker2;
  }(DatePicker)
);

// node_modules/@syncfusion/ej2-calendars/src/maskbase/masked-date-time.js
var ARROWLEFT = "ArrowLeft";
var ARROWRIGHT = "ArrowRight";
var ARROWUP = "ArrowUp";
var ARROWDOWN = "ArrowDown";
var TAB2 = "Tab";
var SHIFTTAB = "shiftTab";
var END2 = "End";
var HOME2 = "Home";
var MaskedDateTime = (
  /** @class */
  function() {
    function MaskedDateTime2(parent) {
      this.mask = "";
      this.defaultConstant = {
        day: "day",
        month: "month",
        year: "year",
        hour: "hour",
        minute: "minute",
        second: "second",
        dayOfTheWeek: "day of the week"
      };
      this.hiddenMask = "";
      this.validCharacters = "dMyhmHfasz";
      this.isDayPart = false;
      this.isMonthPart = false;
      this.isYearPart = false;
      this.isHourPart = false;
      this.isMinutePart = false;
      this.isSecondsPart = false;
      this.isMilliSecondsPart = false;
      this.monthCharacter = "";
      this.periodCharacter = "";
      this.isHiddenMask = false;
      this.isComplete = false;
      this.isNavigate = false;
      this.navigated = false;
      this.isBlur = false;
      this.formatRegex = /EEEEE|EEEE|EEE|EE|E|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|HH|H|hh|h|mm|m|fff|ff|f|aa|a|ss|s|zzzz|zzz|zz|z|'[^']*'|'[^']*'/g;
      this.isDeletion = false;
      this.isShortYear = false;
      this.isDeleteKey = false;
      this.isDateZero = false;
      this.isMonthZero = false;
      this.isYearZero = false;
      this.isLeadingZero = false;
      this.dayTypeCount = 0;
      this.monthTypeCount = 0;
      this.hourTypeCount = 0;
      this.minuteTypeCount = 0;
      this.secondTypeCount = 0;
      this.parent = parent;
      this.dateformat = this.getCulturedFormat();
      this.maskDateValue = this.parent.value != null ? /* @__PURE__ */ new Date(+this.parent.value) : /* @__PURE__ */ new Date();
      this.maskDateValue.setMonth(0);
      this.maskDateValue.setHours(0);
      this.maskDateValue.setMinutes(0);
      this.maskDateValue.setSeconds(0);
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.removeEventListener();
      this.addEventListener();
    }
    MaskedDateTime2.prototype.getModuleName = function() {
      return "MaskedDateTime";
    };
    MaskedDateTime2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("createMask", this.createMask, this);
      this.parent.on("setMaskSelection", this.validCharacterCheck, this);
      this.parent.on("inputHandler", this.maskInputHandler, this);
      this.parent.on("keyDownHandler", this.maskKeydownHandler, this);
      this.parent.on("clearHandler", this.clearHandler, this);
    };
    MaskedDateTime2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("createMask", this.createMask);
      this.parent.off("setMaskSelection", this.validCharacterCheck);
      this.parent.off("inputHandler", this.maskInputHandler);
      this.parent.off("keyDownHandler", this.maskKeydownHandler);
      this.parent.off("clearHandler", this.clearHandler);
    };
    MaskedDateTime2.prototype.createMask = function(mask) {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.dateformat = this.getCulturedFormat();
      if (this.parent.maskPlaceholder.day) {
        this.defaultConstant["day"] = this.parent.maskPlaceholder.day;
      }
      if (this.parent.maskPlaceholder.month) {
        this.defaultConstant["month"] = this.parent.maskPlaceholder.month;
      }
      if (this.parent.maskPlaceholder.year) {
        this.defaultConstant["year"] = this.parent.maskPlaceholder.year;
      }
      if (this.parent.maskPlaceholder.hour) {
        this.defaultConstant["hour"] = this.parent.maskPlaceholder.hour;
      }
      if (this.parent.maskPlaceholder.minute) {
        this.defaultConstant["minute"] = this.parent.maskPlaceholder.minute;
      }
      if (this.parent.maskPlaceholder.second) {
        this.defaultConstant["second"] = this.parent.maskPlaceholder.second;
      }
      if (this.parent.maskPlaceholder.dayOfTheWeek) {
        this.defaultConstant["dayOfTheWeek"] = this.parent.maskPlaceholder.dayOfTheWeek.toString();
      }
      this.getCUltureMaskFormat();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.mask = this.previousValue = inputValue;
      this.parent.maskedDateValue = this.mask;
      if (this.parent.value) {
        this.navigated = true;
        this.isBlur = mask.isBlur;
        this.setDynamicValue();
      }
    };
    MaskedDateTime2.prototype.getCUltureMaskFormat = function() {
      this.l10n = new L10n(this.parent.moduleName, this.defaultConstant, this.parent.locale);
      this.objectString = Object.keys(this.defaultConstant);
      for (var i = 0; i < this.objectString.length; i++) {
        this.defaultConstant[this.objectString[i].toString()] = this.l10n.getConstant(this.objectString[i].toString());
      }
    };
    MaskedDateTime2.prototype.validCharacterCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      if (this.parent.moduleName !== "timepicker") {
        if (start === this.hiddenMask.length && this.mask === this.parent.inputElement.value) {
          start = 0;
        }
      }
      for (var i = start, j = start - 1; i < this.hiddenMask.length || j >= 0; i++, j--) {
        if (i < this.hiddenMask.length && this.validCharacters.indexOf(this.hiddenMask[i]) !== -1) {
          this.setSelection(this.hiddenMask[i]);
          return;
        }
        if (j >= 0 && this.validCharacters.indexOf(this.hiddenMask[j]) !== -1) {
          this.setSelection(this.hiddenMask[j]);
          return;
        }
      }
    };
    MaskedDateTime2.prototype.setDynamicValue = function() {
      this.maskDateValue = /* @__PURE__ */ new Date(+this.parent.value);
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = true;
      this.updateValue();
      if (!this.isBlur) {
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.setSelection = function(validChar) {
      var start = -1;
      var end = 0;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (this.hiddenMask[i] === validChar) {
          end = i + 1;
          if (start === -1) {
            start = i;
          }
        }
      }
      if (start < 0) {
        start = 0;
      }
      this.parent.inputElement.setSelectionRange(start, end);
    };
    MaskedDateTime2.prototype.maskKeydownHandler = function(args) {
      this.dayTypeCount = this.monthTypeCount = this.hourTypeCount = this.minuteTypeCount = this.secondTypeCount = 0;
      if (args.e.key === "Delete") {
        this.isDeleteKey = true;
        return;
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWLEFT || args.e.key === ARROWRIGHT || args.e.key === SHIFTTAB || args.e.key === TAB2 || args.e.action === SHIFTTAB || args.e.key === END2 || args.e.key === HOME2)) {
        var start = this.parent.inputElement.selectionStart;
        var end = this.parent.inputElement.selectionEnd;
        var length_1 = this.parent.inputElement.value.length;
        if (start === 0 && end === length_1 && (args.e.key === TAB2 || args.e.action === SHIFTTAB)) {
          var index = args.e.action === SHIFTTAB ? end : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = index;
        }
        if (args.e.key === END2 || args.e.key === HOME2) {
          var range = args.e.key === END2 ? length_1 : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = range;
        }
        this.navigateSelection(args.e.key === ARROWLEFT || args.e.action === SHIFTTAB || args.e.key === END2 ? true : false);
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWUP || args.e.key === ARROWDOWN)) {
        var start = this.parent.inputElement.selectionStart;
        var formatText = "";
        if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
          formatText = this.hiddenMask[start];
        }
        this.dateAlteration(args.e.key === ARROWDOWN ? true : false);
        var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = true;
        this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = false;
        this.previousHiddenMask = this.hiddenMask;
        this.previousValue = inputValue;
        this.parent.inputElement.value = inputValue;
        for (var i = 0; i < this.hiddenMask.length; i++) {
          if (formatText === this.hiddenMask[i]) {
            start = i;
            break;
          }
        }
        this.parent.inputElement.selectionStart = start;
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.isPersist = function() {
      var isPersist = this.parent.isFocused || this.navigated;
      return isPersist;
    };
    MaskedDateTime2.prototype.differenceCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      var inputValue = this.parent.inputElement.value;
      var previousVal = this.previousValue.substring(0, start + this.previousValue.length - inputValue.length);
      var newVal = inputValue.substring(0, start);
      var newDateValue = /* @__PURE__ */ new Date(+this.maskDateValue);
      var maxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
      if (previousVal.indexOf(newVal) === 0 && (newVal.length === 0 || this.previousHiddenMask[newVal.length - 1] !== this.previousHiddenMask[newVal.length])) {
        for (var i = newVal.length; i < previousVal.length; i++) {
          if (this.previousHiddenMask[i] !== "" && this.validCharacters.indexOf(this.previousHiddenMask[i]) >= 0) {
            this.isDeletion = this.handleDeletion(this.previousHiddenMask[i], false);
          }
        }
        if (this.isDeletion) {
          return;
        }
      }
      switch (this.previousHiddenMask[start - 1]) {
        case "d": {
          var date = (this.isDayPart && newDateValue.getDate().toString().length < 2 && !this.isPersist() ? newDateValue.getDate() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.isDateZero = newVal[start - 1] === "0";
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(date)) {
            return;
          }
          for (var i = 0; date > maxDate; i++) {
            date = parseInt(date.toString().slice(1), 10);
          }
          if (date >= 1) {
            newDateValue.setDate(date);
            this.isNavigate = date.toString().length === 2;
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            if (newDateValue.getMonth() !== this.maskDateValue.getMonth()) {
              return;
            }
            this.isDayPart = true;
            this.dayTypeCount = this.dayTypeCount + 1;
          } else {
            this.isDayPart = false;
            this.dayTypeCount = this.isDateZero ? this.dayTypeCount + 1 : this.dayTypeCount;
          }
          break;
        }
        case "M": {
          var month = void 0;
          if (newDateValue.getMonth().toString().length < 2 && !this.isPersist()) {
            month = (this.isMonthPart ? (newDateValue.getMonth() + 1) * 10 : 0) + parseInt(newVal[start - 1], 10);
          } else {
            month = parseInt(newVal[start - 1], 10);
          }
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          this.isMonthZero = newVal[start - 1] === "0";
          if (!isNaN(month)) {
            while (month > 12) {
              month = parseInt(month.toString().slice(1), 10);
            }
            if (month >= 1) {
              newDateValue.setMonth(month - 1);
              if (month >= 10 || month === 1) {
                if (this.isLeadingZero && month === 1) {
                  this.isNavigate = month.toString().length === 1;
                  this.isLeadingZero = false;
                } else {
                  this.isNavigate = month.toString().length === 2;
                }
              } else {
                this.isNavigate = month.toString().length === 1;
              }
              if (newDateValue.getMonth() !== month - 1) {
                newDateValue.setDate(1);
                newDateValue.setMonth(month - 1);
              }
              if (this.isDayPart) {
                var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
                var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
                if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
                  newDateValue.setDate(currentMaxDate);
                }
              }
              this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
              this.isMonthPart = true;
              this.monthTypeCount = this.monthTypeCount + 1;
              this.isLeadingZero = false;
            } else {
              newDateValue.setMonth(0);
              this.isLeadingZero = true;
              this.isMonthPart = false;
              this.monthTypeCount = this.isMonthZero ? this.monthTypeCount + 1 : this.monthTypeCount;
            }
          } else {
            var monthString = this.getCulturedValue("months[stand-alone].wide");
            var monthValue = Object.keys(monthString);
            this.monthCharacter += newVal[start - 1].toLowerCase();
            while (this.monthCharacter.length > 0) {
              var i = 1;
              for (var _i = 0, monthValue_1 = monthValue; _i < monthValue_1.length; _i++) {
                var months = monthValue_1[_i];
                if (monthString[i].toLowerCase().indexOf(this.monthCharacter) === 0) {
                  newDateValue.setMonth(i - 1);
                  this.isMonthPart = true;
                  this.maskDateValue = newDateValue;
                  return;
                }
                i++;
              }
              this.monthCharacter = this.monthCharacter.substring(1, this.monthCharacter.length);
            }
          }
          break;
        }
        case "y": {
          var year = (this.isYearPart && (newDateValue.getFullYear().toString().length < 4 && !this.isShortYear) ? newDateValue.getFullYear() * 10 : 0) + parseInt(newVal[start - 1], 10);
          var yearValue = (this.dateformat.match(/y/g) || []).length;
          yearValue = yearValue !== 2 ? 4 : yearValue;
          this.isShortYear = false;
          this.isYearZero = newVal[start - 1] === "0";
          if (isNaN(year)) {
            return;
          }
          while (year > 9999) {
            year = parseInt(year.toString().slice(1), 10);
          }
          if (year < 1) {
            this.isYearPart = false;
          } else {
            newDateValue.setFullYear(year);
            if (year.toString().length === yearValue) {
              this.isNavigate = true;
            }
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            this.isYearPart = true;
          }
          break;
        }
        case "h":
          this.hour = (this.isHourPart && (newDateValue.getHours() % 12 || 12).toString().length < 2 && !this.isPersist() ? (newDateValue.getHours() % 12 || 12) * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          while (this.hour > 12) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(Math.floor(newDateValue.getHours() / 12) * 12 + this.hour % 12);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "H":
          this.hour = (this.isHourPart && newDateValue.getHours().toString().length < 2 && !this.isPersist() ? newDateValue.getHours() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          for (var i = 0; this.hour > 23; i++) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(this.hour);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "m": {
          var minutes = (this.isMinutePart && newDateValue.getMinutes().toString().length < 2 && !this.isPersist() ? newDateValue.getMinutes() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(minutes)) {
            return;
          }
          for (var i = 0; minutes > 59; i++) {
            minutes = parseInt(minutes.toString().slice(1), 10);
          }
          newDateValue.setMinutes(minutes);
          this.isNavigate = minutes.toString().length === 2;
          this.isMinutePart = true;
          this.minuteTypeCount = this.minuteTypeCount + 1;
          break;
        }
        case "s": {
          var seconds = (this.isSecondsPart && newDateValue.getSeconds().toString().length < 2 && !this.isPersist() ? newDateValue.getSeconds() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(seconds)) {
            return;
          }
          for (var i = 0; seconds > 59; i++) {
            seconds = parseInt(seconds.toString().slice(1), 10);
          }
          newDateValue.setSeconds(seconds);
          this.isNavigate = seconds.toString().length === 2;
          this.isSecondsPart = true;
          this.secondTypeCount = this.secondTypeCount + 1;
          break;
        }
        case "a": {
          this.periodCharacter += newVal[start - 1].toLowerCase();
          var periodString = this.getCulturedValue("dayPeriods.format.wide");
          var periodkeys = Object.keys(periodString);
          for (var i = 0; this.periodCharacter.length > 0; i++) {
            if (periodString[periodkeys[0]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() >= 12 || periodString[periodkeys[1]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() < 12) {
              newDateValue.setHours((newDateValue.getHours() + 12) % 24);
              this.maskDateValue = newDateValue;
            }
            this.periodCharacter = this.periodCharacter.substring(1, this.periodCharacter.length);
          }
          break;
        }
        default:
          break;
      }
      this.maskDateValue = newDateValue;
    };
    MaskedDateTime2.prototype.formatCheck = function() {
      var proxy = this;
      function formatValueSpecifier(formattext) {
        var result;
        var daysAbbreviated = proxy.getCulturedValue("days[stand-alone].abbreviated");
        var dayKeyAbbreviated = Object.keys(daysAbbreviated);
        var daysWide = proxy.getCulturedValue("days[stand-alone].wide");
        var dayKeyWide = Object.keys(daysWide);
        var daysNarrow = proxy.getCulturedValue("days[stand-alone].narrow");
        var dayKeyNarrow = Object.keys(daysNarrow);
        var monthAbbreviated = proxy.getCulturedValue("months[stand-alone].abbreviated");
        var monthWide = proxy.getCulturedValue("months[stand-alone].wide");
        var periodString = proxy.getCulturedValue("dayPeriods.format.wide");
        var periodkeys = Object.keys(periodString);
        var milliseconds;
        var dateOptions;
        switch (formattext) {
          case "ddd":
          case "dddd":
          case "d":
            result = proxy.isDayPart ? proxy.maskDateValue.getDate().toString() : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "dd":
            result = proxy.isDayPart ? proxy.roundOff(proxy.maskDateValue.getDate(), 2) : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "E":
          case "EE":
          case "EEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysAbbreviated[dayKeyAbbreviated[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysWide[dayKeyWide[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysNarrow[dayKeyNarrow[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "M":
            result = proxy.isMonthPart ? (proxy.maskDateValue.getMonth() + 1).toString() : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MM":
            result = proxy.isMonthPart ? proxy.roundOff(proxy.maskDateValue.getMonth() + 1, 2) : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MMM":
            result = proxy.isMonthPart ? monthAbbreviated[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "MMMM":
            result = proxy.isMonthPart ? monthWide[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "yy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear() % 100, 2) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "y":
          case "yyy":
          case "yyyy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear(), 4) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "h":
            result = proxy.isHourPart ? (proxy.maskDateValue.getHours() % 12 || 12).toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "hh":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours() % 12 || 12, 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "H":
            result = proxy.isHourPart ? proxy.maskDateValue.getHours().toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "HH":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours(), 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "m":
            result = proxy.isMinutePart ? proxy.maskDateValue.getMinutes().toString() : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "mm":
            result = proxy.isMinutePart ? proxy.roundOff(proxy.maskDateValue.getMinutes(), 2) : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "s":
            result = proxy.isSecondsPart ? proxy.maskDateValue.getSeconds().toString() : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "ss":
            result = proxy.isSecondsPart ? proxy.roundOff(proxy.maskDateValue.getSeconds(), 2) : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "f":
            result = Math.floor(proxy.maskDateValue.getMilliseconds() / 100).toString();
            break;
          case "ff":
            milliseconds = proxy.maskDateValue.getMilliseconds();
            if (proxy.maskDateValue.getMilliseconds() > 99) {
              milliseconds = Math.floor(proxy.maskDateValue.getMilliseconds() / 10);
            }
            result = proxy.roundOff(milliseconds, 2);
            break;
          case "fff":
            result = proxy.roundOff(proxy.maskDateValue.getMilliseconds(), 3);
            break;
          case "a":
          case "aa":
            result = proxy.maskDateValue.getHours() < 12 ? periodString["am"] : periodString["pm"];
            break;
          case "z":
          case "zz":
          case "zzz":
          case "zzzz":
            dateOptions = {
              format: formattext,
              type: "dateTime",
              skeleton: "yMd",
              calendar: proxy.parent.calendarMode
            };
            result = proxy.parent.globalize.formatDate(proxy.maskDateValue, dateOptions);
            break;
        }
        result = result !== void 0 ? result : formattext.slice(1, formattext.length - 1);
        if (proxy.isHiddenMask) {
          var hiddenChar = "";
          for (var i = 0; i < result.length; i++) {
            hiddenChar += formattext[0];
          }
          return hiddenChar;
        } else {
          return result;
        }
      }
      return formatValueSpecifier;
    };
    MaskedDateTime2.prototype.maskInputHandler = function() {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      }
      this.differenceCheck();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isDateZero = this.isMonthZero = this.isYearZero = false;
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.inputElement.value = inputValue;
      this.parent.inputElement.value = inputValue;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (formatText === this.hiddenMask[i]) {
          start = i;
          break;
        }
      }
      this.parent.inputElement.selectionStart = start;
      this.validCharacterCheck();
      if ((this.isNavigate || this.isDeletion) && !this.isDeleteKey) {
        var isbackward = this.isNavigate ? false : true;
        this.isNavigate = this.isDeletion = false;
        this.navigateSelection(isbackward);
      }
      if (this.isDeleteKey) {
        this.isDeletion = false;
      }
      this.isDeleteKey = false;
    };
    MaskedDateTime2.prototype.navigateSelection = function(isbackward) {
      var start = this.parent.inputElement.selectionStart;
      var end = this.parent.inputElement.selectionEnd;
      var formatIndex = isbackward ? start - 1 : end;
      this.navigated = true;
      while (formatIndex < this.hiddenMask.length && formatIndex >= 0) {
        if (this.validCharacters.indexOf(this.hiddenMask[formatIndex]) >= 0) {
          this.setSelection(this.hiddenMask[formatIndex]);
          break;
        }
        formatIndex = formatIndex + (isbackward ? -1 : 1);
      }
    };
    MaskedDateTime2.prototype.roundOff = function(val, count) {
      var valueText = val.toString();
      var length = count - valueText.length;
      var result = "";
      for (var i = 0; i < length; i++) {
        result += "0";
      }
      return result + valueText;
    };
    MaskedDateTime2.prototype.zeroCheck = function(isZero, isDayPart, resultValue) {
      var result = resultValue;
      if (isZero && !isDayPart) {
        result = "0";
      }
      return result;
    };
    MaskedDateTime2.prototype.handleDeletion = function(format, isSegment) {
      switch (format) {
        case "d":
          this.isDayPart = isSegment;
          break;
        case "M":
          this.isMonthPart = isSegment;
          if (!isSegment) {
            this.maskDateValue.setMonth(0);
            this.monthCharacter = "";
          }
          break;
        case "y":
          this.isYearPart = isSegment;
          break;
        case "H":
        case "h":
          this.isHourPart = isSegment;
          if (!isSegment) {
            this.periodCharacter = "";
          }
          break;
        case "m":
          this.isMinutePart = isSegment;
          break;
        case "s":
          this.isSecondsPart = isSegment;
          break;
        default:
          return false;
      }
      return true;
    };
    MaskedDateTime2.prototype.dateAlteration = function(isDecrement) {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      } else {
        return;
      }
      var newDateValue = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      var incrementValue = isDecrement ? -1 : 1;
      switch (formatText) {
        case "d":
          newDateValue.setDate(newDateValue.getDate() + incrementValue);
          break;
        case "M": {
          var newMonth = newDateValue.getMonth() + incrementValue;
          newDateValue.setDate(1);
          newDateValue.setMonth(newMonth);
          if (this.isDayPart) {
            var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
            var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
            if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
              newDateValue.setDate(currentMaxDate);
            } else {
              newDateValue.setDate(this.previousDate.getDate());
            }
          } else {
            newDateValue.setDate(this.previousDate.getDate());
          }
          this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
          break;
        }
        case "y":
          newDateValue.setFullYear(newDateValue.getFullYear() + incrementValue);
          break;
        case "H":
        case "h":
          newDateValue.setHours(newDateValue.getHours() + incrementValue);
          break;
        case "m":
          newDateValue.setMinutes(newDateValue.getMinutes() + incrementValue);
          break;
        case "s":
          newDateValue.setSeconds(newDateValue.getSeconds() + incrementValue);
          break;
        case "a":
          newDateValue.setHours((newDateValue.getHours() + 12) % 24);
          break;
        default:
          break;
      }
      this.maskDateValue = newDateValue.getFullYear() > 0 ? newDateValue : this.maskDateValue;
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        this.handleDeletion(this.hiddenMask[start], true);
      }
    };
    MaskedDateTime2.prototype.getCulturedValue = function(format) {
      var locale = this.parent.locale;
      var result;
      if (locale === "en" || locale === "en-US") {
        result = getValue(format, getDefaultDateObject());
      } else {
        result = getValue("main." + locale + (".dates.calendars.gregorian." + format), cldrData);
      }
      return result;
    };
    MaskedDateTime2.prototype.getCulturedFormat = function() {
      var formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
      if (this.parent.moduleName === "datepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.format && this.parent.formatString) {
          formatString = this.parent.formatString;
        }
      }
      if (this.parent.moduleName === "datetimepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.dateTimeFormat) {
          formatString = this.parent.dateTimeFormat;
        }
      }
      if (this.parent.moduleName === "timepicker") {
        formatString = this.parent.cldrTimeFormat();
      }
      return formatString;
    };
    MaskedDateTime2.prototype.clearHandler = function() {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.updateValue();
    };
    MaskedDateTime2.prototype.updateValue = function() {
      this.monthCharacter = this.periodCharacter = "";
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.updateInputValue(inputValue);
    };
    MaskedDateTime2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return MaskedDateTime2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/constant.js
var cellClick = "cellClick";
var cellDoubleClick = "cellDoubleClick";
var moreEventsClick = "moreEventsClick";
var select2 = "select";
var hover = "hover";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var navigating = "navigating";
var renderCell = "renderCell";
var eventClick = "eventClick";
var eventDoubleClick = "eventDoubleClick";
var eventRendered = "eventRendered";
var dataBinding = "dataBinding";
var dataBound = "dataBound";
var popupOpen = "popupOpen";
var popupClose = "popupClose";
var dragStart = "dragStart";
var drag = "drag";
var dragStop = "dragStop";
var resizeStart = "resizeStart";
var resizing = "resizing";
var resizeStop = "resizeStop";
var inlineClick = "inlineClick";
var cellSelect = "cellSelect";
var virtualScrollStart = "virtualScrollStart";
var virtualScrollStop = "virtualScrollStop";
var initialLoad = "initial-load";
var initialEnd = "initial-end";
var print2 = "print";
var dataReady = "data-ready";
var eventsLoaded = "events-loaded";
var contentReady = "content-ready";
var scroll = "scroll";
var virtualScroll = "virtual-scroll";
var scrollUiUpdate = "scroll-ui-update";
var uiUpdate = "ui-update";
var documentClick = "document-click";
var cellMouseDown = "cell-mouse-down";

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/util.js
var WEEK_LENGTH = 7;
var DEFAULT_WEEKS = 6;
var MS_PER_DAY = 864e5;
var MS_PER_MINUTE = 6e4;
function getElementHeightFromClass(container, elementClass) {
  var height = 0;
  var el = createElement("div", { className: elementClass }).cloneNode();
  el.style.visibility = "hidden";
  el.style.position = "absolute";
  container.appendChild(el);
  height = getElementHeight(el);
  remove(el);
  return height;
}
function getElementWidthFromClass(container, elementClass) {
  var width = 0;
  var el = createElement("div", { className: elementClass }).cloneNode();
  el.style.visibility = "hidden";
  el.style.position = "absolute";
  container.appendChild(el);
  width = getElementWidth(el);
  remove(el);
  return width;
}
function getTranslateY(element) {
  var style = getComputedStyle(element);
  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m42 : 0;
}
function getTranslateX(element) {
  var style = getComputedStyle(element);
  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
}
function getWeekFirstDate(date, firstDayOfWeek) {
  var date1 = new Date(date.getTime());
  firstDayOfWeek = (firstDayOfWeek - date1.getDay() + 7 * -1) % 7;
  return new Date(date1.setDate(date1.getDate() + (isNaN(firstDayOfWeek) ? 0 : firstDayOfWeek)));
}
function getWeekLastDate(date, firstDayOfWeek) {
  var weekFirst = getWeekFirstDate(date, firstDayOfWeek);
  var weekLast = new Date(weekFirst.getFullYear(), weekFirst.getMonth(), weekFirst.getDate() + 6);
  return new Date(weekLast.getTime());
}
function firstDateOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function lastDateOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function getWeekNumber(date) {
  var date1 = new Date(date.getFullYear(), 0, 1).valueOf();
  var currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate()).valueOf();
  var dayOfYear = (currentDate - date1 + MS_PER_DAY) / MS_PER_DAY;
  return Math.ceil(dayOfYear / 7);
}
function getWeekMiddleDate(weekFirst, weekLast) {
  return new Date(weekLast.valueOf() - (weekLast.valueOf() - weekFirst.valueOf()) / 2);
}
function setTime(date, time) {
  var tzOffsetBefore = date.getTimezoneOffset();
  var d = new Date(date.getTime() + time);
  var tzOffsetDiff = d.getTimezoneOffset() - tzOffsetBefore;
  date.setTime(d.getTime() + tzOffsetDiff * MS_PER_MINUTE);
  return date;
}
function resetTime(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}
function getDateInMs(date) {
  var localOffset = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTimezoneOffset();
  var dateOffset = date.getTimezoneOffset();
  var timezoneOffset = dateOffset - localOffset;
  return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTime() - timezoneOffset * 60 * 1e3;
}
function getDateCount(startDate, endDate) {
  return Math.ceil((endDate.getTime() - startDate.getTime()) / MS_PER_DAY);
}
function addDays(date, noOfDays) {
  date = /* @__PURE__ */ new Date("" + date);
  return new Date(date.setDate(date.getDate() + noOfDays));
}
function addMonths(date, noOfMonths) {
  date = /* @__PURE__ */ new Date("" + date);
  var day = date.getDate();
  date.setDate(1);
  date.setMonth(date.getMonth() + noOfMonths);
  date.setDate(Math.min(day, getMaxDays(date)));
  return date;
}
function addYears(date, noOfYears) {
  date = /* @__PURE__ */ new Date("" + date);
  var day = date.getDate();
  date.setDate(1);
  date.setFullYear(date.getFullYear() + noOfYears);
  date.setDate(Math.min(day, getMaxDays(date)));
  return date;
}
function getStartEndHours(date, startHour, endHour) {
  var date1 = new Date(date.getTime());
  date1.setHours(startHour.getHours());
  date1.setMinutes(startHour.getMinutes());
  date1.setSeconds(startHour.getSeconds());
  var date2 = new Date(date.getTime());
  if (endHour.getHours() === 0) {
    date2 = addDays(date2, 1);
  } else {
    date2.setHours(endHour.getHours());
    date2.setMinutes(endHour.getMinutes());
    date2.setSeconds(endHour.getSeconds());
  }
  return { startHour: date1, endHour: date2 };
}
function getMaxDays(date) {
  return lastDateOfMonth(date).getDate();
}
function getDaysCount(startDate, endDate) {
  var strTime = resetTime(new Date(startDate));
  var endTime = resetTime(new Date(endDate));
  return Math.round((endTime.getTime() - strTime.getTime()) / MS_PER_DAY);
}
function getDateFromString(date) {
  return date.indexOf("Date") !== -1 ? new Date(parseInt(date.match(/\d+/g).toString(), 10)) : date.indexOf("T") !== -1 ? new Date(date) : new Date(date.replace(/-/g, "/"));
}
var scrollWidth = null;
var pixelRatio = null;
function getScrollBarWidth() {
  if (scrollWidth !== null) {
    return scrollWidth;
  }
  if (pixelRatio === null) {
    pixelRatio = window.devicePixelRatio || window.screen.availWidth / document.documentElement.clientWidth;
  }
  var divNode = createElement("div");
  var value = 0;
  divNode.style.cssText = "width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;";
  document.body.appendChild(divNode);
  var ratio = devicePixelRatio ? devicePixelRatio.toFixed(2) === "1.10" || devicePixelRatio <= 1 ? Math.ceil(devicePixelRatio % 1) : Math.floor(devicePixelRatio % 1) : 0;
  value = divNode.offsetWidth - divNode.clientWidth - ratio | 0;
  document.body.removeChild(divNode);
  return scrollWidth = value;
}
function resetScrollbarWidth() {
  var zoomPixelRatio = window.devicePixelRatio || window.screen.availWidth / document.documentElement.clientWidth;
  if (pixelRatio && pixelRatio !== zoomPixelRatio) {
    scrollWidth = null;
    pixelRatio = zoomPixelRatio;
  }
}
function findIndexInData(data, field, value, event2, resourceCollection) {
  for (var i = 0, length_1 = data.length; i < length_1; i++) {
    if (data[parseInt(i.toString(), 10)]["" + field] === value) {
      if (event2) {
        var field_1 = resourceCollection.slice(-2)[0].field;
        var res = event2["" + field_1] instanceof Array ? event2["" + field_1] : [event2["" + field_1]];
        var resData = res.join(",");
        if (resData.includes(data[parseInt(i.toString(), 10)][resourceCollection.slice(-1)[0].groupIDField])) {
          return i;
        }
      } else {
        return i;
      }
    }
  }
  return -1;
}
function getOuterHeight(element) {
  var style = getComputedStyle(element);
  return element.offsetHeight + (parseInt(style.marginTop, 10) || 0) + (parseInt(style.marginBottom, 10) || 0);
}
function removeChildren(element) {
  var elementChildren = [].slice.call(element.children);
  for (var _i = 0, elementChildren_1 = elementChildren; _i < elementChildren_1.length; _i++) {
    var elementChild = elementChildren_1[_i];
    element.removeChild(elementChild);
  }
}
function isDaylightSavingTime(date) {
  var jan = new Date(date.getFullYear(), 0, 1);
  var jul = new Date(date.getFullYear(), 6, 1);
  return date.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
}
function getUniversalTime(date) {
  var year = date.getFullYear();
  var month = date.getMonth();
  var day = date.getDate();
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  var milliseconds = date.getMilliseconds();
  return Date.UTC(year, month, day, hours, minutes, seconds, milliseconds);
}
function isMobile() {
  return window.navigator.userAgent.toLowerCase().indexOf("mobi") > -1;
}
function isIPadDevice() {
  return window.navigator.userAgent.toLowerCase().indexOf("ipad") > -1;
}
function capitalizeFirstWord(inputString, type) {
  if (type === "multiple") {
    inputString = inputString.split(" ").map(function(e) {
      return e.charAt(0).toLocaleUpperCase() + e.substring(1);
    }).join(" ");
  } else if (type === "single") {
    if (inputString[0] >= "0" && inputString[0] <= "9") {
      var array = inputString.match(/[a-zA-Z]/);
      inputString = isNullOrUndefined(array) ? inputString : inputString.slice(0, array.index) + inputString[array.index].toLocaleUpperCase() + inputString.slice(array.index + 1);
    }
    inputString = inputString[0].toLocaleUpperCase() + inputString.slice(1);
  }
  return inputString;
}
function getElementWidth(element) {
  return document.body.style.transform.includes("scale") ? element.offsetWidth : element.getBoundingClientRect().width;
}
function getElementHeight(element) {
  return document.body.style.transform.includes("scale") ? element.offsetHeight : element.getBoundingClientRect().height;
}
function getElementTop(element) {
  return document.body.style.transform.includes("scale") ? element.offsetTop : element.getBoundingClientRect().top;
}

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/css-constant.js
var ROOT8 = "e-schedule";
var RTL7 = "e-rtl";
var DEVICE_CLASS = "e-device";
var ADAPTIVE_CLASS = "e-adaptive";
var MULTI_DRAG = "e-multi-drag";
var ICON3 = "e-icons";
var ENABLE_CLASS = "e-enable";
var DISABLE_CLASS = "e-disable";
var TABLE_CONTAINER_CLASS = "e-table-container";
var SCHEDULE_TABLE_CLASS = "e-schedule-table";
var ALLDAY_CELLS_CLASS = "e-all-day-cells";
var HEADER_POPUP_CLASS = "e-header-popup";
var HEADER_CALENDAR_CLASS = "e-header-calendar";
var ALLDAY_ROW_CLASS = "e-all-day-row";
var CONTENT_TABLE_CLASS = "e-content-table";
var WORK_CELLS_CLASS = "e-work-cells";
var WORK_HOURS_CLASS = "e-work-hours";
var POPUP_OPEN = "e-popup-open";
var POPUP_CLOSE = "e-popup-close";
var DATE_HEADER_WRAP_CLASS = "e-date-header-wrap";
var DATE_HEADER_CONTAINER_CLASS = "e-date-header-container";
var HEADER_CELLS_CLASS = "e-header-cells";
var HEADER_WEEK_CELLS_CLASS = "e-header-week-cell";
var HEADER_MONTH_CELLS_CLASS = "e-header-month-cell";
var HEADER_YEAR_CELLS_CLASS = "e-header-year-cell";
var WORKDAY_CLASS = "e-work-days";
var OTHERMONTH_CLASS = "e-other-month";
var CURRENT_DAY_CLASS = "e-current-day";
var CURRENTDATE_CLASS = "e-current-date";
var CURRENT_PANEL_CLASS = "e-current-panel";
var PREVIOUS_PANEL_CLASS = "e-previous-panel";
var NEXT_PANEL_CLASS = "e-next-panel";
var PREVIOUS_DATE_CLASS = "e-prev";
var NEXT_DATE_CLASS = "e-next";
var TRANSLATE_CLASS = "e-translate";
var LEFT_INDENT_CLASS = "e-left-indent";
var LEFT_INDENT_WRAP_CLASS = "e-left-indent-wrap";
var EVENT_TABLE_CLASS = "e-event-table";
var RESOURCE_LEFT_TD_CLASS = "e-resource-left-td";
var RESOURCE_GROUP_CELLS_CLASS = "e-resource-group-cells";
var RESOURCE_TEXT_CLASS = "e-resource-text";
var RESOURCE_COLUMN_WRAP_CLASS = "e-resource-column-wrap";
var RESOURCE_COLUMN_TABLE_CLASS = "e-resource-column-table";
var RESOURCE_CHILD_CLASS = "e-child-node";
var RESOURCE_PARENT_CLASS = "e-parent-node";
var RESOURCE_EXPAND_CLASS = "e-resource-expand";
var RESOURCE_COLLAPSE_CLASS = "e-resource-collapse";
var RESOURCE_TREE_ICON_CLASS = "e-resource-tree-icon";
var RESOURCE_CELLS_CLASS = "e-resource-cells";
var TIME_CELLS_WRAP_CLASS = "e-time-cells-wrap";
var TIME_CELLS_CLASS = "e-time-cells";
var TIME_SLOT_CLASS = "e-time-slots";
var ALTERNATE_CELLS_CLASS = "e-alternate-cells";
var CURRENT_TIME_CLASS = "e-current-time";
var CURRENT_TIMELINE_CLASS = "e-current-timeline";
var PREVIOUS_TIMELINE_CLASS = "e-previous-timeline";
var HIDE_CHILDS_CLASS = "e-hide-childs";
var SCROLL_CONTAINER_CLASS = "e-scroll-container";
var TIMELINE_WRAPPER_CLASS = "e-timeline-wrapper";
var APPOINTMENT_WRAPPER_CLASS = "e-appointment-wrapper";
var APPOINTMENT_WRAPPER_HIDDEN_CLASS = "e-appointment-wrapper-hidden";
var DAY_WRAPPER_CLASS = "e-day-wrapper";
var TOOLBAR_CONTAINER = "e-schedule-toolbar-container";
var RESOURCE_TOOLBAR_CONTAINER = "e-schedule-resource-toolbar-container";
var HEADER_TOOLBAR = "e-schedule-toolbar";
var RESOURCE_HEADER_TOOLBAR = "e-schedule-resource-toolbar";
var SELECTED_CELL_CLASS = "e-selected-cell";
var WEEK_NUMBER_WRAPPER_CLASS = "e-week-number-wrapper";
var WEEK_NUMBER_CLASS = "e-week-number";
var APPOINTMENT_WRAP_CLASS = "e-appointment-wrap";
var WRAPPER_CONTAINER_CLASS = "e-wrapper-container";
var APPOINTMENT_CONTAINER_CLASS = "e-appointment-container";
var APPOINTMENT_CLASS = "e-appointment";
var BLOCK_APPOINTMENT_CLASS = "e-block-appointment";
var BLOCK_INDICATOR_CLASS = "e-block-indicator";
var APPOINTMENT_BORDER = "e-appointment-border";
var APPOINTMENT_DETAILS = "e-appointment-details";
var SUBJECT_WRAP = "e-subject-wrap";
var RESOURCE_NAME = "e-resource-name";
var APPOINTMENT_TIME = "e-time";
var TABLE_WRAP_CLASS = "e-table-wrap";
var OUTER_TABLE_CLASS = "e-outer-table";
var CONTENT_WRAP_CLASS = "e-content-wrap";
var VIRTUAL_TRACK_CLASS = "e-virtual-track";
var AGENDA_CELLS_CLASS = "e-agenda-cells";
var AGENDA_CURRENT_DAY_CLASS = "e-current-day";
var AGENDA_SELECTED_CELL = "e-active-appointment-agenda";
var MONTH_HEADER_CLASS = "e-month-header";
var AGENDA_HEADER_CLASS = "e-day-date-header";
var AGENDA_RESOURCE_CLASS = "e-resource-column";
var AGENDA_DATE_CLASS = "e-date-column";
var NAVIGATE_CLASS = "e-navigate";
var DATE_HEADER_CLASS = "e-date-header";
var AGENDA_DAY_BORDER_CLASS = "e-day-border";
var DATE_BORDER_CLASS = "e-date-border";
var AGENDA_DAY_PADDING_CLASS = "e-day-padding";
var DATE_TIME_CLASS = "e-date-time";
var DATE_TIME_WRAPPER_CLASS = "e-date-time-wrapper";
var AGENDA_EMPTY_EVENT_CLASS = "e-empty-event";
var AGENDA_NO_EVENT_CLASS = "e-no-event";
var APPOINTMENT_INDICATOR_CLASS = "e-appointment-indicator";
var EVENT_INDICATOR_CLASS = "e-indicator";
var EVENT_ICON_UP_CLASS = "e-up-icon";
var EVENT_ICON_DOWN_CLASS = "e-down-icon";
var EVENT_ICON_LEFT_CLASS = "e-left-icon";
var EVENT_ICON_RIGHT_CLASS = "e-right-icon";
var EVENT_ACTION_CLASS = "e-event-action";
var NEW_EVENT_CLASS = "e-new-event";
var CLONE_ELEMENT_CLASS = "e-schedule-event-clone";
var MONTH_CLONE_ELEMENT_CLASS = "e-month-event";
var CLONE_TIME_INDICATOR_CLASS = "e-clone-time-indicator";
var DRAG_CLONE_CLASS = "e-drag-clone";
var EVENT_RESIZE_CLASS = "e-event-resize";
var RESIZE_CLONE_CLASS = "e-resize-clone";
var LEFT_RESIZE_HANDLER = "e-left-handler";
var RIGHT_RESIZE_HANDLER = "e-right-handler";
var TOP_RESIZE_HANDLER = "e-top-handler";
var BOTTOM_RESIZE_HANDLER = "e-bottom-handler";
var EVENT_RECURRENCE_ICON_CLASS = "e-recurrence-icon";
var EVENT_RECURRENCE_EDIT_ICON_CLASS = "e-recurrence-edit-icon";
var HEADER_ROW_CLASS = "e-header-row";
var ALLDAY_APPOINTMENT_WRAPPER_CLASS = "e-all-day-appointment-wrapper";
var ALLDAY_APPOINTMENT_CLASS = "e-all-day-appointment";
var EVENT_COUNT_CLASS = "e-appointment-hide";
var ROW_COUNT_WRAPPER_CLASS = "e-row-count-wrapper";
var ALLDAY_APPOINTMENT_SECTION_CLASS = "e-all-day-appointment-section";
var APPOINTMENT_ROW_EXPAND_CLASS = "e-appointment-expand";
var APPOINTMENT_ROW_COLLAPSE_CLASS = "e-appointment-collapse";
var MORE_INDICATOR_CLASS = "e-more-indicator";
var CELL_POPUP_CLASS = "e-cell-popup";
var EVENT_POPUP_CLASS = "e-event-popup";
var MULTIPLE_EVENT_POPUP_CLASS = "e-multiple-event-popup";
var POPUP_HEADER_CLASS = "e-popup-header";
var POPUP_HEADER_ICON_WRAPPER = "e-header-icon-wrapper";
var POPUP_CONTENT_CLASS = "e-popup-content";
var POPUP_FOOTER_CLASS = "e-popup-footer";
var DATE_TIME_DETAILS_CLASS = "e-date-time-details";
var RECURRENCE_SUMMARY_CLASS = "e-recurrence-summary";
var QUICK_POPUP_EVENT_DETAILS_CLASS = "e-event-details";
var EVENT_CREATE_CLASS = "e-event-create";
var EDIT_EVENT_CLASS = "e-event-edit";
var DELETE_EVENT_CLASS = "e-event-delete";
var TEXT_ELLIPSIS = "e-text-ellipsis";
var MORE_POPUP_WRAPPER_CLASS = "e-more-popup-wrapper";
var MORE_EVENT_POPUP_CLASS = "e-more-event-popup";
var MORE_EVENT_HEADER_CLASS = "e-more-event-header";
var MORE_EVENT_DATE_HEADER_CLASS = "e-more-event-date-header";
var MORE_EVENT_HEADER_DAY_CLASS = "e-header-day";
var MORE_EVENT_HEADER_DATE_CLASS = "e-header-date";
var MORE_EVENT_CLOSE_CLASS = "e-more-event-close";
var MORE_EVENT_CONTENT_CLASS = "e-more-event-content";
var MORE_EVENT_WRAPPER_CLASS = "e-more-appointment-wrapper";
var QUICK_DIALOG_CLASS = "e-quick-dialog";
var QUICK_DIALOG_OCCURRENCE_CLASS = "e-quick-dialog-occurrence-event";
var QUICK_DIALOG_SERIES_CLASS = "e-quick-dialog-series-event";
var QUICK_DIALOG_FOLLOWING_EVENTS_CLASS = "e-quick-dialog-following-events";
var FOLLOWING_EVENTS_DIALOG = "e-following-events-dialog";
var QUICK_DIALOG_DELETE_CLASS = "e-quick-dialog-delete";
var QUICK_DIALOG_CANCEL_CLASS = "e-quick-dialog-cancel";
var QUICK_DIALOG_ALERT_OK = "e-quick-alertok";
var QUICK_DIALOG_ALERT_CANCEL = "e-quick-alertcancel";
var QUICK_DIALOG_ALERT_FOLLOWING = "e-quick-alertfollowing";
var QUICK_DIALOG_ALERT_BTN_CLASS = "e-quick-dialog-alert-btn";
var EVENT_WINDOW_DIALOG_CLASS = "e-schedule-dialog";
var FORM_CONTAINER_CLASS = "e-form-container";
var FORM_CLASS = "e-schedule-form";
var EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS = "e-all-day-time-zone-row";
var EVENT_WINDOW_ALL_DAY_CLASS = "e-all-day";
var TIME_ZONE_CLASS = "e-time-zone";
var TIME_ZONE_ICON_CLASS = "e-time-zone-icon";
var TIME_ZONE_DETAILS_CLASS = "e-time-zone-details";
var EVENT_WINDOW_REPEAT_DIV_CLASS = "e-repeat-parent-row";
var EVENT_WINDOW_REPEAT_CLASS = "e-repeat";
var EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS = "e-title-location-row";
var SUBJECT_CLASS = "e-subject";
var LOCATION_CLASS = "e-location";
var LOCATION_ICON_CLASS = "e-location-icon";
var LOCATION_DETAILS_CLASS = "e-location-details";
var EVENT_WINDOW_START_END_DIV_CLASS = "e-start-end-row";
var EVENT_WINDOW_START_CLASS = "e-start";
var EVENT_WINDOW_END_CLASS = "e-end";
var EVENT_WINDOW_RESOURCES_DIV_CLASS = "e-resources-row";
var DESCRIPTION_CLASS = "e-description";
var DESCRIPTION_ICON_CLASS = "e-description-icon";
var DESCRIPTION_DETAILS_CLASS = "e-description-details";
var EVENT_WINDOW_TIME_ZONE_DIV_CLASS = "e-time-zone-row";
var EVENT_WINDOW_START_TZ_CLASS = "e-start-time-zone";
var EVENT_WINDOW_END_TZ_CLASS = "e-end-time-zone";
var EVENT_WINDOW_BACK_ICON_CLASS = "e-back-icon";
var EVENT_WINDOW_SAVE_ICON_CLASS = "e-save-icon";
var EVENT_WINDOW_CANCEL_BUTTON_CLASS = "e-event-cancel";
var EVENT_WINDOW_SAVE_BUTTON_CLASS = "e-event-save";
var EVENT_WINDOW_DIALOG_PARENT_CLASS = "e-dialog-parent";
var EVENT_WINDOW_TITLE_TEXT_CLASS = "e-title-text";
var EVENT_WINDOW_ICON_DISABLE_CLASS = "e-icon-disable";
var EDIT_CLASS = "e-edit";
var EDIT_ICON_CLASS = "e-edit-icon";
var DELETE_CLASS = "e-delete";
var DELETE_ICON_CLASS = "e-delete-icon";
var CLOSE_CLASS = "e-close";
var CLOSE_ICON_CLASS = "e-close-icon";
var ERROR_VALIDATION_CLASS = "e-schedule-error";
var EVENT_TOOLTIP_ROOT_CLASS = "e-schedule-event-tooltip";
var ALLDAY_ROW_ANIMATE_CLASS = "e-animate";
var TIMESCALE_DISABLE = "e-timescale-disable";
var DISABLE_DATE = "e-disable-date";
var HIDDEN_CLASS = "e-hidden";
var DISABLE_DATES = "e-disable-dates";
var POPUP_WRAPPER_CLASS = "e-quick-popup-wrapper";
var POPUP_TABLE_CLASS = "e-popup-table";
var RESOURCE_MENU = "e-resource-menu";
var RESOURCE_MENU_ICON = "e-icon-menu";
var RESOURCE_LEVEL_TITLE = "e-resource-level-title";
var RESOURCE_TREE = "e-resource-tree";
var RESOURCE_TREE_POPUP_OVERLAY = "e-resource-tree-popup-overlay";
var RESOURCE_TREE_POPUP = "e-resource-tree-popup";
var RESOURCE_CLASS = "e-resource";
var RESOURCE_ICON_CLASS = "e-resource-icon";
var RESOURCE_DETAILS_CLASS = "e-resource-details";
var DATE_TIME_ICON_CLASS = "e-date-time-icon";
var VIRTUAL_SCROLL_CLASS = "e-virtual-scroll";
var ICON_DISABLE_CLASS = "e-icon-disable";
var AUTO_HEIGHT = "e-auto-height";
var IGNORE_WHITESPACE = "e-ignore-whitespace";
var EVENT_TEMPLATE = "e-template";
var READ_ONLY = "e-read-only";
var MONTH_HEADER_WRAPPER = "e-month-header-wrapper";
var INLINE_SUBJECT_CLASS = "e-inline-subject";
var INLINE_APPOINTMENT_CLASS = "e-inline-appointment";
var SCROLL_HIDDEN = "e-scroll-hidden";
var ALLDAY_APPOINTMENT_SCROLL = "e-all-day-scroll";
var ALLDAY_APPOINTMENT_AUTO = "e-all-day-auto";

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/header-renderer.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var HeaderRenderer = (
  /** @class */
  function() {
    function HeaderRenderer2(parent) {
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.renderHeader();
      this.addEventListener();
    }
    HeaderRenderer2.prototype.addEventListener = function() {
      this.parent.on(documentClick, this.closeHeaderPopup, this);
    };
    HeaderRenderer2.prototype.removeEventListener = function() {
      this.parent.off(documentClick, this.closeHeaderPopup);
    };
    HeaderRenderer2.prototype.closeHeaderPopup = function(e) {
      var closestEle = closest(e.event.target, ".e-date-range,.e-header-popup,.e-day,.e-selected");
      var closestPop = closest(e.event.target, ".e-hor-nav,.e-toolbar-pop");
      var contentWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.isAdaptive) {
        if (!isNullOrUndefined(closestPop) && (closestPop.classList.contains("e-toolbar-pop") || closestPop.classList.contains("e-hor-nav")) && !(closestPop.classList.contains("e-hor-nav") && this.element.querySelector(".e-toolbar-pop").classList.contains(POPUP_OPEN))) {
          addClass([contentWrap], SCROLL_HIDDEN);
        } else {
          removeClass([contentWrap], SCROLL_HIDDEN);
          var popupEle = this.element.querySelector(".e-toolbar-pop");
          if (!isNullOrUndefined(popupEle)) {
            var popupObj = popupEle.ej2_instances[0];
            if (popupObj && !(!isNullOrUndefined(closestPop) && closestPop.classList.contains("e-hor-nav") && popupEle.classList.contains(POPUP_OPEN))) {
              popupObj.hide();
            }
          }
        }
      }
      if (!isNullOrUndefined(closestEle)) {
        return;
      }
      this.hideHeaderPopup();
    };
    HeaderRenderer2.prototype.hideHeaderPopup = function() {
      if (this.headerPopup) {
        this.headerPopup.hide();
      }
    };
    HeaderRenderer2.prototype.renderHeader = function() {
      this.element = createElement("div", { className: TOOLBAR_CONTAINER });
      var toolbarEle = createElement("div", { className: HEADER_TOOLBAR });
      this.element.appendChild(toolbarEle);
      this.parent.element.insertBefore(this.element, this.parent.element.firstElementChild);
      this.renderToolbar();
    };
    HeaderRenderer2.prototype.renderToolbar = function() {
      var _this = this;
      var items = this.parent.toolbarItems && this.parent.toolbarItems.length > 0 ? this.getToolbarItems() : this.getItems();
      this.parent.trigger(actionBegin, { requestType: "toolbarItemRendering", items }, function(args) {
        _this.toolbarObj = new Toolbar({
          items: args.items,
          overflowMode: "Popup",
          clicked: _this.toolbarClickHandler.bind(_this),
          enableRtl: _this.parent.enableRtl,
          enableHtmlSanitizer: _this.parent.enableHtmlSanitizer,
          locale: _this.parent.locale
        });
        _this.toolbarObj.root = _this.parent.root ? _this.parent.root : _this.parent;
        _this.toolbarObj.appendTo(_this.parent.element.querySelector("." + HEADER_TOOLBAR));
        _this.toolbarObj.element.setAttribute("aria-label", "Scheduler");
        var prevNavEle = _this.toolbarObj.element.querySelector(".e-prev");
        if (prevNavEle) {
          prevNavEle.firstElementChild.setAttribute("title", _this.l10n.getConstant("previous"));
        }
        var nextNavEle = _this.toolbarObj.element.querySelector(".e-next");
        if (nextNavEle) {
          nextNavEle.firstElementChild.setAttribute("title", _this.l10n.getConstant("next"));
        }
        _this.updateAddIcon();
        _this.updateActiveView();
        _this.parent.trigger(actionComplete, { requestType: "toolBarItemRendered", items: _this.toolbarObj.items });
      });
    };
    HeaderRenderer2.prototype.updateItems = function() {
      var _this = this;
      if (this.toolbarObj) {
        var items = this.getItems();
        this.parent.trigger(actionBegin, { requestType: "toolbarItemRendering", items }, function(args) {
          _this.toolbarObj.items = args.items;
          _this.toolbarObj.dataBind();
          _this.parent.trigger(actionComplete, { requestType: "toolBarItemRendered", items: _this.toolbarObj.items });
        });
      }
    };
    HeaderRenderer2.prototype.getPopUpRelativeElement = function() {
      if (this.parent.isAdaptive) {
        return this.toolbarObj.element;
      }
      return this.element.querySelector(".e-date-range");
    };
    HeaderRenderer2.prototype.setDayOfWeek = function(index) {
      if (this.headerCalendar) {
        this.headerCalendar.firstDayOfWeek = index;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.setCalendarDate = function(date) {
      if (this.headerCalendar) {
        this.headerCalendar.value = date;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.setCalendarMinMaxDate = function() {
      if (this.headerCalendar) {
        this.headerCalendar.min = this.parent.minDate;
        this.headerCalendar.max = this.parent.maxDate;
        this.headerCalendar.dataBind();
      }
    };
    HeaderRenderer2.prototype.getCalendarView = function() {
      if (["Month", "MonthAgenda", "TimelineMonth"].indexOf(this.parent.currentView) > -1) {
        return "Year";
      } else if (["Year", "TimelineYear"].indexOf(this.parent.currentView) > -1) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    HeaderRenderer2.prototype.setCalendarView = function() {
      if (this.headerCalendar) {
        var calendarView = this.getCalendarView();
        this.headerCalendar.depth = calendarView;
        this.headerCalendar.start = calendarView;
        this.headerCalendar.refresh();
      }
    };
    HeaderRenderer2.prototype.updateActiveView = function() {
      var selEle = [].slice.call(this.toolbarObj.element.querySelectorAll(".e-views"));
      removeClass(selEle, ["e-active-view"]);
      if (selEle.length > 0 && selEle[this.parent.viewIndex]) {
        addClass([selEle[this.parent.viewIndex]], ["e-active-view"]);
      }
    };
    HeaderRenderer2.prototype.updateDateRange = function(date) {
      var selEle = this.toolbarObj.element.querySelector(".e-date-range");
      if (!selEle) {
        return;
      }
      selEle.firstElementChild.setAttribute("aria-haspopup", "true");
      var textEle = selEle.querySelector(".e-tbar-btn-text");
      if (this.parent.activeViewOptions.dateRangeTemplate) {
        textEle.textContent = "";
        var args = {
          startDate: this.parent.activeView.getStartDate(),
          endDate: this.parent.activeView.getEndDate(),
          currentView: this.parent.currentView
        };
        var viewName = this.parent.activeViewOptions.dateRangeTemplateName;
        var templateId = this.parent.element.id + "_" + viewName + "dateRangeTemplate";
        var dateTemplate = [].slice.call(this.parent.getDateRangeTemplate()(args, this.parent, "dateRangeTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(dateTemplate, textEle);
      } else {
        var text = this.parent.activeView.getDateRangeText(date);
        selEle.firstElementChild.setAttribute("aria-label", text);
        textEle.textContent = text;
      }
      this.refresh();
    };
    HeaderRenderer2.prototype.refresh = function() {
      if (this.toolbarObj) {
        this.toolbarObj.refreshOverflow();
      }
    };
    HeaderRenderer2.prototype.updateAddIcon = function() {
      var addEle = this.toolbarObj.element.querySelector(".e-add");
      if (addEle) {
        if (!this.parent.eventSettings.allowAdding) {
          addClass([addEle], HIDDEN_CLASS);
        } else {
          removeClass([addEle], HIDDEN_CLASS);
        }
      }
    };
    HeaderRenderer2.prototype.getDateRangeText = function() {
      var dateString = this.parent.globalize.formatDate(this.parent.selectedDate, {
        format: "MMMM y",
        calendar: this.parent.getCalendarMode()
      });
      return capitalizeFirstWord(dateString, "single");
    };
    HeaderRenderer2.prototype.getItemModel = function(propItem) {
      var item = {};
      if (propItem.id) {
        item.id = propItem.id;
      }
      if (propItem.text) {
        item.text = propItem.text;
      }
      if (propItem.tooltipText) {
        item.tooltipText = propItem.tooltipText;
      }
      if (propItem.prefixIcon) {
        item.prefixIcon = propItem.prefixIcon;
      }
      if (propItem.cssClass) {
        item.cssClass = propItem.cssClass;
      }
      if (propItem.showTextOn !== "Both") {
        item.showTextOn = propItem.showTextOn;
      }
      if (propItem.template) {
        item.template = propItem.template;
      }
      if (propItem.disabled) {
        item.disabled = propItem.disabled;
      }
      if (propItem.width !== "auto") {
        item.width = propItem.width;
      }
      if (propItem.suffixIcon) {
        item.suffixIcon = propItem.suffixIcon;
      }
      if (propItem.align !== "Left") {
        item.align = propItem.align;
      }
      if (propItem.overflow !== "None") {
        item.overflow = propItem.overflow;
      }
      if (propItem.htmlAttributes) {
        item.htmlAttributes = propItem.htmlAttributes;
      }
      if (propItem.type !== "Button") {
        item.type = propItem.type;
      }
      if (propItem.visible !== true) {
        item.visible = propItem.visible;
      }
      if (propItem.showAlwaysInPopup) {
        item.showAlwaysInPopup = propItem.showAlwaysInPopup;
      }
      if (propItem.tabIndex !== -1) {
        item.tabIndex = propItem.tabIndex;
      }
      return item;
    };
    HeaderRenderer2.prototype.getToolbarItems = function() {
      var items = [];
      var propItem;
      for (var _i = 0, _a = this.parent.toolbarItems; _i < _a.length; _i++) {
        var item = _a[_i];
        propItem = this.getItemModel(item);
        var tbItem = void 0;
        if (item.name) {
          switch (item.name) {
            case "Today":
              tbItem = {
                showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
                prefixIcon: "e-icon-today",
                text: this.l10n.getConstant("today"),
                cssClass: "e-today",
                overflow: "Show"
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Previous":
              tbItem = {
                prefixIcon: "e-icon-prev",
                tooltipText: "Previous",
                overflow: "Show",
                cssClass: "e-prev",
                htmlAttributes: { "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Next":
              tbItem = {
                prefixIcon: "e-icon-next",
                tooltipText: "Next",
                overflow: "Show",
                cssClass: "e-next",
                htmlAttributes: { "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "DateRangeText":
              tbItem = {
                text: this.getDateRangeText(),
                suffixIcon: "e-icon-down-arrow",
                cssClass: "e-date-range",
                overflow: "Show",
                htmlAttributes: { "aria-atomic": "true", "aria-live": "assertive", "role": "navigation" }
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "NewEvent":
              tbItem = {
                showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
                prefixIcon: "e-icon-add",
                text: this.l10n.getConstant("newEvent"),
                cssClass: "e-add",
                overflow: "Show"
              };
              tbItem.align = propItem.align ? propItem.align : item.align;
              items.push(__assign({}, tbItem, propItem));
              break;
            case "Views":
              if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
                for (var _b = 0, _c = this.parent.views; _b < _c.length; _b++) {
                  var view = _c[_b];
                  tbItem = this.getItemObject(view);
                  tbItem.align = propItem.align ? propItem.align : item.align;
                  items.push(__assign({}, tbItem, propItem));
                }
              }
              break;
            case "Custom":
              items.push(item);
              break;
          }
        } else {
          items.push(item);
        }
      }
      return items;
    };
    HeaderRenderer2.prototype.getItems = function() {
      var items = [];
      items.push({
        align: "Left",
        prefixIcon: "e-icon-prev",
        tooltipText: "Previous",
        overflow: "Show",
        cssClass: "e-prev"
      });
      items.push({
        align: "Left",
        prefixIcon: "e-icon-next",
        tooltipText: "Next",
        overflow: "Show",
        cssClass: "e-next"
      });
      items.push({
        align: "Left",
        text: this.getDateRangeText(),
        suffixIcon: "e-icon-down-arrow",
        cssClass: "e-date-range",
        overflow: "Show",
        htmlAttributes: { "aria-atomic": "true", "aria-live": "assertive" }
      });
      if (this.parent.isAdaptive || this.parent.enableAdaptiveUI) {
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-add",
          text: this.l10n.getConstant("newEvent"),
          cssClass: "e-add",
          overflow: "Show"
        });
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-today",
          text: this.l10n.getConstant("today"),
          cssClass: "e-today",
          overflow: "Show"
        });
      } else {
        items.push({
          align: "Right",
          showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,
          prefixIcon: "e-icon-today",
          text: this.l10n.getConstant("today"),
          cssClass: "e-today",
          overflow: "Show"
        });
        if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
          items.push({ align: "Right", type: "Separator", cssClass: "e-schedule-seperator" });
        }
      }
      if (!isNullOrUndefined(this.parent.views) && this.parent.views.length > 1) {
        for (var _i = 0, _a = this.parent.views; _i < _a.length; _i++) {
          var item = _a[_i];
          items.push(this.getItemObject(item));
        }
      }
      return items;
    };
    HeaderRenderer2.prototype.getItemObject = function(item) {
      var viewName;
      var displayName;
      if (typeof item === "string") {
        viewName = item.toLowerCase();
        displayName = null;
      } else {
        viewName = item.option.toLowerCase();
        displayName = item.displayName;
      }
      var view;
      var orientationClass;
      var isItemInsidePopup = this.parent.isAdaptive || this.parent.enableAdaptiveUI;
      switch (viewName) {
        case "day":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-day",
            text: displayName || this.l10n.getConstant("day"),
            cssClass: "e-views e-day"
          };
          break;
        case "week":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-week",
            text: displayName || this.l10n.getConstant("week"),
            cssClass: "e-views e-week"
          };
          break;
        case "workweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-workweek",
            text: displayName || this.l10n.getConstant("workWeek"),
            cssClass: "e-views e-work-week"
          };
          break;
        case "month":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-month",
            text: displayName || this.l10n.getConstant("month"),
            cssClass: "e-views e-month"
          };
          break;
        case "year":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-year",
            text: displayName || this.l10n.getConstant("year"),
            cssClass: "e-views e-year"
          };
          break;
        case "agenda":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-agenda",
            text: displayName || this.l10n.getConstant("agenda"),
            cssClass: "e-views e-agenda"
          };
          break;
        case "monthagenda":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-month-agenda",
            text: displayName || this.l10n.getConstant("monthAgenda"),
            cssClass: "e-views e-month-agenda"
          };
          break;
        case "timelineday":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-day",
            text: displayName || this.l10n.getConstant("timelineDay"),
            cssClass: "e-views e-timeline-day"
          };
          break;
        case "timelineweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-week",
            text: displayName || this.l10n.getConstant("timelineWeek"),
            cssClass: "e-views e-timeline-week"
          };
          break;
        case "timelineworkweek":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-workweek",
            text: displayName || this.l10n.getConstant("timelineWorkWeek"),
            cssClass: "e-views e-timeline-work-week"
          };
          break;
        case "timelinemonth":
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-month",
            text: displayName || this.l10n.getConstant("timelineMonth"),
            cssClass: "e-views e-timeline-month"
          };
          break;
        case "timelineyear":
          orientationClass = item.orientation === "Vertical" ? "vertical" : "horizontal";
          view = {
            align: "Right",
            showAlwaysInPopup: isItemInsidePopup,
            prefixIcon: "e-icon-timeline-year-" + orientationClass,
            text: displayName || this.l10n.getConstant("timelineYear"),
            cssClass: "e-views e-timeline-year"
          };
          break;
      }
      return view;
    };
    HeaderRenderer2.prototype.renderHeaderPopup = function() {
      var headerPopupEle = createElement("div", { className: HEADER_POPUP_CLASS });
      var headerCalendarEle = createElement("div", { className: HEADER_CALENDAR_CLASS });
      headerPopupEle.appendChild(headerCalendarEle);
      this.element.appendChild(headerPopupEle);
      this.headerPopup = new Popup(headerPopupEle, {
        actionOnScroll: "hide",
        targetType: "relative",
        relateTo: this.getPopUpRelativeElement(),
        position: { X: "left", Y: "bottom" },
        enableRtl: this.parent.enableRtl
      });
      var calendarView = this.getCalendarView();
      var isDisplayDate = this.parent.currentView === "Month" && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && !this.hasSelectedDate();
      this.headerCalendar = new Calendar({
        value: isDisplayDate ? this.parent.activeViewOptions.displayDate : this.parent.selectedDate,
        min: this.parent.minDate,
        max: this.parent.maxDate,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        depth: calendarView,
        start: calendarView,
        calendarMode: this.parent.calendarMode,
        change: this.calendarChange.bind(this)
      });
      this.setCalendarTimezone();
      this.headerCalendar.appendTo(headerCalendarEle);
      this.headerPopup.hide();
    };
    HeaderRenderer2.prototype.calendarChange = function(args) {
      if (args.value.getTime() !== this.parent.selectedDate.getTime()) {
        var calendarDate = resetTime(new Date(args.value));
        this.parent.changeDate(calendarDate);
      }
      this.headerPopup.hide();
    };
    HeaderRenderer2.prototype.setCalendarTimezone = function() {
      if (this.headerCalendar) {
        this.headerCalendar.timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      }
    };
    HeaderRenderer2.prototype.calculateViewIndex = function(args) {
      var target = closest(args.originalEvent.target, ".e-views");
      var views = [].slice.call(this.element.querySelectorAll(".e-views"));
      return views.indexOf(target);
    };
    HeaderRenderer2.prototype.toolbarClickHandler = function(args) {
      if (!args.item) {
        return;
      }
      var strClass = args.item.cssClass.replace("e-views ", "");
      var data;
      var isSameTime;
      var currentTime;
      switch (strClass) {
        case "e-date-range":
          if (!this.headerPopup) {
            this.renderHeaderPopup();
          }
          if (this.headerPopup.element.classList.contains(POPUP_OPEN)) {
            this.headerPopup.hide();
          } else {
            this.headerPopup.show();
          }
          break;
        case "e-day":
          this.parent.changeView("Day", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-week":
          this.parent.changeView("Week", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-work-week":
          this.parent.changeView("WorkWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-month":
          this.parent.changeView("Month", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-year":
          this.parent.changeView("Year", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-agenda":
          this.parent.changeView("Agenda", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-month-agenda":
          this.parent.changeView("MonthAgenda", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-day":
          this.parent.changeView("TimelineDay", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-week":
          this.parent.changeView("TimelineWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-work-week":
          this.parent.changeView("TimelineWorkWeek", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-month":
          this.parent.changeView("TimelineMonth", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-timeline-year":
          this.parent.changeView("TimelineYear", args.originalEvent, void 0, this.calculateViewIndex(args));
          break;
        case "e-today":
          currentTime = resetTime(this.parent.getCurrentTime());
          if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda" || !this.parent.isSelectedDate(currentTime) || this.parent.currentView === "Month" && this.parent.activeViewOptions.displayDate && !this.hasSelectedDate() && resetTime(this.parent.activeViewOptions.displayDate) !== currentTime || this.parent.currentView === "Month" && this.parent.activeViewOptions.numberOfWeeks > 0 && !this.hasSelectedDate() && resetTime(firstDateOfMonth(this.parent.selectedDate)) !== currentTime) {
            this.parent.changeDate(currentTime, args.originalEvent);
          }
          break;
        case "e-prev":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), args.originalEvent);
          break;
        case "e-next":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), args.originalEvent);
          break;
        case "e-add":
          isSameTime = this.parent.activeCellsData.startTime.getTime() === this.parent.activeCellsData.endTime.getTime();
          if (this.parent.activeCellsData && !isSameTime) {
            data = this.parent.activeCellsData;
          } else {
            var interval = this.parent.activeViewOptions.timeScale.interval;
            var slotCount = this.parent.activeViewOptions.timeScale.slotCount;
            var msInterval = interval * MS_PER_MINUTE / slotCount;
            var startTime = new Date(this.parent.selectedDate.getTime());
            var currentTime_1 = this.parent.getCurrentTime();
            startTime.setHours(currentTime_1.getHours(), Math.round(startTime.getMinutes() / msInterval) * msInterval, 0);
            var endTime = new Date(new Date(startTime.getTime()).setMilliseconds(startTime.getMilliseconds() + msInterval));
            data = { startTime, endTime, isAllDay: false };
          }
          this.parent.eventWindow.openEditor(extend(data, { cancel: false, event: args.originalEvent }), "Add");
          break;
      }
      if (isNullOrUndefined(this.toolbarObj)) {
        return;
      }
      var toolbarPopUp = this.toolbarObj.element.querySelector(".e-toolbar-pop");
      if (toolbarPopUp && args.item.type !== "Input") {
        toolbarPopUp.ej2_instances[0].hide({ name: "SlideUp", duration: 100 });
      }
    };
    HeaderRenderer2.prototype.hasSelectedDate = function() {
      var selectedTime = resetTime(this.parent.selectedDate).getTime();
      return selectedTime >= this.parent.activeView.getStartDate().getTime() && selectedTime <= this.parent.activeView.getEndDate().getTime();
    };
    HeaderRenderer2.prototype.getHeaderElement = function() {
      return this.toolbarObj.element;
    };
    HeaderRenderer2.prototype.updateHeaderItems = function(classType) {
      var prevNavEle = this.toolbarObj.element.querySelector(".e-prev");
      var nextNavEle = this.toolbarObj.element.querySelector(".e-next");
      var dateRangeEle = this.toolbarObj.element.querySelector(".e-date-range");
      if (prevNavEle) {
        if (classType === "add") {
          addClass([prevNavEle], HIDDEN_CLASS);
        } else {
          removeClass([prevNavEle], HIDDEN_CLASS);
        }
      }
      if (nextNavEle) {
        if (classType === "add") {
          addClass([nextNavEle], HIDDEN_CLASS);
        } else {
          removeClass([nextNavEle], HIDDEN_CLASS);
        }
      }
      if (dateRangeEle) {
        if (classType === "add") {
          addClass([dateRangeEle], TEXT_ELLIPSIS);
        } else {
          removeClass([dateRangeEle], TEXT_ELLIPSIS);
        }
      }
    };
    HeaderRenderer2.prototype.previousNextIconHandler = function() {
      var dates = this.parent.currentView === "Agenda" ? [this.parent.getCurrentViewDates()[0]] : this.parent.getCurrentViewDates();
      var prevNavEle = this.toolbarObj.element.querySelector("." + PREVIOUS_DATE_CLASS);
      var nextNavEle = this.toolbarObj.element.querySelector("." + NEXT_DATE_CLASS);
      var firstDate = new Date(dates[0].getTime());
      var lastDate = new Date(dates[dates.length - 1].getTime());
      if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek") {
        firstDate = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.firstDayOfWeek);
        lastDate = addDays(firstDate, 7 * this.parent.activeViewOptions.interval);
      } else if (this.parent.currentView === "Month") {
        var isCustomMonth = !isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0;
        firstDate = isCustomMonth ? this.parent.activeView.getStartDate() : firstDateOfMonth(this.parent.selectedDate);
        lastDate = isCustomMonth ? this.parent.activeView.getEndDate() : lastDateOfMonth(addMonths(firstDate, this.parent.activeViewOptions.interval - 1));
      }
      if (!isNullOrUndefined(prevNavEle)) {
        this.toolbarObj.enableItems(prevNavEle, firstDate > resetTime(this.parent.minDate));
      }
      if (!isNullOrUndefined(nextNavEle)) {
        this.toolbarObj.enableItems(nextNavEle, lastDate < resetTime(this.parent.maxDate));
      }
      this.setCalendarMinMaxDate();
    };
    HeaderRenderer2.prototype.getModuleName = function() {
      return "headerbar";
    };
    HeaderRenderer2.prototype.destroy = function() {
      if (this.headerPopup && !this.headerPopup.isDestroyed) {
        this.headerPopup.destroy();
        this.headerPopup = null;
      }
      if (this.headerCalendar && !this.headerCalendar.isDestroyed) {
        this.headerCalendar.destroy();
        this.headerCalendar = null;
      }
      if (this.toolbarObj && !this.toolbarObj.isDestroyed) {
        this.toolbarObj.destroy();
        this.removeEventListener();
        remove(this.element);
        this.toolbarObj = null;
      }
      this.element = null;
      this.parent = null;
      this.l10n = null;
    };
    return HeaderRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/scroll.js
var Scroll = (
  /** @class */
  function() {
    function Scroll2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Scroll2.prototype.getModuleName = function() {
      return "scroll";
    };
    Scroll2.prototype.setWidth = function() {
      this.parent.element.style.width = formatUnit(this.parent.width);
    };
    Scroll2.prototype.setHeight = function() {
      this.parent.element.style.height = formatUnit(this.parent.height);
    };
    Scroll2.prototype.addEventListener = function() {
      this.parent.on(contentReady, this.setDimensions, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
    };
    Scroll2.prototype.removeEventListener = function() {
      this.parent.off(contentReady, this.setDimensions);
      this.parent.off(uiUpdate, this.onPropertyChanged);
    };
    Scroll2.prototype.setDimensions = function() {
      this.setWidth();
      this.setHeight();
      var data = { cssProperties: this.parent.getCssProperties(), module: this.getModuleName() };
      this.parent.notify(scrollUiUpdate, data);
    };
    Scroll2.prototype.onPropertyChanged = function() {
      this.setDimensions();
    };
    Scroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return Scroll2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/touch.js
var ScheduleTouch = (
  /** @class */
  function() {
    function ScheduleTouch2(parent) {
      this.parent = parent;
      this.element = this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS);
      this.touchObj = new Touch(this.element, {
        scroll: this.scrollHandler.bind(this),
        swipe: this.swipeHandler.bind(this),
        tapHold: this.tapHoldHandler.bind(this),
        swipeSettings: { swipeThresholdDistance: 1 }
      });
      EventHandler.add(this.element, "transitionend", this.onTransitionEnd, this);
      this.touchLeftDirection = this.parent.enableRtl ? "Right" : "Left";
      this.touchRightDirection = this.parent.enableRtl ? "Left" : "Right";
    }
    ScheduleTouch2.prototype.scrollHandler = function(e) {
      var blockSwipe = !this.parent.isAdaptive && e.originalEvent && e.originalEvent.target && !isNullOrUndefined(closest(e.originalEvent.target, "." + APPOINTMENT_CLASS));
      this.parent.uiStateValues.isTouchScroll = blockSwipe && e.originalEvent.type === "touchmove" && !this.parent.uiStateValues.action;
      if (blockSwipe || this.parent.currentView === "Agenda" || this.parent.uiStateValues.action || !this.parent.allowSwiping || this.parent.uiStateValues.isTapHold) {
        return;
      }
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      if (this.element.classList.contains(TRANSLATE_CLASS)) {
        this.onTransitionEnd();
      }
      if (e.scrollDirection === "Left" || e.scrollDirection === "Right") {
        var args = { requestType: "dateNavigate", cancel: false, event: e.originalEvent };
        this.parent.trigger(actionBegin, args);
        if (args.cancel) {
          return;
        }
        var scrollDiv = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (scrollDiv && scrollDiv.scrollWidth > scrollDiv.clientWidth) {
          return;
        } else {
          this.isScrollTriggered = true;
          e.originalEvent.preventDefault();
          e.originalEvent.stopPropagation();
        }
      }
      if (e.scrollDirection === this.touchLeftDirection) {
        if (!this.nextPanel) {
          this.renderPanel(NEXT_PANEL_CLASS, "next");
          this.nextPanel = {
            element: this.parent.activeView.getPanel(),
            selectedDate: new Date(this.parent.selectedDate.getTime()),
            renderDates: this.parent.activeView.renderDates,
            colLevels: this.parent.activeView.colLevels
          };
          this.setDimensions(this.nextPanel.element);
        }
        var x = this.parent.enableRtl ? e.distanceX : -e.distanceX;
        this.element.style.transform = "translatex(" + (this.getTranslateX(this.element) + x) + "px)";
      } else if (e.scrollDirection === this.touchRightDirection) {
        var prevWidth = 0;
        if (!this.previousPanel) {
          this.renderPanel(PREVIOUS_PANEL_CLASS, "previous");
          this.previousPanel = {
            element: this.parent.activeView.getPanel(),
            selectedDate: new Date(this.parent.selectedDate.getTime()),
            renderDates: this.parent.activeView.renderDates,
            colLevels: this.parent.activeView.colLevels
          };
          this.setDimensions(this.previousPanel.element);
          prevWidth = this.previousPanel.element.offsetWidth;
        }
        var x = this.parent.enableRtl ? prevWidth - e.distanceX : -prevWidth + e.distanceX;
        this.element.style.transform = "translatex(" + (this.getTranslateX(this.element) + x) + "px)";
      }
    };
    ScheduleTouch2.prototype.swipeHandler = function(e) {
      if (!this.isScrollTriggered || this.parent.uiStateValues.action || !this.parent.allowSwiping || this.parent.uiStateValues.isTapHold) {
        return;
      }
      this.isScrollTriggered = false;
      var swipeDate = e.swipeDirection === "Left" ? this.parent.activeView.renderDates[0] : this.parent.activeView.renderDates.slice(-1)[0];
      if (e.swipeDirection === "Left" && swipeDate < this.parent.maxDate || e.swipeDirection === "Right" && swipeDate >= this.parent.minDate) {
        var time = Date.now() - this.timeStampStart;
        var offsetDist = e.distanceX * (Browser.isDevice ? 6 : 1.66);
        if (offsetDist > time || e.distanceX > this.parent.element.offsetWidth / 2) {
          this.swapPanels(e.swipeDirection);
          if (offsetDist > time && e.distanceX > this.parent.element.offsetWidth / 2) {
            this.element.style.transitionDuration = (Browser.isDevice ? e.distanceX : offsetDist) / time / 10 + "s";
          }
          this.confirmSwipe(e.swipeDirection);
        } else {
          this.cancelSwipe();
        }
        var args = { requestType: "dateNavigate", cancel: false, event: e.originalEvent };
        this.parent.trigger(actionComplete, args);
      } else {
        this.cancelSwipe();
      }
      this.timeStampStart = null;
    };
    ScheduleTouch2.prototype.tapHoldHandler = function(e) {
      var target = closest(e.originalEvent.target, "." + APPOINTMENT_CLASS);
      if (!isNullOrUndefined(target)) {
        this.parent.uiStateValues.isTapHold = true;
        if (this.parent.isAdaptive) {
          if (Browser.isIos) {
            EventHandler.add(this.element, "touchend", this.preventEventClick, this);
          }
          this.parent.quickPopup.tapHoldEventPopup(e.originalEvent);
        } else if (["Agenda", "MonthAgenda", "Year"].indexOf(this.parent.currentView) < 0) {
          this.parent.selectedElements = [];
          this.parent.eventBase.getSelectedEventElements(target);
          if (this.parent.resizeModule && closest(e.originalEvent.target, "." + EVENT_RESIZE_CLASS)) {
            this.parent.resizeModule.resizeStart(e.originalEvent);
          }
        }
      }
    };
    ScheduleTouch2.prototype.preventEventClick = function(e) {
      e.preventDefault();
      EventHandler.remove(this.element, "touchend", this.preventEventClick);
    };
    ScheduleTouch2.prototype.renderPanel = function(clsName, nextPrevType) {
      if (!this.currentPanel) {
        this.currentPanel = {
          element: this.parent.activeView.getPanel(),
          selectedDate: new Date(this.parent.selectedDate.getTime()),
          renderDates: this.parent.activeView.renderDates,
          colLevels: this.parent.activeView.colLevels
        };
        this.setDimensions(this.currentPanel.element);
      } else {
        this.parent.setProperties({ selectedDate: this.currentPanel.selectedDate }, true);
      }
      this.parent.setProperties({ selectedDate: this.parent.activeView.getNextPreviousDate(nextPrevType) }, true);
      if (this.parent.headerModule) {
        this.parent.headerModule.setCalendarDate(this.parent.selectedDate);
      }
      this.parent.activeView.getRenderDates();
      this.parent.activeView.renderLayout(clsName);
    };
    ScheduleTouch2.prototype.swapPanels = function(direction) {
      if (direction === this.touchLeftDirection) {
        var temp = this.nextPanel;
        this.nextPanel = this.currentPanel;
        this.currentPanel = temp;
      } else {
        var temp = this.previousPanel;
        this.previousPanel = this.currentPanel;
        this.currentPanel = temp;
      }
    };
    ScheduleTouch2.prototype.confirmSwipe = function(swipeDirection) {
      var _this = this;
      var previousDate = swipeDirection === this.touchLeftDirection ? this.nextPanel.selectedDate : this.previousPanel.selectedDate;
      var args = {
        action: "date",
        cancel: false,
        previousDate,
        currentDate: this.currentPanel.selectedDate
      };
      this.parent.trigger(navigating, args, function(navArgs) {
        if (navArgs.cancel) {
          _this.swapPanels(swipeDirection);
          _this.cancelSwipe();
        } else {
          _this.parent.activeView.setPanel(_this.currentPanel.element);
          _this.parent.setProperties({ selectedDate: _this.currentPanel.selectedDate }, true);
          var translateX = void 0;
          if (_this.parent.enableRtl) {
            translateX = swipeDirection === _this.touchLeftDirection ? _this.previousPanel ? _this.previousPanel.element.offsetLeft : _this.currentPanel.element.offsetWidth : 0;
          } else {
            translateX = swipeDirection === _this.touchLeftDirection ? -_this.currentPanel.element.offsetLeft : 0;
          }
          _this.parent.activeView.renderDates = _this.currentPanel.renderDates;
          _this.parent.activeView.colLevels = _this.currentPanel.colLevels;
          addClass([_this.element], TRANSLATE_CLASS);
          _this.element.style.transform = "translatex(" + translateX + "px)";
          if (_this.parent.headerModule) {
            _this.parent.headerModule.updateDateRange();
          }
          _this.parent.renderTemplates();
          _this.parent.crudModule.refreshDataManager();
        }
      });
    };
    ScheduleTouch2.prototype.cancelSwipe = function() {
      this.parent.activeView.setPanel(this.currentPanel.element);
      this.parent.setProperties({ selectedDate: this.currentPanel.selectedDate }, true);
      this.parent.activeView.renderDates = this.currentPanel.renderDates;
      this.parent.activeView.colLevels = this.currentPanel.colLevels;
      addClass([this.element], TRANSLATE_CLASS);
      var prevWidth = this.previousPanel ? this.previousPanel.element.offsetWidth : 0;
      this.element.style.transform = "translatex(" + (this.parent.enableRtl ? prevWidth : -this.currentPanel.element.offsetLeft) + "px)";
    };
    ScheduleTouch2.prototype.onTransitionEnd = function() {
      removeClass([this.element], TRANSLATE_CLASS);
      this.element.style.transitionDuration = "";
      this.element.style.transform = "";
      if (this.previousPanel) {
        remove(this.previousPanel.element);
        this.previousPanel = null;
        removeClass([this.currentPanel.element], PREVIOUS_PANEL_CLASS);
        addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);
      }
      if (this.nextPanel) {
        remove(this.nextPanel.element);
        this.nextPanel = null;
        removeClass([this.currentPanel.element], NEXT_PANEL_CLASS);
        addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);
      }
      this.currentPanel = null;
      this.parent.activeView.getPanel().style.width = "";
    };
    ScheduleTouch2.prototype.getTranslateX = function(element) {
      var style = window.getComputedStyle(element);
      return new WebKitCSSMatrix(style.webkitTransform).m41;
    };
    ScheduleTouch2.prototype.setDimensions = function(element) {
      element.style.width = this.parent.element.clientWidth + "px";
    };
    ScheduleTouch2.prototype.resetValues = function() {
      this.currentPanel = null;
      this.previousPanel = null;
      this.nextPanel = null;
      this.timeStampStart = null;
      this.element.style.transform = "";
      this.element.style.transitionDuration = "";
      removeChildren(this.element);
      removeClass([this.element], TRANSLATE_CLASS);
    };
    ScheduleTouch2.prototype.destroy = function() {
      if (this.touchObj) {
        this.touchObj.destroy();
        this.touchObj = null;
      }
      EventHandler.remove(this.element, "transitionend", this.onTransitionEnd);
      this.resetValues();
    };
    return ScheduleTouch2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/keyboard.js
var KeyboardInteraction = (
  /** @class */
  function() {
    function KeyboardInteraction2(parent) {
      this.selectedCells = [];
      this.keyConfigs = {
        downArrow: "downarrow",
        upArrow: "uparrow",
        rightArrow: "rightarrow",
        leftArrow: "leftarrow",
        shiftDownArrow: "shift+downarrow",
        shiftUpArrow: "shift+uparrow",
        shiftRightArrow: "shift+rightarrow",
        shiftLeftArrow: "shift+leftarrow",
        ctrlLeftArrow: "ctrl+leftarrow",
        ctrlRightArrow: "ctrl+rightarrow",
        altOne: "alt+1",
        altTwo: "alt+2",
        altThree: "alt+3",
        altFour: "alt+4",
        altFive: "alt+5",
        altSix: "alt+6",
        altSeven: "alt+7",
        altEight: "alt+8",
        altNine: "alt+9",
        enter: "enter",
        escape: "escape",
        delete: "delete",
        backspace: "backspace",
        home: "home",
        pageUp: "pageup",
        pageDown: "pagedown",
        tab: "tab",
        shiftTab: "shift+tab",
        ctrlShiftUpArrow: "ctrl+shift+uparrow",
        ctrlShiftDownArrow: "ctrl+shift+downarrow",
        ctrlShiftLeftArrow: "ctrl+shift+leftarrow",
        ctrlShiftRightArrow: "ctrl+shift+rightarrow"
      };
      this.parent = parent;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.keyboardModule = new KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.addEventListener();
    }
    KeyboardInteraction2.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "downArrow":
        case "shiftDownArrow":
          this.processDown(e, e.shiftKey);
          break;
        case "upArrow":
        case "shiftUpArrow":
          this.processUp(e, e.shiftKey);
          break;
        case "leftArrow":
        case "shiftLeftArrow":
          this.processLeft(e, e.shiftKey);
          break;
        case "rightArrow":
        case "shiftRightArrow":
          this.processRight(e, e.shiftKey);
          break;
        case "ctrlLeftArrow":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
          if (this.parent.headerModule) {
            this.parent.headerModule.element.querySelector(".e-prev button").focus();
          }
          break;
        case "ctrlRightArrow":
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
          if (this.parent.headerModule) {
            this.parent.headerModule.element.querySelector(".e-next button").focus();
          }
          break;
        case "altOne":
        case "altTwo":
        case "altThree":
        case "altFour":
        case "altFive":
        case "altSix":
        case "altSeven":
        case "altEight":
        case "altNine":
          this.processViewNavigation(e);
          break;
        case "enter":
          this.processEnter(e);
          break;
        case "home":
          this.focusFirstCell();
          break;
        case "tab":
        case "shiftTab":
          this.processTab(e, e.shiftKey);
          break;
        case "delete":
        case "backspace":
          this.processDelete(e);
          break;
        case "ctrlShiftUpArrow":
        case "ctrlShiftDownArrow":
        case "ctrlShiftLeftArrow":
        case "ctrlShiftRightArrow":
          this.processCtrlShiftNavigationArrows(e);
          break;
        case "escape":
          this.processEscape(e);
          break;
        case "fTwelve":
          if (this.parent.allowInline && this.parent.inlineModule) {
            e.preventDefault();
            this.processFTwelve(e);
          }
          break;
      }
    };
    KeyboardInteraction2.prototype.processFTwelve = function(e) {
      var target = e.target;
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        this.parent.activeCellsData = this.getSelectedElements(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e });
        var inlineArgs = {
          element: args.element,
          groupIndex: args.groupIndex,
          type: "Cell"
        };
        this.parent.notify(inlineClick, inlineArgs);
      }
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        target.click();
        return;
      }
    };
    KeyboardInteraction2.prototype.addEventListener = function() {
      this.parent.on(cellMouseDown, this.onCellMouseDown, this);
    };
    KeyboardInteraction2.prototype.removeEventListener = function() {
      this.parent.off(cellMouseDown, this.onCellMouseDown);
    };
    KeyboardInteraction2.prototype.onCellMouseDown = function(e) {
      if (e.event.shiftKey) {
        return;
      }
      this.initialTarget = this.getClosestCell(e.event);
      if (this.parent.activeViewOptions.readonly || this.parent.currentView === "MonthAgenda" || !this.initialTarget) {
        return;
      }
      if (e.event.target.classList.contains(WORK_CELLS_CLASS) && e.event.which !== 3) {
        this.parent.removeSelectedClass();
        EventHandler.add(this.parent.getContentTable(), "mousemove", this.onMouseSelection, this);
        EventHandler.add(this.parent.getContentTable(), "mouseup", this.onMoveUp, this);
      }
      if (e.event.target.classList.contains(ALLDAY_CELLS_CLASS) && e.event.which !== 3) {
        this.parent.removeSelectedClass();
        var allDayRow = this.parent.getAllDayRow();
        EventHandler.add(allDayRow, "mousemove", this.onMouseSelection, this);
        EventHandler.add(allDayRow, "mouseup", this.onMoveUp, this);
      }
    };
    KeyboardInteraction2.prototype.onMouseSelection = function(e) {
      var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      addClass(appointments, "e-allow-select");
      var selectionEdges = this.parent.boundaryValidation(e.pageY, e.pageX);
      if (selectionEdges.bottom || selectionEdges.top || selectionEdges.left || selectionEdges.right) {
        var parent_1 = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var yInBounds = parent_1.offsetHeight <= parent_1.scrollHeight && parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;
        var xInBounds = parent_1.offsetWidth <= parent_1.scrollWidth && parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;
        if (yInBounds && (selectionEdges.top || selectionEdges.bottom)) {
          parent_1.scrollTop += selectionEdges.top ? -e.target.offsetHeight : e.target.offsetHeight;
        }
        if (xInBounds && (selectionEdges.left || selectionEdges.right)) {
          parent_1.scrollLeft += selectionEdges.left ? -e.target.offsetWidth : e.target.offsetWidth;
        }
      }
      var target = this.getClosestCell(e);
      if (target) {
        this.selectCells(true, target);
      }
    };
    KeyboardInteraction2.prototype.getClosestCell = function(e) {
      return closest(e.target, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS);
    };
    KeyboardInteraction2.prototype.onMoveUp = function(e) {
      var _this = this;
      var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      removeClass(appointments, "e-allow-select");
      if (e.target.classList.contains(WORK_CELLS_CLASS)) {
        EventHandler.remove(this.parent.getContentTable(), "mousemove", this.onMouseSelection);
        EventHandler.remove(this.parent.getContentTable(), "mouseup", this.onMoveUp);
      }
      if (e.target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        EventHandler.remove(allDayRow, "mousemove", this.onMouseSelection);
        EventHandler.remove(allDayRow, "mouseup", this.onMoveUp);
      }
      if (this.isPreventAction(e)) {
        return;
      }
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      var selectedCells = this.parent.getSelectedCells();
      if (selectedCells.length > 0 && selectedCells.indexOf(target) === -1) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (this.parent.currentView === "TimelineYear" && target.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      this.parent.activeCellsData = this.getSelectedElements(target);
      var cellData = {};
      if (this.parent.eventWindow) {
        this.parent.eventWindow.convertToEventData(this.parent.activeCellsData, cellData);
      }
      var args = {
        data: cellData,
        element: this.parent.activeCellsData.element,
        event: e,
        requestType: cellSelect,
        showQuickPopup: false
      };
      this.parent.trigger(select2, args, function(selectArgs) {
        var isPopupShow = selectArgs.showQuickPopup || _this.parent.quickInfoOnSelectionEnd;
        if (isPopupShow && selectedCells.length > 1) {
          var cellArgs = extend(_this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
          _this.parent.notify(cellClick, cellArgs);
        }
      });
    };
    KeyboardInteraction2.prototype.processEnter = function(e) {
      if (this.parent.activeViewOptions.readonly && !e.target.classList.contains(APPOINTMENT_CLASS) || this.isPreventAction(e)) {
        return;
      }
      if (this.parent.currentView === "TimelineYear" && e.target.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      var target = e.target;
      if (closest(target, "." + POPUP_WRAPPER_CLASS)) {
        if (target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(EVENT_CREATE_CLASS) || target.classList.contains(EDIT_EVENT_CLASS) || target.classList.contains(DELETE_EVENT_CLASS) || target.classList.contains(CLOSE_CLASS)) {
          target.click();
          e.preventDefault();
        } else if (target.classList.contains(SUBJECT_CLASS)) {
          this.parent.element.querySelector("." + EVENT_CREATE_CLASS).click();
          e.preventDefault();
        }
        return;
      }
      if (target.classList.contains(RESOURCE_CELLS_CLASS) && target.classList.contains(RESOURCE_PARENT_CLASS)) {
        var resourceIcon = target.querySelector("." + RESOURCE_TREE_ICON_CLASS);
        if (resourceIcon) {
          resourceIcon.click();
        }
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        this.parent.activeCellsData = this.getSelectedElements(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e });
        if (this.parent.allowInline) {
          var inlineArgs = {
            element: args.element,
            groupIndex: args.groupIndex,
            type: "Cell"
          };
          this.parent.notify(inlineClick, inlineArgs);
        } else {
          if (this.parent.currentView === "Year") {
            target.click();
          } else {
            this.parent.notify(cellClick, args);
          }
        }
        return;
      }
      if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {
        this.parent.inlineModule.inlineCrudActions(target);
        return;
      }
      if (target.classList.contains(APPOINTMENT_CLASS) || target.classList.contains(MORE_EVENT_CLOSE_CLASS) || target.classList.contains(ALLDAY_APPOINTMENT_SECTION_CLASS) || target.classList.contains(MORE_INDICATOR_CLASS)) {
        target.click();
        return;
      }
      if (target.classList.contains(MORE_EVENT_HEADER_DATE_CLASS)) {
        this.parent.setProperties({ selectedDate: this.parent.getDateFromElement(target) }, true);
        this.parent.changeView(this.parent.getNavigateView(), e);
        this.processEscape(e);
        return;
      }
    };
    KeyboardInteraction2.prototype.getSelectedElements = function(target) {
      var cellDetails;
      if (this.selectedCells.length > 1 && target.classList.contains(SELECTED_CELL_CLASS)) {
        var start = this.parent.getCellDetails(this.selectedCells[0]);
        var end = this.parent.getCellDetails(this.selectedCells.slice(-1)[0]);
        start.endTime = end.endTime;
        start.element = target;
        cellDetails = start;
      } else {
        cellDetails = this.parent.getCellDetails(target);
      }
      return cellDetails;
    };
    KeyboardInteraction2.prototype.getCells = function(isInverseTable, start, end) {
      var tableEle = this.parent.getContentTable();
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      var query = isTimelineYear && !isInverseTable ? "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")" : "td";
      var cells = [].slice.call(tableEle.querySelectorAll(query));
      var maxRow = tableEle.rows.length;
      var maxColumn = tableEle.rows[0].cells.length;
      if (start && start.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        cells = [].slice.call(allDayRow.cells);
        maxRow = 1;
        maxColumn = allDayRow.cells.length;
      }
      var startIndex = cells.indexOf(start);
      var endIndex = cells.indexOf(end);
      var inverseCells = [];
      if (isInverseTable) {
        for (var i = 0; i < maxColumn; i++) {
          for (var j = 0; j < maxRow; j++) {
            var cell = cells[maxColumn * j + i];
            if (isTimelineYear && cell.classList.contains(OTHERMONTH_CLASS)) {
              continue;
            }
            inverseCells.push(cell);
          }
        }
        startIndex = inverseCells.indexOf(start);
        endIndex = inverseCells.indexOf(end);
      }
      if (startIndex > endIndex) {
        var temp = startIndex;
        startIndex = endIndex;
        endIndex = temp;
      }
      var sCells = isInverseTable ? inverseCells : cells;
      return sCells.slice(startIndex, endIndex + 1);
    };
    KeyboardInteraction2.prototype.focusFirstCell = function() {
      if (this.parent.currentView === "Agenda") {
        var focusCell = this.parent.getContentTable().querySelector("." + AGENDA_CELLS_CLASS);
        focusCell.setAttribute("tabindex", "0");
        focusCell.focus();
        return;
      }
      this.parent.eventBase.removeSelectedAppointmentClass();
      if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear") {
        var cell = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS + " tr:not(." + HIDDEN_CLASS + ") ." + WORK_CELLS_CLASS + ":not(." + RESOURCE_GROUP_CELLS_CLASS + ")");
        this.selectCells(false, cell);
      } else if (this.parent.currentView.indexOf("Year") > -1) {
        var query = "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + "):not(." + RESOURCE_GROUP_CELLS_CLASS + ")";
        var isVerticalYear = this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.orientation === "Vertical";
        query += isVerticalYear ? '[data-date="' + this.parent.activeView.startDate().getTime() + '"]' : "";
        this.selectCells(false, this.parent.element.querySelector(query));
      } else {
        this.selectCells(false, this.parent.getWorkCellElements()[0]);
      }
    };
    KeyboardInteraction2.prototype.isInverseTableSelect = function() {
      return this.parent.activeView.isInverseTableSelect;
    };
    KeyboardInteraction2.prototype.selectCells = function(isMultiple, targetCell) {
      var _this = this;
      this.parent.removeSelectedClass();
      var target = targetCell instanceof Array ? targetCell.slice(-1)[0] : targetCell;
      if (isMultiple) {
        var initialId_1;
        var views_1 = ["Day", "Week", "WorkWeek", "TimelineDay", "TimelineWeek", "TimelineWorkWeek", "TimelineMonth", "TimelineYear"];
        var args = { element: targetCell, requestType: "mousemove", allowMultipleRow: true };
        this.parent.inlineModule.removeInlineAppointmentElement();
        this.parent.trigger(select2, args, function(selectArgs) {
          var allowMultipleRow = !selectArgs.allowMultipleRow || !_this.parent.allowMultiRowSelection;
          if (allowMultipleRow) {
            var isTimelineYear = _this.parent.currentView === "TimelineYear";
            if (isTimelineYear && _this.parent.activeViewOptions.orientation === "Horizontal" || _this.parent.currentView === "Month") {
              var isGroupYear = isTimelineYear && _this.parent.activeViewOptions.group.resources.length > 0;
              target = isGroupYear ? _this.initialTarget : _this.initialTarget.parentElement.children[target.cellIndex];
            } else if (views_1.indexOf(_this.parent.currentView) > -1) {
              target = target.parentElement.children[_this.initialTarget.cellIndex];
            }
          }
          var selectedCells = _this.getCells(_this.isInverseTableSelect(), _this.initialTarget, target);
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            initialId_1 = _this.initialTarget.getAttribute("data-group-index");
            var resourceSelectedCells = [];
            for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
              var cell = selectedCells_1[_i];
              if (cell.getAttribute("data-group-index") === initialId_1) {
                resourceSelectedCells.push(cell);
              }
            }
            selectedCells = resourceSelectedCells;
          }
          if (!_this.parent.allowMultiCellSelection) {
            selectedCells = [_this.initialTarget];
          }
          _this.selectedCells = selectedCells;
          if (selectedCells.length > 2 && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
            var allDayCells = _this.getAllDayCells(selectedCells);
            if (_this.parent.activeViewOptions.group.resources.length > 0) {
              var resourceAllDayCells = [];
              for (var _a = 0, allDayCells_1 = allDayCells; _a < allDayCells_1.length; _a++) {
                var cell = allDayCells_1[_a];
                if (cell.getAttribute("data-group-index") === initialId_1) {
                  resourceAllDayCells.push(cell);
                }
              }
              allDayCells = resourceAllDayCells;
            }
            selectedCells = selectedCells.concat(allDayCells);
          }
          if (target.getAttribute("data-group-index") !== initialId_1 && _this.parent.activeViewOptions.group.resources.length > 0) {
            target = _this.selectedCells[_this.selectedCells.length - 1];
          }
          _this.parent.addSelectedClass(selectedCells, target);
        });
      } else {
        var args = {
          element: target,
          requestType: cellSelect
        };
        this.parent.trigger(select2, args, function() {
          _this.initialTarget = target;
          _this.selectedCells = [target];
          _this.parent.addSelectedClass([target], target);
        });
      }
    };
    KeyboardInteraction2.prototype.selectAppointment = function(isReverse, target) {
      var appointments = this.getAppointmentElements();
      if (appointments.length < 0) {
        return;
      }
      this.parent.eventBase.removeSelectedAppointmentClass();
      var nextAppEle;
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var targetIndex = appointments.indexOf(target);
        nextAppEle = appointments[isReverse ? targetIndex - 1 : targetIndex + 1];
      } else {
        nextAppEle = isReverse ? appointments[appointments.length - 1] : appointments[0];
      }
      if (nextAppEle) {
        this.parent.eventBase.addSelectedAppointments([nextAppEle], true);
        nextAppEle.focus();
        addClass([nextAppEle], AGENDA_SELECTED_CELL);
      }
    };
    KeyboardInteraction2.prototype.selectAppointmentElementFromWorkCell = function(isReverse, target) {
      var _this = this;
      this.parent.eventBase.removeSelectedAppointmentClass();
      this.parent.removeSelectedClass();
      if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var appointmentElements_1 = this.getUniqueAppointmentElements();
        var filteredElements_1 = [];
        var selectedDate_1 = this.parent.getDateFromElement(target).getTime();
        var selectedSeriesEvents = this.parent.eventsProcessed.filter(function(eventObject) {
          return !isReverse ? eventObject[_this.parent.eventFields.startTime].getTime() >= selectedDate_1 : eventObject[_this.parent.eventFields.startTime].getTime() <= selectedDate_1;
        });
        selectedSeriesEvents.filter(function(event2) {
          appointmentElements_1.filter(function(element) {
            if (JSON.stringify(event2.Guid) === JSON.stringify(element.getAttribute("data-guid"))) {
              filteredElements_1.push(element);
            }
          });
        });
        if (filteredElements_1.length > 0) {
          var selectedElement = isReverse ? filteredElements_1[filteredElements_1.length - 1] : filteredElements_1[0];
          var focusElements = this.getAppointmentElementsByGuid(selectedElement.getAttribute("data-guid"));
          this.parent.eventBase.addSelectedAppointments(focusElements, true);
          focusElements[focusElements.length - 1].focus();
        }
      }
    };
    KeyboardInteraction2.prototype.getAllDayCells = function(cells) {
      var allDayRow = this.parent.getAllDayRow();
      if (!allDayRow) {
        return [];
      }
      var startCell = cells[0];
      var endCell = cells[cells.length - 1];
      var start = this.parent.getCellDetails(startCell);
      var end = this.parent.getCellDetails(endCell);
      if (end.endTime.getTime() - start.startTime.getTime() >= MS_PER_DAY) {
        var allDayCells = [].slice.call(allDayRow.cells);
        return allDayCells.slice(startCell.cellIndex, endCell.cellIndex + 1);
      }
      return [];
    };
    KeyboardInteraction2.prototype.getAppointmentElements = function() {
      return [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
    };
    KeyboardInteraction2.prototype.getAppointmentElementsByGuid = function(guid) {
      return [].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]'));
    };
    KeyboardInteraction2.prototype.getUniqueAppointmentElements = function() {
      var appointments = this.getAppointmentElements();
      var appointmentElements = [];
      appointments.map(function(value) {
        return value.getAttribute("data-guid");
      }).filter(function(value, index, self) {
        if (self.indexOf(value) === index) {
          appointmentElements.push(appointments[parseInt(index.toString(), 10)]);
        }
      });
      return appointmentElements;
    };
    KeyboardInteraction2.prototype.getWorkCellFromAppointmentElement = function(target) {
      var selectedObject = this.parent.eventBase.getEventByGuid(target.getAttribute("data-guid"));
      return this.parent.eventBase.selectWorkCellByTime([selectedObject]);
    };
    KeyboardInteraction2.prototype.processViewNavigation = function(e) {
      var index = parseInt(e.key, 10) - 1;
      if (!isNullOrUndefined(this.parent.views) && index < this.parent.views.length) {
        var view = this.parent.viewCollections[parseInt(index.toString(), 10)].option;
        this.parent.changeView(view, e, void 0, index);
        if (this.parent.headerModule) {
          this.parent.headerModule.element.querySelector(".e-active-view button").focus();
        }
      }
    };
    KeyboardInteraction2.prototype.isCalendarTarget = function(e) {
      var keyTarget = e.currentTarget || e.target;
      if (keyTarget && !isNullOrUndefined(keyTarget.querySelector(".e-header-popup.e-popup-open"))) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.cancelUpDownAction = function(isTimelineYear) {
      var isVerticalYear = isTimelineYear && this.parent.activeViewOptions.orientation === "Vertical";
      var isGroup = this.parent.activeViewOptions.group.resources.length > 0;
      if (isVerticalYear && isGroup || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS)) {
        return true;
      }
      if (this.parent.activeView.isTimelineView() && !isTimelineYear || this.parent.currentView === "MonthAgenda") {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processUp = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (isMultiple && this.cancelUpDownAction(isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedElements = this.parent.getSelectedCells();
      var selectedEventElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (selectedElements.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedElements[selectedElements.length - 1];
      }
      if (selectedEventElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ["Day", "Week", "WorkWeek", "Month"].indexOf(this.parent.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedEventElements[selectedEventElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }
      if (!target) {
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector("." + POPUP_OPEN)) {
        var tableRows = this.parent.getTableRows();
        var curRowIndex = tableRows.indexOf(target.parentElement);
        var targetCell = void 0;
        if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {
          targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, true) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, true);
        }
        if ((curRowIndex > 0 || targetCell) && curRowIndex < tableRows.length) {
          targetCell = targetCell ? targetCell : tableRows[curRowIndex - 1].cells[target.cellIndex];
          if (this.parent.currentView === "Year" && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            if (this.parent.activeView.getStartDate().getTime() < +targetCell.getAttribute("data-date")) {
              targetCell = this.getYearUpDownCell(tableRows, curRowIndex - 1, target.cellIndex, true);
            } else {
              return;
            }
          }
          e.preventDefault();
          this.selectCells(isMultiple, targetCell);
        }
      } else if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        this.selectAppointment(true, target);
      }
    };
    KeyboardInteraction2.prototype.processDown = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (isMultiple && this.cancelUpDownAction(isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedCells = this.parent.getSelectedCells();
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (selectedCells.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (selectedElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ["Day", "Week", "WorkWeek", "Month"].indexOf(this.parent.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }
      var tableRows = this.parent.getTableRows();
      if (!target) {
        return;
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector("." + POPUP_OPEN)) {
        var curRowIndex = tableRows.indexOf(target.parentElement);
        var targetCell = void 0;
        if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {
          targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, false) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, false);
        }
        if (curRowIndex >= 0 && (curRowIndex < tableRows.length - 1 || targetCell)) {
          targetCell = targetCell ? targetCell : tableRows[curRowIndex + 1].cells[target.cellIndex];
          if (this.parent.currentView === "Year" && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            if (this.parent.activeView.getEndDate().getTime() > +targetCell.getAttribute("data-date")) {
              targetCell = this.getYearUpDownCell(tableRows, curRowIndex + 1, target.cellIndex, false);
            } else {
              return;
            }
          }
          e.preventDefault();
          this.selectCells(isMultiple, targetCell);
        }
      } else if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        this.selectAppointment(false, target);
      }
    };
    KeyboardInteraction2.prototype.getYearUpDownCell = function(tableRows, rowIndex, cellIndex, isUp) {
      while (tableRows[parseInt(rowIndex.toString(), 10)] && tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)].classList.contains(OTHERMONTH_CLASS)) {
        rowIndex = rowIndex + (isUp ? -1 : 1);
      }
      return tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)];
    };
    KeyboardInteraction2.prototype.getHorizontalUpDownCell = function(tableRows, target, curRowIndex, isUp) {
      var row = tableRows[curRowIndex + (isUp ? -1 : 1)];
      var cell = row ? row.cells[target.cellIndex] : target;
      if (cell.classList.contains(OTHERMONTH_CLASS)) {
        var workCell = row.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")");
        var date = /* @__PURE__ */ new Date(+workCell.getAttribute("data-date"));
        var query = '[data-date="' + new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime() + '"]';
        cell = cell.cellIndex < workCell.cellIndex ? workCell : row.querySelector(query);
      }
      return cell;
    };
    KeyboardInteraction2.prototype.getVerticalUpDownCell = function(tableRows, target, curRowIndex, isUp) {
      var hasRow = isUp && curRowIndex > 0 || !isUp && curRowIndex < tableRows.length - 1;
      var targetCell = hasRow ? tableRows[curRowIndex + (isUp ? -1 : 1)].cells[target.cellIndex] : void 0;
      if (!targetCell || targetCell.classList.contains(OTHERMONTH_CLASS)) {
        var column = tableRows[parseInt(curRowIndex.toString(), 10)].cells[target.cellIndex - (isUp ? 1 : -1)];
        if (column) {
          var dateAttr = +target.getAttribute("data-date") - (isUp ? MS_PER_DAY : -MS_PER_DAY);
          return this.parent.getContentTable().querySelector("." + WORK_CELLS_CLASS + '[data-date="' + dateAttr + '"]');
        }
        targetCell = target;
      }
      return targetCell;
    };
    KeyboardInteraction2.prototype.processLeftRight = function(target) {
      var tableEle = this.parent.currentView === "Year" ? target.closest("tbody") : this.parent.getContentTable();
      var curRowIndex = target.parentNode.sectionRowIndex;
      var key = {
        element: tableEle,
        rowIndex: curRowIndex,
        columnIndex: target.cellIndex,
        maxIndex: tableEle.rows[parseInt(curRowIndex.toString(), 10)].cells.length
      };
      return key;
    };
    KeyboardInteraction2.prototype.getQuickPopupElement = function() {
      return (this.parent.isAdaptive ? document.body : this.parent.element).querySelector("." + POPUP_WRAPPER_CLASS);
    };
    KeyboardInteraction2.prototype.isCancelLeftRightAction = function(e, isMultiple, isTimelineYear) {
      var prevent = this.parent.currentView === "MonthAgenda" || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS);
      if (this.parent.currentView === "Agenda" || isMultiple && prevent) {
        return true;
      }
      if (this.isPreventAction(e) && isMultiple) {
        return true;
      }
      var moreEventWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();
      if (moreEventWrapper.classList.contains(POPUP_OPEN) || quickPopupWrapper.classList.contains(POPUP_OPEN)) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processRight = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var selectedCells = this.parent.getSelectedCells();
      var targetCell;
      var selectedAppointments = this.parent.eventBase.getSelectedAppointments();
      var target = e.target;
      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      if (selectedAppointments.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedAppointments[selectedAppointments.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!target) {
          return;
        }
      }
      if (target.classList.contains(WORK_CELLS_CLASS) && e.target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);
        var targetDate = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
        var isMonthEnd = this.parent.currentView === "Year" && targetDate.getTime() === lastDateOfMonth(targetDate).getTime();
        if (key.columnIndex >= 0 && key.columnIndex < key.maxIndex - 1 && !isMonthEnd) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex + 1], "right");
          if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            targetCell = this.getTimelineYearTargetCell(key, target, true);
          }
          if (!isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === key.maxIndex - 1 || isMonthEnd) {
          if (!this.isInverseTableSelect() && key.rowIndex < key.element.rows.length - 1 && !isMonthEnd) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex + 1].cells[0], "right");
            var changeTargetCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);
            targetCell = changeTargetCell ? this.getHorizontalLeftRightCell(key, target, true) : targetCell;
            if (!isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {
            if (isMonthEnd && targetDate.getTime() !== this.parent.activeView.getEndDate().getTime()) {
              this.selectCells(isMultiple, this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + (targetDate.getTime() + MS_PER_DAY) + '"]'));
              return;
            }
            var rowIndex = this.isInverseTableSelect() ? key.rowIndex : 0;
            this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
            var tableEle = this.parent.getContentTable();
            var cell = isMonthEnd ? tableEle.rows[parseInt(rowIndex.toString(), 10)].querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")") : tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[0];
            this.selectCells(false, cell);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;
        if (curColIndex >= 0 && curColIndex < maxColIndex - 1) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex + 1]);
        } else if (curColIndex === maxColIndex - 1 && !isMultiple) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("next"), e);
          var allDayRow_1 = this.parent.getAllDayRow();
          this.selectCells(false, allDayRow_1.cells[0]);
        }
      }
    };
    KeyboardInteraction2.prototype.processLeft = function(e, isMultiple) {
      var isTimelineYear = this.parent.currentView === "TimelineYear";
      if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear) || this.isCalendarTarget(e)) {
        return;
      }
      var target = e.target;
      var selectedCells = this.parent.getSelectedCells();
      var targetCell;
      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      if (selectedElements.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!target) {
          return;
        }
      }
      if (e.target.classList.contains(WORK_CELLS_CLASS) && target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);
        var targetDate = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
        var isMonthStart = this.parent.currentView === "Year" && targetDate.getTime() === firstDateOfMonth(targetDate).getTime();
        if (key.columnIndex > 0 && key.columnIndex < key.maxIndex && !isMonthStart) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex - 1], "left");
          if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {
            targetCell = this.getTimelineYearTargetCell(key, target, false);
          }
          if (!isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === 0 || isMonthStart) {
          if (!this.isInverseTableSelect() && key.rowIndex > 0) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex - 1].cells[key.maxIndex - 1], "left");
            var otherMonthCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);
            targetCell = otherMonthCell ? this.getHorizontalLeftRightCell(key, target, false) : targetCell;
            if (!isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {
            if (isMonthStart && targetDate.getTime() !== this.parent.activeView.getStartDate().getTime()) {
              this.selectCells(isMultiple, this.parent.element.querySelector('[data-date="' + (targetDate.getTime() - MS_PER_DAY) + '"]'));
              return;
            }
            this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
            var tableEle = this.parent.getContentTable();
            var rowIndex = this.isInverseTableSelect() ? key.rowIndex : tableEle.rows.length - 1;
            var cell = tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[key.maxIndex - 1];
            if (isMonthStart) {
              var tbody = this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody");
              cell = tbody.item(tbody.length - 1).querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + this.parent.activeView.getEndDate().getTime() + '"]');
            }
            this.selectCells(false, cell);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;
        if (curColIndex > 0 && curColIndex < maxColIndex) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex - 1]);
        } else if (curColIndex === 0 && !isMultiple) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate("previous"), e);
          var allDayRow_2 = this.parent.getAllDayRow();
          this.selectCells(false, allDayRow_2.cells[maxColIndex - 1]);
        }
      }
    };
    KeyboardInteraction2.prototype.getTimelineYearTargetCell = function(key, target, isRight) {
      return this.isInverseTableSelect() ? this.getVerticalLeftRightCell(target, isRight) : this.getHorizontalLeftRightCell(key, target, isRight);
    };
    KeyboardInteraction2.prototype.getHorizontalLeftRightCell = function(key, target, isRight) {
      var row = key.element.rows[target.parentNode.sectionRowIndex + (isRight ? 1 : -1)];
      if (row) {
        var query = isRight ? "." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")" : '[data-date="' + (+target.getAttribute("data-date") - MS_PER_DAY) + '"]';
        return row.querySelector(query);
      }
      return target;
    };
    KeyboardInteraction2.prototype.getVerticalLeftRightCell = function(target, isRight) {
      var date = /* @__PURE__ */ new Date(+target.getAttribute("data-date"));
      var start = new Date(date.getFullYear(), date.getMonth() + (isRight ? 1 : -1), 1);
      var tableEle = this.parent.getContentTable();
      var targetCell = tableEle.querySelector('[data-date="' + start.getTime() + '"]');
      if (targetCell.parentNode.sectionRowIndex > target.parentNode.sectionRowIndex) {
        return targetCell;
      }
      return tableEle.querySelector('[data-date="' + new Date(start.getFullYear(), start.getMonth() + 1, 0).getTime() + '"]');
    };
    KeyboardInteraction2.prototype.calculateNextPrevDate = function(currentCell, target, type) {
      var initialId = this.initialTarget.getAttribute("data-group-index");
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.currentView === "Month") {
        if (currentCell && target && target.getAttribute("data-group-index") !== initialId) {
          var currentDate = this.parent.getDateFromElement(currentCell);
          var nextPrevDate = type === "right" ? new Date(currentDate.setDate(currentDate.getDate() + 1)) : new Date(currentDate.setDate(currentDate.getDate() - 1));
          target = [].slice.call(this.parent.element.querySelectorAll('td[data-date="' + nextPrevDate.getTime().toString() + '"][data-group-index="' + initialId + '"]'))[0];
        }
      }
      return target;
    };
    KeyboardInteraction2.prototype.getFocusableElements = function(container) {
      var queryString2 = 'a[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])';
      return [].slice.call(container.querySelectorAll(queryString2));
    };
    KeyboardInteraction2.prototype.processTabOnPopup = function(e, popupElement) {
      var _this = this;
      var focusableElements = this.getFocusableElements(popupElement);
      focusableElements = focusableElements.filter(function(element) {
        var footerEle = _this.parent.element.querySelector("." + POPUP_FOOTER_CLASS);
        if (footerEle && footerEle.offsetParent) {
          return !(element.classList.contains(EDIT_CLASS) || element.classList.contains(DELETE_CLASS));
        } else {
          return !(element.classList.contains(EDIT_EVENT_CLASS) || element.classList.contains(DELETE_EVENT_CLASS));
        }
      });
      var firstEle = focusableElements[0];
      var lastEle = focusableElements[focusableElements.length - 1];
      if (!isNullOrUndefined(lastEle) && document.activeElement === lastEle && !e.shiftKey) {
        e.preventDefault();
        firstEle.focus();
      }
      if (!isNullOrUndefined(firstEle) && document.activeElement === firstEle && e.shiftKey) {
        e.preventDefault();
        lastEle.focus();
      }
    };
    KeyboardInteraction2.prototype.processTab = function(e, isReverse) {
      var target = e.target;
      if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {
        target = target.closest(".e-appointment");
        this.parent.inlineModule.inlineCrudActions(e.target);
      }
      if (this.parent.currentView === "TimelineYear" && target.classList.contains(OTHERMONTH_CLASS)) {
        if (target.classList.contains(SELECTED_CELL_CLASS)) {
          this.parent.removeSelectedClass();
        }
        return;
      }
      var popupWrapper = closest(target, "." + POPUP_WRAPPER_CLASS + ",." + MORE_POPUP_WRAPPER_CLASS);
      if (popupWrapper && popupWrapper.classList.contains(POPUP_OPEN)) {
        if (popupWrapper.classList.contains(MORE_POPUP_WRAPPER_CLASS)) {
          this.parent.eventBase.removeSelectedAppointmentClass();
        }
        this.processTabOnPopup(e, popupWrapper);
        return;
      }
      if (target.classList.contains(ROOT8)) {
        this.parent.eventBase.removeSelectedAppointmentClass();
        return;
      }
      if (target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        var index = parseInt(target.getAttribute("data-group-index"), 10);
        var appSelector = "." + APPOINTMENT_CLASS + '[data-group-index="' + (isReverse ? index - 1 : index) + '"]';
        var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));
        if (appElements.length > 0) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          var focusAppointment = isReverse ? appElements.slice(-1)[0] : appElements[0];
          this.parent.eventBase.addSelectedAppointments([focusAppointment], true);
          focusAppointment.focus();
          e.preventDefault();
        } else if (index + 1 === this.parent.resourceBase.lastResourceLevel.length) {
          this.parent.element.focus();
          e.preventDefault();
        } else if (this.parent.virtualScrollModule) {
          var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
          var averageRowHeight = Math.round(virtual.offsetHeight / this.parent.resourceBase.expandedResources.length);
          this.parent.element.querySelector(".e-content-wrap").scrollTop = (isReverse ? index - 1 : index + 1) * averageRowHeight;
          this.parent.virtualScrollModule.virtualScrolling();
        } else {
          this.setScrollPosition(index);
        }
        return;
      }
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
        var isTimelineYear = this.parent.currentView === "TimelineYear";
        var isTimeline = this.parent.activeView.isTimelineView() && !isTimelineYear;
        if ((isTimeline || isTimelineYear && this.parent.activeViewOptions.orientation === "Vertical") && this.parent.activeViewOptions.group.resources.length > 0) {
          var index = parseInt(target.getAttribute("data-group-index"), 10);
          appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]'));
          var resCellSelector = "." + RESOURCE_CELLS_CLASS + '[data-group-index="' + (isReverse ? index : index + 1) + '"]';
          var resourceCell = this.parent.element.querySelector(resCellSelector);
          if (resourceCell && (isReverse && target.getAttribute("data-guid") === appElements[0].getAttribute("data-guid") || !isReverse && target.getAttribute("data-guid") === appElements.slice(-1)[0].getAttribute("data-guid"))) {
            this.parent.eventBase.removeSelectedAppointmentClass();
            if (this.parent.virtualScrollModule) {
              resourceCell.focus({ preventScroll: true });
            } else {
              resourceCell.focus();
            }
            if (this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && isNullOrUndefined(this.parent.virtualScrollModule)) {
              this.setScrollPosition(index);
            }
            e.preventDefault();
            return;
          }
        }
        var selectedAppointments = this.parent.eventBase.getSelectedAppointments();
        if (selectedAppointments.length > 0) {
          target = selectedAppointments[selectedAppointments.length - 1];
        }
        this.parent.eventBase.removeSelectedAppointmentClass();
        if (!isReverse && target.getAttribute("data-guid") === appElements[appElements.length - 1].getAttribute("data-guid") || isReverse && target.getAttribute("data-guid") === appElements[0].getAttribute("data-guid")) {
          return;
        }
        if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
          this.selectAppointment(isReverse, target);
          e.preventDefault();
        }
        return;
      }
      var selectedCells = this.parent.getSelectedCells();
      if (selectedCells.length > 0 && !target.classList.contains(APPOINTMENT_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
        this.selectAppointmentElementFromWorkCell(isReverse, target);
        e.preventDefault();
        return;
      }
      if (target && !target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        this.processTabOnResourceCells(target, isReverse);
      }
    };
    KeyboardInteraction2.prototype.processDelete = function(e) {
      var activeEle = document.activeElement;
      if (this.parent.currentView === "MonthAgenda") {
        var selectedEle = this.parent.eventBase.getSelectedEvents().element;
        activeEle = selectedEle && isNullOrUndefined(selectedEle.length) ? selectedEle : selectedEle[0];
      }
      if (activeEle && activeEle.classList.contains(APPOINTMENT_CLASS)) {
        addClass([activeEle], APPOINTMENT_BORDER);
        this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
        if (this.parent.activeViewOptions.readonly || activeEle.classList.contains(READ_ONLY) || !this.parent.eventSettings.allowDeleting) {
          return;
        }
        this.parent.quickPopup.deleteClick(e);
      }
    };
    KeyboardInteraction2.prototype.processCtrlShiftNavigationArrows = function(e) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && document.activeElement.classList.contains(APPOINTMENT_CLASS)) {
        var groupIndex = parseInt(document.activeElement.getAttribute("data-group-index"), 10);
        var index = e.action === "ctrlShiftLeftArrow" || e.action === "ctrlShiftUpArrow" ? groupIndex - 1 : groupIndex + 1;
        index = index < 0 ? 0 : index > this.parent.resourceBase.lastResourceLevel.length ? this.parent.resourceBase.lastResourceLevel.length : index;
        var eventEle = [];
        while (eventEle.length === 0 && index >= 0 && index <= this.parent.resourceBase.lastResourceLevel.length) {
          eventEle = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]'));
          index = e.action === "ctrlShiftLeftArrow" || e.action === "ctrlShiftUpArrow" ? index - 1 : index + 1;
        }
        var nextAppEle = eventEle[0];
        if (nextAppEle) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          this.parent.eventBase.addSelectedAppointments([nextAppEle], true);
          nextAppEle.focus();
        }
      } else if (this.parent.activeViewOptions.group.resources.length > 0 && !document.activeElement.classList.contains(APPOINTMENT_CLASS)) {
        var index = this.parent.resourceBase.renderedResources[0].groupIndex;
        var appSelector = "." + APPOINTMENT_CLASS + '[data-group-index="' + index + '"]';
        var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));
        if (appElements.length > 0) {
          this.parent.eventBase.removeSelectedAppointmentClass();
          var focusAppointment = appElements[0];
          this.parent.eventBase.addSelectedAppointments([focusAppointment], true);
          focusAppointment.focus();
          e.preventDefault();
        }
      }
    };
    KeyboardInteraction2.prototype.processEscape = function(event2) {
      this.parent.quickPopup.onClosePopup(event2);
      this.parent.quickPopup.morePopup.hide();
      if (this.parent.headerModule) {
        this.parent.headerModule.hideHeaderPopup();
      }
      if (this.parent.inlineModule) {
        this.parent.inlineModule.removeInlineAppointmentElement();
      }
    };
    KeyboardInteraction2.prototype.isPreventAction = function(e) {
      var target = closest(e.target, "." + RESOURCE_GROUP_CELLS_CLASS);
      if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {
        return true;
      }
      return false;
    };
    KeyboardInteraction2.prototype.processTabOnResourceCells = function(target, isReverse) {
      var tabElements = [].slice.call(this.parent.element.querySelectorAll('[tabIndex="0"]'));
      var currentTabIndex = tabElements.indexOf(target);
      var nextTabElement = !isReverse ? tabElements[currentTabIndex + 1] : tabElements[currentTabIndex - 1];
      if (nextTabElement && nextTabElement.classList.contains(RESOURCE_CELLS_CLASS)) {
        var groupIndex = parseInt(nextTabElement.getAttribute("data-group-index"), 10);
        if (this.parent.virtualScrollModule) {
          var resColWrap_1 = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
          var resCells = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_CELLS_CLASS));
          resCells.forEach(function(element) {
            if (element.getBoundingClientRect().top < resColWrap_1.getBoundingClientRect().top) {
              element.setAttribute("tabindex", "-1");
            }
          });
        } else {
          this.setScrollPosition(groupIndex);
        }
      }
    };
    KeyboardInteraction2.prototype.setScrollPosition = function(index) {
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
      if (workCell) {
        this.parent.element.querySelector("." + CONTENT_WRAP_CLASS).scrollTop = workCell.offsetTop;
      }
    };
    KeyboardInteraction2.prototype.getModuleName = function() {
      return "keyboard";
    };
    KeyboardInteraction2.prototype.destroy = function() {
      this.removeEventListener();
      this.selectedCells = [];
      this.keyboardModule.destroy();
    };
    return KeyboardInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js
var Data = (
  /** @class */
  function() {
    function Data2(parent, dataSource, query) {
      this.parent = parent;
      this.initDataManager(dataSource, query);
    }
    Data2.prototype.initDataManager = function(dataSource, query) {
      this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);
      this.query = query instanceof Query ? query : new Query();
    };
    Data2.prototype.generateQuery = function(startDate, endDate) {
      var query = this.query.clone();
      if (this.parent && startDate && endDate) {
        if (this.parent.activeViewOptions && this.parent.activeViewOptions.enableLazyLoading && !isNullOrUndefined(this.parent.activeViewOptions.group.resources) && this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase && this.parent.resourceBase.resourceCollection.length > 0 && this.parent.resourceBase.renderedResources.length > 0) {
          var resIdCollection_1 = [];
          this.parent.resourceBase.resourceCollection.forEach(function() {
            return resIdCollection_1.push([]);
          });
          this.parent.resourceBase.renderedResources.forEach(function(resource) {
            resIdCollection_1.forEach(function(resId, index) {
              var groupId = resource.groupOrder[parseInt(index.toString(), 10)];
              if (groupId && resId.indexOf(groupId) < 0) {
                resId.push(groupId);
              }
            });
          });
          this.parent.resourceBase.resourceCollection.forEach(function(resource, index) {
            query.addParams(resource.field, resIdCollection_1[parseInt(index.toString(), 10)].toString());
          });
        }
        if (this.parent.timezone) {
          startDate = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+startDate.getTime()), this.parent.timezone);
          endDate = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+endDate.getTime()), this.parent.timezone);
        }
        if (this.parent.eventSettings.includeFiltersInQuery) {
          var dateQuery = this.getStartEndQuery(startDate, endDate);
          var recurrenceQuery = new Predicate(this.parent.eventFields.recurrenceRule, "notequal", null).and(new Predicate(this.parent.eventFields.recurrenceRule, "notequal", ""));
          return query.where(dateQuery.or(recurrenceQuery));
        }
        query.addParams("StartDate", startDate.toISOString());
        query.addParams("EndDate", endDate.toISOString());
      }
      return query;
    };
    Data2.prototype.getStartEndQuery = function(startDate, endDate) {
      var fieldMapping = this.parent.eventFields;
      var dateQuery = new Predicate(fieldMapping.startTime, "greaterthanorequal", startDate).and(new Predicate(fieldMapping.endTime, "greaterthanorequal", startDate)).and(new Predicate(fieldMapping.startTime, "lessthan", endDate)).or(new Predicate(fieldMapping.startTime, "lessthanorequal", startDate).and(new Predicate(fieldMapping.endTime, "greaterthan", startDate)));
      return dateQuery;
    };
    Data2.prototype.getData = function(query) {
      return this.dataManager.executeQuery(query);
    };
    Data2.prototype.destroy = function() {
      this.dataManager = null;
      this.query = null;
    };
    return Data2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/common/calendar-util.js
var Gregorian = (
  /** @class */
  function() {
    function Gregorian2() {
    }
    Gregorian2.prototype.firstDateOfMonth = function(date) {
      return new Date(date.getFullYear(), date.getMonth());
    };
    Gregorian2.prototype.lastDateOfMonth = function(dt) {
      return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);
    };
    Gregorian2.prototype.isMonthStart = function(date) {
      return date.getDate() === 1;
    };
    Gregorian2.prototype.getLeapYearDaysCount = function() {
      return 366;
    };
    Gregorian2.prototype.getYearDaysCount = function(date, interval) {
      return (date.getFullYear() + interval) % 4 === 0 ? 366 : 365;
    };
    Gregorian2.prototype.getDate = function(date) {
      return date.getDate();
    };
    Gregorian2.prototype.getMonth = function(date) {
      return date.getMonth() + 1;
    };
    Gregorian2.prototype.getFullYear = function(date) {
      return date.getFullYear();
    };
    Gregorian2.prototype.getYearLastDate = function(date, interval) {
      return new Date(date.getFullYear() + interval, 0, 0);
    };
    Gregorian2.prototype.getMonthDaysCount = function(date) {
      return this.lastDateOfMonth(date).getDate();
    };
    Gregorian2.prototype.getMonthStartDate = function(date) {
      return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());
    };
    Gregorian2.prototype.getMonthEndDate = function(date) {
      date.setDate(1);
      return new Date(date.setMonth(date.getMonth() + 1));
    };
    Gregorian2.prototype.getExpectedDays = function(date, days) {
      return days;
    };
    Gregorian2.prototype.setDate = function(dateObj, date) {
      dateObj.setDate(date);
    };
    Gregorian2.prototype.setValidDate = function(date, interval, startDate, monthValue, beginDate) {
      if (!isNullOrUndefined(beginDate)) {
        date.setMonth((beginDate ? monthValue : date.getMonth()) + interval);
      } else {
        date.setMonth(date.getMonth() + interval, startDate);
      }
    };
    Gregorian2.prototype.setMonth = function(date, interval, startDate) {
      date.setDate(1);
      date.setFullYear(date.getFullYear());
      date.setMonth(interval - 1);
      var maxDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
      date.setDate(Math.min(startDate, maxDay));
    };
    Gregorian2.prototype.addYears = function(date, interval) {
      date.setFullYear(date.getFullYear() + interval);
    };
    Gregorian2.prototype.isSameMonth = function(date1, date2) {
      return date1.getMonth() === date2.getMonth();
    };
    Gregorian2.prototype.checkMonth = function(date, months) {
      return months.indexOf(date.getMonth() + 1) === -1;
    };
    Gregorian2.prototype.compareMonth = function(date1, date2) {
      return date1.getMonth() > date2.getMonth();
    };
    Gregorian2.prototype.isSameYear = function(date1, date2) {
      return date1.getFullYear() === date2.getFullYear();
    };
    Gregorian2.prototype.isLastMonth = function(date) {
      return date.getMonth() === 11;
    };
    Gregorian2.prototype.isLeapYear = function(year, interval) {
      return (year + interval) % 4 === 0;
    };
    return Gregorian2;
  }()
);
var Islamic2 = (
  /** @class */
  function() {
    function Islamic3() {
    }
    Islamic3.prototype.firstDateOfMonth = function(date) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, 1);
      return gDate;
    };
    Islamic3.prototype.lastDateOfMonth = function(date) {
      var hDate = this.getHijriDate(date);
      var daysInMonth = this.getDaysInMonth(hDate.month, hDate.year);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, daysInMonth);
      var finalGDate = new Date(gDate.getTime());
      finalGDate = new Date(finalGDate.setDate(finalGDate.getDate() + 1));
      var finalHDate = this.getHijriDate(finalGDate);
      if (hDate.month === finalHDate.month) {
        return finalGDate;
      }
      finalHDate = this.getHijriDate(gDate);
      if (hDate.month === finalHDate.month) {
        return gDate;
      }
      return new Date(gDate.setDate(gDate.getDate() - 1));
    };
    Islamic3.prototype.isMonthStart = function(date) {
      var hijriDate = this.getHijriDate(date);
      return hijriDate.date === 1;
    };
    Islamic3.prototype.getLeapYearDaysCount = function() {
      return 355;
    };
    Islamic3.prototype.getYearDaysCount = function(date, interval) {
      var hDate = this.getHijriDate(date);
      return this.isLeapYear(hDate.year, interval) ? 355 : 354;
    };
    Islamic3.prototype.getDate = function(date) {
      var hijriDate = this.getHijriDate(date);
      return hijriDate.date;
    };
    Islamic3.prototype.getMonth = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.month;
    };
    Islamic3.prototype.getFullYear = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.year;
    };
    Islamic3.prototype.getYearLastDate = function(date, interval) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year + interval, 1, 0);
      return gDate;
    };
    Islamic3.prototype.getMonthDaysCount = function(date) {
      var maxDate = this.lastDateOfMonth(date);
      var hijriDate = this.getHijriDate(maxDate);
      return hijriDate.date;
    };
    Islamic3.prototype.getMonthStartDate = function(date) {
      var firstDate = this.firstDateOfMonth(date);
      return new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), date.getHours(), date.getMinutes());
    };
    Islamic3.prototype.getMonthEndDate = function(date) {
      var lastDate = this.lastDateOfMonth(date);
      lastDate.setDate(lastDate.getDate() + 1);
      return new Date(lastDate.setMonth(lastDate.getMonth()));
    };
    Islamic3.prototype.getExpectedDays = function(date, days) {
      var hDate = this.getHijriDate(date);
      var day = [];
      for (var i = 0; i < days.length; i++) {
        var gDate = HijriParser.toGregorian(hDate.year, hDate.month, days[parseInt(i.toString(), 10)]);
        day.push(gDate.getDate());
      }
      return day;
    };
    Islamic3.prototype.setDate = function(dateObj, date) {
      var hDate = this.getHijriDate(dateObj);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, date);
      this.updateDateObj(dateObj, gDate);
    };
    Islamic3.prototype.setValidDate = function(date, interval, startDate, monthValue, beginDate) {
      var firstDate = !isNullOrUndefined(beginDate) ? this.firstDateOfMonth(beginDate) : date;
      var hDate = this.getHijriDate(firstDate);
      var gDate = HijriParser.toGregorian(hDate.year, hDate.month + interval, startDate);
      this.updateDateObj(date, gDate);
    };
    Islamic3.prototype.setMonth = function(date, interval, startDate) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year, interval, startDate);
      this.updateDateObj(date, gDate);
    };
    Islamic3.prototype.addYears = function(date, interval, monthValue) {
      var hDate = this.getHijriDate(date);
      var gDate = HijriParser.toGregorian(hDate.year + interval, monthValue, 1);
      this.updateDateObj(date, gDate);
    };
    Islamic3.prototype.isSameMonth = function(date1, date2) {
      var currentHijri = this.getHijriDate(date1);
      var tempHijri = this.getHijriDate(date2);
      return currentHijri.month === tempHijri.month;
    };
    Islamic3.prototype.checkMonth = function(date, months) {
      var hDate = this.getHijriDate(date);
      return months.indexOf(hDate.month) === -1;
    };
    Islamic3.prototype.compareMonth = function(date1, date2) {
      var hDate = this.getHijriDate(date1);
      var hDate1 = this.getHijriDate(date2);
      return hDate.month > hDate1.month;
    };
    Islamic3.prototype.isSameYear = function(date1, date2) {
      var hDate = this.getHijriDate(date1);
      var hDate1 = this.getHijriDate(date2);
      return hDate.year === hDate1.year;
    };
    Islamic3.prototype.isLastMonth = function(date) {
      var hDate = this.getHijriDate(date);
      return hDate.month === 12;
    };
    Islamic3.prototype.updateDateObj = function(date, gDate) {
      date.setFullYear(gDate.getFullYear(), gDate.getMonth(), gDate.getDate());
    };
    Islamic3.prototype.isLeapYear = function(year, interval) {
      return (14 + 11 * (year + interval)) % 30 < 11;
    };
    Islamic3.prototype.getDaysInMonth = function(month, year) {
      var length = 0;
      length = 29 + (month + 1) % 2;
      if (month === 11 && this.isLeapYear(year, 0)) {
        length++;
      }
      return length;
    };
    Islamic3.prototype.getHijriDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    return Islamic3;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/timezone/timezone.js
var Timezone = (
  /** @class */
  function() {
    function Timezone2() {
      this.timezoneData = [];
      this.timezoneData = this.getTimezoneData();
    }
    Timezone2.prototype.offset = function(date, timezone) {
      var localOffset = date.getTimezoneOffset();
      try {
        var convertedDate = new Date(date.toLocaleString("en-US", { timeZone: timezone }));
        if (!isNaN(convertedDate.getTime())) {
          return (date.getTime() - convertedDate.getTime()) / 6e4 + localOffset;
        }
        return 0;
      } catch (error) {
        return 0;
      }
    };
    Timezone2.prototype.convert = function(date, fromOffset, toOffset) {
      if (typeof fromOffset === "string") {
        fromOffset = this.offset(date, fromOffset);
      }
      if (typeof toOffset === "string") {
        toOffset = this.offset(date, toOffset);
      }
      var fromLocalOffset = date.getTimezoneOffset();
      date = new Date(date.getTime() + (fromOffset - toOffset) * 6e4);
      var toLocalOffset = date.getTimezoneOffset();
      return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 6e4);
    };
    Timezone2.prototype.add = function(date, timezone) {
      return this.convert(date, date.getTimezoneOffset(), timezone);
    };
    Timezone2.prototype.remove = function(date, timezone) {
      return this.convert(date, timezone, date.getTimezoneOffset());
    };
    Timezone2.prototype.removeLocalOffset = function(date) {
      return new Date(date.getTime() - date.getTimezoneOffset() * 6e4);
    };
    Timezone2.prototype.getLocalTimezoneName = function() {
      return window.Intl ? Intl.DateTimeFormat().resolvedOptions().timeZone || "UTC" : "UTC";
    };
    Timezone2.prototype.getTimezoneData = function() {
      return timezoneData;
    };
    return Timezone2;
  }()
);
var timezoneData = [
  { Value: "Pacific/Niue", Text: "(UTC-11:00) Niue" },
  { Value: "Pacific/Pago_Pago", Text: "(UTC-11:00) Pago Pago" },
  { Value: "Pacific/Honolulu", Text: "(UTC-10:00) Hawaii Time" },
  { Value: "Pacific/Rarotonga", Text: "(UTC-10:00) Rarotonga" },
  { Value: "Pacific/Tahiti", Text: "(UTC-10:00) Tahiti" },
  { Value: "Pacific/Marquesas", Text: "(UTC-09:30) Marquesas" },
  { Value: "America/Anchorage", Text: "(UTC-09:00) Alaska Time" },
  { Value: "Pacific/Gambier", Text: "(UTC-09:00) Gambier" },
  { Value: "America/Los_Angeles", Text: "(UTC-08:00) Pacific Time" },
  { Value: "America/Tijuana", Text: "(UTC-08:00) Pacific Time - Tijuana" },
  { Value: "America/Vancouver", Text: "(UTC-08:00) Pacific Time - Vancouver" },
  { Value: "America/Whitehorse", Text: "(UTC-08:00) Pacific Time - Whitehorse" },
  { Value: "Pacific/Pitcairn", Text: "(UTC-08:00) Pitcairn" },
  { Value: "America/Denver", Text: "(UTC-07:00) Mountain Time" },
  { Value: "America/Phoenix", Text: "(UTC-07:00) Mountain Time - Arizona" },
  { Value: "America/Mazatlan", Text: "(UTC-07:00) Mountain Time - Chihuahua, Mazatlan" },
  { Value: "America/Dawson_Creek", Text: "(UTC-07:00) Mountain Time - Dawson Creek" },
  { Value: "America/Edmonton", Text: "(UTC-07:00) Mountain Time - Edmonton" },
  { Value: "America/Hermosillo", Text: "(UTC-07:00) Mountain Time - Hermosillo" },
  { Value: "America/Yellowknife", Text: "(UTC-07:00) Mountain Time - Yellowknife" },
  { Value: "America/Belize", Text: "(UTC-06:00) Belize" },
  { Value: "America/Chicago", Text: "(UTC-06:00) Central Time" },
  { Value: "America/Mexico_City", Text: "(UTC-06:00) Central Time - Mexico City" },
  { Value: "America/Regina", Text: "(UTC-06:00) Central Time - Regina" },
  { Value: "America/Tegucigalpa", Text: "(UTC-06:00) Central Time - Tegucigalpa" },
  { Value: "America/Winnipeg", Text: "(UTC-06:00) Central Time - Winnipeg" },
  { Value: "America/Costa_Rica", Text: "(UTC-06:00) Costa Rica" },
  { Value: "America/El_Salvador", Text: "(UTC-06:00) El Salvador" },
  { Value: "Pacific/Galapagos", Text: "(UTC-06:00) Galapagos" },
  { Value: "America/Guatemala", Text: "(UTC-06:00) Guatemala" },
  { Value: "America/Managua", Text: "(UTC-06:00) Managua" },
  { Value: "America/Cancun", Text: "(UTC-05:00) America Cancun" },
  { Value: "America/Bogota", Text: "(UTC-05:00) Bogota" },
  { Value: "Pacific/Easter", Text: "(UTC-05:00) Easter Island" },
  { Value: "America/New_York", Text: "(UTC-05:00) Eastern Time" },
  { Value: "America/Iqaluit", Text: "(UTC-05:00) Eastern Time - Iqaluit" },
  { Value: "America/Toronto", Text: "(UTC-05:00) Eastern Time - Toronto" },
  { Value: "America/Guayaquil", Text: "(UTC-05:00) Guayaquil" },
  { Value: "America/Havana", Text: "(UTC-05:00) Havana" },
  { Value: "America/Jamaica", Text: "(UTC-05:00) Jamaica" },
  { Value: "America/Lima", Text: "(UTC-05:00) Lima" },
  { Value: "America/Nassau", Text: "(UTC-05:00) Nassau" },
  { Value: "America/Panama", Text: "(UTC-05:00) Panama" },
  { Value: "America/Port-au-Prince", Text: "(UTC-05:00) Port-au-Prince" },
  { Value: "America/Rio_Branco", Text: "(UTC-05:00) Rio Branco" },
  { Value: "America/Halifax", Text: "(UTC-04:00) Atlantic Time - Halifax" },
  { Value: "America/Barbados", Text: "(UTC-04:00) Barbados" },
  { Value: "Atlantic/Bermuda", Text: "(UTC-04:00) Bermuda" },
  { Value: "America/Boa_Vista", Text: "(UTC-04:00) Boa Vista" },
  { Value: "America/Caracas", Text: "(UTC-04:00) Caracas" },
  { Value: "America/Curacao", Text: "(UTC-04:00) Curacao" },
  { Value: "America/Grand_Turk", Text: "(UTC-04:00) Grand Turk" },
  { Value: "America/Guyana", Text: "(UTC-04:00) Guyana" },
  { Value: "America/La_Paz", Text: "(UTC-04:00) La Paz" },
  { Value: "America/Manaus", Text: "(UTC-04:00) Manaus" },
  { Value: "America/Martinique", Text: "(UTC-04:00) Martinique" },
  { Value: "America/Port_of_Spain", Text: "(UTC-04:00) Port of Spain" },
  { Value: "America/Porto_Velho", Text: "(UTC-04:00) Porto Velho" },
  { Value: "America/Puerto_Rico", Text: "(UTC-04:00) Puerto Rico" },
  { Value: "America/Santo_Domingo", Text: "(UTC-04:00) Santo Domingo" },
  { Value: "America/Thule", Text: "(UTC-04:00) Thule" },
  { Value: "America/St_Johns", Text: "(UTC-03:30) Newfoundland Time - St. Johns" },
  { Value: "America/Araguaina", Text: "(UTC-03:00) Araguaina" },
  { Value: "America/Asuncion", Text: "(UTC-03:00) Asuncion" },
  { Value: "America/Belem", Text: "(UTC-03:00) Belem" },
  { Value: "America/Argentina/Buenos_Aires", Text: "(UTC-03:00) Buenos Aires" },
  { Value: "America/Campo_Grande", Text: "(UTC-03:00) Campo Grande" },
  { Value: "America/Cayenne", Text: "(UTC-03:00) Cayenne" },
  { Value: "America/Cuiaba", Text: "(UTC-03:00) Cuiaba" },
  { Value: "America/Fortaleza", Text: "(UTC-03:00) Fortaleza" },
  { Value: "America/Godthab", Text: "(UTC-03:00) Godthab" },
  { Value: "America/Maceio", Text: "(UTC-03:00) Maceio" },
  { Value: "America/Miquelon", Text: "(UTC-03:00) Miquelon" },
  { Value: "America/Montevideo", Text: "(UTC-03:00) Montevideo" },
  { Value: "Antarctica/Palmer", Text: "(UTC-03:00) Palmer" },
  { Value: "America/Paramaribo", Text: "(UTC-03:00) Paramaribo" },
  { Value: "America/Punta_Arenas", Text: "(UTC-03:00) Punta Arenas" },
  { Value: "America/Recife", Text: "(UTC-03:00) Recife" },
  { Value: "Antarctica/Rothera", Text: "(UTC-03:00) Rothera" },
  { Value: "America/Bahia", Text: "(UTC-03:00) Salvador" },
  { Value: "America/Santiago", Text: "(UTC-03:00) Santiago" },
  { Value: "Atlantic/Stanley", Text: "(UTC-03:00) Stanley" },
  { Value: "America/Noronha", Text: "(UTC-02:00) Noronha" },
  { Value: "America/Sao_Paulo", Text: "(UTC-02:00) Sao Paulo" },
  { Value: "Atlantic/South_Georgia", Text: "(UTC-02:00) South Georgia" },
  { Value: "Atlantic/Azores", Text: "(UTC-01:00) Azores" },
  { Value: "Atlantic/Cape_Verde", Text: "(UTC-01:00) Cape Verde" },
  { Value: "America/Scoresbysund", Text: "(UTC-01:00) Scoresbysund" },
  { Value: "Africa/Abidjan", Text: "(UTC+00:00) Abidjan" },
  { Value: "Africa/Accra", Text: "(UTC+00:00) Accra" },
  { Value: "Africa/Bissau", Text: "(UTC+00:00) Bissau" },
  { Value: "Atlantic/Canary", Text: "(UTC+00:00) Canary Islands" },
  { Value: "Africa/Casablanca", Text: "(UTC+00:00) Casablanca" },
  { Value: "America/Danmarkshavn", Text: "(UTC+00:00) Danmarkshavn" },
  { Value: "Europe/Dublin", Text: "(UTC+00:00) Dublin" },
  { Value: "Africa/El_Aaiun", Text: "(UTC+00:00) El Aaiun" },
  { Value: "Atlantic/Faroe", Text: "(UTC+00:00) Faeroe" },
  { Value: "Etc/UTC", Text: "(UTC+00:00) UTC (no daylight saving)" },
  { Value: "Europe/Lisbon", Text: "(UTC+00:00) Lisbon" },
  { Value: "Europe/London", Text: "(UTC+00:00) London" },
  { Value: "Africa/Monrovia", Text: "(UTC+00:00) Monrovia" },
  { Value: "Atlantic/Reykjavik", Text: "(UTC+00:00) Reykjavik" },
  { Value: "UTC", Text: "UTC" },
  { Value: "Africa/Algiers", Text: "(UTC+01:00) Algiers" },
  { Value: "Europe/Amsterdam", Text: "(UTC+01:00) Amsterdam" },
  { Value: "Europe/Andorra", Text: "(UTC+01:00) Andorra" },
  { Value: "Europe/Berlin", Text: "(UTC+01:00) Berlin" },
  { Value: "Europe/Brussels", Text: "(UTC+01:00) Brussels" },
  { Value: "Europe/Budapest", Text: "(UTC+01:00) Budapest" },
  { Value: "Europe/Belgrade", Text: "(UTC+01:00) Central European Time - Belgrade" },
  { Value: "Europe/Prague", Text: "(UTC+01:00) Central European Time - Prague" },
  { Value: "Africa/Ceuta", Text: "(UTC+01:00) Ceuta" },
  { Value: "Europe/Copenhagen", Text: "(UTC+01:00) Copenhagen" },
  { Value: "Europe/Gibraltar", Text: "(UTC+01:00) Gibraltar" },
  { Value: "Africa/Lagos", Text: "(UTC+01:00) Lagos" },
  { Value: "Europe/Luxembourg", Text: "(UTC+01:00) Luxembourg" },
  { Value: "Europe/Madrid", Text: "(UTC+01:00) Madrid" },
  { Value: "Europe/Malta", Text: "(UTC+01:00) Malta" },
  { Value: "Europe/Monaco", Text: "(UTC+01:00) Monaco" },
  { Value: "Africa/Ndjamena", Text: "(UTC+01:00) Ndjamena" },
  { Value: "Europe/Oslo", Text: "(UTC+01:00) Oslo" },
  { Value: "Europe/Paris", Text: "(UTC+01:00) Paris" },
  { Value: "Europe/Rome", Text: "(UTC+01:00) Rome" },
  { Value: "Europe/Stockholm", Text: "(UTC+01:00) Stockholm" },
  { Value: "Europe/Tirane", Text: "(UTC+01:00) Tirane" },
  { Value: "Africa/Tunis", Text: "(UTC+01:00) Tunis" },
  { Value: "Europe/Vienna", Text: "(UTC+01:00) Vienna" },
  { Value: "Europe/Warsaw", Text: "(UTC+01:00) Warsaw" },
  { Value: "Europe/Zurich", Text: "(UTC+01:00) Zurich" },
  { Value: "Asia/Amman", Text: "(UTC+02:00) Amman" },
  { Value: "Europe/Athens", Text: "(UTC+02:00) Athens" },
  { Value: "Asia/Beirut", Text: "(UTC+02:00) Beirut" },
  { Value: "Europe/Bucharest", Text: "(UTC+02:00) Bucharest" },
  { Value: "Africa/Cairo", Text: "(UTC+02:00) Cairo" },
  { Value: "Europe/Chisinau", Text: "(UTC+02:00) Chisinau" },
  { Value: "Asia/Damascus", Text: "(UTC+02:00) Damascus" },
  { Value: "Asia/Gaza", Text: "(UTC+02:00) Gaza" },
  { Value: "Europe/Helsinki", Text: "(UTC+02:00) Helsinki" },
  { Value: "Asia/Jerusalem", Text: "(UTC+02:00) Jerusalem" },
  { Value: "Africa/Johannesburg", Text: "(UTC+02:00) Johannesburg" },
  { Value: "Africa/Khartoum", Text: "(UTC+02:00) Khartoum" },
  { Value: "Europe/Kiev", Text: "(UTC+02:00) Kiev" },
  { Value: "Africa/Maputo", Text: "(UTC+02:00) Maputo" },
  { Value: "Europe/Kaliningrad", Text: "(UTC+02:00) Moscow-01 - Kaliningrad" },
  { Value: "Asia/Nicosia", Text: "(UTC+02:00) Nicosia" },
  { Value: "Europe/Riga", Text: "(UTC+02:00) Riga" },
  { Value: "Europe/Sofia", Text: "(UTC+02:00) Sofia" },
  { Value: "Europe/Tallinn", Text: "(UTC+02:00) Tallinn" },
  { Value: "Africa/Tripoli", Text: "(UTC+02:00) Tripoli" },
  { Value: "Europe/Vilnius", Text: "(UTC+02:00) Vilnius" },
  { Value: "Africa/Windhoek", Text: "(UTC+02:00) Windhoek" },
  { Value: "Asia/Baghdad", Text: "(UTC+03:00) Baghdad" },
  { Value: "Europe/Istanbul", Text: "(UTC+03:00) Istanbul" },
  { Value: "Europe/Minsk", Text: "(UTC+03:00) Minsk" },
  { Value: "Europe/Moscow", Text: "(UTC+03:00) Moscow+00 - Moscow" },
  { Value: "Africa/Nairobi", Text: "(UTC+03:00) Nairobi" },
  { Value: "Asia/Qatar", Text: "(UTC+03:00) Qatar" },
  { Value: "Asia/Riyadh", Text: "(UTC+03:00) Riyadh" },
  { Value: "Antarctica/Syowa", Text: "(UTC+03:00) Syowa" },
  { Value: "Asia/Tehran", Text: "(UTC+03:30) Tehran" },
  { Value: "Asia/Baku", Text: "(UTC+04:00) Baku" },
  { Value: "Asia/Dubai", Text: "(UTC+04:00) Dubai" },
  { Value: "Indian/Mahe", Text: "(UTC+04:00) Mahe" },
  { Value: "Indian/Mauritius", Text: "(UTC+04:00) Mauritius" },
  { Value: "Europe/Samara", Text: "(UTC+04:00) Moscow+01 - Samara" },
  { Value: "Indian/Reunion", Text: "(UTC+04:00) Reunion" },
  { Value: "Asia/Tbilisi", Text: "(UTC+04:00) Tbilisi" },
  { Value: "Asia/Yerevan", Text: "(UTC+04:00) Yerevan" },
  { Value: "Asia/Kabul", Text: "(UTC+04:30) Kabul" },
  { Value: "Asia/Aqtau", Text: "(UTC+05:00) Aqtau" },
  { Value: "Asia/Aqtobe", Text: "(UTC+05:00) Aqtobe" },
  { Value: "Asia/Ashgabat", Text: "(UTC+05:00) Ashgabat" },
  { Value: "Asia/Dushanbe", Text: "(UTC+05:00) Dushanbe" },
  { Value: "Asia/Karachi", Text: "(UTC+05:00) Karachi" },
  { Value: "Indian/Kerguelen", Text: "(UTC+05:00) Kerguelen" },
  { Value: "Indian/Maldives", Text: "(UTC+05:00) Maldives" },
  { Value: "Antarctica/Mawson", Text: "(UTC+05:00) Mawson" },
  { Value: "Asia/Yekaterinburg", Text: "(UTC+05:00) Moscow+02 - Yekaterinburg" },
  { Value: "Asia/Tashkent", Text: "(UTC+05:00) Tashkent" },
  { Value: "Asia/Colombo", Text: "(UTC+05:30) Colombo" },
  { Value: "Asia/Kolkata", Text: "(UTC+05:30) India Standard Time" },
  { Value: "Asia/Katmandu", Text: "(UTC+05:45) Katmandu" },
  { Value: "Asia/Almaty", Text: "(UTC+06:00) Almaty" },
  { Value: "Asia/Bishkek", Text: "(UTC+06:00) Bishkek" },
  { Value: "Indian/Chagos", Text: "(UTC+06:00) Chagos" },
  { Value: "Asia/Dhaka", Text: "(UTC+06:00) Dhaka" },
  { Value: "Asia/Omsk", Text: "(UTC+06:00) Moscow+03 - Omsk" },
  { Value: "Asia/Thimphu", Text: "(UTC+06:00) Thimphu" },
  { Value: "Antarctica/Vostok", Text: "(UTC+06:00) Vostok" },
  { Value: "Indian/Cocos", Text: "(UTC+06:30) Cocos" },
  { Value: "Asia/Yangon", Text: "(UTC+06:30) Rangoon" },
  { Value: "Asia/Bangkok", Text: "(UTC+07:00) Bangkok" },
  { Value: "Indian/Christmas", Text: "(UTC+07:00) Christmas" },
  { Value: "Antarctica/Davis", Text: "(UTC+07:00) Davis" },
  { Value: "Asia/Saigon", Text: "(UTC+07:00) Hanoi" },
  { Value: "Asia/Hovd", Text: "(UTC+07:00) Hovd" },
  { Value: "Asia/Jakarta", Text: "(UTC+07:00) Jakarta" },
  { Value: "Asia/Krasnoyarsk", Text: "(UTC+07:00) Moscow+04 - Krasnoyarsk" },
  { Value: "Asia/Brunei", Text: "(UTC+08:00) Brunei" },
  { Value: "Asia/Shanghai", Text: "(UTC+08:00) China Time - Beijing" },
  { Value: "Asia/Choibalsan", Text: "(UTC+08:00) Choibalsan" },
  { Value: "Asia/Hong_Kong", Text: "(UTC+08:00) Hong Kong" },
  { Value: "Asia/Kuala_Lumpur", Text: "(UTC+08:00) Kuala Lumpur" },
  { Value: "Asia/Macau", Text: "(UTC+08:00) Macau" },
  { Value: "Asia/Makassar", Text: "(UTC+08:00) Makassar" },
  { Value: "Asia/Manila", Text: "(UTC+08:00) Manila" },
  { Value: "Asia/Irkutsk", Text: "(UTC+08:00) Moscow+05 - Irkutsk" },
  { Value: "Asia/Singapore", Text: "(UTC+08:00) Singapore" },
  { Value: "Asia/Taipei", Text: "(UTC+08:00) Taipei" },
  { Value: "Asia/Ulaanbaatar", Text: "(UTC+08:00) Ulaanbaatar" },
  { Value: "Australia/Perth", Text: "(UTC+08:00) Western Time - Perth" },
  { Value: "Asia/Pyongyang", Text: "(UTC+08:30) Pyongyang" },
  { Value: "Asia/Dili", Text: "(UTC+09:00) Dili" },
  { Value: "Asia/Jayapura", Text: "(UTC+09:00) Jayapura" },
  { Value: "Asia/Yakutsk", Text: "(UTC+09:00) Moscow+06 - Yakutsk" },
  { Value: "Pacific/Palau", Text: "(UTC+09:00) Palau" },
  { Value: "Asia/Seoul", Text: "(UTC+09:00) Seoul" },
  { Value: "Asia/Tokyo", Text: "(UTC+09:00) Tokyo" },
  { Value: "Australia/Darwin", Text: "(UTC+09:30) Central Time - Darwin" },
  { Value: "Antarctica/DumontDUrville", Text: '(UTC+10:00) Dumont D"Urville' },
  { Value: "Australia/Brisbane", Text: "(UTC+10:00) Eastern Time - Brisbane" },
  { Value: "Pacific/Guam", Text: "(UTC+10:00) Guam" },
  { Value: "Asia/Vladivostok", Text: "(UTC+10:00) Moscow+07 - Vladivostok" },
  { Value: "Pacific/Port_Moresby", Text: "(UTC+10:00) Port Moresby" },
  { Value: "Pacific / Chuuk", Text: "(UTC+10:00) Truk" },
  { Value: "Australia/Adelaide", Text: "(UTC+10:30) Central Time - Adelaide" },
  { Value: "Antarctica/Casey", Text: "(UTC+11:00) Casey" },
  { Value: "Australia/Hobart", Text: "(UTC+11:00) Eastern Time - Hobart" },
  { Value: "Australia/Sydney", Text: "(UTC+11:00) Eastern Time - Melbourne, Sydney" },
  { Value: "Pacific/Efate", Text: "(UTC+11:00) Efate" },
  { Value: "Pacific/Guadalcanal", Text: "(UTC+11:00) Guadalcanal" },
  { Value: "Pacific/Kosrae", Text: "(UTC+11:00) Kosrae" },
  { Value: "Asia/Magadan", Text: "(UTC+11:00) Moscow+08 - Magadan" },
  { Value: "Pacific / Norfolk", Text: "(UTC+11:00) Norfolk" },
  { Value: "Pacific/Noumea", Text: "(UTC+11:00) Noumea" },
  { Value: "Pacific/Pohnpei", Text: "(UTC+11:00) Ponape" },
  { Value: "Pacific/Funafuti", Text: "(UTC+12:00) Funafuti" },
  { Value: "Pacific/Kwajalein", Text: "(UTC+12:00) Kwajalein" },
  { Value: "Pacific/Majuro", Text: "(UTC+12:00) Majuro" },
  { Value: "Asia/Kamchatka", Text: "(UTC+12:00) Moscow+09 - Petropavlovsk - Kamchatskiy" },
  { Value: "Pacific / Nauru", Text: "(UTC+12:00) Nauru" },
  { Value: "Pacific/Tarawa", Text: "(UTC+12:00) Tarawa" },
  { Value: "Pacific/Wake", Text: "(UTC+12:00) Wake" },
  { Value: "Pacific/Wallis", Text: "(UTC+12:00) Wallis" },
  { Value: "Pacific/Auckland", Text: "(UTC+13:00) Auckland" },
  { Value: "Pacific/Enderbury", Text: "(UTC+13:00) Enderbury" },
  { Value: "Pacific/Fakaofo", Text: "(UTC+13:00) Fakaofo" },
  { Value: "Pacific/Fiji", Text: "(UTC+13:00) Fiji" },
  { Value: "Pacific/Tongatapu", Text: "(UTC+13:00) Tongatapu" },
  { Value: "Pacific/Apia", Text: "(UTC+14:00) Apia" },
  { Value: "Pacific/Kiritimati", Text: "(UTC+14:00) Kiritimati" }
];

// node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js
function generateSummary(rule, localeObject, locale, calendarType) {
  if (calendarType === void 0) {
    calendarType = "Gregorian";
  }
  var ruleObject = extractObjectFromRule(rule);
  var summary = localeObject.getConstant(EVERY) + " ";
  var cldrObj;
  var cldrObj1;
  var calendarMode = calendarType.toLowerCase();
  if (locale === "en" || locale === "en-US") {
    var nameSpace1 = "months.stand-alone.abbreviated";
    var nameSpace = "days.stand-alone.abbreviated";
    cldrObj1 = getValue(nameSpace1, getDefaultDateObject(calendarMode));
    cldrObj = getValue(nameSpace, getDefaultDateObject(calendarMode));
  } else {
    var nameSpace1 = "main." + locale + ".dates.calendars." + calendarMode + ".months.stand-alone.abbreviated";
    var nameSpace = "main." + locale + ".dates.calendars." + calendarMode + ".days.stand-alone.abbreviated";
    cldrObj1 = getValue(nameSpace1, cldrData);
    cldrObj = getValue(nameSpace, cldrData);
  }
  if (ruleObject.interval > 1) {
    summary += ruleObject.interval + " ";
  }
  switch (ruleObject.freq) {
    case "DAILY":
      summary += localeObject.getConstant(DAYS);
      break;
    case "WEEKLY":
      summary += localeObject.getConstant(WEEKS) + " " + localeObject.getConstant(ON) + " ";
      ruleObject.day.forEach(function(day, index) {
        summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT["" + day], cldrObj), "single");
        summary += ruleObject.day.length - 1 === index ? "" : ", ";
      });
      break;
    case "MONTHLY":
      summary += localeObject.getConstant(MONTHS) + " " + localeObject.getConstant(ON) + " ";
      summary += getMonthSummary(ruleObject, cldrObj, localeObject);
      break;
    case "YEARLY":
      summary += localeObject.getConstant(YEARS) + " " + localeObject.getConstant(ON) + " ";
      summary += capitalizeFirstWord(getValue(ruleObject.month[0].toString(), cldrObj1), "single") + " ";
      summary += getMonthSummary(ruleObject, cldrObj, localeObject);
      break;
  }
  if (ruleObject.count) {
    summary += ", " + ruleObject.count + " " + localeObject.getConstant(TIMES);
  } else if (ruleObject.until) {
    var tempDate = ruleObject.until;
    summary += ", " + localeObject.getConstant(UNTIL) + " " + tempDate.getDate() + " " + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), "single") + " " + tempDate.getFullYear();
  }
  return summary;
}
function getMonthSummary(ruleObject, cldrObj, localeObj) {
  var summary = "";
  if (ruleObject.monthDay.length) {
    summary += ruleObject.monthDay[0];
  } else if (ruleObject.day) {
    var pos = ruleObject.setPosition - 1;
    summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : WEEKPOS.length - 1]) + " " + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), "single");
  }
  return summary;
}
function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, newTimezone) {
  if (maximumCount === void 0) {
    maximumCount = MAXOCCURRENCE;
  }
  if (viewDate === void 0) {
    viewDate = null;
  }
  if (calendarMode === void 0) {
    calendarMode = "Gregorian";
  }
  if (newTimezone === void 0) {
    newTimezone = null;
  }
  var ruleObject = extractObjectFromRule(rule);
  var cacheDate;
  calendarUtil = getCalendarUtil(calendarMode);
  var data = [];
  var modifiedDate = new Date(startDate.getTime());
  tempExcludeDate = [];
  var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(",");
  var tz = new Timezone();
  tempDate.forEach(function(content) {
    var parsedDate = getDateFromRecurrenceDateString(content);
    if (newTimezone) {
      parsedDate = tz.add(new Date(parsedDate.getTime()), newTimezone);
    }
    tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));
  });
  ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;
  if (viewDate && viewDate > startDate && !ruleObject.count) {
    tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));
  } else {
    tempViewDate = null;
  }
  if (!ruleObject.until && tempViewDate) {
    cacheDate = new Date(tempViewDate.getTime());
    cacheDate.setDate(tempViewDate.getDate() + maximumCount * ruleObject.interval);
    ruleObject.until = cacheDate;
  }
  if (ruleObject.until && startDate > ruleObject.until) {
    return data;
  }
  maxOccurrence = maximumCount;
  startDayOfWeek = startDayOfWeek || 0;
  setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);
  if (ruleObject.until) {
    var end = resetTime(ruleObject.until);
    ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);
  }
  switch (ruleObject.freq) {
    case "DAILY":
      dailyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "WEEKLY":
      weeklyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "MONTHLY":
      monthlyType(modifiedDate, ruleObject.until, data, ruleObject);
      break;
    case "YEARLY":
      yearlyType(modifiedDate, ruleObject.until, data, ruleObject);
  }
  return data;
}
function getDateFromRecurrenceDateString(recDateString) {
  return /* @__PURE__ */ new Date(recDateString.substr(0, 4) + "-" + recDateString.substr(4, 2) + "-" + recDateString.substr(6, 5) + ":" + recDateString.substr(11, 2) + ":" + recDateString.substr(13));
}
function excludeDateHandler(data, date) {
  var zeroIndex = new Date(date).setHours(0, 0, 0, 0);
  if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {
    data.push(date);
  }
}
function getDateCount2(startDate, ruleObject) {
  var count = maxOccurrence;
  if (ruleObject.count) {
    count = ruleObject.count;
  } else if (ruleObject.until) {
    if (ruleObject.freq === "DAILY" || ruleObject.freq === "WEEKLY") {
      count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;
    } else if (ruleObject.freq === "MONTHLY" || ruleObject.freq === "YEARLY") {
      count = Math.floor((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear() - (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) + (ruleObject.day.length > 1 ? Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1 : 1);
      if (ruleObject.freq === "YEARLY") {
        count = ruleObject.month.length > 1 ? count * ruleObject.month.length : count;
      }
    }
  }
  return count;
}
function dailyType(startDate, endDate, data, ruleObject) {
  var tempDate = new Date(startDate.getTime());
  var interval = ruleObject.interval;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var expectedDays = ruleObject.day;
  while (compareDates(tempDate, endDate)) {
    state = true;
    state = validateRules(tempDate, ruleObject);
    if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {
      excludeDateHandler(data, tempDate.getTime());
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
    }
    tempDate.setDate(tempDate.getDate() + interval);
    if (tempDate.getHours() !== startDate.getHours()) {
      tempDate.setHours(startDate.getHours());
    }
  }
}
function weeklyType(startDate, endDate, data, ruleObject) {
  var tempDate = new Date(startDate.getTime());
  if (!ruleObject.day.length) {
    ruleObject.day.push(DAYINDEX[startDate.getDay()]);
  }
  var interval = ruleObject.interval;
  var expectedDays = ruleObject.day;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var weekState = true;
  var wkstIndex;
  var weekCollection = [];
  if (expectedDays.length > 1) {
    if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === "") {
      ruleObject.wkst = dayIndex[0];
    }
    wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);
    while (compareDates(tempDate, endDate)) {
      var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;
      startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;
      var weekstartDate = addDays(tempDate, -startDateDiff);
      var weekendDate = addDays(weekstartDate, 6);
      var compareTempDate = new Date(tempDate.getTime());
      weekendDate = resetTime(weekendDate);
      compareTempDate = resetTime(compareTempDate);
      while (weekendDate >= compareTempDate) {
        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          weekCollection.push([tempDate.getTime()]);
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          break;
        }
        tempDate.setDate(tempDate.getDate() + 1);
        if (tempDate.getHours() !== startDate.getHours()) {
          tempDate.setHours(startDate.getHours());
        }
        compareTempDate = new Date(tempDate.getTime());
        compareTempDate = resetTime(compareTempDate);
      }
      tempDate.setDate(tempDate.getDate() - 1);
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
      tempDate.setDate(tempDate.getDate() + 1 + (interval - 1) * 7);
      insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);
      weekCollection = [];
    }
  } else {
    tempDate = getStartDateForWeek(startDate, ruleObject.day);
    while (compareDates(tempDate, endDate)) {
      weekState = validateRules(tempDate, ruleObject);
      if (weekState && expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
        excludeDateHandler(data, tempDate.getTime());
      }
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        break;
      }
      tempDate.setDate(tempDate.getDate() + interval * 7);
    }
    insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);
    weekCollection = [];
  }
}
function monthlyType(startDate, endDate, data, ruleObject) {
  if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {
    ruleObject.monthDay.push(startDate.getDate());
    if (ruleObject.freq === "YEARLY") {
      ruleObject.month.push(startDate.getMonth() + 1);
    }
  } else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {
    ruleObject.monthDay.push(startDate.getDate());
  }
  var ruleType = validateMonthlyRuleType(ruleObject);
  switch (ruleType) {
    case "day":
      switch (ruleObject.freq) {
        case "MONTHLY":
          monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
          break;
        case "YEARLY":
          monthlyDayTypeProcess(startDate, endDate, data, ruleObject);
          break;
      }
      break;
    case "both":
    case "date":
      switch (ruleObject.freq) {
        case "MONTHLY":
          monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
          break;
        case "YEARLY":
          monthlyDateTypeProcess(startDate, endDate, data, ruleObject);
          break;
      }
      break;
  }
}
function yearlyType(startDate, endDate, data, ruleObject) {
  var typeValue = checkYearlyType(ruleObject);
  switch (typeValue) {
    case "MONTH":
      monthlyType(startDate, endDate, data, ruleObject);
      break;
    case "WEEKNO":
      processWeekNo(startDate, endDate, data, ruleObject);
      break;
    case "YEARDAY":
      processYearDay(startDate, endDate, data, ruleObject);
      break;
  }
}
function processWeekNo(startDate, endDate, data, ruleObject) {
  var stDate = calendarUtil.getYearLastDate(startDate, 0);
  var tempDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var startDay;
  var firstWeekSpan;
  var weekNos = ruleObject.weekNo;
  var weekNo;
  var maxDate;
  var minDate;
  var weekCollection = [];
  var expectedDays = ruleObject.day;
  while (compareDates(stDate, endDate)) {
    startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);
    firstWeekSpan = 6 - startDay + 1;
    for (var index = 0; index < weekNos.length; index++) {
      weekNo = weekNos[parseInt(index.toString(), 10)];
      weekNo = weekNo > 0 ? weekNo : 53 + weekNo + 1;
      maxDate = weekNo === 1 ? firstWeekSpan : firstWeekSpan + (weekNo - 1) * 7;
      minDate = weekNo === 1 ? firstWeekSpan - 7 : firstWeekSpan + (weekNo - 2) * 7;
      while (minDate < maxDate) {
        tempDate = new Date(stDate.getTime() + MS_PER_DAY * minDate);
        if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());
          } else {
            weekCollection.push([tempDate.getTime()]);
          }
        }
        minDate++;
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);
    }
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);
    weekCollection = [];
  }
}
function processYearDay(startDate, endDate, data, ruleObject) {
  var stDate = calendarUtil.getYearLastDate(startDate, 0);
  var tempDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var state;
  var dateCollection = [];
  var date;
  var expectedDays = ruleObject.day;
  while (compareDates(stDate, endDate)) {
    for (var index = 0; index < ruleObject.yearDay.length; index++) {
      date = ruleObject.yearDay[parseInt(index.toString(), 10)];
      tempDate = new Date(stDate.getTime());
      if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) && !calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1)) {
        tempDate.setDate(tempDate.getDate() + 1);
        continue;
      }
      tempDate.setDate(tempDate.getDate() + (date < 0 ? calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));
      if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
        if (ruleObject.setPosition == null) {
          insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());
        } else {
          dateCollection.push([tempDate.getTime()]);
        }
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);
    }
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);
    dateCollection = [];
  }
}
function checkYearlyType(ruleObject) {
  if (ruleObject.yearDay.length) {
    return "YEARDAY";
  } else if (ruleObject.weekNo.length) {
    return "WEEKNO";
  }
  return "MONTH";
}
function initializeRecRuleVariables(startDate, ruleObject) {
  var ruleData = {
    monthCollection: [],
    index: 0,
    tempDate: new Date(startDate.getTime()),
    mainDate: new Date(startDate.getTime()),
    expectedCount: getDateCount2(startDate, ruleObject),
    monthInit: 0,
    dateCollection: []
  };
  if (ruleObject.month.length) {
    calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());
  }
  return ruleData;
}
function monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {
  if (ruleObject.month.length) {
    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
    return;
  }
  var ruleData = initializeRecRuleVariables(startDate, ruleObject);
  var currentMonthDate;
  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);
  while (compareDates(ruleData.tempDate, endDate)) {
    currentMonthDate = new Date(ruleData.tempDate.getTime());
    while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) && (ruleData.expectedCount && data.length + ruleObject.recExceptionCount <= ruleData.expectedCount)) {
      if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month)) {
        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);
        ruleData.beginDate = new Date(ruleData.tempDate.getTime());
        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
      } else {
        calendarUtil.setValidDate(ruleData.tempDate, 1, 1);
        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
        break;
      }
    }
    ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());
    insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);
    if (calendarUtil.isLastMonth(ruleData.tempDate)) {
      calendarUtil.setValidDate(ruleData.tempDate, 1, 1);
      ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
    }
    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {
      return;
    }
    ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);
    ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);
    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
    ruleData.dateCollection = [];
  }
}
function monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {
  var ruleData = initializeRecRuleVariables(startDate, ruleObject);
  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);
  if ((ruleObject.freq === "MONTHLY" && ruleObject.interval === 12 || ruleObject.freq === "YEARLY") && calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {
    return;
  }
  while (compareDates(ruleData.tempDate, endDate)) {
    ruleData.beginDate = new Date(ruleData.tempDate.getTime());
    processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);
    }
    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {
      return;
    }
    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);
    ruleData.dateCollection = [];
  }
}
function processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {
  for (var index = 0; index < ruleObject.monthDay.length; index++) {
    recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];
    recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);
    var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);
    recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : maxDate + recRuleVariables.date + 1;
    if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate) && recRuleVariables.date > 0) {
      calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);
      if (endDate && recRuleVariables.tempDate > endDate) {
        return;
      }
      if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {
        if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && (recRuleVariables.expectedCount && data.length + ruleObject.recExceptionCount < recRuleVariables.expectedCount)) {
          insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());
        } else {
          recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);
        }
      }
    }
  }
}
function setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {
  if (beginDate === void 0) {
    beginDate = null;
  }
  var monthData = beginDate ? beginDate.getMonth() : 0;
  var startDate = calendarUtil.getMonthStartDate(tempDate);
  interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;
  tempDate.setFullYear(startDate.getFullYear());
  tempDate.setMonth(startDate.getMonth());
  tempDate.setDate(startDate.getDate());
  if (ruleObject.month.length) {
    monthInit++;
    monthInit = monthInit % ruleObject.month.length;
    calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);
    if (monthInit === 0) {
      calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);
    }
  } else {
    if (beginDate && beginDate.getFullYear() < tempDate.getFullYear()) {
      monthData = tempDate.getMonth() - 1;
    }
    calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);
  }
  return monthInit;
}
function getMonthCollection(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var tempDate = new Date(startDate.getTime());
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  var monthCollection = [];
  var dateCollection = [];
  var dates = [];
  var index;
  var state;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var monthInit = 0;
  var beginDate;
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate) && (expectedCount && data.length + ruleObject.recExceptionCount < expectedCount)) {
    var currentMonthDate = new Date(tempDate.getTime());
    var isHavingNumber = expectedDays.map(function(item) {
      return HASNUMBER.test(item);
    });
    if (isHavingNumber.indexOf(true) > -1) {
      for (var j = 0; j <= expectedDays.length - 1; j++) {
        var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);
        var position = parseInt(expectedDaysArray[0], 10);
        tempDate = new Date(tempDate.getTime());
        tempDate = calendarUtil.getMonthStartDate(tempDate);
        tempDate = getStartDateForWeek(tempDate, expectedDays);
        currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());
        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {
          if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {
            monthCollection.push([currentMonthDate.getTime()]);
          }
          currentMonthDate.setDate(currentMonthDate.getDate() + 1);
        }
        currentMonthDate.setDate(currentMonthDate.getDate() - 1);
        if (expectedDaysArray[0].indexOf("-") > -1) {
          index = monthCollection.length - -1 * position;
        } else {
          index = position - 1;
        }
        index = isNaN(index) ? 0 : index;
        if (monthCollection.length > 0) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
          } else {
            dateCollection = [filterDateCollectionByIndex(monthCollection, index, dates)];
          }
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          return;
        }
        monthCollection = [];
      }
      if (!isNullOrUndefined(ruleObject.setPosition)) {
        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
        dates = [];
      }
      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
      monthCollection = [];
    } else {
      var weekCollection = [];
      var dayCycleData = processWeekDays(expectedDays);
      currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());
      var initialDate = new Date(tempDate.getTime());
      beginDate = new Date(tempDate.getTime());
      while (calendarUtil.isSameMonth(initialDate, tempDate)) {
        weekCollection.push(tempDate.getTime());
        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {
          monthCollection.push(weekCollection);
          weekCollection = [];
        }
        tempDate.setDate(tempDate.getDate() + dayCycleData[DAYINDEX[tempDate.getDay()]]);
      }
      index = ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
      if (isNullOrUndefined(ruleObject.setPosition)) {
        index = 0;
        var datas = [];
        for (var week = 0; week < monthCollection.length; week++) {
          for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {
            datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);
          }
        }
        monthCollection = [datas];
      }
      if (monthCollection.length > 0) {
        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
      }
      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
        return;
      }
      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
      monthCollection = [];
    }
  }
}
function monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  if (expectedDays.length > 1) {
    getMonthCollection(startDate, endDate, data, ruleObject);
    return;
  }
  var tempDate = new Date(startDate.getTime());
  var expectedCount = getDateCount2(startDate, ruleObject);
  var monthCollection = [];
  var beginDate;
  var monthInit = 0;
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate) && (expectedCount && data.length + ruleObject.recExceptionCount < expectedCount)) {
    beginDate = new Date(tempDate.getTime());
    var currentMonthDate = new Date(tempDate.getTime());
    while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {
      monthCollection.push([currentMonthDate.getTime()]);
      currentMonthDate.setDate(currentMonthDate.getDate() + 7);
    }
    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);
    monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    monthCollection = [];
  }
}
function monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var isHavingNumber = expectedDays.map(function(item) {
    return HASNUMBER.test(item);
  });
  if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {
    processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);
    return;
  } else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {
    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);
    return;
  }
  var tempDate = new Date(startDate.getTime());
  var currentMonthDate;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var interval = ruleObject.interval;
  var monthCollection = [];
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());
  }
  if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {
    tempDate.setFullYear(startDate.getFullYear(), 0, 1);
  }
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate)) {
    currentMonthDate = new Date(tempDate.getTime());
    while (calendarUtil.isSameYear(currentMonthDate, tempDate) && (expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount)) {
      currentMonthDate = new Date(tempDate.getTime());
      while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {
        if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(tempDate, ruleObject.month)) {
          if (expectedDays.length > 1) {
            if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {
              calendarUtil.setValidDate(tempDate, 1, 1);
              tempDate = getStartDateForWeek(tempDate, ruleObject.day);
              break;
            }
            if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {
              monthCollection.push([currentMonthDate.getTime()]);
            }
            currentMonthDate.setDate(currentMonthDate.getDate() + 1);
          } else {
            if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {
              calendarUtil.setValidDate(tempDate, 1, 1);
              tempDate = getStartDateForWeek(tempDate, ruleObject.day);
              break;
            }
            var newstr = getDayString(expectedDays[0]);
            if (DAYINDEX[currentMonthDate.getDay()] === newstr && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0) > new Date(startDate.getFullYear())) {
              monthCollection.push([currentMonthDate.getTime()]);
            }
            currentMonthDate.setDate(currentMonthDate.getDate() + 7);
          }
        } else {
          calendarUtil.setValidDate(tempDate, 1, 1);
          tempDate = getStartDateForWeek(tempDate, ruleObject.day);
          break;
        }
      }
    }
    tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());
    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);
    if (calendarUtil.isLastMonth(tempDate)) {
      calendarUtil.setValidDate(tempDate, 1, 1);
      tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    }
    tempDate.setFullYear(tempDate.getFullYear() + interval - 1);
    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
      return;
    }
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    monthCollection = [];
  }
}
function processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var expectedCount = getDateCount2(startDate, ruleObject);
  var tempDate = new Date(startDate.getTime());
  var interval = ruleObject.interval;
  var monthCollection = [];
  var dateCollection = [];
  var index;
  var state;
  var monthInit = 0;
  var currentMonthDate;
  var currentDate;
  var beginDate;
  tempDate = calendarUtil.getMonthStartDate(tempDate);
  var datas = [];
  if (ruleObject.month.length) {
    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);
  }
  tempDate = getStartDateForWeek(tempDate, ruleObject.day);
  while (compareDates(tempDate, endDate)) {
    currentMonthDate = new Date(tempDate.getTime());
    for (var i = 0; i <= ruleObject.month.length; i++) {
      for (var j = 0; j <= expectedDays.length - 1; j++) {
        tempDate = calendarUtil.getMonthStartDate(tempDate);
        tempDate = getStartDateForWeek(tempDate, ruleObject.day);
        monthCollection = [];
        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && (expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount)) {
          while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {
            currentMonthDate = new Date(tempDate.getTime());
            if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate)) {
              var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);
              var position = parseInt(expectedDaysArray[0], 10);
              currentDate = new Date(tempDate.getTime());
              while (calendarUtil.isSameYear(currentDate, tempDate) && calendarUtil.isSameMonth(currentDate, tempDate)) {
                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {
                  monthCollection.push([currentDate.getTime()]);
                }
                currentDate.setDate(currentDate.getDate() + 1);
              }
              currentDate.setDate(currentDate.getDate() - 1);
              if (expectedDaysArray[0].indexOf("-") > -1) {
                index = monthCollection.length - -1 * position;
              } else {
                index = position - 1;
              }
              index = isNaN(index) ? 0 : index;
            }
            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);
            tempDate = getStartDateForWeek(tempDate, ruleObject.day);
          }
        }
        tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());
        if (monthCollection.length > 0) {
          if (isNullOrUndefined(ruleObject.setPosition)) {
            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
          } else {
            dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];
          }
        }
        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {
          return;
        }
      }
    }
    if (!isNullOrUndefined(ruleObject.setPosition)) {
      insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
      datas = [];
    }
    if (calendarUtil.isLastMonth(tempDate)) {
      calendarUtil.setValidDate(tempDate, 1, 1);
      tempDate.setFullYear(tempDate.getFullYear() + interval - 1);
    } else {
      tempDate.setFullYear(tempDate.getFullYear() + interval);
    }
    tempDate = getStartDateForWeek(tempDate, ruleObject.day);
    if (ruleObject.month.length) {
      calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());
    }
  }
}
function getRecurrenceCollection(monthCollection, expectedDays) {
  var index;
  var recurrenceCollectionObject = { monthCollection: [], index: 0 };
  if (expectedDays.length === 1) {
    var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);
    var arrPosition = void 0;
    if (expectedDaysArrays.length > 1) {
      arrPosition = parseInt(expectedDaysArrays[0], 10);
      index = arrPosition < 1 ? monthCollection.length + arrPosition : arrPosition - 1;
    } else {
      index = 0;
      monthCollection = getDateCollectionforBySetPosNull(monthCollection);
    }
  } else {
    index = 0;
    monthCollection = getDateCollectionforBySetPosNull(monthCollection);
  }
  recurrenceCollectionObject.monthCollection = monthCollection;
  recurrenceCollectionObject.index = index;
  return recurrenceCollectionObject;
}
function insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {
  var index = ruleObject.setPosition < 1 ? dateCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
  if (isNullOrUndefined(ruleObject.setPosition)) {
    index = 0;
    dateCollection = getDateCollectionforBySetPosNull(dateCollection);
  }
  if (dateCollection.length > 0) {
    insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);
  }
}
function getDateCollectionforBySetPosNull(monthCollection) {
  var datas = [];
  for (var week = 0; week < monthCollection.length; week++) {
    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {
      datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());
    }
  }
  monthCollection = datas.length > 0 ? [datas] : [];
  return monthCollection;
}
function insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {
  var expectedDays = ruleObject.day;
  var state;
  var datas = [];
  var dateCollection = [];
  var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);
  monthCollection = recurrenceCollections.monthCollection;
  var index = recurrenceCollections.index;
  if (ruleObject.setPosition != null) {
    dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];
    insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);
  } else {
    if (monthCollection.length > 0) {
      insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);
    }
  }
  datas = [];
}
function filterDateCollectionByIndex(monthCollection, index, datas) {
  for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {
    datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);
  }
  return datas;
}
function insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {
  var expectedCount = getDateCount2(startDate, ruleObject);
  var chDate = new Date(dayData);
  state = validateRules(chDate, ruleObject);
  if (chDate >= startDate && compareDates(chDate, endDate) && state && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {
    excludeDateHandler(data, dayData);
  }
}
function weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {
  var firstDayOfWeek = startDayOfWeek || 0;
  var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);
  var lastOfMonth = new Date(year, ruleObject.month[0], 0);
  var numberOfDaysInMonth = lastOfMonth.getDate();
  var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;
  var used = firstWeekDay + numberOfDaysInMonth;
  var count = Math.ceil(used / 7) - 1;
  var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];
  var chDate = new Date(dayData);
  var state = validateRules(chDate, ruleObject);
  return state ? count : count - 1;
}
function insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {
  if (monthCollection.length > 0) {
    for (var week = 0; week < monthCollection.length; week++) {
      monthCollection[parseInt(week.toString(), 10)].sort();
      var expectedDays = ruleObject.day;
      var isHavingNumber = expectedDays.map(function(item) {
        return HASNUMBER.test(item);
      });
      var weekIndex = ruleObject.freq === "YEARLY" && ruleObject.validRules.indexOf("BYMONTH") > -1 && !(isHavingNumber.indexOf(true) > -1) ? weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject) : monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition;
      var index = ruleObject.setPosition < 1 ? weekIndex : ruleObject.setPosition - 1;
      var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];
      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);
    }
  }
}
function insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {
  if (monthCollection.length > 0) {
    index = !isNullOrUndefined(index) ? index : ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;
    monthCollection[parseInt(index.toString(), 10)].sort();
    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {
      var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];
      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);
    }
  }
}
function compareDates(startDate, endDate) {
  return endDate ? startDate <= endDate : true;
}
function getDayString(expectedDays) {
  var newstr = expectedDays.replace(REMOVENUMBERINSTRING, "");
  return newstr;
}
function checkDayIndex(day, expectedDays) {
  var sortedExpectedDays = [];
  expectedDays.forEach(function(element) {
    var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);
    if (expectedDaysNumberSplit.length === 2) {
      sortedExpectedDays.push(expectedDaysNumberSplit[1]);
    } else {
      sortedExpectedDays.push(expectedDaysNumberSplit[0]);
    }
  });
  return sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1;
}
function getStartDateForWeek(startDate, expectedDays) {
  var tempDate = new Date(startDate.getTime());
  var newstr;
  if (expectedDays.length > 0) {
    var expectedDaysArr = [];
    for (var i = 0; i <= expectedDays.length - 1; i++) {
      newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);
      expectedDaysArr.push(newstr);
    }
    if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {
      do {
        tempDate.setDate(tempDate.getDate() + 1);
      } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);
    }
  }
  return tempDate;
}
function extractObjectFromRule(rules) {
  var ruleObject = {
    freq: null,
    interval: 1,
    count: null,
    until: null,
    day: [],
    wkst: null,
    month: [],
    weekNo: [],
    monthDay: [],
    yearDay: [],
    setPosition: null,
    validRules: []
  };
  var rulesList = rules.split(";");
  var splitData = [];
  var temp;
  rulesList.forEach(function(data) {
    splitData = data.split("=");
    switch (splitData[0]) {
      case "UNTIL":
        temp = splitData[1];
        ruleObject.until = getDateFromRecurrenceDateString(temp);
        break;
      case "BYDAY":
        ruleObject.day = splitData[1].split(",");
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYMONTHDAY":
        ruleObject.monthDay = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYMONTH":
        ruleObject.month = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYYEARDAY":
        ruleObject.yearDay = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "BYWEEKNO":
        ruleObject.weekNo = splitData[1].split(",").map(Number);
        ruleObject.validRules.push(splitData[0]);
        break;
      case "INTERVAL":
        ruleObject.interval = parseInt(splitData[1], 10);
        break;
      case "COUNT":
        ruleObject.count = parseInt(splitData[1], 10);
        break;
      case "BYSETPOS":
        ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);
        break;
      case "FREQ":
        ruleObject.freq = splitData[1];
        break;
      case "WKST":
        ruleObject.wkst = splitData[1];
        break;
    }
  });
  if (ruleObject.freq === "MONTHLY" && ruleObject.monthDay.length === 0) {
    var index = ruleObject.validRules.indexOf("BYDAY");
    ruleObject.validRules.splice(index, 1);
  }
  return ruleObject;
}
function validateProperDate(tempDate, data, startDate) {
  var maxDate = calendarUtil.getMonthDaysCount(tempDate);
  return data <= maxDate && tempDate >= startDate;
}
function processWeekDays(expectedDays) {
  var dayCycle = {};
  expectedDays.forEach(function(element, index) {
    if (index === expectedDays.length - 1) {
      var startIndex = dayIndex.indexOf(element);
      var temp = startIndex;
      while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {
        temp++;
      }
      dayCycle["" + element] = temp - startIndex;
    } else {
      dayCycle["" + element] = dayIndex.indexOf(expectedDays[index + 1]) - dayIndex.indexOf(element);
    }
  });
  return dayCycle;
}
function checkDate(tempDate, expectedDate) {
  var temp = expectedDate.slice(0);
  var data;
  var maxDate = calendarUtil.getMonthDaysCount(tempDate);
  data = temp.shift();
  while (data) {
    if (data < 0) {
      data = data + maxDate + 1;
    }
    if (data === tempDate.getDate()) {
      return false;
    }
    data = temp.shift();
  }
  return true;
}
function checkYear(tempDate, expectedyearDay) {
  var temp = expectedyearDay.slice(0);
  var data;
  var yearDay = getYearDay(tempDate);
  data = temp.shift();
  while (data) {
    if (data < 0) {
      data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;
    }
    if (data === yearDay) {
      return false;
    }
    data = temp.shift();
  }
  return true;
}
function getYearDay(currentDate) {
  if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {
    startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);
  }
  var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];
  var diff = currentDate.getTime() - tempDate.getTime();
  return Math.ceil(diff / MS_PER_DAY);
}
function validateMonthlyRuleType(ruleObject) {
  if (ruleObject.monthDay.length && !ruleObject.day.length) {
    return "date";
  } else if (!ruleObject.monthDay.length && ruleObject.day.length) {
    return "day";
  }
  return "both";
}
function rotate(days) {
  var data = days.shift();
  days.push(data);
}
function setFirstDayOfWeek(day) {
  while (dayIndex[0] !== day) {
    rotate(dayIndex);
  }
}
function validateRules(tempDate, ruleObject) {
  var state = true;
  var expectedDays = ruleObject.day;
  var expectedMonth = ruleObject.month;
  var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);
  var expectedyearDay = ruleObject.yearDay;
  ruleObject.validRules.forEach(function(rule) {
    switch (rule) {
      case "BYDAY":
        if (checkDayIndex(tempDate.getDay(), expectedDays)) {
          state = false;
        }
        break;
      case "BYMONTH":
        if (calendarUtil.checkMonth(tempDate, expectedMonth)) {
          state = false;
        }
        break;
      case "BYMONTHDAY":
        if (checkDate(tempDate, expectedDate)) {
          state = false;
        }
        break;
      case "BYYEARDAY":
        if (checkYear(tempDate, expectedyearDay)) {
          state = false;
        }
        break;
    }
  });
  return state;
}
function getCalendarUtil(calendarMode) {
  if (calendarMode === "Islamic") {
    return new Islamic2();
  }
  return new Gregorian();
}
var startDateCollection = {};
var tempExcludeDate;
var dayIndex = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
var maxOccurrence;
var tempViewDate;
var calendarUtil;
var DAYINDEX = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
var MAXOCCURRENCE = 43;
var WEEKPOS = ["first", "second", "third", "fourth", "last"];
var TIMES = "summaryTimes";
var ON = "summaryOn";
var EVERY = "every";
var UNTIL = "summaryUntil";
var DAYS = "summaryDay";
var WEEKS = "summaryWeek";
var MONTHS = "summaryMonth";
var YEARS = "summaryYear";
var DAYINDEXOBJECT = {
  SU: "sun",
  MO: "mon",
  TU: "tue",
  WE: "wed",
  TH: "thu",
  FR: "fri",
  SA: "sat"
};
var HASNUMBER = /\d/;
var REMOVENUMBERINSTRING = /[^A-Z]+/;
var SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;
function getRecurrenceStringFromDate(date) {
  return [
    date.getUTCFullYear(),
    roundDateValues(date.getUTCMonth() + 1),
    roundDateValues(date.getUTCDate()),
    "T",
    roundDateValues(date.getUTCHours()),
    roundDateValues(date.getUTCMinutes()),
    roundDateValues(date.getUTCSeconds()),
    "Z"
  ].join("");
}
function roundDateValues(date) {
  return ("0" + date).slice(-2);
}

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/event-base.js
var EventBase = (
  /** @class */
  function() {
    function EventBase2(parent) {
      this.slots = [];
      this.isDoubleTapped = false;
      this.parent = parent;
    }
    EventBase2.prototype.processData = function(events, timeZonePropChanged, oldTimezone) {
      var _this = this;
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      var fields = this.parent.eventFields;
      var processed = [];
      var temp = 1;
      var generateID = false;
      var resourceCollection = this.parent.resourceBase ? this.parent.resourceBase.resourceCollection : [];
      if (events.length > 0 && isNullOrUndefined(events[0][fields.id])) {
        generateID = true;
      }
      var _loop_1 = function(event_12) {
        if (generateID) {
          event_12[fields.id] = temp++;
        }
        event_12 = this_1.updateEventDateTime(event_12);
        if (timeZonePropChanged) {
          this_1.processTimezoneChange(event_12, oldTimezone);
        } else if (!this_1.parent.isPrinting && !this_1.parent.uiStateValues.isPreventTimezone) {
          event_12 = this_1.processTimezone(event_12);
        }
        for (var level = 0; level < resourceCollection.length; level++) {
          if (event_12[resourceCollection[parseInt(level.toString(), 10)].field] === null || event_12[resourceCollection[parseInt(level.toString(), 10)].field] === 0) {
            event_12[resourceCollection[parseInt(level.toString(), 10)].field] = void 0;
          }
        }
        if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && event_12[fields.recurrenceRule] === "") {
          event_12[fields.recurrenceRule] = null;
        }
        if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && isNullOrUndefined(event_12[fields.recurrenceID]) && !(this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction)) {
          processed = processed.concat(this_1.generateOccurrence(event_12, null, true));
        } else {
          if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction) {
            if (!isNullOrUndefined(event_12[fields.recurrenceRule]) && isNullOrUndefined(event_12[fields.recurrenceID])) {
              var recurrenceEvent = this_1.generateOccurrence(event_12, null, true);
              var _loop_2 = function(occurrence2) {
                var app2 = this_1.parent.eventsProcessed.filter(function(data) {
                  return data[fields.startTime].getTime() - occurrence2[fields.startTime].getTime() === 0 && data[fields.id] === occurrence2[fields.id];
                });
                occurrence2.Guid = app2.length > 0 ? app2[0].Guid : this_1.generateGuid();
                processed.push(occurrence2);
              };
              for (var _i2 = 0, recurrenceEvent_1 = recurrenceEvent; _i2 < recurrenceEvent_1.length; _i2++) {
                var occurrence = recurrenceEvent_1[_i2];
                _loop_2(occurrence);
              }
            } else {
              var app = this_1.parent.eventsProcessed.filter(function(data) {
                return data[_this.parent.eventFields.id] === event_12[_this.parent.eventFields.id];
              });
              event_12.Guid = app.length > 0 ? app[0].Guid : this_1.generateGuid();
              processed.push(event_12);
            }
          } else {
            event_12.Guid = this_1.generateGuid();
            processed.push(event_12);
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
        var event_1 = events_1[_i];
        _loop_1(event_1);
      }
      this.parent.eventsProcessed = [];
      var eventData = processed.filter(function(data) {
        return !data[_this.parent.eventFields.isBlock];
      });
      this.parent.eventsProcessed = this.filterEvents(start, end, eventData);
      var blockData = processed.filter(function(data) {
        return data[_this.parent.eventFields.isBlock];
      });
      for (var _a = 0, blockData_1 = blockData; _a < blockData_1.length; _a++) {
        var eventObj = blockData_1[_a];
        if (eventObj[fields.isAllDay]) {
          var isDifferentDate = resetTime(new Date(eventObj[fields.startTime].getTime())) < resetTime(new Date(eventObj[fields.endTime].getTime()));
          if (!isDifferentDate) {
            eventObj[fields.startTime] = resetTime(eventObj[fields.startTime]);
            eventObj[fields.endTime] = addDays(resetTime(eventObj[fields.endTime]), 1);
          }
        }
      }
      this.parent.blockProcessed = blockData;
      return eventData;
    };
    EventBase2.prototype.updateEventDateTime = function(eventData) {
      if (typeof eventData[this.parent.eventFields.startTime] === "string") {
        eventData[this.parent.eventFields.startTime] = getDateFromString(eventData[this.parent.eventFields.startTime]);
      }
      if (typeof eventData[this.parent.eventFields.endTime] === "string") {
        eventData[this.parent.eventFields.endTime] = getDateFromString(eventData[this.parent.eventFields.endTime]);
      }
      return eventData;
    };
    EventBase2.prototype.getProcessedEvents = function(eventCollection) {
      if (eventCollection === void 0) {
        eventCollection = this.parent.eventsData;
      }
      var processed = [];
      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
        var event_2 = eventCollection_1[_i];
        if (!isNullOrUndefined(event_2[this.parent.eventFields.recurrenceRule]) && isNullOrUndefined(event_2[this.parent.eventFields.recurrenceID])) {
          processed = processed.concat(this.generateOccurrence(event_2));
        } else {
          processed.push(event_2);
        }
      }
      return processed;
    };
    EventBase2.prototype.timezonePropertyChange = function(oldTimezone) {
      var data = this.parent.eventsData.concat(this.parent.blockData);
      var processed = this.processData(data, true, oldTimezone);
      this.parent.notify(dataReady, { processedData: processed });
    };
    EventBase2.prototype.timezoneConvert = function(eventData) {
      var fields = this.parent.eventFields;
      eventData[fields.startTimezone] = eventData[fields.startTimezone] || eventData[fields.endTimezone];
      eventData[fields.endTimezone] = eventData[fields.endTimezone] || eventData[fields.startTimezone];
      if (this.parent.timezone) {
        var startTz = eventData[fields.startTimezone];
        var endTz = eventData[fields.endTimezone];
        eventData[fields.startTime] = this.parent.tzModule.convert(eventData[fields.startTime], this.parent.timezone, startTz);
        eventData[fields.endTime] = this.parent.tzModule.convert(eventData[fields.endTime], this.parent.timezone, endTz);
      }
    };
    EventBase2.prototype.processTimezoneChange = function(event2, oldTimezone) {
      var fields = this.parent.eventFields;
      if (event2[fields.isAllDay]) {
        return;
      }
      if (oldTimezone && this.parent.timezone) {
        event2[fields.startTime] = this.parent.tzModule.convert(event2[fields.startTime], oldTimezone, this.parent.timezone);
        event2[fields.endTime] = this.parent.tzModule.convert(event2[fields.endTime], oldTimezone, this.parent.timezone);
      } else if (!oldTimezone && this.parent.timezone) {
        event2[fields.startTime] = this.parent.tzModule.add(event2[fields.startTime], this.parent.timezone);
        event2[fields.endTime] = this.parent.tzModule.add(event2[fields.endTime], this.parent.timezone);
      } else if (oldTimezone && !this.parent.timezone) {
        event2[fields.startTime] = this.parent.tzModule.remove(event2[fields.startTime], oldTimezone);
        event2[fields.endTime] = this.parent.tzModule.remove(event2[fields.endTime], oldTimezone);
      }
    };
    EventBase2.prototype.processTimezone = function(event2, isReverse) {
      if (isReverse === void 0) {
        isReverse = false;
      }
      var fields = this.parent.eventFields;
      if (event2[fields.isAllDay]) {
        return event2;
      }
      if (event2[fields.startTimezone] || event2[fields.endTimezone]) {
        var startTimezone = event2[fields.startTimezone] || event2[fields.endTimezone];
        var endTimezone = event2[fields.endTimezone] || event2[fields.startTimezone];
        if (isReverse) {
          if (this.parent.timezone) {
            event2[fields.startTime] = this.parent.tzModule.convert(event2[fields.startTime], startTimezone, this.parent.timezone);
            event2[fields.endTime] = this.parent.tzModule.convert(event2[fields.endTime], endTimezone, this.parent.timezone);
            event2[fields.startTime] = this.parent.tzModule.remove(event2[fields.startTime], this.parent.timezone);
            event2[fields.endTime] = this.parent.tzModule.remove(event2[fields.endTime], this.parent.timezone);
          } else {
            event2[fields.startTime] = this.parent.tzModule.remove(event2[fields.startTime], startTimezone);
            event2[fields.endTime] = this.parent.tzModule.remove(event2[fields.endTime], endTimezone);
          }
        } else {
          event2[fields.startTime] = this.parent.tzModule.add(event2[fields.startTime], startTimezone);
          event2[fields.endTime] = this.parent.tzModule.add(event2[fields.endTime], endTimezone);
          if (this.parent.timezone) {
            event2[fields.startTime] = this.parent.tzModule.convert(event2[fields.startTime], startTimezone, this.parent.timezone);
            event2[fields.endTime] = this.parent.tzModule.convert(event2[fields.endTime], endTimezone, this.parent.timezone);
          }
        }
      } else if (this.parent.timezone) {
        if (isReverse) {
          event2[fields.startTime] = this.parent.tzModule.remove(event2[fields.startTime], this.parent.timezone);
          event2[fields.endTime] = this.parent.tzModule.remove(event2[fields.endTime], this.parent.timezone);
        } else {
          event2[fields.startTime] = this.parent.tzModule.add(event2[fields.startTime], this.parent.timezone);
          event2[fields.endTime] = this.parent.tzModule.add(event2[fields.endTime], this.parent.timezone);
        }
      }
      return event2;
    };
    EventBase2.prototype.filterBlockEvents = function(eventObj) {
      var fields = this.parent.eventFields;
      var eStart = eventObj[fields.startTime];
      var eEnd = eventObj[fields.endTime];
      var resourceData;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var data = this.getGroupIndexFromEvent(eventObj);
        resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(data.toString(), 10)];
      }
      var blockEvents = extend([], this.parent.blockProcessed, null, true);
      for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {
        var eventObj_1 = blockEvents_1[_i];
        if (eventObj_1[fields.isAllDay]) {
          var isDifferentTime = eventObj_1[fields.endTime].getTime() > resetTime(new Date(eventObj_1[fields.endTime].getTime())).getTime();
          if (isDifferentTime) {
            eventObj_1[fields.startTime] = resetTime(eventObj_1[fields.startTime]);
            eventObj_1[fields.endTime] = addDays(resetTime(eventObj_1[fields.endTime]), 1);
          }
        }
      }
      return this.filterEvents(eStart, eEnd, blockEvents, resourceData);
    };
    EventBase2.prototype.filterEvents = function(startDate, endDate, appointments, resourceTdData) {
      if (appointments === void 0) {
        appointments = this.parent.eventsProcessed;
      }
      var predicate = this.parent.dataModule.getStartEndQuery(startDate, endDate);
      var filter = new DataManager({ json: appointments }).executeLocal(new Query().where(predicate));
      if (resourceTdData) {
        filter = this.filterEventsByResource(resourceTdData, filter);
      }
      return this.sortByTime(filter);
    };
    EventBase2.prototype.filterEventsByRange = function(eventCollection, startDate, endDate) {
      var _this = this;
      var filteredEvents = [];
      if (startDate && endDate) {
        filteredEvents = this.filterEvents(startDate, endDate, eventCollection);
      } else if (startDate && !endDate) {
        filteredEvents = eventCollection.filter(function(e) {
          return e[_this.parent.eventFields.startTime] >= startDate;
        });
      } else if (!startDate && endDate) {
        filteredEvents = eventCollection.filter(function(e) {
          return e[_this.parent.eventFields.endTime] <= endDate;
        });
      } else {
        filteredEvents = eventCollection;
      }
      return this.sortByTime(filteredEvents);
    };
    EventBase2.prototype.filterEventsByResource = function(resourceTdData, appointments) {
      if (appointments === void 0) {
        appointments = this.parent.eventsProcessed;
      }
      var predicate = {};
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      for (var level = 0; level < resourceCollection.length; level++) {
        predicate[resourceCollection[parseInt(level.toString(), 10)].field] = resourceTdData.groupOrder[parseInt(level.toString(), 10)];
      }
      var keys = Object.keys(predicate);
      var filteredCollection = appointments.filter(function(eventObj) {
        return keys.every(function(key) {
          if (eventObj["" + key] instanceof Array) {
            return eventObj["" + key].indexOf(predicate["" + key]) > -1;
          } else {
            return eventObj["" + key] === predicate["" + key];
          }
        });
      });
      return filteredCollection;
    };
    EventBase2.prototype.sortByTime = function(appointmentsCollection) {
      if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === "function" || typeof this.parent.eventSettings.sortComparer === "string")) {
        appointmentsCollection = this.customSorting(appointmentsCollection);
      } else {
        var fieldMappings_1 = this.parent.eventFields;
        appointmentsCollection.sort(function(a, b) {
          var d1 = a[fieldMappings_1.startTime];
          var d2 = b[fieldMappings_1.startTime];
          return d1.getTime() - d2.getTime();
        });
      }
      return appointmentsCollection;
    };
    EventBase2.prototype.sortByDateTime = function(appointments) {
      if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === "function" || typeof this.parent.eventSettings.sortComparer === "string")) {
        appointments = this.customSorting(appointments);
      } else {
        var fieldMapping_1 = this.parent.eventFields;
        appointments.sort(function(object1, object2) {
          var d3 = object1[fieldMapping_1.startTime];
          var d4 = object2[fieldMapping_1.startTime];
          var d5 = object1[fieldMapping_1.endTime];
          var d6 = object2[fieldMapping_1.endTime];
          var d1 = d5.getTime() - d3.getTime();
          var d2 = d6.getTime() - d4.getTime();
          return d3.getTime() - d4.getTime() || d2 - d1;
        });
      }
      return appointments;
    };
    EventBase2.prototype.customSorting = function(appointments) {
      if (typeof this.parent.eventSettings.sortComparer === "function") {
        return this.parent.eventSettings.sortComparer.call(this.parent, appointments);
      } else if (typeof this.parent.eventSettings.sortComparer === "string") {
        var splits = this.parent.eventSettings.sortComparer.split(".");
        var sortFn = void 0;
        if (!isNullOrUndefined(window)) {
          sortFn = window[splits[splits.length - 1]];
        }
        if (sortFn) {
          return sortFn(appointments);
        }
      }
      return appointments;
    };
    EventBase2.prototype.getSmallestMissingNumber = function(array) {
      var large = Math.max.apply(Math, array);
      for (var i = 0; i < large; i++) {
        if (array.indexOf(i) === -1) {
          return i;
        }
      }
      return large + 1;
    };
    EventBase2.prototype.splitEventByDay = function(event2) {
      var eventFields = this.parent.eventFields;
      var data = [];
      var eventStartTime = event2[eventFields.startTime];
      var eventEndTime = event2[eventFields.endTime];
      var isDifferentDate = resetTime(new Date(eventStartTime.getTime())) < resetTime(new Date(eventEndTime.getTime()));
      if (isDifferentDate) {
        var start = new Date(eventStartTime.getTime());
        var end = addDays(resetTime(new Date(eventStartTime.getTime())), 1);
        var endDate = eventEndTime.getHours() === 0 && eventEndTime.getMinutes() === 0 ? eventEndTime : addDays(eventEndTime, 1);
        var index = 1;
        var eventLength = getDaysCount(eventStartTime.getTime(), endDate.getTime());
        while (end <= eventEndTime && start.getTime() !== end.getTime()) {
          var app = extend({}, event2);
          app[eventFields.startTime] = start;
          app[eventFields.endTime] = end;
          app.data = { index, count: eventLength };
          app.Guid = this.generateGuid();
          app.isSpanned = true;
          data.push(app);
          start = end;
          if (resetTime(new Date(start.getTime())).getTime() === resetTime(new Date(eventEndTime.getTime())).getTime() && !(end.getTime() === eventEndTime.getTime())) {
            end = new Date(start.getTime());
            end = new Date(end.setHours(eventEndTime.getHours(), eventEndTime.getMinutes(), eventEndTime.getSeconds()));
          } else {
            end = addDays(resetTime(new Date(start.getTime())), 1);
          }
          index++;
        }
      } else {
        data.push(event2);
      }
      return data;
    };
    EventBase2.prototype.splitEvent = function(event2, dateRender) {
      var fields = this.parent.eventFields;
      var start = resetTime(event2[fields.startTime]).getTime();
      var end = resetTime(event2[fields.endTime]).getTime();
      if (getDateInMs(event2[fields.endTime]) <= 0) {
        var temp = addDays(resetTime(event2[fields.endTime]), -1).getTime();
        end = start > temp ? start : temp;
      }
      var orgStart = start;
      var orgEnd = end;
      var ranges = [];
      if (start !== end) {
        if (start < dateRender[0].getTime()) {
          start = dateRender[0].getTime();
        }
        if (end > dateRender[dateRender.length - 1].getTime()) {
          end = dateRender[dateRender.length - 1].getTime();
        }
        var cStart = start;
        for (var level = 0; level < this.slots.length; level++) {
          var slot = this.slots[parseInt(level.toString(), 10)];
          if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek" || this.parent.activeViewOptions.group.byDate || this.parent.activeViewOptions.showWeekend) {
            var slotDates = [];
            for (var _i = 0, slot_1 = slot; _i < slot_1.length; _i++) {
              var s = slot_1[_i];
              slotDates.push(new Date(s));
            }
            var renderedDates = this.getRenderedDates(slotDates);
            if (!isNullOrUndefined(renderedDates) && renderedDates.length > 0) {
              slot = [];
              for (var _a = 0, renderedDates_1 = renderedDates; _a < renderedDates_1.length; _a++) {
                var date = renderedDates_1[_a];
                slot.push(date.getTime());
              }
            }
          }
          if (typeof slot === "number") {
            var temp = slot;
            slot = [];
            slot.push(temp);
          }
          var firstSlot = slot[0];
          cStart = cStart <= firstSlot && end >= firstSlot ? firstSlot : cStart;
          if (cStart > end || firstSlot > end) {
            break;
          }
          if (!this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.showWeekend && this.parent.currentView !== "WorkWeek" && this.parent.currentView !== "TimelineWorkWeek") {
            var startIndex = slot.indexOf(cStart);
            if (startIndex !== -1) {
              var endIndex = slot.indexOf(end);
              var hasBreak = endIndex !== -1;
              endIndex = hasBreak ? endIndex : slot.length - 1;
              var count = endIndex - startIndex + 1;
              var isLeft = slot[parseInt(startIndex.toString(), 10)] !== orgStart;
              var isRight = slot[parseInt(endIndex.toString(), 10)] !== orgEnd;
              ranges.push(this.cloneEventObject(event2, slot[parseInt(startIndex.toString(), 10)], slot[parseInt(endIndex.toString(), 10)], count, isLeft, isRight));
              if (hasBreak) {
                break;
              }
            }
          } else {
            if (this.dateInRange(cStart, slot[0], slot[slot.length - 1])) {
              var availSlot = [];
              for (var i = 0; i < slot.length; i++) {
                if (this.dateInRange(slot[parseInt(i.toString(), 10)], orgStart, orgEnd)) {
                  availSlot.push(slot[parseInt(i.toString(), 10)]);
                }
              }
              if (availSlot.length > 0) {
                if (!this.parent.activeViewOptions.group.byDate) {
                  var isLeft = availSlot[0] !== orgStart;
                  var isRight = availSlot[availSlot.length - 1] !== orgEnd;
                  ranges.push(this.cloneEventObject(event2, availSlot[0], availSlot[availSlot.length - 1], availSlot.length, isLeft, isRight));
                } else {
                  for (var _b = 0, availSlot_1 = availSlot; _b < availSlot_1.length; _b++) {
                    var slot_2 = availSlot_1[_b];
                    ranges.push(this.cloneEventObject(event2, slot_2, slot_2, 1, slot_2 !== orgStart, slot_2 !== orgEnd));
                  }
                }
              }
            }
          }
        }
      } else {
        ranges.push(this.cloneEventObject(event2, start, end, 1, false, false));
      }
      return ranges;
    };
    EventBase2.prototype.cloneEventObject = function(event2, start, end, count, isLeft, isRight) {
      var fields = this.parent.eventFields;
      var e = extend({}, event2, null, true);
      var data = { count, isLeft, isRight };
      data[fields.startTime] = event2[fields.startTime];
      data[fields.endTime] = event2[fields.endTime];
      e.data = data;
      e[fields.startTime] = new Date(start);
      e[fields.endTime] = new Date(end);
      return e;
    };
    EventBase2.prototype.dateInRange = function(date, start, end) {
      return start <= date && date <= end;
    };
    EventBase2.prototype.getSelectedEventElements = function(target) {
      this.removeSelectedAppointmentClass();
      if (this.parent.selectedElements.length <= 0) {
        this.parent.selectedElements.push(target);
      } else {
        var isAlreadySelected = this.parent.selectedElements.filter(function(element2) {
          return element2.getAttribute("data-guid") === target.getAttribute("data-guid");
        });
        if (isAlreadySelected.length <= 0) {
          var elementSelector = 'div[data-guid="' + target.getAttribute("data-guid") + '"]';
          var focusElements = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
          for (var _i = 0, focusElements_1 = focusElements; _i < focusElements_1.length; _i++) {
            var element = focusElements_1[_i];
            this.parent.selectedElements.push(element);
          }
        } else {
          var selectedElements = this.parent.selectedElements.filter(function(element2) {
            return element2.getAttribute("data-guid") !== target.getAttribute("data-guid");
          });
          this.parent.selectedElements = selectedElements;
        }
      }
      if (target && this.parent.selectedElements.length > 0) {
        this.addSelectedAppointments(this.parent.selectedElements, false);
      }
      return this.parent.selectedElements;
    };
    EventBase2.prototype.getSelectedEvents = function() {
      var _this = this;
      var eventSelect = [];
      var elementSelect = [];
      var selectAppointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER));
      selectAppointments.filter(function(element) {
        var isAlreadyAdded = eventSelect.filter(function(event2) {
          return event2.Guid === element.getAttribute("data-guid");
        });
        if (isAlreadyAdded.length === 0) {
          eventSelect.push(_this.getEventByGuid(element.getAttribute("data-guid")));
        }
        elementSelect.push(element);
      });
      return {
        event: eventSelect.length > 1 ? eventSelect : eventSelect[0],
        element: elementSelect.length > 1 ? elementSelect : elementSelect[0]
      };
    };
    EventBase2.prototype.removeSelectedAppointmentClass = function() {
      var selectedAppointments = this.getSelectedAppointments();
      removeClass(selectedAppointments, APPOINTMENT_BORDER);
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        removeClass(selectedAppointments, AGENDA_SELECTED_CELL);
      }
    };
    EventBase2.prototype.addSelectedAppointments = function(cells, preventFocus) {
      if (this.parent.currentView !== "MonthAgenda") {
        this.parent.removeSelectedClass();
      }
      addClass(cells, APPOINTMENT_BORDER);
      if (cells.length > 0 && !preventFocus) {
        cells[cells.length - 1].focus();
      }
    };
    EventBase2.prototype.getSelectedAppointments = function() {
      return [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER + ",." + APPOINTMENT_CLASS + ":focus"));
    };
    EventBase2.prototype.focusElement = function(isFocused) {
      if (this.parent.eventWindow.dialogObject && this.parent.eventWindow.dialogObject.visible) {
        return;
      }
      var activeEle = document.activeElement;
      var selectedCell = this.parent.getSelectedCells();
      if (selectedCell.length > 0 && (activeEle && (this.parent.element.contains(activeEle) || selectedCell.indexOf(activeEle) !== -1) || isFocused)) {
        if (this.parent.keyboardInteractionModule) {
          var target = !isNullOrUndefined(this.parent.activeCellsData) && this.parent.activeCellsData.element || selectedCell[selectedCell.length - 1];
          this.parent.keyboardInteractionModule.selectCells(target instanceof Array, target);
        }
        return;
      }
      var selectedAppointments = this.getSelectedAppointments();
      if (selectedAppointments.length > 0) {
        if (this.parent.activeEventData && this.parent.activeEventData.element && selectedAppointments.indexOf(this.parent.activeEventData.element) > -1) {
          this.parent.activeEventData.element.focus();
          return;
        }
        selectedAppointments[selectedAppointments.length - 1].focus();
        return;
      }
    };
    EventBase2.prototype.selectWorkCellByTime = function(eventsData) {
      var target;
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        return target;
      }
      if (eventsData.length > 0) {
        var selectedObject = eventsData[eventsData.length - 1];
        var eventStartTime = selectedObject[this.parent.eventFields.startTime];
        var nearestTime = (/* @__PURE__ */ new Date(+eventStartTime)).setMinutes(0, 0, 0);
        var isAllDay = this.isAllDayAppointment(selectedObject);
        if (this.parent.currentView === "Month" || isAllDay) {
          nearestTime = (/* @__PURE__ */ new Date(+eventStartTime)).setHours(0, 0, 0, 0);
        }
        var targetArea = void 0;
        if (isAllDay && ["Day", "Week", "WorkWeek"].indexOf(this.parent.currentView) !== -1) {
          targetArea = this.parent.getAllDayRow();
        } else {
          targetArea = this.parent.getContentTable();
        }
        var queryString2 = '[data-date="' + new Date(nearestTime).getTime() + '"]';
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          queryString2 += '[data-group-index="' + this.getGroupIndexFromEvent(selectedObject) + '"]';
        }
        target = targetArea.querySelector(queryString2);
        if (target) {
          this.parent.activeCellsData = this.parent.getCellDetails(target);
          if (this.parent.keyboardInteractionModule) {
            this.parent.keyboardInteractionModule.selectCells(false, target);
          }
          return target;
        }
      }
      return target;
    };
    EventBase2.prototype.getGroupIndexFromEvent = function(eventData) {
      var levelIndex;
      var resource;
      var levelName;
      var idField;
      for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {
        var resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];
        if (!isNullOrUndefined(resourceData)) {
          resource = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];
          levelIndex = i;
          levelName = resource.name;
          idField = resource.field;
          break;
        }
      }
      if (isNullOrUndefined(levelName) && isNullOrUndefined(levelIndex)) {
        levelName = this.parent.resourceCollection.slice(-1)[0].name;
        levelIndex = this.parent.resourceCollection.length - 1;
        idField = this.parent.resourceCollection.slice(-1)[0].field;
        resource = this.parent.resourceCollection.filter(function(e, index) {
          if (e.name === levelName) {
            levelIndex = index;
            return e;
          }
          return null;
        })[0];
      }
      var id = eventData["" + idField] instanceof Array ? eventData["" + idField][0] : eventData["" + idField];
      if (levelIndex > 0) {
        var parentField = this.parent.resourceCollection[levelIndex - 1].field;
        return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource, eventData, parentField);
      } else {
        return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource);
      }
    };
    EventBase2.prototype.isAllDayAppointment = function(event2) {
      var fieldMapping = this.parent.eventFields;
      var isAllDay = event2[fieldMapping.isAllDay];
      var isFullDay = (getUniversalTime(event2[fieldMapping.endTime]) - getUniversalTime(event2[fieldMapping.startTime])) / MS_PER_DAY >= 1;
      return isAllDay || this.parent.eventSettings.spannedEventPlacement !== "TimeSlot" && isFullDay ? true : false;
    };
    EventBase2.prototype.addEventListener = function() {
      this.parent.on(documentClick, this.appointmentBorderRemove, this);
    };
    EventBase2.prototype.removeEventListener = function() {
      this.parent.off(documentClick, this.appointmentBorderRemove);
    };
    EventBase2.prototype.appointmentBorderRemove = function(event2) {
      var element = event2.event.target;
      if (closest(element, "." + APPOINTMENT_CLASS)) {
        if (this.parent.currentView !== "MonthAgenda") {
          this.parent.removeSelectedClass();
        }
      } else if (!closest(element, "." + POPUP_OPEN)) {
        if (this.parent.uiStateValues.isTapHold && closest(element, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS)) {
          return;
        }
        this.parent.uiStateValues.isTapHold = false;
        this.removeSelectedAppointmentClass();
        this.parent.selectedElements = [];
      }
    };
    EventBase2.prototype.wireAppointmentEvents = function(element, event2, isPreventCrud) {
      if (isPreventCrud === void 0) {
        isPreventCrud = false;
      }
      var isReadOnly = !isNullOrUndefined(event2) ? event2[this.parent.eventFields.isReadonly] : false;
      EventHandler.add(element, "click", this.eventClick, this);
      if (!this.parent.isAdaptive && !this.parent.activeViewOptions.readonly && !isReadOnly) {
        EventHandler.add(element, "touchend", this.eventTouchClick, this);
        EventHandler.add(element, "dblclick", this.eventDoubleClick, this);
      }
      if (!this.parent.activeViewOptions.readonly && !isReadOnly && !isPreventCrud) {
        if (this.parent.resizeModule) {
          this.parent.resizeModule.wireResizeEvent(element);
        }
        if (this.parent.dragAndDropModule) {
          this.parent.dragAndDropModule.wireDragEvent(element);
        }
      }
    };
    EventBase2.prototype.eventTouchClick = function(e) {
      var _this = this;
      if (this.parent.uiStateValues.isTouchScroll || this.parent.uiStateValues.isTapHold || this.parent.uiStateValues.action) {
        this.parent.uiStateValues.isTouchScroll = this.parent.uiStateValues.isTapHold = false;
        return;
      }
      setTimeout(function() {
        return _this.isDoubleTapped = false;
      }, 250);
      e.preventDefault();
      if (this.isDoubleTapped) {
        this.eventDoubleClick(e);
      } else if (!this.isDoubleTapped) {
        this.isDoubleTapped = true;
        this.eventClick(e);
      }
    };
    EventBase2.prototype.renderResizeHandler = function(element, spanEvent, isReadOnly) {
      if (!this.parent.resizeModule || !this.parent.allowResizing || this.parent.activeViewOptions.readonly || isReadOnly) {
        return;
      }
      for (var _i = 0, _a = Object.keys(spanEvent); _i < _a.length; _i++) {
        var resizeEdge = _a[_i];
        var resizeHandler = createElement("div", { className: EVENT_RESIZE_CLASS });
        switch (resizeEdge) {
          case "isLeft":
            if (!spanEvent.isLeft) {
              resizeHandler.appendChild(createElement("div", { className: "e-left-right-resize" }));
              addClass([resizeHandler], this.parent.enableRtl ? RIGHT_RESIZE_HANDLER : LEFT_RESIZE_HANDLER);
              prepend([resizeHandler], element);
            }
            break;
          case "isRight":
            if (!spanEvent.isRight) {
              resizeHandler.appendChild(createElement("div", { className: "e-left-right-resize" }));
              addClass([resizeHandler], this.parent.enableRtl ? LEFT_RESIZE_HANDLER : RIGHT_RESIZE_HANDLER);
              append([resizeHandler], element);
            }
            break;
          case "isTop":
            if (!spanEvent.isTop) {
              resizeHandler.appendChild(createElement("div", { className: "e-top-bottom-resize" }));
              addClass([resizeHandler], TOP_RESIZE_HANDLER);
              prepend([resizeHandler], element);
            }
            break;
          case "isBottom":
            if (!spanEvent.isBottom) {
              resizeHandler.appendChild(createElement("div", { className: "e-top-bottom-resize" }));
              addClass([resizeHandler], BOTTOM_RESIZE_HANDLER);
              append([resizeHandler], element);
            }
            break;
        }
      }
    };
    EventBase2.prototype.eventClick = function(eventData) {
      var _this = this;
      var target = eventData.target;
      if (target.classList.contains(DRAG_CLONE_CLASS) || target.classList.contains(RESIZE_CLONE_CLASS) || target.classList.contains(INLINE_SUBJECT_CLASS)) {
        return;
      }
      if ((eventData.ctrlKey || eventData.metaKey) && eventData.which === 1 && this.parent.keyboardInteractionModule) {
        this.parent.quickPopup.quickPopup.hide();
        this.parent.selectedElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_BORDER));
        var target_1 = closest(eventData.target, "." + APPOINTMENT_CLASS);
        this.getSelectedEventElements(target_1);
        this.activeEventData(eventData, false);
        var selectArgs = {
          data: this.parent.activeEventData.event,
          element: this.parent.activeEventData.element,
          event: eventData,
          requestType: "eventSelect"
        };
        this.parent.trigger(select2, selectArgs);
        var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
        this.parent.trigger(eventClick, args);
      } else {
        this.removeSelectedAppointmentClass();
        this.activeEventData(eventData, true);
        var selectEventArgs = {
          data: this.parent.activeEventData.event,
          element: this.parent.activeEventData.element,
          event: eventData,
          requestType: "eventSelect"
        };
        this.parent.trigger(select2, selectEventArgs);
        var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
        this.parent.trigger(eventClick, args, function(eventClickArgs) {
          if (eventClickArgs.cancel) {
            _this.removeSelectedAppointmentClass();
            _this.parent.selectedElements = [];
            if (_this.parent.quickPopup) {
              _this.parent.quickPopup.quickPopupHide();
            }
          } else {
            if (_this.parent.currentView === "Agenda" || _this.parent.currentView === "MonthAgenda") {
              addClass([_this.parent.activeEventData.element], AGENDA_SELECTED_CELL);
            }
            if (_this.parent.allowInline) {
              var inlineArgs = {
                data: eventClickArgs.event,
                element: eventClickArgs.element,
                type: "Event"
              };
              _this.parent.notify(inlineClick, inlineArgs);
            } else {
              _this.parent.notify(eventClick, eventClickArgs);
            }
          }
        });
      }
    };
    EventBase2.prototype.eventDoubleClick = function(eventData) {
      var _this = this;
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      if (eventData.type === "touchend") {
        this.activeEventData(eventData, true);
      }
      this.removeSelectedAppointmentClass();
      this.parent.selectedElements = [];
      if (this.parent.activeEventData.element.classList.contains(INLINE_APPOINTMENT_CLASS) || this.parent.activeEventData.element.querySelector("." + INLINE_SUBJECT_CLASS)) {
        return;
      }
      var args = extend(this.parent.activeEventData, { cancel: false, originalEvent: eventData });
      this.parent.trigger(eventDoubleClick, args, function(eventDoubleClickArgs) {
        if (!eventDoubleClickArgs.cancel) {
          if (!isNullOrUndefined(_this.parent.activeEventData.event) && isNullOrUndefined(_this.parent.activeEventData.event[_this.parent.eventFields.recurrenceID])) {
            _this.parent.eventWindow.openEditor(_this.parent.activeEventData.event, "Save");
          } else {
            _this.parent.currentAction = "EditOccurrence";
            _this.parent.quickPopup.openRecurrenceAlert();
          }
        }
      });
    };
    EventBase2.prototype.getEventByGuid = function(guid) {
      return this.parent.eventsProcessed.filter(function(data) {
        return data.Guid === guid;
      })[0];
    };
    EventBase2.prototype.getEventById = function(id) {
      var _this = this;
      return this.parent.eventsData.filter(function(data) {
        return data[_this.parent.eventFields.id] === id;
      })[0];
    };
    EventBase2.prototype.generateGuid = function() {
      return "xyxxxxyx-xxxy-yxxx-xyxx-xxyxxxxyyxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    EventBase2.prototype.getEventIDType = function() {
      if (this.parent.eventsData.length !== 0) {
        return typeof this.parent.eventsData[0][this.parent.eventFields.id];
      }
      if (this.parent.blockData.length !== 0) {
        return typeof this.parent.blockData[0][this.parent.eventFields.id];
      }
      return "string";
    };
    EventBase2.prototype.getEventMaxID = function(resourceId) {
      var _this = this;
      if (this.parent.eventsData.length < 1 && this.parent.blockData.length < 1) {
        return 1;
      }
      var eventId;
      var idType = this.getEventIDType();
      if (idType === "string") {
        eventId = this.generateGuid();
      }
      if (idType === "number") {
        var datas = this.parent.eventsData.concat(this.parent.blockData);
        var appIds = datas.map(function(event2) {
          return event2[_this.parent.eventFields.id];
        });
        var maxId = appIds.reduce(function(a, b) {
          return Math.max(a, b);
        });
        maxId = isNullOrUndefined(resourceId) ? maxId : maxId + resourceId;
        eventId = maxId + 1;
      }
      return eventId;
    };
    EventBase2.prototype.activeEventData = function(eventData, isMultiple) {
      var _this = this;
      var target = closest(eventData.target, "." + APPOINTMENT_CLASS);
      var guid = target.getAttribute("data-guid");
      if (isMultiple) {
        this.addSelectedAppointments([].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]')), true);
        target.focus();
      }
      var eventObject = this.getEventByGuid(guid);
      if (eventObject && eventObject.isSpanned) {
        eventObject = this.parent.eventsData.filter(function(obj) {
          return obj[_this.parent.eventFields.id] === eventObject[_this.parent.eventFields.id];
        })[0];
      }
      this.parent.activeEventData = { event: eventObject, element: target };
    };
    EventBase2.prototype.generateOccurrence = function(event2, viewDate, isMaxCount) {
      var startDate = event2[this.parent.eventFields.startTime];
      var endDate = event2[this.parent.eventFields.endTime];
      var eventRule = event2[this.parent.eventFields.recurrenceRule];
      var timeZoneDiff = endDate.getTimezoneOffset() - startDate.getTimezoneOffset();
      var duration = endDate.getTime() - startDate.getTime() - timeZoneDiff * 6e4;
      viewDate = new Date((viewDate || this.parent.activeView.startDate()).getTime() - duration);
      var exception = event2[this.parent.eventFields.recurrenceException];
      var maxCount;
      if (this.parent.currentView !== "Agenda" && isMaxCount) {
        maxCount = getDateCount(viewDate, this.parent.activeView.endDate()) + 1;
      }
      var newTimezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      var firstDay = this.parent.activeViewOptions.firstDayOfWeek;
      var calendarMode = this.parent.calendarMode;
      var dates = generate(startDate, eventRule, exception, firstDay, maxCount, viewDate, calendarMode, newTimezone);
      if (this.parent.currentView === "Agenda" && eventRule.indexOf("COUNT") === -1 && eventRule.indexOf("UNTIL") === -1) {
        if (isNullOrUndefined(event2.generatedDates)) {
          event2.generatedDates = { start: new Date(dates[0]), end: new Date(dates[dates.length - 1]) };
        } else {
          if (dates[0] < event2.generatedDates.start.getTime()) {
            event2.generatedDates.start = new Date(dates[0]);
          }
          if (dates[dates.length - 1] > event2.generatedDates.end.getTime()) {
            event2.generatedDates.end = new Date(dates[dates.length - 1]);
          }
        }
      }
      var occurrenceCollection = [];
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var date = dates_1[_i];
        var clonedObject = extend({}, event2, null, true);
        date = this.getDSTAdjustedTime(date, clonedObject);
        clonedObject[this.parent.eventFields.startTime] = new Date(date);
        clonedObject[this.parent.eventFields.endTime] = new Date(new Date(date).setMilliseconds(duration));
        clonedObject[this.parent.eventFields.recurrenceID] = clonedObject[this.parent.eventFields.id];
        delete clonedObject[this.parent.eventFields.recurrenceException];
        delete clonedObject[this.parent.eventFields.followingID];
        clonedObject.Guid = this.generateGuid();
        occurrenceCollection.push(clonedObject);
      }
      return occurrenceCollection;
    };
    EventBase2.prototype.getDSTAdjustedTime = function(date, event2) {
      var occurDate = date;
      if (this.parent.timezone && (event2[this.parent.eventFields.startTimezone] || event2[this.parent.eventFields.endTimezone])) {
        var eventOffset = this.getDSTDiff(event2[this.parent.eventFields.startTime], new Date(date), event2[this.parent.eventFields.startTimezone]);
        var schOffset = this.getDSTDiff(event2[this.parent.eventFields.startTime], new Date(date), this.parent.timezone);
        occurDate = new Date(date).getTime() - (eventOffset - schOffset) * 6e4;
      }
      return occurDate;
    };
    EventBase2.prototype.getDSTDiff = function(startDate, occurDate, timezone) {
      var startOffset = this.parent.tzModule.offset(new Date(startDate), timezone);
      var occurOffset = this.parent.tzModule.offset(new Date(occurDate), timezone);
      return startOffset - occurOffset;
    };
    EventBase2.prototype.getParentEvent = function(eventObj, isParent) {
      if (isParent === void 0) {
        isParent = false;
      }
      var parentEvent;
      do {
        eventObj = this.getFollowingEvent(eventObj);
        if (eventObj) {
          parentEvent = extend({}, eventObj, null, true);
        }
      } while (eventObj && isParent);
      if (isParent && parentEvent) {
        var collection = this.getEventCollections(parentEvent);
        var followObj = collection.follow.slice(-1)[0];
        if (collection.occurrence.length > 0 && !parentEvent[this.parent.eventFields.recurrenceException]) {
          followObj = collection.occurrence.slice(-1)[0];
        }
        if (followObj) {
          parentEvent[this.parent.eventFields.recurrenceRule] = followObj[this.parent.eventFields.recurrenceRule];
        }
      }
      return parentEvent;
    };
    EventBase2.prototype.getEventCollections = function(parentObj, childObj) {
      var followingCollection = [];
      var occurrenceCollection = [];
      var followingEvent = parentObj;
      do {
        followingEvent = this.getFollowingEvent(followingEvent, true);
        if (followingEvent) {
          followingCollection.push(followingEvent);
        }
        occurrenceCollection = occurrenceCollection.concat(this.getOccurrenceEvent(followingEvent || parentObj));
      } while (followingEvent);
      var collections = {};
      if (childObj) {
        var fields_1 = this.parent.eventFields;
        collections = {
          follow: followingCollection.filter(function(eventData) {
            return eventData[fields_1.startTime] >= childObj[fields_1.startTime];
          }),
          occurrence: occurrenceCollection.filter(function(eventData) {
            return eventData[fields_1.startTime] >= childObj[fields_1.startTime];
          })
        };
      } else {
        collections = { follow: followingCollection, occurrence: occurrenceCollection };
      }
      return collections;
    };
    EventBase2.prototype.getFollowingEvent = function(parentObj, isReverse) {
      var fields = this.parent.eventFields;
      var fieldValue;
      if (isReverse) {
        fieldValue = parentObj[fields.id];
      } else {
        fieldValue = parentObj[fields.recurrenceID] || parentObj[fields.followingID];
      }
      var parentApp = this.parent.eventsData.filter(function(data) {
        return data[isReverse ? fields.followingID : fields.id] === fieldValue;
      });
      return parentApp.shift();
    };
    EventBase2.prototype.isFollowingEvent = function(parentObj, childObj) {
      var parentStart = parentObj[this.parent.eventFields.startTime];
      var childStart = childObj[this.parent.eventFields.startTime];
      return parentStart.getHours() === childStart.getHours() && parentStart.getMinutes() === childStart.getMinutes() && parentStart.getSeconds() === childStart.getSeconds();
    };
    EventBase2.prototype.getOccurrenceEvent = function(eventObj, isGuid, isFollowing) {
      if (isGuid === void 0) {
        isGuid = false;
      }
      if (isFollowing === void 0) {
        isFollowing = false;
      }
      var idField = isGuid ? "Guid" : isFollowing ? this.parent.eventFields.followingID : this.parent.eventFields.recurrenceID;
      var fieldKey = isGuid ? "Guid" : this.parent.eventFields.id;
      var dataSource = isGuid ? this.parent.eventsProcessed : this.parent.eventsData;
      return dataSource.filter(function(data) {
        return data["" + idField] === eventObj["" + fieldKey];
      });
    };
    EventBase2.prototype.getOccurrencesByID = function(id) {
      var fields = this.parent.eventFields;
      var occurrenceCollection = [];
      var parentObject = this.parent.eventsData.filter(function(obj) {
        return obj[fields.id] === id;
      });
      for (var _i = 0, parentObject_1 = parentObject; _i < parentObject_1.length; _i++) {
        var event_3 = parentObject_1[_i];
        if (!isNullOrUndefined(event_3[fields.recurrenceRule])) {
          occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_3));
        }
      }
      return occurrenceCollection;
    };
    EventBase2.prototype.getOccurrencesByRange = function(startTime, endTime) {
      var fields = this.parent.eventFields;
      var occurrenceCollection = [];
      for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {
        var event_4 = _a[_i];
        if (!isNullOrUndefined(event_4[fields.recurrenceRule])) {
          occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_4));
        }
      }
      var filter = occurrenceCollection.filter(function(obj) {
        return obj[fields.startTime] >= startTime && obj[fields.endTime] <= endTime && !isNullOrUndefined(obj[fields.recurrenceID]);
      });
      return filter;
    };
    EventBase2.prototype.getDeletedOccurrences = function(recurrenceData) {
      var fields = this.parent.eventFields;
      var parentObject;
      var deletedOccurrences = [];
      if (typeof recurrenceData === "string" || typeof recurrenceData === "number") {
        parentObject = this.parent.eventsData.filter(function(obj) {
          return obj[fields.id] === recurrenceData;
        })[0];
      } else {
        parentObject = extend({}, recurrenceData, null, true);
      }
      if (parentObject[fields.recurrenceException]) {
        var exDateString_1 = parentObject[fields.recurrenceException].split(",");
        var _loop_3 = function(i2, len2) {
          var edited = this_2.parent.eventsData.filter(function(eventObj) {
            return eventObj[fields.recurrenceID] === parentObject[fields.id] && eventObj[fields.recurrenceException] === exDateString_1[parseInt(i2.toString(), 10)];
          });
          if (edited.length === 0) {
            var exDate = getDateFromRecurrenceDateString(exDateString_1[parseInt(i2.toString(), 10)]);
            var childObject = extend({}, recurrenceData, null, true);
            childObject[fields.recurrenceID] = parentObject[fields.id];
            delete childObject[fields.followingID];
            childObject[fields.recurrenceException] = exDateString_1[parseInt(i2.toString(), 10)];
            var startDate = new Date(exDate.getTime());
            var time = parentObject[fields.endTime].getTime() - parentObject[fields.startTime].getTime();
            var endDate = new Date(startDate.getTime());
            endDate.setMilliseconds(time);
            childObject[fields.startTime] = new Date(startDate.getTime());
            childObject[fields.endTime] = new Date(endDate.getTime());
            deletedOccurrences.push(childObject);
          }
        };
        var this_2 = this;
        for (var i = 0, len = exDateString_1.length; i < len; i++) {
          _loop_3(i, len);
        }
      }
      return deletedOccurrences;
    };
    EventBase2.prototype.applyResourceColor = function(element, data, type, index, alpha) {
      if (!this.parent.resourceBase) {
        return;
      }
      var alphaColor = function(color2, alpha2) {
        color2 = color2.replace("#", "");
        var r = parseInt(color2.substring(0, color2.length / 3), 16);
        var g = parseInt(color2.substring(color2.length / 3, 2 * color2.length / 3), 16);
        var b = parseInt(color2.substring(2 * color2.length / 3, 3 * color2.length / 3), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha2 + ")";
      };
      var color = this.parent.resourceBase.getResourceColor(data, index);
      if (color) {
        element.style[type] = !isNullOrUndefined(alpha) ? alphaColor(color, alpha) : color;
      }
    };
    EventBase2.prototype.createBlockAppointmentElement = function(record, resIndex, isResourceEventTemplate) {
      var eventSubject = record[this.parent.eventFields.subject] || this.parent.eventSettings.fields.subject.default;
      var appointmentWrapper = createElement("div", {
        className: BLOCK_APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[this.parent.eventFields.id],
          "aria-disabled": "true"
        }
      });
      var templateElement;
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = scheduleId + viewName + "eventTemplate";
        var templateName = isResourceEventTemplate && this.parent.currentView.indexOf("Year") === -1 ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(eventSubject, appointmentSubject);
        templateElement = [appointmentSubject];
      }
      append(templateElement, appointmentWrapper);
      this.setWrapperAttributes(appointmentWrapper, resIndex);
      return appointmentWrapper;
    };
    EventBase2.prototype.setWrapperAttributes = function(appointmentWrapper, resIndex) {
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        appointmentWrapper.setAttribute("data-group-index", resIndex.toString());
      }
    };
    EventBase2.prototype.getReadonlyAttribute = function(event2) {
      return (event2[this.parent.eventFields.isReadonly] || this.parent.readonly).toString();
    };
    EventBase2.prototype.isBlockRange = function(eventData) {
      var eventCollection = eventData instanceof Array ? eventData : [eventData];
      var isBlockAlert = false;
      var fields = this.parent.eventFields;
      for (var _i = 0, _a = eventCollection; _i < _a.length; _i++) {
        var event_5 = _a[_i];
        var dataCol = [];
        if (!isNullOrUndefined(event_5[fields.recurrenceRule]) && (isNullOrUndefined(event_5[fields.recurrenceID]) || event_5[fields.id] === event_5[fields.recurrenceID])) {
          dataCol = this.generateOccurrence(event_5);
        } else {
          dataCol.push(event_5);
        }
        for (var _b = 0, dataCol_1 = dataCol; _b < dataCol_1.length; _b++) {
          var data = dataCol_1[_b];
          var filterBlockEvents = this.filterBlockEvents(data);
          if (filterBlockEvents.length > 0) {
            isBlockAlert = true;
            break;
          }
        }
      }
      this.parent.uiStateValues.isBlock = isBlockAlert;
      return isBlockAlert;
    };
    EventBase2.prototype.getFilterEventsList = function(dataSource, query) {
      return new DataManager(dataSource).executeLocal(new Query().where(query));
    };
    EventBase2.prototype.getSeriesEvents = function(parentEvent, startTime) {
      var fields = this.parent.eventFields;
      startTime = isNullOrUndefined(startTime) ? parentEvent[fields.startTime] : startTime;
      var deleteFutureEditEvents;
      var futureEvents;
      var deleteFutureEditEventList = [];
      var delId = parentEvent[fields.id];
      var followingId = parentEvent[fields.followingID];
      var deleteFutureEvent;
      var startTimeQuery = this.parent.currentAction === "EditSeries" ? "greaterthan" : "greaterthanorequal";
      do {
        deleteFutureEvent = new Predicate(fields.followingID, "equal", delId).and(new Predicate(fields.startTime, startTimeQuery, startTime));
        futureEvents = this.getFilterEventsList(this.parent.eventsData, deleteFutureEvent);
        deleteFutureEditEvents = futureEvents.slice(-1)[0];
        if (!isNullOrUndefined(deleteFutureEditEvents) && deleteFutureEditEvents[fields.id] !== followingId) {
          deleteFutureEditEventList.push(deleteFutureEditEvents);
          delId = deleteFutureEditEvents[fields.id];
          followingId = deleteFutureEditEvents[fields.followingID];
        } else {
          followingId = null;
        }
      } while (futureEvents.length === 1 && !isNullOrUndefined(deleteFutureEditEvents[fields.followingID]));
      return deleteFutureEditEventList;
    };
    EventBase2.prototype.getEditedOccurrences = function(deleteFutureEditEventList, startTime) {
      var fields = this.parent.eventFields;
      var deleteRecurrenceEventList = [];
      var delEditedEvents;
      for (var _i = 0, deleteFutureEditEventList_1 = deleteFutureEditEventList; _i < deleteFutureEditEventList_1.length; _i++) {
        var event_6 = deleteFutureEditEventList_1[_i];
        var delEventQuery = new Predicate(fields.recurrenceID, "equal", event_6[fields.id]).or(new Predicate(fields.recurrenceID, "equal", event_6[fields.followingID]).and(new Predicate(fields.recurrenceID, "notequal", void 0)).and(new Predicate(fields.recurrenceID, "notequal", null)));
        if (this.parent.currentAction === "EditFollowingEvents" || this.parent.currentAction === "DeleteFollowingEvents") {
          delEventQuery = delEventQuery.and(new Predicate(fields.startTime, "greaterthanorequal", startTime));
        }
        delEditedEvents = this.getFilterEventsList(this.parent.eventsData, delEventQuery);
        deleteRecurrenceEventList = deleteRecurrenceEventList.concat(delEditedEvents);
      }
      return deleteRecurrenceEventList;
    };
    EventBase2.prototype.getRenderedDates = function(dateRender) {
      var firstDate = 0;
      var lastDate = dateRender.length;
      var filteredDates;
      var maxDate = isNullOrUndefined(this.parent.maxDate) ? new Date(2099, 11, 31) : this.parent.maxDate;
      var minDate = isNullOrUndefined(this.parent.minDate) ? new Date(1900, 0, 1) : this.parent.minDate;
      if (dateRender[0] < minDate && dateRender[dateRender.length - 1] > maxDate) {
        for (var i = 0; i < dateRender.length; i++) {
          if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(minDate)).getTime()) {
            firstDate = i;
          }
          if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(maxDate)).getTime()) {
            lastDate = i;
          }
        }
        filteredDates = dateRender.filter(function(date) {
          return date >= dateRender[parseInt(firstDate.toString(), 10)] && date <= dateRender[parseInt(lastDate.toString(), 10)];
        });
      }
      return filteredDates;
    };
    EventBase2.prototype.isValidEvent = function(eventObj, start, end, schedule) {
      var isHourRange = end.getTime() > schedule.startHour.getTime() && start.getTime() < schedule.endHour.getTime();
      var isSameRange = schedule.startHour.getTime() <= start.getTime() && eventObj[this.parent.eventFields.startTime].getTime() >= schedule.startHour.getTime() && eventObj[this.parent.eventFields.endTime].getTime() < schedule.endHour.getTime() && start.getTime() === end.getTime();
      return isHourRange || isSameRange;
    };
    EventBase2.prototype.allDayExpandScroll = function(dateHeader) {
      var indentHeight = 0;
      var headerRows = [].slice.call(this.parent.element.querySelectorAll("." + HEADER_ROW_CLASS));
      headerRows.forEach(function(element) {
        var tdEle = [].slice.call(element.children);
        tdEle.forEach(function(ele) {
          ele.style.top = indentHeight + "px";
        });
        indentHeight += element.offsetHeight;
      });
      indentHeight = dateHeader.offsetHeight - indentHeight;
      this.parent.element.querySelector("." + ALLDAY_CELLS_CLASS).style.height = indentHeight / 12 + "em";
      if (this.parent.uiStateValues.expand) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      } else {
        removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      }
    };
    EventBase2.prototype.updateEventMinimumDuration = function(startEndHours, startTime, endTime) {
      if (startTime.getTime() < endTime.getTime() || startTime.getTime() === endTime.getTime() && (startEndHours.startHour.getTime() < endTime.getTime() && startEndHours.endHour.getTime() > startTime.getTime()) && this.parent.currentView.indexOf("Timeline") === -1) {
        var eventDuration = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE;
        if (eventDuration < this.parent.eventSettings.minimumEventDuration) {
          var tempEnd = new Date(startTime);
          tempEnd.setMinutes(tempEnd.getMinutes() + this.parent.eventSettings.minimumEventDuration);
          endTime = tempEnd;
          if (endTime.getTime() > startEndHours.endHour.getTime()) {
            var tempStart = new Date(startEndHours.endHour.getTime());
            tempStart.setMinutes(tempStart.getMinutes() - this.parent.eventSettings.minimumEventDuration);
            startTime = tempStart;
            endTime = startEndHours.endHour;
          }
        }
      }
      return { startDate: startTime, endDate: endTime };
    };
    EventBase2.prototype.createEventWrapper = function(type, index) {
      if (type === void 0) {
        type = "";
      }
      if (index === void 0) {
        index = 0;
      }
      var tr = createElement("tr");
      var levels = this.parent.activeView.colLevels.slice(-1)[0];
      var className = this.parent.isReact && this.parent.activeViewOptions.eventTemplate ? " " + APPOINTMENT_WRAPPER_HIDDEN_CLASS : "";
      for (var i = 0, len = levels.length; i < len; i++) {
        var col = levels[parseInt(i.toString(), 10)];
        var appointmentWrap = createElement("td", {
          className: type === "allDay" ? ALLDAY_APPOINTMENT_WRAPPER_CLASS + className : type === "timeIndicator" ? TIMELINE_WRAPPER_CLASS : DAY_WRAPPER_CLASS + className,
          attrs: { "data-date": col.date.getTime().toString() }
        });
        if (!isNullOrUndefined(col.groupIndex)) {
          appointmentWrap.setAttribute("data-group-index", col.groupIndex.toString());
        }
        if (type === "") {
          var innerWrapper = createElement("div", {
            id: APPOINTMENT_WRAPPER_CLASS + "-" + index.toString(),
            className: APPOINTMENT_WRAPPER_CLASS
          });
          appointmentWrap.appendChild(innerWrapper);
        }
        tr.appendChild(appointmentWrap);
        index = index + 1;
      }
      return tr;
    };
    EventBase2.prototype.getPageCoordinates = function(e) {
      if (isNullOrUndefined(e)) {
        return e;
      }
      var eventArgs = e.event;
      return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] : eventArgs || e;
    };
    EventBase2.prototype.renderSpannedIcon = function(element, spanEvent) {
      var iconElement = createElement("div", { className: EVENT_INDICATOR_CLASS + " " + ICON3 });
      if (spanEvent.isLeft) {
        var iconLeft = iconElement.cloneNode();
        addClass([iconLeft], EVENT_ICON_LEFT_CLASS);
        prepend([iconLeft], element);
      }
      if (spanEvent.isRight) {
        var iconRight = iconElement.cloneNode();
        addClass([iconRight], EVENT_ICON_RIGHT_CLASS);
        append([iconRight], element);
      }
      if (spanEvent.isTop) {
        var iconTop = iconElement.cloneNode();
        addClass([iconTop], EVENT_ICON_UP_CLASS);
        prepend([iconTop], element);
      }
      if (spanEvent.isBottom) {
        var iconBottom = iconElement.cloneNode();
        addClass([iconBottom], EVENT_ICON_DOWN_CLASS);
        append([iconBottom], element);
      }
    };
    EventBase2.prototype.addCellHeight = function(selector, eventHeight, eventGap, headerHeight, indHeight, isScrollUpdate) {
      if (isScrollUpdate === void 0) {
        isScrollUpdate = true;
      }
      if (this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight) {
        var rows = [].slice.call(this.parent.element.querySelectorAll(selector));
        var weekNumberRows = this.parent.showWeekNumber ? [].slice.call(this.parent.element.querySelectorAll("." + WEEK_NUMBER_WRAPPER_CLASS + " tbody tr")) : [];
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row = rows_1[_i];
          var height = this.parent.activeViewOptions.maxEventsPerRow * (eventHeight + (this.parent.currentView === "Month" ? eventGap : 2)) + headerHeight + indHeight;
          if (weekNumberRows.length > 0) {
            setStyleAttribute(weekNumberRows[rows.indexOf(row)].firstElementChild, { "height": height + "px" });
          }
          setStyleAttribute(row.firstElementChild, { "height": height + "px" });
        }
        if (!this.parent.enablePersistence && !this.parent.activeViewOptions.allowVirtualScrolling && isScrollUpdate) {
          this.parent.notify(contentReady, {});
        }
      }
    };
    EventBase2.prototype.unWireEvents = function() {
      var appElements = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      for (var _i = 0, appElements_1 = appElements; _i < appElements_1.length; _i++) {
        var element = appElements_1[_i];
        EventHandler.clearEvents(element);
      }
    };
    EventBase2.prototype.destroy = function() {
      this.unWireEvents();
      this.parent = null;
    };
    return EventBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/vertical-view.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VerticalEvent = (
  /** @class */
  function(_super) {
    __extends24(VerticalEvent2, _super);
    function VerticalEvent2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dateRender = [];
      _this.renderedEvents = [];
      _this.renderedAllDayEvents = [];
      _this.overlapEvents = [];
      _this.moreEvents = [];
      _this.overlapList = [];
      _this.allDayEvents = [];
      _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;
      _this.interval = _this.parent.activeViewOptions.timeScale.interval;
      _this.allDayLevel = 0;
      _this.startHour = _this.parent.activeView.getStartHour();
      _this.endHour = _this.parent.activeView.getEndHour();
      _this.element = _this.parent.activeView.getPanel();
      _this.fields = _this.parent.eventFields;
      _this.animation = new Animation({ progress: _this.animationUiUpdate.bind(_this) });
      _this.addEventListener();
      return _this;
    }
    VerticalEvent2.prototype.renderAppointments = function() {
      var _this = this;
      if (isNullOrUndefined(this.parent)) {
        return;
      }
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();
      var wrapperElements = [].slice.call(this.parent.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS + ",." + APPOINTMENT_CLASS + ",." + ROW_COUNT_WRAPPER_CLASS));
      var isDragging = this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction ? true : false;
      var hideWrapper = function(wrapper2) {
        if (_this.parent.isReact && !isNullOrUndefined(_this.parent.activeViewOptions.eventTemplate)) {
          var appWrapper = closest(wrapper2, "." + DAY_WRAPPER_CLASS + ",." + ALLDAY_APPOINTMENT_WRAPPER_CLASS);
          if (appWrapper && !appWrapper.classList.contains(APPOINTMENT_WRAPPER_HIDDEN_CLASS)) {
            addClass([appWrapper], APPOINTMENT_WRAPPER_HIDDEN_CLASS);
          }
        }
      };
      for (var _i = 0, wrapperElements_1 = wrapperElements; _i < wrapperElements_1.length; _i++) {
        var wrapper = wrapperElements_1[_i];
        if (isDragging && !(wrapper.classList.contains(ALLDAY_APPOINTMENT_CLASS) || wrapper.classList.contains(ROW_COUNT_WRAPPER_CLASS))) {
          var groupIndex = parseInt(wrapper.getAttribute("data-group-index"), 10);
          for (var j = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; j < len; j++) {
            if (groupIndex === this.parent.crudModule.crudObj.sourceEvent[parseInt(j.toString(), 10)].groupIndex || groupIndex === this.parent.crudModule.crudObj.targetEvent[parseInt(j.toString(), 10)].groupIndex) {
              hideWrapper(wrapper);
              remove(wrapper);
            }
          }
        } else {
          hideWrapper(wrapper);
          remove(wrapper);
        }
      }
      if (!this.element.querySelector("." + WORK_CELLS_CLASS)) {
        return;
      }
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.updateFocusedWorkCell();
      }
      this.allDayElement = [].slice.call(this.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
      this.setAllDayRowHeight(0);
      if (this.parent.eventsProcessed.length === 0 && this.parent.blockProcessed.length === 0) {
        return;
      }
      var expandCollapse = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      EventHandler.remove(expandCollapse, "click", this.rowExpandCollapse);
      EventHandler.add(expandCollapse, "click", this.rowExpandCollapse, this);
      this.renderedEvents = [];
      this.renderedAllDayEvents = [];
      this.initializeValues();
      this.processBlockEvents();
      this.renderEvents("normalEvents");
      if (this.allDayEvents.length > 0) {
        this.allDayEvents = this.allDayEvents.filter(function(item, index, arr) {
          return index === arr.map(function(item2) {
            return item2.Guid;
          }).indexOf(item.Guid);
        });
        removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
        this.slots.push(this.parent.activeView.renderDates.map(function(date) {
          return +date;
        }));
        this.renderEvents("allDayEvents");
        this.animation.animate(this.allDayElement[0]);
      }
      this.parent.notify(contentReady, {});
      addClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
      if (isDragging) {
        this.parent.crudModule.crudObj.isCrudAction = false;
      }
      this.parent.renderTemplates(function() {
        if (_this.parent && _this.parent.isReact && _this.parent.activeViewOptions.eventTemplate) {
          var wraps = [].slice.call(_this.parent.element.querySelectorAll("." + APPOINTMENT_WRAPPER_HIDDEN_CLASS));
          removeClass(wraps, APPOINTMENT_WRAPPER_HIDDEN_CLASS);
        }
      });
    };
    VerticalEvent2.prototype.initializeValues = function() {
      this.resources = this.parent.activeViewOptions.group.resources.length > 0 ? this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.lastResourceLevel : [];
      if (this.resources.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.virtualScrollModule) {
        this.resources = this.parent.resourceBase.renderedResources;
      }
      this.cellHeight = parseFloat(getElementHeight(this.parent.element.querySelector(".e-content-wrap tbody tr")).toFixed(2));
      this.dateRender[0] = this.parent.activeView.renderDates;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        for (var i = 0, len = this.resources.length; i < len; i++) {
          this.dateRender[parseInt(i.toString(), 10)] = this.resources[parseInt(i.toString(), 10)].renderDates;
        }
      }
    };
    VerticalEvent2.prototype.getHeight = function(start, end) {
      var appHeight = (getUniversalTime(end) - getUniversalTime(start)) / MS_PER_MINUTE * (this.cellHeight * this.slotCount) / this.interval;
      appHeight = appHeight <= 0 ? this.cellHeight : appHeight;
      return appHeight;
    };
    VerticalEvent2.prototype.appendEvent = function(eventObj, appointmentElement, index, appLeft) {
      var appointmentWrap = this.element.querySelector("." + APPOINTMENT_WRAPPER_CLASS + '[id="' + APPOINTMENT_WRAPPER_CLASS + "-" + index + '"]');
      if (this.parent.enableRtl) {
        setStyleAttribute(appointmentElement, { "right": appLeft });
      } else {
        setStyleAttribute(appointmentElement, { "left": appLeft });
      }
      var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? "blockEvent" : "event";
      var args = {
        data: extend({}, eventObj, null, true),
        element: appointmentElement,
        cancel: false,
        type: eventType
      };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (!eventArgs.cancel) {
          appointmentWrap.appendChild(appointmentElement);
        }
      });
    };
    VerticalEvent2.prototype.processBlockEvents = function() {
      var resources = this.getResourceList();
      var dateCount = this.getStartCount();
      for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
        var resource = resources_1[_i];
        var renderDates = this.dateRender[parseInt(resource.toString(), 10)];
        for (var day = 0, length_1 = renderDates.length; day < length_1; day++) {
          var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());
          var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);
          var filterEvents = this.filterEvents(startDate, endDate, this.parent.blockProcessed, this.resources[parseInt(resource.toString(), 10)]);
          for (var _a = 0, filterEvents_1 = filterEvents; _a < filterEvents_1.length; _a++) {
            var event_1 = filterEvents_1[_a];
            if (this.parent.resourceBase) {
              this.setValues(event_1, resource);
            }
            this.renderBlockEvents(event_1, day, resource, dateCount);
            this.cssClass = null;
            this.groupOrder = null;
          }
          dateCount += 1;
        }
      }
    };
    VerticalEvent2.prototype.renderBlockEvents = function(eventObj, dayIndex2, resource, dayCount) {
      var spannedData = this.isSpannedEvent(eventObj, dayIndex2, resource);
      var eStart = spannedData[this.fields.startTime];
      var eEnd = spannedData[this.fields.endTime];
      var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      if (eStart <= eEnd && this.isValidEvent(eventObj, eStart, eEnd, schedule) && this.isWorkDayAvailable(resource, eStart)) {
        var blockTop = void 0;
        var blockHeight = void 0;
        if (spannedData[this.fields.isAllDay]) {
          var contentWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
          blockHeight = formatUnit(contentWrap.offsetHeight);
          blockTop = formatUnit(0);
        } else {
          blockHeight = formatUnit(this.getHeight(eStart, eEnd));
          blockTop = formatUnit(this.getTopValue(eStart, dayIndex2, resource));
        }
        var appointmentElement = this.createBlockAppointmentElement(eventObj, resource, this.isResourceEventTemplate);
        setStyleAttribute(appointmentElement, { "width": "100%", "height": blockHeight, "top": blockTop });
        var index = this.getDayIndex(dayIndex2, resource, dayCount);
        this.appendEvent(eventObj, appointmentElement, index, "0px");
      }
    };
    VerticalEvent2.prototype.renderEvents = function(eventType) {
      removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);
      var eventCollection = eventType === "allDayEvents" ? this.sortByDateTime(this.allDayEvents) : void 0;
      var resources = this.getResourceList();
      var dateCount = this.getStartCount();
      var isRender;
      var appHeight = eventType === "allDayEvents" ? getElementHeightFromClass(this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS), APPOINTMENT_CLASS) : 0;
      var allDayRowTop = eventType === "allDayEvents" && this.allDayElement.length > 0 ? this.allDayElement[0].offsetTop : 0;
      var _loop_1 = function(resource2) {
        isRender = true;
        if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction && eventType !== "allDayEvents" && !this_1.parent.uiStateValues.isGroupAdaptive) {
          if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function(data) {
            return data.groupIndex === resource2;
          }).length === 0 && this_1.parent.crudModule.crudObj.targetEvent.filter(function(data) {
            return data.groupIndex === resource2;
          }).length === 0) {
            isRender = false;
          }
        }
        this_1.slots = [];
        var renderDates = this_1.dateRender[parseInt(resource2.toString(), 10)];
        var renderedDate = this_1.getRenderedDates(renderDates) || renderDates;
        this_1.slots.push(renderDates.map(function(date) {
          return +date;
        }));
        for (var day = 0, length_2 = renderDates.length; day < length_2 && renderDates[parseInt(day.toString(), 10)] <= renderedDate[renderedDate.length - 1]; day++) {
          this_1.renderedEvents = [];
          var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());
          var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);
          var filterEvents = this_1.filterEvents(startDate, endDate, eventCollection, this_1.resources[parseInt(resource2.toString(), 10)]);
          if (isRender) {
            for (var _i2 = 0, filterEvents_2 = filterEvents; _i2 < filterEvents_2.length; _i2++) {
              var event_2 = filterEvents_2[_i2];
              if (this_1.parent.resourceBase) {
                this_1.setValues(event_2, resource2);
              }
              if (eventType === "allDayEvents") {
                this_1.renderAllDayEvents(event_2, day, resource2, dateCount, false, allDayRowTop, appHeight);
              } else {
                if (this_1.isAllDayAppointment(event_2)) {
                  this_1.allDayEvents.push(extend({}, event_2, null, true));
                } else {
                  if (this_1.parent.eventSettings.enableMaxHeight) {
                    if (this_1.getOverlapIndex(event_2, day, false, resource2) > 0) {
                      continue;
                    }
                  }
                  this_1.renderNormalEvents(event_2, day, resource2, dateCount);
                }
              }
              this_1.cssClass = null;
              this_1.groupOrder = null;
            }
          } else {
            for (var _a = 0, filterEvents_3 = filterEvents; _a < filterEvents_3.length; _a++) {
              var event_3 = filterEvents_3[_a];
              if (this_1.isAllDayAppointment(event_3)) {
                this_1.allDayEvents.push(extend({}, event_3, null, true));
              }
            }
          }
          dateCount += 1;
        }
      };
      var this_1 = this;
      for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
        var resource = resources_2[_i];
        _loop_1(resource);
      }
    };
    VerticalEvent2.prototype.getStartCount = function() {
      return this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.timeScale.enable ? parseInt(this.element.querySelector("." + APPOINTMENT_WRAPPER_CLASS).getAttribute("id").split("-").slice(-1)[0], 10) : 0;
    };
    VerticalEvent2.prototype.getDayIndex = function(dayIndex2, resource, dayCount) {
      var _this = this;
      if (!this.parent.activeViewOptions.group.byDate) {
        return dayCount;
      }
      if (this.parent.activeViewOptions.group.byDate && !this.parent.activeViewOptions.group.hideNonWorkingDays) {
        var renderedIndex = this.parent.resourceBase.lastResourceLevel[0].renderDates.indexOf(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)]);
        return this.resources.length * renderedIndex + resource;
      }
      var dateIndex = 0;
      var firstColumn = this.parent.activeView.colLevels[0];
      var currentDate = this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime();
      var currentResources = [];
      for (var i = 0; i < firstColumn.length; i++) {
        currentResources = this.parent.resourceBase.resourceDateTree[parseInt(i.toString(), 10)];
        if (currentDate === firstColumn[parseInt(i.toString(), 10)].date.getTime()) {
          break;
        }
        dateIndex = dateIndex + firstColumn[parseInt(i.toString(), 10)].colSpan;
      }
      var resIndex = currentResources.findIndex(function(x) {
        return x.groupOrder.toString() === _this.resources[parseInt(resource.toString(), 10)].groupOrder.toString();
      });
      if (resIndex < 0) {
        return dateIndex;
      }
      return dateIndex + resIndex;
    };
    VerticalEvent2.prototype.setValues = function(event2, resourceIndex) {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.cssClass = this.resources[parseInt(resourceIndex.toString(), 10)].cssClass;
        this.groupOrder = this.resources[parseInt(resourceIndex.toString(), 10)].groupOrder;
      } else {
        this.cssClass = this.parent.resourceBase.getCssClass(event2);
      }
    };
    VerticalEvent2.prototype.getResourceList = function() {
      var resources = Array.apply(null, {
        length: this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive ? this.resources.length : 1
      }).map(function(value, index) {
        return index;
      });
      return resources;
    };
    VerticalEvent2.prototype.createAppointmentElement = function(record, isAllDay, data, resource) {
      var fieldMapping = this.parent.eventFields;
      var recordSubject = record[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var appointmentWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[fieldMapping.id],
          "data-guid": record.Guid,
          "role": "button",
          "tabindex": "0",
          "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
          "aria-label": this.parent.getAnnouncementString(record)
        }
      });
      if (record[this.fields.isReadonly]) {
        addClass([appointmentWrapper], "e-read-only");
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      appointmentWrapper.appendChild(appointmentDetails);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var resourceIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;
        appointmentWrapper.setAttribute("data-group-index", resourceIndex.toString());
      }
      var templateElement;
      var eventData = data;
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var elementId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = elementId + viewName + "eventTemplate";
        var resIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;
        var templateName = this.isResourceEventTemplate ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(recordSubject, appointmentSubject);
        if (isAllDay) {
          if (record[fieldMapping.isAllDay]) {
            templateElement = [appointmentSubject];
          } else {
            templateElement = [];
            var appointmentStartTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: this.parent.getTimeString(record[fieldMapping.startTime])
            });
            var appointmentEndTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: this.parent.getTimeString(record[fieldMapping.endTime])
            });
            addClass([appointmentSubject], "e-text-center");
            if (!eventData.isLeft) {
              templateElement.push(appointmentStartTime);
            }
            templateElement.push(appointmentSubject);
            if (!eventData.isRight) {
              templateElement.push(appointmentEndTime);
            }
          }
        } else {
          var timeStr = this.parent.getTimeString(record[fieldMapping.startTime]) + " - " + this.parent.getTimeString(record[fieldMapping.endTime]);
          var appointmentTime = createElement("div", {
            className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
            innerHTML: timeStr
          });
          var appointmentLocation = createElement("div", { className: LOCATION_CLASS });
          this.parent.sanitize(record[fieldMapping.location] || this.parent.eventSettings.fields.location.default || "", appointmentLocation);
          templateElement = [appointmentSubject, appointmentTime, appointmentLocation];
        }
      }
      append(templateElement, appointmentDetails);
      if (!this.parent.isAdaptive && (!isNullOrUndefined(record[fieldMapping.recurrenceRule]) || !isNullOrUndefined(record[fieldMapping.recurrenceID]))) {
        var iconClass = record[fieldMapping.id] === record[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        var recurrenceIcon = createElement("div", { className: ICON3 + " " + iconClass });
        if (isAllDay) {
          appointmentDetails.appendChild(recurrenceIcon);
        } else {
          appointmentWrapper.appendChild(recurrenceIcon);
        }
      }
      this.parent.eventBase.renderSpannedIcon(isAllDay ? appointmentDetails : appointmentWrapper, eventData);
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      this.applyResourceColor(appointmentWrapper, record, "backgroundColor", this.groupOrder);
      this.renderResizeHandler(appointmentWrapper, eventData, record[this.fields.isReadonly]);
      return appointmentWrapper;
    };
    VerticalEvent2.prototype.createMoreIndicator = function(allDayRow, count, currentDay) {
      var index = currentDay + count;
      var countWrapper = allDayRow[parseInt(index.toString(), 10)];
      if (countWrapper.childElementCount <= 0) {
        var innerCountWrap = createElement("div", {
          className: ROW_COUNT_WRAPPER_CLASS,
          id: ROW_COUNT_WRAPPER_CLASS + "-" + index.toString()
        });
        var moreIndicatorElement = createElement("div", {
          className: MORE_INDICATOR_CLASS,
          attrs: { "tabindex": "0", "data-index": index.toString(), "data-count": "1" },
          innerHTML: "+1&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"))
        });
        innerCountWrap.appendChild(moreIndicatorElement);
        countWrapper.appendChild(innerCountWrap);
        EventHandler.add(moreIndicatorElement, "click", this.rowExpandCollapse, this);
      } else {
        var countCell = countWrapper.querySelector("." + MORE_INDICATOR_CLASS);
        var moreCount = parseInt(countCell.getAttribute("data-count"), 10) + 1;
        countCell.setAttribute("data-count", moreCount.toString());
        countCell.innerHTML = "+" + this.parent.globalize.formatNumber(moreCount) + "&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"));
      }
    };
    VerticalEvent2.prototype.isSpannedEvent = function(record, day, resource) {
      var currentDate = resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]);
      var renderedDate = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || [currentDate];
      var currentDay = renderedDate.filter(function(date) {
        return date.getDay() === day;
      });
      if (currentDay.length === 0) {
        currentDate = resetTime(renderedDate[0]);
      }
      var field = this.parent.eventFields;
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var event2 = extend({}, record, null, true);
      event2.isSpanned = { isBottom: false, isTop: false };
      if (record[field.startTime].getTime() < schedule.startHour.getTime()) {
        event2[field.startTime] = schedule.startHour;
        event2.isSpanned.isTop = true;
      }
      if (record[field.endTime].getTime() > schedule.endHour.getTime()) {
        event2[field.endTime] = schedule.endHour;
        event2.isSpanned.isBottom = true;
      }
      var eventDates = this.updateEventMinimumDuration(schedule, event2[field.startTime], event2[field.endTime]);
      event2[field.startTime] = eventDates.startDate;
      event2[field.endTime] = eventDates.endDate;
      return event2;
    };
    VerticalEvent2.prototype.isWorkDayAvailable = function(resource, start) {
      if (this.parent.activeViewOptions.group.hideNonWorkingDays && this.resources.length > 0) {
        var workDays = this.resources[parseInt(resource.toString(), 10)].resourceData[this.resources[parseInt(resource.toString(), 10)].resource.workDaysField] || this.parent.activeViewOptions.workDays;
        return workDays && workDays.indexOf(start.getDay()) >= 0;
      }
      return true;
    };
    VerticalEvent2.prototype.renderAllDayEvents = function(eventObj, dayIndex2, resource, dayCount, inline, cellTop, eventHeight) {
      var _this = this;
      var currentDates = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || this.dateRender[parseInt(resource.toString(), 10)];
      if (this.parent.activeViewOptions.group.byDate) {
        this.slots[0] = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()];
        currentDates = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)]];
      }
      var record = this.splitEvent(eventObj, currentDates)[0];
      var eStart = new Date(record[this.parent.eventFields.startTime].getTime());
      var eEnd = new Date(record[this.parent.eventFields.endTime].getTime());
      var appWidth = 0;
      var topValue = 1;
      var isDateRange = currentDates[0].getTime() <= eStart.getTime() && addDays(currentDates.slice(-1)[0], 1).getTime() >= eStart.getTime();
      if (eStart <= eEnd && isDateRange && this.isWorkDayAvailable(resource, eStart)) {
        var isAlreadyRendered = [];
        if (this.renderedAllDayEvents[parseInt(resource.toString(), 10)]) {
          isAlreadyRendered = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function(event2) {
            return event2.Guid === eventObj.Guid;
          });
          if (this.parent.activeViewOptions.group.byDate) {
            isAlreadyRendered = isAlreadyRendered.filter(function(event2) {
              return event2[_this.parent.eventFields.startTime] >= currentDates[parseInt(dayIndex2.toString(), 10)] && event2[_this.parent.eventFields.endTime] <= addDays(/* @__PURE__ */ new Date(+currentDates[parseInt(dayIndex2.toString(), 10)]), 1);
            });
          }
        }
        if (isAlreadyRendered.length === 0) {
          var allDayDifference_1 = record.data.count;
          var allDayIndex_1 = this.getOverlapIndex(record, dayIndex2, true, resource);
          record.Index = allDayIndex_1;
          this.allDayLevel = this.allDayLevel < allDayIndex_1 ? allDayIndex_1 : this.allDayLevel;
          var widthAdjustment = record.data.isRight ? 0 : this.parent.currentView === "Day" ? 4 : 7;
          if (allDayDifference_1 >= 0) {
            appWidth = allDayDifference_1 * 100 - widthAdjustment;
          }
          if (isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {
            this.renderedAllDayEvents[parseInt(resource.toString(), 10)] = [];
          }
          this.renderedAllDayEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));
          var allDayRow_1 = [].slice.call(this.element.querySelector("." + ALLDAY_ROW_CLASS).children);
          var wIndex_1 = this.getDayIndex(dayIndex2, resource, dayCount);
          var eventWrapper_1 = this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ":nth-child(" + (wIndex_1 + 1) + ")");
          var appointmentElement_1;
          if (inline) {
            appointmentElement_1 = this.parent.inlineModule.createInlineAppointmentElement(eventObj);
          } else {
            appointmentElement_1 = this.createAppointmentElement(eventObj, true, record.data, resource);
          }
          addClass([appointmentElement_1], ALLDAY_APPOINTMENT_CLASS);
          var eventData = extend({}, record.data, null, true);
          eventObj.data = eventData;
          var args = { data: eventObj, element: appointmentElement_1, cancel: false };
          this.parent.trigger(eventRendered, args, function(eventArgs) {
            if (!eventArgs.cancel) {
              eventWrapper_1.appendChild(appointmentElement_1);
              topValue += (allDayIndex_1 === 0 ? cellTop : cellTop + allDayIndex_1 * eventHeight) + 1;
              setStyleAttribute(appointmentElement_1, { "width": appWidth + "%", "top": formatUnit(topValue) });
              if (allDayIndex_1 > 1) {
                _this.moreEvents.push(appointmentElement_1);
                for (var count = 0, length_3 = allDayDifference_1; count < length_3; count++) {
                  _this.createMoreIndicator(allDayRow_1, count, wIndex_1);
                }
              }
              _this.allDayElement[0].setAttribute("data-count", _this.allDayLevel.toString());
              var allDayRowHeight = (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2 ? 3 * eventHeight : (_this.allDayLevel + 1) * eventHeight) + 4;
              _this.setAllDayRowHeight(allDayRowHeight);
              _this.addOrRemoveClass();
              _this.wireAppointmentEvents(appointmentElement_1, eventObj);
            }
          });
        }
      }
    };
    VerticalEvent2.prototype.renderNormalEvents = function(eventObj, dayIndex2, resource, dayCount, inline) {
      var record = this.isSpannedEvent(eventObj, dayIndex2, resource);
      var eStart = record[this.fields.startTime];
      var eEnd = record[this.fields.endTime];
      var appWidth = "0%";
      var appLeft = "0%";
      var topValue = 0;
      var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex2.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var isValidEvent = this.isValidEvent(eventObj, eStart, eEnd, schedule);
      if (eStart.getTime() < this.parent.minDate.getTime() || eEnd.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      if (eStart <= eEnd && isValidEvent && this.isWorkDayAvailable(resource, eStart)) {
        var appHeight = this.getHeight(eStart, eEnd);
        if (eStart.getTime() >= schedule.startHour.getTime()) {
          topValue = this.getTopValue(eStart, dayIndex2, resource);
        }
        var appIndex = this.getOverlapIndex(record, dayIndex2, false, resource);
        record.Index = appIndex;
        this.overlapList.push(record);
        if (this.overlapList.length > 1) {
          if (isNullOrUndefined(this.overlapEvents[parseInt(appIndex.toString(), 10)])) {
            this.overlapEvents[parseInt(appIndex.toString(), 10)] = [];
          }
          this.overlapEvents[parseInt(appIndex.toString(), 10)].push(record);
        } else {
          this.overlapEvents = [];
          this.overlapEvents.push([record]);
        }
        appWidth = this.getEventWidth();
        var argsData = {
          index: appIndex,
          left: appLeft,
          width: appWidth,
          day: dayCount,
          dayIndex: dayIndex2,
          record,
          resource
        };
        var tempData = this.adjustOverlapElements(argsData);
        appWidth = tempData.appWidth;
        if (isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)])) {
          this.renderedEvents[parseInt(resource.toString(), 10)] = [];
        }
        this.renderedEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));
        var appointmentElement = void 0;
        if (inline) {
          appointmentElement = this.parent.inlineModule.createInlineAppointmentElement(eventObj);
        } else {
          appointmentElement = this.createAppointmentElement(eventObj, false, record.isSpanned, resource);
        }
        setStyleAttribute(appointmentElement, {
          "width": this.parent.eventSettings.enableMaxHeight ? "100%" : tempData.appWidth,
          "height": appHeight + "px",
          "top": topValue + "px"
        });
        var iconHeight = appointmentElement.querySelectorAll("." + EVENT_INDICATOR_CLASS).length * 15;
        var maxHeight = appHeight - 40 - iconHeight;
        var subjectElement = appointmentElement.querySelector("." + SUBJECT_CLASS);
        if (!this.parent.isAdaptive && subjectElement) {
          subjectElement.style.maxHeight = formatUnit(maxHeight);
        }
        var index = this.getDayIndex(dayIndex2, resource, dayCount);
        var eventData = {};
        eventData[this.fields.startTime] = eventObj[this.fields.startTime];
        eventData[this.fields.endTime] = eventObj[this.fields.endTime];
        record.data = eventData;
        this.appendEvent(record, appointmentElement, index, tempData.appLeft);
        this.wireAppointmentEvents(appointmentElement, eventObj);
      }
    };
    VerticalEvent2.prototype.getEventWidth = function() {
      var width = this.parent.currentView === "Day" ? 97 : 94;
      var tempWidth = (width - this.overlapEvents.length) / this.overlapEvents.length;
      return (tempWidth < 0 ? 0 : tempWidth) + "%";
    };
    VerticalEvent2.prototype.getEventLeft = function(appWidth, index) {
      var tempLeft = (parseFloat(appWidth) + 1) * index;
      return (tempLeft > 99 ? 99 : tempLeft) + "%";
    };
    VerticalEvent2.prototype.getTopValue = function(date, day, resource) {
      var viewDate = resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]);
      var startEndHours = getStartEndHours(viewDate, this.startHour, this.endHour);
      var startHour = startEndHours.startHour;
      var adjustedStartHour = isDaylightSavingTime(viewDate) && startHour.getHours() !== this.startHour.getHours() ? this.startHour.getHours() : startHour.getHours();
      var diffInMinutes = (date.getHours() - adjustedStartHour) * 60 + (date.getMinutes() - startHour.getMinutes());
      return this.parent.activeViewOptions.timeScale.enable ? diffInMinutes * this.cellHeight * this.slotCount / this.interval : 0;
    };
    VerticalEvent2.prototype.getOverlapIndex = function(record, day, isAllDay, resource) {
      var _this = this;
      var fieldMapping = this.parent.eventFields;
      var eventsList = [];
      var appIndex = -1;
      this.overlapEvents = [];
      if (isAllDay) {
        if (!isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {
          var date_1 = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)].getTime()));
          eventsList = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function(app) {
            return resetTime(app[fieldMapping.startTime]).getTime() <= date_1.getTime() && resetTime(app[fieldMapping.endTime]).getTime() >= date_1.getTime();
          });
          if (this.parent.activeViewOptions.group.resources.length > 0) {
            eventsList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], eventsList);
          }
        }
      } else {
        var appointmentList_1 = !isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)]) ? this.renderedEvents[parseInt(resource.toString(), 10)] : [];
        var appointment_1 = [];
        var recordStart_1 = record[fieldMapping.startTime];
        var recordEnd_1 = record[fieldMapping.endTime];
        this.overlapList = appointmentList_1.filter(function(data) {
          return data[fieldMapping.endTime] > recordStart_1 && data[fieldMapping.startTime] <= recordEnd_1 || data[fieldMapping.startTime] >= recordEnd_1 && data[fieldMapping.endTime] <= recordStart_1 || data[fieldMapping.endTime].getTime() === data[fieldMapping.startTime].getTime() && data[fieldMapping.startTime].getTime() === recordStart_1.getTime() && data[fieldMapping.endTime] < recordEnd_1;
        });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          this.overlapList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], this.overlapList);
        }
        this.overlapList.forEach(function(obj) {
          var filterList = appointmentList_1.filter(function(data) {
            return data[fieldMapping.endTime] > obj[fieldMapping.startTime] && data[fieldMapping.startTime] <= obj[fieldMapping.endTime];
          });
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            filterList = _this.filterEventsByResource(_this.resources[parseInt(resource.toString(), 10)], filterList);
          }
          var collection = filterList.filter(function(val) {
            return _this.overlapList.indexOf(val) === -1;
          });
          if (collection.length > 0) {
            appointment_1 = appointment_1.concat(collection);
          }
        });
        for (var i = 0; i < appointment_1.length - 1; i++) {
          for (var j = i + 1; j < appointment_1.length; j++) {
            if (appointment_1[parseInt(i.toString(), 10)][fieldMapping.id] === appointment_1[parseInt(j.toString(), 10)][fieldMapping.id]) {
              appointment_1.splice(j, 1);
              j--;
            }
          }
        }
        this.overlapList = this.overlapList.concat(appointment_1);
        eventsList = this.overlapList;
        for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {
          var event_4 = eventsList_1[_i];
          var record_1 = event_4;
          var index = record_1.Index;
          if (isNullOrUndefined(this.overlapEvents[parseInt(index.toString(), 10)])) {
            this.overlapEvents[parseInt(index.toString(), 10)] = [event_4];
          } else {
            this.overlapEvents[parseInt(index.toString(), 10)].push(event_4);
          }
        }
      }
      if (!isAllDay) {
        eventsList = eventsList.filter(function(obj) {
          return obj[fieldMapping.startTime] === record[fieldMapping.startTime] && obj[fieldMapping.endTime] > record[fieldMapping.endTime] || obj[fieldMapping.endTime] > record[fieldMapping.startTime] && obj[fieldMapping.startTime] < record[fieldMapping.endTime] || obj[fieldMapping.endTime] === record[fieldMapping.startTime] && obj[fieldMapping.startTime] === record[fieldMapping.endTime] || (obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() === record[fieldMapping.endTime].getTime() || (obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() < record[fieldMapping.endTime].getTime() || obj[fieldMapping.endTime].getTime() > record[fieldMapping.endTime].getTime()));
        });
      }
      if (eventsList.length > 0) {
        var appLevel = eventsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    VerticalEvent2.prototype.adjustOverlapElements = function(args) {
      var data = { appWidth: args.width, appLeft: args.left };
      for (var i = 0, length1 = this.overlapEvents.length; i < length1; i++) {
        if (!isNullOrUndefined(this.overlapEvents[parseInt(i.toString(), 10)])) {
          for (var j = 0, length2 = this.overlapEvents[parseInt(i.toString(), 10)].length; j < length2; j++) {
            var dayCount = this.getDayIndex(args.dayIndex, args.resource, args.day);
            var element = this.element.querySelector("#e-appointment-wrapper-" + dayCount);
            if (element && element.childElementCount > 0) {
              var eleGuid = this.overlapEvents[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].Guid;
              if (element.querySelectorAll('div[data-guid="' + eleGuid + '"]').length > 0 && eleGuid !== args.record.Guid) {
                var apps = element.querySelector('div[data-guid="' + eleGuid + '"]');
                if (parseFloat(args.width) <= parseFloat(apps.style.width)) {
                  if (this.parent.enableRtl) {
                    apps.style.right = this.getEventLeft(args.width, i);
                  } else {
                    apps.style.left = this.getEventLeft(args.width, i);
                  }
                  apps.style.width = parseFloat(args.width) + "%";
                  data.appWidth = apps.style.width;
                } else {
                  data.appWidth = apps.style.width;
                }
              } else {
                var appWidth = args.width;
                if (isNullOrUndefined(this.overlapEvents[i - 1])) {
                  appWidth = this.getEventWidth();
                }
                data.appWidth = appWidth;
                data.appLeft = this.getEventLeft(appWidth, args.index);
              }
            }
          }
        }
      }
      return data;
    };
    VerticalEvent2.prototype.setAllDayRowHeight = function(height) {
      var dateHeader = this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      if (this.parent.height === "auto" || !this.parent.enableAllDayScroll) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
      }
      var allDayRow = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS);
      allDayRow.style.height = "";
      if (this.parent.uiStateValues.expand && this.parent.height !== "auto" && this.parent.enableAllDayScroll) {
        allDayRow.style.height = height / 12 + "em";
        this.parent.eventBase.allDayExpandScroll(dateHeader);
      } else {
        for (var _i = 0, _a = this.allDayElement; _i < _a.length; _i++) {
          var element = _a[_i];
          element.style.height = height / 12 + "em";
        }
        removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
      }
    };
    VerticalEvent2.prototype.addOrRemoveClass = function() {
      var _this = this;
      this.moreEvents.filter(function(element) {
        if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
          addClass([element], EVENT_COUNT_CLASS);
          element.setAttribute("tabindex", "-1");
        } else {
          removeClass([element], EVENT_COUNT_CLASS);
          element.setAttribute("tabindex", "0");
        }
      });
      var moreEventCount = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      if (this.parent.uiStateValues.expand) {
        removeClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);
        addClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);
      } else {
        removeClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);
        addClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);
      }
      if (this.allDayLevel > 2) {
        removeClass([moreEventCount], DISABLE_CLASS);
      } else {
        addClass([moreEventCount], DISABLE_CLASS);
      }
      var countCell = [].slice.call(this.element.querySelectorAll("." + ROW_COUNT_WRAPPER_CLASS));
      countCell.forEach(function(element) {
        if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
          removeClass([element], DISABLE_CLASS);
        } else {
          addClass([element], DISABLE_CLASS);
        }
      });
    };
    VerticalEvent2.prototype.getEventHeight = function() {
      var eventElement = createElement("div", { className: APPOINTMENT_CLASS, styles: "visibility:hidden" });
      var eventWrapper = this.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ":first-child");
      eventWrapper.appendChild(eventElement);
      var height = eventElement.offsetHeight;
      remove(eventElement);
      return height;
    };
    VerticalEvent2.prototype.rowExpandCollapse = function() {
      var target = this.element.querySelector("." + ALLDAY_APPOINTMENT_SECTION_CLASS);
      this.parent.uiStateValues.expand = target.classList.contains(APPOINTMENT_ROW_EXPAND_CLASS);
      var rowHeight;
      if (this.parent.uiStateValues.expand) {
        target.setAttribute("title", this.parent.localeObj.getConstant("collapseAllDaySection"));
        target.setAttribute("aria-label", this.parent.localeObj.getConstant("collapseAllDaySection"));
        rowHeight = (this.allDayLevel + 1) * this.getEventHeight() + 4;
      } else {
        target.setAttribute("title", this.parent.localeObj.getConstant("expandAllDaySection"));
        target.setAttribute("aria-label", this.parent.localeObj.getConstant("expandAllDaySection"));
        rowHeight = 3 * this.getEventHeight() + 4;
        this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS).scrollTop = 0;
      }
      this.setAllDayRowHeight(rowHeight);
      this.animation.animate(this.allDayElement[0]);
      this.addOrRemoveClass();
      this.animation.animate(target);
    };
    VerticalEvent2.prototype.animationUiUpdate = function() {
      this.parent.notify(contentReady, {});
    };
    VerticalEvent2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      this.allDayElement = null;
      this.renderedAllDayEvents = null;
      this.renderedEvents = null;
      this.slotCount = null;
      this.interval = null;
      this.startHour = null;
      this.endHour = null;
      this.element = null;
      this.fields = null;
      this.animation = null;
      _super.prototype.destroy.call(this);
    };
    return VerticalEvent2;
  }(EventBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/month.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP = 0;
var MonthEvent = (
  /** @class */
  function(_super) {
    __extends25(MonthEvent2, _super);
    function MonthEvent2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.renderedEvents = [];
      _this.monthHeaderHeight = 0;
      _this.moreIndicatorHeight = 19;
      _this.renderType = "day";
      _this.element = _this.parent.activeView.getPanel();
      _this.fields = _this.parent.eventFields;
      _this.maxHeight = _this.parent.eventSettings.enableMaxHeight && !_this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;
      _this.withIndicator = _this.parent.eventSettings.enableMaxHeight && _this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;
      _this.maxOrIndicator = _this.maxHeight || _this.withIndicator;
      _this.moreIndicatorHeight = _this.parent.rowAutoHeight && _this.parent.eventSettings.ignoreWhitespace ? 0 : _this.moreIndicatorHeight;
      _this.addEventListener();
      return _this;
    }
    MonthEvent2.prototype.removeEventWrapper = function(appElement) {
      if (appElement.length > 0) {
        appElement = this.parent.currentView === "Month" || !this.parent.activeView.isTimelineView() && !this.parent.activeViewOptions.timeScale.enable ? appElement : [appElement[0]];
        for (var _i = 0, appElement_1 = appElement; _i < appElement_1.length; _i++) {
          var wrap = appElement_1[_i];
          if (wrap.parentElement && wrap.parentElement.parentNode) {
            remove(wrap.parentElement);
          }
        }
      }
    };
    MonthEvent2.prototype.renderAppointments = function() {
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();
      var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.rowAutoHeight) {
        this.parent.uiStateValues.top = conWrap.scrollTop;
        this.parent.uiStateValues.left = conWrap.scrollLeft;
      }
      var appointmentWrapper = [].slice.call(this.element.querySelectorAll("." + APPOINTMENT_WRAPPER_CLASS));
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var appElement = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper [data-group-index="' + this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex + '"]'));
          this.removeEventWrapper(appElement);
          if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var ele = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper [data-group-index="' + this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex + '"]'));
            this.removeEventWrapper(ele);
          }
        }
      } else {
        for (var _i = 0, appointmentWrapper_1 = appointmentWrapper; _i < appointmentWrapper_1.length; _i++) {
          var wrap = appointmentWrapper_1[_i];
          remove(wrap);
        }
      }
      this.removeHeightProperty(CONTENT_TABLE_CLASS);
      if (!this.element.querySelector("." + WORK_CELLS_CLASS)) {
        return;
      }
      if (this.parent.currentView === "Month") {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        var cellTd = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
        cellTd.appendChild(wrapper);
        this.monthHeaderHeight = wrapper.offsetTop - cellTd.offsetTop;
        cellTd.removeChild(wrapper);
      }
      this.eventHeight = getElementHeightFromClass(this.element, APPOINTMENT_CLASS);
      var selector = "." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, this.parent.currentView === "Month" ? EVENT_GAP : 2, this.monthHeaderHeight, this.moreIndicatorHeight);
      var scrollTop = conWrap.scrollTop;
      if (this.parent.rowAutoHeight && this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(this.parent.currentAction)) {
        conWrap.scrollTop = conWrap.scrollTop - 1;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.renderResourceEvents();
        if (this.parent.virtualScrollModule) {
          this.parent.virtualScrollModule.updateFocusedWorkCell();
        }
      } else {
        this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays);
      }
      if (this.parent.rowAutoHeight) {
        this.updateBlockElements();
        var data = {
          cssProperties: this.parent.getCssProperties(),
          module: this.parent.getModuleName(),
          isPreventScrollUpdate: true,
          scrollPosition: { left: this.parent.uiStateValues.left, top: this.parent.uiStateValues.top }
        };
        if (this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll) {
          if (this.parent.currentAction) {
            conWrap.scrollTop = scrollTop;
            this.parent.currentAction = null;
          } else {
            this.parent.virtualScrollModule.updateVirtualScrollHeight();
          }
        }
        if (!this.parent.enablePersistence) {
          this.parent.notify(contentReady, {});
        }
        this.parent.notify(scrollUiUpdate, data);
        if (this.parent.currentView === "Month" && this.parent.showWeekNumber) {
          var totalCells_1 = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap table tr td:first-child"));
          var weekNumberCells = [].slice.call(this.parent.element.querySelectorAll("." + WEEK_NUMBER_CLASS));
          weekNumberCells.forEach(function(cell, i2) {
            var height = totalCells_1[parseInt(i2.toString(), 10)].offsetHeight;
            setStyleAttribute(cell, { "height": height + "px" });
          });
          this.parent.element.querySelector("." + WEEK_NUMBER_WRAPPER_CLASS).scrollTop = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS).scrollTop;
        }
      }
      this.parent.renderTemplates();
    };
    MonthEvent2.prototype.renderEventsHandler = function(dateRender, workDays, resData) {
      this.renderedEvents = [];
      var eventsList;
      var blockList;
      var resIndex = 0;
      if (resData) {
        resIndex = resData.groupIndex;
        this.cssClass = resData.cssClass;
        this.groupOrder = resData.groupOrder;
        eventsList = this.parent.eventBase.filterEventsByResource(resData, this.parent.eventsProcessed);
        blockList = this.parent.eventBase.filterEventsByResource(resData, this.parent.blockProcessed);
        this.workCells = [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS + '[data-group-index="' + resIndex + '"]'));
      } else {
        eventsList = this.parent.eventsProcessed;
        blockList = this.parent.blockProcessed;
        this.workCells = [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS));
      }
      this.sortByDateTime(eventsList);
      this.sortByDateTime(blockList);
      if (this.parent.currentView === "Month" && this.parent.rowAutoHeight && this.parent.activeViewOptions.group.resources.length === 0) {
        var totalCells = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap table tr td:first-child"));
        var height_1 = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS).clientHeight / totalCells.length;
        totalCells.forEach(function(cell) {
          setStyleAttribute(cell, { "height": height_1 + "px" });
        });
      }
      var cellDetail = this.workCells[this.parent.activeView.isTimelineView() ? 0 : this.workCells.length - 1];
      this.cellWidth = getElementWidth(cellDetail);
      this.cellHeight = getElementHeight(cellDetail);
      this.dateRender = dateRender;
      var filteredDates = this.getRenderedDates(dateRender);
      this.getSlotDates(workDays || this.parent.activeViewOptions.workDays);
      this.processBlockEvents(blockList, resIndex, resData);
      var events = [];
      for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {
        var event_1 = eventsList_1[_i];
        if (this.parent.resourceBase && !resData) {
          this.cssClass = this.parent.resourceBase.getCssClass(event_1);
        }
        events = events.concat(this.splitEvent(event_1, filteredDates || this.dateRender));
      }
      for (var level = 0; level < this.slots.length; level++) {
        this.renderedEvents = [];
        var slot = this.slots[parseInt(level.toString(), 10)];
        var endDate = addDays(new Date(slot[slot.length - 1]), 1);
        var spannedEvents = this.filterEvents(new Date(slot[0]), endDate, events);
        for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {
          var event_2 = spannedEvents_1[_a];
          if (this.maxHeight) {
            var sDate = this.parent.currentView === "Month" ? event_2[this.fields.startTime] : this.getStartTime(event_2, event_2.data);
            if (this.getIndex(sDate) > 0) {
              continue;
            }
          }
          this.updateIndicatorIcon(event_2);
          this.renderEvents(event_2, resIndex, eventsList);
        }
      }
      this.cssClass = null;
      this.groupOrder = null;
    };
    MonthEvent2.prototype.processBlockEvents = function(blockEvents, resIndex, resData) {
      for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {
        var event_3 = blockEvents_1[_i];
        if (this.parent.resourceBase && !resData) {
          this.cssClass = this.parent.resourceBase.getCssClass(event_3);
        }
        var blockSpannedList = [];
        if (this.renderType === "day" && !event_3[this.fields.isAllDay]) {
          var temp = extend({}, event_3, null, true);
          var isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);
          temp.isBlockIcon = isSameDate;
          if (!isSameDate && getDateInMs(temp[this.fields.startTime]) > 0) {
            var e = extend({}, event_3, null, true);
            e[this.fields.endTime] = addDays(resetTime(/* @__PURE__ */ new Date(event_3[this.fields.startTime] + "")), 1);
            e.isBlockIcon = true;
            temp[this.fields.startTime] = e[this.fields.endTime];
            blockSpannedList.push(e);
          }
          isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);
          if (!isSameDate && getDateInMs(temp[this.fields.endTime]) > 0) {
            var e = extend({}, event_3, null, true);
            e[this.fields.startTime] = resetTime(/* @__PURE__ */ new Date(event_3[this.fields.endTime] + ""));
            e.isBlockIcon = true;
            blockSpannedList.push(e);
            temp[this.fields.endTime] = e[this.fields.startTime];
          }
          blockSpannedList.push(temp);
        } else {
          blockSpannedList.push(event_3);
        }
        for (var _a = 0, blockSpannedList_1 = blockSpannedList; _a < blockSpannedList_1.length; _a++) {
          var blockEvent = blockSpannedList_1[_a];
          var spannedEvents = this.splitEvent(blockEvent, this.dateRender);
          for (var _b = 0, spannedEvents_2 = spannedEvents; _b < spannedEvents_2.length; _b++) {
            var event_4 = spannedEvents_2[_b];
            this.renderBlockEvents(event_4, resIndex, !!blockEvent.isBlockIcon);
          }
        }
      }
    };
    MonthEvent2.prototype.isSameDate = function(start, end) {
      return (/* @__PURE__ */ new Date(+start)).setHours(0, 0, 0, 0) === (/* @__PURE__ */ new Date(+end)).setHours(0, 0, 0, 0);
    };
    MonthEvent2.prototype.renderBlockEvents = function(event2, resIndex, isIcon) {
      var eventData = event2.data;
      var startTime = this.getStartTime(event2, eventData);
      var endTime = this.getEndTime(event2, eventData);
      var day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      if (day < 0 || startTime > endTime) {
        return;
      }
      var cellTd = this.getCellTd(day);
      var position = this.getPosition(startTime, endTime, event2[this.fields.isAllDay], day);
      if (!isIcon) {
        var diffInDays = eventData.count;
        var appWidth = this.getEventWidth(startTime, endTime, event2[this.fields.isAllDay], diffInDays);
        appWidth = appWidth <= 0 ? this.cellWidth : appWidth;
        var appLeft = this.parent.enableRtl ? 0 : position;
        var appRight = this.parent.enableRtl ? position : 0;
        var appHeight = this.cellHeight - this.monthHeaderHeight;
        var appTop = this.getRowTop(resIndex);
        var blockElement = this.createBlockAppointmentElement(event2, resIndex, this.isResourceEventTemplate);
        setStyleAttribute(blockElement, {
          "width": appWidth + "px",
          "height": appHeight + "px",
          "left": appLeft + "px",
          "right": appRight + "px",
          "top": appTop + "px"
        });
        this.renderEventElement(event2, blockElement, cellTd);
      } else {
        this.renderBlockIndicator(cellTd, position, resIndex);
      }
    };
    MonthEvent2.prototype.renderBlockIndicator = function(cellTd, position, resIndex) {
      var blockIndicator = createElement("div", { className: "e-icons " + BLOCK_INDICATOR_CLASS });
      if (isNullOrUndefined(cellTd.querySelector("." + BLOCK_INDICATOR_CLASS))) {
        cellTd.appendChild(blockIndicator);
      }
    };
    MonthEvent2.prototype.getStartTime = function(event2, eventData) {
      return event2[this.fields.startTime];
    };
    MonthEvent2.prototype.getEndTime = function(event2, eventData) {
      return event2[this.fields.endTime];
    };
    MonthEvent2.prototype.getCellTd = function(day) {
      return this.workCells[parseInt(day.toString(), 10)];
    };
    MonthEvent2.prototype.getEventWidth = function(startDate, endDate, isAllDay, count) {
      return count * this.cellWidth - 1;
    };
    MonthEvent2.prototype.getPosition = function(startTime, endTime, isAllDay, day) {
      return 0;
    };
    MonthEvent2.prototype.getRowTop = function(resIndex) {
      return 0;
    };
    MonthEvent2.prototype.updateIndicatorIcon = function(event2) {
      if (this.parent.currentView.indexOf("Timeline") === -1 || this.parent.currentView === "TimelineMonth" || event2[this.fields.isAllDay]) {
        return;
      }
      var cloneData = event2.data;
      var start = this.parent.activeView.getStartHour();
      var end = this.parent.activeView.getEndHour();
      var startHour = getStartEndHours(event2[this.fields.startTime], start, end);
      var endHour = getStartEndHours(event2[this.fields.endTime], start, end);
      var actualStartTime = cloneData[this.fields.startTime];
      var actualEndTime = cloneData[this.fields.endTime];
      cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() < startHour.startHour.getTime();
      cloneData.isRight = cloneData.isRight || actualEndTime.getTime() > endHour.endHour.getTime();
      if (resetTime(actualStartTime).getTime() !== resetTime(actualEndTime).getTime()) {
        var actualStartHour = startHour.startHour;
        var actualEndHour = endHour.endHour;
        var startTime = new Date(resetTime(actualStartTime));
        startTime.setHours(actualEndHour.getHours(), actualEndHour.getMinutes(), actualEndHour.getSeconds());
        cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() >= (actualStartHour.getDate() === startHour.endHour.getDate() ? startTime.getTime() : addDays(startTime, 1).getTime());
        if (actualEndTime.getTime() !== resetTime(actualEndTime).getTime()) {
          var endTime = new Date(resetTime(actualEndTime));
          cloneData.isRight = cloneData.isRight || actualEndTime.getTime() <= endTime.setHours(actualStartHour.getHours(), actualStartHour.getMinutes(), actualStartHour.getSeconds());
        }
      }
    };
    MonthEvent2.prototype.renderResourceEvents = function() {
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var sourceRes = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];
          this.renderEventsHandler(sourceRes.renderDates, sourceRes.workDays, sourceRes);
          if (this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];
            this.renderEventsHandler(target.renderDates, target.workDays, target);
          }
        }
        this.parent.crudModule.crudObj.isCrudAction = false;
      } else {
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
          var slotData = resources_1[_i];
          this.renderEventsHandler(slotData.renderDates, slotData.workDays, slotData);
        }
      }
    };
    MonthEvent2.prototype.getSlotDates = function(workDays) {
      this.slots = [];
      var dates = this.dateRender.map(function(date) {
        return +date;
      });
      var noOfDays = !this.parent.activeViewOptions.showWeekend || this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays ? workDays.length : WEEK_LENGTH;
      while (dates.length > 0) {
        this.slots.push(dates.splice(0, noOfDays));
      }
    };
    MonthEvent2.prototype.createAppointmentElement = function(record, resIndex, isCloneElement) {
      if (isCloneElement === void 0) {
        isCloneElement = false;
      }
      var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var newRecord = extend({}, record, record.data, true);
      var attrs = {
        "data-id": "Appointment_" + record[this.fields.id],
        "role": "button",
        "tabindex": "0",
        "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
        "aria-label": this.parent.getAnnouncementString(newRecord, eventSubject)
      };
      if (!isCloneElement) {
        attrs["data-guid"] = record.Guid;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        attrs["data-group-index"] = resIndex.toString();
      }
      var appointmentWrapper = createElement("div", { className: APPOINTMENT_CLASS, attrs });
      if (!isNullOrUndefined(this.cssClass)) {
        addClass([appointmentWrapper], this.cssClass);
      }
      if (record[this.fields.isReadonly]) {
        addClass([appointmentWrapper], "e-read-only");
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      appointmentWrapper.appendChild(appointmentDetails);
      var templateElement;
      var eventData = record.data;
      var eventObj = this.getEventData(record);
      if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.eventTemplateName;
        var templateId = scheduleId + viewName + "eventTemplate";
        var eventTemplate = this.isResourceEventTemplate ? this.parent.getEventTemplateName(resIndex) : "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, eventTemplate, templateId, false, void 0, void 0, this.parent.root);
      } else {
        var eventLocation = record[this.fields.location] || this.parent.eventSettings.fields.location.default || "";
        var appointmentSubject = createElement("div", { className: SUBJECT_CLASS });
        this.parent.sanitize(eventSubject + (eventLocation ? "; " + eventLocation : ""), appointmentSubject);
        var appointmentStartTime = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventData[this.fields.startTime])
        });
        var appointmentEndTime = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventData[this.fields.endTime])
        });
        if (this.parent.currentView === "Month") {
          if (record[this.fields.isAllDay]) {
            templateElement = [appointmentSubject];
            addClass([appointmentSubject], "e-text-center");
          } else if (eventData.count <= 1 && !eventData.isLeft && !eventData.isRight) {
            templateElement = [appointmentStartTime, appointmentSubject];
          } else {
            templateElement = [];
            addClass([appointmentSubject], "e-text-center");
            if (!eventData.isLeft) {
              templateElement.push(appointmentStartTime);
            }
            templateElement.push(appointmentSubject);
            if (!eventData.isRight) {
              templateElement.push(appointmentEndTime);
            }
          }
        } else {
          var innerElement = void 0;
          if (record[this.fields.isAllDay]) {
            var allDayString = createElement("div", {
              className: APPOINTMENT_TIME,
              innerHTML: this.parent.localeObj.getConstant("allDay")
            });
            innerElement = [appointmentSubject, allDayString];
          } else {
            var timeString = this.parent.getTimeString(eventData[this.fields.startTime]) + " - " + this.parent.getTimeString(eventData[this.fields.endTime]);
            var appTime = createElement("div", {
              className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
              innerHTML: timeString
            });
            var appLocation = createElement("div", { className: LOCATION_CLASS });
            this.parent.sanitize(eventLocation, appLocation);
            innerElement = [appointmentSubject, appTime, appLocation];
          }
          var wrap = createElement("div", { className: "e-inner-wrap" });
          append(innerElement, wrap);
          templateElement = [wrap];
        }
      }
      append(templateElement, appointmentDetails);
      this.appendEventIcons(record, appointmentDetails);
      this.renderResizeHandler(appointmentWrapper, record.data, record[this.fields.isReadonly]);
      return appointmentWrapper;
    };
    MonthEvent2.prototype.appendEventIcons = function(record, appointmentDetails) {
      var eventData = record.data;
      if (!isNullOrUndefined(record[this.fields.recurrenceRule]) || !isNullOrUndefined(record[this.fields.recurrenceID])) {
        var iconClass = record[this.fields.id] === record[this.fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        appointmentDetails.appendChild(createElement("div", {
          className: ICON3 + " " + iconClass + (this.parent.isAdaptive ? " " + DISABLE_CLASS : "")
        }));
      }
      if (eventData.isLeft) {
        var iconLeft = createElement("div", {
          className: EVENT_INDICATOR_CLASS + " " + ICON3 + " " + EVENT_ICON_LEFT_CLASS
        });
        prepend([iconLeft], appointmentDetails);
      }
      if (eventData.isRight) {
        var iconRight = createElement("div", {
          className: EVENT_INDICATOR_CLASS + " " + ICON3 + " " + EVENT_ICON_RIGHT_CLASS
        });
        append([iconRight], appointmentDetails);
      }
    };
    MonthEvent2.prototype.renderEvents = function(event2, resIndex, eventsList) {
      var startTime = event2[this.fields.startTime];
      var endTime = event2[this.fields.endTime];
      var day = this.parent.getIndexOfDate(this.dateRender, resetTime(startTime));
      if (day < 0 || startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      var eventsPerRow = this.parent.rowAutoHeight ? 1 : this.parent.activeViewOptions.maxEventsPerRow;
      var overlapCount = this.getIndex(startTime);
      event2.Index = overlapCount;
      var diffInDays = event2.data.count;
      if (startTime.getTime() <= endTime.getTime()) {
        var appWidth = diffInDays * this.cellWidth - 5;
        var cellTd = this.workCells[parseInt(day.toString(), 10)];
        var appTop = overlapCount * (this.eventHeight + EVENT_GAP);
        var height = this.monthHeaderHeight + (overlapCount + 1) * (this.eventHeight + EVENT_GAP) + this.moreIndicatorHeight;
        var enableAppRender = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight && !this.parent.eventSettings.enableIndicator ? overlapCount < eventsPerRow : this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;
        if (this.parent.rowAutoHeight || enableAppRender) {
          this.renderedEvents.push(extend({}, event2, null, true));
          var appointmentElement = void 0;
          if (this.inlineValue) {
            appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
          } else {
            appointmentElement = this.createAppointmentElement(event2, resIndex);
          }
          this.applyResourceColor(appointmentElement, event2, "backgroundColor", this.groupOrder);
          this.wireAppointmentEvents(appointmentElement, event2);
          setStyleAttribute(appointmentElement, { "width": appWidth + "px", "top": appTop + "px" });
          this.renderEventElement(event2, appointmentElement, cellTd);
          if (this.parent.rowAutoHeight) {
            var firstChild = cellTd.parentElement.firstElementChild;
            this.updateCellHeight(firstChild, height);
          }
        } else {
          for (var i = 0; i < diffInDays; i++) {
            if (this.workCells[day + i]) {
              var indicator = this.workCells[day + i].querySelector("." + MORE_INDICATOR_CLASS);
              if (indicator) {
                var count = parseInt(indicator.getAttribute("data-count"), 10) + 1;
                indicator.setAttribute("data-count", count.toString());
                indicator.setAttribute("aria-label", count + " " + this.parent.localeObj.getConstant("moreEvents"));
                indicator.innerHTML = this.getMoreIndicatorText(count);
              } else {
                var startDate = new Date(this.dateRender[day + i].getTime());
                var endDate = addDays(this.dateRender[day + i], 1);
                var groupIndex = this.workCells[day + i].getAttribute("data-group-index");
                var moreIndicatorElement = this.getMoreIndicatorElement(1, startDate, endDate);
                if (!isNullOrUndefined(groupIndex)) {
                  moreIndicatorElement.setAttribute("data-group-index", groupIndex);
                }
                moreIndicatorElement.style.top = this.cellHeight - this.monthHeaderHeight - this.moreIndicatorHeight + "px";
                moreIndicatorElement.style.width = this.cellWidth - 2 + "px";
                this.renderElement(this.workCells[day + i], moreIndicatorElement);
                EventHandler.add(moreIndicatorElement, "click", this.moreIndicatorClick, this);
              }
            }
          }
        }
      }
    };
    MonthEvent2.prototype.updateCellHeight = function(cell, height) {
      if (height > cell.offsetHeight) {
        setStyleAttribute(cell, { "height": height + "px" });
      }
    };
    MonthEvent2.prototype.updateBlockElements = function() {
      var blockElement = [].slice.call(this.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS));
      for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
        var element = blockElement_1[_i];
        var target = closest(element, "tr");
        this.monthHeaderHeight = element.offsetParent.offsetTop - target.offsetTop;
        element.style.height = target.offsetHeight - 1 - this.monthHeaderHeight + "px";
        var firstChild = target.firstElementChild;
        var width = Math.round(element.offsetWidth / firstChild.offsetWidth);
        element.style.width = firstChild.offsetWidth * width + "px";
      }
    };
    MonthEvent2.prototype.getFilteredEvents = function(startDate, endDate, groupIndex, eventsList) {
      var filteredEvents;
      if (isNullOrUndefined(groupIndex)) {
        filteredEvents = this.filterEvents(startDate, endDate);
      } else {
        var data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];
        filteredEvents = this.filterEvents(startDate, endDate, isNullOrUndefined(eventsList) ? void 0 : eventsList, data);
      }
      return filteredEvents;
    };
    MonthEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      var dateTime = resetTime(date).getTime();
      for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
        var app = appointments_1[_i];
        if (resetTime(app[this.fields.startTime]).getTime() <= dateTime && resetTime(app[this.fields.endTime]).getTime() >= dateTime) {
          appointmentsList.push(app);
        }
      }
      return appointmentsList;
    };
    MonthEvent2.prototype.getIndex = function(date) {
      var appIndex = -1;
      var appointments = this.renderedEvents;
      if (appointments.length > 0) {
        var appointmentsList = this.getOverlapEvents(date, appointments);
        var appLevel = appointmentsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    MonthEvent2.prototype.moreIndicatorClick = function(event2) {
      var _this = this;
      var target = closest(event2.target, "." + MORE_INDICATOR_CLASS);
      var startDate = new Date(parseInt(target.getAttribute("data-start-date"), 10));
      var endDate = new Date(parseInt(target.getAttribute("data-end-date"), 10));
      var groupIndex = target.getAttribute("data-group-index");
      var moreArgs = {
        cancel: false,
        event: event2,
        element: target,
        isPopupOpen: true,
        startTime: startDate,
        endTime: endDate,
        viewName: this.parent.getNavigateView()
      };
      if (groupIndex) {
        moreArgs.groupIndex = parseInt(groupIndex, 10);
      }
      this.parent.trigger(moreEventsClick, moreArgs, function(clickArgs) {
        if (!clickArgs.cancel) {
          if (clickArgs.isPopupOpen) {
            var filteredEvents = _this.getFilteredEvents(startDate, endDate, groupIndex);
            var moreArgs_1 = { date: startDate, event: filteredEvents, element: event2.target };
            _this.parent.quickPopup.moreEventClick(moreArgs_1, endDate, groupIndex);
          } else {
            _this.parent.setProperties({ selectedDate: startDate }, true);
            _this.parent.changeView(clickArgs.viewName, event2);
          }
        }
      });
    };
    MonthEvent2.prototype.renderEventElement = function(event2, appointmentElement, cellTd) {
      var _this = this;
      var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? "blockEvent" : "event";
      var isAppointment = appointmentElement.classList.contains(APPOINTMENT_CLASS);
      var eventObj = this.getEventData(event2);
      var args = { data: eventObj, element: appointmentElement, cancel: false, type: eventType };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (eventArgs.cancel) {
          _this.renderedEvents.pop();
        } else {
          _this.renderElement(cellTd, appointmentElement, isAppointment);
        }
      });
    };
    MonthEvent2.prototype.getEventData = function(event2) {
      var eventObj = extend({}, event2, null, true);
      eventObj[this.fields.startTime] = event2.data[this.fields.startTime];
      eventObj[this.fields.endTime] = event2.data[this.fields.endTime];
      return eventObj;
    };
    MonthEvent2.prototype.renderElement = function(cellTd, element, isAppointment) {
      if (isAppointment === void 0) {
        isAppointment = false;
      }
      if (this.maxOrIndicator && isAppointment) {
        this.setMaxEventHeight(element, cellTd);
      }
      var wrapperEle = cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (wrapperEle) {
        wrapperEle.appendChild(element);
      } else {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(element);
        cellTd.appendChild(wrapper);
      }
    };
    MonthEvent2.prototype.getMoreIndicatorElement = function(count, startDate, endDate) {
      var moreIndicatorElement = createElement("div", {
        className: MORE_INDICATOR_CLASS,
        innerHTML: this.getMoreIndicatorText(count),
        attrs: {
          "role": "button",
          "tabindex": "0",
          "aria-label": this.parent.globalize.formatNumber(count) + " " + this.parent.localeObj.getConstant("moreEvents"),
          "data-count": count.toString(),
          "data-start-date": startDate.getTime().toString(),
          "data-end-date": endDate.getTime().toString()
        }
      });
      return moreIndicatorElement;
    };
    MonthEvent2.prototype.getMoreIndicatorText = function(count) {
      return "+" + this.parent.globalize.formatNumber(count) + "&nbsp;" + (this.parent.isAdaptive ? "" : this.parent.localeObj.getConstant("more"));
    };
    MonthEvent2.prototype.removeHeightProperty = function(selector) {
      var rows = [].slice.call(this.element.querySelectorAll("." + selector + " tbody tr"));
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        row.firstElementChild.style.height = "";
      }
    };
    MonthEvent2.prototype.setMaxEventHeight = function(event2, cell) {
      var headerHeight = getOuterHeight(cell.querySelector("." + DATE_HEADER_CLASS));
      var height = cell.offsetHeight - headerHeight - (this.maxHeight ? 0 : this.moreIndicatorHeight);
      setStyleAttribute(event2, { "height": height + "px", "align-items": "center" });
    };
    MonthEvent2.prototype.destroy = function() {
      this.element = null;
      this.fields = null;
      this.maxHeight = null;
      this.withIndicator = null;
      this.maxOrIndicator = null;
      this.moreIndicatorHeight = null;
      this.removeEventListener();
      _super.prototype.destroy.call(this);
    };
    return MonthEvent2;
  }(EventBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/timeline-view.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP2 = 2;
var BLOCK_INDICATOR_WIDTH = 22;
var BLOCK_INDICATOR_HEIGHT = 18;
var TimelineEvent = (
  /** @class */
  function(_super) {
    __extends26(TimelineEvent2, _super);
    function TimelineEvent2(parent, type) {
      var _this = _super.call(this, parent) || this;
      _this.startHour = _this.parent.activeView.getStartHour();
      _this.endHour = _this.parent.activeView.getEndHour();
      _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;
      _this.interval = _this.parent.activeViewOptions.timeScale.interval;
      _this.day = 0;
      _this.rowIndex = 0;
      _this.cellTops = [];
      _this.renderType = type;
      _this.eventContainers = [].slice.call(_this.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var tr = [].slice.call(_this.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr"));
      _this.dayLength = tr.length === 0 ? 0 : tr[0].children.length;
      _this.content = _this.parent.element.querySelector("." + SCHEDULE_TABLE_CLASS + "." + CONTENT_TABLE_CLASS);
      return _this;
    }
    TimelineEvent2.prototype.getSlotDates = function() {
      this.slots = [];
      this.slots.push(this.parent.activeView.renderDates.map(function(date) {
        return +date;
      }));
      if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        this.renderType = "day";
        var workCell = this.content.querySelector("." + WORK_CELLS_CLASS);
        this.cellWidth = getElementWidth(workCell) / +(workCell.getAttribute("colspan") || 1);
        this.slotsPerDay = 1;
      } else {
        this.slotsPerDay = this.dayLength / this.dateRender.length;
      }
    };
    TimelineEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      if (this.renderType === "day") {
        for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
          var app = appointments_1[_i];
          if (resetTime(app[this.fields.startTime]).getTime() <= resetTime(new Date(date.getTime())).getTime() && resetTime(app[this.fields.endTime]).getTime() >= resetTime(new Date(date.getTime())).getTime()) {
            appointmentsList.push(app);
          }
        }
      } else {
        for (var _a = 0, appointments_2 = appointments; _a < appointments_2.length; _a++) {
          var app = appointments_2[_a];
          var eventData = app.data;
          if (eventData.trimStartTime.getTime() <= date.getTime() && eventData.trimEndTime.getTime() > date.getTime() || eventData.trimStartTime.getTime() === date.getTime() && eventData.trimEndTime.getTime() === date.getTime()) {
            appointmentsList.push(app);
          }
        }
      }
      return appointmentsList;
    };
    TimelineEvent2.prototype.getSortComparerIndex = function(startDate, endDate) {
      var appIndex = -1;
      var appointments = this.renderedEvents;
      if (appointments.length > 0) {
        var appointmentsList = this.getOverlapSortComparerEvents(startDate, endDate, appointments);
        var appLevel = appointmentsList.map(function(obj) {
          return obj.Index;
        });
        appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;
      }
      return appIndex === -1 ? 0 : appIndex;
    };
    TimelineEvent2.prototype.getOverlapSortComparerEvents = function(startDate, endDate, appointmentsCollection) {
      var appointments = [];
      var _loop_1 = function(app2) {
        if (this_1.renderType === "day") {
          var start_1 = resetTime(startDate).getTime();
          var end_1 = resetTime(endDate).getTime();
          var appStart_1 = resetTime(app2[this_1.fields.startTime]).getTime();
          var appEnd_1 = resetTime(app2[this_1.fields.endTime]).getTime();
          var isEndOverlap = function() {
            var endTime = end_1 - (getDateInMs(endDate) <= 0 ? MS_PER_DAY : 0);
            endTime = start_1 > endTime ? start_1 : endTime;
            return appEnd_1 >= endTime && appStart_1 <= endTime;
          };
          if (appStart_1 <= start_1 && appEnd_1 >= start_1 || isEndOverlap() || appStart_1 > start_1 && appEnd_1 < end_1) {
            appointments.push(app2);
          }
        } else {
          var eventData = app2.data;
          if (eventData.trimStartTime.getTime() <= startDate.getTime() && startDate.getTime() < eventData.trimEndTime.getTime() || startDate.getTime() <= eventData.trimStartTime.getTime() && eventData.trimStartTime.getTime() < endDate.getTime()) {
            appointments.push(app2);
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, appointmentsCollection_1 = appointmentsCollection; _i < appointmentsCollection_1.length; _i++) {
        var app = appointmentsCollection_1[_i];
        _loop_1(app);
      }
      return appointments;
    };
    TimelineEvent2.prototype.renderResourceEvents = function() {
      this.removeHeightProperty(RESOURCE_COLUMN_TABLE_CLASS);
      var selector = "." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP2, this.moreIndicatorHeight, 0, false);
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;
      if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {
        for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {
          var source = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];
          this.rowIndex = source.groupIndex;
          this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, source);
          if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
            var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];
            this.rowIndex = target.groupIndex;
            this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, target);
          }
        }
        this.parent.crudModule.crudObj.isCrudAction = false;
      } else {
        for (var i = 0; i < resources.length; i++) {
          this.rowIndex = i;
          this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, resources[parseInt(i.toString(), 10)]);
        }
      }
    };
    TimelineEvent2.prototype.renderEvents = function(event2, resIndex, appointmentsList) {
      var startTime = event2[this.fields.startTime];
      var endTime = event2[this.fields.endTime];
      if (startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {
        return;
      }
      var eventData = event2.data;
      startTime = this.getStartTime(event2, eventData);
      endTime = this.getEndTime(event2, eventData);
      var startEndHours = getStartEndHours(event2[this.fields.startTime], this.startHour, this.endHour);
      var eventDates = this.updateEventMinimumDuration(startEndHours, startTime, endTime);
      startTime = eventDates.startDate;
      endTime = eventDates.endDate;
      this.day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      if (this.day < 0) {
        return;
      }
      var cellTd = this.getCellTd();
      var eventsPerRow = this.parent.rowAutoHeight ? 1 : this.parent.activeViewOptions.maxEventsPerRow;
      var overlapCount = isNullOrUndefined(this.parent.eventSettings.sortComparer) ? this.getIndex(startTime) : this.getSortComparerIndex(startTime, endTime);
      event2.Index = overlapCount;
      var appHeight = this.eventHeight;
      var diffInDays = eventData.count;
      var eventObj = extend({}, event2, null, true);
      eventObj[this.fields.startTime] = eventData[this.fields.startTime];
      eventObj[this.fields.endTime] = eventData[this.fields.endTime];
      var currentDate = resetTime(new Date(this.dateRender[this.day].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var isValidEvent = true;
      if (this.isDayProcess() || eventObj[this.fields.isAllDay]) {
        isValidEvent = true;
      } else {
        isValidEvent = this.isValidEvent(eventObj, startTime, endTime, schedule);
      }
      if (startTime <= endTime && isValidEvent) {
        var appWidth = this.getEventWidth(startTime, endTime, event2[this.fields.isAllDay], diffInDays);
        appWidth = this.renderType === "day" ? appWidth - 2 : appWidth;
        var appLeft = 0;
        var appRight = 0;
        var position = this.getPosition(startTime, endTime, event2[this.fields.isAllDay], this.day);
        appWidth = appWidth <= 0 ? this.cellWidth : appWidth;
        this.renderedEvents.push(extend({}, event2, null, true));
        if (isNullOrUndefined(this.cellTops[parseInt(resIndex.toString(), 10)])) {
          this.cellTops[parseInt(resIndex.toString(), 10)] = this.getRowTop(resIndex);
        }
        var top_1 = this.cellTops[parseInt(resIndex.toString(), 10)];
        var appTop = top_1 + (this.maxHeight ? 0 : EVENT_GAP2) + overlapCount * (appHeight + EVENT_GAP2);
        appLeft = this.parent.enableRtl ? 0 : position;
        appRight = this.parent.enableRtl ? position : 0;
        var height = (overlapCount + 1) * (appHeight + EVENT_GAP2) + this.moreIndicatorHeight;
        var renderApp = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.rowAutoHeight && !this.parent.eventSettings.enableIndicator ? overlapCount < eventsPerRow : this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;
        if (this.parent.rowAutoHeight || renderApp) {
          var appointmentElement = void 0;
          if (isNullOrUndefined(this.inlineValue)) {
            appointmentElement = this.createAppointmentElement(event2, resIndex);
          } else {
            appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
          }
          this.applyResourceColor(appointmentElement, event2, "backgroundColor", this.groupOrder);
          setStyleAttribute(appointmentElement, {
            "width": appWidth + "px",
            "left": appLeft + "px",
            "right": appRight + "px",
            "top": appTop + "px"
          });
          this.wireAppointmentEvents(appointmentElement, event2);
          if (this.parent.rowAutoHeight) {
            var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
            var conWidth = getElementWidth(conWrap);
            var isWithoutScroll = conWrap.offsetHeight === conWrap.clientHeight && conWrap.offsetWidth === conWrap.clientWidth;
            this.renderEventElement(event2, appointmentElement, cellTd);
            var firstChild = this.getFirstChild(resIndex);
            this.updateCellHeight(firstChild, height);
            if (isWithoutScroll && (conWrap.offsetWidth > conWrap.clientWidth || conWidth !== getElementWidth(conWrap))) {
              this.adjustAppointments(conWidth);
            }
          } else {
            this.renderEventElement(event2, appointmentElement, cellTd);
          }
        } else {
          for (var i = 0; i < diffInDays; i++) {
            var moreIndicator = cellTd.querySelector("." + MORE_INDICATOR_CLASS);
            var appPos = this.parent.enableRtl ? appRight : appLeft;
            appPos = Math.floor(appPos / this.cellWidth) * this.cellWidth;
            var interval = this.interval / this.slotCount;
            var startDate = this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day" || i !== 0 ? new Date(this.dateRender[this.day + i].getTime()) : new Date(startTime);
            var endDate = addDays(this.dateRender[this.day + i], 1);
            if (this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day") {
              var position_1 = this.getPosition(startDate, endDate, event2[this.fields.isAllDay], this.day + i);
              this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_1);
            } else {
              var slotCount = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE * this.slotCount / this.interval;
              for (var k = 0; k < slotCount; k++) {
                startDate = k === 0 ? new Date(startDate.getTime()) : new Date(startDate.getTime() + 6e4 * interval);
                if (slotCount < 1) {
                  startDate = this.adjustToNearestTimeSlot(startDate, interval);
                }
                endDate = new Date(startDate.getTime() + 6e4 * interval);
                if (slotCount >= 1 && endDate.getTime() > endTime.getTime()) {
                  break;
                }
                var position_2 = this.getPosition(startDate, endDate, false, this.day + i);
                if (appPos > position_2) {
                  break;
                }
                appPos = position_2;
                this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_2);
              }
            }
          }
        }
      }
      this.parent.renderTemplates();
    };
    TimelineEvent2.prototype.adjustToNearestTimeSlot = function(inputTime, interval) {
      var parsedTime = new Date(inputTime);
      var minutesInMilliseconds = parsedTime.getHours() * 60 * 60 * 1e3 + parsedTime.getMinutes() * 60 * 1e3;
      var adjustedMinutesInMilliseconds = Math.floor(minutesInMilliseconds / (interval * 60 * 1e3)) * (interval * 60 * 1e3);
      var adjustedTime = new Date(parsedTime.getTime());
      adjustedTime.setHours(adjustedMinutesInMilliseconds / (60 * 60 * 1e3) % 24);
      adjustedTime.setMinutes(adjustedMinutesInMilliseconds % (60 * 60 * 1e3) / (60 * 1e3));
      return adjustedTime;
    };
    TimelineEvent2.prototype.renderTimelineMoreIndicator = function(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top, appLeft, appRight, cellTd, moreIndicator, appPos, position) {
      appLeft = this.parent.enableRtl ? appRight = position : position;
      appPos = this.parent.enableRtl ? appRight : appLeft;
      appPos = Math.floor(appPos / this.cellWidth) * this.cellWidth;
      if (cellTd && isNullOrUndefined(moreIndicator) || !this.isAlreadyAvail(appPos, cellTd)) {
        var startDateTime = this.parent.activeViewOptions.option === "TimelineMonth" || this.renderType === "day" ? /* @__PURE__ */ new Date(+startTime) : startDate;
        var slotStartTime = new Date(startDateTime.setMinutes(Math.floor(startDateTime.getMinutes() / interval) * interval));
        var slotEndTime = new Date(slotStartTime.getTime() + 6e4 * interval);
        var groupIndex = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(resIndex)) {
          groupIndex = resIndex.toString();
        }
        var filterEvents = this.getFilterEvents(startDate, endDate, slotStartTime, slotEndTime, groupIndex, appointmentsList);
        var appArea = this.cellHeight - this.moreIndicatorHeight;
        appHeight = this.withIndicator ? appArea - EVENT_GAP2 : appHeight;
        var renderedAppCount = Math.floor(appArea / (appHeight + EVENT_GAP2));
        var count = this.parent.activeViewOptions.maxEventsPerRow && !this.parent.eventSettings.enableIndicator ? filterEvents.length - this.parent.activeViewOptions.maxEventsPerRow : filterEvents.length - renderedAppCount <= 0 ? 1 : filterEvents.length - renderedAppCount;
        var moreIndicatorElement = void 0;
        if (this.renderType === "day") {
          moreIndicatorElement = this.getMoreIndicatorElement(count, startDate, endDate);
        } else {
          moreIndicatorElement = this.getMoreIndicatorElement(count, slotStartTime, slotEndTime);
        }
        if (!isNullOrUndefined(groupIndex)) {
          moreIndicatorElement.setAttribute("data-group-index", groupIndex);
        }
        moreIndicatorElement.style.top = top + appArea + "px";
        moreIndicatorElement.style.width = this.cellWidth + "px";
        moreIndicatorElement.style.left = Math.floor(appLeft / this.cellWidth) * this.cellWidth + "px";
        moreIndicatorElement.style.right = Math.floor(appRight / this.cellWidth) * this.cellWidth + "px";
        this.renderElement(cellTd, moreIndicatorElement);
        EventHandler.add(moreIndicatorElement, "click", this.moreIndicatorClick, this);
      }
    };
    TimelineEvent2.prototype.updateCellHeight = function(cell, height) {
      var cellHeight = cell.style.height === "" ? this.cellHeight : parseInt(cell.style.height, 10);
      if (height > cellHeight) {
        setStyleAttribute(cell, { "height": height + "px" });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          var resourceCell = this.parent.element.querySelector("." + RESOURCE_COLUMN_TABLE_CLASS + ' tbody td[data-group-index="' + cell.getAttribute("data-group-index") + '"]');
          if (resourceCell) {
            setStyleAttribute(resourceCell, { "height": height + "px" });
          }
        }
        var monthHeader = this.parent.element.querySelector(".e-month-header-wrapper table tr:nth-child(" + (cell.parentElement.rowIndex + 1) + ") td");
        if (monthHeader) {
          setStyleAttribute(monthHeader, { "height": height + "px" });
        }
      }
    };
    TimelineEvent2.prototype.adjustAppointments = function(conWidth) {
      var _this = this;
      var tr = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody tr");
      var actualCellWidth = getElementWidth(this.workCells[0]);
      this.cellWidth = actualCellWidth / +(this.workCells[0].getAttribute("colspan") || 1);
      var currentPercentage = actualCellWidth * tr.children.length / (conWidth / 100);
      var apps = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      apps.forEach(function(app) {
        if (_this.parent.enableRtl && app.style.right !== "0px") {
          app.style.right = parseFloat(app.style.right) / 100 * currentPercentage + "px";
        } else if (app.style.left !== "0px") {
          app.style.left = parseFloat(app.style.left) / 100 * currentPercentage + "px";
        }
        app.style.width = parseFloat(app.style.width) / 100 * currentPercentage + "px";
      });
    };
    TimelineEvent2.prototype.getFirstChild = function(index) {
      var query = "." + CONTENT_TABLE_CLASS + " tbody td";
      var groupIndex = "";
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        groupIndex = '[data-group-index="' + index.toString() + '"]';
      }
      var td = this.parent.element.querySelector(query + groupIndex);
      return td;
    };
    TimelineEvent2.prototype.updateBlockElements = function() {
      var blockElement = [].slice.call(this.element.querySelectorAll("." + BLOCK_APPOINTMENT_CLASS));
      for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
        var element = blockElement_1[_i];
        var resIndex = parseInt(element.getAttribute("data-group-index"), 10);
        var firstChild = this.getFirstChild(resIndex);
        element.style.height = firstChild.offsetHeight + "px";
        var width = element.offsetWidth / firstChild.offsetWidth;
        element.style.width = firstChild.offsetWidth * width + "px";
      }
      var blockIndicator = [].slice.call(this.element.querySelectorAll("." + BLOCK_INDICATOR_CLASS));
      for (var _a = 0, blockIndicator_1 = blockIndicator; _a < blockIndicator_1.length; _a++) {
        var element = blockIndicator_1[_a];
        var resIndex = parseInt(element.getAttribute("data-group-index"), 10);
        element.style.top = this.getRowTop(resIndex) + this.getFirstChild(resIndex).offsetHeight - BLOCK_INDICATOR_HEIGHT + "px";
      }
    };
    TimelineEvent2.prototype.getStartTime = function(event2, eventData) {
      var startTime = event2[this.fields.startTime];
      var schedule = getStartEndHours(startTime, this.startHour, this.endHour);
      if (this.isDayProcess()) {
        startTime = event2[this.fields.startTime];
      } else {
        if (schedule.startHour.getTime() >= eventData[this.fields.startTime]) {
          startTime = schedule.startHour;
        } else if (schedule.endHour.getTime() <= eventData[this.fields.startTime]) {
          startTime = this.getNextDay(schedule.startHour, eventData);
        } else {
          startTime = eventData[this.fields.startTime];
        }
      }
      eventData.trimStartTime = event2[this.fields.isAllDay] ? schedule.startHour : eventData[this.fields.startTime];
      return startTime;
    };
    TimelineEvent2.prototype.getNextDay = function(startTime, eventData) {
      var startDate;
      for (var i = 1; i <= this.dateRender.length; i++) {
        startDate = addDays(startTime, i);
        if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {
          eventData.count = eventData.count - 1;
          return startDate;
        }
      }
      return startDate;
    };
    TimelineEvent2.prototype.getEndTime = function(event2, eventData) {
      var endTime = event2[this.fields.endTime];
      var schedule = getStartEndHours(endTime, this.startHour, this.endHour);
      if (this.isDayProcess()) {
        endTime = eventData[this.fields.endTime];
      } else {
        endTime = eventData[this.fields.endTime];
        if (schedule.endHour.getTime() <= eventData[this.fields.endTime] || event2[this.fields.isAllDay]) {
          endTime = schedule.endHour;
        }
        if (schedule.startHour.getTime() >= eventData[this.fields.endTime].getTime() && !event2[this.fields.isAllDay]) {
          endTime = this.getPreviousDay(schedule.startHour, schedule.endHour, eventData);
        }
      }
      eventData.trimEndTime = event2[this.fields.isAllDay] ? schedule.endHour : eventData[this.fields.endTime];
      return endTime;
    };
    TimelineEvent2.prototype.getPreviousDay = function(startTime, endTime, eventData) {
      for (var i = 1; i <= this.dateRender.length; i++) {
        var endDate = addDays(endTime, -i);
        if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {
          endDate = resetTime(new Date(endDate.getTime()));
          endDate.setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds());
          var count = eventData.count;
          var actualEndTime = eventData[this.fields.endTime];
          eventData.count = actualEndTime.getHours() !== 0 || actualEndTime.getMinutes() !== 0 ? count - 1 : count;
          return endDate;
        }
      }
      return eventData[this.fields.endTime];
    };
    TimelineEvent2.prototype.getEventWidth = function(startDate, endDate, isAllDay, count) {
      if (this.renderType === "day" || isAllDay) {
        return count * this.slotsPerDay * this.cellWidth;
      }
      if (this.isSameDay(startDate, endDate)) {
        return this.getSameDayEventsWidth(startDate, endDate);
      } else {
        return this.getSpannedEventsWidth(startDate, endDate, count);
      }
    };
    TimelineEvent2.prototype.getSameDayEventsWidth = function(startDate, endDate) {
      var intervalMins = this.interval;
      if (this.slotsPerDay === 1) {
        var hoursRange = getStartEndHours(resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);
        intervalMins = (hoursRange.endHour.getTime() - hoursRange.startHour.getTime()) / MS_PER_MINUTE;
      }
      return (getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_MINUTE * (this.cellWidth * this.slotCount) / intervalMins;
    };
    TimelineEvent2.prototype.getSpannedEventsWidth = function(startDate, endDate, diffInDays) {
      var width = diffInDays * this.slotsPerDay * this.cellWidth;
      var endWidth;
      var start = getStartEndHours(resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);
      var startWidth = this.getSameDayEventsWidth(start.startHour, startDate);
      if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endDate.getTime()))) === -1) {
        endWidth = 0;
      } else {
        var end = getStartEndHours(resetTime(new Date(endDate.getTime())), this.startHour, this.endHour);
        endWidth = this.getSameDayEventsWidth(endDate, end.endHour);
        endWidth = this.slotsPerDay * this.cellWidth === endWidth ? 0 : endWidth;
      }
      var spannedWidth = startWidth + endWidth;
      return width > spannedWidth ? width - spannedWidth : width - startWidth;
    };
    TimelineEvent2.prototype.isSameDay = function(startTime, endTime) {
      var startDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));
      var endDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endTime.getTime())));
      return startDay === endDay;
    };
    TimelineEvent2.prototype.getAppointmentLeft = function(schedule, startTime, day) {
      var slotTd = this.isSameDay(startTime, schedule.startHour) ? (getUniversalTime(startTime) - getUniversalTime(schedule.startHour)) / (MS_PER_MINUTE * this.interval) * this.slotCount : 0;
      if (day === 0) {
        return slotTd;
      } else {
        var daySlot = Math.round((getUniversalTime(schedule.endHour) - getUniversalTime(schedule.startHour)) / MS_PER_MINUTE / this.interval * this.slotCount);
        return daySlot * day + slotTd;
      }
    };
    TimelineEvent2.prototype.getPosition = function(startTime, endTime, isAllDay, day) {
      if (this.renderType === "day" || isAllDay) {
        return day * this.slotsPerDay * this.cellWidth;
      }
      var currentDate = resetTime(new Date(this.dateRender[parseInt(day.toString(), 10)].getTime()));
      var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);
      var cellIndex;
      if (schedule.endHour.getTime() <= endTime.getTime() && schedule.startHour.getTime() >= startTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
      } else if (schedule.endHour.getTime() <= endTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, startTime, day);
      } else if (schedule.startHour.getTime() >= startTime.getTime()) {
        cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
      } else {
        cellIndex = this.getAppointmentLeft(schedule, startTime, day);
      }
      return cellIndex * this.cellWidth;
    };
    TimelineEvent2.prototype.getFilterEvents = function(startDate, endDate, startTime, endTime, gIndex, eventsList) {
      if (this.renderType === "day") {
        return this.getFilteredEvents(startDate, endDate, gIndex, eventsList);
      } else {
        return this.getFilteredEvents(startTime, endTime, gIndex, eventsList);
      }
    };
    TimelineEvent2.prototype.isAlreadyAvail = function(appPos, cellTd) {
      var moreIndicator = [].slice.call(cellTd.querySelectorAll("." + MORE_INDICATOR_CLASS));
      for (var i = 0; i < moreIndicator.length; i++) {
        var indicatorPos = void 0;
        if (moreIndicator) {
          indicatorPos = this.parent.enableRtl ? moreIndicator[parseInt(i.toString(), 10)].style.right : moreIndicator[parseInt(i.toString(), 10)].style.left;
        }
        if (parseInt(indicatorPos, 10) === Math.floor(appPos)) {
          return true;
        }
      }
      return false;
    };
    TimelineEvent2.prototype.getRowTop = function(resIndex) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody td[data-group-index="' + resIndex.toString() + '"]').offsetTop;
      }
      return 0;
    };
    TimelineEvent2.prototype.getCellTd = function() {
      var wrapIndex = this.parent.uiStateValues.isGroupAdaptive ? 0 : this.rowIndex;
      return this.eventContainers[parseInt(wrapIndex.toString(), 10)];
    };
    TimelineEvent2.prototype.renderBlockIndicator = function(cellTd, position, resIndex) {
      if (this.parent.headerRows.length > 0 && (this.parent.headerRows[this.parent.headerRows.length - 1].option !== "Hour" || this.parent.headerRows[this.parent.headerRows.length - 1].option !== "Date")) {
        return;
      }
      position = Math.floor(position / this.cellWidth) * this.cellWidth + this.cellWidth - BLOCK_INDICATOR_WIDTH;
      if (!this.isAlreadyAvail(position, cellTd)) {
        var blockIndicator = createElement("div", { className: "e-icons " + BLOCK_INDICATOR_CLASS });
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          blockIndicator.setAttribute("data-group-index", resIndex.toString());
        }
        if (this.parent.enableRtl) {
          blockIndicator.style.right = position + "px";
        } else {
          blockIndicator.style.left = position + "px";
        }
        blockIndicator.style.top = this.getRowTop(resIndex) + this.cellHeight - BLOCK_INDICATOR_HEIGHT + "px";
        this.renderElement(cellTd, blockIndicator);
      }
    };
    TimelineEvent2.prototype.setMaxEventHeight = function(event2, cell) {
      setStyleAttribute(event2, {
        "height": this.cellHeight - (this.maxHeight ? 0 : EVENT_GAP2) - (this.maxHeight ? 0 : this.moreIndicatorHeight) + "px"
      });
    };
    TimelineEvent2.prototype.isDayProcess = function() {
      if (this.parent.currentView === "TimelineMonth" || !this.parent.activeViewOptions.timeScale.enable || this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return true;
      }
      return false;
    };
    TimelineEvent2.prototype.destroy = function() {
      this.renderType = null;
      this.eventContainers = null;
      this.dayLength = null;
      this.content = null;
      _super.prototype.destroy.call(this);
      this.parent = null;
    };
    return TimelineEvent2;
  }(MonthEvent)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/inline-edit.js
var InlineEdit = (
  /** @class */
  function() {
    function InlineEdit2(parent) {
      this.parent = parent;
      this.parent.on(inlineClick, this.inlineEdit, this);
    }
    InlineEdit2.prototype.inlineEdit = function(args) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (args.type === "Cell") {
        var moreWrapper = this.parent.element.querySelector("." + MORE_POPUP_WRAPPER_CLASS);
        if (moreWrapper && moreWrapper.classList.contains(POPUP_OPEN)) {
          this.parent.quickPopup.morePopup.hide();
        }
        this.removeInlineAppointmentElement();
        this.cellEdit(args);
      } else {
        if (this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS) !== args.element.querySelector("." + INLINE_SUBJECT_CLASS)) {
          this.removeInlineAppointmentElement();
        }
        this.eventEdit(args);
      }
    };
    InlineEdit2.prototype.cellEdit = function(args) {
      var saveObj = this.generateEventData();
      var cellIndex = args.element.cellIndex;
      var count = this.getEventDaysCount(saveObj);
      if (count > 1) {
        count = Math.round(count);
        count--;
        cellIndex = cellIndex - count;
      }
      var start = resetTime(/* @__PURE__ */ new Date("" + saveObj[this.parent.eventFields.startTime])).getTime();
      var end = resetTime(/* @__PURE__ */ new Date("" + saveObj[this.parent.eventFields.endTime])).getTime();
      var resIndex = args.groupIndex || 0;
      var isVertical = this.parent.currentView === "Day" || this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek";
      if (this.parent.activeViewOptions.timeScale.enable && isVertical) {
        var dayIndex2 = saveObj[this.parent.eventFields.startTime].getDay();
        this.createVerticalViewInline(saveObj, dayIndex2, resIndex, cellIndex);
      } else if (this.parent.currentView === "Month" || !this.parent.activeViewOptions.timeScale.enable && isVertical) {
        this.createMonthViewInline(saveObj, resIndex, start, end);
      } else {
        this.createTimelineViewInline(saveObj, start, end, resIndex);
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (inlineSubject) {
        inlineSubject.focus();
      }
    };
    InlineEdit2.prototype.eventEdit = function(args) {
      var inlineSubject = args.element.querySelector("." + INLINE_SUBJECT_CLASS);
      var subject;
      if (inlineSubject) {
        subject = inlineSubject.value;
      } else {
        var subEle = args.element.querySelector("." + SUBJECT_CLASS);
        if (!isNullOrUndefined(subEle)) {
          addClass([subEle], DISABLE_CLASS);
          subject = subEle.innerText;
        } else {
          subject = args.data[this.parent.eventFields.subject];
        }
        inlineSubject = createElement("input", { className: INLINE_SUBJECT_CLASS, attrs: { value: subject } });
        if (closest(args.element, "." + MORE_POPUP_WRAPPER_CLASS)) {
          args.element.insertBefore(inlineSubject, subEle);
        } else if (["Agenda", "MonthAgenda"].indexOf(this.parent.currentView) > -1) {
          var subjectWrap = args.element.querySelector("." + SUBJECT_WRAP);
          if (isNullOrUndefined(subjectWrap)) {
            subjectWrap = createElement("div", { className: SUBJECT_WRAP });
            args.element.prepend(subjectWrap);
          }
          subjectWrap.insertBefore(inlineSubject, subjectWrap.firstChild);
        } else {
          args.element.querySelector(".e-appointment-details").prepend(inlineSubject);
        }
        inlineSubject.focus();
      }
      inlineSubject.setSelectionRange(subject.length, subject.length);
    };
    InlineEdit2.prototype.createVerticalViewInline = function(saveObj, dayIndex2, resIndex, daysCount) {
      var _a;
      var count = this.getEventDaysCount(saveObj);
      var verticalEvent = new VerticalEvent(this.parent);
      verticalEvent.initializeValues();
      var index = verticalEvent.dateRender[parseInt(resIndex.toString(), 10)].map(function(date) {
        return date.getDay();
      }).indexOf(dayIndex2);
      if (count >= 1) {
        verticalEvent.allDayElement = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
        (_a = verticalEvent.slots).push.apply(_a, this.parent.activeView.renderDates.map(function(date) {
          return +date;
        }));
        var allDayElements = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_APPOINTMENT_CLASS));
        var allDayLevel = 0;
        if (allDayElements.length > 0) {
          allDayLevel = Math.floor(getElementHeight(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS)) / allDayElements[0].offsetHeight) - 1;
        }
        verticalEvent.allDayLevel = allDayLevel;
        var appHeight = getElementHeightFromClass(this.parent.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS), APPOINTMENT_CLASS);
        var cellTop = verticalEvent.allDayElement.length > 0 ? verticalEvent.allDayElement[0].offsetTop : 0;
        verticalEvent.renderAllDayEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline, cellTop, appHeight);
      } else {
        verticalEvent.renderNormalEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);
      }
    };
    InlineEdit2.prototype.createMonthViewInline = function(saveObj, index, start, end) {
      var count = this.getEventDaysCount(saveObj);
      var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
      var monthEvent = new MonthEvent(this.parent);
      monthEvent.dateRender = this.parent.activeView.renderDates;
      monthEvent.inlineValue = this.parent.allowInline;
      var renderDates = this.parent.activeView.renderDates;
      var workDays = this.parent.activeViewOptions.workDays;
      var monthCellSelector = "." + WORK_CELLS_CLASS;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        monthCellSelector += '[data-group-index="' + index + '"]';
        var resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        renderDates = resourceData.renderDates;
        workDays = resourceData.workDays;
      }
      monthEvent.dateRender = renderDates;
      monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll(monthCellSelector));
      monthEvent.cellWidth = monthEvent.workCells[0].offsetWidth;
      monthEvent.cellHeight = monthEvent.workCells[0].offsetHeight;
      monthEvent.eventHeight = getElementHeightFromClass(this.parent.monthModule.element || monthEvent.element, APPOINTMENT_CLASS);
      monthEvent.getSlotDates(workDays);
      var filteredDates = monthEvent.getRenderedDates(renderDates);
      var spannedEvents = monthEvent.splitEvent(saveObject, filteredDates || renderDates);
      for (var _i = 0, spannedEvents_1 = spannedEvents; _i < spannedEvents_1.length; _i++) {
        var eventData = spannedEvents_1[_i];
        monthEvent.renderEvents(eventData, index);
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      inlineSubject.focus();
    };
    InlineEdit2.prototype.createTimelineViewInline = function(saveObj, start, end, resIndex) {
      var count = this.getEventDaysCount(saveObj);
      var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
      var timelineView = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? "hour" : "day");
      timelineView.dateRender = this.parent.activeView.renderDates;
      timelineView.eventContainers = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      timelineView.inlineValue = this.parent.allowInline;
      timelineView.cellWidth = workCell.offsetWidth;
      timelineView.cellHeight = workCell.offsetHeight;
      var dayLength = this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr").length === 0 ? 0 : this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr")[0].children.length;
      timelineView.slotsPerDay = dayLength / timelineView.dateRender.length;
      timelineView.eventHeight = getElementHeightFromClass(timelineView.element, APPOINTMENT_CLASS);
      timelineView.renderEvents(saveObject, resIndex);
    };
    InlineEdit2.prototype.getEventDaysCount = function(saveObj) {
      var startDate = saveObj[this.parent.eventFields.startTime];
      var endDate = saveObj[this.parent.eventFields.endTime];
      var daysCount = Math.abs(endDate.getTime() - startDate.getTime()) / MS_PER_DAY;
      return daysCount;
    };
    InlineEdit2.prototype.generateEventData = function(target) {
      var inlineElement = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      var subject = inlineElement ? inlineElement.value : target ? target.innerHTML : "";
      var saveObj = {};
      saveObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
      saveObj[this.parent.eventFields.subject] = subject;
      saveObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      saveObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      saveObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      this.parent.eventWindow.setDefaultValueToObject(saveObj);
      if (this.parent.resourceBase) {
        this.parent.resourceBase.setResourceValues(saveObj, this.parent.activeCellsData.groupIndex);
      }
      return saveObj;
    };
    InlineEdit2.prototype.documentClick = function() {
      var target = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (target && target.value !== "") {
        this.inlineCrudActions(target);
      } else {
        this.removeInlineAppointmentElement();
      }
    };
    InlineEdit2.prototype.inlineCrudActions = function(target) {
      if (closest(target, "." + INLINE_APPOINTMENT_CLASS)) {
        var saveObj = this.generateEventData(target);
        this.parent.addEvent(saveObj);
      } else {
        var eventTarget = closest(target, "." + APPOINTMENT_CLASS);
        var eventDetails = this.parent.getEventDetails(eventTarget);
        eventDetails[this.parent.eventFields.subject] = target.value;
        var currentAction = void 0;
        if (eventDetails[this.parent.eventFields.id] === eventDetails[this.parent.eventFields.recurrenceID]) {
          currentAction = "EditOccurrence";
          eventDetails[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
        }
        this.parent.saveEvent(eventDetails, currentAction);
      }
      this.removeInlineAppointmentElement();
    };
    InlineEdit2.prototype.createInlineAppointmentElement = function(inlineData) {
      var inlineAppointmentElement = createElement("div", {
        className: APPOINTMENT_CLASS + " " + INLINE_APPOINTMENT_CLASS
      });
      var inlineDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      inlineAppointmentElement.appendChild(inlineDetails);
      var inline = createElement("input", { className: INLINE_SUBJECT_CLASS });
      inlineDetails.appendChild(inline);
      if (inlineData) {
        this.parent.eventBase.applyResourceColor(inlineAppointmentElement, inlineData, "backgroundColor");
      }
      return inlineAppointmentElement;
    };
    InlineEdit2.prototype.removeInlineAppointmentElement = function() {
      var inlineAppointment = [].slice.call(this.parent.element.querySelectorAll("." + INLINE_APPOINTMENT_CLASS));
      if (inlineAppointment.length > 0) {
        inlineAppointment.forEach(function(node) {
          return remove(node);
        });
      }
      var inlineSubject = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (inlineSubject) {
        var appointmentSubject = closest(inlineSubject, "." + APPOINTMENT_CLASS);
        var subject = appointmentSubject.querySelector("." + SUBJECT_CLASS);
        if (!isNullOrUndefined(subject)) {
          removeClass([subject], DISABLE_CLASS);
        }
        remove(inlineSubject);
      }
    };
    InlineEdit2.prototype.destroy = function() {
      this.parent.off(inlineClick, this.inlineEdit);
    };
    return InlineEdit2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/form-validator.js
var FieldValidator = (
  /** @class */
  function() {
    function FieldValidator2() {
    }
    FieldValidator2.prototype.renderFormValidator = function(form, rules, element, locale) {
      var _this = this;
      this.element = element;
      this.formObj = new FormValidator(form, {
        locale,
        customPlacement: function(inputElement, error) {
          _this.errorPlacement(inputElement, error);
        },
        rules,
        validationComplete: function(args) {
          _this.validationComplete(args);
        },
        focusout: function(args) {
          _this.focusOut(args);
        }
      });
    };
    FieldValidator2.prototype.focusOut = function(args) {
      var target = args.relatedTarget;
      if (target && (target.classList.contains("e-dlg-closeicon-btn") || target.classList.contains("e-close") || target.classList.contains(ALLDAY_CELLS_CLASS) || target.classList.contains(HEADER_CELLS_CLASS) || target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(EVENT_WINDOW_CANCEL_BUTTON_CLASS))) {
        this.ignoreError = true;
      } else {
        this.ignoreError = false;
      }
    };
    FieldValidator2.prototype.validationComplete = function(args) {
      var elem = this.element.querySelector("#" + args.inputName + "_Error");
      if (elem) {
        elem.style.display = args.status === "failure" ? "" : "none";
      }
    };
    FieldValidator2.prototype.errorPlacement = function(inputElement, error) {
      var id = error.getAttribute("for");
      var elem = this.element.querySelector("#" + id + "_Error");
      if (!elem && !this.ignoreError) {
        this.createTooltip(inputElement, error, id, "");
      }
      if (!isNullOrUndefined(elem)) {
        elem.querySelector(".e-error").innerHTML = error.innerHTML;
      }
    };
    FieldValidator2.prototype.createTooltip = function(element, error, name, display) {
      var dlgContent;
      var client;
      var inputClient = element.getBoundingClientRect();
      if (this.element.classList.contains(POPUP_WRAPPER_CLASS)) {
        dlgContent = this.element;
        client = this.element.getBoundingClientRect();
      } else {
        dlgContent = this.element.querySelector(".e-schedule-dialog .e-dlg-content");
        client = dlgContent.getBoundingClientRect();
      }
      var div = createElement("div", {
        className: "e-tooltip-wrap e-popup " + ERROR_VALIDATION_CLASS,
        id: name + "_Error",
        styles: "display:" + display + ";top:" + (inputClient.bottom - client.top + dlgContent.scrollTop + 9) + "px;left:" + (inputClient.left - client.left + dlgContent.scrollLeft + inputClient.width / 2) + "px;"
      });
      var content = createElement("div", { className: "e-tip-content" });
      content.appendChild(error);
      var arrow = createElement("div", { className: "e-arrow-tip e-tip-top" });
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-outer e-tip-top" }));
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-inner e-tip-top" }));
      div.appendChild(content);
      div.appendChild(arrow);
      dlgContent.appendChild(div);
      div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px";
    };
    FieldValidator2.prototype.destroyToolTip = function() {
      if (this.element) {
        var elements = [].slice.call(this.element.querySelectorAll("." + ERROR_VALIDATION_CLASS));
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var elem = elements_1[_i];
          remove(elem);
        }
      }
      if (this.formObj && this.formObj.element) {
        this.formObj.reset();
      }
    };
    FieldValidator2.prototype.destroy = function() {
      if (this.formObj && this.formObj.element && !this.formObj.isDestroyed) {
        this.formObj.destroy();
      }
      this.formObj = null;
      this.element = null;
    };
    return FieldValidator2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/quick-popups.js
var EVENT_FIELD = "e-field";
var QuickPopups = (
  /** @class */
  function() {
    function QuickPopups2(parent) {
      this.isMultipleEventSelect = false;
      this.isCrudAction = false;
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.fieldValidator = new FieldValidator();
      this.render();
      this.addEventListener();
    }
    QuickPopups2.prototype.render = function() {
      this.renderQuickPopup();
      this.renderMorePopup();
      this.renderQuickDialog();
    };
    QuickPopups2.prototype.renderQuickPopup = function() {
      var quickPopupWrapper = createElement("div", { className: POPUP_WRAPPER_CLASS + " e-popup-close", attrs: { role: "dialog" } });
      if (this.parent.isAdaptive) {
        document.body.appendChild(quickPopupWrapper);
        addClass([quickPopupWrapper], DEVICE_CLASS);
      } else {
        this.parent.element.appendChild(quickPopupWrapper);
      }
      this.quickPopup = new Popup(quickPopupWrapper, {
        targetType: this.parent.isAdaptive ? "container" : "relative",
        enableRtl: this.parent.enableRtl,
        open: this.quickPopupOpen.bind(this),
        close: this.quickPopupClose.bind(this),
        hideAnimation: this.parent.isAdaptive ? { name: "ZoomOut" } : { name: "FadeOut", duration: 150 },
        showAnimation: this.parent.isAdaptive ? { name: "ZoomIn" } : { name: "FadeIn", duration: 150 },
        collision: this.parent.isAdaptive ? { X: "fit", Y: "fit" } : this.parent.enableRtl ? { X: "flip", Y: "fit" } : { X: "none", Y: "fit" },
        position: this.parent.isAdaptive || this.parent.enableRtl ? { X: "left", Y: "top" } : { X: "right", Y: "top" },
        viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,
        zIndex: this.parent.isAdaptive ? 1004 : 3
      });
    };
    QuickPopups2.prototype.renderMorePopup = function() {
      var moreEventPopup = '<div class="' + MORE_EVENT_POPUP_CLASS + '"><div class="' + MORE_EVENT_HEADER_CLASS + '">' + ('<div class="' + MORE_EVENT_CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '" tabindex="0" role="button"></div>') + ('<div class="' + MORE_EVENT_DATE_HEADER_CLASS + '"><div class="' + MORE_EVENT_HEADER_DAY_CLASS + '" id="' + this.parent.element.id + '_more_popup"></div>') + ('<div class="' + MORE_EVENT_HEADER_DATE_CLASS + " " + NAVIGATE_CLASS + '" tabindex="0" role="link"></div></div></div></div>');
      var moreEventWrapper = createElement("div", {
        className: MORE_POPUP_WRAPPER_CLASS + " e-popup-close",
        innerHTML: moreEventPopup
      });
      if (this.parent.isAdaptive) {
        document.body.appendChild(moreEventWrapper);
        addClass([moreEventWrapper], DEVICE_CLASS);
      } else {
        this.parent.element.appendChild(moreEventWrapper);
      }
      this.morePopup = new Popup(moreEventWrapper, {
        targetType: this.parent.isAdaptive ? "container" : "relative",
        enableRtl: this.parent.enableRtl,
        hideAnimation: { name: "ZoomOut", duration: 300 },
        showAnimation: { name: "ZoomIn", duration: 300 },
        open: this.morePopupOpen.bind(this),
        close: this.morePopupClose.bind(this),
        collision: this.parent.isAdaptive ? { X: "fit", Y: "fit" } : this.parent.enableRtl ? { X: "flip", Y: "fit" } : { X: "flip", Y: "flip" },
        viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,
        zIndex: this.parent.isAdaptive ? 1002 : 2
      });
      this.morePopup.element.setAttribute("role", "dialog");
      this.morePopup.element.setAttribute("aria-labelledby", this.parent.element.id + "_more_popup");
      var closeButton = this.morePopup.element.querySelector("." + MORE_EVENT_CLOSE_CLASS);
      this.renderButton("e-round", ICON3 + " " + CLOSE_ICON_CLASS, false, closeButton, this.closeClick);
      EventHandler.add(this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS), "click", this.navigationClick, this);
    };
    QuickPopups2.prototype.renderQuickDialog = function() {
      var buttonModel = [
        { buttonModel: { cssClass: "e-quick-alertok e-flat", isPrimary: true }, click: this.dialogButtonClick.bind(this) },
        { buttonModel: { cssClass: "e-quick-alertcancel e-flat", isPrimary: false }, click: this.dialogButtonClick.bind(this) },
        {
          buttonModel: { cssClass: "e-quick-dialog-cancel e-disable e-flat", isPrimary: false },
          click: this.dialogButtonClick.bind(this)
        }
      ];
      if (this.parent.eventSettings.editFollowingEvents) {
        var followingSeriesButton = {
          buttonModel: { cssClass: "e-quick-alertfollowing e-flat", isPrimary: false },
          click: this.dialogButtonClick.bind(this)
        };
        buttonModel.splice(1, 0, followingSeriesButton);
      }
      this.quickDialog = new Dialog({
        animationSettings: { effect: "Zoom" },
        buttons: buttonModel,
        cssClass: QUICK_DIALOG_CLASS,
        closeOnEscape: true,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        beforeClose: this.beforeQuickDialogClose.bind(this),
        isModal: true,
        position: { X: "center", Y: "center" },
        showCloseIcon: true,
        target: document.body,
        visible: false,
        width: "auto"
      });
      var dialogElement = createElement("div", { id: this.parent.element.id + "QuickDialog" });
      this.parent.element.appendChild(dialogElement);
      this.quickDialog.appendTo(dialogElement);
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.setAttribute("aria-label", this.l10n.getConstant("occurrence"));
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.setAttribute("aria-label", this.l10n.getConstant("series"));
        cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      if (this.quickDialog.element.querySelector(".e-dlg-closeicon-btn")) {
        this.quickDialog.element.querySelector(".e-dlg-closeicon-btn").setAttribute("title", this.l10n.getConstant("close"));
      }
    };
    QuickPopups2.prototype.renderButton = function(className, iconName, isDisabled, element, clickEvent) {
      var buttonObj = new Button({
        cssClass: className,
        disabled: isDisabled,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        iconCss: iconName
      });
      buttonObj.appendTo(element);
      EventHandler.add(element, "click", clickEvent, this);
      removeClass([element], ICON3);
    };
    QuickPopups2.prototype.quickDialogClass = function(action) {
      var classList2 = [
        QUICK_DIALOG_OCCURRENCE_CLASS,
        QUICK_DIALOG_SERIES_CLASS,
        QUICK_DIALOG_DELETE_CLASS,
        QUICK_DIALOG_CANCEL_CLASS,
        QUICK_DIALOG_ALERT_BTN_CLASS,
        DISABLE_CLASS
      ];
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      var followingEventButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_FOLLOWING);
      removeClass([okButton, cancelButton], classList2);
      addClass([this.quickDialog.element.querySelector("." + QUICK_DIALOG_CANCEL_CLASS)], DISABLE_CLASS);
      if (this.parent.eventSettings.editFollowingEvents) {
        addClass([followingEventButton], DISABLE_CLASS);
        removeClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);
      }
      switch (action) {
        case "Recurrence":
          addClass([okButton], QUICK_DIALOG_OCCURRENCE_CLASS);
          addClass([cancelButton], QUICK_DIALOG_SERIES_CLASS);
          if (this.parent.eventSettings.editFollowingEvents) {
            removeClass([followingEventButton], DISABLE_CLASS);
            addClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);
            addClass([followingEventButton], QUICK_DIALOG_FOLLOWING_EVENTS_CLASS);
          }
          break;
        case "Delete":
          addClass([okButton], QUICK_DIALOG_DELETE_CLASS);
          addClass([cancelButton], QUICK_DIALOG_CANCEL_CLASS);
          break;
        case "Alert":
          addClass([okButton], [QUICK_DIALOG_ALERT_OK, QUICK_DIALOG_ALERT_BTN_CLASS]);
          addClass([cancelButton], [QUICK_DIALOG_ALERT_CANCEL, DISABLE_CLASS]);
          break;
      }
    };
    QuickPopups2.prototype.applyFormValidation = function() {
      var form = this.quickPopup.element.querySelector("." + FORM_CLASS);
      var rules = {};
      rules[this.parent.eventSettings.fields.subject.name] = this.parent.eventSettings.fields.subject.validation;
      this.fieldValidator.renderFormValidator(form, rules, this.quickPopup.element, this.parent.locale);
    };
    QuickPopups2.prototype.openRecurrenceAlert = function() {
      var editDeleteOnly = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (editDeleteOnly) {
        editDeleteOnly.innerHTML = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteEvent" : "editEvent");
        editDeleteOnly.setAttribute("aria-label", editDeleteOnly.innerHTML);
      }
      var editFollowingEventsOnly = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_FOLLOWING);
      if (editFollowingEventsOnly) {
        editFollowingEventsOnly.innerHTML = this.l10n.getConstant("editFollowingEvent");
        editFollowingEventsOnly.setAttribute("aria-label", editFollowingEventsOnly.innerHTML);
      }
      var editDeleteSeries = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (editDeleteSeries) {
        editDeleteSeries.innerHTML = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteSeries" : "editSeries");
        editDeleteSeries.setAttribute("aria-label", editDeleteSeries.innerHTML);
      }
      this.quickDialog.content = this.l10n.getConstant("editContent");
      this.quickDialog.header = this.l10n.getConstant(this.parent.currentAction === "Delete" ? "deleteTitle" : "editTitle");
      this.quickDialogClass("Recurrence");
      this.showQuickDialog("RecurrenceAlert");
    };
    QuickPopups2.prototype.openRecurrenceValidationAlert = function(type) {
      this.quickDialogClass("Alert");
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      okButton.innerHTML = this.l10n.getConstant("ok");
      okButton.setAttribute("aria-label", okButton.innerHTML);
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      cancelButton.innerHTML = this.l10n.getConstant("cancel");
      cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      this.quickDialog.header = this.l10n.getConstant("alert");
      var dialogCancel;
      switch (type) {
        case "wrongPattern":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("wrongPattern");
          break;
        case "createError":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("createError");
          break;
        case "sameDayAlert":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("sameDayAlert");
          break;
        case "seriesChangeAlert":
          dialogCancel = this.quickDialog.element.querySelector("." + QUICK_DIALOG_CANCEL_CLASS);
          removeClass([cancelButton, dialogCancel], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("seriesChangeAlert");
          okButton.innerHTML = this.l10n.getConstant("yes");
          cancelButton.innerHTML = this.l10n.getConstant("no");
          dialogCancel.innerHTML = this.l10n.getConstant("cancel");
          break;
        case "occurrenceAlert":
          addClass([cancelButton], DISABLE_CLASS);
          this.quickDialog.content = this.l10n.getConstant("occurenceAlert");
          break;
      }
      if (!this.parent.enableRecurrenceValidation && type === "wrongPattern" || this.parent.enableRecurrenceValidation) {
        this.showQuickDialog("RecurrenceValidationAlert");
      }
    };
    QuickPopups2.prototype.openDeleteAlert = function() {
      if (this.parent.activeViewOptions.readonly) {
        return;
      }
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.innerHTML = this.l10n.getConstant("delete");
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.innerHTML = this.l10n.getConstant("cancel");
        cancelButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      this.quickDialog.content = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant("deleteMultipleContent") : this.l10n.getConstant("deleteContent");
      this.quickDialog.header = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant("deleteMultipleEvent") : this.l10n.getConstant("deleteEvent");
      this.quickDialogClass("Delete");
      this.showQuickDialog("DeleteAlert");
    };
    QuickPopups2.prototype.openValidationError = function(type, eventData) {
      this.quickDialog.header = this.l10n.getConstant("alert");
      this.quickDialog.content = this.l10n.getConstant(type);
      var okButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_OK);
      if (okButton) {
        okButton.innerHTML = this.l10n.getConstant("ok");
        okButton.setAttribute("aria-label", okButton.innerHTML);
      }
      var cancelButton = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      if (cancelButton) {
        cancelButton.innerHTML = this.l10n.getConstant("cancel");
        okButton.setAttribute("aria-label", cancelButton.innerHTML);
      }
      this.quickDialogClass("Alert");
      this.showQuickDialog("ValidationAlert", eventData);
    };
    QuickPopups2.prototype.showQuickDialog = function(popupType, eventData) {
      var _this = this;
      this.quickDialog.dataBind();
      var eventProp = {
        type: popupType,
        cancel: false,
        element: this.quickDialog.element,
        data: extend({}, eventData || this.parent.activeEventData.event, null, true)
      };
      this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
        if (!popupArgs.cancel) {
          _this.quickDialog.show();
        }
      });
    };
    QuickPopups2.prototype.createMoreEventList = function(eventCollection, groupOrder, groupIndex) {
      var _this = this;
      var fields = this.parent.eventFields;
      var moreEventContentEle = createElement("div", { className: MORE_EVENT_CONTENT_CLASS });
      var moreEventWrapperEle = createElement("div", { className: MORE_EVENT_WRAPPER_CLASS });
      if (eventCollection.length === 0) {
        moreEventWrapperEle = createElement("div", {
          className: MORE_EVENT_CONTENT_CLASS,
          innerHTML: this.l10n.getConstant("emptyContainer")
        });
      } else {
        var _loop_1 = function(eventData2) {
          var eventText = eventData2[fields.subject] || this_1.parent.eventSettings.fields.subject.default || this_1.parent.localeObj.getConstant("addTitle");
          var appointmentElement = createElement("div", {
            className: APPOINTMENT_CLASS,
            attrs: {
              "data-id": "" + eventData2[fields.id],
              "data-guid": eventData2.Guid,
              "role": "button",
              "tabindex": "0",
              "aria-disabled": this_1.parent.eventBase.getReadonlyAttribute(eventData2),
              "aria-label": this_1.parent.getAnnouncementString(eventData2)
            }
          });
          if (eventData2[fields.isReadonly]) {
            addClass([appointmentElement], "e-read-only");
          }
          var templateElement = void 0;
          if (!isNullOrUndefined(this_1.parent.activeViewOptions.eventTemplate)) {
            var tempId = this_1.parent.element.id + "_" + this_1.parent.activeViewOptions.eventTemplateName + "eventTemplate";
            templateElement = this_1.parent.getAppointmentTemplate()(eventData2, this_1.parent, "eventTemplate", tempId, false, void 0, void 0, this_1.parent.root);
            append(templateElement, appointmentElement);
          } else {
            appointmentElement.appendChild(createElement("div", { className: SUBJECT_CLASS }));
            this_1.parent.sanitize(eventText, appointmentElement.firstElementChild);
          }
          if (!isNullOrUndefined(groupIndex)) {
            appointmentElement.setAttribute("data-group-index", groupIndex);
          }
          if (!isNullOrUndefined(eventData2[fields.recurrenceRule])) {
            var iconClass = eventData2[fields.id] === eventData2[fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
            appointmentElement.appendChild(createElement("div", { className: ICON3 + " " + iconClass }));
          }
          var args = {
            data: extend({}, eventData2, null, true),
            element: appointmentElement,
            cancel: false
          };
          this_1.parent.trigger(eventRendered, args, function(eventArgs) {
            if (!eventArgs.cancel) {
              moreEventWrapperEle.appendChild(appointmentElement);
              var isPreventCrud = _this.parent.isAdaptive || _this.parent.currentView === "Year";
              _this.parent.eventBase.wireAppointmentEvents(appointmentElement, eventData2, isPreventCrud);
              _this.parent.eventBase.applyResourceColor(appointmentElement, eventData2, "backgroundColor", groupOrder);
            }
          });
        };
        var this_1 = this;
        for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
          var eventData = eventCollection_1[_i];
          _loop_1(eventData);
        }
      }
      moreEventContentEle.appendChild(moreEventWrapperEle);
      return moreEventContentEle;
    };
    QuickPopups2.prototype.tapHoldEventPopup = function(e) {
      var target = closest(e.target, "." + APPOINTMENT_CLASS);
      this.parent.selectedElements = [];
      this.isMultipleEventSelect = true;
      this.parent.eventBase.getSelectedEventElements(target);
      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
      var guid = target.getAttribute("data-guid");
      var eventObj = this.parent.eventBase.getEventByGuid(guid);
      if (isNullOrUndefined(eventObj)) {
        return;
      }
      var eventTitle = eventObj[this.parent.eventFields.subject] || this.l10n.getConstant("noTitle");
      var eventTemplate = '<div class="' + MULTIPLE_EVENT_POPUP_CLASS + '"><div class="' + POPUP_HEADER_CLASS + '">' + ('<button class="' + CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '"></button>') + ('<div class="' + SUBJECT_CLASS + '">' + eventTitle + "</div>") + ('<button class="' + EDIT_CLASS + '" title="' + this.l10n.getConstant("edit") + '"></button>') + ('<button class="' + DELETE_CLASS + '" title="' + this.l10n.getConstant("delete") + '"></button></div></div>');
      this.quickPopup.element.innerHTML = eventTemplate;
      var closeIcon = this.quickPopup.element.querySelector("." + CLOSE_CLASS);
      this.renderButton("e-flat e-round e-small", ICON3 + " " + CLOSE_ICON_CLASS, false, closeIcon, this.closeClick);
      var readonly = this.parent.activeViewOptions.readonly || eventObj[this.parent.eventFields.isReadonly];
      var editAction = !this.parent.eventSettings.allowEditing || readonly;
      var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;
      var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
      if (editIcon) {
        this.renderButton("e-flat e-round e-small", ICON3 + " " + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);
      }
      var deleteIcon = this.quickPopup.element.querySelector("." + DELETE_CLASS);
      if (deleteIcon) {
        this.renderButton("e-flat e-round e-small", ICON3 + " " + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);
      }
      this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(e));
    };
    QuickPopups2.prototype.isCellBlocked = function(args) {
      var tempObj = {};
      tempObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      tempObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      tempObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var targetCell = args.element instanceof Array ? args.element[0] : args.element;
        var groupIndex = parseInt(targetCell.getAttribute("data-group-index"), 10);
        this.parent.resourceBase.setResourceValues(tempObj, isNaN(groupIndex) ? null : groupIndex);
      }
      return this.parent.eventBase.isBlockRange(tempObj);
    };
    QuickPopups2.prototype.cellClick = function(args) {
      var date = new Date(args.startTime.getTime());
      if (!this.parent.showQuickInfo || !this.parent.eventSettings.allowAdding || this.parent.currentView === "MonthAgenda" || this.isCellBlocked(args) || !this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
        this.quickPopupHide();
        return;
      }
      var targetEle = !isNullOrUndefined(args.event) ? args.event.target : args.element;
      if (this.parent.isAdaptive) {
        this.quickPopupHide();
        var newEventClone = this.parent.element.querySelector("." + NEW_EVENT_CLASS);
        if (isNullOrUndefined(newEventClone)) {
          newEventClone = createElement("div", {
            className: NEW_EVENT_CLASS,
            innerHTML: '<div class="e-title">+ ' + this.l10n.getConstant("newEvent") + "</div>"
          });
        }
        var targetCell = closest(targetEle, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS);
        if (targetCell) {
          targetCell.appendChild(newEventClone);
        }
        return;
      }
      var target = closest(targetEle, "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS);
      if (isNullOrUndefined(target) || targetEle.classList.contains(MORE_INDICATOR_CLASS)) {
        return;
      }
      var isSameTarget = this.quickPopup.relateTo === target;
      if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        var subjectElement_1 = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (subjectElement_1) {
          subjectElement_1.focus();
        }
        return;
      } else if (this.quickPopup.element) {
        this.destroyPopupButtons("quickPopup");
      }
      var temp = {};
      temp[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;
      temp[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;
      temp[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;
      var quickCellPopup = createElement("div", { className: CELL_POPUP_CLASS });
      quickCellPopup.appendChild(this.getPopupHeader("Cell", temp));
      quickCellPopup.appendChild(this.getPopupContent("Cell", args, temp));
      quickCellPopup.appendChild(this.getPopupFooter("Cell", temp));
      this.quickPopup.element.setAttribute("aria-label", this.l10n.getConstant("newEvent"));
      var subjectElement = quickCellPopup.querySelector("." + SUBJECT_CLASS);
      if (subjectElement) {
        Input.createInput({ element: subjectElement, properties: { placeholder: this.l10n.getConstant("addTitle") } });
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {
        subjectElement.value = this.parent.eventSettings.fields.subject.default;
      }
      var closeIcon = quickCellPopup.querySelector("." + CLOSE_CLASS);
      if (closeIcon) {
        this.renderButton("e-flat e-round e-small", ICON3 + " " + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);
      }
      var moreButton = quickCellPopup.querySelector("." + QUICK_POPUP_EVENT_DETAILS_CLASS);
      if (moreButton) {
        this.renderButton("e-flat", "", false, moreButton, this.detailsClick);
      }
      var saveButton = quickCellPopup.querySelector("." + EVENT_CREATE_CLASS);
      if (saveButton) {
        this.renderButton("e-flat e-primary", "", this.parent.activeViewOptions.readonly, saveButton, this.saveClick);
      }
      if (this.morePopup) {
        this.morePopup.hide();
      }
      this.quickPopup.content = quickCellPopup;
      this.quickPopup.relateTo = target;
      this.quickPopup.dataBind();
      this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(args.event));
    };
    QuickPopups2.prototype.isSameEventClick = function(events) {
      var isSameTarget = this.quickPopup.relateTo === closest(events.element, "." + APPOINTMENT_CLASS);
      if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
        if (editIcon) {
          editIcon.focus();
        }
        if (!this.parent.isAdaptive) {
          var editButton = this.quickPopup.element.querySelector("." + EDIT_EVENT_CLASS);
          if (editButton) {
            editButton.focus();
          }
        }
        return true;
      }
      return false;
    };
    QuickPopups2.prototype.isQuickTemplate = function(type) {
      return this.parent.quickInfoTemplates.templateType === "Both" || this.parent.quickInfoTemplates.templateType === type;
    };
    QuickPopups2.prototype.eventClick = function(events) {
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.close();
      }
      if (!this.parent.showQuickInfo) {
        return;
      }
      if (this.parent.isAdaptive && this.isMultipleEventSelect) {
        this.updateTapHoldEventPopup(closest(events.element, "." + APPOINTMENT_CLASS));
      } else {
        var isSameTarget = this.isSameEventClick(events);
        this.parent.selectedElements = [];
        if (isSameTarget) {
          return;
        } else if (this.quickPopup.element) {
          this.destroyPopupButtons("quickPopup");
        }
        var eventData = events.event;
        var quickEventPopup = createElement("div", { className: EVENT_POPUP_CLASS });
        quickEventPopup.appendChild(this.getPopupHeader("Event", eventData));
        quickEventPopup.appendChild(this.getPopupContent("Event", events, eventData));
        quickEventPopup.appendChild(this.getPopupFooter("Event", eventData));
        this.quickPopup.element.setAttribute("aria-label", this.l10n.getConstant("editEvent"));
        var readonly = this.parent.activeViewOptions.readonly || eventData[this.parent.eventFields.isReadonly];
        var editAction = !this.parent.eventSettings.allowEditing || readonly;
        var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;
        var editIcon = quickEventPopup.querySelector("." + EDIT_CLASS);
        var buttonClass = "e-flat e-round e-small";
        if (editIcon) {
          this.renderButton(buttonClass, ICON3 + " " + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);
        }
        var deleteIcon = quickEventPopup.querySelector("." + DELETE_CLASS);
        if (deleteIcon) {
          this.renderButton(buttonClass, ICON3 + " " + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);
        }
        var closeIcon = quickEventPopup.querySelector("." + CLOSE_CLASS);
        if (closeIcon) {
          this.renderButton(buttonClass, ICON3 + " " + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);
        }
        var editButton = quickEventPopup.querySelector("." + EDIT_EVENT_CLASS);
        if (editButton) {
          this.renderButton("e-flat e-primary", "", editAction, editButton, this.editClick);
        }
        var deleteButton = quickEventPopup.querySelector("." + DELETE_EVENT_CLASS);
        if (deleteButton) {
          this.renderButton("e-flat", "", deleteAction, deleteButton, this.deleteClick);
        }
        if (this.morePopup && !closest(events.element, "." + MORE_EVENT_WRAPPER_CLASS)) {
          this.morePopup.hide();
        }
        this.quickPopup.content = quickEventPopup;
        this.quickPopup.relateTo = this.parent.isAdaptive ? document.body : closest(events.element, "." + APPOINTMENT_CLASS);
        this.quickPopup.dataBind();
        this.beforeQuickPopupOpen(events.element, this.parent.eventBase.getPageCoordinates(events.originalEvent));
      }
    };
    QuickPopups2.prototype.getPopupHeader = function(headerType, headerData) {
      var headerTemplate = createElement("div", { className: POPUP_HEADER_CLASS });
      if (this.isQuickTemplate(headerType) && this.parent.quickInfoTemplates.header) {
        var headerArgs = extend({}, headerData, { elementType: headerType.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var headerTemp = [].slice.call(this.parent.getQuickInfoTemplatesHeader()(headerArgs, this.parent, "header", templateId + "_headerTemplate", false));
        append([].slice.call(headerTemp), headerTemplate);
      } else {
        var header = void 0;
        var args = void 0;
        switch (headerType) {
          case "Cell":
            header = '<div class="' + POPUP_HEADER_ICON_WRAPPER + '"><button class="' + CLOSE_CLASS + '" title=' + ('"' + this.l10n.getConstant("close") + '"></button></div>');
            break;
          case "Event":
            args = this.getFormattedString(headerData);
            header = '<div class="' + POPUP_HEADER_ICON_WRAPPER + '">' + ('<button class="' + (EDIT_CLASS + " " + ICON3) + '" title="' + this.l10n.getConstant("edit") + '"></button>') + ('<button class="' + (DELETE_CLASS + " " + ICON3) + '" title="' + this.l10n.getConstant("delete") + '"></button>') + ('<button class="' + CLOSE_CLASS + '" title="' + this.l10n.getConstant("close") + '"></button></div>') + ('<div class="' + SUBJECT_WRAP + '"><div class="' + SUBJECT_CLASS + " " + TEXT_ELLIPSIS + '" ') + ('title="' + (args.eventSubject ? args.eventSubject.replaceAll('"', "'") : args.eventSubject) + '"></div></div >');
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: header });
        if (headerType === "Event") {
          var subjectText = templateWrapper.querySelector("." + SUBJECT_CLASS);
          this.parent.sanitize(args.eventSubject, subjectText);
        }
        append([].slice.call(templateWrapper.childNodes), headerTemplate);
      }
      return headerTemplate;
    };
    QuickPopups2.prototype.getPopupContent = function(type, args, data) {
      var contentTemplate = createElement("div", { className: POPUP_CONTENT_CLASS });
      if (this.isQuickTemplate(type) && this.parent.quickInfoTemplates.content) {
        var contentArgs = extend({}, data, { elementType: type.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var contentTemp = [].slice.call(this.parent.getQuickInfoTemplatesContent()(contentArgs, this.parent, "content", templateId + "_contentTemplate", false));
        append([].slice.call(contentTemp), contentTemplate);
      } else {
        var content = void 0;
        var cellDetails = void 0;
        var argsData = void 0;
        var resourceText = this.getResourceText(args, type.toLowerCase());
        switch (type) {
          case "Cell":
            cellDetails = this.getFormattedString(data);
            content = '<table class="' + POPUP_TABLE_CLASS + '"><tbody><tr><td><form class="' + FORM_CLASS + '" onsubmit=' + ('"return false;"><input class="' + SUBJECT_CLASS + " " + EVENT_FIELD + '" type="text" name=') + ('"' + this.parent.eventFields.subject + '" /></form></td></tr><tr><td><div class="' + DATE_TIME_CLASS + '">') + ('<div class="' + DATE_TIME_ICON_CLASS + " " + ICON3 + '"></div><div class="' + DATE_TIME_DETAILS_CLASS + " ") + (TEXT_ELLIPSIS + '">' + cellDetails.details + "</div></div>") + ((this.parent.activeViewOptions.group.resources.length > 0 ? '<div class="' + RESOURCE_CLASS + '">' + ('<div class="' + RESOURCE_ICON_CLASS + " " + ICON3 + ' "></div><div class="' + RESOURCE_DETAILS_CLASS + " ") + (TEXT_ELLIPSIS + '"></div></div>') : "") + "</td></tr></tbody></table>");
            break;
          case "Event":
            argsData = this.getFormattedString(data);
            content = '<div class="' + DATE_TIME_CLASS + '"><div class="' + DATE_TIME_ICON_CLASS + " " + ICON3 + '"></div><div class="' + DATE_TIME_WRAPPER_CLASS + " " + TEXT_ELLIPSIS + '"><div class="' + DATE_TIME_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '">' + argsData.details + "</div>";
            if (data[this.parent.eventFields.recurrenceRule]) {
              content += '<div class="' + RECURRENCE_SUMMARY_CLASS + " " + TEXT_ELLIPSIS + '">' + this.getRecurrenceSummary(data) + "</div>";
            }
            content += "</div></div>";
            if (data[this.parent.eventFields.location]) {
              content += '<div class="' + LOCATION_CLASS + '"><div class="' + LOCATION_ICON_CLASS + " " + ICON3 + '"></div><div class="' + LOCATION_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            if (data[this.parent.eventFields.startTimezone] || data[this.parent.eventFields.endTimezone]) {
              content += '<div class="' + TIME_ZONE_CLASS + '"><div class="' + TIME_ZONE_ICON_CLASS + " " + ICON3 + '"></div><div class="' + TIME_ZONE_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '">' + this.getTimezone(data) + "</div></div>";
            }
            if (data[this.parent.eventFields.description]) {
              content += '<div class="' + DESCRIPTION_CLASS + '"><div class="' + DESCRIPTION_ICON_CLASS + " " + ICON3 + '"></div><div class="' + DESCRIPTION_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            if (this.parent.resourceCollection.length > 0) {
              content += '<div class="' + RESOURCE_CLASS + '"><div class="' + RESOURCE_ICON_CLASS + " " + ICON3 + '"></div><div class="' + RESOURCE_DETAILS_CLASS + " " + TEXT_ELLIPSIS + '"></div></div>';
            }
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: content });
        if (data[this.parent.eventFields.location]) {
          var locationDetails = templateWrapper.querySelector("." + LOCATION_DETAILS_CLASS);
          if (!isNullOrUndefined(locationDetails)) {
            this.parent.sanitize(data[this.parent.eventFields.location], locationDetails);
          }
        }
        if (data[this.parent.eventFields.description]) {
          var descriptionDetails = templateWrapper.querySelector("." + DESCRIPTION_DETAILS_CLASS);
          if (!isNullOrUndefined(descriptionDetails)) {
            this.parent.sanitize(data[this.parent.eventFields.description], descriptionDetails);
          }
        }
        if (resourceText) {
          var resourceDetails = templateWrapper.querySelector("." + RESOURCE_DETAILS_CLASS);
          if (!isNullOrUndefined(resourceDetails)) {
            this.parent.sanitize(resourceText, resourceDetails);
          }
        }
        append([].slice.call(templateWrapper.childNodes), contentTemplate);
      }
      return contentTemplate;
    };
    QuickPopups2.prototype.getPopupFooter = function(footerType, footerData) {
      var footerTemplate = createElement("div", { className: POPUP_FOOTER_CLASS });
      if (this.isQuickTemplate(footerType) && this.parent.quickInfoTemplates.footer) {
        var footerArgs = extend({}, footerData, { elementType: footerType.toLowerCase() }, true);
        var templateId = this.parent.element.id;
        var footerTemp = [].slice.call(this.parent.getQuickInfoTemplatesFooter()(footerArgs, this.parent, "footer", templateId + "_footerTemplate", false));
        append([].slice.call(footerTemp), footerTemplate);
      } else {
        var footer = void 0;
        switch (footerType) {
          case "Cell":
            footer = '<button class="' + (QUICK_POPUP_EVENT_DETAILS_CLASS + " " + TEXT_ELLIPSIS) + '" title=' + ('"' + this.l10n.getConstant("moreDetails") + '">' + this.l10n.getConstant("moreDetails") + "</button>") + ('<button class="' + EVENT_CREATE_CLASS + " " + TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("save") + '">') + (this.l10n.getConstant("save") + "</button>");
            break;
          case "Event":
            footer = this.parent.isAdaptive ? "" : '<button class="' + EDIT_EVENT_CLASS + " " + (TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("edit") + '">' + this.l10n.getConstant("edit") + "</button>") + ('<button class="' + DELETE_EVENT_CLASS + " " + TEXT_ELLIPSIS + '" title="' + this.l10n.getConstant("delete") + '">') + (this.l10n.getConstant("delete") + "</button>");
            break;
        }
        var templateWrapper = createElement("div", { innerHTML: footer });
        append([].slice.call(templateWrapper.childNodes), footerTemplate);
      }
      return footerTemplate;
    };
    QuickPopups2.prototype.getResourceText = function(args, type) {
      if (this.parent.resourceCollection.length === 0) {
        return null;
      }
      var resourceValue = "";
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        var resourceCollection_1 = this.parent.resourceBase.resourceCollection.slice(-1)[0];
        var resourceData = resourceCollection_1.dataSource;
        if (type === "event") {
          var eventData = args.event;
          var _loop_2 = function(data2) {
            var resourceId = eventData[resourceCollection_1.field];
            if (resourceId instanceof Array) {
              if (resourceId.indexOf(data2[resourceCollection_1.idField]) > -1) {
                var id_1 = resourceId[resourceId.indexOf(data2[resourceCollection_1.idField])];
                var resource = resourceData.filter(function(e) {
                  return e[resourceCollection_1.idField] === id_1;
                })[0];
                resourceValue += resourceValue === "" ? resource[resourceCollection_1.textField] : ", " + resource[resourceCollection_1.textField];
              }
            } else if (data2[resourceCollection_1.idField] === resourceId) {
              resourceValue = data2[resourceCollection_1.textField].toString();
            }
          };
          for (var _i = 0, resourceData_1 = resourceData; _i < resourceData_1.length; _i++) {
            var data = resourceData_1[_i];
            _loop_2(data);
          }
        } else {
          resourceValue = resourceData[0][resourceCollection_1.textField].toString();
        }
      } else {
        if (type === "event") {
          var eventData = args.event;
          var resourceData = void 0;
          var lastResource_1;
          for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {
            resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];
            if (!isNullOrUndefined(resourceData)) {
              lastResource_1 = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];
              break;
            }
          }
          if (!Array.isArray(resourceData)) {
            resourceData = [resourceData];
          }
          var resNames_1 = [];
          var lastResourceData_1 = lastResource_1.dataSource;
          resourceData.forEach(function(value) {
            var text;
            var i2 = findIndexInData(lastResourceData_1, lastResource_1.idField, value);
            if (i2 > -1) {
              text = lastResourceData_1[parseInt(i2.toString(), 10)][lastResource_1.textField];
            }
            if (text) {
              resNames_1.push(text);
            }
          });
          resourceValue = resNames_1.join(", ");
        } else {
          var argsData = args;
          var groupIndex = !isNullOrUndefined(argsData.groupIndex) ? argsData.groupIndex : 0;
          var resourceDetails = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)];
          resourceValue = resourceDetails.resourceData[resourceDetails.resource.textField];
        }
      }
      return resourceValue;
    };
    QuickPopups2.prototype.getFormattedString = function(eventData) {
      var fields = this.parent.eventFields;
      var eventSubject = eventData[fields.subject] || this.l10n.getConstant("noTitle");
      var startDate = eventData[fields.startTime];
      var endDate = eventData[fields.endTime];
      var startDateDetails = this.getDateFormat(startDate, "long");
      var endDateDetails = eventData[fields.isAllDay] && endDate.getHours() === 0 && endDate.getMinutes() === 0 ? this.getDateFormat(addDays(new Date(endDate.getTime()), -1), "long") : this.getDateFormat(endDate, "long");
      var startTimeDetail = this.parent.getTimeString(startDate);
      var endTimeDetail = this.parent.getTimeString(endDate);
      var details = "";
      var spanLength = endDate.getDate() !== startDate.getDate() && (endDate.getTime() - startDate.getTime()) / (60 * 60 * 1e3) < 24 ? 1 : 0;
      if (eventData[fields.isAllDay]) {
        details = startDateDetails + " (" + this.l10n.getConstant("allDay") + ")";
        if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY > 1) {
          details += "&nbsp;-&nbsp;" + endDateDetails + " (" + this.l10n.getConstant("allDay") + ")";
        }
      } else if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY >= 1 || spanLength > 0) {
        details = startDateDetails + " (" + startTimeDetail + ")&nbsp;-&nbsp;" + endDateDetails + " (" + endTimeDetail + ")";
      } else {
        details = startDateDetails + " (" + (startTimeDetail + "&nbsp;-&nbsp;" + endTimeDetail) + ")";
      }
      return { eventSubject, details };
    };
    QuickPopups2.prototype.moreEventClick = function(data, endDate, groupIndex) {
      var _this = this;
      this.quickPopupHide(true);
      var moreEventContentEle = this.morePopup.element.querySelector("." + MORE_EVENT_CONTENT_CLASS);
      if (moreEventContentEle) {
        remove(moreEventContentEle);
      }
      var selectedDate = data.date.getTime().toString();
      var target = closest(data.element, "." + MORE_INDICATOR_CLASS + ",." + WORK_CELLS_CLASS);
      var day = this.parent.globalize.formatDate(data.date, { format: "E", calendar: this.parent.getCalendarMode() });
      this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DAY_CLASS).innerHTML = capitalizeFirstWord(day, "single");
      var dateElement = this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS);
      dateElement.innerHTML = this.getDateFormat(data.date, "d");
      dateElement.setAttribute("data-date", selectedDate);
      dateElement.setAttribute("data-end-date", endDate.getTime().toString());
      var groupOrder;
      if (!isNullOrUndefined(groupIndex)) {
        dateElement.setAttribute("data-group-index", groupIndex);
        groupOrder = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)].groupOrder;
      }
      var moreEventElements = this.createMoreEventList(data.event, groupOrder, groupIndex);
      this.morePopup.element.querySelector("." + MORE_EVENT_POPUP_CLASS).appendChild(moreEventElements);
      removeClass(this.morePopup.element.querySelector("." + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);
      if (resetTime(data.date).getTime() === resetTime(this.parent.getCurrentTime()).getTime()) {
        addClass(this.morePopup.element.querySelector("." + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);
      }
      if (!this.parent.isAdaptive) {
        if (this.parent.currentView.indexOf("Timeline") !== -1) {
          var gIndex = target.getAttribute("data-group-index");
          var startDate = new Date(parseInt(target.getAttribute("data-start-date"), 10));
          startDate.setHours(startDate.getHours(), startDate.getMinutes(), 0);
          var tdDate = startDate.getTime().toString();
          if (isNullOrUndefined(gIndex)) {
            this.morePopup.relateTo = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-date="' + tdDate + '"]');
          } else {
            this.morePopup.relateTo = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index="' + gIndex + '"][data-date="' + tdDate + '"]');
            if (isNullOrUndefined(this.morePopup.relateTo)) {
              var workCells = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index="' + gIndex + '"]'));
              for (var i = 0; i < workCells.length; i++) {
                var date = workCells[parseInt(i.toString(), 10)].getAttribute("data-date");
                if (date < tdDate) {
                  this.morePopup.relateTo = workCells[parseInt(i.toString(), 10)];
                }
              }
            }
          }
        } else {
          this.morePopup.relateTo = closest(target, "." + WORK_CELLS_CLASS);
        }
      }
      this.parent.renderTemplates(function() {
        var eventProp = {
          type: "EventContainer",
          cancel: false,
          element: _this.morePopup.element,
          data
        };
        _this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
          if (!popupArgs.cancel) {
            _this.morePopup.show();
          }
        });
      });
    };
    QuickPopups2.prototype.saveClick = function(event2) {
      this.applyFormValidation();
      this.dialogEvent = event2;
      this.isCrudAction = true;
      this.quickPopupHide();
    };
    QuickPopups2.prototype.detailsClick = function(event2) {
      var subjectEle = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
      if (subjectEle && subjectEle.value !== "") {
        extend(this.parent.activeCellsData, { subject: subjectEle.value });
      }
      this.dialogEvent = event2;
      this.isCrudAction = false;
      this.fieldValidator.destroyToolTip();
      this.quickPopupHide();
      this.parent.eventWindow.openEditor(this.parent.activeCellsData, "Add");
    };
    QuickPopups2.prototype.editClick = function(event2) {
      this.dialogEvent = event2;
      this.quickPopupHide(true);
      var data = this.parent.activeEventData.event;
      this.parent.currentAction = "EditSeries";
      if (!isNullOrUndefined(data[this.parent.eventFields.recurrenceRule])) {
        this.parent.currentAction = "EditOccurrence";
        this.openRecurrenceAlert();
      } else {
        this.parent.eventWindow.openEditor(data, this.parent.currentAction);
      }
    };
    QuickPopups2.prototype.deleteClick = function(event2) {
      this.dialogEvent = event2;
      this.quickPopupHide(true);
      this.parent.currentAction = "Delete";
      if (this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) {
        this.openRecurrenceAlert();
      } else {
        this.openDeleteAlert();
      }
    };
    QuickPopups2.prototype.updateMoreEventContent = function() {
      if (this.morePopup.element.classList.contains("e-popup-close")) {
        return;
      }
      var moreEventContentEle = this.morePopup.element.querySelector("." + MORE_EVENT_CONTENT_CLASS);
      if (moreEventContentEle) {
        remove(moreEventContentEle);
      }
      var dateElement = this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS);
      var startDate = new Date(parseInt(dateElement.getAttribute("data-date"), 10));
      var endDate = new Date(parseInt(dateElement.getAttribute("data-end-date"), 10));
      var groupIndex = dateElement.getAttribute("data-group-index");
      var data;
      var groupOrder;
      if (!isNullOrUndefined(groupIndex)) {
        data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];
        groupOrder = data.groupOrder;
      }
      var events = this.parent.eventBase.filterEvents(startDate, endDate, this.parent.eventsProcessed, data);
      var moreElement = this.createMoreEventList(events, groupOrder, groupIndex);
      this.morePopup.element.querySelector("." + MORE_EVENT_POPUP_CLASS).appendChild(moreElement);
    };
    QuickPopups2.prototype.closeClick = function(event2) {
      this.dialogEvent = event2;
      if (this.parent.currentView === "Year" && this.parent.activeCellsData && this.parent.activeCellsData.element) {
        this.parent.selectCell(this.parent.activeCellsData.element);
      }
      this.quickPopupHide();
      this.morePopup.hide();
    };
    QuickPopups2.prototype.dialogButtonClick = function(event2) {
      this.dialogEvent = event2;
      this.quickDialog.hide();
      var target = event2.target;
      var cancelBtn = this.quickDialog.element.querySelector("." + QUICK_DIALOG_ALERT_CANCEL);
      var eventData = this.parent.activeEventData.event;
      if (target.classList.contains(QUICK_DIALOG_OCCURRENCE_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteOccurrence" : "EditOccurrence";
        switch (this.parent.currentAction) {
          case "EditOccurrence":
            this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);
            break;
          case "DeleteOccurrence":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_FOLLOWING_EVENTS_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteFollowingEvents" : "EditFollowingEvents";
        switch (this.parent.currentAction) {
          case "EditFollowingEvents":
            this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);
            break;
          case "DeleteFollowingEvents":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_SERIES_CLASS)) {
        this.parent.currentAction = this.parent.currentAction === "Delete" ? "DeleteSeries" : "EditSeries";
        switch (this.parent.currentAction) {
          case "EditSeries":
            this.parent.eventWindow.openEditor(this.parent.eventBase.getParentEvent(eventData, true), this.parent.currentAction);
            break;
          case "DeleteSeries":
            this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
            break;
        }
      } else if (target.classList.contains(QUICK_DIALOG_DELETE_CLASS)) {
        this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);
      } else if (!cancelBtn.classList.contains(DISABLE_CLASS) && (target.classList.contains(QUICK_DIALOG_ALERT_OK) || target.classList.contains(QUICK_DIALOG_ALERT_CANCEL) && !cancelBtn.classList.contains(QUICK_DIALOG_CANCEL_CLASS))) {
        this.parent.uiStateValues.isIgnoreOccurrence = target.classList.contains(QUICK_DIALOG_ALERT_CANCEL);
        this.parent.eventWindow.eventSave(event2, this.l10n.getConstant("ok"));
      }
    };
    QuickPopups2.prototype.updateTapHoldEventPopup = function(target) {
      var selectedElements = this.parent.eventBase.getSelectedEventElements(target);
      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
      if (selectedElements.length > 0) {
        var eventObj = this.parent.eventBase.getEventByGuid(selectedElements[0].getAttribute("data-guid"));
        var titleContent = selectedElements.length === 1 ? eventObj[this.parent.eventFields.subject] || this.l10n.getConstant("noTitle") : "(" + selectedElements.length + ")&nbsp;" + this.l10n.getConstant("selectedItems");
        this.quickPopup.element.querySelector("." + SUBJECT_CLASS).innerHTML = titleContent;
        if (selectedElements.length > 1) {
          addClass([this.quickPopup.element.querySelector("." + EDIT_ICON_CLASS)], HIDDEN_CLASS);
        } else {
          removeClass([this.quickPopup.element.querySelector("." + EDIT_ICON_CLASS)], HIDDEN_CLASS);
        }
      } else {
        this.parent.selectedElements = [];
        this.quickPopupHide();
      }
    };
    QuickPopups2.prototype.getTimezone = function(event2) {
      var zoneDetails = "";
      zoneDetails += event2[this.parent.eventFields.startTimezone] || "";
      zoneDetails += zoneDetails === "" ? "" : " - ";
      zoneDetails += event2[this.parent.eventFields.endTimezone] || "";
      return zoneDetails;
    };
    QuickPopups2.prototype.getRecurrenceSummary = function(event2) {
      var recurrenceEditor = this.parent.eventWindow.getRecurrenceEditorInstance();
      if (recurrenceEditor) {
        var ruleSummary = recurrenceEditor.getRuleSummary(event2[this.parent.eventFields.recurrenceRule]);
        return ruleSummary.charAt(0).toUpperCase() + ruleSummary.slice(1);
      }
      return "";
    };
    QuickPopups2.prototype.getDateFormat = function(date, skeletonString) {
      return capitalizeFirstWord(this.parent.globalize.formatDate(date, { skeleton: skeletonString, calendar: this.parent.getCalendarMode() }), "single");
    };
    QuickPopups2.prototype.getDataFromTarget = function(target) {
      if (target.classList.contains(APPOINTMENT_CLASS)) {
        return this.parent.activeEventData.event;
      }
      var eventObj = {
        startTime: this.parent.activeCellsData.startTime,
        endTime: this.parent.activeCellsData.endTime,
        isAllDay: this.parent.activeCellsData.isAllDay,
        groupIndex: this.parent.activeCellsData.groupIndex
      };
      var cellsData = this.parent.activeCellsData;
      this.parent.eventWindow.convertToEventData(cellsData, eventObj);
      return eventObj;
    };
    QuickPopups2.prototype.beforeQuickDialogClose = function(e) {
      var _this = this;
      var args = {
        event: e.event || this.dialogEvent,
        type: isNullOrUndefined(this.parent.activeEventData.event) ? "ValidationAlert" : !isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) ? "RecurrenceAlert" : "DeleteAlert",
        cancel: false,
        data: this.parent.activeEventData.event,
        element: this.quickDialog.element
      };
      this.parent.trigger(popupClose, args, function(popupCloseArgs) {
        if (!popupCloseArgs.cancel) {
          _this.parent.eventBase.focusElement(true);
        }
      });
    };
    QuickPopups2.prototype.beforeQuickPopupOpen = function(target, originalEvent) {
      var _this = this;
      this.parent.renderTemplates(function() {
        var isEventPopup = _this.quickPopup.element.querySelector("." + EVENT_POPUP_CLASS);
        var popupType = _this.parent.isAdaptive ? isEventPopup ? "ViewEventInfo" : "EditEventInfo" : "QuickInfo";
        var eventProp = {
          type: popupType,
          cancel: false,
          data: extend({}, _this.getDataFromTarget(target), null, true),
          target,
          element: _this.quickPopup.element
        };
        _this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
          if (popupArgs.cancel) {
            _this.quickPopupHide();
            _this.destroyPopupButtons("quickPopup");
            if (popupArgs.element.classList.contains(POPUP_OPEN)) {
              _this.quickPopupClose();
            }
            removeChildren(_this.quickPopup.element);
            _this.isMultipleEventSelect = false;
          } else {
            var display = _this.quickPopup.element.style.display;
            _this.quickPopup.element.style.display = "block";
            if (_this.parent.isAdaptive) {
              _this.quickPopup.element.removeAttribute("style");
              _this.quickPopup.element.style.display = "block";
              _this.quickPopup.element.style.height = formatUnit(popupType === "EditEventInfo" ? 65 : window.innerHeight);
            } else {
              var isVirtualScroll = _this.parent.virtualScrollModule && _this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(closest(target, "." + CONTENT_TABLE_CLASS));
              var conTable = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
              _this.quickPopup.offsetX = isVirtualScroll && !_this.parent.enableRtl ? getTranslateX(conTable) + 10 : 10;
              _this.quickPopup.offsetY = _this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll ? _this.quickPopup.offsetY : 0;
              _this.quickPopup.collision = { X: _this.parent.enableRtl ? "flip" : "none", Y: "fit" };
              _this.quickPopup.position = { X: _this.parent.enableRtl ? "left" : "right", Y: _this.parent.enableRtl ? "bottom" : "top" };
              _this.quickPopup.dataBind();
              _this.quickPopup.refreshPosition(null, true);
              var collide = isCollide(_this.quickPopup.element, _this.parent.element);
              if (collide.indexOf(_this.parent.enableRtl ? "left" : "right") > -1) {
                _this.quickPopup.offsetX = -target.offsetWidth - 10 - _this.quickPopup.element.offsetWidth;
                if (isVirtualScroll && !_this.parent.enableRtl) {
                  _this.quickPopup.offsetX = getTranslateX(conTable) + _this.quickPopup.offsetX;
                }
                _this.quickPopup.dataBind();
                _this.quickPopup.refreshPosition(null, true);
                var leftCollide = isCollide(_this.quickPopup.element, _this.parent.element);
                if (leftCollide.indexOf("left") > -1) {
                  _this.quickPopup.position = { X: "center", Y: "center" };
                  _this.quickPopup.collision = { X: "fit", Y: "fit" };
                  _this.quickPopup.offsetX = -(_this.quickPopup.element.offsetWidth / 2);
                  _this.quickPopup.dataBind();
                }
              }
              if (_this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll && (collide.indexOf("top") > -1 || collide.indexOf("bottom") > -1)) {
                var translateY = getTranslateY(conTable);
                _this.quickPopup.offsetY = translateY;
                _this.quickPopup.dataBind();
                _this.quickPopup.refreshPosition(null, true);
              }
              if (_this.quickPopup.position.X === "center" && _this.quickPopup.position.Y === "center" && !isNullOrUndefined(originalEvent) && originalEvent.clientX && originalEvent.clientY) {
                var clientX = originalEvent.clientX;
                var clientY = originalEvent.clientY;
                var targetRect = target.getBoundingClientRect();
                var offsetY = originalEvent.offsetY || Math.ceil(clientY - targetRect.y);
                var previousOffset = _this.quickPopup.offsetY;
                var collision = isCollide(_this.quickPopup.element, target);
                var popupRect = _this.quickPopup.element.getBoundingClientRect();
                var targetEle = document.elementFromPoint(clientX, clientY);
                if (collision.indexOf("top") > -1 || collision.indexOf("bottom") > -1 || closest(targetEle, "." + POPUP_WRAPPER_CLASS)) {
                  if (popupRect.top <= clientY && clientY <= popupRect.top + popupRect.height) {
                    _this.quickPopup.offsetY = previousOffset - popupRect.height - 10;
                    _this.quickPopup.dataBind();
                    collision = isCollide(_this.quickPopup.element, _this.parent.element);
                    if (collision.indexOf("top") > -1) {
                      _this.quickPopup.offsetY = previousOffset + offsetY + 10;
                      _this.quickPopup.dataBind();
                    }
                  } else if (isCollide(_this.quickPopup.element, _this.parent.element).indexOf("bottom") > -1) {
                    _this.quickPopup.offsetY = previousOffset - offsetY - Math.ceil(popupRect.height) - 10;
                    _this.quickPopup.dataBind();
                  }
                }
              }
            }
            if (isEventPopup) {
              _this.applyEventColor();
            }
            _this.quickPopup.element.style.display = display;
            _this.quickPopup.dataBind();
            _this.quickPopup.show();
          }
        });
      });
    };
    QuickPopups2.prototype.applyEventColor = function() {
      var colorField = "";
      if (this.parent.currentView === "Agenda" || this.parent.currentView === "MonthAgenda") {
        colorField = this.parent.enableRtl ? "border-right-color" : "border-left-color";
      } else {
        colorField = "background-color";
      }
      var color = this.parent.activeEventData.element.style[colorField];
      if (color === "") {
        return;
      }
      var colorEle = this.quickPopup.element.querySelector("." + POPUP_HEADER_CLASS);
      var footerEle = this.quickPopup.element.querySelector("." + POPUP_FOOTER_CLASS);
      if (footerEle && footerEle.offsetParent) {
        colorEle = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (colorEle) {
          colorEle.style.borderLeftColor = color;
          color = "rgba(" + color.match(/\d+/g).join() + ",0.3)";
        }
      }
      if (colorEle) {
        colorEle.style.backgroundColor = color;
      }
    };
    QuickPopups2.prototype.quickPopupOpen = function() {
      if (this.parent.isAdaptive) {
        this.quickPopup.element.style.top = "0px";
        return;
      }
      if (this.quickPopup.element.querySelector("." + CELL_POPUP_CLASS)) {
        var subjectElement = this.quickPopup.element.querySelector("." + SUBJECT_CLASS);
        if (subjectElement) {
          subjectElement.focus();
        }
      } else {
        var editElement = this.quickPopup.element.querySelector("." + EDIT_EVENT_CLASS);
        if (editElement) {
          editElement.focus();
        }
        var editIcon = this.quickPopup.element.querySelector("." + EDIT_CLASS);
        if (editIcon) {
          editIcon.focus();
        }
      }
    };
    QuickPopups2.prototype.quickPopupClose = function() {
      this.parent.eventBase.focusElement();
      this.quickPopup.relateTo = "." + WORK_CELLS_CLASS;
      this.fieldValidator.destroyToolTip();
      if (this.quickPopup.element.querySelectorAll(".e-formvalidator").length) {
        this.fieldValidator.destroy();
      }
      this.destroyPopupButtons("quickPopup");
      removeChildren(this.quickPopup.element);
    };
    QuickPopups2.prototype.morePopupOpen = function() {
      if (this.parent.isAdaptive) {
        this.morePopup.element.style.top = "0px";
        this.morePopup.element.style.left = "0px";
        this.morePopup.element.style.height = formatUnit(window.innerHeight);
        return;
      }
      this.morePopup.element.querySelector("." + MORE_EVENT_HEADER_DATE_CLASS).focus();
      this.morePopup.refreshPosition();
    };
    QuickPopups2.prototype.morePopupClose = function() {
      var moreWrapper = this.parent.element.querySelector("." + MORE_EVENT_WRAPPER_CLASS);
      if (moreWrapper) {
        remove(moreWrapper);
      }
    };
    QuickPopups2.prototype.popupClose = function(event2) {
      this.dialogEvent = event2;
      this.isCrudAction = false;
      this.quickPopupHide(true);
    };
    QuickPopups2.prototype.quickPopupHide = function(hideAnimation) {
      var _this = this;
      if (!this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        return;
      }
      var isCellPopup = this.quickPopup.element.querySelector("." + CELL_POPUP_CLASS);
      var popupData;
      if (isCellPopup) {
        var formvalidator = this.quickPopup.element.querySelector(".e-formvalidator");
        if (this.isCrudAction && formvalidator && !formvalidator.ej2_instances[0].validate()) {
          return;
        }
        var fields = this.parent.eventFields;
        var saveObj = this.parent.eventWindow.getObjectFromFormData(POPUP_WRAPPER_CLASS);
        this.parent.eventWindow.setDefaultValueToObject(saveObj);
        saveObj[fields.id] = this.parent.eventBase.getEventMaxID();
        saveObj[fields.startTime] = this.parent.activeCellsData.startTime;
        saveObj[fields.endTime] = this.parent.activeCellsData.endTime;
        saveObj[fields.isAllDay] = this.parent.activeCellsData.isAllDay;
        if (this.parent.resourceBase) {
          this.parent.resourceBase.setResourceValues(saveObj);
        }
        popupData = saveObj;
      } else {
        popupData = this.parent.activeEventData.event;
      }
      var isEventPopup = this.quickPopup.element.querySelector("." + EVENT_POPUP_CLASS);
      var args = {
        event: this.dialogEvent,
        type: this.parent.isAdaptive ? isEventPopup ? "ViewEventInfo" : "EditEventInfo" : "QuickInfo",
        cancel: false,
        data: popupData,
        element: this.quickPopup.element,
        target: isCellPopup ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      this.parent.trigger(popupClose, args, function(popupCloseArgs) {
        if (!popupCloseArgs.cancel) {
          if (_this.quickPopup.element.classList.contains("e-popup-open")) {
            if (isCellPopup && _this.isCrudAction) {
              _this.parent.currentAction = "Add";
              _this.parent.crudModule.addEvent(popupCloseArgs.data);
            }
            if (hideAnimation) {
              var animation = _this.quickPopup.hideAnimation;
              _this.quickPopup.hideAnimation = null;
              _this.quickPopup.hide();
              _this.quickPopup.hideAnimation = animation;
            } else {
              _this.quickPopup.hide();
            }
            _this.isMultipleEventSelect = false;
            _this.isCrudAction = false;
          }
        }
      });
    };
    QuickPopups2.prototype.navigationClick = function(e) {
      var navigateEle = closest(e.target, "." + NAVIGATE_CLASS);
      if (!isNullOrUndefined(navigateEle)) {
        var date = this.parent.getDateFromElement(e.currentTarget);
        if (!isNullOrUndefined(date)) {
          this.closeClick(e);
          this.parent.setProperties({ selectedDate: date }, true);
          this.parent.changeView(this.parent.getNavigateView(), e);
        }
      }
    };
    QuickPopups2.prototype.documentClick = function(e) {
      var target = e.event.target;
      var classNames2 = "." + POPUP_WRAPPER_CLASS + ",." + HEADER_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + WORK_CELLS_CLASS + ",." + APPOINTMENT_CLASS + ",.e-popup";
      var popupWrap = this.parent.element.querySelector("." + POPUP_WRAPPER_CLASS);
      if (popupWrap && popupWrap.childElementCount > 0 && !closest(target, classNames2) || !closest(target, classNames2)) {
        this.quickPopupHide();
        this.parent.removeNewEventElement();
      }
      var tar = this.parent.element.querySelector("." + INLINE_SUBJECT_CLASS);
      if (tar && tar !== target && this.parent.allowInline) {
        this.parent.inlineModule.documentClick();
      }
      if (closest(target, "." + APPOINTMENT_CLASS + ",." + HEADER_CELLS_CLASS)) {
        this.parent.removeNewEventElement();
      }
      if (!closest(target, "." + MORE_POPUP_WRAPPER_CLASS) && (target.classList && !target.classList.contains(MORE_INDICATOR_CLASS)) && !closest(target, "." + POPUP_OPEN) && !closest(target, "." + WORK_CELLS_CLASS)) {
        this.morePopup.hide();
      }
    };
    QuickPopups2.prototype.onClosePopup = function(event2) {
      if (!isNullOrUndefined(event2)) {
        this.dialogEvent = event2;
      }
      this.quickPopupHide();
      if (isNullOrUndefined(event2) || !isNullOrUndefined(event2) && event2.action !== "escape" || this.parent.inlineModule && this.parent.element.querySelector("." + INLINE_APPOINTMENT_CLASS)) {
        this.parent.eventBase.focusElement();
      }
    };
    QuickPopups2.prototype.addEventListener = function() {
      this.parent.on(cellClick, this.cellClick, this);
      this.parent.on(eventClick, this.eventClick, this);
      this.parent.on(documentClick, this.documentClick, this);
      this.parent.on(dataReady, this.updateMoreEventContent, this);
    };
    QuickPopups2.prototype.removeEventListener = function() {
      this.parent.off(cellClick, this.cellClick);
      this.parent.off(eventClick, this.eventClick);
      this.parent.off(documentClick, this.documentClick);
      this.parent.off(dataReady, this.updateMoreEventContent);
    };
    QuickPopups2.prototype.destroyPopupButtons = function(popupName) {
      var popup = popupName === "quickPopup" ? this.quickPopup : this.morePopup;
      var buttonCollections = [].slice.call(popup.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = button.ej2_instances[0];
        if (instance) {
          instance.destroy();
        }
      }
      if (popupName === "quickPopup") {
        var input2 = popup.element.querySelector("input." + SUBJECT_CLASS);
        if (input2) {
          input2.remove();
        }
        var form = this.quickPopup.element.querySelector("form." + FORM_CLASS);
        if (form) {
          removeChildren(form);
          form.remove();
        }
        this.parent.resetTemplates(["content", "header", "footer"]);
      }
    };
    QuickPopups2.prototype.refreshQuickDialog = function() {
      this.destroyQuickDialog();
      this.renderQuickDialog();
    };
    QuickPopups2.prototype.refreshQuickPopup = function() {
      this.destroyQuickPopup();
      this.renderQuickPopup();
    };
    QuickPopups2.prototype.refreshMorePopup = function() {
      this.destroyMorePopup();
      this.renderMorePopup();
    };
    QuickPopups2.prototype.destroyQuickDialog = function() {
      if (this.quickDialog.element) {
        this.quickDialog.destroy();
        remove(this.quickDialog.element);
        this.quickDialog = null;
      }
    };
    QuickPopups2.prototype.destroyQuickPopup = function() {
      if (this.quickPopup.element) {
        this.destroyPopupButtons("quickPopup");
        this.quickPopup.destroy();
        remove(this.quickPopup.element);
        this.quickPopup = null;
      }
    };
    QuickPopups2.prototype.destroyMorePopup = function() {
      if (this.morePopup.element) {
        this.destroyPopupButtons("morePopup");
        this.morePopup.destroy();
        remove(this.morePopup.element);
        this.morePopup = null;
      }
    };
    QuickPopups2.prototype.destroy = function() {
      if (this.quickPopup.element.querySelectorAll(".e-formvalidator").length) {
        this.fieldValidator.destroy();
      }
      this.removeEventListener();
      this.destroyQuickPopup();
      this.destroyMorePopup();
      this.destroyQuickDialog();
      this.dialogEvent = null;
      this.parent = null;
      this.l10n = null;
      this.isCrudAction = null;
      this.fieldValidator = null;
      this.isMultipleEventSelect = null;
    };
    return QuickPopups2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-tooltip.js
var EventTooltip = (
  /** @class */
  function() {
    function EventTooltip2(parent) {
      this.parent = parent;
      this.tooltipObj = new Tooltip({
        animation: { close: { effect: "FadeOut" } },
        content: "No title",
        position: "BottomRight",
        offsetY: 10,
        mouseTrail: this.parent.isAdaptive ? false : true,
        showTipPointer: false,
        cssClass: this.parent.cssClass + " " + EVENT_TOOLTIP_ROOT_CLASS,
        target: this.getTargets(),
        beforeRender: this.onBeforeRender.bind(this),
        beforeClose: this.onTooltipClose.bind(this),
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer
      });
      this.tooltipObj.appendTo(this.parent.element);
    }
    EventTooltip2.prototype.getTargets = function() {
      var targets = [];
      if (this.parent.activeViewOptions.group.headerTooltipTemplate) {
        targets.push("." + RESOURCE_CELLS_CLASS);
      }
      if (this.parent.eventSettings.enableTooltip) {
        targets.push("." + APPOINTMENT_CLASS);
      }
      return targets.join(",");
    };
    EventTooltip2.prototype.onBeforeRender = function(args) {
      if (!isNullOrUndefined(args.target.getAttribute("data-tooltip-id"))) {
        return;
      }
      if (args.target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeViewOptions.group.resources.length > 0) {
        var resCollection = void 0;
        if (this.parent.activeView.isTimelineView()) {
          var index = parseInt(args.target.getAttribute("data-group-index"), 10);
          resCollection = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        } else {
          var rowIndex = args.target.parentNode.sectionRowIndex;
          var cellIndex = args.target.cellIndex;
          resCollection = this.parent.activeView.getColumnLevels()[parseInt(rowIndex.toString(), 10)][parseInt(cellIndex.toString(), 10)];
        }
        var data = {
          resource: resCollection.resource,
          resourceData: resCollection.resourceData
        };
        var contentContainer = createElement("div");
        var templateId = this.parent.element.id + "_headerTooltipTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getHeaderTooltipTemplate()(data, this.parent, "headerTooltipTemplate", templateId, false));
        append(tooltipTemplate, contentContainer);
        this.setContent(contentContainer);
        this.parent.renderTemplates();
        return;
      }
      var record = this.parent.eventBase.getEventByGuid(args.target.getAttribute("data-guid"));
      if (isNullOrUndefined(record)) {
        return;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.tooltipTemplate)) {
        var contentContainer = createElement("div");
        var templateId = this.parent.element.id + "_tooltipTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getEventTooltipTemplate()(record, this.parent, "tooltipTemplate", templateId, false));
        append(tooltipTemplate, contentContainer);
        this.setContent(contentContainer);
      } else {
        var globalize = this.parent.globalize;
        var fields = this.parent.eventFields;
        var eventStart = /* @__PURE__ */ new Date("" + record[fields.startTime]);
        var eventEnd = /* @__PURE__ */ new Date("" + record[fields.endTime]);
        eventEnd = eventEnd.getHours() === 0 && eventEnd.getMinutes() === 0 ? new Date(eventEnd.setMilliseconds(-1e3)) : eventEnd;
        var startDate = resetTime(/* @__PURE__ */ new Date("" + eventStart));
        var endDate = resetTime(/* @__PURE__ */ new Date("" + eventEnd));
        var tooltipSubject = record[fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
        var tooltipLocation = !isNullOrUndefined(record[fields.location]) ? record[fields.location] : "";
        var startMonthDate = "";
        var startMonthYearDate = "";
        var endMonthYearDate = "";
        startMonthDate = globalize.formatDate(eventStart, {
          type: "date",
          skeleton: "MMMd",
          calendar: this.parent.getCalendarMode()
        });
        startMonthYearDate = globalize.formatDate(eventStart, {
          type: "date",
          skeleton: "medium",
          calendar: this.parent.getCalendarMode()
        });
        endMonthYearDate = globalize.formatDate(eventEnd, {
          type: "date",
          skeleton: "medium",
          calendar: this.parent.getCalendarMode()
        });
        startMonthDate = capitalizeFirstWord(startMonthDate, "single");
        startMonthYearDate = capitalizeFirstWord(startMonthYearDate, "single");
        endMonthYearDate = capitalizeFirstWord(endMonthYearDate, "single");
        var startTime = this.parent.getTimeString(eventStart);
        var endTime = this.parent.getTimeString(eventEnd);
        var tooltipDetails = void 0;
        if (startDate.getTime() === endDate.getTime()) {
          tooltipDetails = globalize.formatDate(eventStart, {
            type: "date",
            skeleton: "long",
            calendar: this.parent.getCalendarMode()
          });
          tooltipDetails = capitalizeFirstWord(tooltipDetails, "single");
        } else {
          tooltipDetails = startDate.getFullYear() === endDate.getFullYear() ? startMonthDate + " - " + endMonthYearDate : startMonthYearDate + " - " + endMonthYearDate;
        }
        var tooltipTime = record[fields.isAllDay] ? this.parent.localeObj.getConstant("allDay") : startTime + " - " + endTime;
        var content_1 = '<div><div class="e-subject">' + tooltipSubject + '</div><div class="e-location">' + tooltipLocation + '</div><div class="e-details">' + tooltipDetails + '</div><div class="e-all-day">' + tooltipTime + "</div></div>";
        var contentTemp = function() {
          return content_1;
        };
        this.setContent(initializeCSPTemplate(contentTemp));
      }
      this.parent.renderTemplates();
    };
    EventTooltip2.prototype.onTooltipClose = function(args) {
      if (args.element) {
        removeClass([args.element], POPUP_OPEN);
        addClass([args.element], POPUP_CLOSE);
      }
      this.parent.resetTemplates(["tooltipTemplate", "headerTooltipTemplate"]);
    };
    EventTooltip2.prototype.setContent = function(content) {
      this.tooltipObj.setProperties({ content }, true);
    };
    EventTooltip2.prototype.close = function() {
      this.tooltipObj.close();
    };
    EventTooltip2.prototype.destroy = function() {
      this.tooltipObj.destroy();
      addClass([this.parent.element], "e-control");
      this.tooltipObj = null;
      this.parent = null;
    };
    return EventTooltip2;
  }()
);

// node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js
var queryString = "";
var prevString = "";
var tempQueryString = "";
var matches2 = [];
var activeClass = "e-active";
var prevElementId = "";
function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, queryStringUpdated, currentValue, isVirtual, refresh) {
  if (!queryStringUpdated || queryString === "") {
    if (tempQueryString != "") {
      queryString = tempQueryString + String.fromCharCode(keyCode);
      tempQueryString = "";
    } else {
      queryString += String.fromCharCode(keyCode);
    }
  } else if (queryString == prevString) {
    tempQueryString = String.fromCharCode(keyCode);
  }
  if (isVirtual) {
    setTimeout(function() {
      tempQueryString = "";
    }, 700);
    setTimeout(function() {
      queryString = "";
    }, 3e3);
  } else {
    setTimeout(function() {
      queryString = "";
    }, 1e3);
  }
  var index;
  queryString = ignoreCase ? queryString.toLowerCase() : queryString;
  if (prevElementId === elementId && prevString === queryString && !refresh) {
    for (var i = 0; i < matches2.length; i++) {
      if (matches2[i].classList.contains(activeClass)) {
        index = i;
        break;
      }
      if (currentValue && matches2[i].textContent.toLowerCase() === currentValue.toLowerCase()) {
        index = i;
        break;
      }
    }
    index = index + 1;
    if (isVirtual) {
      return matches2[index] && matches2.length - 1 != index ? matches2[index] : matches2[matches2.length];
    }
    return matches2[index] ? matches2[index] : matches2[0];
  } else {
    var listItems = items;
    var strLength = queryString.length;
    var text = void 0;
    var item = void 0;
    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
    var i = selectedIndex;
    matches2 = [];
    do {
      if (i === listItems.length) {
        i = -1;
      }
      if (i === -1) {
        index = 0;
      } else {
        index = i;
      }
      item = listItems[index];
      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
      if (text.substr(0, strLength) === queryString) {
        matches2.push(listItems[index]);
      }
      i++;
    } while (i !== selectedIndex);
    prevString = queryString;
    prevElementId = elementId;
    if (isVirtual) {
      var indexUpdated = false;
      for (var i_1 = 0; i_1 < matches2.length; i_1++) {
        if (currentValue && matches2[i_1].textContent.toLowerCase() === currentValue.toLowerCase()) {
          index = i_1;
          indexUpdated = true;
          break;
        }
      }
      if (currentValue && indexUpdated) {
        index = index + 1;
      }
      return matches2[index] ? matches2[index] : matches2[0];
    }
    return matches2[0];
  }
}
function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {
  var listItems = items;
  ignoreCase = ignoreCase !== void 0 && ignoreCase !== null ? ignoreCase : true;
  var itemData = { item: null, index: null };
  if (inputVal && inputVal.length) {
    var strLength = inputVal.length;
    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;
    queryStr = escapeCharRegExp(queryStr);
    var _loop_1 = function(i2, itemsData2) {
      var item = itemsData2[i2];
      var text = void 0;
      var filterValue;
      if (items && dataSource) {
        var checkField_1 = item;
        var fieldValue_1 = fields.text.split(".");
        dataSource.filter(function(data) {
          Array.prototype.slice.call(fieldValue_1).forEach(function(value) {
            if (type === "object" && (!data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1) && checkField_1.getAttribute("data-value") === data[fields.value].toString() || type === "string" && checkField_1.textContent.toString().indexOf(data) !== -1) {
              filterValue = type === "object" ? data[value] : data;
            }
          });
        });
      }
      text = dataSource && filterValue ? (ignoreCase ? filterValue.toString().toLocaleLowerCase() : filterValue).replace(/^\s+|\s+$/g, "") : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
      if (searchType === "Equal" && text === queryStr || searchType === "StartsWith" && text.substr(0, strLength) === queryStr || searchType === "EndsWith" && text.substr(text.length - queryStr.length) === queryStr || searchType === "Contains" && new RegExp(queryStr, "g").test(text)) {
        itemData.item = item;
        itemData.index = i2;
        return { value: { item, index: i2 } };
      }
    };
    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
      var state_1 = _loop_1(i, itemsData);
      if (typeof state_1 === "object")
        return state_1.value;
    }
    return itemData;
  }
  return itemData;
}
function escapeCharRegExp(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function resetIncrementalSearchValues(elementId) {
  if (prevElementId === elementId) {
    prevElementId = "";
    prevString = "";
    queryString = "";
    matches2 = [];
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js
function highlightSearch(element, query, ignoreCase, type) {
  var isHtmlElement = /<[^>]*>/g.test(element.innerText);
  if (isHtmlElement) {
    element.innerText = element.innerText.replace(/[\u00A0-\u9999<>&]/g, function(match) {
      return "&#" + match.charCodeAt(0) + ";";
    });
  }
  if (query === "") {
    return;
  } else {
    var ignoreRegex = ignoreCase ? "gim" : "gm";
    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    var replaceQuery = type === "StartsWith" ? "^(" + query + ")" : type === "EndsWith" ? "(" + query + ")$" : "(" + query + ")";
    findTextNode(element, new RegExp(replaceQuery, ignoreRegex));
  }
}
function findTextNode(element, pattern) {
  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
    if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== "") {
      var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class="e-highlight">$1</span>');
      element.childNodes[index].nodeValue = "";
      element.innerHTML = element.innerHTML.trim() + value;
      break;
    } else {
      findTextNode(element.childNodes[index], pattern);
    }
  }
}
function revertHighlightSearch(content) {
  var contentElement = content.querySelectorAll(".e-highlight");
  for (var i = contentElement.length - 1; i >= 0; i--) {
    var parent_1 = contentElement[i].parentNode;
    var text = document.createTextNode(contentElement[i].textContent);
    parent_1.replaceChild(text, contentElement[i]);
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/virtual-scroll.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll3(parent) {
      var _this = this;
      this.sentinelInfo = {
        "up": {
          check: function(rect, info) {
            var top = rect.top - _this.containerElementRect.top;
            info.entered = top >= 0;
            return top + _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 >= 0;
          },
          axis: "Y"
        },
        "down": {
          check: function(rect, info) {
            var cHeight = _this.parent.popupContentElement.clientHeight;
            var top = rect.bottom;
            info.entered = rect.bottom <= _this.containerElementRect.bottom;
            return top - _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 <= _this.parent.listItemHeight * _this.parent.virtualItemCount / 2;
          },
          axis: "Y"
        }
      };
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    VirtualScroll3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("observe", this.observe, this);
      this.parent.on("setGeneratedData", this.setGeneratedData, this);
      this.parent.on("dataProcessAsync", this.dataProcessAsync, this);
      this.parent.on("setCurrentViewDataAsync", this.setCurrentViewDataAsync, this);
      this.parent.on("bindScrollEvent", this.bindScrollEvent, this);
    };
    VirtualScroll3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("observe", this.observe);
      this.parent.off("setGeneratedData", this.setGeneratedData);
      this.parent.off("dataProcessAsync", this.dataProcessAsync);
      this.parent.off("setCurrentViewDataAsync", this.setCurrentViewDataAsync);
      this.parent.off("bindScrollEvent", this.bindScrollEvent);
    };
    VirtualScroll3.prototype.bindScrollEvent = function(component) {
      var _this = this;
      this.component = component.component;
      this.observe(function(scrollArgs) {
        return _this.scrollListener(scrollArgs);
      });
    };
    VirtualScroll3.prototype.observe = function(callback) {
      this.containerElementRect = this.parent.popupContentElement.getBoundingClientRect();
      EventHandler.add(this.parent.popupContentElement, "wheel mousedown", this.popupScrollHandler, this);
      this.touchModule = new Touch(this.parent.popupContentElement, {
        scroll: this.popupScrollHandler.bind(this)
      });
      EventHandler.add(this.parent.popupContentElement, "scroll", this.virtualScrollHandler(callback), this);
    };
    VirtualScroll3.prototype.getModuleName = function() {
      return "VirtualScroll";
    };
    VirtualScroll3.prototype.popupScrollHandler = function(e) {
      this.parent.isMouseScrollAction = true;
      this.parent.isPreventScrollAction = false;
    };
    VirtualScroll3.prototype.getPageQuery = function(query, virtualStartIndex, virtualEndIndex) {
      if (virtualEndIndex !== 0 && !this.parent.allowFiltering && this.component !== "autocomplete") {
        query = query.skip(virtualStartIndex);
      }
      return query;
    };
    VirtualScroll3.prototype.setGeneratedData = function(qStartIndex, recentlyGeneratedData) {
      var loopIteration = 0;
      var endIndex = this.parent.listData.length + this.parent.virtualItemStartIndex;
      for (var i = this.parent.virtualItemStartIndex; i < endIndex; i++) {
        var alreadyAddedData = this.parent.generatedDataObject[i];
        if (!alreadyAddedData) {
          if (recentlyGeneratedData !== null && this.parent.listData.slice(loopIteration, loopIteration + 1).length > 0) {
            var slicedData = this.parent.listData.slice(loopIteration, loopIteration + 1);
            if (slicedData.length > 0) {
              this.parent.generatedDataObject[i] = slicedData;
            }
          }
        }
        loopIteration++;
      }
    };
    VirtualScroll3.prototype.generateAndExecuteQueryAsync = function(query, virtualItemStartIndex, virtualItemEndIndex, isQueryGenerated) {
      if (virtualItemStartIndex === void 0) {
        virtualItemStartIndex = 0;
      }
      if (virtualItemEndIndex === void 0) {
        virtualItemEndIndex = 0;
      }
      if (isQueryGenerated === void 0) {
        isQueryGenerated = false;
      }
      var dataSource = this.parent.dataSource;
      if (!isQueryGenerated) {
        if (!isNullOrUndefined(this.parent.query)) {
          var newQuery = this.removeSkipAndTakeEvents(this.parent.query.clone());
          query = this.getPageQuery(newQuery, virtualItemStartIndex, virtualItemEndIndex);
        } else {
          query = this.getPageQuery(query, virtualItemStartIndex, virtualItemEndIndex);
        }
      }
      var tempCustomFilter = this.parent.isCustomFilter;
      if (this.component === "combobox") {
        var totalData = 0;
        if (this.parent.dataSource instanceof DataManager) {
          totalData = this.parent.dataSource.dataSource.json.length;
        } else if (this.parent.dataSource && this.parent.dataSource.length > 0) {
          totalData = this.parent.dataSource.length;
        }
        if (totalData > 0) {
          this.parent.isCustomFilter = totalData == this.parent.totalItemCount && this.parent.queryString != this.parent.typedString ? true : this.parent.isCustomFilter;
        }
      }
      this.parent.resetList(dataSource, this.parent.fields, query);
      this.parent.isCustomFilter = tempCustomFilter;
    };
    VirtualScroll3.prototype.removeSkipAndTakeEvents = function(query) {
      query.queries = query.queries.filter(function(event2) {
        return event2.fn !== "onSkip" && event2.fn !== "onTake";
      });
      return query;
    };
    VirtualScroll3.prototype.setCurrentViewDataAsync = function(component) {
      var currentData = [];
      var isResetListCalled = false;
      var isListUpdated = true;
      if (isNullOrUndefined(this.component)) {
        this.component = component.component;
      }
      var endIndex = this.parent.viewPortInfo.endIndex;
      if (this.component === "multiselect" && this.parent.mode === "CheckBox" && this.parent.value && Array.isArray(this.parent.value) && this.parent.value.length > 0 && this.parent.enableSelectionOrder) {
        if (this.parent.viewPortInfo.startIndex < this.parent.value.length) {
          endIndex = this.parent.viewPortInfo.endIndex - this.parent.value.length;
          if (this.parent.viewPortInfo.startIndex === 0) {
            this.parent.updateVirtualReOrderList(true);
            if (this.parent.value.length < this.parent.itemCount) {
              var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
              if (oldUlElement) {
                this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
              }
              var query = this.parent.getForQuery(this.parent.value).clone();
              query = query.skip(0).take(this.parent.itemCount - (this.parent.value.length - this.parent.viewPortInfo.startIndex));
              this.parent.appendUncheckList = true;
              this.parent.setCurrentView = false;
              this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
              isListUpdated = false;
              this.parent.appendUncheckList = this.parent.dataSource instanceof DataManager ? this.parent.appendUncheckList : false;
              isListUpdated = false;
            } else {
              var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
              if (oldUlElement) {
                this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
              }
            }
            isListUpdated = false;
          } else if (this.parent.viewPortInfo.startIndex != 0) {
            this.parent.updateVirtualReOrderList(true);
            var oldUlElement = this.parent.list.querySelector(".e-list-parent:not(.e-reorder)");
            if (oldUlElement) {
              this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(oldUlElement);
            }
            isListUpdated = false;
          }
          if (this.parent.viewPortInfo.startIndex != 0 && this.parent.viewPortInfo.startIndex - this.parent.value.length != this.parent.itemCount && this.parent.viewPortInfo.startIndex + this.parent.itemCount > this.parent.value.length) {
            var query = this.parent.getForQuery(this.parent.value).clone();
            query = query.skip(0).take(this.parent.itemCount - (this.parent.value.length - this.parent.viewPortInfo.startIndex));
            this.parent.appendUncheckList = true;
            this.parent.setCurrentView = false;
            this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
            isListUpdated = false;
            this.parent.appendUncheckList = this.parent.dataSource instanceof DataManager ? this.parent.appendUncheckList : false;
          }
        } else {
          var reOrderList = this.parent.list.querySelectorAll(".e-reorder")[0];
          if (this.parent.list.querySelector(".e-virtual-ddl-content") && reOrderList) {
            this.parent.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList);
          }
          var query = this.parent.getForQuery(this.parent.value).clone();
          var skipvalue = this.parent.viewPortInfo.startIndex - this.parent.value.length >= 0 ? this.parent.viewPortInfo.startIndex - this.parent.value.length : 0;
          query = query.skip(skipvalue);
          this.parent.setCurrentView = false;
          this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
          isListUpdated = false;
        }
        this.parent.totalItemsCount();
      }
      if (isListUpdated) {
        for (var i = this.parent.viewPortInfo.startIndex; i < endIndex; i++) {
          var index = i;
          var alreadyAddedData = this.parent.generatedDataObject[index];
          if (this.component === "multiselect" && this.parent.hideSelectedItem) {
            if (alreadyAddedData) {
              var value = getValue(this.parent.fields.value, alreadyAddedData[0]);
              if (this.parent.value && value != null && Array.isArray(this.parent.value) && this.parent.value.length > 0 && this.parent.value.indexOf(value) < 0) {
                var query = this.parent.getForQuery(this.parent.value).clone();
                if (this.parent.viewPortInfo.endIndex == this.parent.totalItemCount + this.parent.value.length && this.parent.hideSelectedItem) {
                  query = query.skip(this.parent.totalItemCount - this.parent.itemCount);
                } else {
                  query = query.skip(this.parent.viewPortInfo.startIndex);
                }
                this.parent.setCurrentView = false;
                this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
                isResetListCalled = true;
                break;
              } else if (this.parent.value === null || this.parent.value && this.parent.value.length === 0) {
                currentData.push(alreadyAddedData[0]);
              }
            }
            if (index === endIndex - 1) {
              if (currentData.length != this.parent.itemCount) {
                if (this.parent.hideSelectedItem) {
                  var query = this.parent.getForQuery(this.parent.value).clone();
                  if (this.parent.viewPortInfo.endIndex == this.parent.totalItemCount + this.parent.value.length && this.parent.hideSelectedItem) {
                    query = query.skip(this.parent.totalItemCount - this.parent.itemCount);
                  } else {
                    query = query.skip(this.parent.viewPortInfo.startIndex);
                  }
                  this.parent.setCurrentView = false;
                  this.parent.resetList(this.parent.dataSource, this.parent.fields, query);
                  isResetListCalled = true;
                }
              }
            }
          } else {
            if (alreadyAddedData) {
              currentData.push(alreadyAddedData[0]);
            }
          }
          this.parent.setCurrentView = false;
        }
      }
      if (!isResetListCalled && isListUpdated) {
        if (this.component === "multiselect" && this.parent.allowCustomValue && this.parent.viewPortInfo.startIndex == 0 && this.parent.virtualCustomData) {
          currentData.splice(0, 0, this.parent.virtualCustomData);
        }
        var totalData = [];
        if (this.component === "multiselect" && this.parent.allowCustomValue && this.parent.viewPortInfo.endIndex == this.parent.totalItemCount) {
          if (this.parent.virtualCustomSelectData && this.parent.virtualCustomSelectData.length > 0) {
            totalData = currentData.concat(this.parent.virtualCustomSelectData);
            currentData = totalData;
          }
        }
        var ulElement = this.parent.renderItems(currentData, this.parent.fields, this.component === "multiselect" && this.parent.mode === "CheckBox");
      }
      if (this.component === "multiselect") {
        this.parent.updatevirtualizationList();
      }
      this.parent.getSkeletonCount();
      this.parent.skeletonCount = this.parent.totalItemCount != 0 && this.parent.totalItemCount < this.parent.itemCount * 2 ? 0 : this.parent.skeletonCount;
      var virtualTrackElement = this.parent.list.getElementsByClassName("e-virtual-ddl")[0];
      if (virtualTrackElement) {
        virtualTrackElement.style = this.parent.GetVirtualTrackHeight();
      } else if (!virtualTrackElement && this.parent.skeletonCount > 0 && this.parent.popupWrapper) {
        var virualElement = this.parent.createElement("div", {
          id: this.parent.element.id + "_popup",
          className: "e-virtual-ddl",
          styles: this.parent.GetVirtualTrackHeight()
        });
        this.parent.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      }
      this.parent.UpdateSkeleton();
      this.parent.liCollections = this.parent.list.querySelectorAll(".e-list-item");
      var virtualContentElement = this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0];
      if (virtualContentElement) {
        virtualContentElement.style = this.parent.getTransformValues();
      }
      if (this.parent.fields.groupBy) {
        this.parent.scrollStop();
      }
      if (this.parent.keyCode == 40 && this.parent.isScrollChanged && this.parent.hideSelectedItem && !isNullOrUndefined(this.parent.currentFocuedListElement)) {
        var currentSelectElem = this.parent.getElementByValue(this.parent.currentFocuedListElement.getAttribute("data-value"));
        this.parent.addListFocus(currentSelectElem);
        this.parent.isScrollChanged = false;
      }
    };
    VirtualScroll3.prototype.generateQueryAndSetQueryIndexAsync = function(query, isPopupOpen) {
      var isStartIndexInitialised = false;
      var queryStartIndex = 0;
      var queryEndIndex = 0;
      var vEndIndex = this.parent.viewPortInfo.endIndex;
      if (!isPopupOpen && vEndIndex !== 0) {
        for (var i = this.parent.viewPortInfo.startIndex; i <= vEndIndex; i++) {
          if (!(i in this.parent.generatedDataObject)) {
            if (!isStartIndexInitialised) {
              isStartIndexInitialised = true;
              queryStartIndex = queryEndIndex = i;
            } else {
              queryEndIndex = i === vEndIndex ? i : i + 1;
            }
          }
        }
      }
      if (isStartIndexInitialised && !(this.parent.totalItemCount == queryStartIndex && this.parent.totalItemCount == queryEndIndex)) {
        this.parent.virtualItemStartIndex = queryStartIndex;
        this.parent.virtualItemEndIndex = queryEndIndex;
        this.parent.setCurrentView = true;
        this.generateAndExecuteQueryAsync(query, queryStartIndex, queryEndIndex);
        if (this.component === "multiselect" && this.parent.hideSelectedItem && this.parent.value && Array.isArray(this.parent.value) && this.parent.value.length > 0) {
          this.parent.totalItemsCount();
        }
        if (this.component === "multiselect" && this.parent.virtualItemStartIndex === this.parent.virtualItemEndIndex) {
          this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;
          this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;
        }
      }
      if (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && !this.parent.isRequesting) {
        this.setCurrentViewDataAsync();
      }
    };
    VirtualScroll3.prototype.dataProcessAsync = function(isOpenPopup) {
      this.parent.selectedValueInfo = null;
      this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;
      this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;
      this.generateQueryAndSetQueryIndexAsync(new Query(), isOpenPopup);
    };
    VirtualScroll3.prototype.virtualScrollRefreshAsync = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.parent.isCustomFilter = !(this.parent.isTyped || this.component === "combobox" && this.parent.allowFiltering && this.parent.queryString != this.parent.typedString || !isNullOrUndefined(this.parent.filterInput) && !isNullOrUndefined(this.parent.filterInput.value) && this.parent.filterInput.value !== "" && this.component !== "combobox") && !(this.component === "autocomplete" && this.parent.value != null) || this.parent.isCustomFilter;
              if (this.parent.allowFiltering || this.component === "autocomplete") {
                if (!isNullOrUndefined(this.parent.typedString) && !(this.component === "combobox" && !isNullOrUndefined(this.parent.typedString) && this.parent.allowFiltering)) {
                  if (this.parent.viewPortInfo.endIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.endIndex = this.parent.dataCount;
                  }
                  if (this.parent.viewPortInfo.startIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.startIndex = this.parent.dataCount - this.parent.itemCount;
                  }
                } else {
                  this.parent.getSkeletonCount(true);
                  if (this.component === "combobox") {
                    this.parent.skeletonCount = this.parent.totalItemCount != 0 && this.parent.totalItemCount < this.parent.itemCount * 2 ? 0 : this.parent.skeletonCount;
                  }
                }
              }
              return [4, this.dataProcessAsync()];
            case 1:
              _a.sent();
              if (this.parent.keyboardEvent != null && (!(this.parent.dataSource instanceof DataManager) || this.parent.dataSource instanceof DataManager && !this.parent.isRequesting)) {
                this.parent.handleVirtualKeyboardActions(this.parent.keyboardEvent, this.parent.pageCount);
              }
              if (!this.parent.customFilterQuery) {
                this.parent.isCustomFilter = false;
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    VirtualScroll3.prototype.scrollListener = function(scrollArgs) {
      var _this = this;
      if (!this.parent.isPreventScrollAction && !this.parent.isVirtualTrackHeight) {
        this.parent.preventSetCurrentData = false;
        var info = scrollArgs.sentinel;
        var pStartIndex = this.parent.previousStartIndex;
        this.parent.viewPortInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset, false);
        this.parent.isUpwardScrolling = false;
        if (this.parent.previousStartIndex !== pStartIndex && !this.parent.isKeyBoardAction) {
          this.parent.isScrollActionTriggered = false;
          this.parent.currentPageNumber = this.parent.viewPortInfo.currentPageNumber;
          this.parent.virtualListInfo = __assign2({}, this.parent.viewPortInfo);
          this.parent.isPreventKeyAction = true;
          this.parent.isVirtualScrolling = true;
          setTimeout(function() {
            _this.parent.pageCount = _this.parent.getPageCount();
            _this.virtualScrollRefreshAsync().then(function() {
              if (_this.parent.popupObj) {
                _this.parent.list = _this.parent.popupObj.element.querySelector(".e-content") || select(".e-content");
                _this.parent.updateSelectionList();
                _this.parent.liCollections = _this.parent.getItems();
              }
              _this.parent.isKeyBoardAction = false;
              _this.parent.isVirtualScrolling = false;
              _this.parent.isPreventKeyAction = false;
            });
          }, 5);
        } else if (this.parent.isScrollActionTriggered) {
          this.parent.isPreventKeyAction = false;
          this.parent.isScrollActionTriggered = false;
          var virtualListCount = this.parent.list.querySelectorAll(".e-virtual-list").length;
          var listElement = this.parent.list.querySelector(".e-list-item");
          var translateY = scrollArgs.offset.top - listElement.offsetHeight * virtualListCount;
          this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0].style.transform = "translate(0px," + translateY + "px)";
        }
        this.parent.previousInfo = this.parent.viewPortInfo;
      }
    };
    VirtualScroll3.prototype.getInfoFromView = function(direction, info, e, isscrollAction) {
      var infoType = {
        direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.parent.previousStartIndex,
        endIndex: this.parent.previousEndIndex
      };
      var vHeight = this.parent.popupContentElement.getBoundingClientRect().height;
      var rowHeight = this.parent.listItemHeight;
      var exactTopIndex = e.top / rowHeight;
      var infoViewIndices = vHeight / rowHeight;
      var exactEndIndex = exactTopIndex + infoViewIndices;
      var pageSizeBy4 = this.parent.virtualItemCount / 4;
      var totalItemCount = this.parent.totalItemCount;
      if (infoType.direction === "down") {
        var sIndex = Math.round(exactEndIndex) - Math.round(pageSizeBy4);
        if (isNullOrUndefined(infoType.startIndex) || exactEndIndex > infoType.startIndex + Math.round(this.parent.virtualItemCount / 2 + pageSizeBy4) && infoType.endIndex !== totalItemCount) {
          infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
          infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
          var eIndex = infoType.startIndex + this.parent.virtualItemCount;
          infoType.startIndex = eIndex < exactEndIndex ? Math.ceil(exactEndIndex) - this.parent.virtualItemCount : infoType.startIndex;
          infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;
          infoType.startIndex = eIndex >= totalItemCount ? infoType.endIndex - this.parent.virtualItemCount > 0 ? infoType.endIndex - this.parent.virtualItemCount : 0 : infoType.startIndex;
          infoType.currentPageNumber = Math.ceil(infoType.endIndex / this.parent.virtualItemCount);
        }
      } else if (infoType.direction === "up") {
        if (infoType.startIndex && infoType.endIndex) {
          var loadAtIndex = Math.round((infoType.startIndex * rowHeight + pageSizeBy4 * rowHeight) / rowHeight);
          if (exactTopIndex < loadAtIndex) {
            var idxAddedToExactTop = pageSizeBy4 > infoViewIndices ? pageSizeBy4 : infoViewIndices + infoViewIndices / 4;
            var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
            infoType.endIndex = eIndex < totalItemCount || this.component == "multiselect" ? eIndex : totalItemCount;
            var sIndex = infoType.endIndex - this.parent.virtualItemCount;
            infoType.startIndex = sIndex > 0 ? sIndex : 0;
            infoType.endIndex = sIndex < 0 ? this.parent.virtualItemCount : infoType.endIndex;
            infoType.currentPageNumber = Math.ceil(infoType.startIndex / this.parent.virtualItemCount);
          }
        }
      }
      if (!isscrollAction) {
        this.parent.previousStartIndex = infoType.startIndex;
        this.parent.startIndex = infoType.startIndex;
        this.parent.previousEndIndex = infoType.endIndex;
      } else {
        this.parent.scrollPreStartIndex = infoType.startIndex;
      }
      return infoType;
    };
    VirtualScroll3.prototype.virtualScrollHandler = function(callback) {
      var _this = this;
      var delay = Browser.info.name === "chrome" ? 200 : 100;
      var prevTop = 0;
      var debounced100 = debounce(callback, delay);
      var debounced50 = debounce(callback, 50);
      return function(e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = prevTop < top && !_this.parent.isUpwardScrolling ? "down" : "up";
        prevTop = top;
        var current = _this.sentinelInfo[direction];
        var pstartIndex = _this.parent.scrollPreStartIndex;
        var scrollOffsetargs = {
          top,
          left
        };
        if (_this.parent.list && _this.parent.list.querySelectorAll(".e-virtual-list").length > 0) {
          var infoview = _this.getInfoFromView(direction, current, scrollOffsetargs, true);
          if (_this.parent.scrollPreStartIndex != pstartIndex && !_this.parent.isPreventScrollAction) {
            _this.parent.isScrollActionTriggered = true;
            var virtualPoup = _this.parent.list.querySelector(".e-virtual-ddl-content");
            virtualPoup.style.transform = "translate(0px," + top + "px)";
          }
        }
        var debounceFunction = debounced100;
        if (current.axis === "X") {
          debounceFunction = debounced50;
        }
        debounceFunction({
          direction,
          sentinel: current,
          offset: { top, left },
          focusElement: document.activeElement
        });
      };
    };
    VirtualScroll3.prototype.destroy = function() {
      this.removeEventListener();
    };
    return VirtualScroll3;
  }()
);

// node_modules/@syncfusion/ej2-notifications/src/toast/toast.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT9 = "e-toast";
var CONTAINER = "e-toast-container";
var TITLE3 = "e-toast-title";
var WIDTHFULL = "e-toast-full-width";
var CONTENT5 = "e-toast-content";
var MESSAGE = "e-toast-message";
var ICON4 = "e-toast-icon";
var PROGRESS = "e-toast-progress";
var ACTIOBUTTONS = "e-toast-actions";
var CLOSEBTN = "e-toast-close-icon";
var RTL8 = "e-rtl";
var TOAST_BLAZOR_HIDDEN = "e-blazor-toast-hidden";
var ToastPosition = (
  /** @class */
  function(_super) {
    __extends27(ToastPosition2, _super);
    function ToastPosition2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Property("Left")
    ], ToastPosition2.prototype, "X", void 0);
    __decorate24([
      Property("Top")
    ], ToastPosition2.prototype, "Y", void 0);
    return ToastPosition2;
  }(ChildProperty)
);
var ButtonModelProps = (
  /** @class */
  function(_super) {
    __extends27(ButtonModelProps2, _super);
    function ButtonModelProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Property(null)
    ], ButtonModelProps2.prototype, "model", void 0);
    __decorate24([
      Property(null)
    ], ButtonModelProps2.prototype, "click", void 0);
    return ButtonModelProps2;
  }(ChildProperty)
);
var ToastAnimations = (
  /** @class */
  function(_super) {
    __extends27(ToastAnimations2, _super);
    function ToastAnimations2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Property("FadeIn")
    ], ToastAnimations2.prototype, "effect", void 0);
    __decorate24([
      Property(600)
    ], ToastAnimations2.prototype, "duration", void 0);
    __decorate24([
      Property("ease")
    ], ToastAnimations2.prototype, "easing", void 0);
    return ToastAnimations2;
  }(ChildProperty)
);
var ToastAnimationSettings = (
  /** @class */
  function(_super) {
    __extends27(ToastAnimationSettings2, _super);
    function ToastAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Complex({ effect: "FadeIn", duration: 600, easing: "ease" }, ToastAnimations)
    ], ToastAnimationSettings2.prototype, "show", void 0);
    __decorate24([
      Complex({ effect: "FadeOut", duration: 600, easing: "ease" }, ToastAnimations)
    ], ToastAnimationSettings2.prototype, "hide", void 0);
    return ToastAnimationSettings2;
  }(ChildProperty)
);
var Toast = (
  /** @class */
  function(_super) {
    __extends27(Toast2, _super);
    function Toast2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.toastCollection = [];
      _this.needsID = true;
      return _this;
    }
    Toast2.prototype.getModuleName = function() {
      return "toast";
    };
    Toast2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toast2.prototype.destroy = function() {
      this.hide("All");
      this.element.classList.remove(CONTAINER);
      setStyleAttribute(this.element, { "position": "", "z-index": "" });
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (!this.isBlazorServer()) {
        _super.prototype.destroy.call(this);
      }
    };
    Toast2.prototype.preRender = function() {
      this.isDevice = Browser.isDevice;
      if (this.width === "300px") {
        this.width = this.isDevice && screen.width < 768 ? "100%" : "300px";
      }
      if (isNullOrUndefined(this.target)) {
        this.target = document.body;
      }
      if (this.enableRtl && !this.isBlazorServer()) {
        this.element.classList.add(RTL8);
      }
    };
    Toast2.prototype.render = function() {
      this.progressObj = [];
      this.intervalId = [];
      this.contentTemplate = null;
      this.toastTemplate = null;
      this.renderComplete();
      this.initRenderClass = this.element.className;
    };
    Toast2.prototype.show = function(toastObj) {
      var collectionObj;
      if (!isNullOrUndefined(toastObj)) {
        this.templateChanges(toastObj);
        collectionObj = JSON.parse(JSON.stringify(toastObj));
        extend(this, this, toastObj);
      }
      if (isNullOrUndefined(this.toastContainer)) {
        this.toastContainer = this.getContainer();
        var target = typeof this.target === "string" ? document.querySelector(this.target) : typeof this.target === "object" ? this.target : document.body;
        if (isNullOrUndefined(target)) {
          return;
        }
        if (target.tagName === "BODY") {
          this.toastContainer.style.position = "fixed";
        } else {
          this.toastContainer.style.position = "absolute";
          target.style.position = "relative";
        }
        this.setPositioning(this.position);
        target.appendChild(this.toastContainer);
      }
      if (this.isBlazorServer() && this.element.classList.contains("e-control")) {
        this.isToastModel(toastObj);
        return;
      }
      this.toastEle = this.createElement("div", { className: ROOT9, id: getUniqueID("toast") });
      this.setWidthHeight();
      this.setCSSClass(this.cssClass);
      if (isNullOrUndefined(this.template) || this.template === "") {
        this.personalizeToast();
      } else {
        this.templateRendering();
      }
      this.setProgress();
      this.setCloseButton();
      this.setAria();
      this.appendToTarget(toastObj);
      if (this.isDevice && screen.width < 768) {
        new Touch(this.toastEle, { swipe: this.swipeHandler.bind(this) });
      }
      if (!isNullOrUndefined(collectionObj)) {
        extend(collectionObj, { element: [this.toastEle] }, true);
        this.toastCollection.push(collectionObj);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toast2.prototype.showToast = function(id, toastObj) {
      this.toastEle = this.element.querySelector("#" + id);
      this.show(toastObj);
    };
    Toast2.prototype.isToastModel = function(toastObj) {
      this.toastContainer = this.element;
      this.setPositioning(this.position);
      var proxy = this;
      if (!isNullOrUndefined(proxy.element.lastElementChild)) {
        this.setProgress();
      }
      this.setAria();
      this.appendToTarget(toastObj);
    };
    Toast2.prototype.swipeHandler = function(e) {
      var toastEle = closest(e.originalEvent.target, "." + ROOT9 + ":not(." + CONTAINER + ")");
      var hideAnimation = this.animation.hide.effect;
      if (!isNullOrUndefined(toastEle)) {
        if (e.swipeDirection === "Right") {
          this.animation.hide.effect = "SlideRightOut";
          this.hideToast("swipe", toastEle);
        } else if (e.swipeDirection === "Left") {
          this.animation.hide.effect = "SlideLeftOut";
          this.hideToast("swipe", toastEle);
        }
        this.animation.hide.effect = hideAnimation;
      }
    };
    Toast2.prototype.templateChanges = function(toastObj) {
      if (!isUndefined(toastObj.content) && !isNullOrUndefined(this.contentTemplate) && this.content !== toastObj.content) {
        this.clearContentTemplate();
      }
      if (!isUndefined(toastObj.template) && !isNullOrUndefined(this.toastTemplate) && this.template !== toastObj.template) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.setCSSClass = function(cssClass2) {
      if (cssClass2) {
        var split = cssClass2.indexOf(",") !== -1 ? "," : " ";
        classList(this.toastEle, cssClass2.split(split), []);
        if (this.toastContainer) {
          classList(this.toastContainer, cssClass2.split(split), []);
        }
      }
    };
    Toast2.prototype.setWidthHeight = function() {
      if (this.width === "300px") {
        this.toastEle.style.width = formatUnit(this.width);
      } else if (this.width === "100%") {
        this.toastContainer.classList.add(WIDTHFULL);
      } else {
        this.toastEle.style.width = formatUnit(this.width);
        this.toastContainer.classList.remove(WIDTHFULL);
      }
      this.toastEle.style.height = formatUnit(this.height);
    };
    Toast2.prototype.templateRendering = function() {
      this.fetchEle(this.toastEle, this.template, "template");
    };
    Toast2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var item = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(item, item, beforeEvent);
        this.trigger("beforeSanitizeHtml", item);
        if (item.cancel && !isNullOrUndefined(item.helper)) {
          value = item.helper(value);
        } else if (!item.cancel) {
          value = SanitizeHtmlHelper.serializeValue(item, value);
        }
      }
      return value;
    };
    Toast2.prototype.hide = function(element) {
      this.hideToast("", element);
    };
    Toast2.prototype.hideToast = function(interactionType, element) {
      if (isNullOrUndefined(this.toastContainer) || this.toastContainer.childElementCount === 0) {
        return;
      }
      if (typeof element === "string" && element === "All") {
        for (var i = 0; i < this.toastContainer.childElementCount; i++) {
          this.destroyToast(this.toastContainer.children[i], interactionType);
        }
        return;
      }
      if (isNullOrUndefined(element)) {
        element = this.newestOnTop ? this.toastContainer.lastElementChild : this.toastContainer.firstElementChild;
      }
      this.destroyToast(element, interactionType);
    };
    Toast2.prototype.fetchEle = function(ele, value, prob) {
      value = typeof value === "string" ? this.sanitizeHelper(value) : value;
      var templateFn;
      var tempVar;
      var tmpArray;
      var templateProps;
      if (ele.classList.contains(TITLE3)) {
        templateProps = this.element.id + "title";
      } else if (ele.classList.contains(CONTENT5)) {
        templateProps = this.element.id + "content";
      } else {
        templateProps = this.element.id + "template";
      }
      if (prob === "content") {
        tempVar = this.contentTemplate;
      } else {
        tempVar = this.toastTemplate;
      }
      if (!isNullOrUndefined(tempVar)) {
        ele.appendChild(tempVar.cloneNode(true));
        return ele;
      }
      try {
        if (typeof value !== "function" && document.querySelectorAll(value).length > 0) {
          var elem = null;
          if (prob !== "title") {
            elem = document.querySelector(value);
            ele.appendChild(elem);
            elem.style.display = "";
          }
          var clo = isNullOrUndefined(elem) ? tempVar : elem.cloneNode(true);
          if (prob === "content") {
            this.contentTemplate = clo;
          } else {
            this.toastTemplate = clo;
          }
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        templateFn = typeof value == "object" ? compile(value) : compile(initializeCSPTemplate(function() {
          return value;
        }));
      }
      if (!isNullOrUndefined(templateFn)) {
        if (!this.isBlazorServer()) {
          tmpArray = templateFn({}, this, prob, null, true);
        } else {
          var isString = true;
          tmpArray = templateFn({}, this, prob, templateProps, isString);
        }
      }
      if (!isNullOrUndefined(tmpArray) && tmpArray.length > 0 && !(isNullOrUndefined(tmpArray[0].tagName) && tmpArray.length === 1)) {
        [].slice.call(tmpArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (typeof value !== "function" && ele.childElementCount === 0) {
        ele.innerHTML = value;
      }
      return ele;
    };
    Toast2.prototype.clearProgress = function(intervalId) {
      if (!isNullOrUndefined(this.intervalId[intervalId])) {
        clearInterval(this.intervalId[intervalId]);
        delete this.intervalId[intervalId];
      }
      if (!isNullOrUndefined(this.progressObj[intervalId])) {
        clearInterval(this.progressObj[intervalId].intervalId);
        delete this.progressObj[intervalId];
      }
    };
    Toast2.prototype.removeToastContainer = function(isClosed) {
      if (isClosed && this.toastContainer.classList.contains("e-toast-util")) {
        detach(this.toastContainer);
      }
    };
    Toast2.prototype.clearContainerPos = function(isClosed) {
      var _this = this;
      if (this.isBlazorServer()) {
        this.toastContainer = null;
        return;
      }
      if (this.customPosition) {
        setStyleAttribute(this.toastContainer, { "left": "", "top": "" });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
        this.customPosition = false;
      } else {
        [
          ROOT9 + "-top-left",
          ROOT9 + "-top-right",
          ROOT9 + "-bottom-left",
          ROOT9 + "-bottom-right",
          ROOT9 + "-bottom-center",
          ROOT9 + "-top-center",
          ROOT9 + "-full-width"
        ].forEach(function(pos) {
          if (!isNullOrUndefined(_this.toastContainer) && _this.toastContainer.classList.contains(pos)) {
            _this.toastContainer.classList.remove(pos);
          }
        });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
      }
      if (!isNullOrUndefined(this.contentTemplate)) {
        this.clearContentTemplate();
      }
      if (!isNullOrUndefined(this.toastTemplate)) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.clearContentTemplate = function() {
      this.contentTemplate.style.display = "none";
      document.body.appendChild(this.contentTemplate);
      this.contentTemplate = null;
    };
    Toast2.prototype.clearToastTemplate = function() {
      this.toastTemplate.style.display = "none";
      document.body.appendChild(this.toastTemplate);
      this.toastTemplate = null;
    };
    Toast2.prototype.isBlazorServer = function() {
      return isBlazor() && this.isServerRendered;
    };
    Toast2.prototype.destroyToast = function(toastEle, interactionType) {
      var _this = this;
      var toastObj;
      for (var i = 0; i < this.toastCollection.length; i++) {
        if (this.toastCollection[i].element[0] === toastEle) {
          toastObj = this.toastCollection[i];
          this.toastCollection.splice(i, 1);
        }
      }
      var toastBeforeClose = {
        options: this,
        cancel: false,
        type: interactionType,
        element: toastEle,
        toastContainer: this.toastContainer
      };
      var hideAnimate = this.animation.hide;
      var animate = {
        duration: hideAnimate.duration,
        name: hideAnimate.effect === "None" && animationMode === "Enable" ? "FadeOut" : hideAnimate.effect,
        timingFunction: hideAnimate.easing
      };
      var intervalId = parseInt(toastEle.id.split("toast_")[1], 10);
      var toastClose = this.isBlazorServer() ? {
        options: toastObj,
        toastContainer: this.toastContainer
      } : {
        options: toastObj,
        toastContainer: this.toastContainer,
        toastObj: this
      };
      this.trigger("beforeClose", toastBeforeClose, function(toastBeforeCloseArgs) {
        if (!toastBeforeCloseArgs.cancel) {
          if (!isNullOrUndefined(_this.progressObj[intervalId]) && !isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
            _this.progressObj[intervalId].progressEle.style.width = "0%";
          }
          animate.end = function() {
            _this.clearProgress(intervalId);
            if (!_this.isBlazorServer() || isNullOrUndefined(toastObj)) {
              detach(toastEle);
            }
            _this.trigger("close", toastClose);
            if (_this.toastContainer.childElementCount === 0) {
              _this.clearContainerPos(true);
            }
            hideAnimate = null;
            animate = null;
          };
          new Animation(animate).animate(toastEle);
        }
      });
    };
    Toast2.prototype.personalizeToast = function() {
      this.setIcon();
      this.setTitle();
      this.setContent();
      this.actionButtons();
    };
    Toast2.prototype.setAria = function() {
      attributes(this.toastEle, { "role": "alert" });
    };
    Toast2.prototype.setPositioning = function(pos) {
      if (this.isBlazorServer()) {
        return;
      }
      if (!isNaN(parseFloat(pos.X)) || !isNaN(parseFloat(pos.Y))) {
        this.customPosition = true;
        setStyleAttribute(this.toastContainer, { "left": formatUnit(pos.X), "top": formatUnit(pos.Y) });
      } else {
        this.toastContainer.classList.add(ROOT9 + "-" + pos.Y.toString().toLowerCase() + "-" + pos.X.toString().toLowerCase());
      }
    };
    Toast2.prototype.setCloseButton = function() {
      if (!this.showCloseButton) {
        return;
      }
      var localeText = { close: "Close" };
      this.l10n = new L10n("toast", localeText, this.locale);
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      var closeBtn = this.createElement("div", { className: CLOSEBTN + " e-icons ", attrs: { tabindex: "0", "aria-label": closeIconTitle, "role": "button" } });
      this.toastEle.classList.add("e-toast-header-close-icon");
      this.toastEle.appendChild(closeBtn);
    };
    Toast2.prototype.setProgress = function() {
      if (this.timeOut > 0) {
        var id = parseInt(this.toastEle.id.split("toast_")[1], 10);
        this.intervalId[id] = window.setTimeout(this.destroyToast.bind(this, this.toastEle), this.timeOut);
        this.progressObj[id] = {
          hideEta: null,
          intervalId: null,
          maxHideTime: null,
          element: null,
          timeOutId: null,
          progressEle: null
        };
        this.progressObj[id].maxHideTime = parseFloat(this.timeOut + "");
        this.progressObj[id].hideEta = (/* @__PURE__ */ new Date()).getTime() + this.progressObj[id].maxHideTime;
        this.progressObj[id].element = this.toastEle;
        if (this.extendedTimeout > 0) {
          EventHandler.add(this.toastEle, "mouseover", this.toastHoverAction.bind(this, id));
          EventHandler.add(this.toastEle, "mouseleave", this.delayedToastProgress.bind(this, id));
          this.progressObj[id].timeOutId = this.intervalId[id];
        }
        if (this.showProgressBar) {
          this.progressBarEle = this.createElement("div", { className: PROGRESS });
          this.toastEle.insertBefore(this.progressBarEle, this.toastEle.children[0]);
          this.progressObj[id].intervalId = setInterval(this.updateProgressBar.bind(this, this.progressObj[id]), 10);
          this.progressObj[id].progressEle = this.progressBarEle;
        }
      }
    };
    Toast2.prototype.toastHoverAction = function(id) {
      clearTimeout(this.progressObj[id].timeOutId);
      clearInterval(this.progressObj[id].intervalId);
      this.progressObj[id].hideEta = 0;
      var toastEle = this.progressObj[id].element;
      if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
        this.progressObj[id].progressEle.style.width = "0%";
      }
    };
    Toast2.prototype.delayedToastProgress = function(id) {
      var progress = this.progressObj[id];
      var toastEle = progress.element;
      progress.timeOutId = window.setTimeout(this.destroyToast.bind(this, toastEle), this.extendedTimeout);
      progress.maxHideTime = parseFloat(this.extendedTimeout + "");
      progress.hideEta = (/* @__PURE__ */ new Date()).getTime() + progress.maxHideTime;
      if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
        progress.intervalId = setInterval(this.updateProgressBar.bind(this, progress), 10);
      }
    };
    Toast2.prototype.updateProgressBar = function(progressObj) {
      var percentage = (progressObj.hideEta - (/* @__PURE__ */ new Date()).getTime()) / progressObj.maxHideTime * 100;
      percentage = this.progressDirection === "Ltr" ? 100 - percentage : percentage;
      progressObj.progressEle.style.width = percentage + "%";
    };
    Toast2.prototype.setIcon = function() {
      if (isNullOrUndefined(this.icon) || this.icon.length === 0) {
        return;
      }
      var iconEle = this.createElement("div", { className: ICON4 + " e-icons " + this.icon });
      this.toastEle.classList.add("e-toast-header-icon");
      this.toastEle.appendChild(iconEle);
    };
    Toast2.prototype.setTitle = function() {
      if (isNullOrUndefined(this.title)) {
        return;
      }
      var titleEle = this.createElement("div", { className: TITLE3 });
      titleEle = this.fetchEle(titleEle, this.title, "title");
      var msgContainer = this.createElement("div", { className: MESSAGE });
      msgContainer.appendChild(titleEle);
      this.toastEle.appendChild(msgContainer);
    };
    Toast2.prototype.setContent = function() {
      var contentEle = this.createElement("div", { className: CONTENT5 });
      var ele = this.element;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s/g, "") !== "";
        if ((ele.children.length > 0 || isContent) && !(ele.firstElementChild && ele.firstElementChild.classList.contains(ROOT9))) {
          this.innerEle = document.createDocumentFragment();
          var tempEle_1 = this.createElement("div");
          while (ele.childNodes.length !== 0) {
            this.innerEle.appendChild(this.element.childNodes[0]);
          }
          contentEle.appendChild(this.innerEle);
          [].slice.call(contentEle.children).forEach(function(ele2) {
            tempEle_1.appendChild(ele2.cloneNode(true));
          });
          this.content = tempEle_1;
          this.appendMessageContainer(contentEle);
        }
      } else {
        if (typeof this.content === "object" && !isNullOrUndefined(this.content.tagName)) {
          contentEle.appendChild(this.content);
          this.content = this.content.cloneNode(true);
          this.appendMessageContainer(contentEle);
        } else {
          contentEle = this.fetchEle(contentEle, this.content, "content");
          this.appendMessageContainer(contentEle);
        }
      }
    };
    Toast2.prototype.appendMessageContainer = function(element) {
      if (this.toastEle.querySelectorAll("." + MESSAGE).length > 0) {
        this.toastEle.querySelector("." + MESSAGE).appendChild(element);
      } else {
        var msgContainer = this.createElement("div", { className: MESSAGE });
        msgContainer.appendChild(element);
        this.toastEle.appendChild(msgContainer);
      }
    };
    Toast2.prototype.actionButtons = function() {
      var _this = this;
      var actionBtnContainer = this.createElement("div", { className: ACTIOBUTTONS });
      [].slice.call(this.buttons).forEach(function(actionBtn) {
        if (isNullOrUndefined(actionBtn.model)) {
          return;
        }
        var btnDom = _this.createElement("button");
        btnDom.setAttribute("type", "button");
        if (isNullOrUndefined(actionBtn.model.cssClass) || actionBtn.model.cssClass.length === 0) {
          actionBtn.model.cssClass = "e-primary " + _this.cssClass;
        }
        btnDom.classList.add("e-small");
        new Button(actionBtn.model, btnDom);
        if (!isNullOrUndefined(actionBtn.click) && typeof actionBtn.click === "function") {
          EventHandler.add(btnDom, "click", actionBtn.click);
        }
        actionBtnContainer.appendChild(btnDom);
      });
      if (actionBtnContainer.childElementCount > 0) {
        this.appendMessageContainer(actionBtnContainer);
      }
    };
    Toast2.prototype.appendToTarget = function(toastObj) {
      var _this = this;
      var toastBeforeOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle,
        cancel: false
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle,
        cancel: false
      };
      this.trigger("beforeOpen", toastBeforeOpen, function(toastBeforeOpenArgs) {
        if (!toastBeforeOpenArgs.cancel) {
          if (!_this.isBlazorServer()) {
            _this.toastEle.style.display = "none";
          }
          if (_this.newestOnTop && _this.toastContainer.childElementCount !== 0) {
            _this.toastContainer.insertBefore(_this.toastEle, _this.toastContainer.children[0]);
          } else if (!_this.isBlazorServer()) {
            _this.toastContainer.appendChild(_this.toastEle);
          }
          removeClass([_this.toastEle], TOAST_BLAZOR_HIDDEN);
          EventHandler.add(_this.toastEle, "click", _this.clickHandler, _this);
          EventHandler.add(_this.toastEle, "keydown", _this.keyDownHandler, _this);
          _this.toastContainer.style.zIndex = getZindexPartial(_this.toastContainer) + "";
          _this.displayToast(_this.toastEle, toastObj);
        } else if (_this.isBlazorServer()) {
          var intervalId = parseInt(_this.toastEle.id.split("toast_")[1], 10);
          _this.clearProgress(intervalId);
          detach(_this.toastEle);
          if (_this.toastContainer.childElementCount === 0) {
            _this.clearContainerPos();
          }
        }
      });
    };
    Toast2.prototype.clickHandler = function(e) {
      var _this = this;
      if (!this.isBlazorServer()) {
        e.stopPropagation();
      }
      var target = e.target;
      var toastEle = closest(target, "." + ROOT9);
      var clickArgs = this.isBlazorServer() ? {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e
      } : {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e,
        toastObj: this
      };
      var isCloseIcon = target.classList.contains(CLOSEBTN);
      this.trigger("click", clickArgs, function(toastClickArgs) {
        if (isCloseIcon && !toastClickArgs.cancel || toastClickArgs.clickToClose) {
          _this.destroyToast(toastEle, "click");
        }
      });
    };
    Toast2.prototype.keyDownHandler = function(e) {
      if (e.target.classList.contains(CLOSEBTN) && (e.keyCode === 13 || e.keyCode === 32)) {
        var target = e.target;
        var toastEle = closest(target, "." + ROOT9);
        this.destroyToast(toastEle, "key");
      }
    };
    Toast2.prototype.displayToast = function(toastEle, toastObj) {
      var _this = this;
      var showAnimate = this.animation.show;
      var animate = {
        duration: showAnimate.duration,
        name: showAnimate.effect === "None" && animationMode === "Enable" ? "FadeIn" : showAnimate.effect,
        timingFunction: showAnimate.easing
      };
      var toastOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle
      };
      animate.begin = function() {
        toastEle.style.display = "";
      };
      animate.end = function() {
        _this.trigger("open", toastOpen);
      };
      new Animation(animate).animate(toastEle);
    };
    Toast2.prototype.getContainer = function() {
      this.element.classList.add(CONTAINER);
      return this.element;
    };
    Toast2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var container = this.element;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              container.classList.add(RTL8);
            } else {
              container.classList.remove(RTL8);
            }
            break;
        }
      }
    };
    __decorate24([
      Property("300px")
    ], Toast2.prototype, "width", void 0);
    __decorate24([
      Property("auto")
    ], Toast2.prototype, "height", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "title", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "content", void 0);
    __decorate24([
      Property(true)
    ], Toast2.prototype, "enableHtmlSanitizer", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "icon", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "cssClass", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "template", void 0);
    __decorate24([
      Property(true)
    ], Toast2.prototype, "newestOnTop", void 0);
    __decorate24([
      Property(false)
    ], Toast2.prototype, "showCloseButton", void 0);
    __decorate24([
      Property(false)
    ], Toast2.prototype, "showProgressBar", void 0);
    __decorate24([
      Property(5e3)
    ], Toast2.prototype, "timeOut", void 0);
    __decorate24([
      Property("Rtl")
    ], Toast2.prototype, "progressDirection", void 0);
    __decorate24([
      Property(1e3)
    ], Toast2.prototype, "extendedTimeout", void 0);
    __decorate24([
      Complex({}, ToastAnimationSettings)
    ], Toast2.prototype, "animation", void 0);
    __decorate24([
      Complex({}, ToastPosition)
    ], Toast2.prototype, "position", void 0);
    __decorate24([
      Collection([{}], ButtonModelProps)
    ], Toast2.prototype, "buttons", void 0);
    __decorate24([
      Property(null)
    ], Toast2.prototype, "target", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "created", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "beforeSanitizeHtml", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "destroyed", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "open", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "beforeOpen", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "beforeClose", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "close", void 0);
    __decorate24([
      Event()
    ], Toast2.prototype, "click", void 0);
    Toast2 = __decorate24([
      NotifyPropertyChanges
    ], Toast2);
    return Toast2;
  }(Component2)
);
var ToastUtility;
(function(ToastUtility2) {
  function show(content, type, timeOut) {
    var toastContainerElement;
    if (document.querySelector("." + CONTAINER)) {
      toastContainerElement = document.querySelector("." + CONTAINER);
    } else {
      toastContainerElement = createElement("div", { "className": ROOT9 + " " + CONTAINER + " e-toast-util" });
      document.body.appendChild(toastContainerElement);
    }
    var untilToastsModel;
    if (typeof content === "string") {
      var cssClass2 = void 0;
      var icon = void 0;
      if (!isNullOrUndefined(type)) {
        switch (type) {
          case "Warning":
            cssClass2 = "e-toast-warning";
            icon = "e-toast-warning-icon";
            break;
          case "Success":
            cssClass2 = "e-toast-success";
            icon = "e-toast-success-icon";
            break;
          case "Error":
            cssClass2 = "e-toast-danger";
            icon = "e-toast-error-icon";
            break;
          case "Information":
            cssClass2 = "e-toast-info";
            icon = "e-toast-info-icon";
            break;
        }
      } else {
        cssClass2 = "";
        icon = "";
      }
      untilToastsModel = {
        content,
        cssClass: cssClass2,
        icon,
        timeOut: !isNullOrUndefined(timeOut) ? timeOut : 5e3
      };
    } else {
      untilToastsModel = content;
    }
    var toastObj = new Toast(untilToastsModel);
    toastObj.appendTo(toastContainerElement);
    toastObj.show();
    return toastObj;
  }
  ToastUtility2.show = show;
})(ToastUtility || (ToastUtility = {}));

// node_modules/@syncfusion/ej2-notifications/src/message/message.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Severity;
(function(Severity2) {
  Severity2["Normal"] = "Normal";
  Severity2["Success"] = "Success";
  Severity2["Info"] = "Info";
  Severity2["Warning"] = "Warning";
  Severity2["Error"] = "Error";
})(Severity || (Severity = {}));
var Variant;
(function(Variant2) {
  Variant2["Text"] = "Text";
  Variant2["Outlined"] = "Outlined";
  Variant2["Filled"] = "Filled";
})(Variant || (Variant = {}));
var MSG_ICON = "e-msg-icon";
var MSG_CLOSE_ICON = "e-msg-close-icon";
var MSG_CONTENT = "e-msg-content";
var MSG_CONTENT_CENTER = "e-content-center";
var RTL9 = "e-rtl";
var SUCCESS = "e-success";
var WARNING = "e-warning";
var INFO = "e-info";
var ERROR5 = "e-error";
var OUTLINED = "e-outlined";
var FILLED = "e-filled";
var HIDE2 = "e-hidden";
var Message = (
  /** @class */
  function(_super) {
    __extends28(Message2, _super);
    function Message2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.initialRender = true;
      return _this;
    }
    Message2.prototype.getModuleName = function() {
      return "message";
    };
    Message2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Message2.prototype.preRender = function() {
      var localeText = { close: "Close" };
      this.l10n = new L10n("message", localeText, this.locale);
    };
    Message2.prototype.render = function() {
      this.innerContent = this.element.innerHTML;
      this.element.innerHTML = "";
      this.msgElement = this.createElement("div", { className: "e-msg-content-wrap" });
      this.initialize();
      this.wireEvents();
      this.renderComplete();
      this.renderReactTemplates();
      this.initialRender = false;
    };
    Message2.prototype.initialize = function() {
      this.element.setAttribute("role", "alert");
      this.setCssClass();
      this.setIcon();
      this.setContent();
      this.setCloseIcon();
      this.setSeverity();
      this.setVariant();
      this.setVisible();
      if (this.enableRtl) {
        this.element.classList.add(RTL9);
      }
    };
    Message2.prototype.setIcon = function() {
      if (this.showIcon) {
        this.iconElement = this.createElement("span", { className: MSG_ICON });
        if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
          this.msgElement.appendChild(this.iconElement);
        } else {
          this.element.appendChild(this.iconElement);
        }
      }
    };
    Message2.prototype.setCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", { attrs: { type: "button", class: MSG_CLOSE_ICON } });
        this.element.appendChild(this.closeIcon);
        this.setTitle();
      }
    };
    Message2.prototype.setTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Message2.prototype.setContent = function() {
      this.txtElement = this.createElement("div", { className: MSG_CONTENT });
      if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
        this.msgElement.appendChild(this.txtElement);
        this.element.appendChild(this.msgElement);
      } else {
        this.element.appendChild(this.txtElement);
      }
      this.setTemplate();
    };
    Message2.prototype.setTemplate = function() {
      var templateFn;
      if (isNullOrUndefined(this.content) || this.content === "") {
        this.txtElement.innerHTML = this.innerContent;
      } else if (!isNullOrUndefined(this.content) && this.content !== "") {
        if (typeof this.content === "string" || typeof this.content !== "string") {
          if (this.isVue || typeof this.content !== "string") {
            templateFn = compile(this.content);
            if (!isNullOrUndefined(templateFn)) {
              var tempArr = templateFn({}, this, "content", this.element.id + "content", true);
              if (tempArr) {
                tempArr = Array.prototype.slice.call(tempArr);
                append(tempArr, this.txtElement);
                this.renderReactTemplates();
              }
            }
          } else {
            this.txtElement.innerHTML = this.content;
          }
        }
      }
    };
    Message2.prototype.setSeverity = function() {
      var classList2 = [SUCCESS, WARNING, INFO, ERROR5];
      removeClass([this.element], classList2);
      if (this.severity === "Success") {
        addClass([this.element], SUCCESS);
      } else if (this.severity === "Warning") {
        addClass([this.element], WARNING);
      } else if (this.severity === "Error") {
        addClass([this.element], ERROR5);
      } else if (this.severity === "Info") {
        addClass([this.element], INFO);
      }
    };
    Message2.prototype.setVariant = function() {
      var classList2 = [FILLED, OUTLINED];
      removeClass([this.element], classList2);
      if (this.variant === "Outlined") {
        addClass([this.element], OUTLINED);
      } else if (this.variant === "Filled") {
        addClass([this.element], FILLED);
      }
    };
    Message2.prototype.setCssClass = function(oldCssClass) {
      if (oldCssClass) {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Message2.prototype.setVisible = function() {
      if (!this.visible) {
        addClass([this.element], HIDE2);
        if (!this.initialRender) {
          this.trigger("closed", { event, isInteracted: false, element: this.element });
        }
      } else {
        removeClass([this.element], HIDE2);
      }
    };
    Message2.prototype.clickHandler = function(event2) {
      this.closeMessage(event2);
    };
    Message2.prototype.keyboardHandler = function(event2) {
      if (event2.keyCode === 32 || event2.keyCode === 13) {
        this.closeMessage(event2);
      }
    };
    Message2.prototype.closeMessage = function(event2) {
      addClass([this.element], HIDE2);
      this.setProperties({ visible: false }, true);
      var eventArgs = { event: event2, isInteracted: true, element: this.element };
      this.trigger("closed", eventArgs);
    };
    Message2.prototype.wireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.clickHandler, this);
        EventHandler.add(this.closeIcon, "keydown", this.keyboardHandler, this);
      }
    };
    Message2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.clickHandler);
        EventHandler.remove(this.closeIcon, "keydown", this.keyboardHandler);
      }
    };
    Message2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.setCssClass(oldProp.cssClass);
            break;
          case "content":
            this.txtElement.innerHTML = "";
            this.setTemplate();
            break;
          case "enableRtl":
            if (!this.enableRtl) {
              this.element.classList.remove(RTL9);
            } else {
              this.element.classList.add(RTL9);
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.setTitle();
            }
            break;
          case "showIcon":
            if (!this.showIcon && this.element.getElementsByClassName(MSG_ICON).length > 0) {
              detach(this.iconElement);
            }
            if (this.showIcon) {
              this.iconElement = this.createElement("span", { className: MSG_ICON });
              this.element.insertBefore(this.iconElement, this.txtElement);
            }
            break;
          case "showCloseIcon":
            if (!this.showCloseIcon && !isNullOrUndefined(this.closeIcon)) {
              this.unWireEvents();
              detach(this.closeIcon);
            } else {
              this.setCloseIcon();
              this.wireEvents();
            }
            break;
          case "severity":
            this.setSeverity();
            break;
          case "variant":
            this.setVariant();
            break;
          case "visible":
            this.setVisible();
            break;
        }
      }
    };
    Message2.prototype.destroy = function() {
      var cssClass2 = isNullOrUndefined(this.cssClass) ? [""] : this.cssClass.split(" ");
      var className = [SUCCESS, WARNING, INFO, ERROR5, RTL9, HIDE2, OUTLINED, FILLED];
      var classList2 = cssClass2.length === 1 && cssClass2[0] === "" ? className : className.concat(cssClass2);
      removeClass([this.element], classList2);
      this.element.removeAttribute("role");
      this.unWireEvents();
      if (!isNullOrUndefined(this.iconElement)) {
        detach(this.iconElement);
      }
      detach(this.txtElement);
      if (!isNullOrUndefined(this.closeIcon)) {
        detach(this.closeIcon);
      }
      _super.prototype.destroy.call(this);
    };
    __decorate25([
      Property(null)
    ], Message2.prototype, "content", void 0);
    __decorate25([
      Property("")
    ], Message2.prototype, "cssClass", void 0);
    __decorate25([
      Property(true)
    ], Message2.prototype, "showIcon", void 0);
    __decorate25([
      Property(false)
    ], Message2.prototype, "showCloseIcon", void 0);
    __decorate25([
      Property("Normal")
    ], Message2.prototype, "severity", void 0);
    __decorate25([
      Property("Text")
    ], Message2.prototype, "variant", void 0);
    __decorate25([
      Property(true)
    ], Message2.prototype, "visible", void 0);
    __decorate25([
      Event()
    ], Message2.prototype, "created", void 0);
    __decorate25([
      Event()
    ], Message2.prototype, "destroyed", void 0);
    __decorate25([
      Event()
    ], Message2.prototype, "closed", void 0);
    Message2 = __decorate25([
      NotifyPropertyChanges
    ], Message2);
    return Message2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-notifications/src/skeleton/skeleton.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cssClassName = {
  TEXTSHAPE: "e-skeleton-text",
  CIRCLESHAPE: "e-skeleton-circle",
  SQUARESHAPE: "e-skeleton-square",
  RECTANGLESHAPE: "e-skeleton-rectangle",
  WAVEEFFECT: "e-shimmer-wave",
  PULSEEFFECT: "e-shimmer-pulse",
  FADEEFFECT: "e-shimmer-fade",
  VISIBLENONE: "e-visible-none"
};
var SkeletonType;
(function(SkeletonType2) {
  SkeletonType2["Text"] = "Text";
  SkeletonType2["Circle"] = "Circle";
  SkeletonType2["Square"] = "Square";
  SkeletonType2["Rectangle"] = "Rectangle";
})(SkeletonType || (SkeletonType = {}));
var ShimmerEffect;
(function(ShimmerEffect2) {
  ShimmerEffect2["Wave"] = "Wave";
  ShimmerEffect2["Fade"] = "Fade";
  ShimmerEffect2["Pulse"] = "Pulse";
  ShimmerEffect2["None"] = "None";
})(ShimmerEffect || (ShimmerEffect = {}));
var Skeleton = (
  /** @class */
  function(_super) {
    __extends29(Skeleton2, _super);
    function Skeleton2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Skeleton2.prototype.getModuleName = function() {
      return "skeleton";
    };
    Skeleton2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Skeleton2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.updateCssClass();
      attributes(this.element, { role: "alert", "aria-busy": "true", "aria-live": "polite", "aria-label": this.label });
    };
    Skeleton2.prototype.render = function() {
      this.initialize();
    };
    Skeleton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
          case "height":
            this.updateDimension();
            break;
          case "shape":
            this.updateShape();
            break;
          case "shimmerEffect":
            this.updateEffect();
            break;
          case "visible":
            this.updateVisibility();
            break;
          case "label":
            this.element.setAttribute("aria-label", this.label);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            this.updateCssClass();
            break;
        }
      }
    };
    Skeleton2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      var attrs = ["role", "aria-live", "aria-busy", "aria-label"];
      var cssClass2 = [];
      if (this.cssClass) {
        cssClass2 = cssClass2.concat(this.cssClass.split(" "));
      }
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[parseInt(i.toString(), 10)]);
      }
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-skeleton-[^\s]+)/g) || []);
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-shimmer-[^\s]+)/g) || []);
      removeClass([this.element], cssClass2);
    };
    Skeleton2.prototype.initialize = function() {
      this.updateShape();
      this.updateEffect();
      this.updateVisibility();
    };
    Skeleton2.prototype.updateShape = function() {
      if (!isNullOrUndefined(this.shape)) {
        var shapeCss = cssClassName[this.shape.toUpperCase() + "SHAPE"];
        var removeCss = this.element.classList.value.match(/(e-skeleton-[^\s]+)/g) || [];
        this.updateDimension();
        if (removeCss) {
          removeClass([this.element], removeCss);
        }
        addClass([this.element], [shapeCss]);
      }
    };
    Skeleton2.prototype.updateDimension = function() {
      var width = !this.width && ["Text", "Rectangle"].indexOf(this.shape) > -1 ? "100%" : formatUnit(this.width);
      var height = ["Circle", "Square"].indexOf(this.shape) > -1 ? width : formatUnit(this.height);
      this.element.style.width = width;
      this.element.style.height = height;
    };
    Skeleton2.prototype.updateEffect = function() {
      var removeCss = this.element.classList.value.match(/(e-shimmer-[^\s]+)/g) || [];
      if (removeCss) {
        removeClass([this.element], removeCss);
      }
      if (!isNullOrUndefined(this.shimmerEffect)) {
        addClass([this.element], [cssClassName[this.shimmerEffect.toUpperCase() + "EFFECT"]]);
      }
    };
    Skeleton2.prototype.updateVisibility = function() {
      this.element.classList[this.visible ? "remove" : "add"](cssClassName.VISIBLENONE);
    };
    Skeleton2.prototype.updateCssClass = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    __decorate26([
      Property("")
    ], Skeleton2.prototype, "width", void 0);
    __decorate26([
      Property("")
    ], Skeleton2.prototype, "height", void 0);
    __decorate26([
      Property(true)
    ], Skeleton2.prototype, "visible", void 0);
    __decorate26([
      Property("Text")
    ], Skeleton2.prototype, "shape", void 0);
    __decorate26([
      Property("Wave")
    ], Skeleton2.prototype, "shimmerEffect", void 0);
    __decorate26([
      Property("Loading...")
    ], Skeleton2.prototype, "label", void 0);
    __decorate26([
      Property("")
    ], Skeleton2.prototype, "cssClass", void 0);
    Skeleton2 = __decorate26([
      NotifyPropertyChanges
    ], Skeleton2);
    return Skeleton2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate27 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldSettings3 = (
  /** @class */
  function(_super) {
    __extends30(FieldSettings4, _super);
    function FieldSettings4() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "text", void 0);
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "value", void 0);
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "iconCss", void 0);
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "groupBy", void 0);
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "htmlAttributes", void 0);
    __decorate27([
      Property()
    ], FieldSettings4.prototype, "disabled", void 0);
    return FieldSettings4;
  }(ChildProperty)
);
var dropDownBaseClasses = {
  root: "e-dropdownbase",
  rtl: "e-rtl",
  content: "e-content",
  selected: "e-active",
  hover: "e-hover",
  noData: "e-nodata",
  fixedHead: "e-fixed-head",
  focus: "e-item-focus",
  li: "e-list-item",
  group: "e-list-group-item",
  disabled: "e-disabled",
  grouping: "e-dd-group",
  virtualList: "e-list-item e-virtual-list"
};
var ITEMTEMPLATE_PROPERTY = "ItemTemplate";
var DISPLAYTEMPLATE_PROPERTY = "DisplayTemplate";
var SPINNERTEMPLATE_PROPERTY = "SpinnerTemplate";
var VALUETEMPLATE_PROPERTY = "ValueTemplate";
var GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var FOOTERTEMPLATE_PROPERTY = "FooterTemplate";
var NORECORDSTEMPLATE_PROPERTY = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE_PROPERTY = "ActionFailureTemplate";
var HIDE_GROUPLIST = "e-hide-group-header";
var DropDownBase = (
  /** @class */
  function(_super) {
    __extends30(DropDownBase2, _super);
    function DropDownBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.preventChange = false;
      _this.isPreventChange = false;
      _this.isDynamicDataChange = false;
      _this.addedNewItem = false;
      _this.isAddNewItemTemplate = false;
      _this.isRequesting = false;
      _this.isVirtualizationEnabled = false;
      _this.isCustomDataUpdated = false;
      _this.isAllowFiltering = false;
      _this.virtualizedItemsCount = 0;
      _this.isCheckBoxSelection = false;
      _this.totalItemCount = 0;
      _this.dataCount = 0;
      _this.remoteDataCount = -1;
      _this.isRemoteDataUpdated = false;
      _this.isIncrementalRequest = false;
      _this.itemCount = 30;
      _this.virtualListHeight = 0;
      _this.isVirtualScrolling = false;
      _this.isPreventScrollAction = false;
      _this.scrollPreStartIndex = 0;
      _this.isScrollActionTriggered = false;
      _this.previousStartIndex = 0;
      _this.isMouseScrollAction = false;
      _this.isKeyBoardAction = false;
      _this.isScrollChanged = false;
      _this.isUpwardScrolling = false;
      _this.startIndex = 0;
      _this.currentPageNumber = 0;
      _this.pageCount = 0;
      _this.isPreventKeyAction = false;
      _this.generatedDataObject = {};
      _this.skeletonCount = 32;
      _this.isVirtualTrackHeight = false;
      _this.virtualSelectAll = false;
      _this.incrementalQueryString = "";
      _this.incrementalEndIndex = 0;
      _this.incrementalStartIndex = 0;
      _this.incrementalPreQueryString = "";
      _this.isObjectCustomValue = false;
      _this.appendUncheckList = false;
      _this.getInitialData = false;
      _this.preventPopupOpen = true;
      _this.virtualSelectAllState = false;
      _this.CurrentEvent = null;
      _this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.selectedValueInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      return _this;
    }
    DropDownBase2.prototype.getPropObject = function(prop, newProp, oldProp) {
      var newProperty = new Object();
      var oldProperty = new Object();
      var propName = function(prop2) {
        return prop2;
      };
      newProperty[propName(prop)] = newProp[propName(prop)];
      oldProperty[propName(prop)] = oldProp[propName(prop)];
      var data = new Object();
      data.newProperty = newProperty;
      data.oldProperty = oldProperty;
      return data;
    };
    DropDownBase2.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
      var value = null;
      if (!isNullOrUndefined(this.listData)) {
        if (ignoreCase) {
          value = this.checkValueCase(text, true, ignoreAccent);
        } else {
          value = this.checkValueCase(text, false, ignoreAccent);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
      var _this = this;
      var value = null;
      if (isTextByValue) {
        value = text;
      }
      var dataSource = this.listData;
      var fields = this.fields;
      var type = this.typeOfData(dataSource).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
          var item = dataSource_1[_i];
          if (!isNullOrUndefined(item)) {
            if (ignoreAccent) {
              value = this.checkingAccent(String(item), text, ignoreCase);
            } else {
              if (ignoreCase) {
                if (this.checkIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase);
                }
              } else {
                if (this.checkNonIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                }
              }
            }
          }
        }
      } else {
        if (ignoreCase) {
          dataSource.filter(function(item2) {
            var itemValue = getValue(fields.value, item2);
            if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields.text, item2).toString(), text)) {
              value = getValue(fields.value, item2);
            }
          });
        } else {
          if (isTextByValue) {
            var compareValue_1 = null;
            compareValue_1 = value;
            dataSource.filter(function(item2) {
              var itemValue = getValue(fields.value, item2);
              if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue_1.toString()) {
                value = getValue(fields.text, item2);
              }
            });
          } else {
            dataSource.filter(function(item2) {
              if (_this.checkNonIgnoreCase(getValue(fields.text, item2), text)) {
                value = getValue(fields.value, item2);
              }
            });
          }
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkingAccent = function(item, text, ignoreCase) {
      var dataItem = DataUtil.ignoreDiacritics(String(item));
      var textItem = DataUtil.ignoreDiacritics(text.toString());
      var value = null;
      if (ignoreCase) {
        if (this.checkIgnoreCase(dataItem, textItem)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      } else {
        if (this.checkNonIgnoreCase(String(item), text)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkIgnoreCase = function(item, text) {
      return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
    };
    DropDownBase2.prototype.checkNonIgnoreCase = function(item, text) {
      return String(item) === text.toString() ? true : false;
    };
    DropDownBase2.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
      var value = null;
      var dataSource = this.listData;
      var type = this.typeOfData(dataSource).typeof;
      if (isTextByValue) {
        value = dataItem.toString();
      } else {
        if (ignoreCase) {
          value = type === "string" ? String(dataItem) : this.getFormattedValue(String(dataItem));
        } else {
          value = type === "string" ? typedText : this.getFormattedValue(typedText);
        }
      }
      return value;
    };
    DropDownBase2.prototype.templateCompiler = function(baseTemplate) {
      var checkTemplate = false;
      if (typeof baseTemplate !== "function" && baseTemplate) {
        try {
          checkTemplate = selectAll(baseTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownBase2.prototype.l10nUpdate = function(actionFailure2) {
      var ele = this.getModuleName() === "listbox" ? this.ulElement : this.list;
      if (!isNullOrUndefined(this.noRecordsTemplate) && this.noRecordsTemplate !== "No records found" || this.actionFailureTemplate !== "Request failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var compiledString = void 0;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        ele.innerHTML = "";
        var tempaltecheck = this.templateCompiler(template);
        if (typeof template !== "function" && tempaltecheck) {
          compiledString = compile(select(template, document).innerHTML.trim());
        } else {
          compiledString = compile(template);
        }
        var templateName = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var noDataElement = void 0;
        if (this.isReact && typeof template === "function") {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null);
        } else {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);
        }
        if (noDataElement && noDataElement.length > 0) {
          for (var i = 0; i < noDataElement.length; i++) {
            if (this.getModuleName() === "listbox" && templateName === "noRecordsTemplate") {
              if (noDataElement[i].nodeName === "#text") {
                var liElem = this.createElement("li");
                liElem.textContent = noDataElement[i].textContent;
                liElem.classList.add("e-list-nrt");
                liElem.setAttribute("role", "option");
                ele.appendChild(liElem);
              } else {
                noDataElement[i].classList.add("e-list-nr-template");
                ele.appendChild(noDataElement[i]);
              }
            } else {
              if (noDataElement[i] instanceof HTMLElement || noDataElement[i] instanceof Text) {
                ele.appendChild(noDataElement[i]);
              }
            }
          }
        }
        this.renderReactTemplates();
      } else {
        var l10nLocale = { noRecordsTemplate: "No records found", actionFailureTemplate: "Request failed" };
        var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);
        if (componentLocale.getConstant("actionFailureTemplate") !== "" || componentLocale.getConstant("noRecordsTemplate") !== "") {
          this.l10n = componentLocale;
        } else {
          this.l10n = new L10n(this.getModuleName() === "listbox" ? "listbox" : this.getModuleName() === "mention" ? "mention" : "dropdowns", l10nLocale, this.locale);
        }
        var content = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
        if (this.getModuleName() === "listbox") {
          var liElem = this.createElement("li");
          liElem.textContent = content;
          ele.appendChild(liElem);
          liElem.classList.add("e-list-nrt");
          liElem.setAttribute("role", "option");
        } else {
          if (!isNullOrUndefined(ele)) {
            ele.innerHTML = content;
          }
        }
      }
    };
    DropDownBase2.prototype.checkAndResetCache = function() {
      if (this.isVirtualizationEnabled) {
        this.generatedDataObject = {};
        this.virtualItemStartIndex = this.virtualItemEndIndex = 0;
        this.viewPortInfo = {
          currentPageNumber: null,
          direction: null,
          sentinelInfo: {},
          offsets: {},
          startIndex: 0,
          endIndex: this.itemCount
        };
        this.selectedValueInfo = null;
      }
    };
    DropDownBase2.prototype.updateIncrementalInfo = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.isIncrementalRequest = true;
      this.resetList(this.dataSource, this.fields, this.query);
      this.isIncrementalRequest = false;
    };
    DropDownBase2.prototype.updateIncrementalView = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.resetList(this.dataSource, this.fields, this.query);
      this.UpdateSkeleton();
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
    };
    DropDownBase2.prototype.updateVirtualItemIndex = function() {
      this.virtualItemStartIndex = this.viewPortInfo.startIndex;
      this.virtualItemEndIndex = this.viewPortInfo.endIndex;
      this.virtualListInfo = this.viewPortInfo;
    };
    DropDownBase2.prototype.getFilteringSkeletonCount = function() {
      var currentSkeletonCount = this.skeletonCount;
      this.getSkeletonCount(true);
      this.skeletonCount = this.dataCount > this.itemCount * 2 ? this.skeletonCount : 0;
      var skeletonUpdated = true;
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") && this.totalItemCount < this.itemCount * 2) {
        this.skeletonCount = 0;
        skeletonUpdated = false;
      }
      if (!this.list.classList.contains(dropDownBaseClasses.noData)) {
        var isSkeletonCountChange = currentSkeletonCount !== this.skeletonCount;
        if (currentSkeletonCount !== this.skeletonCount && skeletonUpdated) {
          this.UpdateSkeleton(true, Math.abs(currentSkeletonCount - this.skeletonCount));
        } else {
          this.UpdateSkeleton();
        }
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        } else if (!this.list.querySelector(".e-virtual-ddl") && this.skeletonCount > 0 && this.list.querySelector(".e-dropdownbase")) {
          var virualElement = this.createElement("div", {
            id: this.element.id + "_popup",
            className: "e-virtual-ddl",
            styles: this.GetVirtualTrackHeight()
          });
          this.list.querySelector(".e-dropdownbase").appendChild(virualElement);
        }
        if (this.list.getElementsByClassName("e-virtual-ddl-content").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownBase2.prototype.getSkeletonCount = function(retainSkeleton) {
      this.virtualListHeight = this.listContainerHeight != null ? parseInt(this.listContainerHeight, 10) : this.virtualListHeight;
      var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
      this.skeletonCount = actualCount * 4 < this.itemCount ? this.itemCount : actualCount * 4;
      this.itemCount = retainSkeleton ? this.itemCount : this.skeletonCount;
      this.virtualItemCount = this.itemCount;
      this.skeletonCount = Math.floor(this.skeletonCount / 2);
    };
    DropDownBase2.prototype.GetVirtualTrackHeight = function() {
      var height = this.totalItemCount === this.viewPortInfo.endIndex ? this.totalItemCount * this.listItemHeight - this.itemCount * this.listItemHeight : this.totalItemCount * this.listItemHeight;
      height = this.isVirtualTrackHeight ? 0 : height;
      var heightDimension = "height: " + (height - this.itemCount * this.listItemHeight) + "px;";
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") && this.skeletonCount === 0) {
        return "height: 0px;";
      }
      return heightDimension;
    };
    DropDownBase2.prototype.getTransformValues = function() {
      var translateY = this.viewPortInfo.startIndex * this.listItemHeight;
      translateY = translateY - this.skeletonCount * this.listItemHeight;
      translateY = this.viewPortInfo.startIndex === 0 && this.listData && this.listData.length === 0 || this.skeletonCount === 0 ? 0 : translateY;
      var styleText = "transform: translate(0px, " + translateY + "px);";
      return styleText;
    };
    DropDownBase2.prototype.UpdateSkeleton = function(isSkeletonCountChange, skeletonCount) {
      var isContainSkeleton = this.list.querySelector(".e-virtual-ddl-content");
      var isContainVirtualList = this.list.querySelector(".e-virtual-list");
      if (isContainSkeleton && (!isContainVirtualList || isSkeletonCountChange) && this.isVirtualizationEnabled) {
        var totalSkeletonCount = isSkeletonCountChange ? skeletonCount : this.skeletonCount;
        for (var i = 0; i < totalSkeletonCount; i++) {
          var liElement = this.createElement("li", { className: dropDownBaseClasses.virtualList, styles: "overflow: inherit" });
          if (this.isVirtualizationEnabled && this.itemTemplate) {
            liElement.style.height = this.listItemHeight + "px";
          }
          var skeleton = new Skeleton({
            shape: "Text",
            height: "10px",
            width: "95%",
            cssClass: "e-skeleton-text"
          });
          skeleton.appendTo(this.createElement("div"));
          liElement.appendChild(skeleton.element);
          isContainSkeleton.firstChild && isContainSkeleton.firstChild.insertBefore(liElement, isContainSkeleton.firstChild.children[0]);
        }
      }
    };
    DropDownBase2.prototype.getLocaleName = function() {
      return "drop-down-base";
    };
    DropDownBase2.prototype.getTextByValue = function(value) {
      var text = this.checkValueCase(value, false, false, true);
      return text;
    };
    DropDownBase2.prototype.getFormattedValue = function(value) {
      if (this.listData && this.listData.length) {
        var item = void 0;
        if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {
          item = this.typeOfData(this.properties.value);
        } else {
          item = this.typeOfData(this.listData);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "number" || item.typeof === "number") {
          return parseFloat(value);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "boolean" || item.typeof === "boolean") {
          return value === "true" || "" + value === "true";
        }
      }
      return value;
    };
    DropDownBase2.prototype.setEnableRtl = function() {
      if (!isNullOrUndefined(this.enableRtlElements)) {
        if (this.list) {
          this.enableRtlElements.push(this.list);
        }
        if (this.enableRtl) {
          addClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        } else {
          removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        }
      }
    };
    DropDownBase2.prototype.initialize = function(e) {
      this.bindEvent = true;
      this.preventPopupOpen = true;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;
      if (this.element.tagName === "UL") {
        var jsonElement = ListBase.createJsonFromElement(this.element);
        this.setProperties({ fields: { text: "text", value: "text" } }, true);
        this.resetList(jsonElement, this.fields);
      } else if (this.element.tagName === "SELECT") {
        var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;
        if (!dataSource) {
          this.renderItemsBySelect();
        } else if (this.isDynamicDataChange) {
          this.setListData(this.dataSource, this.fields, this.query);
        }
      } else {
        this.setListData(this.dataSource, this.fields, this.query, e);
      }
    };
    DropDownBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownBase2.prototype.updateDataAttribute = function(value) {
      var invalidAttr = ["class", "style", "id", "type", "aria-expanded", "aria-autocomplete", "aria-readonly"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === "dropdownlist" && this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownBase2.prototype.renderItemsBySelect = function() {
      var element = this.element;
      var fields = { value: "value", text: "text" };
      var jsonElement = [];
      var group = element.querySelectorAll("select>optgroup");
      var option = element.querySelectorAll("select>option");
      this.getJSONfromOption(jsonElement, option, fields);
      if (group.length) {
        for (var i = 0; i < group.length; i++) {
          var item = group[i];
          var optionGroup = {};
          optionGroup[fields.text] = item.label;
          optionGroup.isHeader = true;
          var child = item.querySelectorAll("option");
          jsonElement.push(optionGroup);
          this.getJSONfromOption(jsonElement, child, fields);
        }
        element.querySelectorAll("select>option");
      }
      this.updateFields(fields.text, fields.value, this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss, this.fields.disabled);
      this.resetList(jsonElement, fields);
    };
    DropDownBase2.prototype.updateFields = function(text, value, groupBy, htmlAttributes, iconCss, disabled) {
      var field = {
        "fields": {
          text,
          value,
          groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,
          htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,
          iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss,
          disabled: !isNullOrUndefined(disabled) ? disabled : this.fields && this.fields.disabled
        }
      };
      this.setProperties(field, true);
    };
    DropDownBase2.prototype.getJSONfromOption = function(items, options, fields) {
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        var json = {};
        json[fields.text] = option.innerText;
        json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ? option.getAttribute(fields.value) : option.innerText;
        items.push(json);
      }
    };
    DropDownBase2.prototype.preRender = function() {
      this.scrollTimer = -1;
      this.enableRtlElements = [];
      this.isRequested = false;
      this.isDataFetched = false;
      this.itemTemplateId = "" + this.element.id + ITEMTEMPLATE_PROPERTY;
      this.displayTemplateId = "" + this.element.id + DISPLAYTEMPLATE_PROPERTY;
      this.spinnerTemplateId = "" + this.element.id + SPINNERTEMPLATE_PROPERTY;
      this.valueTemplateId = "" + this.element.id + VALUETEMPLATE_PROPERTY;
      this.groupTemplateId = "" + this.element.id + GROUPTEMPLATE_PROPERTY;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE_PROPERTY;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE_PROPERTY;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE_PROPERTY;
    };
    DropDownBase2.prototype.setListData = function(dataSource, fields, query, event2) {
      var _this = this;
      fields = fields ? fields : this.fields;
      var ulElement;
      this.isActive = true;
      var eventArgs = { cancel: false, data: dataSource, query };
      this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;
      if (!this.isRequesting) {
        this.trigger("actionBegin", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            _this.isRequesting = true;
            _this.showSpinner();
            if (dataSource instanceof DataManager) {
              _this.isRequested = true;
              var isWhereExist_1 = false;
              if (_this.isDataFetched) {
                _this.emptyDataRequest(fields);
                return;
              }
              eventArgs2.data.executeQuery(_this.getQuery(eventArgs2.query)).then(function(e) {
                _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
                var isReOrder2 = true;
                if (!_this.virtualSelectAll) {
                  var newQuery2 = _this.getQuery(eventArgs2.query);
                  for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                    if (newQuery2.queries[queryElements2].fn === "onWhere") {
                      isWhereExist_1 = true;
                    }
                  }
                  if (_this.isVirtualizationEnabled && (e.count != 0 && e.count < _this.itemCount * 2)) {
                    if (newQuery2) {
                      for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                        if (newQuery2.queries[queryElements2].fn === "onTake") {
                          newQuery2.queries[queryElements2].e.nos = e.count;
                        }
                        if (_this.getModuleName() === "multiselect" && (newQuery2.queries[queryElements2].e.condition == "or" || newQuery2.queries[queryElements2].e.operator == "equal")) {
                          isReOrder2 = false;
                        }
                      }
                    }
                  } else {
                    _this.isVirtualTrackHeight = false;
                    if (newQuery2) {
                      for (var queryElements2 = 0; queryElements2 < newQuery2.queries.length; queryElements2++) {
                        if (_this.getModuleName() === "multiselect" && (newQuery2.queries[queryElements2].e && newQuery2.queries[queryElements2].e.condition == "or" || newQuery2.queries[queryElements2].e && newQuery2.queries[queryElements2].e.operator == "equal")) {
                          isReOrder2 = false;
                        }
                      }
                    }
                  }
                }
                if (isReOrder2) {
                  _this.dataCount = _this.totalItemCount = e.count;
                }
                _this.trigger("actionComplete", e, function(e2) {
                  if (!e2.cancel) {
                    _this.isRequesting = false;
                    var listItems2 = e2.result;
                    if (_this.isIncrementalRequest) {
                      ulElement = _this.renderItems(listItems2, fields);
                      return;
                    }
                    if (!_this.isVirtualizationEnabled && listItems2.length === 0 || _this.isVirtualizationEnabled && listItems2.length === 0 && !isWhereExist_1) {
                      _this.isDataFetched = true;
                    }
                    if (!isWhereExist_1) {
                      _this.remoteDataCount = e2.count;
                    }
                    _this.dataCount = !_this.virtualSelectAll ? e2.count : _this.dataCount;
                    _this.totalItemCount = !_this.virtualSelectAll ? e2.count : _this.totalItemCount;
                    ulElement = _this.renderItems(listItems2, fields);
                    _this.appendUncheckList = false;
                    _this.onActionComplete(ulElement, listItems2, e2);
                    if (_this.groupTemplate) {
                      _this.renderGroupTemplate(ulElement);
                    }
                    _this.isRequested = false;
                    _this.bindChildItems(listItems2, ulElement, fields, e2);
                    if (_this.getInitialData) {
                      _this.setListData(dataSource, fields, query, event2);
                      _this.getInitialData = false;
                      _this.preventPopupOpen = false;
                      return;
                    }
                    if (_this.isVirtualizationEnabled && _this.setCurrentView) {
                      _this.notify("setCurrentViewDataAsync", {
                        module: "VirtualScroll"
                      });
                    }
                    if (_this.keyboardEvent != null) {
                      _this.handleVirtualKeyboardActions(_this.keyboardEvent, _this.pageCount);
                    }
                    if (_this.isVirtualizationEnabled) {
                      _this.getFilteringSkeletonCount();
                    }
                    if (_this.virtualSelectAll && _this.virtualSelectAllData) {
                      _this.virtualSelectionAll(_this.virtualSelectAllState, _this.liCollections, _this.CurrentEvent);
                      _this.virtualSelectAllState = false;
                      _this.CurrentEvent = null;
                      _this.virtualSelectAll = false;
                    }
                  }
                });
              }).catch(function(e) {
                _this.isRequested = false;
                _this.isRequesting = false;
                _this.onActionFailure(e);
                _this.hideSpinner();
              });
            } else {
              _this.isRequesting = false;
              var isReOrder = true;
              var listItems = void 0;
              if (_this.isVirtualizationEnabled && !_this.virtualGroupDataSource && _this.fields.groupBy) {
                var data = new DataManager(_this.dataSource).executeLocal(new Query().group(_this.fields.groupBy));
                _this.virtualGroupDataSource = data.records;
              }
              var dataManager = _this.isVirtualizationEnabled && _this.virtualGroupDataSource && !_this.isCustomDataUpdated ? new DataManager(_this.virtualGroupDataSource) : new DataManager(eventArgs2.data);
              listItems = _this.getQuery(eventArgs2.query).executeLocal(dataManager);
              if (!_this.virtualSelectAll) {
                var newQuery = _this.getQuery(eventArgs2.query);
                if (_this.isVirtualizationEnabled && (listItems.count != 0 && listItems.count < _this.itemCount * 2)) {
                  if (newQuery) {
                    for (var queryElements = 0; queryElements < newQuery.queries.length; queryElements++) {
                      if (newQuery.queries[queryElements].fn === "onTake") {
                        newQuery.queries[queryElements].e.nos = listItems.count;
                        listItems = newQuery.executeLocal(dataManager);
                      }
                      if (_this.getModuleName() === "multiselect" && (newQuery.queries[queryElements].e.condition == "or" || newQuery.queries[queryElements].e.operator == "equal")) {
                        isReOrder = false;
                      }
                    }
                    if (isReOrder) {
                      listItems = newQuery.executeLocal(dataManager);
                      _this.isVirtualTrackHeight = !(_this.dataSource instanceof DataManager) && !_this.isCustomDataUpdated ? true : false;
                    }
                  }
                } else {
                  _this.isVirtualTrackHeight = false;
                  if (newQuery) {
                    for (var queryElements = 0; queryElements < newQuery.queries.length; queryElements++) {
                      if (_this.getModuleName() === "multiselect" && (newQuery.queries[queryElements].e && newQuery.queries[queryElements].e.condition == "or" || newQuery.queries[queryElements].e && newQuery.queries[queryElements].e.operator == "equal")) {
                        isReOrder = false;
                      }
                    }
                  }
                }
              }
              if (isReOrder && (!(_this.dataSource instanceof DataManager) && !_this.isCustomDataUpdated) && !_this.virtualSelectAll) {
                _this.dataCount = _this.totalItemCount = _this.virtualSelectAll ? listItems.length : listItems.count;
              }
              listItems = _this.isVirtualizationEnabled ? listItems.result : listItems;
              var localDataArgs = { cancel: false, result: listItems };
              _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
              _this.trigger("actionComplete", localDataArgs, function(localDataArgs2) {
                if (_this.isIncrementalRequest) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  return;
                }
                if (!localDataArgs2.cancel) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  _this.onActionComplete(ulElement, localDataArgs2.result, event2);
                  if (_this.groupTemplate) {
                    _this.renderGroupTemplate(ulElement);
                  }
                  _this.bindChildItems(localDataArgs2.result, ulElement, fields);
                  if (_this.getInitialData) {
                    _this.getInitialData = false;
                    _this.preventPopupOpen = false;
                    return;
                  }
                  setTimeout(function() {
                    if (_this.getModuleName() === "multiselect" && _this.itemTemplate != null && (ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || _this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0))) {
                      _this.updateDataList();
                    }
                  });
                }
              });
            }
          }
        });
      }
    };
    DropDownBase2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
    };
    DropDownBase2.prototype.updatePopupState = function() {
    };
    DropDownBase2.prototype.virtualSelectionAll = function(state, li, event2) {
    };
    DropDownBase2.prototype.updateRemoteData = function() {
      this.setListData(this.dataSource, this.fields, this.query);
    };
    DropDownBase2.prototype.bindChildItems = function(listItems, ulElement, fields, e) {
      var _this = this;
      if (listItems.length >= 100 && this.getModuleName() === "autocomplete") {
        setTimeout(function() {
          var childNode = _this.remainingItems(_this.sortedData, fields);
          append(childNode, ulElement);
          _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
          _this.updateListValues();
          _this.raiseDataBound(listItems, e);
        }, 0);
      } else {
        this.raiseDataBound(listItems, e);
      }
    };
    DropDownBase2.prototype.isObjectInArray = function(objectToFind, array) {
      return array.some(function(item) {
        return Object.keys(objectToFind).every(function(key) {
          return item.hasOwnProperty(key) && item[key] === objectToFind[key];
        });
      });
    };
    DropDownBase2.prototype.updateListValues = function() {
    };
    DropDownBase2.prototype.findListElement = function(list, findNode, attribute, value) {
      var liElement = null;
      if (list) {
        var listArr = [].slice.call(list.querySelectorAll(findNode));
        for (var index = 0; index < listArr.length; index++) {
          if (listArr[index].getAttribute(attribute) === value + "") {
            liElement = listArr[index];
            break;
          }
        }
      }
      return liElement;
    };
    DropDownBase2.prototype.raiseDataBound = function(listItems, e) {
      this.hideSpinner();
      var dataBoundEventArgs = {
        items: listItems,
        e
      };
      this.trigger("dataBound", dataBoundEventArgs);
    };
    DropDownBase2.prototype.remainingItems = function(dataSource, fields) {
      var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));
      if (this.itemTemplate) {
        var listElements = this.templateListItem(spliceData, fields);
        return [].slice.call(listElements.childNodes);
      }
      var type = this.typeOfData(spliceData).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);
      }
      return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);
    };
    DropDownBase2.prototype.emptyDataRequest = function(fields) {
      var listItems = [];
      this.onActionComplete(this.renderItems(listItems, fields), listItems);
      this.isRequested = false;
      this.isRequesting = false;
      this.hideSpinner();
    };
    DropDownBase2.prototype.showSpinner = function() {
    };
    DropDownBase2.prototype.hideSpinner = function() {
    };
    DropDownBase2.prototype.onActionFailure = function(e) {
      this.liCollections = [];
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      if (!isNullOrUndefined(this.list)) {
        addClass([this.list], dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.onActionComplete = function(ulElement, list, e) {
      this.listData = list;
      if (this.isVirtualizationEnabled && !this.isCustomDataUpdated && !this.virtualSelectAll) {
        this.notify("setGeneratedData", {
          module: "VirtualScroll"
        });
      }
      if (this.getModuleName() !== "listbox") {
        ulElement.setAttribute("tabindex", "0");
      }
      if (this.isReact) {
        this.clearTemplate(["itemTemplate", "groupTemplate", "actionFailureTemplate", "noRecordsTemplate"]);
      }
      if (!this.isVirtualizationEnabled) {
        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
      }
      if (this.getModuleName() === "multiselect" && this.properties.allowCustomValue && this.fields.groupBy) {
        for (var i = 0; i < ulElement.childElementCount; i++) {
          if (ulElement.children[i].classList.contains("e-list-group-item")) {
            if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML == "") {
              addClass([ulElement.children[i]], HIDE_GROUPLIST);
            }
          }
          if (ulElement.children[0].classList.contains("e-hide-group-header")) {
            setStyleAttribute(ulElement.children[1], { zIndex: 11 });
          }
        }
      }
      if (!isNullOrUndefined(this.list)) {
        if (!this.isVirtualizationEnabled) {
          this.list.innerHTML = "";
          this.list.appendChild(ulElement);
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.postRender(this.list, list, this.bindEvent);
        }
      }
    };
    DropDownBase2.prototype.postRender = function(listElement, list, bindEvent) {
      if (this.fields.disabled) {
        var liCollections = listElement.querySelectorAll("." + dropDownBaseClasses.li);
        for (var index = 0; index < liCollections.length; index++) {
          if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.disabled]) {
            this.disableListItem(liCollections[index]);
          }
        }
      }
      var focusItem = this.fields.disabled ? listElement.querySelector("." + dropDownBaseClasses.li + ":not(.e-disabled") : listElement.querySelector("." + dropDownBaseClasses.li);
      var selectedItem = listElement.querySelector("." + dropDownBaseClasses.selected);
      if (focusItem && !selectedItem) {
        focusItem.classList.add(dropDownBaseClasses.focus);
      }
      if (list.length <= 0) {
        this.l10nUpdate();
        addClass([listElement], dropDownBaseClasses.noData);
      } else {
        listElement.classList.remove(dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.getQuery = function(query) {
      return query ? query : this.query ? this.query : new Query();
    };
    DropDownBase2.prototype.updateVirtualizationProperties = function(itemCount, filtering, isCheckbox) {
      this.isVirtualizationEnabled = true;
      this.virtualizedItemsCount = itemCount;
      this.isAllowFiltering = filtering;
      this.isCheckBoxSelection = isCheckbox;
    };
    DropDownBase2.prototype.renderGroupTemplate = function(listEle) {
      if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector("." + dropDownBaseClasses.group)) {
        var dataSource = this.dataSource;
        var option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };
        var headerItems = listEle.querySelectorAll("." + dropDownBaseClasses.group);
        var groupcheck = this.templateCompiler(this.groupTemplate);
        if (typeof this.groupTemplate !== "function" && groupcheck) {
          var groupValue = select(this.groupTemplate, document).innerHTML.trim();
          var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        } else {
          var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownBase2.prototype.createListItems = function(dataSource, fields) {
      if (dataSource) {
        if (fields.groupBy || this.element.querySelector("optgroup")) {
          if (fields.groupBy) {
            if (this.sortOrder !== "None") {
              dataSource = this.getSortedDataSource(dataSource);
            }
            dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
          }
          addClass([this.list], dropDownBaseClasses.grouping);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }
        var options = this.listOption(dataSource, fields);
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        this.sortedData = dataSource;
        return ListBase.createList(this.createElement, this.getModuleName() === "autocomplete" ? spliceData : dataSource, options, true, this);
      }
      return null;
    };
    DropDownBase2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;
      var options = fields.text !== null || fields.value !== null ? {
        fields: fieldValues,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      return extend({}, options, fields, true);
    };
    DropDownBase2.prototype.setFloatingHeader = function(e) {
      if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
        if (isNullOrUndefined(this.fixedHeaderElement)) {
          this.fixedHeaderElement = this.createElement("div", { className: dropDownBaseClasses.fixedHead });
          if (!isNullOrUndefined(this.list) && !this.list.querySelector("li").classList.contains(dropDownBaseClasses.group)) {
            this.fixedHeaderElement.style.display = "none";
          }
          if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {
            prepend([this.fixedHeaderElement], this.list);
          }
          this.setFixedHeader();
        }
        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === "0") {
          this.setFixedHeader();
        }
        this.scrollStop(e);
      }
    };
    DropDownBase2.prototype.scrollStop = function(e, isDownkey) {
      var target = !isNullOrUndefined(e) ? e.target : this.list;
      var liHeight = parseInt(getComputedStyle(this.getValidLi(), null).getPropertyValue("height"), 10);
      var topIndex = Math.round(target.scrollTop / liHeight);
      var liCollections = this.list.querySelectorAll("li:not(.e-hide-listitem)");
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
      var count = 0;
      var isCount = false;
      for (var i = topIndex; i > -1; i--) {
        var index = this.isVirtualizationEnabled ? i + virtualListCount : i;
        if (this.isVirtualizationEnabled) {
          if (isCount) {
            count++;
          }
          if (this.fixedHeaderElement && this.updateGroupHeader(index, liCollections, target)) {
            break;
          }
          if (isDownkey) {
            if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.selected) && this.getModuleName() !== "autocomplete" || !isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.focus) && this.getModuleName() === "autocomplete") {
              count++;
              isCount = true;
            }
          }
        } else {
          if (this.updateGroupHeader(index, liCollections, target)) {
            break;
          }
        }
      }
    };
    DropDownBase2.prototype.getPageCount = function(returnExactCount) {
      var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
      var pageCount = Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
      return returnExactCount ? pageCount : Math.round(pageCount);
    };
    DropDownBase2.prototype.updateGroupHeader = function(index, liCollections, target) {
      if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.group)) {
        this.updateGroupFixedHeader(liCollections[index], target);
        return true;
      } else {
        this.fixedHeaderElement.style.display = "none";
        this.fixedHeaderElement.style.top = "none";
        return false;
      }
    };
    DropDownBase2.prototype.updateGroupFixedHeader = function(element, target) {
      if (this.fixedHeaderElement) {
        if (!isNullOrUndefined(element.innerHTML)) {
          this.fixedHeaderElement.innerHTML = element.innerHTML;
        }
        this.fixedHeaderElement.style.position = "fixed";
        this.fixedHeaderElement.style.top = this.list.parentElement.offsetTop + this.list.offsetTop - window.scrollY + "px";
        this.fixedHeaderElement.style.display = "block";
      }
    };
    DropDownBase2.prototype.getValidLi = function() {
      if (this.isVirtualizationEnabled) {
        return this.liCollections[0].classList.contains("e-virtual-list") ? this.liCollections[this.skeletonCount] : this.liCollections[0];
      }
      return this.liCollections[0];
    };
    DropDownBase2.prototype.renderItems = function(listData, fields, isCheckBoxUpdate) {
      var ulElement;
      if (this.itemTemplate && listData) {
        var dataSource = listData;
        if (dataSource && fields.groupBy) {
          if (this.sortOrder !== "None") {
            dataSource = this.getSortedDataSource(dataSource);
          }
          dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }
        this.sortedData = dataSource;
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        ulElement = this.templateListItem(this.getModuleName() === "autocomplete" ? spliceData : dataSource, fields);
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && this.getModuleName() === "autocomplete") {
            virtualUlElement.replaceChild(ulElement, oldUlElement);
            var reOrderList = this.list.querySelectorAll(".e-reorder");
            if (this.list.querySelector(".e-virtual-ddl-content") && reOrderList && reOrderList.length > 0 && !isCheckBoxUpdate) {
              this.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList[0]);
            }
            this.updateListElements(listData);
          } else if (!virtualUlElement) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      } else {
        if (this.getModuleName() === "multiselect" && this.virtualSelectAll) {
          this.virtualSelectAllData = listData;
          listData = listData.slice(this.virtualItemStartIndex, this.virtualItemEndIndex);
        }
        ulElement = this.createListItems(listData, fields);
        if (this.isIncrementalRequest) {
          this.incrementalLiCollections = ulElement.querySelectorAll("." + dropDownBaseClasses.li);
          this.incrementalUlElement = ulElement;
          this.incrementalListData = listData;
          return ulElement;
        }
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent:not(.e-reorder)");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          var isRemovedUlelement = false;
          if (!oldUlElement && this.list.querySelector(".e-list-parent.e-reorder")) {
            oldUlElement = this.list.querySelector(".e-list-parent.e-reorder");
          }
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && (this.getModuleName() === "autocomplete" || this.getModuleName() === "multiselect") || isRemovedUlelement) {
            if (!this.appendUncheckList) {
              virtualUlElement.replaceChild(ulElement, oldUlElement);
            } else {
              virtualUlElement.appendChild(ulElement);
            }
            this.updateListElements(listData);
          } else if (!virtualUlElement || !virtualUlElement.firstChild) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      }
      return ulElement;
    };
    DropDownBase2.prototype.createVirtualContent = function() {
      if (!this.list.querySelector(".e-virtual-ddl-content")) {
        this.list.appendChild(this.createElement("div", {
          className: "e-virtual-ddl-content"
        }));
      }
    };
    DropDownBase2.prototype.updateListElements = function(listData) {
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
      this.listData = listData;
      this.postRender(this.list, listData, this.bindEvent);
    };
    DropDownBase2.prototype.templateListItem = function(dataSource, fields) {
      var option = this.listOption(dataSource, fields);
      option.templateID = this.itemTemplateId;
      option.isStringTemplate = this.isStringTemplate;
      var itemcheck = this.templateCompiler(this.itemTemplate);
      if (typeof this.itemTemplate !== "function" && itemcheck) {
        var itemValue = select(this.itemTemplate, document).innerHTML.trim();
        return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);
      } else {
        return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);
      }
    };
    DropDownBase2.prototype.typeOfData = function(items) {
      var item = { typeof: null, item: null };
      for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {
        if (!isNullOrUndefined(items[i])) {
          var listDataType = typeof items[i] === "string" || typeof items[i] === "number" || typeof items[i] === "boolean";
          var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : "value", items[i]));
          if (!isNullData) {
            return item = { typeof: typeof items[i], item: items[i] };
          }
        }
      }
      return item;
    };
    DropDownBase2.prototype.setFixedHeader = function() {
      if (!isNullOrUndefined(this.list)) {
        this.list.parentElement.style.display = "block";
      }
      var borderWidth = 0;
      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-width"), 10);
        if (isNaN(borderWidth)) {
          var borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-top-width"), 10);
          var borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-bottom-width"), 10);
          var borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-left-width"), 10);
          var borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-right-width"), 10);
          borderWidth = borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth;
        }
      }
      if (!isNullOrUndefined(this.liCollections)) {
        var liWidth = this.getValidLi().offsetWidth - borderWidth;
        this.fixedHeaderElement.style.width = liWidth.toString() + "px";
      }
      setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });
      var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group + ":not(.e-hide-listitem)");
      this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
    };
    DropDownBase2.prototype.getSortedDataSource = function(dataSource) {
      if (dataSource && this.sortOrder !== "None") {
        var textField = this.fields.text ? this.fields.text : "text";
        if (this.typeOfData(dataSource).typeof === "string" || this.typeOfData(dataSource).typeof === "number" || this.typeOfData(dataSource).typeof === "boolean") {
          textField = "";
        }
        dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
      }
      return dataSource;
    };
    DropDownBase2.prototype.getIndexByValue = function(value) {
      var index;
      var listItems = [];
      if (this.fields.disabled && this.getModuleName() === "multiselect" && this.liCollections) {
        listItems = this.liCollections;
      } else {
        listItems = this.getItems();
      }
      for (var i = 0; i < listItems.length; i++) {
        if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
          index = i;
          break;
        }
      }
      return index;
    };
    DropDownBase2.prototype.getIndexByValueFilter = function(value, ulElement) {
      var index;
      if (!ulElement) {
        return null;
      }
      var listItems = ulElement.querySelectorAll("li:not(.e-list-group-item)");
      if (listItems) {
        for (var i = 0; i < listItems.length; i++) {
          if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
            index = i;
            break;
          }
        }
      }
      return index;
    };
    DropDownBase2.prototype.dispatchEvent = function(element, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      if (element) {
        element.dispatchEvent(evt);
      }
    };
    DropDownBase2.prototype.setFields = function() {
      if (this.fields.value && !this.fields.text) {
        this.updateFields(this.fields.value, this.fields.value);
      } else if (!this.fields.value && this.fields.text) {
        this.updateFields(this.fields.text, this.fields.text);
      } else if (!this.fields.value && !this.fields.text) {
        this.updateFields("text", "text");
      }
    };
    DropDownBase2.prototype.resetList = function(dataSource, fields, query, e) {
      if (this.list) {
        if (this.element.tagName === "SELECT" && this.element.options.length > 0 || this.element.tagName === "UL" && this.element.childNodes.length > 0) {
          var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);
          if (!data && this.selectData && this.selectData.length > 0) {
            dataSource = this.selectData;
          }
        }
        dataSource = this.getModuleName() === "combobox" && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;
        this.addedNewItem = false;
        this.setListData(dataSource, fields, query, e);
      }
    };
    DropDownBase2.prototype.updateSelectElementData = function(isFiltering) {
      if ((isFiltering || this.isVirtualizationEnabled) && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {
        this.selectData = this.listData;
      }
    };
    DropDownBase2.prototype.updateSelection = function() {
    };
    DropDownBase2.prototype.renderList = function() {
      this.render();
    };
    DropDownBase2.prototype.updateDataSource = function(props, oldProps) {
      this.resetList(this.dataSource);
      this.totalItemCount = this.dataSource instanceof DataManager ? this.dataSource.dataSource.json.length : 0;
    };
    DropDownBase2.prototype.setUpdateInitial = function(props, newProp, oldProp) {
      this.isDataFetched = false;
      var updateData = {};
      for (var j = 0; props.length > j; j++) {
        if (newProp[props[j]] && props[j] === "fields") {
          this.setFields();
          updateData[props[j]] = newProp[props[j]];
        } else if (newProp[props[j]]) {
          updateData[props[j]] = newProp[props[j]];
        }
      }
      if (Object.keys(updateData).length > 0) {
        if (Object.keys(updateData).indexOf("dataSource") === -1) {
          updateData.dataSource = this.dataSource;
        }
        this.updateDataSource(updateData, oldProp);
      }
    };
    DropDownBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "dropdownbase") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      this.setUpdateInitial(["sortOrder", "itemTemplate"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "sortOrder":
          case "dataSource":
          case "itemTemplate":
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "groupTemplate":
            this.renderGroupTemplate(this.list);
            if (this.ulElement && this.fixedHeaderElement) {
              var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
              this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
            }
            break;
          case "locale":
            if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {
              this.l10nUpdate();
            }
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            this.setZIndex();
            break;
        }
      }
    };
    DropDownBase2.prototype.render = function(e, isEmptyData) {
      if (this.getModuleName() === "listbox") {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content, attrs: { "tabindex": "0" } });
      } else {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content });
      }
      this.list.classList.add(dropDownBaseClasses.root);
      this.setFields();
      var rippleModel = { duration: 300, selector: "." + dropDownBaseClasses.li };
      this.rippleFun = rippleEffect(this.list, rippleModel);
      var group = this.element.querySelector("select>optgroup");
      if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
        EventHandler.add(document, "scroll", this.updateGroupFixedHeader, this);
      }
      if (this.getModuleName() === "dropdownbase") {
        if (this.element.getAttribute("tabindex")) {
          this.list.setAttribute("tabindex", this.element.getAttribute("tabindex"));
        }
        removeClass([this.element], dropDownBaseClasses.root);
        this.element.style.display = "none";
        var wrapperElement = this.createElement("div");
        this.element.parentElement.insertBefore(wrapperElement, this.element);
        wrapperElement.appendChild(this.element);
        wrapperElement.appendChild(this.list);
      }
      this.setEnableRtl();
      if (!isEmptyData) {
        this.initialize(e);
      }
    };
    DropDownBase2.prototype.removeScrollEvent = function() {
      if (this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
    };
    DropDownBase2.prototype.getModuleName = function() {
      return "dropdownbase";
    };
    DropDownBase2.prototype.getItems = function() {
      return this.ulElement.querySelectorAll("." + dropDownBaseClasses.li);
    };
    DropDownBase2.prototype.addItem = function(items, itemIndex) {
      if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== "listbox") {
        this.renderList();
      }
      if (this.sortOrder !== "None" && isNullOrUndefined(itemIndex)) {
        var newList = [].slice.call(this.listData);
        newList.push(items);
        newList = this.getSortedDataSource(newList);
        if (this.fields.groupBy) {
          newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);
          itemIndex = newList.indexOf(items);
        } else {
          itemIndex = newList.indexOf(items);
        }
      }
      var itemsCount = this.getItems().length;
      var isListboxEmpty = itemsCount === 0;
      var selectedItemValue = this.list.querySelector("." + dropDownBaseClasses.selected);
      items = items instanceof Array ? items : [items];
      var index;
      index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
      var fields = this.fields;
      if (items && fields.groupBy) {
        items = ListBase.groupDataSource(items, fields.properties);
      }
      var liCollections = [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var isHeader = item.isHeader;
        var li = this.createElement("li", { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: "option-add-" + i });
        var itemText = item instanceof Object ? getValue(fields.text, item) : item;
        if (isHeader) {
          li.innerText = itemText;
        }
        if (this.itemTemplate && !isHeader) {
          var itemCheck = this.templateCompiler(this.itemTemplate);
          var compiledString = typeof this.itemTemplate !== "function" && itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate);
          var addItemTemplate = compiledString(item, this, "itemTemplate", this.itemTemplateId, this.isStringTemplate, null, li);
          if (addItemTemplate) {
            append(addItemTemplate, li);
          }
        } else if (!isHeader) {
          li.appendChild(document.createTextNode(itemText));
        }
        li.setAttribute("data-value", item instanceof Object ? getValue(fields.value, item) : item);
        li.setAttribute("role", "option");
        this.notify("addItem", { module: "CheckBoxSelection", item: li });
        liCollections.push(li);
        if (this.getModuleName() === "listbox") {
          if (item.disabled) {
            li.classList.add("e-disabled");
          }
          this.listData.splice(isListboxEmpty ? this.listData.length : index, 0, item);
          if (this.listData.length !== this.sortedData.length) {
            this.sortedData = this.listData;
          }
        } else {
          this.listData.push(item);
        }
        if (this.sortOrder === "None" && isNullOrUndefined(itemIndex) && index === 0) {
          index = null;
        }
        if (this.getModuleName() === "listbox") {
          this.updateActionCompleteData(li, item, isListboxEmpty ? null : index);
          isListboxEmpty = true;
        } else {
          this.updateActionCompleteData(li, item, index);
        }
        this.trigger("beforeItemRender", { element: li, item });
      }
      if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector("ul"))) {
        if (!isNullOrUndefined(this.list)) {
          this.list.innerHTML = "";
          this.list.classList.remove(dropDownBaseClasses.noData);
          this.isAddNewItemTemplate = true;
          if (!isNullOrUndefined(this.ulElement)) {
            this.list.appendChild(this.ulElement);
          }
        }
        this.liCollections = liCollections;
        if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {
          append(liCollections, this.ulElement);
        }
        this.updateAddItemList(this.list, itemsCount);
      } else {
        if (this.getModuleName() === "listbox" && itemsCount === 0) {
          this.ulElement.innerHTML = "";
        }
        var attr = [];
        for (var i = 0; i < items.length; i++) {
          var listGroupItem = this.ulElement.querySelectorAll(".e-list-group-item");
          for (var j = 0; j < listGroupItem.length; j++) {
            attr[j] = listGroupItem[j].innerText;
          }
          if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {
            for (var j = 0; j < listGroupItem.length; j++) {
              if (attr[j] === liCollections[i].innerText) {
                if (this.sortOrder === "None") {
                  this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);
                } else {
                  this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);
                }
                i = i + 1;
                break;
              }
            }
          } else {
            if (this.liCollections[index] && this.liCollections[index].parentNode) {
              this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
            } else {
              this.ulElement.appendChild(liCollections[i]);
            }
          }
          var tempLi = [].slice.call(this.liCollections);
          tempLi.splice(index, 0, liCollections[i]);
          this.liCollections = tempLi;
          index += 1;
          if (this.getModuleName() === "multiselect") {
            this.updateDataList();
          }
        }
      }
      if (this.getModuleName() === "listbox" && this.isReact) {
        this.renderReactTemplates();
      }
      if (selectedItemValue || itemIndex === 0) {
        this.updateSelection();
      }
      this.addedNewItem = true;
    };
    DropDownBase2.prototype.isDisabledElement = function(li) {
      if (li && li.classList.contains("e-disabled")) {
        return true;
      }
      return false;
    };
    DropDownBase2.prototype.isDisabledItemByIndex = function(index) {
      if (this.fields.disabled && this.liCollections) {
        return this.isDisabledElement(this.liCollections[index]);
      }
      return false;
    };
    DropDownBase2.prototype.disableListItem = function(li) {
      li.classList.add("e-disabled");
      li.setAttribute("aria-disabled", "true");
      li.setAttribute("aria-selected", "false");
    };
    DropDownBase2.prototype.validationAttribute = function(target, hidden) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      hidden.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (!target.getAttribute(attributes2[i])) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        hidden.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    DropDownBase2.prototype.setZIndex = function() {
    };
    DropDownBase2.prototype.updateActionCompleteData = function(li, item, index) {
    };
    DropDownBase2.prototype.updateAddItemList = function(list, itemCount) {
    };
    DropDownBase2.prototype.updateDataList = function() {
    };
    DropDownBase2.prototype.getDataByValue = function(value) {
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isNullOrUndefined(item) && item === value) {
              return item;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
              return item;
            }
          }
        }
      }
      return null;
    };
    DropDownBase2.prototype.destroy = function() {
      if (document) {
        EventHandler.remove(document, "scroll", this.updateGroupFixedHeader);
        if (document.body.contains(this.list)) {
          EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
          if (!isNullOrUndefined(this.rippleFun)) {
            this.rippleFun();
          }
          detach(this.list);
        }
      }
      this.liCollections = null;
      this.ulElement = null;
      this.list = null;
      this.enableRtlElements = null;
      this.rippleFun = null;
      _super.prototype.destroy.call(this);
    };
    __decorate27([
      Complex({ text: null, value: null, iconCss: null, groupBy: null, disabled: null }, FieldSettings3)
    ], DropDownBase2.prototype, "fields", void 0);
    __decorate27([
      Property(null)
    ], DropDownBase2.prototype, "itemTemplate", void 0);
    __decorate27([
      Property(null)
    ], DropDownBase2.prototype, "groupTemplate", void 0);
    __decorate27([
      Property("No records found")
    ], DropDownBase2.prototype, "noRecordsTemplate", void 0);
    __decorate27([
      Property("Request failed")
    ], DropDownBase2.prototype, "actionFailureTemplate", void 0);
    __decorate27([
      Property("None")
    ], DropDownBase2.prototype, "sortOrder", void 0);
    __decorate27([
      Property([])
    ], DropDownBase2.prototype, "dataSource", void 0);
    __decorate27([
      Property(null)
    ], DropDownBase2.prototype, "query", void 0);
    __decorate27([
      Property("StartsWith")
    ], DropDownBase2.prototype, "filterType", void 0);
    __decorate27([
      Property(true)
    ], DropDownBase2.prototype, "ignoreCase", void 0);
    __decorate27([
      Property(1e3)
    ], DropDownBase2.prototype, "zIndex", void 0);
    __decorate27([
      Property(false)
    ], DropDownBase2.prototype, "ignoreAccent", void 0);
    __decorate27([
      Property()
    ], DropDownBase2.prototype, "locale", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "actionBegin", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "actionComplete", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "actionFailure", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "select", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "dataBound", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "created", void 0);
    __decorate27([
      Event()
    ], DropDownBase2.prototype, "destroyed", void 0);
    DropDownBase2 = __decorate27([
      NotifyPropertyChanges
    ], DropDownBase2);
    return DropDownBase2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate28 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var dropDownListClasses = {
  root: "e-dropdownlist",
  hover: dropDownBaseClasses.hover,
  selected: dropDownBaseClasses.selected,
  rtl: dropDownBaseClasses.rtl,
  li: dropDownBaseClasses.li,
  disable: dropDownBaseClasses.disabled,
  base: dropDownBaseClasses.root,
  focus: dropDownBaseClasses.focus,
  content: dropDownBaseClasses.content,
  input: "e-input-group",
  inputFocus: "e-input-focus",
  icon: "e-input-group-icon e-ddl-icon",
  iconAnimation: "e-icon-anim",
  value: "e-input-value",
  device: "e-ddl-device",
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  mobileFilter: "e-ddl-device-filter",
  footer: "e-ddl-footer",
  header: "e-ddl-header",
  clearIcon: "e-clear-icon",
  clearIconHide: "e-clear-icon-hide",
  popupFullScreen: "e-popup-full-page",
  disableIcon: "e-ddl-disable-icon",
  hiddenElement: "e-ddl-hidden",
  virtualList: "e-list-item e-virtual-list"
};
var inputObject = {
  container: null,
  buttons: []
};
var DropDownList = (
  /** @class */
  function(_super) {
    __extends31(DropDownList2, _super);
    function DropDownList2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isListSearched = false;
      _this.preventChange = false;
      _this.isTouched = false;
      _this.IsScrollerAtEnd = function() {
        return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
      };
      return _this;
    }
    DropDownList2.prototype.preRender = function() {
      this.valueTempElement = null;
      this.element.style.opacity = "0";
      this.initializeData();
      _super.prototype.preRender.call(this);
      this.activeIndex = this.index;
      this.queryString = "";
    };
    DropDownList2.prototype.initializeData = function() {
      this.isPopupOpen = false;
      this.isDocumentClick = false;
      this.isInteracted = false;
      this.isFilterFocus = false;
      this.beforePopupOpen = false;
      this.initial = true;
      this.initialRemoteRender = false;
      this.isNotSearchList = false;
      this.isTyped = false;
      this.isSelected = false;
      this.preventFocus = false;
      this.preventAutoFill = false;
      this.isValidKey = false;
      this.typedString = "";
      this.isEscapeKey = false;
      this.isPreventBlur = false;
      this.isTabKey = false;
      this.actionCompleteData = { isUpdated: false };
      this.actionData = { isUpdated: false };
      this.prevSelectPoints = {};
      this.isSelectCustom = false;
      this.isDropDownClick = false;
      this.preventAltUp = false;
      this.isCustomFilter = false;
      this.isSecondClick = false;
      this.previousValue = null;
      this.keyConfigure = {
        tab: "tab",
        enter: "13",
        escape: "27",
        end: "35",
        home: "36",
        down: "40",
        up: "38",
        pageUp: "33",
        pageDown: "34",
        open: "alt+40",
        close: "shift+tab",
        hide: "alt+38",
        space: "32"
      };
      this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
    };
    DropDownList2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    DropDownList2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({ args: [this], member: "VirtualScroll" });
      }
      return modules;
    };
    DropDownList2.prototype.renderList = function(e, isEmptyData) {
      _super.prototype.render.call(this, e, isEmptyData);
      if (!(this.dataSource instanceof DataManager)) {
        this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.enableVirtualization && this.isFiltering() && this.getModuleName() === "combobox") {
        this.UpdateSkeleton();
        this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
        this.ulElement = this.list.querySelector("ul");
      }
      this.unWireListEvents();
      this.wireListEvents();
    };
    DropDownList2.prototype.floatLabelChange = function() {
      if (this.getModuleName() === "dropdownlist" && this.floatLabelType === "Auto") {
        var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
        if (this.inputElement.value !== "" || this.isInteracted) {
          classList(floatElement, ["e-label-top"], ["e-label-bottom"]);
        } else {
          classList(floatElement, ["e-label-bottom"], ["e-label-top"]);
        }
      }
    };
    DropDownList2.prototype.resetHandler = function(e) {
      e.preventDefault();
      this.clearAll(e);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.virtualListInfo = null;
        this.previousStartIndex = 0;
        this.previousEndIndex = 0;
      }
    };
    DropDownList2.prototype.resetFocusElement = function() {
      this.removeHover();
      this.removeSelection();
      this.removeFocus();
      this.list.scrollTop = 0;
      if (this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.ulElement)) {
        var li = this.fields.disabled ? this.ulElement.querySelector("." + dropDownListClasses.li + ":not(.e-disabled)") : this.ulElement.querySelector("." + dropDownListClasses.li);
        if (this.enableVirtualization) {
          li = this.liCollections[this.skeletonCount];
        }
        if (li) {
          li.classList.add(dropDownListClasses.focus);
        }
      }
    };
    DropDownList2.prototype.clearAll = function(e, properties) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
        this.isActive = true;
        this.resetSelection(properties);
      }
      var dataItem = this.getItemData();
      if (!this.allowObjectBinding && this.previousValue === dataItem.value || this.allowObjectBinding && this.previousValue && this.isObjectInArray(this.previousValue, [this.allowCustom ? this.value ? this.value : dataItem : dataItem.value ? this.getDataByValue(dataItem.value) : dataItem])) {
        return;
      }
      this.onChangeEvent(e);
      this.checkAndResetCache();
      if (this.enableVirtualization) {
        this.updateInitialData();
      }
    };
    DropDownList2.prototype.resetSelection = function(properties) {
      if (this.list) {
        if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
          this.selectedLI = null;
          this.actionCompleteData.isUpdated = false;
          this.actionCompleteData.ulElement = null;
          this.actionCompleteData.list = null;
          this.resetList(properties.dataSource);
        } else {
          if (this.allowFiltering && this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) && this.actionCompleteData.list.length > 0) {
            this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
          }
          this.resetFocusElement();
        }
      }
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.inputElement)) {
        this.inputElement.value = "";
      }
      this.value = null;
      this.itemData = null;
      this.text = null;
      this.index = null;
      this.activeIndex = null;
      this.item = null;
      this.queryString = "";
      if (this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
        this.valueTempElement = null;
      }
      this.setSelection(null, null);
      this.isSelectCustom = false;
      this.updateIconState();
      this.cloneElements();
    };
    DropDownList2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
            if (updatedClassValue !== "") {
              addClass([this.inputWrapper.container], updatedClassValue.split(" "));
            }
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.enabled = false;
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.readonly = true;
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.container.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "aria-label") {
            if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
              this.inputElement.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            } else if (this.getModuleName() === "dropdownlist") {
              this.inputWrapper.container.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            }
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "role",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
              defaultAttr.push("tabindex");
            }
            if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf("data") === 0) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputElement);
              } else {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
      if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
        this.inputWrapper.container.removeAttribute("tabindex");
      }
    };
    DropDownList2.prototype.getAriaAttributes = function() {
      return {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false",
        "aria-live": "polite",
        "aria-labelledby": this.hiddenElement.id
      };
    };
    DropDownList2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    DropDownList2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "false");
        this.targetElement().setAttribute("tabindex", this.tabIndex);
      } else {
        this.hidePopup();
        addClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "true");
        this.targetElement().tabIndex = -1;
      }
    };
    DropDownList2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    DropDownList2.prototype.getLocaleName = function() {
      return "drop-down-list";
    };
    DropDownList2.prototype.preventTabIndex = function(element) {
      if (this.getModuleName() === "dropdownlist") {
        element.tabIndex = -1;
      }
    };
    DropDownList2.prototype.targetElement = function() {
      return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;
    };
    DropDownList2.prototype.getNgDirective = function() {
      return "EJS-DROPDOWNLIST";
    };
    DropDownList2.prototype.getElementByText = function(text) {
      return this.getElementByValue(this.getValueByText(text));
    };
    DropDownList2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    DropDownList2.prototype.initValue = function() {
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initialRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    DropDownList2.prototype.isDisableItemValue = function(value) {
      if (typeof value === "object") {
        var objectValue = JSON.parse(JSON.stringify(value))[this.fields.value];
        return this.isDisabledItemByIndex(this.getIndexByValue(objectValue));
      }
      return this.isDisabledItemByIndex(this.getIndexByValue(value));
    };
    DropDownList2.prototype.updateValues = function() {
      if (this.fields.disabled) {
        if (this.value != null) {
          this.value = !this.isDisableItemValue(this.value) ? this.value : null;
        }
        if (this.text != null) {
          this.text = !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
        }
        if (this.index != null) {
          this.index = !this.isDisabledItemByIndex(this.index) ? this.index : null;
          this.activeIndex = this.index;
        }
      }
      this.selectedValueInfo = this.viewPortInfo;
      if (!isNullOrUndefined(this.value)) {
        var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        this.setSelection(this.getElementByValue(value), null);
      } else if (this.text && isNullOrUndefined(this.value)) {
        var element = this.getElementByText(this.text);
        if (isNullOrUndefined(element)) {
          this.setProperties({ text: null });
          return;
        } else {
          this.setSelection(element, null);
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DropDownList2.prototype.onBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      var target = e.relatedTarget;
      var currentTarget = e.target;
      var isPreventBlur = this.isPreventBlur;
      this.isPreventBlur = false;
      if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {
        if (this.getModuleName() === "dropdownlist" && this.allowFiltering && this.isPopupOpen) {
          this.filterInput.focus();
        } else {
          this.targetElement().focus();
        }
        return;
      }
      if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
        if (!this.beforePopupOpen) {
          this.isDocumentClick = false;
        }
        return;
      }
      if (this.getModuleName() === "dropdownlist" && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === "dropdownlist" && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== "dropdownlist" && !this.inputWrapper.container.contains(target) || this.isTabKey) {
        this.isDocumentClick = this.isPopupOpen ? true : false;
        this.focusOutAction(e);
        this.isTabKey = false;
      }
      if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
        this.isActive = false;
        this.beforePopupOpen = false;
      }
    };
    DropDownList2.prototype.focusOutAction = function(e) {
      this.isInteracted = false;
      this.focusOut(e);
      this.onFocusOut(e);
    };
    DropDownList2.prototype.onFocusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isSelected) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      this.floatLabelChange();
      this.dispatchEvent(this.hiddenElement, "change");
      if (this.getModuleName() === "dropdownlist" && this.element.tagName !== "INPUT") {
        this.dispatchEvent(this.inputElement, "blur");
      }
      if (this.inputWrapper.clearButton) {
        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
      }
      this.trigger("blur");
    };
    DropDownList2.prototype.onFocus = function(e) {
      if (!this.isInteracted) {
        this.isInteracted = true;
        var args = { isInteracted: e ? true : false, event: e };
        this.trigger("focus", args);
      }
      this.updateIconState();
    };
    DropDownList2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute("value");
        this.text = val;
      }
    };
    DropDownList2.prototype.wireEvent = function() {
      EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      this.bindCommonEvent();
    };
    DropDownList2.prototype.bindCommonEvent = function() {
      EventHandler.add(this.targetElement(), "blur", this.onBlurHandler, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.mobileKeyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      }
      this.bindClearEvent();
    };
    DropDownList2.prototype.windowResize = function() {
      if (this.isPopupOpen) {
        this.popupObj.refreshPosition(this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DropDownList2.prototype.unBindCommonEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {
        EventHandler.remove(this.targetElement(), "blur", this.onBlurHandler);
      }
      var formElement = this.inputElement && closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      if (!Browser.isDevice) {
        this.keyboardModule.destroy();
      }
      if (this.showClearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
      }
    };
    DropDownList2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    DropDownList2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(this.list, "click", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    DropDownList2.prototype.onSearch = function(e) {
      if (e.charCode !== 32 && e.charCode !== 13) {
        if (this.list === void 0) {
          this.renderList();
        }
        this.searchKeyEvent = e;
        this.onServerIncrementalSearch(e);
      }
    };
    DropDownList2.prototype.onServerIncrementalSearch = function(e) {
      if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector("li")) && this.enabled && !this.readonly) {
        this.incrementalSearch(e);
      }
    };
    DropDownList2.prototype.onMouseClick = function(e) {
      var target = e.target;
      this.keyboardEvent = null;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li) || this.isDisabledElement(li)) {
        return;
      }
      this.setSelection(li, e);
      if (Browser.isDevice && this.isFilterLayout()) {
        history.back();
      } else {
        var delay = 100;
        this.closePopup(delay, e);
      }
    };
    DropDownList2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    DropDownList2.prototype.setHover = function(li) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    DropDownList2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    DropDownList2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    DropDownList2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    DropDownList2.prototype.updateIncrementalItemIndex = function(startIndex, endIndex) {
      this.incrementalStartIndex = startIndex;
      this.incrementalEndIndex = endIndex;
    };
    DropDownList2.prototype.incrementalSearch = function(e) {
      if (this.liCollections.length > 0) {
        if (this.enableVirtualization) {
          var updatingincrementalindex = false;
          var queryStringUpdated = false;
          var activeElement = this.ulElement.getElementsByClassName("e-active")[0];
          var currentValue = activeElement ? activeElement.textContent : null;
          if (this.incrementalQueryString == "") {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else if (String.fromCharCode(e.charCode).toLocaleLowerCase() == this.incrementalPreQueryString.toLocaleLowerCase()) {
            queryStringUpdated = true;
          } else {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
          }
          if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex == 0) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (this.incrementalEndIndex == 0) {
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
            } else {
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          var li = incrementalSearch(e.charCode, this.incrementalLiCollections, this.activeIndex, true, this.element.id, queryStringUpdated, currentValue, true);
          while (isNullOrUndefined(li) && this.incrementalEndIndex < this.totalItemCount) {
            this.updateIncrementalItemIndex(this.incrementalEndIndex, this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
            if (!isNullOrUndefined(li)) {
              break;
            }
            if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
              this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
              break;
            }
          }
          if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
            this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
          }
          var index = li && this.getIndexByValue(li.getAttribute("data-value"));
          if (!index) {
            for (var i = 0; i < this.incrementalLiCollections.length; i++) {
              if (!isNullOrUndefined(li) && !isNullOrUndefined(li.getAttribute("data-value")) && this.incrementalLiCollections[i].getAttribute("data-value") === li.getAttribute("data-value").toString()) {
                index = i;
                index = this.incrementalStartIndex + index;
                break;
              }
            }
          } else {
            index = index - this.skeletonCount;
          }
          if (index) {
            if (!(this.viewPortInfo.startIndex >= index) || !(index >= this.viewPortInfo.endIndex)) {
              var startIndex = index - (this.itemCount / 2 - 2) > 0 ? index - (this.itemCount / 2 - 2) : 0;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
          }
          if (!isNullOrUndefined(li)) {
            var index_1 = this.getIndexByValue(li.getAttribute("data-value")) - this.skeletonCount;
            if (index_1 > this.itemCount / 2) {
              var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
            li = this.getElementByValue(li.getAttribute("data-value"));
            this.setSelection(li, e);
            this.setScrollPosition();
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            if (this.enableVirtualization && !this.fields.groupBy) {
              var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
              this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
            }
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
        } else {
          var li = void 0;
          if (this.fields.disabled) {
            var enableLiCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li + ":not(.e-disabled)");
            li = incrementalSearch(e.charCode, enableLiCollections, this.activeIndex, true, this.element.id);
          } else {
            li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);
          }
          if (!isNullOrUndefined(li)) {
            this.setSelection(li, e);
            this.setScrollPosition();
          }
        }
      }
    };
    DropDownList2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        this.spinnerElement.innerHTML = "";
        this.spinnerElement = null;
      }
    };
    DropDownList2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    DropDownList2.prototype.keyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.keyboardEvent = e;
      if (this.isPreventKeyAction && this.enableVirtualization) {
        e.preventDefault();
      }
      var preventAction = e.action === "pageUp" || e.action === "pageDown";
      var preventHomeEnd = this.getModuleName() !== "dropdownlist" && (e.action === "home" || e.action === "end");
      this.isEscapeKey = e.action === "escape";
      this.isTabKey = !this.isPopupOpen && e.action === "tab";
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        var isTabAction = e.action === "tab" || e.action === "close";
        if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== "escape") {
          this.searchKeyEvent = e;
          if (!this.enableVirtualization || this.enableVirtualization && this.getModuleName() !== "autocomplete" && e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
            this.renderList(e);
            this.UpdateSkeleton();
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
            this.ulElement = this.list.querySelector("ul");
          }
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (isTabAction && this.getModuleName() !== "autocomplete" && this.isPopupOpen || e.action === "escape") {
          e.preventDefault();
        }
        this.isSelected = e.action === "escape" ? false : this.isSelected;
        this.isTyped = isNavigation || e.action === "escape" ? false : this.isTyped;
        switch (e.action) {
          case "down":
          case "up":
            this.updateUpDownAction(e);
            break;
          case "pageUp":
            this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
            e.preventDefault();
            break;
          case "pageDown":
            this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
            e.preventDefault();
            break;
          case "home":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "end":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "space":
            if (this.getModuleName() === "dropdownlist") {
              if (!this.beforePopupOpen) {
                this.showPopup();
                e.preventDefault();
              }
            }
            break;
          case "open":
            this.showPopup(e);
            break;
          case "hide":
            this.preventAltUp = this.isPopupOpen;
            this.hidePopup(e);
            this.focusDropDown(e);
            break;
          case "enter":
            this.selectCurrentItem(e);
            break;
          case "tab":
            this.selectCurrentValueOnTab(e);
            break;
          case "escape":
          case "close":
            if (this.isPopupOpen) {
              this.hidePopup(e);
              this.focusDropDown(e);
            }
            break;
        }
      }
    };
    DropDownList2.prototype.updateUpDownAction = function(e, isVirtualKeyAction) {
      if (this.fields.disabled && this.list && this.list.querySelectorAll(".e-list-item:not(.e-disabled)").length === 0) {
        return;
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value_1 = this.getItemData().value;
        if (isNullOrUndefined(value_1)) {
          value_1 = "null";
        }
        var filterIndex = this.getIndexByValue(value_1);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      var focusEle = this.list.querySelector("." + dropDownListClasses.focus);
      if (this.isSelectFocusItem(focusEle) && !isVirtualKeyAction) {
        this.setSelection(focusEle, e);
        if (this.enableVirtualization) {
          var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
          if (this.fields.groupBy) {
            selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex == 0 ? this.selectedLI.offsetHeight - selectedLiOffsetTop : selectedLiOffsetTop - this.selectedLI.offsetHeight;
          }
          this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
        }
      } else if (!isNullOrUndefined(this.liCollections)) {
        var virtualIndex = this.activeIndex;
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        index = isVirtualKeyAction ? virtualIndex : index;
        var startIndex = 0;
        if (this.getModuleName() === "autocomplete") {
          startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
          index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        }
        var nextItem = void 0;
        if (this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && this.isPopupOpen) {
          if (!this.enableVirtualization) {
            nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
          } else {
            if (!isVirtualKeyAction) {
              nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[this.skeletonCount] : this.liCollections[index];
              nextItem = !isNullOrUndefined(nextItem) && !nextItem.classList.contains("e-virtual-list") ? nextItem : null;
            } else {
              if (this.getModuleName() === "autocomplete") {
                var value = this.getFormattedValue(this.selectedLI.getAttribute("data-value"));
                nextItem = this.getElementByValue(value);
              } else {
                nextItem = this.getElementByValue(this.getItemData().value);
              }
            }
          }
        }
        if (!isNullOrUndefined(nextItem)) {
          var focusAtFirstElement = this.liCollections[this.skeletonCount] && this.liCollections[this.skeletonCount].classList.contains("e-item-focus");
          this.setSelection(nextItem, e);
          if (focusAtFirstElement && this.enableVirtualization && this.getModuleName() === "autocomplete" && !isVirtualKeyAction) {
            var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
            selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex == 0 && this.fields.groupBy ? this.selectedLI.offsetHeight - selectedLiOffsetTop : selectedLiOffsetTop - this.selectedLI.offsetHeight;
            this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
          }
        } else if (this.enableVirtualization && !this.isPopupOpen && this.getModuleName() !== "autocomplete" && (this.viewPortInfo.endIndex !== this.totalItemCount && e.action === "down" || this.viewPortInfo.startIndex !== 0 && e.action === "up")) {
          if (e.action === "down") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex + this.itemCount < this.totalItemCount - this.itemCount ? this.viewPortInfo.startIndex + this.itemCount : this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value_2 = this.liCollections[0].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[0].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value_2);
            if (selectedData) {
              this.itemData = selectedData;
            }
          } else if (e.action === "up") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex - this.itemCount > 0 ? this.viewPortInfo.startIndex - this.itemCount : 0;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value_3 = this.liCollections[this.liCollections.length - 1].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[this.liCollections.length - 1].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value_3);
            if (selectedData) {
              this.itemData = selectedData;
            }
          }
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.handleVirtualKeyboardActions(e, this.pageCount);
        }
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value_4 = this.getItemData().value;
        var filterIndex = this.getIndexByValueFilter(value_4, this.actionCompleteData.ulElement);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      if (this.allowFiltering && this.getModuleName() === "dropdownlist" && this.filterInput) {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
      var itemIndex;
      for (var index = 0; index < this.liCollections.length; index++) {
        if (this.liCollections[index].classList.contains(dropDownListClasses.focus) || this.liCollections[index].classList.contains(dropDownListClasses.selected)) {
          itemIndex = index;
          break;
        }
      }
      if (itemIndex != null && this.isDisabledElement(this.liCollections[itemIndex])) {
        if (this.getModuleName() !== "autocomplete") {
          if (this.liCollections.length - 1 === itemIndex && e.action === "down") {
            e.action = "up";
          }
          if (itemIndex === 0 && e.action === "up") {
            e.action = "down";
          }
        }
        this.updateUpDownAction(e);
      }
      e.preventDefault();
    };
    DropDownList2.prototype.updateHomeEndAction = function(e, isVirtualKeyAction) {
      if (this.getModuleName() === "dropdownlist") {
        var findLi = 0;
        if (e.action === "home") {
          findLi = 0;
          if (this.enableVirtualization && this.isPopupOpen) {
            findLi = this.skeletonCount;
          } else if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.startIndex !== 0) {
            this.viewPortInfo.startIndex = 0;
            this.viewPortInfo.endIndex = this.itemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
        } else {
          if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.endIndex !== this.totalItemCount) {
            this.viewPortInfo.startIndex = this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.totalItemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
          findLi = this.getItems().length - 1;
        }
        e.preventDefault();
        if (this.activeIndex === findLi) {
          if (isVirtualKeyAction) {
            this.setSelection(this.liCollections[findLi], e);
          }
          return;
        }
        this.setSelection(this.liCollections[findLi], e);
      }
    };
    DropDownList2.prototype.selectCurrentValueOnTab = function(e) {
      if (this.getModuleName() === "autocomplete") {
        this.selectCurrentItem(e);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          this.focusDropDown(e);
        }
      }
    };
    DropDownList2.prototype.mobileKeyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isEditTextBox() && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        if (this.list === void 0 && !this.isRequested) {
          this.searchKeyEvent = e;
          this.renderList();
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (e.action === "enter") {
          this.selectCurrentItem(e);
        }
      }
    };
    DropDownList2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
      switch (e.action) {
        case "down":
        case "up":
          if (this.itemData != null || this.getModuleName() === "autocomplete") {
            this.updateUpDownAction(e, true);
          }
          break;
        case "pageUp":
          this.activeIndex = this.getModuleName() === "autocomplete" ? this.getIndexByValue(this.selectedLI.getAttribute("data-value")) + this.getPageCount() - 1 : this.getIndexByValue(this.previousValue);
          this.pageUpSelection(this.activeIndex - this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "pageDown":
          this.activeIndex = this.getModuleName() === "autocomplete" ? this.getIndexByValue(this.selectedLI.getAttribute("data-value")) - this.getPageCount() : this.getIndexByValue(this.previousValue);
          this.pageDownSelection(!isNullOrUndefined(this.activeIndex) ? this.activeIndex + this.getPageCount() : 2 * this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "home":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
        case "end":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
      }
      this.keyboardEvent = null;
    };
    DropDownList2.prototype.selectCurrentItem = function(e) {
      if (this.isPopupOpen) {
        var li = this.list.querySelector("." + dropDownListClasses.focus);
        if (this.isDisabledElement(li)) {
          return;
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
        this.hidePopup(e);
        this.focusDropDown(e);
      } else {
        this.showPopup();
      }
    };
    DropDownList2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    DropDownList2.prototype.pageUpSelection = function(steps, event2, isVirtualKeyAction) {
      var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
      if (this.enableVirtualization && this.activeIndex == null) {
        previousItem = this.liCollections.length >= steps && steps >= 0 ? this.liCollections[steps + this.skeletonCount + 1] : this.liCollections[0];
      }
      if (!isNullOrUndefined(previousItem) && previousItem.classList.contains("e-virtual-list")) {
        previousItem = this.liCollections[this.skeletonCount];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
    };
    DropDownList2.prototype.PageUpDownSelection = function(previousItem, event2) {
      if (this.enableVirtualization) {
        if (!isNullOrUndefined(previousItem) && (this.getModuleName() !== "autocomplete" && !previousItem.classList.contains("e-active") || this.getModuleName() === "autocomplete" && !previousItem.classList.contains("e-item-focus"))) {
          this.setSelection(previousItem, event2);
        }
      } else {
        this.setSelection(previousItem, event2);
      }
    };
    DropDownList2.prototype.pageDownSelection = function(steps, event2, isVirtualKeyAction) {
      var list = this.getItems();
      var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
      if (this.enableVirtualization && this.skeletonCount > 0) {
        steps = this.getModuleName() === "dropdownlist" && this.allowFiltering ? steps + 1 : steps;
        previousItem = steps < list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      if (this.enableVirtualization && this.activeIndex == null) {
        previousItem = steps <= list.length ? this.liCollections[steps + this.skeletonCount - 1] : this.liCollections[list.length - 1];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
    };
    DropDownList2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick);
        EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch);
        EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn);
        EventHandler.remove(window, "resize", this.windowResize);
      }
      this.unBindCommonEvent();
    };
    DropDownList2.prototype.unWireListEvents = function() {
      if (this.list) {
        EventHandler.remove(this.list, "click", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    DropDownList2.prototype.checkSelector = function(id) {
      return '[id="' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, "\\$1") + '"]';
    };
    DropDownList2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {
        if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
          this.isDocumentClick = true;
          var isActive = this.isRequested;
          if (this.getModuleName() === "combobox" && this.isTyped) {
            this.isInteracted = false;
          }
          this.hidePopup(e);
          this.isInteracted = false;
          if (!isActive) {
            this.onFocusOut(e);
            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
          }
        }
      } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === "combobox" && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {
        this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
        e.preventDefault();
      }
    };
    DropDownList2.prototype.activeStateChange = function() {
      if (this.isDocumentClick) {
        this.hidePopup();
        this.onFocusOut();
        this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
      }
    };
    DropDownList2.prototype.focusDropDown = function(e) {
      if (!this.initial && this.isFilterLayout()) {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.dropDownClick = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      this.keyboardEvent = null;
      if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
        return;
      }
      var target = e.target;
      if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== "combobox") {
        e.preventDefault();
      }
      if (!this.readonly) {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          if (this.isFilterLayout()) {
            this.focusDropDown(e);
          }
        } else {
          this.focusIn(e);
          this.floatLabelChange();
          this.queryString = this.inputElement.value.trim() === "" ? null : this.inputElement.value;
          this.isDropDownClick = true;
          this.showPopup(e);
        }
        var proxy_1 = this;
        var duration = this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;
        if (!this.isSecondClick) {
          setTimeout(function() {
            proxy_1.cloneElements();
            proxy_1.isSecondClick = true;
          }, duration);
        }
      } else {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.cloneElements = function() {
      if (this.list) {
        var ulElement = this.list.querySelector("ul");
        if (ulElement) {
          ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
          this.actionCompleteData.ulElement = ulElement;
        }
      }
    };
    DropDownList2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = li.getAttribute("data-value") !== "null" ? this.getFormattedValue(li.getAttribute("data-value")) : null;
      var selectedData = this.getDataByValue(value);
      if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
          } else {
            _this.selectEventCallback(li, e, preventSelect, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, e, preventSelect, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    DropDownList2.prototype.selectEventCallback = function(li, e, preventSelect, selectedData, value) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (this.itemData != selectedData) {
        this.previousValue = !isNullOrUndefined(this.itemData) ? typeof this.itemData == "object" && !this.allowObjectBinding ? this.checkFieldValue(this.itemData, this.fields.value.split(".")) : this.itemData : null;
      }
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      li.setAttribute("aria-selected", "true");
      if (isNullOrUndefined(value)) {
        value = "null";
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var filterIndex = this.getIndexByValueFilter(value, this.actionCompleteData.ulElement);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        } else {
          this.activeIndex = this.getIndexByValue(value);
        }
      } else {
        if (this.enableVirtualization && this.activeIndex == null && this.dataSource instanceof DataManager) {
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
        }
        this.activeIndex = this.getIndexByValue(value);
      }
    };
    DropDownList2.prototype.activeItem = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
        this.removeSelection();
        li.classList.add(dropDownBaseClasses.selected);
        this.removeHover();
        li.setAttribute("aria-selected", "true");
      }
    };
    DropDownList2.prototype.setValue = function(e) {
      var dataItem = this.getItemData();
      if (dataItem.value === null) {
        Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      if (this.valueTemplate && this.itemData !== null) {
        this.setValueTemplate();
      } else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
      }
      if (!isNullOrUndefined(dataItem.value) && !this.enableVirtualization && this.allowFiltering) {
        this.activeIndex = this.getIndexByValueFilter(dataItem.value, this.actionCompleteData.ulElement);
      }
      var clearIcon2 = dropDownListClasses.clearIcon;
      var isFilterElement = this.isFiltering() && this.filterInput && this.getModuleName() === "combobox";
      var clearElement = isFilterElement && this.filterInput.parentElement.querySelector("." + clearIcon2);
      if (this.isFiltering() && clearElement) {
        clearElement.style.removeProperty("visibility");
      }
      if (!this.allowObjectBinding && this.previousValue === dataItem.value || this.allowObjectBinding && (this.previousValue != null && this.isObjectInArray(this.previousValue, [this.allowCustom && this.isObjectCustomValue ? this.value ? this.value : dataItem : dataItem.value ? this.getDataByValue(dataItem.value) : dataItem]))) {
        this.isSelected = false;
        return true;
      } else {
        this.isSelected = !this.initial ? true : false;
        this.isSelectCustom = false;
        if (this.getModuleName() === "dropdownlist") {
          this.updateIconState();
        }
        return false;
      }
    };
    DropDownList2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
        if (this.enableVirtualization && this.value) {
          var fields = this.fields.value ? this.fields.value : "";
          var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          if (this.dataSource instanceof DataManager) {
            var getItem = new DataManager(this.virtualGroupDataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": value });
              }
            }
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": value });
              }
            }
          }
        }
      }
    };
    DropDownList2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.setValue(e)) {
        return;
      }
      if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== "keydown" || e.type === "keydown" && e.action === "enter")) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== "click")) {
        this.setScrollPosition(e);
      }
      if (Browser.info.name !== "mozilla") {
        if (this.targetElement()) {
          attributes(this.targetElement(), { "aria-describedby": this.inputElement.id !== "" ? this.inputElement.id : this.element.id });
          this.targetElement().removeAttribute("aria-live");
        }
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      } else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
      }
    };
    DropDownList2.prototype.dropdownCompiler = function(dropdownTemplate) {
      var checkTemplate = false;
      if (typeof dropdownTemplate !== "function" && dropdownTemplate) {
        try {
          checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownList2.prototype.setValueTemplate = function() {
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["valueTemplate"]);
        if (this.valueTempElement) {
          detach(this.valueTempElement);
          this.inputElement.style.display = "block";
          this.valueTempElement = null;
        }
      }
      if (!this.valueTempElement) {
        this.valueTempElement = this.createElement("span", { className: dropDownListClasses.value });
        this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
        this.inputElement.style.display = "none";
      }
      if (!this.isReact) {
        this.valueTempElement.innerHTML = "";
      }
      var valuecheck = this.dropdownCompiler(this.valueTemplate);
      if (typeof this.valueTemplate !== "function" && valuecheck) {
        compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());
      } else {
        compiledString = compile(this.valueTemplate);
      }
      var valueCompTemp = compiledString(this.itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);
      if (valueCompTemp && valueCompTemp.length > 0) {
        append(valueCompTemp, this.valueTempElement);
      }
      this.renderReactTemplates();
    };
    DropDownList2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    DropDownList2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    DropDownList2.prototype.onChangeEvent = function(eve, isCustomValue) {
      var _this = this;
      var dataItem = this.getItemData();
      var index = this.isSelectCustom ? null : this.activeIndex;
      if (this.enableVirtualization) {
        var datas = this.dataSource instanceof DataManager ? this.virtualGroupDataSource : this.dataSource;
        if (dataItem.value && datas && datas.length > 0) {
          var foundIndex = datas.findIndex(function(data) {
            return !isNullOrUndefined(dataItem.value) && getValue(_this.fields.value, data) === dataItem.value;
          });
          if (foundIndex !== -1) {
            index = foundIndex;
          }
        }
      }
      var value = this.allowObjectBinding ? isCustomValue ? this.value : this.getDataByValue(dataItem.value) : dataItem.value;
      this.setProperties({ "index": index, "text": dataItem.text, "value": value }, true);
      this.detachChangeEvent(eve);
    };
    DropDownList2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    DropDownList2.prototype.detachChangeEvent = function(eve) {
      this.isSelected = false;
      this.previousValue = this.value;
      this.activeIndex = this.enableVirtualization ? this.getIndexByValue(this.value) : this.index;
      this.typedString = !isNullOrUndefined(this.text) ? this.text : "";
      if (!this.initial) {
        var items = this.detachChanges(this.itemData);
        var preItems = void 0;
        if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
          preItems = Object.defineProperties({}, {
            value: {
              value: this.previousItemData,
              enumerable: true
            },
            text: {
              value: this.previousItemData,
              enumerable: true
            }
          });
        } else {
          preItems = this.previousItemData;
        }
        this.setHiddenValue();
        var eventArgs = {
          e: eve,
          item: this.item,
          itemData: items,
          previousItem: this.previousSelectedLI,
          previousItemData: preItems,
          isInteracted: eve ? true : false,
          value: this.value,
          element: this.element,
          event: eve
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
      }
      if ((isNullOrUndefined(this.value) || this.value === "") && this.floatLabelType !== "Always") {
        removeClass([this.inputWrapper.container], "e-valid-input");
      }
    };
    DropDownList2.prototype.setHiddenValue = function() {
      if (!isNullOrUndefined(this.value)) {
        var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        if (this.hiddenElement.querySelector("option")) {
          var selectedElement = this.hiddenElement.querySelector("option");
          selectedElement.textContent = this.text;
          selectedElement.setAttribute("value", value.toString());
        } else {
          if (!isNullOrUndefined(this.hiddenElement)) {
            this.hiddenElement.innerHTML = "<option selected>" + this.text + "</option>";
            var selectedElement = this.hiddenElement.querySelector("option");
            selectedElement.setAttribute("value", value.toString());
          }
        }
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownList2.prototype.onFilterUp = function(e) {
      if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {
        this.isValidKey = false;
        this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
        switch (e.keyCode) {
          case 38:
          case 40:
            if (this.getModuleName() === "autocomplete" && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else {
              this.preventAutoFill = false;
            }
            this.preventAltUp = false;
            if (this.getModuleName() === "autocomplete" && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
              attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
            }
            e.preventDefault();
            break;
          case 46:
          case 8:
            this.typedString = this.filterInput.value;
            if (!this.isPopupOpen && this.typedString !== "" || this.isPopupOpen && this.queryString.length > 0) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "" && this.queryString === "" && this.getModuleName() !== "autocomplete") {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "") {
              if (this.list) {
                this.resetFocusElement();
              }
              this.activeIndex = null;
              if (this.getModuleName() !== "dropdownlist") {
                this.preventAutoFill = true;
                this.searchLists(e);
                if (this.getModuleName() === "autocomplete") {
                  this.hidePopup();
                }
              }
            }
            e.preventDefault();
            break;
          default:
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              this.getInitialData = true;
              this.renderList();
            }
            this.typedString = this.filterInput.value;
            this.preventAutoFill = false;
            this.searchLists(e);
            if (this.enableVirtualization && this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
              this.getFilteringSkeletonCount();
            }
            break;
        }
      } else {
        this.isValidKey = false;
      }
    };
    DropDownList2.prototype.onFilterDown = function(e) {
      switch (e.keyCode) {
        case 13:
          break;
        case 40:
        case 38:
          this.queryString = this.filterInput.value;
          e.preventDefault();
          break;
        case 9:
          if (this.isPopupOpen && this.getModuleName() !== "autocomplete") {
            e.preventDefault();
          }
          break;
        default:
          this.prevSelectPoints = this.getSelectionPoints();
          this.queryString = this.filterInput.value;
          break;
      }
    };
    DropDownList2.prototype.removeFillSelection = function() {
      if (this.isInteracted) {
        var selection = this.getSelectionPoints();
        this.inputElement.setSelectionRange(selection.end, selection.end);
      }
    };
    DropDownList2.prototype.getQuery = function(query) {
      var filterQuery;
      if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
        var filterType = this.typedString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        } else if (this.getModuleName() !== "combobox" || this.isFiltering() && this.getModuleName() === "combobox" && this.typedString !== "") {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery) ? this.customFilterQuery.clone() : query ? query.clone() : this.query ? this.query.clone() : new Query();
      }
      if (this.enableVirtualization && this.viewPortInfo.endIndex != 0) {
        var takeValue = this.getTakeValue();
        var alreadySkipAdded = false;
        if (filterQuery) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              alreadySkipAdded = true;
              break;
            }
          }
        }
        var queryTakeValue = 0;
        var querySkipValue = 0;
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements_1 = 0; queryElements_1 < filterQuery.queries.length; queryElements_1++) {
            if (filterQuery.queries[queryElements_1].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements_1].e.nos;
            }
            if (filterQuery.queries[queryElements_1].fn === "onTake") {
              queryTakeValue = takeValue <= filterQuery.queries[queryElements_1].e.nos ? filterQuery.queries[queryElements_1].e.nos : takeValue;
            }
          }
        }
        if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
          for (var queryElements_2 = 0; queryElements_2 < this.query.queries.length; queryElements_2++) {
            if (this.query.queries[queryElements_2].fn === "onTake") {
              queryTakeValue = takeValue <= this.query.queries[queryElements_2].e.nos ? this.query.queries[queryElements_2].e.nos : takeValue;
            }
          }
        }
        var skipExists = false;
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements_3 = 0; queryElements_3 < filterQuery.queries.length; queryElements_3++) {
            if (filterQuery.queries[queryElements_3].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements_3].e.nos;
              filterQuery.queries.splice(queryElements_3, 1);
              --queryElements_3;
              continue;
            }
            if (filterQuery.queries[queryElements_3].fn === "onTake") {
              queryTakeValue = filterQuery.queries[queryElements_3].e.nos <= queryTakeValue ? queryTakeValue : filterQuery.queries[queryElements_3].e.nos;
              filterQuery.queries.splice(queryElements_3, 1);
              --queryElements_3;
            }
          }
        }
        if (!skipExists && (this.allowFiltering || !this.isPopupOpen || !alreadySkipAdded)) {
          if (querySkipValue > 0) {
            filterQuery.skip(querySkipValue);
          } else {
            filterQuery.skip(this.virtualItemStartIndex);
          }
        }
        if (this.isIncrementalRequest) {
          filterQuery.take(this.incrementalEndIndex);
        } else {
          if (queryTakeValue > 0) {
            filterQuery.take(queryTakeValue);
          } else {
            filterQuery.take(takeValue);
          }
        }
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    DropDownList2.prototype.getSelectionPoints = function() {
      var input2 = this.inputElement;
      return { start: Math.abs(input2.selectionStart), end: Math.abs(input2.selectionEnd) };
    };
    DropDownList2.prototype.searchLists = function(e) {
      var _this = this;
      this.isTyped = true;
      this.activeIndex = null;
      this.isListSearched = true;
      if (this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
      this.isDataFetched = false;
      if (this.isFiltering()) {
        this.checkAndResetCache();
        this.isRequesting = false;
        var eventArgs_1 = {
          preventDefaultAction: false,
          text: this.filterInput.value,
          updateData: function(dataSource, query, fields) {
            if (eventArgs_1.cancel) {
              return;
            }
            _this.isCustomFilter = true;
            _this.customFilterQuery = query.clone();
            _this.filteringAction(dataSource, query, fields);
          },
          baseEventArgs: e,
          cancel: false
        };
        this.trigger("filtering", eventArgs_1, function(eventArgs) {
          if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {
            _this.filteringAction(_this.dataSource, null, _this.fields);
          }
        });
      }
    };
    DropDownList2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFilter = true;
      this.filteringAction(dataSource, query, fields);
    };
    DropDownList2.prototype.filteringAction = function(dataSource, query, fields) {
      if (!isNullOrUndefined(this.filterInput)) {
        this.beforePopupOpen = !this.isPopupOpen && this.getModuleName() === "combobox" && this.filterInput.value === "" || this.getInitialData ? false : true;
        var isNoData = this.list.classList.contains(dropDownBaseClasses.noData);
        if (this.filterInput.value.trim() === "" && !this.itemTemplate) {
          this.actionCompleteData.isUpdated = false;
          this.isTyped = false;
          if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {
            if (this.enableVirtualization) {
              if (this.isFiltering()) {
                this.isPreventScrollAction = true;
                this.list.scrollTop = 0;
                this.previousStartIndex = 0;
                this.virtualListInfo = null;
              }
              this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
              this.resetList(dataSource, fields, query);
              if (isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
                if (!this.list.querySelector(".e-virtual-ddl-content")) {
                  this.list.appendChild(this.createElement("div", {
                    className: "e-virtual-ddl-content",
                    styles: this.getTransformValues()
                  })).appendChild(this.list.querySelector(".e-list-parent"));
                }
                if (!this.list.querySelector(".e-virtual-ddl")) {
                  var virualElement = this.createElement("div", {
                    id: this.element.id + "_popup",
                    className: "e-virtual-ddl",
                    styles: this.GetVirtualTrackHeight()
                  });
                  document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
                }
              }
            }
            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
          }
          this.isTyped = true;
          if (!isNullOrUndefined(this.itemData) && this.getModuleName() === "dropdownlist") {
            this.focusIndexItem();
            this.setScrollPosition();
          }
          this.isNotSearchList = true;
        } else {
          this.isNotSearchList = false;
          query = this.filterInput.value.trim() === "" ? null : query;
          if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
            this.isPreventScrollAction = true;
            this.list.scrollTop = 0;
            this.previousStartIndex = 0;
            this.virtualListInfo = null;
          }
          this.resetList(dataSource, fields, query);
          if (this.getModuleName() === "dropdownlist" && this.list.classList.contains(dropDownBaseClasses.noData)) {
            this.popupContentElement.setAttribute("role", "status");
            this.popupContentElement.setAttribute("id", "no-record");
            attributes(this.filterInputObj.container, { "aria-activedescendant": "no-record" });
          }
          if (this.enableVirtualization && isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!this.list.querySelector(".e-virtual-ddl-content")) {
              this.list.appendChild(this.createElement("div", {
                className: "e-virtual-ddl-content",
                styles: this.getTransformValues()
              })).appendChild(this.list.querySelector(".e-list-parent"));
            }
            if (!this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-virtual-ddl",
                styles: this.GetVirtualTrackHeight()
              });
              document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
            }
          }
        }
        if (this.enableVirtualization) {
          this.getFilteringSkeletonCount();
        }
        this.renderReactTemplates();
      }
    };
    DropDownList2.prototype.setSearchBox = function(popupElement) {
      if (this.isFiltering()) {
        var parentElement = popupElement.querySelector("." + dropDownListClasses.filterParent) ? popupElement.querySelector("." + dropDownListClasses.filterParent) : this.createElement("span", {
          className: dropDownListClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: dropDownListClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        if (!isNullOrUndefined(this.cssClass)) {
          if (this.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], parentElement);
        prepend([parentElement], popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "click", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        if (!Browser.isDevice) {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        } else {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.mobileKeyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        }
        EventHandler.add(this.filterInput, "input", this.onInput, this);
        EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this);
        EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.pasteHandler, this);
        return this.filterInputObj;
      } else {
        return inputObject;
      }
    };
    DropDownList2.prototype.onInput = function(e) {
      this.isValidKey = true;
      if (this.getModuleName() === "combobox") {
        this.updateIconState();
      }
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.typedString = this.filterInput.value;
        this.preventAutoFill = true;
        this.searchLists(e);
      }
    };
    DropDownList2.prototype.pasteHandler = function(e) {
      var _this = this;
      setTimeout(function() {
        _this.typedString = _this.filterInput.value;
        _this.searchLists(e);
      });
    };
    DropDownList2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      if (this.beforePopupOpen) {
        this.renderPopup();
      }
    };
    DropDownList2.prototype.getTakeValue = function() {
      return this.allowFiltering && this.getModuleName() === "dropdownlist" && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;
    };
    DropDownList2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      if (this.dataSource instanceof DataManager && !isNullOrUndefined(e) && !this.virtualGroupDataSource) {
        this.totalItemCount = e.count;
      }
      if (this.isNotSearchList && !this.enableVirtualization) {
        this.isNotSearchList = false;
        return;
      }
      if (this.getInitialData) {
        this.updateActionCompleteDataValues(ulElement, list);
      }
      if (!this.preventPopupOpen && this.getModuleName() === "combobox") {
        this.beforePopupOpen = true;
        this.preventPopupOpen = true;
      }
      var tempItemCount = this.itemCount;
      if (this.isActive || !isNullOrUndefined(ulElement)) {
        var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;
        _super.prototype.onActionComplete.call(this, ulElement, list, e);
        this.skeletonCount = this.totalItemCount != 0 && this.totalItemCount < this.itemCount * 2 ? 0 : this.skeletonCount;
        this.updateSelectElementData(this.allowFiltering);
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === "keydown") {
          this.isRequested = false;
          this.keyActionHandler(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {
          this.incrementalSearch(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (!this.enableVirtualization) {
          this.list.scrollTop = 0;
        }
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false", "aria-label": "listbox" });
        }
        if (this.initialRemoteRender) {
          this.initial = true;
          this.activeIndex = this.index;
          this.initialRemoteRender = false;
          if (this.value && this.dataSource instanceof DataManager) {
            var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
            var value_5 = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(checkField_1, this.value) : this.value;
            var fieldValue_1 = this.fields.value.split(".");
            var checkVal = list.some(function(x) {
              return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === value_5 : x[checkField_1] === value_5;
            });
            if (this.enableVirtualization && this.virtualGroupDataSource) {
              checkVal = this.virtualGroupDataSource.some(function(x) {
                return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === value_5 : x[checkField_1] === value_5;
              });
            }
            if (!checkVal) {
              this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, "equal", value_5))).then(function(e2) {
                if (e2.result.length > 0) {
                  _this.addItem(e2.result, list.length);
                  _this.updateValues();
                } else {
                  _this.updateValues();
                }
              });
            } else {
              this.updateValues();
            }
          } else {
            this.updateValues();
          }
          this.initial = false;
        } else if (this.getModuleName() === "autocomplete" && this.value) {
          this.setInputValue();
        }
        if (this.getModuleName() !== "autocomplete" && this.isFiltering() && !this.isTyped) {
          if (!this.actionCompleteData.isUpdated || (!this.isCustomFilter && !this.isFilterFocus || isNullOrUndefined(this.itemData) && this.allowFiltering && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0))) {
            if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
              setTimeout(function() {
                _this.updateActionCompleteDataValues(ulElement, list);
              }, 0);
            } else {
              this.updateActionCompleteDataValues(ulElement, list);
            }
          }
          if ((this.allowCustom || this.allowFiltering && !this.isValueInList(list, this.value) && this.dataSource instanceof DataManager) && !this.enableVirtualization) {
            this.addNewItem(list, selectedItem);
          } else if ((this.allowCustom || this.allowFiltering && this.isValueInList(list, this.value)) && !this.enableVirtualization) {
            this.addNewItem(list, selectedItem);
          }
          if (!isNullOrUndefined(this.itemData) || isNullOrUndefined(this.itemData) && this.enableVirtualization) {
            this.getSkeletonCount();
            this.skeletonCount = this.totalItemCount != 0 && this.totalItemCount < this.itemCount * 2 ? 0 : this.skeletonCount;
            this.UpdateSkeleton();
            this.focusIndexItem();
          }
          if (this.enableVirtualization) {
            this.updateActionCompleteDataValues(ulElement, list);
          }
        } else if (this.enableVirtualization && this.getModuleName() !== "autocomplete" && !this.isFiltering()) {
          var value = this.getItemData().value;
          this.activeIndex = this.getIndexByValue(value);
          var element = this.findListElement(this.list, "li", "data-value", value);
          this.selectedLI = element;
        } else if (this.enableVirtualization && this.getModuleName() === "autocomplete") {
          this.activeIndex = this.skeletonCount;
        }
        if (this.beforePopupOpen) {
          this.renderPopup(e);
          if (this.enableVirtualization) {
            if (!this.list.querySelector(".e-virtual-list")) {
              this.UpdateSkeleton();
              this.liCollections = this.list.querySelectorAll(".e-list-item");
            }
          }
          if (this.enableVirtualization && tempItemCount != this.itemCount) {
            this.resetList(this.dataSource, this.fields);
          }
        }
      }
    };
    DropDownList2.prototype.isValueInList = function(list, valueToFind) {
      if (Array.isArray(list)) {
        for (var i = 0; i < list.length; i++) {
          if (list[i] === valueToFind) {
            return true;
          }
        }
      } else if (typeof list === "object" && list !== null) {
        for (var key in list) {
          if (Object.prototype.hasOwnProperty.call(list, key) && list[key] === valueToFind) {
            return true;
          }
        }
      }
      return false;
    };
    DropDownList2.prototype.checkFieldValue = function(list, fieldValue) {
      var checkField = list;
      fieldValue.forEach(function(value) {
        checkField = checkField[value];
      });
      return checkField;
    };
    DropDownList2.prototype.updateActionCompleteDataValues = function(ulElement, list) {
      this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list, isUpdated: true };
      if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.addNewItem = function(listData, newElement) {
      var _this = this;
      if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
        var value_6 = this.getItemData().value;
        var isExist = listData.some(function(data) {
          return (typeof data === "string" || typeof data === "number") && data === value_6 || getValue(_this.fields.value, data) === value_6;
        });
        if (!isExist) {
          this.addItem(this.itemData);
        }
      }
    };
    DropDownList2.prototype.updateActionCompleteData = function(li, item, index) {
      var _this = this;
      if (this.getModuleName() !== "autocomplete" && this.actionCompleteData.ulElement) {
        if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
          setTimeout(function() {
            _this.actionCompleteDataUpdate(li, item, index);
          }, 0);
        } else {
          this.actionCompleteDataUpdate(li, item, index);
        }
      }
    };
    DropDownList2.prototype.actionCompleteDataUpdate = function(li, item, index) {
      if (index !== null) {
        this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);
      } else {
        this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));
      }
      if (this.isFiltering() && this.actionCompleteData.list && this.actionCompleteData.list.indexOf(item) < 0) {
        this.actionCompleteData.list.push(item);
      }
    };
    DropDownList2.prototype.focusIndexItem = function() {
      var value = this.getItemData().value;
      this.activeIndex = this.enableVirtualization && !isNullOrUndefined(value) || !this.enableVirtualization ? this.getIndexByValue(value) : this.activeIndex;
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.selectedLI = element;
      this.activeItem(element);
      if (!(this.enableVirtualization && isNullOrUndefined(element))) {
        this.removeFocus();
      }
    };
    DropDownList2.prototype.updateSelection = function() {
      var selectedItem = this.list.querySelector("." + dropDownBaseClasses.selected);
      if (selectedItem) {
        this.setProperties({ "index": this.getIndexByValue(selectedItem.getAttribute("data-value")) });
        this.activeIndex = this.index;
      } else {
        this.removeFocus();
        this.list.querySelector("." + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.updateSelectionList = function() {
      var selectedItem = this.list && this.list.querySelector(".e-active");
      if (!selectedItem && !isNullOrUndefined(this.value)) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        var findEle = this.findListElement(this.list, "li", "data-value", value);
        if (findEle) {
          findEle.classList.add("e-active");
        }
      }
    };
    DropDownList2.prototype.removeFocus = function() {
      var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses.focus);
      if (highlightedItem && highlightedItem.length) {
        removeClass(highlightedItem, dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.renderPopup = function(e) {
      var _this = this;
      if (this.popupObj && document.body.contains(this.popupObj.element)) {
        this.refreshPopup();
        return;
      }
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle = _this.createElement("div", {
            id: _this.element.id + "_popup",
            className: "e-ddl e-popup " + (_this.cssClass !== null ? _this.cssClass : "")
          });
          popupEle.setAttribute("aria-label", _this.element.id);
          popupEle.setAttribute("role", "dialog");
          var searchBox = _this.setSearchBox(popupEle);
          _this.listContainerHeight = _this.allowFiltering && _this.getModuleName() === "dropdownlist" && Browser.isDevice ? formatUnit(Math.round(window.outerHeight).toString() + "px") : formatUnit(_this.popupHeight);
          if (_this.headerTemplate) {
            _this.setHeaderTemplate(popupEle);
          }
          append([_this.list], popupEle);
          if (_this.footerTemplate) {
            _this.setFooterTemplate(popupEle);
          }
          document.body.appendChild(popupEle);
          popupEle.style.top = "0px";
          if (_this.enableVirtualization && _this.itemTemplate) {
            var listitems = popupEle.querySelectorAll("li.e-list-item:not(.e-virtual-list)");
            _this.listItemHeight = listitems.length > 0 ? Math.ceil(listitems[0].getBoundingClientRect().height) : 0;
          }
          if (_this.enableVirtualization && !_this.list.classList.contains(dropDownBaseClasses.noData)) {
            _this.getSkeletonCount();
            _this.skeletonCount = _this.totalItemCount < _this.itemCount * 2 ? 0 : _this.skeletonCount;
            if (!_this.list.querySelector(".e-virtual-ddl-content")) {
              _this.list.appendChild(_this.createElement("div", {
                className: "e-virtual-ddl-content",
                styles: _this.getTransformValues()
              })).appendChild(_this.list.querySelector(".e-list-parent"));
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = _this.getTransformValues();
            }
            _this.UpdateSkeleton();
            _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
            _this.virtualItemCount = _this.itemCount;
            if (!_this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = _this.createElement("div", {
                id: _this.element.id + "_popup",
                className: "e-virtual-ddl",
                styles: _this.GetVirtualTrackHeight()
              });
              popupEle.querySelector(".e-dropdownbase").appendChild(virualElement);
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl")[0].style = _this.GetVirtualTrackHeight();
            }
          }
          popupEle.style.visibility = "hidden";
          if (_this.popupHeight !== "auto") {
            _this.searchBoxHeight = 0;
            if (!isNullOrUndefined(searchBox.container) && _this.getModuleName() !== "combobox" && _this.getModuleName() !== "autocomplete") {
              _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - _this.searchBoxHeight).toString() + "px";
            }
            if (_this.headerTemplate) {
              _this.header = _this.header ? _this.header : popupEle.querySelector(".e-ddl-header");
              var height = Math.round(_this.header.getBoundingClientRect().height);
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            if (_this.footerTemplate) {
              _this.footer = _this.footer ? _this.footer : popupEle.querySelector(".e-ddl-footer");
              var height = Math.round(_this.footer.getBoundingClientRect().height);
              _this.listContainerHeight = (parseInt(_this.listContainerHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            _this.list.style.maxHeight = (parseInt(_this.listContainerHeight, 10) - 2).toString() + "px";
            popupEle.style.maxHeight = formatUnit(_this.popupHeight);
          } else {
            popupEle.style.height = "auto";
          }
          var offsetValue = 0;
          var left = void 0;
          _this.isPreventScrollAction = true;
          if (!isNullOrUndefined(_this.selectedLI) && (!isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0)) {
            _this.setScrollPosition();
          } else if (_this.enableVirtualization) {
            _this.setScrollPosition();
          } else {
            _this.list.scrollTop = 0;
          }
          if (Browser.isDevice && (!_this.allowFiltering && (_this.getModuleName() === "dropdownlist" || _this.isDropDownClick && _this.getModuleName() === "combobox"))) {
            offsetValue = _this.getOffsetValue(popupEle);
            var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];
            if (!isNullOrUndefined(_this.inputElement)) {
              left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));
            }
          }
          _this.createPopup(popupEle, offsetValue, left);
          _this.popupContentElement = _this.popupObj.element.querySelector(".e-content");
          _this.getFocusElement();
          _this.checkCollision(popupEle);
          if (Browser.isDevice) {
            if (parseInt(_this.popupWidth.toString(), 10) > window.outerWidth && !(_this.getModuleName() === "dropdownlist" && _this.allowFiltering)) {
              _this.popupObj.element.classList.add("e-wide-popup");
            }
            _this.popupObj.element.classList.add(dropDownListClasses.device);
            if (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox" && !_this.allowFiltering && _this.isDropDownClick) {
              _this.popupObj.collision = { X: "fit", Y: "fit" };
            }
            if (_this.isFilterLayout()) {
              _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);
              _this.popupObj.position = { X: 0, Y: 0 };
              _this.popupObj.dataBind();
              attributes(_this.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
              addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);
              _this.setSearchBoxPosition();
              _this.backIconElement = searchBox.container.querySelector(".e-back-icon");
              _this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses.clearIcon);
              EventHandler.add(_this.backIconElement, "click", _this.clickOnBackIcon, _this);
              EventHandler.add(_this.clearIconElement, "click", _this.clearText, _this);
            }
          }
          popupEle.style.visibility = "visible";
          addClass([popupEle], "e-popup-close");
          var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);
          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element = scrollParentElements_1[_i];
            EventHandler.add(element, "scroll", _this.scrollHandler, _this);
          }
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          if (_this.enableVirtualization) {
            _this.notify("bindScrollEvent", {
              module: "VirtualScroll",
              component: _this.getModuleName(),
              enable: _this.enableVirtualization
            });
            setTimeout(function() {
              if (_this.value || _this.list.querySelector(".e-active")) {
                _this.updateSelectionList();
                if (_this.selectedValueInfo && _this.viewPortInfo && _this.viewPortInfo.offsets.top) {
                  _this.list.scrollTop = _this.viewPortInfo.offsets.top;
                } else {
                  _this.scrollBottom(true, true);
                }
              }
            }, 5);
          }
          attributes(_this.targetElement(), { "aria-expanded": "true", "aria-owns": _this.element.id + "_popup", "aria-controls": _this.element.id });
          if (_this.getModuleName() !== "dropdownlist" && _this.list.classList.contains("e-nodata")) {
            attributes(_this.targetElement(), { "aria-activedescendant": "no-record" });
            _this.popupContentElement.setAttribute("role", "status");
            _this.popupContentElement.setAttribute("id", "no-record");
          }
          _this.inputElement.setAttribute("aria-expanded", "true");
          _this.inputElement.setAttribute("aria-controls", _this.element.id + "_popup");
          var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;
          addClass([inputParent], [dropDownListClasses.inputFocus]);
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, event: e, cancel: false, animation: animModel };
          _this.trigger("open", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              if (!isNullOrUndefined(_this.inputWrapper)) {
                addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);
              }
              _this.renderReactTemplates();
              if (!isNullOrUndefined(_this.popupObj)) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.element : null);
              }
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    DropDownList2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "dropdownlist" || this.isDropDownClick)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.getOffsetValue = function(popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };
    DropDownList2.prototype.createPopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputWrapper.container,
        collision: this.enableRtl ? { X: "fit", Y: "flip" } : { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: this.enableRtl ? { X: "right", Y: "bottom" } : { X: "left", Y: "bottom" },
        zIndex: this.zIndex,
        close: function() {
          if (!_this.isDocumentClick) {
            _this.focusDropDown();
          }
          if (_this.isReact) {
            _this.clearTemplate(["headerTemplate", "footerTemplate"]);
          }
          _this.isNotSearchList = false;
          _this.isDocumentClick = false;
          _this.destroyPopup();
          if (_this.isFiltering() && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {
            _this.isActive = true;
            if (_this.enableVirtualization) {
              _this.onActionComplete(_this.ulElement, _this.listData, null, true);
            } else {
              _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);
            }
          }
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector("li");
          var ulElement = _this.list.querySelector("ul li");
          if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-item-focus")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-item-focus")[0].id });
          } else if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-active")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-active")[0].id });
          }
          if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && (actionList && ulElement && actionList.textContent !== ulElement.textContent) && _this.element.tagName !== "EJS-COMBOBOX") {
            _this.cloneElements();
          }
          if (_this.isFilterLayout()) {
            removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            _this.isFilterFocus = true;
            _this.filterInput.focus();
            if (_this.inputWrapper.clearButton) {
              addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }
          }
          _this.activeStateChange();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hidePopup();
          }
        }
      });
    };
    DropDownList2.prototype.isEmptyList = function() {
      return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
    };
    DropDownList2.prototype.getFocusElement = function() {
    };
    DropDownList2.prototype.isFilterLayout = function() {
      return this.getModuleName() === "dropdownlist" && this.allowFiltering;
    };
    DropDownList2.prototype.scrollHandler = function() {
      if (Browser.isDevice && (this.getModuleName() === "dropdownlist" && !this.isFilterLayout() || this.getModuleName() === "combobox" && !this.allowFiltering && this.isDropDownClick)) {
        if (this.element && !this.isElementInViewport(this.element)) {
          this.hidePopup();
        }
      }
    };
    DropDownList2.prototype.isElementInViewport = function(element) {
      var elementRect = element.getBoundingClientRect();
      return elementRect.top >= 0 && elementRect.left >= 0 && elementRect.bottom <= window.innerHeight && elementRect.right <= window.innerWidth;
    };
    ;
    DropDownList2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.popupObj.element.style.maxHeight = "100%";
      this.popupObj.element.style.width = "100%";
      this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px";
      this.list.style.height = window.innerHeight - searchBoxHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    DropDownList2.prototype.setPopupPosition = function(border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector("." + dropDownListClasses.focus) || this.selectedLI;
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      this.listItemHeight = liHeight;
      var listHeight = this.list.offsetHeight / 2;
      var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;
      if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
        var count = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight && !this.enableVirtualization) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }
      var inputHeight = this.inputWrapper.container.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };
    DropDownList2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      if (Browser.isDevice && width.indexOf("px") > -1 && (!this.allowFiltering && (this.getModuleName() === "dropdownlist" || this.isDropDownClick && this.getModuleName() === "combobox"))) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + "px";
      }
      return width;
    };
    DropDownList2.prototype.scrollBottom = function(isInitial, isInitialSelection, keyAction) {
      var _this = this;
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (isNullOrUndefined(this.selectedLI) && this.enableVirtualization) {
        this.selectedLI = this.list.querySelector("." + dropDownBaseClasses.li);
        if (!isNullOrUndefined(this.selectedLI) && this.selectedLI.classList.contains("e-virtual-list")) {
          this.selectedLI = this.liCollections[this.skeletonCount];
        }
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        this.isUpwardScrolling = false;
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var lastElementValue = this.list.querySelector("li:last-of-type") ? this.list.querySelector("li:last-of-type").getAttribute("data-value") : null;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
        var currentOffset = this.list.offsetHeight;
        var nextBottom = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        var isScrollerCHanged = false;
        var isScrollTopChanged = false;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);
        var boxRange = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
          isScrollerCHanged = this.isKeyBoardAction;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction == "pageDown" ? this.getPageCount() - 2 : 1;
          if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
            if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyAction != "end" && !this.isVirtualScrolling) {
              this.isPreventKeyAction = true;
              if (this.enableVirtualization && this.itemTemplate) {
                this.list.scrollTop += nextOffset;
              } else {
                if (this.enableVirtualization) {
                  liCount = keyAction == "pageDown" ? this.getPageCount() + 1 : liCount;
                }
                this.list.scrollTop += this.selectedLI.offsetHeight * liCount;
              }
              this.isPreventKeyAction = this.IsScrollerAtEnd() ? false : this.isPreventKeyAction;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            } else if (this.enableVirtualization && keyAction == "end") {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
              this.list.scrollTop = this.list.scrollHeight;
            } else {
              if (keyAction == "pageDown" && this.enableVirtualization && !this.isVirtualScrolling) {
                this.isPreventKeyAction = false;
                this.isKeyBoardAction = false;
                this.isPreventScrollAction = false;
              }
              this.list.scrollTop = nextOffset;
            }
          } else {
            this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight : 0;
          }
          isScrollerCHanged = this.isKeyBoardAction;
          isScrollTopChanged = true;
        }
        this.isKeyBoardAction = isScrollerCHanged;
        if (this.enableVirtualization && this.fields.groupBy && this.fixedHeaderElement && keyAction == "down") {
          setTimeout(function() {
            _this.scrollStop(null, true);
          }, 100);
        }
      }
    };
    DropDownList2.prototype.scrollTop = function(keyAction) {
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
        var nextOffset = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight - this.list.scrollTop;
        var firstElementValue = this.list.querySelector("li.e-list-item:not(.e-virtual-list)") ? this.list.querySelector("li.e-list-item:not(.e-virtual-list)").getAttribute("data-value") : null;
        nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        var isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === "autocomplete" && nextOffset <= 0;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0 || isPageUpKeyAction) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction == "pageUp" ? this.getPageCount() - 2 : 1;
          if (this.enableVirtualization) {
            liCount = keyAction == "pageUp" ? this.getPageCount() : liCount;
          }
          if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyAction != "home" && !this.isVirtualScrolling) {
            this.isUpwardScrolling = true;
            this.isPreventKeyAction = true;
            this.list.scrollTop -= this.selectedLI.offsetHeight * liCount;
            this.isPreventKeyAction = this.list.scrollTop != 0 ? this.isPreventKeyAction : false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          } else if (this.enableVirtualization && keyAction == "home") {
            this.isPreventScrollAction = false;
            this.isPreventKeyAction = true;
            this.isKeyBoardAction = false;
            this.list.scrollTo(0, 0);
          } else {
            if (keyAction == "pageUp" && this.enableVirtualization && !this.isVirtualScrolling) {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            }
            this.list.scrollTop = this.list.scrollTop + nextOffset;
          }
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };
    DropDownList2.prototype.isEditTextBox = function() {
      return false;
    };
    DropDownList2.prototype.isFiltering = function() {
      return this.allowFiltering;
    };
    DropDownList2.prototype.isPopupButton = function() {
      return true;
    };
    DropDownList2.prototype.setScrollPosition = function(e) {
      this.isPreventScrollAction = true;
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.isKeyBoardAction = true;
            this.scrollBottom(false, false, e.action);
            break;
          default:
            this.isKeyBoardAction = e.action == "up" || e.action == "pageUp" || e.action == "open";
            this.scrollTop(e.action);
            break;
        }
      } else {
        this.scrollBottom(true);
      }
      this.isKeyBoardAction = false;
    };
    DropDownList2.prototype.clearText = function() {
      this.filterInput.value = this.typedString = "";
      this.searchLists(null);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
        if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        }
        this.getSkeletonCount();
        this.UpdateSkeleton();
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownList2.prototype.setEleWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputWrapper.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    DropDownList2.prototype.closePopup = function(delay, e) {
      var _this = this;
      var isFilterValue = !isNullOrUndefined(this.filterInput) && !isNullOrUndefined(this.filterInput.value) && this.filterInput.value !== "";
      var typedString = this.getModuleName() === "combobox" ? this.typedString : null;
      this.isTyped = false;
      this.isVirtualTrackHeight = false;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      this.keyboardEvent = null;
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.isActive = false;
      if (this.getModuleName() === "dropdownlist") {
        Input.destroy({
          element: this.filterInput,
          floatLabelType: this.floatLabelType,
          properties: { placeholder: this.filterBarPlaceholder },
          buttons: this.clearIconElement
        }, this.clearIconElement);
      }
      this.filterInputObj = null;
      this.isDropDownClick = false;
      this.preventAutoFill = false;
      var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);
      for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
        var element = scrollableParentElements_1[_i];
        EventHandler.remove(element, "scroll", this.scrollHandler);
      }
      if (Browser.isDevice && this.isFilterLayout()) {
        removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);
      }
      if (this.isFilterLayout()) {
        if (!Browser.isDevice) {
          this.searchKeyModule.destroy();
          if (this.clearIconElement) {
            EventHandler.remove(this.clearIconElement, "click", this.clearText);
          }
        }
        if (this.backIconElement) {
          EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon);
          EventHandler.remove(this.clearIconElement, "click", this.clearText);
        }
        if (!isNullOrUndefined(this.filterInput)) {
          EventHandler.remove(this.filterInput, "input", this.onInput);
          EventHandler.remove(this.filterInput, "keyup", this.onFilterUp);
          EventHandler.remove(this.filterInput, "keydown", this.onFilterDown);
          EventHandler.remove(this.filterInput, "blur", this.onBlurHandler);
          EventHandler.remove(this.filterInput, "paste", this.pasteHandler);
        }
        if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
          this.filterInput.removeAttribute("aria-activedescendant");
          this.filterInput.removeAttribute("aria-disabled");
          this.filterInput.removeAttribute("role");
          this.filterInput.removeAttribute("autocomplete");
          this.filterInput.removeAttribute("autocapitalize");
          this.filterInput.removeAttribute("spellcheck");
        }
        this.filterInput = null;
      }
      attributes(this.targetElement(), { "aria-expanded": "false" });
      this.inputElement.setAttribute("aria-expanded", "false");
      this.targetElement().removeAttribute("aria-owns");
      this.targetElement().removeAttribute("aria-activedescendant");
      this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);
      if (this.isFiltering()) {
        this.actionCompleteData.isUpdated = false;
      }
      if (this.enableVirtualization) {
        if (this.value == null || this.isTyped) {
          this.viewPortInfo.endIndex = this.viewPortInfo && this.viewPortInfo.endIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
          if (this.getModuleName() === "autocomplete" || this.getModuleName() === "dropdownlist" && !isNullOrUndefined(this.typedString) && this.typedString != "" || this.getModuleName() === "combobox" && this.allowFiltering && !isNullOrUndefined(this.typedString) && this.typedString != "") {
            this.checkAndResetCache();
          }
        } else if (this.getModuleName() === "autocomplete") {
          this.checkAndResetCache();
        }
        if ((this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox") && !(this.skeletonCount == 0)) {
          this.getSkeletonCount(true);
        }
      }
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("close", eventArgs, function(eventArgs2) {
        if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector(".e-fixed-head"))) {
          var fixedHeader = _this.popupObj.element.querySelector(".e-fixed-head");
          fixedHeader.parentNode.removeChild(fixedHeader);
          _this.fixedHeaderElement = null;
        }
        if (!eventArgs2.cancel) {
          if (_this.getModuleName() === "autocomplete") {
            _this.rippleFun();
          }
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
      if (Browser.isDevice && !eventArgs.cancel && this.popupObj.element.classList.contains("e-wide-popup")) {
        this.popupObj.element.classList.remove("e-wide-popup");
      }
      var dataSourceCount;
      if (this.dataSource instanceof DataManager) {
        dataSourceCount = this.virtualGroupDataSource && this.virtualGroupDataSource.length ? this.virtualGroupDataSource.length : 0;
      } else {
        dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.enableVirtualization && this.isFiltering() && isFilterValue && this.totalItemCount !== dataSourceCount) {
        this.updateInitialData();
        this.checkAndResetCache();
      }
    };
    DropDownList2.prototype.updateInitialData = function() {
      var currentData = this.selectData;
      var ulElement = this.renderItems(currentData, this.fields);
      this.list.scrollTop = 0;
      this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
      if (this.getModuleName() === "combobox") {
        this.typedString = "";
      }
      this.previousStartIndex = 0;
      this.previousEndIndex = 0;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      }
      if (this.getModuleName() !== "autocomplete" && this.totalItemCount != 0 && this.totalItemCount > this.itemCount * 2) {
        this.getSkeletonCount();
      }
      this.UpdateSkeleton();
      this.listData = currentData;
      this.updateActionCompleteDataValues(ulElement, currentData);
      this.liCollections = this.list.querySelectorAll(".e-list-item");
      if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
    };
    DropDownList2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.isFilterFocus = false;
      this.inputElement.removeAttribute("aria-controls");
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownList2.prototype.clickOnBackIcon = function() {
      this.hidePopup();
      this.focusIn();
    };
    DropDownList2.prototype.render = function() {
      this.preselectedIndex = !isNullOrUndefined(this.index) ? this.index : null;
      if (this.element.tagName === "INPUT") {
        this.inputElement = this.element;
        if (isNullOrUndefined(this.inputElement.getAttribute("role"))) {
          this.inputElement.setAttribute("role", "combobox");
        }
        if (isNullOrUndefined(this.inputElement.getAttribute("type"))) {
          this.inputElement.setAttribute("type", "text");
        }
        this.inputElement.setAttribute("aria-expanded", "false");
      } else {
        this.inputElement = this.createElement("input", { attrs: { role: "combobox", type: "text" } });
        if (this.element.tagName !== this.getNgDirective()) {
          this.element.style.display = "none";
        }
        this.element.parentElement.insertBefore(this.inputElement, this.element);
        this.preventTabIndex(this.inputElement);
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.getModuleName() === "dropdownlist" ? true : this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.inputWrapper.container);
      } else {
        this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
      }
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "aria-label": this.getModuleName(), "tabindex": "-1", "class": dropDownListClasses.hiddenElement }
      });
      prepend([this.hiddenElement], this.inputWrapper.container);
      this.validationAttribute(this.element, this.hiddenElement);
      this.setReadOnly();
      this.setFields();
      this.inputWrapper.container.style.width = formatUnit(this.width);
      this.inputWrapper.container.classList.add("e-ddl");
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.wireEvent();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement.id = id + "_hidden";
      this.targetElement().setAttribute("tabindex", this.tabIndex);
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
        this.inputElement.setAttribute("aria-label", this.getModuleName());
      } else if (this.getModuleName() === "dropdownlist") {
        attributes(this.targetElement(), { "aria-label": this.getModuleName() });
        this.inputElement.setAttribute("aria-label", this.getModuleName());
        this.inputElement.setAttribute("aria-expanded", "false");
      }
      attributes(this.targetElement(), this.getAriaAttributes());
      this.updateDataAttribute(this.htmlAttributes);
      this.setHTMLAttributes();
      if (this.targetElement() === this.inputElement) {
        this.inputElement.removeAttribute("aria-labelledby");
      }
      if (this.value !== null || this.activeIndex !== null || this.text !== null) {
        if (this.enableVirtualization) {
          this.listItemHeight = this.getListHeight();
          this.getSkeletonCount();
          this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
          if (this.index !== null) {
            this.activeIndex = this.index + this.skeletonCount;
          }
        }
        this.initValue();
        this.selectedValueInfo = this.viewPortInfo;
        if (this.enableVirtualization) {
          this.activeIndex = this.activeIndex + this.skeletonCount;
        }
      } else if (this.element.tagName === "SELECT" && this.element.options[0]) {
        var selectElement = this.element;
        this.value = this.allowObjectBinding ? this.getDataByValue(selectElement.options[selectElement.selectedIndex].value) : selectElement.options[selectElement.selectedIndex].value;
        this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
        this.initValue();
      }
      this.setEnabled();
      this.preventTabIndex(this.element);
      if (!this.enabled) {
        this.targetElement().tabIndex = -1;
      }
      this.initial = false;
      this.element.style.opacity = "";
      this.inputElement.onselect = function(e) {
        e.stopImmediatePropagation();
      };
      this.inputElement.onchange = function(e) {
        e.stopImmediatePropagation();
      };
      if (this.element.hasAttribute("autofocus")) {
        this.focusIn();
      }
      if (!isNullOrUndefined(this.text)) {
        this.inputElement.setAttribute("value", this.text);
      }
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      var floatLabelElement = this.inputWrapper.container.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(this.element.id) && this.element.id !== "" && !isNullOrUndefined(floatLabelElement)) {
        floatLabelElement.id = "label_" + this.element.id.replace(/ /g, "_");
        attributes(this.inputElement, { "aria-labelledby": floatLabelElement.id });
      }
      this.renderComplete();
      this.listItemHeight = this.getListHeight();
      this.getSkeletonCount();
      if (this.enableVirtualization) {
        this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
      }
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
    };
    DropDownList2.prototype.getListHeight = function() {
      var listParent = this.createElement("div", {
        className: "e-dropdownbase"
      });
      var item = this.createElement("li", {
        className: "e-list-item"
      });
      var listParentHeight = formatUnit(this.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + "px";
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualListHeight = listParent.getBoundingClientRect().height;
      var listItemHeight = Math.ceil(item.getBoundingClientRect().height);
      listParent.remove();
      return listItemHeight;
    };
    DropDownList2.prototype.setFooterTemplate = function(popupEle) {
      var compiledString;
      if (this.footer) {
        if (this.isReact && typeof this.footerTemplate === "function") {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], dropDownListClasses.footer);
      }
      var footercheck = this.dropdownCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var footerCompTemp = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (footerCompTemp && footerCompTemp.length > 0) {
        append(footerCompTemp, this.footer);
      }
      append([this.footer], popupEle);
    };
    DropDownList2.prototype.setHeaderTemplate = function(popupEle) {
      var compiledString;
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], dropDownListClasses.header);
      }
      var headercheck = this.dropdownCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var headerCompTemp = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (headerCompTemp && headerCompTemp.length) {
        append(headerCompTemp, this.header);
      }
      var contentEle = popupEle.querySelector("div.e-content");
      popupEle.insertBefore(this.header, contentEle);
    };
    DropDownList2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    DropDownList2.prototype.setOldText = function(text) {
      this.text = text;
    };
    DropDownList2.prototype.setOldValue = function(value) {
      this.value = value;
    };
    DropDownList2.prototype.refreshPopup = function() {
      if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === "autocomplete")) {
        removeClass([this.popupObj.element], "e-popup-close");
        this.popupObj.refreshPosition(this.inputWrapper.container);
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.checkData = function(newProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering && !(this.isListSearched && newProp.dataSource instanceof DataManager)) {
        this.list = null;
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
      }
      this.isListSearched = false;
      var isChangeValue = Object.keys(newProp).indexOf("value") !== -1 && isNullOrUndefined(newProp.value);
      var isChangeText = Object.keys(newProp).indexOf("text") !== -1 && isNullOrUndefined(newProp.text);
      if (this.getModuleName() !== "autocomplete" && this.allowFiltering && (isChangeValue || isChangeText)) {
        this.itemData = null;
      }
      if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
        this.actionData = this.actionCompleteData;
      } else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        this.actionCompleteData = this.getModuleName() === "combobox" ? { ulElement: null, list: null, isUpdated: false } : this.actionCompleteData;
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.updateDataSource = function(props, oldProps) {
      if (this.inputElement.value !== "" || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {
        this.clearAll(null, props);
      }
      if (this.fields.groupBy && props.fields && !this.isGroupChecking && this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || (props.dataSource instanceof DataManager || !isNullOrUndefined(props) && Array.isArray(props.dataSource) && !isNullOrUndefined(oldProps) && Array.isArray(oldProps.dataSource) && props.dataSource.length !== oldProps.dataSource.length)) {
        this.typedString = "";
        this.resetList(this.dataSource);
      }
      if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
        this.checkCustomValue();
      }
    };
    DropDownList2.prototype.checkCustomValue = function() {
      var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      this.itemData = this.getDataByValue(currentValue);
      var dataItem = this.getItemData();
      var value = this.allowObjectBinding ? this.itemData : dataItem.value;
      this.setProperties({ "text": dataItem.text, "value": value });
    };
    DropDownList2.prototype.updateInputFields = function() {
      if (this.getModuleName() === "dropdownlist") {
        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DropDownList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (!isNullOrUndefined(newProp.dataSource) && !this.isTouched && (isNullOrUndefined(newProp.value) && isNullOrUndefined(newProp.index)) && !isNullOrUndefined(this.preselectedIndex) && !isNullOrUndefined(this.index)) {
        newProp.index = this.index;
      }
      if (!isNullOrUndefined(newProp.value) || !isNullOrUndefined(newProp.index)) {
        this.isTouched = true;
      }
      if (this.getModuleName() === "dropdownlist") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "query":
          case "dataSource":
            this_1.getSkeletonCount();
            this_1.checkAndResetCache();
            break;
          case "htmlAttributes":
            this_1.setHTMLAttributes();
            break;
          case "width":
            this_1.setEleWidth(newProp.width);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this_1.inputElement);
            break;
          case "filterBarPlaceholder":
            if (this_1.filterInput) {
              Input.setPlaceholder(newProp.filterBarPlaceholder, this_1.filterInput);
            }
            break;
          case "readonly":
            if (this_1.getModuleName() !== "dropdownlist") {
              Input.setReadonly(newProp.readonly, this_1.inputElement);
            }
            this_1.setReadOnly();
            break;
          case "cssClass":
            this_1.setCssClass(newProp.cssClass, oldProp.cssClass);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "enableRtl":
            this_1.setEnableRtl();
            break;
          case "enabled":
            this_1.setEnable();
            break;
          case "text":
            if (this_1.fields.disabled) {
              newProp.text = newProp.text && !this_1.isDisabledItemByIndex(this_1.getIndexByValue(this_1.getValueByText(newProp.text))) ? newProp.text : null;
            }
            if (newProp.text === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var li = this_1.getElementByText(newProp.text);
              if (!this_1.checkValidLi(li)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.text, oldProp.text, "text");
                } else if (newProp.text && this_1.dataSource instanceof DataManager) {
                  var listLength_1 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.text) ? this_1.fields.value : this_1.fields.text;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.text))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_1);
                      _this.updateValues();
                    } else {
                      _this.setOldText(oldProp.text);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldText(oldProp.text);
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "value":
            if (this_1.fields.disabled) {
              newProp.value = newProp.value != null && !this_1.isDisableItemValue(newProp.value) ? newProp.value : null;
            }
            if (newProp.value === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) && !isNullOrUndefined(oldProp.value) && this_1.isObjectInArray(newProp.value, [oldProp.value])) {
              return { value: void 0 };
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
              break;
            }
            this_1.notify("beforeValueChange", { newProp });
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var value = this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) ? getValue(this_1.fields.value ? this_1.fields.value : "", newProp.value) : newProp.value;
              var item = this_1.getElementByValue(value);
              if (!this_1.checkValidLi(item)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.value, oldProp.value, "value");
                } else if (newProp.value && this_1.dataSource instanceof DataManager) {
                  var listLength_2 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.value) ? this_1.fields.text : this_1.fields.value;
                  this_1.typedString = "";
                  var value_7 = this_1.allowObjectBinding && !isNullOrUndefined(newProp.value) ? getValue(checkField, newProp.value) : newProp.value;
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", value_7))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_2);
                      _this.updateValues();
                    } else {
                      _this.setOldValue(oldProp.value);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldValue(oldProp.value);
                }
              }
              this_1.updateInputFields();
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
            }
            break;
          case "index":
            if (this_1.fields.disabled) {
              newProp.index = newProp.index != null && !this_1.isDisabledItemByIndex(newProp.index) ? newProp.index : null;
            }
            if (newProp.index === null) {
              this_1.clearAll();
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender && this_1.liCollections) {
              var element = this_1.liCollections[newProp.index];
              if (!this_1.checkValidLi(element)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.index, oldProp.index, "index");
                } else {
                  this_1.index = oldProp.index;
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "footerTemplate":
            if (this_1.popupObj) {
              this_1.setFooterTemplate(this_1.popupObj.element);
            }
            break;
          case "headerTemplate":
            if (this_1.popupObj) {
              this_1.setHeaderTemplate(this_1.popupObj.element);
            }
            break;
          case "valueTemplate":
            if (!isNullOrUndefined(this_1.itemData) && this_1.valueTemplate !== null) {
              this_1.setValueTemplate();
            }
            break;
          case "allowFiltering":
            if (this_1.allowFiltering) {
              this_1.actionCompleteData = {
                ulElement: this_1.ulElement,
                list: this_1.listData,
                isUpdated: true
              };
              this_1.actionData = this_1.actionCompleteData;
              this_1.updateSelectElementData(this_1.allowFiltering);
            }
            break;
          case "floatLabelType":
            Input.removeFloating(this_1.inputWrapper);
            Input.addFloating(this_1.inputElement, newProp.floatLabelType, this_1.placeholder, this_1.createElement);
            if (!isNullOrUndefined(this_1.inputWrapper.buttons[0]) && this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0] && this_1.floatLabelType !== "Never") {
              this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "showClearButton":
            if (!this_1.inputWrapper.clearButton) {
              Input.setClearButton(newProp.showClearButton, this_1.inputElement, this_1.inputWrapper, null, this_1.createElement);
              this_1.bindClearEvent();
            }
            break;
          default:
            {
              var ddlProps = this_1.getPropObject(prop2, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this_1, ddlProps.newProperty, ddlProps.oldProperty);
            }
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var state_1 = _loop_1(prop);
        if (typeof state_1 === "object")
          return state_1.value;
      }
    };
    DropDownList2.prototype.checkValidLi = function(element) {
      if (this.isValidLI(element)) {
        this.setSelection(element, null);
        return true;
      }
      return false;
    };
    DropDownList2.prototype.setSelectionData = function(newProp, oldProp, prop) {
      var _this = this;
      var li;
      this.updateListValues = function() {
        if (prop === "text") {
          li = _this.getElementByText(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldText(oldProp);
          }
        } else if (prop === "value") {
          var fields = _this.fields.value ? _this.fields.value : "";
          var value = _this.allowObjectBinding && !isNullOrUndefined(newProp) ? getValue(fields, newProp) : newProp;
          li = _this.getElementByValue(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldValue(oldProp);
          }
        } else if (prop === "index") {
          li = _this.liCollections[newProp];
          if (!_this.checkValidLi(li)) {
            _this.index = oldProp;
          }
        }
      };
    };
    DropDownList2.prototype.updatePopupState = function() {
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.showPopup();
      }
    };
    DropDownList2.prototype.setReadOnly = function() {
      if (this.readonly) {
        addClass([this.inputWrapper.container], ["e-readonly"]);
      } else {
        removeClass([this.inputWrapper.container], ["e-readonly"]);
      }
    };
    DropDownList2.prototype.setInputValue = function(newProp, oldProp) {
    };
    DropDownList2.prototype.setCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);
      if (this.popupObj) {
        Input.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    DropDownList2.prototype.getModuleName = function() {
      return "dropdownlist";
    };
    DropDownList2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      if (this.isReact && this.getModuleName() === "combobox" && this.itemTemplate && this.isCustomFilter && this.isAddNewItemTemplate) {
        this.renderList();
        this.isAddNewItemTemplate = false;
      }
      if (this.isFiltering() && this.dataSource instanceof DataManager && this.actionData.list !== this.actionCompleteData.list && this.actionData.list && this.actionData.ulElement) {
        this.actionCompleteData = this.actionData;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
        this.isActive = true;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll("." + dropDownBaseClasses.li).length <= 0)) {
        if (this.isReact && this.isFiltering() && this.itemTemplate != null) {
          this.isSecondClick = false;
        }
        this.renderList(e);
      }
      if (this.enableVirtualization && this.listData && this.listData.length) {
        if (!isNullOrUndefined(this.value) && (this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox")) {
          this.removeHover();
        }
        if (!this.beforePopupOpen) {
          this.notify("setCurrentViewDataAsync", {
            module: "VirtualScroll"
          });
        }
      }
      if (this.beforePopupOpen) {
        this.invokeRenderPopup(e);
      }
      if (this.enableVirtualization && !this.allowFiltering && this.selectedValueInfo != null && this.selectedValueInfo.startIndex > 0 && this.value != null) {
        this.notify("dataProcessAsync", {
          module: "VirtualScroll",
          isOpen: true
        });
      }
    };
    DropDownList2.prototype.invokeRenderPopup = function(e) {
      if (Browser.isDevice && this.isFilterLayout()) {
        var proxy_2 = this;
        window.onpopstate = function() {
          proxy_2.hidePopup();
        };
        history.pushState({}, "");
      }
      if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData))) {
        this.renderPopup(e);
      }
    };
    DropDownList2.prototype.renderHightSearch = function() {
    };
    DropDownList2.prototype.hidePopup = function(e) {
      if (this.isEscapeKey && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.inputElement)) {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.isEscapeKey = false;
        if (!isNullOrUndefined(this.index)) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          var element = this.findListElement(this.ulElement, "li", "data-value", value);
          this.selectedLI = this.liCollections[this.index] || element;
          if (this.selectedLI) {
            this.updateSelectedItem(this.selectedLI, null, true);
            if (this.valueTemplate && this.itemData !== null) {
              this.setValueTemplate();
            }
          }
        } else {
          this.resetSelection();
        }
      }
      this.isVirtualTrackHeight = false;
      this.customFilterQuery = null;
      this.closePopup(0, e);
      var dataItem = this.getItemData();
      var isSelectVal = !isNullOrUndefined(this.selectedLI);
      if (isSelectVal && this.enableVirtualization && this.selectedLI.classList) {
        isSelectVal = this.selectedLI.classList.contains("e-active");
      }
      if (this.inputElement && this.inputElement.value.trim() === "" && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {
        this.isSelectCustom = false;
        this.clearAll(e);
      }
    };
    DropDownList2.prototype.focusIn = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
        return;
      }
      var isFocused = false;
      if (this.preventFocus && Browser.isDevice) {
        this.inputWrapper.container.tabIndex = 1;
        this.inputWrapper.container.focus();
        this.preventFocus = false;
        isFocused = true;
      }
      if (!isFocused) {
        this.targetElement().focus();
      }
      addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      this.onFocus(e);
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.focusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.enableVirtualization && (this.getModuleName() === "combobox" || this.getModuleName() === "autocomplete")) {
        this.isTyped = true;
      }
      this.hidePopup(e);
      if (this.targetElement()) {
        this.targetElement().blur();
      }
      removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.disableItem = function(item) {
      if (this.fields.disabled) {
        if (!this.list) {
          this.renderList();
        }
        var itemIndex = -1;
        if (this.liCollections && this.liCollections.length > 0 && this.listData && this.fields.disabled) {
          if (typeof item === "string") {
            itemIndex = this.getIndexByValue(item);
          } else if (typeof item === "object") {
            if (item instanceof HTMLLIElement) {
              for (var index = 0; index < this.liCollections.length; index++) {
                if (this.liCollections[index] === item) {
                  itemIndex = this.getIndexByValue(item.getAttribute("data-value"));
                  break;
                }
              }
            } else {
              var value = JSON.parse(JSON.stringify(item))[this.fields.value];
              for (var index = 0; index < this.listData.length; index++) {
                if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.value] === value) {
                  itemIndex = this.getIndexByValue(value);
                  break;
                }
              }
            }
          } else {
            itemIndex = item;
          }
          var isValidIndex = itemIndex < this.liCollections.length && itemIndex > -1;
          if (isValidIndex && !JSON.parse(JSON.stringify(this.listData[itemIndex]))[this.fields.disabled]) {
            var li = this.liCollections[itemIndex];
            if (li) {
              this.disableListItem(li);
              var parsedData = JSON.parse(JSON.stringify(this.listData[itemIndex]));
              parsedData[this.fields.disabled] = true;
              this.listData[itemIndex] = parsedData;
              this.dataSource = this.listData;
              if (li.classList.contains(dropDownListClasses.focus)) {
                this.removeFocus();
              }
              if (li.classList.contains(dropDownListClasses.selected)) {
                this.clear();
              }
            }
          }
        }
      }
    };
    DropDownList2.prototype.destroy = function() {
      this.isActive = false;
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      resetIncrementalSearchValues(this.element.id);
      if (this.isReact) {
        this.clearTemplate();
      }
      this.hidePopup();
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.element && !this.element.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      if (this.inputElement) {
        var attrArray = [
          "readonly",
          "aria-disabled",
          "placeholder",
          "aria-labelledby",
          "aria-expanded",
          "autocomplete",
          "aria-readonly",
          "autocapitalize",
          "spellcheck",
          "aria-autocomplete",
          "aria-live",
          "aria-describedby",
          "aria-label"
        ];
        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }
        this.inputElement.setAttribute("tabindex", this.tabIndex);
        this.inputElement.classList.remove("e-input");
        Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.element.style.display = "block";
      if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
        detach(this.inputWrapper.container);
      } else {
        this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
        detach(this.inputWrapper.container);
      }
      delete this.hiddenElement;
      this.filterInput = null;
      this.keyboardModule = null;
      this.ulElement = null;
      this.list = null;
      this.clearIconElement = null;
      this.popupObj = null;
      this.popupContentElement = null;
      this.rippleFun = null;
      this.selectedLI = null;
      this.liCollections = null;
      this.item = null;
      this.footer = null;
      this.header = null;
      this.previousSelectedLI = null;
      this.valueTempElement = null;
      this.actionData.ulElement = null;
      if (this.inputElement && !isNullOrUndefined(this.inputElement.onchange)) {
        this.inputElement.onchange = null;
      }
      if (this.inputElement && !isNullOrUndefined(this.inputElement.onselect)) {
        this.inputElement.onselect = null;
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties,
        buttons: this.inputWrapper.container.querySelectorAll(".e-input-group-icon")[0]
      }, this.clearButton);
      this.clearButton = null;
      this.inputElement = null;
      this.inputWrapper = null;
      _super.prototype.destroy.call(this);
    };
    DropDownList2.prototype.getItems = function() {
      if (!this.list) {
        if (this.dataSource instanceof DataManager) {
          this.initialRemoteRender = true;
        }
        this.renderList();
      }
      return this.ulElement ? _super.prototype.getItems.call(this) : [];
    };
    DropDownList2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    DropDownList2.prototype.clear = function() {
      this.value = null;
    };
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "cssClass", void 0);
    __decorate28([
      Property("100%")
    ], DropDownList2.prototype, "width", void 0);
    __decorate28([
      Property(true)
    ], DropDownList2.prototype, "enabled", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "enablePersistence", void 0);
    __decorate28([
      Property("300px")
    ], DropDownList2.prototype, "popupHeight", void 0);
    __decorate28([
      Property("100%")
    ], DropDownList2.prototype, "popupWidth", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "placeholder", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "filterBarPlaceholder", void 0);
    __decorate28([
      Property({})
    ], DropDownList2.prototype, "htmlAttributes", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "query", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "valueTemplate", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "headerTemplate", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "footerTemplate", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "allowFiltering", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "readonly", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "enableVirtualization", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "text", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "value", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "allowObjectBinding", void 0);
    __decorate28([
      Property(null)
    ], DropDownList2.prototype, "index", void 0);
    __decorate28([
      Property("Never")
    ], DropDownList2.prototype, "floatLabelType", void 0);
    __decorate28([
      Property(false)
    ], DropDownList2.prototype, "showClearButton", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "filtering", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "change", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "beforeOpen", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "open", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "close", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "blur", void 0);
    __decorate28([
      Event()
    ], DropDownList2.prototype, "focus", void 0);
    DropDownList2 = __decorate28([
      NotifyPropertyChanges
    ], DropDownList2);
    return DropDownList2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate29 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL10 = "e-rtl";
var DROPDOWNTREE = "e-ddt";
var HIDDENELEMENT2 = "e-ddt-hidden";
var DROPDOWNICON = "e-input-group-icon e-ddt-icon e-icons";
var SHOW_CHIP = "e-show-chip";
var SHOW_CLEAR = "e-show-clear";
var SHOW_DD_ICON = "e-show-dd-icon";
var CHIP_INPUT = "e-chip-input";
var INPUTFOCUS4 = "e-input-focus";
var INPUTGROUP2 = "e-input-group";
var ICONANIMATION3 = "e-icon-anim";
var CLOSEICON_CLASS = "e-clear-icon e-icons";
var CHIP_WRAPPER = "e-chips-wrapper";
var CHIP_COLLECTION = "e-chips-collection";
var CHIP = "e-chips";
var CHIP_CONTENT = "e-chipcontent";
var CHIP_CLOSE = "e-chips-close";
var HIDEICON = "e-icon-hide";
var DDTHIDEICON = "e-ddt-icon-hide";
var POPUP_CLASS = "e-ddt e-popup";
var PARENTITEM2 = "e-list-parent";
var CONTENT6 = "e-popup-content";
var DROPDOWN = "e-dropdown";
var DISABLED9 = "e-disabled";
var ICONS4 = "e-icons";
var CHECKALLPARENT = "e-selectall-parent";
var CHECKALLHIDE = "e-hide-selectall";
var BIGGER2 = "e-bigger";
var SMALL2 = "e-small";
var ALLTEXT = "e-all-text";
var CHECKBOXFRAME2 = "e-frame";
var CHECK2 = "e-check";
var CHECKBOXWRAP2 = "e-checkbox-wrapper";
var FILTERWRAP = "e-filter-wrap";
var DDTICON = "e-ddt-icon";
var FOOTER3 = "e-ddt-footer";
var HEADER4 = "e-ddt-header";
var NODATACONTAINER = "e-ddt-nodata";
var NODATA = "e-no-data";
var HEADERTEMPLATE = "HeaderTemplate";
var FOOTERTEMPLATE = "FooterTemplate";
var NORECORDSTEMPLATE = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE = "ActionFailureTemplate";
var CUSTOMTEMPLATE = "CustomTemplate";
var REMAIN_WRAPPER = "e-remain";
var OVERFLOW_VIEW = "e-overflow";
var SHOW_TEXT = "e-show-text";
var TOTAL_COUNT_WRAPPER = "e-total-count";
var REMAIN_COUNT = "e-wrap-count";
var Fields = (
  /** @class */
  function(_super) {
    __extends32(Fields2, _super);
    function Fields2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate29([
      Property("child")
    ], Fields2.prototype, "child", void 0);
    __decorate29([
      Property([])
    ], Fields2.prototype, "dataSource", void 0);
    __decorate29([
      Property("expanded")
    ], Fields2.prototype, "expanded", void 0);
    __decorate29([
      Property("hasChildren")
    ], Fields2.prototype, "hasChildren", void 0);
    __decorate29([
      Property("htmlAttributes")
    ], Fields2.prototype, "htmlAttributes", void 0);
    __decorate29([
      Property("iconCss")
    ], Fields2.prototype, "iconCss", void 0);
    __decorate29([
      Property("imageUrl")
    ], Fields2.prototype, "imageUrl", void 0);
    __decorate29([
      Property("parentValue")
    ], Fields2.prototype, "parentValue", void 0);
    __decorate29([
      Property(null)
    ], Fields2.prototype, "query", void 0);
    __decorate29([
      Property("selectable")
    ], Fields2.prototype, "selectable", void 0);
    __decorate29([
      Property("selected")
    ], Fields2.prototype, "selected", void 0);
    __decorate29([
      Property(null)
    ], Fields2.prototype, "tableName", void 0);
    __decorate29([
      Property("text")
    ], Fields2.prototype, "text", void 0);
    __decorate29([
      Property("tooltip")
    ], Fields2.prototype, "tooltip", void 0);
    __decorate29([
      Property("value")
    ], Fields2.prototype, "value", void 0);
    return Fields2;
  }(ChildProperty)
);
var TreeSettings = (
  /** @class */
  function(_super) {
    __extends32(TreeSettings2, _super);
    function TreeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate29([
      Property(false)
    ], TreeSettings2.prototype, "autoCheck", void 0);
    __decorate29([
      Property("Auto")
    ], TreeSettings2.prototype, "expandOn", void 0);
    __decorate29([
      Property(false)
    ], TreeSettings2.prototype, "loadOnDemand", void 0);
    return TreeSettings2;
  }(ChildProperty)
);
var DropDownTree = (
  /** @class */
  function(_super) {
    __extends32(DropDownTree2, _super);
    function DropDownTree2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.filterTimer = null;
      _this.isFilteredData = false;
      _this.isFilterRestore = false;
      _this.selectedData = [];
      _this.filterDelayTime = 300;
      _this.isClicked = false;
      _this.isCheckAllCalled = false;
      _this.isFromFilterChange = false;
      return _this;
    }
    DropDownTree2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    DropDownTree2.prototype.getLocaleName = function() {
      return "drop-down-tree";
    };
    DropDownTree2.prototype.preRender = function() {
      this.inputFocus = false;
      this.isPopupOpen = false;
      this.isFirstRender = true;
      this.isInitialized = false;
      this.currentText = null;
      this.currentValue = null;
      this.oldValue = null;
      this.removeValue = false;
      this.selectedText = [];
      this.treeItems = [];
      this.dataValue = null;
      this.isNodeSelected = false;
      this.isDynamicChange = false;
      this.clearIconWidth = 0;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE;
      this.customTemplateId = "" + this.element.id + CUSTOMTEMPLATE;
      this.keyConfigs = {
        escape: "escape",
        altUp: "alt+uparrow",
        altDown: "alt+downarrow",
        tab: "tab",
        shiftTab: "shift+tab",
        end: "end",
        enter: "enter",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        ctrlA: "ctrl+A"
      };
    };
    DropDownTree2.prototype.render = function() {
      var isTree = select("#" + this.element.id + "_tree", document);
      if (isTree) {
        var popupDiv = select("#" + this.element.id + "_options", document);
        detach(popupDiv ? popupDiv : isTree.parentElement);
      }
      if (this.element.tagName === "INPUT") {
        this.inputEle = this.element;
        if (isNullOrUndefined(this.inputEle.getAttribute("role"))) {
          this.inputEle.setAttribute("aria-expanded", "false");
          this.inputEle.setAttribute("role", "combobox");
          this.inputEle.setAttribute("aria-haspopup", "tree");
          this.inputEle.setAttribute("aria-controls", this.element.id + "_options");
        }
        if (isNullOrUndefined(this.inputEle.getAttribute("type"))) {
          this.inputEle.setAttribute("type", "text");
        }
      } else {
        this.inputEle = this.createElement("input", { attrs: { role: "textbox", type: "text" } });
        this.element.parentElement.insertBefore(this.inputEle, this.element);
      }
      this.inputObj = Input.createInput({
        element: this.inputEle,
        floatLabelType: this.floatLabelType,
        buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,
        properties: {
          readonly: true,
          placeholder: this.placeholder,
          enabled: this.enabled,
          cssClass: this.cssClass,
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputWrapper = this.inputObj.container;
      if (!this.inputWrapper.classList.contains(INPUTGROUP2)) {
        this.inputWrapper.classList.add(INPUTGROUP2);
      }
      if (this.showDropDownIcon) {
        this.inputWrapper.classList.add(SHOW_DD_ICON);
      }
      if (this.element.tagName === this.getDirective()) {
        this.element.appendChild(this.inputWrapper);
      }
      this.createHiddenElement();
      this.createClearIcon();
      this.inputWrapper.classList.add(DROPDOWNTREE);
      this.setElementWidth(this.width);
      this.updateDataAttribute();
      this.setHTMLAttributes();
      this.setAttributes();
      this.popupDiv = this.createElement("div", { className: CONTENT6 });
      this.popupDiv.classList.add(DROPDOWN);
      this.tree = this.createElement("div", { id: this.element.id + "_tree" });
      this.popupDiv.appendChild(this.tree);
      if (!this.destroyPopupOnHide) {
        document.body.appendChild(this.popupDiv);
      }
      this.wireTreeEvents();
      addClass([this.popupDiv], DDTHIDEICON);
      this.renderTree();
      this.isRemoteData = this.fields.dataSource instanceof DataManager;
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter") {
          this.createChip();
        }
        if (!this.wrapText && this.mode !== "Custom") {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
          if (this.mode !== "Box") {
            addClass([this.overFlowWrapper], SHOW_TEXT);
          }
        }
      }
      if (!this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
      }
      this.wireEvents();
      var firstUl = select("." + PARENTITEM2, this.treeObj.element);
      if (firstUl && firstUl.getAttribute("aria-multiselectable")) {
        firstUl.removeAttribute("aria-multiselectable");
      }
      this.oldValue = this.value;
      this.isInitialized = true;
      this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate || this.noRecordsTemplate || this.customTemplate;
      this.renderComplete();
    };
    DropDownTree2.prototype.hideCheckAll = function(flag) {
      var checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector("." + CHECKALLPARENT) : null;
      if (!isNullOrUndefined(checkAllEle)) {
        if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {
          addClass([checkAllEle], CHECKALLHIDE);
        } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {
          removeClass([checkAllEle], CHECKALLHIDE);
        }
      }
    };
    DropDownTree2.prototype.renderFilter = function() {
      this.filterContainer = this.createElement("div", {
        id: this.element.id + "_filter_wrap",
        className: FILTERWRAP
      });
      var filterInput2 = this.createElement("input", {
        id: this.element.id + "_filter",
        attrs: { autocomplete: "off", "aria-label": this.filterBarPlaceholder }
      });
      this.filterContainer.appendChild(filterInput2);
      prepend([this.filterContainer], this.popupEle);
      this.filterObj = new TextBox({
        value: "",
        showClearButton: true,
        placeholder: this.filterBarPlaceholder,
        input: this.filterChangeHandler.bind(this)
      });
      this.filterObj.appendTo("#" + this.element.id + "_filter");
    };
    DropDownTree2.prototype.filterChangeHandler = function(args) {
      var _this = this;
      if (!isNullOrUndefined(args.value)) {
        window.clearTimeout(this.filterTimer);
        this.filterTimer = window.setTimeout(function() {
          _this.filterHandler(args.value, args.event);
        }, this.filterDelayTime);
      }
    };
    DropDownTree2.prototype.isChildObject = function() {
      if (typeof this.treeObj.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.filterHandler = function(value, event2) {
      var _this = this;
      this.isFromFilterChange = true;
      if (!this.isFilteredData) {
        if (this.isRemoteData) {
          this.treeObj.expandedNodes = [];
        }
        this.treeData = this.treeObj.getTreeData();
      }
      var filterFields = this.cloneFields(this.fields);
      var args = {
        cancel: false,
        preventDefaultAction: false,
        event: event2,
        text: value.trim(),
        fields: filterFields
      };
      this.trigger("filtering", args, function(args2) {
        if (!args2.cancel) {
          var flag = false;
          var fields = void 0;
          _this.isFilteredData = true;
          if (args2.text === "") {
            _this.isFilteredData = false;
            _this.isFilterRestore = true;
            fields = _this.cloneFields(_this.fields);
          } else if (args2.preventDefaultAction) {
            fields = args2.fields;
          } else {
            if (_this.treeDataType === 1) {
              fields = _this.selfReferencefilter(args2.text, args2.fields);
            } else {
              if (_this.fields.dataSource instanceof DataManager) {
                fields = _this.remoteDataFilter(args2.text, args2.fields);
                fields.child = _this.fields.child;
                _this.treeObj.fields = _this.getTreeFields(args2.fields);
                _this.treeObj.dataBind();
                flag = true;
              } else {
                fields = _this.nestedFilter(args2.text, args2.fields);
              }
            }
          }
          _this.hideCheckAll(_this.isFilteredData);
          if (flag) {
            return;
          }
          if (_this.isRemoteData) {
            if (_this.isChildObject()) {
              fields.child = _this.fields.child;
            } else {
              fields = args2.fields;
            }
          }
          _this.treeObj.fields = _this.getTreeFields(fields);
          _this.treeObj.dataBind();
          if (_this.hasTemplate && _this.portals && _this.treeObj.portals) {
            for (var i = 0; i < _this.treeObj.portals.length; i++) {
              if (_this.portals.indexOf(_this.treeObj.portals[i]) === -1) {
                _this.portals.push(_this.treeObj.portals[i]);
              }
            }
            if (_this.isReact) {
              _this.renderReactTemplates();
            }
          }
        }
      });
    };
    DropDownTree2.prototype.remoteDataFilter = function(value, filteredFields) {
      var _this = this;
      filteredFields.dataSource = this.treeData.map(function(item) {
        return _this.remoteChildFilter(value, item);
      }).filter(function(filteredChild) {
        return !isNullOrUndefined(filteredChild);
      });
      return filteredFields;
    };
    DropDownTree2.prototype.remoteChildFilter = function(value, node, isChild, isChildFiltering) {
      var children = this.isChildObject() ? node["child"] : node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node, isChild, isChildFiltering) ? node : null;
      }
      var matchedChildren = [];
      for (var i = 0; i < children.length; i++) {
        var filteredChild = this.remoteChildFilter(value, children[i], true, true);
        if (!isNullOrUndefined(filteredChild)) {
          matchedChildren.push(filteredChild);
        }
      }
      var filteredItems = Object.assign({}, node);
      isChildFiltering = false;
      if (matchedChildren.length !== 0) {
        filteredItems.child = matchedChildren;
      } else {
        filteredItems.child = null;
        filteredItems = this.isMatchedNode(value, filteredItems) ? filteredItems : null;
      }
      return filteredItems;
    };
    DropDownTree2.prototype.nestedFilter = function(value, filteredFields) {
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        var filteredChild = this.nestedChildFilter(value, this.treeData[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(filteredChild)) {
          matchedDataSource.push(filteredChild);
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.nestedChildFilter = function(value, node) {
      var children = node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node) ? node : null;
      } else {
        var matchedChildren = [];
        for (var i = 0; i < children.length; i++) {
          var filteredChild = this.nestedChildFilter(value, children[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(filteredChild)) {
            matchedChildren.push(filteredChild);
          }
        }
        var filteredItems = Object.assign({}, node);
        if (matchedChildren.length !== 0) {
          filteredItems[this.fields.child] = matchedChildren;
          return filteredItems;
        } else {
          filteredItems[this.fields.child] = null;
          return this.isMatchedNode(value, filteredItems) ? filteredItems : null;
        }
      }
    };
    DropDownTree2.prototype.selfReferencefilter = function(value, filteredFields) {
      var matchedData = [];
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        if (this.isMatchedNode(value, this.treeData[i])) {
          matchedData.push(this.treeData[i]);
        }
      }
      for (var i = 0; i < matchedData.length; i++) {
        if (matchedDataSource.indexOf(matchedData[i]) === -1) {
          matchedDataSource.push(matchedData[i]);
          var parentId = matchedData[parseInt(i.toString(), 10)][this.fields.parentValue];
          while (!isNullOrUndefined(parentId)) {
            var parent_1 = null;
            for (var j = 0; j < this.treeData.length; j++) {
              var value_1 = this.treeData[parseInt(j.toString(), 10)][this.fields.value];
              if (!isNullOrUndefined(value_1) && value_1 === parentId) {
                parent_1 = this.treeData[j];
                break;
              }
            }
            if (!isNullOrUndefined(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {
              matchedDataSource.push(parent_1);
              parentId = parent_1[this.fields.parentValue];
            } else {
              break;
            }
          }
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.isMatchedNode = function(value, node, isChild, isChildFiltering) {
      var checkValue;
      var isObjectValue = isChild && isChildFiltering && this.isChildObject();
      checkValue = isObjectValue ? node[this.fields.child.text] : node[this.fields.text];
      if (!checkValue && !isNullOrUndefined(this.fields.child.text)) {
        var tempChild = this.fields.child;
        while (!node[tempChild.text]) {
          tempChild = tempChild.child;
        }
        checkValue = node[tempChild.text];
      }
      if (this.ignoreCase) {
        checkValue = checkValue.toLowerCase();
        value = value.toLowerCase();
      }
      if (this.ignoreAccent) {
        checkValue = DataUtil.ignoreDiacritics(checkValue);
        value = DataUtil.ignoreDiacritics(value);
      }
      if (this.filterType === "StartsWith") {
        return checkValue.slice(0, value.length) === value;
      } else if (this.filterType === "EndsWith") {
        return checkValue.slice(-value.length) === value;
      } else {
        return checkValue.indexOf(value) !== -1;
      }
    };
    DropDownTree2.prototype.wireEvents = function() {
      EventHandler.add(this.inputWrapper, "mouseup", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper, "blur", this.focusOut, this);
      EventHandler.add(this.inputWrapper, "mousemove", this.mouseIn, this);
      EventHandler.add(this.inputWrapper, "mouseout", this.onMouseLeave, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      this.keyboardModule = new KeyboardEvents(this.inputWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireTreeEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.tree, {
        keyAction: this.treeAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireCheckAllWrapperEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.checkAllParent, {
        keyAction: this.checkAllAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.unWireEvents = function() {
      EventHandler.remove(this.inputWrapper, "mouseup", this.dropDownClick);
      EventHandler.remove(this.inputWrapper, "focus", this.focusIn);
      EventHandler.remove(this.inputWrapper, "blur", this.focusOut);
      EventHandler.remove(this.inputWrapper, "mousemove", this.mouseIn);
      EventHandler.remove(this.inputWrapper, "mouseout", this.onMouseLeave);
      EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      EventHandler.remove(window, "resize", this.windowResize);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      this.keyboardModule.destroy();
      if (this.showSelectAll && this.checkAllParent) {
        EventHandler.remove(this.checkAllParent, "mouseup", this.clickHandler);
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
    };
    DropDownTree2.prototype.dropDownClick = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
        return;
      }
      if (this.isPopupOpen) {
        this.hidePopup();
      } else {
        this.focusIn(e);
        this.renderPopup();
      }
      this.showOverAllClear();
    };
    DropDownTree2.prototype.mouseIn = function() {
      if (this.enabled || !this.readonly) {
        this.showOverAllClear();
      }
    };
    DropDownTree2.prototype.onMouseLeave = function() {
      if (!this.inputFocus) {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
    };
    DropDownTree2.prototype.getDirective = function() {
      return "EJS-DROPDOWNTREE";
    };
    DropDownTree2.prototype.focusOut = function(e) {
      if (!this.enabled || this.readonly || !this.inputFocus) {
        return;
      }
      if ((Browser.isIE || Browser.info.name === "edge") && e.target === this.inputWrapper) {
        return;
      }
      var target = e.relatedTarget;
      if (target !== this.inputEle && isNullOrUndefined(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {
        this.onFocusOut(e);
      }
    };
    DropDownTree2.prototype.onFocusOut = function(event2) {
      this.inputFocus = false;
      if (this.isPopupOpen) {
        this.hidePopup();
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
      }
      if (this.showClearButton) {
        this.clearIconWidth = select(".e-clear-icon", this.inputWrapper).offsetWidth;
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      removeClass([this.inputWrapper], [INPUTFOCUS4]);
      if (this.allowMultiSelection || this.showCheckBox) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (this.mode !== "Delimiter" && this.mode !== "Custom") {
          if (this.chipWrapper && this.mode === "Default") {
            addClass([this.chipWrapper], HIDEICON);
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          }
        }
        if (!this.wrapText && isValue) {
          this.updateView();
        }
      }
      if (this.changeOnBlur) {
        this.triggerChangeEvent(event2);
      }
      this.removeValue = false;
      this.oldValue = this.value;
      this.trigger("blur");
    };
    DropDownTree2.prototype.updateView = function() {
      if (!this.showCheckBox && !this.allowMultiSelection || this.mode === "Custom" || this.inputFocus) {
        return;
      }
      if (this.mode !== "Box") {
        addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);
      } else {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      if (this.value && this.value.length !== 0) {
        if (this.inputWrapper.contains(this.chipWrapper)) {
          addClass([this.chipWrapper], HIDEICON);
        }
        addClass([this.inputEle], CHIP_INPUT);
        this.updateOverFlowView();
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.triggerChangeEvent = function(event2) {
      var isEqual = this.ddtCompareValues(this.oldValue, this.value);
      if ((!isEqual || this.isChipDelete) && !this.removeValue) {
        var eventArgs = {
          e: event2,
          oldValue: this.oldValue,
          value: this.value,
          isInteracted: event2 ? true : false,
          element: this.element
        };
        this.trigger("change", eventArgs);
        this.oldValue = this.value;
      }
    };
    DropDownTree2.prototype.ddtCompareValues = function(oldValue, newValue) {
      if (oldValue === null || newValue === null) {
        var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;
        return isValid;
      } else if (oldValue.length !== newValue.length) {
        return false;
      }
      for (var i = 0; i < oldValue.length; i++) {
        if (oldValue[i] !== newValue[i]) {
          return false;
        }
      }
      return true;
    };
    DropDownTree2.prototype.focusIn = function(e) {
      if (!this.enabled || this.readonly || this.inputFocus) {
        return;
      }
      this.showOverAllClear();
      this.inputFocus = true;
      addClass([this.inputWrapper], [INPUTFOCUS4]);
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter" && this.inputFocus) {
          if (this.chipWrapper && (this.value && this.value.length !== 0)) {
            removeClass([this.chipWrapper], HIDEICON);
            addClass([this.inputEle], CHIP_INPUT);
          }
          addClass([this.inputWrapper], SHOW_CHIP);
          if (this.popupObj) {
            this.popupObj.refreshPosition();
          }
        }
        if (!this.wrapText && this.mode !== "Custom") {
          if (this.inputWrapper.contains(this.overFlowWrapper)) {
            addClass([this.overFlowWrapper], HIDEICON);
          }
          if (this.mode === "Delimiter") {
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          } else {
            addClass([this.inputWrapper], SHOW_CHIP);
          }
          removeClass([this.inputWrapper], SHOW_TEXT);
          this.ensurePlaceHolder();
        }
      }
      var args = { isInteracted: e ? true : false, event: e };
      this.trigger("focus", args);
    };
    DropDownTree2.prototype.treeAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              _this.inputWrapper.focus();
              e.preventDefault();
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "tab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
              if (!_this.showCheckBox) {
                _this.isValueChange = true;
                _this.keyEventArgs = e;
              }
              break;
            case "space":
              _this.isValueChange = true;
              _this.keyEventArgs = e;
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                _this.selectAll(true);
              }
              break;
            case "moveRight":
            case "moveLeft":
            case "shiftDown":
            case "moveDown":
            case "ctrlDown":
            case "csDown":
            case "shiftUp":
            case "moveUp":
            case "ctrlUp":
            case "csUp":
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
          }
        } else {
          e.stopImmediatePropagation();
        }
      });
    };
    DropDownTree2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "shiftTab":
            case "tab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              if (_this.inputFocus) {
                _this.onFocusOut();
              }
              break;
            case "altDown":
              if (!_this.isPopupOpen) {
                _this.showPopup();
                e.preventDefault();
              }
              break;
            case "moveDown":
              if (_this.showSelectAll && _this.showCheckBox) {
                _this.checkAllParent.focus();
              }
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.checkAllAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      var focusedElement;
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              _this.clickHandler(e);
              break;
            case "moveDown":
              focusedElement = _this.treeObj.element.querySelector("li");
              focusedElement.focus();
              addClass([focusedElement], ["e-node-focus"]);
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.windowResize = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ width: this.setWidth() });
        this.popupObj.refreshPosition();
      }
    };
    DropDownTree2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputWrapper, "form");
      if (formElement && e.target === formElement) {
        this.isDynamicChange = true;
        this.setProperties({ value: null }, true);
        this.resetValue(true);
        this.isDynamicChange = false;
      }
    };
    DropDownTree2.prototype.getAriaAttributes = function() {
      return {};
    };
    DropDownTree2.prototype.updateOverFlowView = function() {
      this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
      removeClass([this.overFlowWrapper], HIDEICON);
      if (this.value && this.value.length) {
        var data = "";
        var overAllContainer = void 0;
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        this.overFlowWrapper.innerHTML = "";
        var l10nLocale = { overflowCountTemplate: "+${count} more..", totalCountTemplate: "${count} selected" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        var remainContent = this.l10n.getConstant("overflowCountTemplate");
        var totalContent = this.l10n.getConstant("totalCountTemplate");
        var remainElement = this.createElement("span", { className: REMAIN_WRAPPER });
        this.overFlowWrapper.appendChild(remainElement);
        remainElement.innerText = remainContent.replace("${count}", this.value.length.toString());
        var remainSize = remainElement.offsetWidth;
        remove(remainElement);
        if (this.showDropDownIcon) {
          downIconWidth = select("." + DDTICON, this.inputWrapper).offsetWidth;
        }
        if (!isNullOrUndefined(this.value)) {
          if (this.mode !== "Box") {
            for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.overFlowWrapper.innerHTML;
              if (this.enableHtmlSanitizer) {
                this.overFlowWrapper.innerText = SanitizeHtmlHelper.sanitize(data);
              } else {
                this.overFlowWrapper.innerHTML = data;
              }
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  index = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - index;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);
                  textArr.pop();
                  this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = index;
              } else if (index === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          } else {
            addClass([this.chipWrapper], HIDEICON);
            var ele = this.chipWrapper.cloneNode(true);
            var chips = selectAll("." + CHIP, ele);
            for (var i = 0; i < chips.length; i++) {
              temp = this.overFlowWrapper.innerHTML;
              this.overFlowWrapper.appendChild(chips[i]);
              data = this.overFlowWrapper.innerHTML;
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  i = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - i;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = i;
              } else if (i === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          }
        }
        if (remaining > 0) {
          this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));
        }
        if (this.mode === "Box" && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([remainElement], REMAIN_COUNT);
        }
      } else {
        this.overFlowWrapper.innerHTML = "";
        addClass([this.overFlowWrapper], HIDEICON);
      }
      this.updateDelimMode();
    };
    DropDownTree2.prototype.updateRemainTemplate = function(remainElement, remaining, remainContent, totalContent) {
      if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === "") {
        this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);
      }
      remainElement.innerHTML = "";
      remainElement.innerText = this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box") ? remainContent.replace("${count}", remaining.toString()) : totalContent.replace("${count}", remaining.toString());
      if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box")) {
        removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
      } else {
        addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
        removeClass([this.overFlowWrapper], REMAIN_COUNT);
      }
      return remainElement;
    };
    DropDownTree2.prototype.getOverflowVal = function(index) {
      var selectedData = this.getSelectedData(this.value[parseInt(index.toString(), 10)]);
      return getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
    };
    DropDownTree2.prototype.updateDelimMode = function() {
      if (this.mode !== "Box") {
        if (select("." + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([this.overFlowWrapper], REMAIN_COUNT);
          addClass([this.overFlowWrapper], SHOW_TEXT);
        } else {
          this.overFlowWrapper.classList.remove(REMAIN_COUNT);
          removeClass([this.overFlowWrapper], REMAIN_COUNT);
        }
      } else if (select("." + REMAIN_WRAPPER, this.overFlowWrapper)) {
        this.overFlowWrapper.classList.remove(REMAIN_COUNT);
      }
    };
    DropDownTree2.prototype.createHiddenElement = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "class": HIDDENELEMENT2, "tabindex": "-1", "multiple": "", "aria-label": this.getModuleName() }
        });
      } else {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "tabindex": "-1", "class": HIDDENELEMENT2, "aria-label": this.getModuleName() }
        });
      }
      prepend([this.hiddenElement], this.inputWrapper);
      this.validationAttribute();
    };
    DropDownTree2.prototype.createClearIcon = function() {
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS
      });
      addClass([this.overAllClear], HIDEICON);
      removeClass([this.inputWrapper], SHOW_CLEAR);
      if (this.showClearButton) {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.validationAttribute = function() {
      var name = this.inputEle.getAttribute("name") ? this.inputEle.getAttribute("name") : this.inputEle.getAttribute("id");
      this.hiddenElement.setAttribute("name", name);
      this.inputEle.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        var attr = this.inputEle.getAttribute(attributes2[i]);
        if (attr) {
          this.hiddenElement.setAttribute(attributes2[i], attr);
          this.inputEle.removeAttribute(attributes2[i]);
        }
      }
    };
    DropDownTree2.prototype.createChip = function() {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.chipWrapper = this.createElement("span", {
          className: CHIP_WRAPPER
        });
        this.chipCollection = this.createElement("span", {
          className: CHIP_COLLECTION
        });
        this.chipWrapper.appendChild(this.chipCollection);
        this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);
        addClass([this.inputWrapper], SHOW_CHIP);
        var isValid = this.getValidMode();
        if (isValid && this.value !== null && (this.value && this.value.length !== 0)) {
          addClass([this.inputEle], CHIP_INPUT);
        } else if (this.value === null || this.value && this.value.length === 0 || this.checkWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.getValidMode = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return this.mode === "Box" ? true : this.mode === "Default" && this.inputFocus ? true : false;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.createSelectAllWrapper = function() {
      this.checkAllParent = this.createElement("div", {
        className: CHECKALLPARENT,
        attrs: { "tabindex": "0" }
      });
      this.selectAllSpan = this.createElement("span", {
        className: ALLTEXT
      });
      this.selectAllSpan.textContent = "";
      var ele = closest(this.element, "." + BIGGER2);
      var touchClass = isNullOrUndefined(ele) ? "" : SMALL2;
      this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });
      this.checkBoxElement.setAttribute("role", "checkbox");
      this.checkAllParent.appendChild(this.checkBoxElement);
      this.checkAllParent.appendChild(this.selectAllSpan);
      this.setLocale();
      EventHandler.add(this.checkAllParent, "mouseup", this.clickHandler, this);
      this.wireCheckAllWrapperEvents();
    };
    DropDownTree2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.target;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP2);
      if (!isNullOrUndefined(this.checkWrapper)) {
        this.isClicked = true;
        var checkElement = select("." + CHECKBOXFRAME2, this.checkWrapper);
        this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK2) ? "uncheck" : "check", e);
        this.isClicked = false;
      }
      e.preventDefault();
    };
    DropDownTree2.prototype.changeState = function(wrapper, state, e) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME2)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.add(CHECK2);
        ariaState = "true";
        if (!this.isReverseUpdate) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(true);
      } else if (state === "uncheck" && frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.remove(CHECK2);
        ariaState = "false";
        if (!this.isReverseUpdate) {
          this.treeObj.uncheckAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(false);
      }
      this.setMultiSelect();
      this.ensurePlaceHolder();
      ariaState = state === "check" ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        wrapper.parentElement.setAttribute("aria-checked", ariaState);
      }
    };
    DropDownTree2.prototype.setLocale = function(unSelect) {
      if (!this.selectAllSpan) {
        return;
      }
      if (this.selectAllText !== "Select All" || this.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.unSelectAllText : this.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this, templateName, null, !this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;
      }
    };
    DropDownTree2.prototype.setAttributes = function() {
      this.inputEle.setAttribute("tabindex", "-1");
      this.inputEle.setAttribute("aria-label", this.getModuleName());
      var id = this.element.getAttribute("id");
      this.hiddenElement.id = id + "_hidden";
      this.inputWrapper.setAttribute("tabindex", "0");
      this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      attributes(this.inputWrapper, this.getAriaAttributes());
    };
    DropDownTree2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            this.inputWrapper.classList.add(this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "disabled") {
            this.setProperties({ enabled: false }, true);
            this.setEnable();
          } else if (htmlAttr === "readonly") {
            this.setProperties({ readonly: true }, true);
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "aria-placeholder",
              "role",
              "autocorrect",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputEle);
              } else {
                this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
    };
    DropDownTree2.prototype.updateDataAttribute = function() {
      var value = this.htmlAttributes;
      var invalidAttr = ["class", "style", "id", "type"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownTree2.prototype.showOverAllClear = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.overAllClear) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (isValue && this.showClearButton) {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        } else {
          addClass([this.overAllClear], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CLEAR);
        }
      }
    };
    DropDownTree2.prototype.setTreeValue = function() {
      if (this.value !== null && this.value.length !== 0) {
        var data = void 0;
        if (this.showCheckBox || this.allowMultiSelection) {
          for (var i = 0; i < this.value.length; i++) {
            data = this.treeObj.getTreeData(this.value[i])[0];
            if (isNullOrUndefined(data)) {
              this.value.splice(this.value.indexOf(this.value[i]), 1);
            }
          }
          if (this.value.length !== 0) {
            this.setValidValue();
          }
        } else {
          data = this.treeObj.getTreeData(this.value[0])[0];
          if (!isNullOrUndefined(data)) {
            this.setProperties({ text: data[this.fields.text] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ value: this.currentValue }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setTreeText = function() {
      if (this.value !== null && !this.isInitialized) {
        return;
      }
      if (this.text !== null) {
        var data = void 0;
        var valArr = [];
        if (this.showCheckBox || this.allowMultiSelection) {
          var textArr = this.text.split(this.delimiterChar);
          for (var i = 0; i < textArr.length; i++) {
            data = this.getItems(textArr[i]);
            if (!isNullOrUndefined(data)) {
              valArr.push(data[this.fields.value].toString());
            }
          }
          if (valArr.length !== 0) {
            this.oldValue = this.value;
            this.setProperties({ value: valArr }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        } else {
          data = this.getItems(this.text);
          if (!isNullOrUndefined(data)) {
            this.oldValue = this.value;
            this.setProperties({ value: [data[this.fields.value].toString()] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setSelectedValue = function() {
      if (this.value != null) {
        return;
      }
      if (!this.isInitialized) {
        this.oldValue = this.value;
        if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {
          this.setProperties({ value: this.treeObj.selectedNodes }, true);
          if (this.allowMultiSelection) {
            this.updateMode();
          }
        } else if (this.showCheckBox && this.treeObj.checkedNodes) {
          if (this.treeObj.checkedNodes.length > 0) {
            this.setProperties({ value: this.treeObj.checkedNodes }, true);
            setValue("selectedNodes", [], this.treeObj);
            this.treeObj.dataBind();
            this.updateMode();
          }
        }
        this.updateSelectedValues();
        this.currentText = this.text;
        this.currentValue = this.value;
      }
    };
    DropDownTree2.prototype.setValidValue = function() {
      var _this = this;
      if (!this.showCheckBox && !this.allowMultiSelection) {
        Input.setValue(this.text, this.inputEle, this.floatLabelType);
        var id = this.value[0].toString();
        if (this.treeObj.selectedNodes[0] !== id) {
          setValue("selectedNodes", [id], this.treeObj);
        }
      } else {
        if (this.showCheckBox) {
          var difference = this.value.filter(function(e) {
            return _this.treeObj.checkedNodes.indexOf(e) === -1;
          });
          if (difference.length > 0 || this.treeSettings.autoCheck) {
            this.treeObj.checkedNodes = this.value.slice();
            this.treeObj.dataBind();
            this.setMultiSelect();
          }
        } else {
          this.treeObj.selectedNodes = this.value.slice();
          this.selectedText = [];
          this.updateSelectedValues();
        }
        this.treeObj.dataBind();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (!isNullOrUndefined(this.value) && this.value.length > 0 && !isNullOrUndefined(this.currentText)) {
        this.inputWrapper.setAttribute("aria-label", this.currentText.split(",").join(" "));
      }
      if (this.isInitialized) {
        this.triggerChangeEvent();
      }
    };
    DropDownTree2.prototype.getItems = function(givenText) {
      var data;
      if (this.treeDataType === 1) {
        for (var i = 0; i < this.treeItems.length; i++) {
          var text = getValue(this.fields.text, this.treeItems[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {
            data = this.treeItems[i];
            break;
          }
        }
      } else {
        data = this.getNestedItems(this.treeItems, this.fields, givenText);
      }
      return data;
    };
    DropDownTree2.prototype.getNestedItems = function(data, field, givenText) {
      var newData;
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        var dataId = getValue(this.fields.text, data[parseInt(i.toString(), 10)]);
        if (data[i] && dataId && dataId.toString() === givenText) {
          return data[i];
        } else if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, data[i]))) {
          var childData = getValue(field.child, data[parseInt(i.toString(), 10)]);
          newData = this.getNestedItems(childData, this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", data[i]))) {
          var child = "child";
          newData = this.getNestedItems(getValue(child, data[parseInt(i.toString(), 10)]), this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        }
      }
      return newData;
    };
    DropDownTree2.prototype.getChildType = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.renderTree = function() {
      this.treeObj = new TreeView({
        fields: this.getTreeFields(this.fields),
        enableRtl: this.enableRtl,
        nodeSelected: this.onNodeSelected.bind(this),
        nodeChecked: this.onNodeChecked.bind(this),
        nodeChecking: this.beforeCheck.bind(this),
        nodeExpanded: this.onNodeExpanded.bind(this),
        actionFailure: this.onActionFailure.bind(this),
        nodeClicked: this.onNodeClicked.bind(this),
        dataBound: this.OnDataBound.bind(this),
        allowMultiSelection: this.allowMultiSelection,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        showCheckBox: this.showCheckBox,
        autoCheck: this.treeSettings.autoCheck,
        sortOrder: this.sortOrder,
        expandOn: this.treeSettings.expandOn,
        loadOnDemand: this.treeSettings.loadOnDemand,
        nodeSelecting: this.onBeforeSelect.bind(this),
        nodeTemplate: this.itemTemplate
      });
      this.treeObj.root = this.root ? this.root : this;
      this.treeObj.appendTo(this.tree);
    };
    DropDownTree2.prototype.renderPopup = function() {
      var _this = this;
      if (this.isFilteredData) {
        this.filterObj.value = "";
        this.treeObj.fields = this.getTreeFields(this.fields);
        this.isFilterRestore = true;
        this.isFilteredData = false;
        this.hideCheckAll(false);
      }
      var isCancelled = false;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          addClass([_this.inputWrapper], [ICONANIMATION3]);
          if (_this.isFirstRender) {
            _this.popupEle = _this.createElement("div", {
              id: _this.element.id + "_options",
              className: POPUP_CLASS + " " + (_this.cssClass != null ? _this.cssClass : "")
            });
            _this.popupEle.setAttribute("role", "region");
            _this.popupEle.setAttribute("aria-label", _this.element.id);
            document.body.appendChild(_this.popupEle);
            _this.createPopup(_this.popupEle);
          } else {
            _this.popupEle = _this.popupObj.element;
            if (_this.isReact && _this.isFilterRestore) {
              _this.treeObj.refresh();
              _this.isFilteredData = true;
              _this.popupEle.removeChild(_this.filterContainer);
            }
          }
        } else {
          isCancelled = true;
        }
        if (_this.isFirstRender && !isCancelled || _this.isFilteredData) {
          _this.isFilteredData = false;
          prepend([_this.popupDiv], _this.popupEle);
          removeClass([_this.popupDiv], DDTHIDEICON);
          if (_this.allowFiltering) {
            _this.renderFilter();
          }
          if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {
            _this.createSelectAllWrapper();
            _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);
          }
          if (_this.headerTemplate) {
            _this.setHeaderTemplate();
          }
          if (_this.footerTemplate) {
            _this.setFooterTemplate();
          }
          _this.isFirstRender = false;
          if (_this.hasTemplate && _this.portals) {
            if (_this.treeObj.portals) {
              _this.portals = _this.portals.concat(_this.treeObj.portals.filter(function(item) {
                return !_this.portals.includes(item);
              }));
            }
            if (_this.isReact) {
              _this.renderReactTemplates(_this.reactCallBack);
            }
          }
        }
        if (!isCancelled) {
          attributes(_this.inputEle, { "aria-expanded": "true" });
          _this.popupObj.show(null, _this.zIndex === 1e3 ? _this.inputEle : null);
          removeClass([_this.popupEle], DDTHIDEICON);
          _this.updatePopupHeight();
          _this.popupObj.refreshPosition();
          if (!(_this.showCheckBox && _this.showSelectAll) && (!_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0)) {
            var focusedElement = void 0;
            if (_this.value != null && _this.text != null) {
              _this.treeObj.element.querySelector("li").setAttribute("tabindex", "-1");
              focusedElement = _this.treeObj.element.querySelector('[data-uid="' + _this.value[0] + '"]');
              focusedElement.setAttribute("tabindex", "0");
            } else {
              var oldFocussedNode = _this.treeObj.element.querySelector(".e-node-focus");
              focusedElement = _this.treeObj.element.querySelector("li:not(.e-disable):not(.e-prevent)");
              if (oldFocussedNode && oldFocussedNode !== focusedElement) {
                oldFocussedNode.setAttribute("tabindex", "-1");
                removeClass([oldFocussedNode], "e-node-focus");
              }
            }
            focusedElement.focus();
            addClass([focusedElement], ["e-node-focus"]);
          }
          if (_this.treeObj.checkedNodes.length > 0) {
            var nodes = _this.treeObj.element.querySelectorAll("li");
            var checkedNodes = _this.treeObj.element.querySelectorAll("li[aria-checked=true]");
            if ((checkedNodes.length === nodes.length || _this.checkSelectAll) && _this.checkBoxElement) {
              var wrap = closest(_this.checkBoxElement, "." + CHECKBOXWRAP2);
              _this.changeState(wrap, "check");
              _this.checkSelectAll = false;
            }
          }
          if (_this.allowFiltering) {
            removeClass([_this.inputWrapper], [INPUTFOCUS4]);
            _this.filterObj.element.focus();
          }
          var eventArgs = { popup: _this.popupObj };
          _this.trigger("open", eventArgs);
        }
      });
    };
    DropDownTree2.prototype.reactCallBack = function() {
      this.updatePopupHeight();
      this.popupObj.refreshPosition();
    };
    DropDownTree2.prototype.updatePopupHeight = function() {
      if (this.isFirstRender) {
        return;
      }
      var popupHeight = this.getHeight();
      this.popupEle.style.maxHeight = popupHeight;
      if (this.allowFiltering) {
        var height = Math.round(this.filterContainer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.headerTemplate) {
        var height = Math.round(this.header.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.showCheckBox && this.showSelectAll && !this.popupDiv.classList.contains(NODATA)) {
        var height = Math.round(this.checkAllParent.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.footerTemplate) {
        var height = Math.round(this.footer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);
      border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);
      popupHeight = formatUnit(parseInt(popupHeight, 10) - border + "px");
      this.popupDiv.style.maxHeight = popupHeight;
    };
    DropDownTree2.prototype.createPopup = function(element) {
      var _this = this;
      if (this.isFirstRender) {
        this.popupObj = new Popup(element, {
          width: this.setWidth(),
          targetType: "relative",
          collision: { X: "flip", Y: "flip" },
          relateTo: this.inputWrapper,
          zIndex: this.zIndex,
          enableRtl: this.enableRtl,
          position: { X: "left", Y: "bottom" },
          close: function() {
            _this.isPopupOpen = false;
          },
          open: function() {
            EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
            _this.isPopupOpen = true;
          },
          targetExitViewport: function() {
            if (!Browser.isDevice) {
              _this.hidePopup();
            }
          }
        });
      }
    };
    DropDownTree2.prototype.setElementWidth = function(inputWidth) {
      var ddElement = this.inputWrapper;
      if (!isNullOrUndefined(inputWidth)) {
        if (typeof inputWidth === "number") {
          ddElement.style.width = formatUnit(inputWidth);
        } else if (typeof inputWidth === "string") {
          ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);
        }
      }
    };
    DropDownTree2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + "px";
      } else if (typeof this.popupWidth === "string") {
        width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;
      }
      return width;
    };
    DropDownTree2.prototype.getHeight = function() {
      var height = formatUnit(this.popupHeight);
      if (height.indexOf("%") > -1) {
        height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + "px";
      } else if (typeof this.popupHeight === "string") {
        height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;
      }
      return height;
    };
    DropDownTree2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var isTree = closest(target, "." + PARENTITEM2);
      var isFilter = closest(target, "." + FILTERWRAP);
      var isHeader = closest(target, "." + HEADER4);
      var isFooter = closest(target, "." + FOOTER3);
      var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, ".e-ddt .e-popup") || matches(target, ".e-ddt .e-treeview");
      if (this.isPopupOpen && (!isNullOrUndefined(this.inputWrapper) && this.inputWrapper.contains(target) || isTree || isScroller || isHeader || isFooter) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME2)))) {
        this.isDocumentClick = false;
        e.preventDefault();
      } else if (!isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {
        this.focusOut(e);
      }
    };
    DropDownTree2.prototype.onActionFailure = function(e) {
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      addClass([this.popupDiv], NODATA);
    };
    DropDownTree2.prototype.OnDataBound = function(args) {
      this.treeItems = args.data;
      if (this.treeItems.length <= 0) {
        this.l10nUpdate();
        addClass([this.popupDiv], NODATA);
        this.hideCheckAll(true);
      } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {
        removeClass([this.popupDiv], NODATA);
        this.hideCheckAll(false);
      }
      if (!this.isFilteredData) {
        this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);
      }
      if (this.isFirstRender && this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
        this.treeObj.element.focus();
      }
      var eventArgs = { data: args.data };
      this.trigger("dataBound", eventArgs);
      if (this.filterObj === null) {
        this.isFilteredData = false;
      }
      if (this.isFilteredData) {
        this.treeObj.expandAll();
      }
      if (this.isFilterRestore) {
        this.restoreFilterSelection();
        this.isFilterRestore = false;
      }
    };
    DropDownTree2.prototype.restoreFilterSelection = function() {
      if (this.showCheckBox) {
        this.treeObj.checkedNodes = this.value ? this.value : [];
      } else {
        this.treeObj.selectedNodes = this.value ? this.value : [];
      }
    };
    DropDownTree2.prototype.setCssClass = function(newClass, oldClass) {
      var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass(elements, newClass.split(" "));
      }
    };
    DropDownTree2.prototype.setEnableRTL = function(state) {
      if (state) {
        this.inputWrapper.classList.add(RTL10);
      } else {
        this.inputWrapper.classList.remove(RTL10);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
      if (this.treeObj) {
        this.treeObj.enableRtl = state;
        this.treeObj.dataBind();
      }
    };
    DropDownTree2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputEle);
      if (this.enabled) {
        removeClass([this.inputWrapper], DISABLED9);
        this.inputEle.setAttribute("aria-disabled", "false");
        this.inputWrapper.setAttribute("aria-disabled", "false");
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        addClass([this.inputWrapper], DISABLED9);
        if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS4)) {
          removeClass([this.inputWrapper], [INPUTFOCUS4]);
        }
        this.inputEle.setAttribute("aria-disabled", "true");
        this.inputWrapper.setAttribute("aria-disabled", "true");
      }
    };
    DropDownTree2.prototype.cloneFields = function(fields) {
      var clonedField = {
        dataSource: fields.dataSource,
        value: fields.value,
        text: fields.text,
        parentValue: fields.parentValue,
        child: this.cloneChildField(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selected: fields.selected,
        selectable: fields.selectable,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return clonedField;
    };
    DropDownTree2.prototype.cloneChildField = function(fields) {
      if (typeof fields === "string") {
        return fields;
      } else {
        var clonedField = {
          dataSource: fields.dataSource,
          value: fields.value,
          text: fields.text,
          parentValue: fields.parentValue,
          child: fields.child ? this.cloneChildField(fields.child) : null,
          hasChildren: fields.hasChildren,
          expanded: fields.expanded,
          iconCss: fields.iconCss,
          imageUrl: fields.imageUrl,
          htmlAttributes: fields.htmlAttributes,
          query: fields.query,
          selected: fields.selected,
          selectable: fields.selectable,
          tableName: fields.tableName,
          tooltip: fields.tooltip
        };
        return clonedField;
      }
    };
    DropDownTree2.prototype.getTreeFields = function(fields) {
      var treeFields = {
        dataSource: fields.dataSource,
        id: fields.value,
        text: fields.text,
        parentID: fields.parentValue,
        child: this.getTreeChildren(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        isChecked: fields.selected,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selectable: fields.selectable,
        selected: fields.selected,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return treeFields;
    };
    DropDownTree2.prototype.getTreeChildren = function(mapper) {
      if (typeof mapper === "string") {
        return mapper;
      } else if (!isNullOrUndefined(mapper)) {
        mapper = this.getActualProperties(mapper);
        var childFields = mapper;
        if (mapper.value) {
          childFields.id = mapper.value;
        }
        if (mapper.parentValue) {
          childFields.parentID = mapper.parentValue;
        }
        if (mapper.child) {
          childFields.child = this.getTreeChildren(mapper.child);
        }
        if (mapper.selected && this.showCheckBox) {
          childFields.isChecked = mapper.selected;
        }
        return childFields;
      }
      return null;
    };
    DropDownTree2.prototype.getTreeDataType = function(ds, field) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (typeof field.child === "string" && isNullOrUndefined(getValue(field.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      if (isNullOrUndefined(this.fields.dataSource)) {
        this.fields.dataSource = [];
      }
      for (var i = 0, len = this.fields.dataSource.length; i < len; i++) {
        if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, this.fields.dataSource[i]))) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(field.parentValue, this.fields.dataSource[i])) || !isNullOrUndefined(getValue(field.hasChildren, this.fields.dataSource[i]))) {
          return 1;
        }
      }
      return 1;
    };
    DropDownTree2.prototype.setFields = function() {
      this.resetValue();
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      this.treeObj.fields = this.getTreeFields(this.fields);
      this.treeObj.dataBind();
    };
    DropDownTree2.prototype.getEventArgs = function(args) {
      var checkData = args.data;
      var selectData = args.nodeData;
      var state;
      if (this.showCheckBox) {
        if (args.action === "check") {
          state = "select";
        } else if (args.action === "uncheck") {
          state = "un-select";
        }
      }
      var eventArgs = {
        action: this.showCheckBox ? state : args.action,
        isInteracted: this.isClicked ? true : args.isInteracted,
        item: args.node,
        itemData: this.showCheckBox ? checkData[0] : selectData
      };
      return eventArgs;
    };
    DropDownTree2.prototype.onBeforeSelect = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
        if (this.value === null) {
          this.setProperties({ value: [] }, true);
        }
      }
    };
    DropDownTree2.prototype.updateHiddenValue = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return;
      }
      if (this.value && this.value.length) {
        this.hiddenElement.innerHTML = '<option selected value ="' + this.value[0] + '">' + this.text + "</option>";
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownTree2.prototype.onNodeSelected = function(args) {
      if (this.showCheckBox) {
        return;
      }
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      var selectedText;
      if (args.isInteracted) {
        var id = getValue("id", args.nodeData).toString();
        if (!this.allowMultiSelection) {
          this.hiddenElement.innerHTML = "";
          this.setProperties({ value: [id] }, true);
          if (this.itemTemplate) {
            selectedText = getValue("text", this.treeObj.getNode(id));
          } else {
            selectedText = getValue("text", args.nodeData).toString();
          }
          Input.setValue(selectedText, this.inputEle, this.floatLabelType);
          this.setProperties({ text: selectedText }, true);
          this.currentText = this.text;
          this.currentValue = this.value;
          if (!isNullOrUndefined(this.value) && this.value.length > 0) {
            this.inputWrapper.setAttribute("aria-label", args.nodeData.text.toString());
          }
          attributes(this.inputWrapper, { "aria-describedby": this.element.id });
          attributes(this.inputWrapper, { "aria-activedescendant": id.toString() });
          this.updateHiddenValue();
          this.showOverAllClear();
          this.hidePopup();
          this.isNodeSelected = true;
        } else if (this.allowMultiSelection) {
          this.setMultiSelect();
        }
      }
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.onNodeClicked = function(args) {
      if (!this.changeOnBlur && this.isNodeSelected) {
        this.triggerChangeEvent(args.event);
        this.isNodeSelected = false;
      }
      var target = args.event.target;
      if ((target.classList.contains("e-fullrow") || target.classList.contains("e-list-text")) && this.showCheckBox) {
        this.isClicked = true;
        var getNodeDetails = this.treeObj.getNode(args.node);
        if (getNodeDetails.isChecked === "true") {
          this.treeObj.uncheckAll([args.node]);
        } else {
          this.treeObj.checkAll([args.node]);
        }
        this.isClicked = false;
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {
        this.triggerChangeEvent(args.event);
      }
    };
    DropDownTree2.prototype.onNodeChecked = function(args) {
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isFilteredData && args.action === "uncheck") {
        var id = getValue("id", args.data[0]).toString();
        this.removeSelectedData(id, true);
      }
      if (!this.isChipDelete && args.isInteracted) {
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (this.showSelectAll && this.checkBoxElement) {
        var checkedNodes = this.treeObj.element.querySelectorAll("li[aria-checked=true]");
        var wrap = closest(this.checkBoxElement, "." + CHECKBOXWRAP2);
        if (wrap && args.action === "uncheck" && (args.isInteracted || checkedNodes.length === 0 || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "false")) {
          this.isReverseUpdate = true;
          this.changeState(wrap, "uncheck");
          this.isReverseUpdate = false;
        } else if (wrap && args.action === "check" && checkedNodes.length === this.fields.dataSource.length && (args.isInteracted || this.isCheckAllCalled || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "true")) {
          this.isReverseUpdate = true;
          this.isCheckAllCalled = false;
          this.changeState(wrap, "check");
          this.isReverseUpdate = false;
        }
      }
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.beforeCheck = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
      }
    };
    DropDownTree2.prototype.onNodeExpanded = function() {
      if (this.hasTemplate && this.portals && this.treeObj.portals) {
        for (var i = 0; i < this.treeObj.portals.length; i++) {
          if (this.portals.indexOf(this.treeObj.portals[i]) === -1) {
            this.portals.push(this.treeObj.portals[i]);
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownTree2.prototype.updateClearButton = function(state) {
      if (state) {
        if (!this.inputWrapper.contains(this.overAllClear)) {
          this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);
        } else {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        }
      } else {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        var chipClose = selectAll("." + CHIP_CLOSE, this.chipWrapper);
        for (var i = 0; i < chipClose.length; i++) {
          if (!state) {
            addClass([chipClose[i]], HIDEICON);
          } else {
            removeClass([chipClose[i]], HIDEICON);
          }
        }
      }
    };
    DropDownTree2.prototype.updateDropDownIconState = function(state) {
      var spinIcon = select("." + DDTICON, this.inputWrapper);
      if (state) {
        if (!spinIcon) {
          Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);
        } else {
          removeClass([spinIcon], HIDEICON);
        }
        addClass([this.inputWrapper], SHOW_DD_ICON);
      } else {
        addClass([spinIcon], HIDEICON);
        removeClass([this.inputWrapper], SHOW_DD_ICON);
      }
    };
    DropDownTree2.prototype.updateMode = function() {
      if (this.mode === "Custom") {
        return;
      }
      if (this.mode !== "Delimiter") {
        if (!this.inputWrapper.contains(this.chipWrapper)) {
          this.createChip();
        }
        var isValid = this.getValidMode();
        if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {
          removeClass([this.chipWrapper], HIDEICON);
          addClass([this.inputWrapper], SHOW_CHIP);
        } else if (!isValid) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
        var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;
        if (isValid && isValue) {
          addClass([this.inputEle], CHIP_INPUT);
        } else {
          removeClass([this.inputEle], CHIP_INPUT);
        }
      } else if (this.inputEle.classList.contains(CHIP_INPUT)) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
    };
    DropDownTree2.prototype.ensurePlaceHolder = function() {
      if (isNullOrUndefined(this.value) || this.value && this.value.length === 0) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.ensureClearIconPosition = function(floatLabelType) {
      if (floatLabelType !== "Never") {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.setMultiSelectValue = function(newValues) {
      if (!this.isFilteredData) {
        this.setProperties({ value: this.isFromFilterChange && newValues && newValues.length === 0 ? this.value : newValues }, true);
        this.isFromFilterChange = false;
        if (newValues && newValues.length !== 0 && !this.showCheckBox && !this.ddtCompareValues(this.treeObj.selectedNodes, this.value.slice())) {
          this.treeObj.selectedNodes = this.value.slice();
          this.treeObj.dataBind();
        }
      } else {
        var selectedValues = isNullOrUndefined(this.value) ? [] : this.value;
        for (var i = 0; i < newValues.length; i++) {
          if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {
            selectedValues.push(newValues[i]);
          }
        }
        this.setProperties({ value: selectedValues }, true);
      }
    };
    DropDownTree2.prototype.setMultiSelect = function() {
      if (this.showCheckBox && !this.isDynamicChange) {
        this.setMultiSelectValue(this.treeObj.checkedNodes.slice());
      } else {
        var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;
        this.setMultiSelectValue(ddtValue);
        if (this.showCheckBox && this.value !== null) {
          this.treeObj.checkedNodes = this.value;
          this.treeObj.dataBind();
        }
      }
      this.selectedText = [];
      var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {
        removeClass([this.inputEle], CHIP_INPUT);
        detach(this.chipWrapper);
      }
      var isValid = this.getValidMode();
      if (isValid && this.value !== null) {
        addClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          removeClass([this.chipWrapper], HIDEICON);
        }
      }
      var isValue = this.value ? this.value.length ? true : false : false;
      if (this.chipWrapper && (this.mode === "Box" && !isValue)) {
        addClass([this.chipWrapper], HIDEICON);
        removeClass([this.inputEle], CHIP_INPUT);
      }
      this.updateSelectedValues();
    };
    DropDownTree2.prototype.getSelectedData = function(value) {
      var data = null;
      if (this.isFilteredData) {
        for (var i = 0; i < this.selectedData.length; i++) {
          if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
            data = this.selectedData[i];
            break;
          }
        }
      }
      if (isNullOrUndefined(data)) {
        if (this.treeSettings.loadOnDemand) {
          data = this.getNodeData(value);
        } else {
          data = this.treeObj.getNode(value);
        }
        if (!isNullOrUndefined(data)) {
          this.selectedData.push(data);
        }
      }
      return data;
    };
    DropDownTree2.prototype.getNodeData = function(id) {
      var childItems;
      if (isNullOrUndefined(id)) {
        return childItems;
      } else if (this.treeDataType === 1) {
        for (var i = 0, objlen = this.treeItems.length; i < objlen; i++) {
          var dataId = getValue(this.fields.value, this.treeItems[i]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeItems[i];
          }
        }
      } else {
        return this.getChildNodeData(this.treeItems, this.fields, id);
      }
      return childItems;
    };
    DropDownTree2.prototype.getChildNodeData = function(obj, mapper, id) {
      var newChildItems;
      if (isNullOrUndefined(obj)) {
        return newChildItems;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataValue = getValue(mapper.value, obj[i]);
        if (obj[i] && dataValue && dataValue.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childNodeData = getValue(mapper.child, obj[i]);
          newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        }
      }
      return newChildItems;
    };
    DropDownTree2.prototype.getChildMapperFields = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.removeSelectedData = function(value, muteOnChange) {
      var selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();
      selectedValues.splice(selectedValues.indexOf(value), 1);
      this.setProperties({ value: selectedValues }, muteOnChange);
      for (var i = 0; i < this.selectedData.length; i++) {
        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
          this.selectedData.splice(i, 1);
          break;
        }
      }
    };
    DropDownTree2.prototype.updateSelectedValues = function() {
      this.dataValue = "";
      var temp;
      var text;
      var textValue = "";
      var selectedData;
      this.hiddenElement.innerHTML = "";
      var hiddenInputValue = "";
      if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {
        this.chipCollection.innerHTML = "";
      }
      if (!this.isFilteredData) {
        this.selectedData = [];
      }
      if (!isNullOrUndefined(this.value)) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          selectedData = this.getSelectedData(this.value[i]);
          text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
          this.selectedText.push(text);
          temp = this.selectedText[this.selectedText.length - 1];
          if (this.selectedText.length > 1) {
            this.dataValue += this.delimiterChar + " " + temp;
            textValue += "," + temp;
          } else {
            this.dataValue += temp;
            textValue += temp;
          }
          if (this.mode !== "Custom" && this.mode !== "Delimiter" && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {
            this.setChipValues(temp, this.value[i]);
          }
          hiddenInputValue += '<option selected value ="' + this.value[i] + '">' + this.selectedText[this.selectedText.length - 1] + "</option>";
        }
        if (this.selectedText.length >= 1) {
          this.setProperties({ text: textValue }, true);
        }
        this.hiddenElement.innerHTML = hiddenInputValue;
        if (this.mode === "Custom" && (this.allowMultiSelection || this.showCheckBox)) {
          this.setTagValues();
        }
      }
      var isValid = this.getValidMode();
      if (this.mode !== "Custom" && this.mode !== "Box" && (this.allowMultiSelection || this.showCheckBox) && !isValid) {
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
      Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);
      if (textValue === "") {
        this.setProperties({ text: null }, true);
      } else {
        this.setProperties({ text: textValue }, true);
      }
      if (this.showClearButton && this.inputFocus) {
        this.showOverAllClear();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (!isNullOrUndefined(this.value) && this.value.length > 0 && !isNullOrUndefined(this.currentText)) {
        this.inputWrapper.setAttribute("aria-label", this.currentText.split(",").join(" "));
      } else {
        this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      }
    };
    DropDownTree2.prototype.setChipValues = function(text, value) {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      var chip = this.createElement("span", {
        className: CHIP,
        attrs: { "data-value": value }
      });
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE + " " + ICONS4 });
      if (this.enableHtmlSanitizer) {
        chipContent.innerText = SanitizeHtmlHelper.sanitize(text);
      } else {
        chipContent.innerHTML = text;
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
      if (this.showClearButton) {
        chip.appendChild(chipClose);
        EventHandler.add(chipClose, "mousedown", this.removeChip, this);
      }
    };
    DropDownTree2.prototype.setTagValues = function() {
      if (this.value === null || this.text == null) {
        return;
      }
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      var chip = this.createElement("span", {
        className: CHIP
      });
      if (!this.inputEle.classList.contains(CHIP_INPUT)) {
        addClass([this.inputEle], CHIP_INPUT);
      }
      if (this.chipWrapper.classList.contains(HIDEICON)) {
        removeClass([this.chipWrapper], HIDEICON);
      }
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var template = this.customTemplate;
      var templateId = this.customTemplateId;
      var templatestring = "customTemplate";
      var compiledString = this.templateComplier(template);
      var tempArr = compiledString({ "value": this.value, "text": this.text }, this, templatestring, templateId, this.isStringTemplate, void 0, chipContent);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, chipContent);
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
    };
    DropDownTree2.prototype.setSelectAllWrapper = function(state) {
      if (this.isFirstRender) {
        return;
      }
      if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {
        this.createSelectAllWrapper();
        this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);
      } else if (this.popupEle.contains(this.checkAllParent)) {
        detach(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    DropDownTree2.prototype.setHeaderTemplate = function() {
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], HEADER4);
      }
      var compiledString = this.templateComplier(this.headerTemplate);
      var tempArr = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, void 0, this.header);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.header);
      }
      this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);
    };
    DropDownTree2.prototype.templateComplier = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e) {
          return compile(template);
        }
      }
      return compile(template);
    };
    DropDownTree2.prototype.setFooterTemplate = function() {
      if (this.footer) {
        if (this.isReact && typeof this.footerTemplate === "function") {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], FOOTER3);
      }
      var compiledString = this.templateComplier(this.footerTemplate);
      var tempArr = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, void 0, this.footer);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.footer);
      }
      append([this.footer], this.popupEle);
    };
    DropDownTree2.prototype.clearAll = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      this.resetValue();
      this.showOverAllClear();
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.popupObj) {
          this.popupObj.refreshPosition();
        }
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
      }
      if (e) {
        this.isClearButtonClick = true;
      }
      if (!this.changeOnBlur) {
        this.triggerChangeEvent(e);
      }
    };
    DropDownTree2.prototype.removeChip = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      var element = e.target.parentElement;
      var value = element.getAttribute("data-value");
      if (this.chipCollection) {
        if (element) {
          remove(element);
        }
      }
      this.isChipDelete = true;
      this.isClearButtonClick = true;
      this.removeSelectedData(value, true);
      this.selectedText = [];
      if (this.allowMultiSelection) {
        this.treeObj.selectedNodes = this.value.slice();
        this.updateSelectedValues();
      }
      if (this.showCheckBox) {
        this.treeObj.uncheckAll([value]);
        this.clearCheckAll();
        this.setMultiSelect();
      }
      this.triggerChangeEvent(e);
      this.isChipDelete = false;
      this.ensurePlaceHolder();
    };
    DropDownTree2.prototype.resetValue = function(isDynamicChange) {
      if (Array.isArray(this.value) && this.value.length === 0 && this.text == null) {
        return;
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      if (!isDynamicChange) {
        this.oldValue = this.value;
        this.setProperties({ value: [] }, true);
      }
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        this.inputWrapper.setAttribute("aria-label", this.getModuleName());
      }
      this.dataValue = null;
      this.setProperties({ text: null }, true);
      this.selectedData = [];
      setValue("selectedNodes", [], this.treeObj);
      this.hiddenElement.innerHTML = "";
      if (this.showCheckBox) {
        this.treeObj.uncheckAll();
        this.setMultiSelect();
        this.clearCheckAll();
      }
      if (this.oldValue === null && !isDynamicChange) {
        this.removeValue = true;
      } else if (isDynamicChange) {
        this.triggerChangeEvent();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        this.chipCollection.innerHTML = "";
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.clearCheckAll = function() {
      if (this.showSelectAll && this.value && this.value.length === 0) {
        this.setLocale(false);
      }
    };
    DropDownTree2.prototype.selectAllItems = function(state) {
      if (this.showCheckBox) {
        if (state) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
        } else {
          this.treeObj.uncheckAll();
        }
        this.checkSelectAll = state;
      } else if (this.allowMultiSelection) {
        if (!state) {
          this.treeObj.selectedNodes = [];
        } else {
          var li = selectAll("li", this.treeObj.element);
          var id = void 0;
          var arr = [];
          for (var i = 0; i < li.length; i++) {
            id = li[i].getAttribute("data-uid").toString();
            arr.push(id);
          }
          this.treeObj.selectedNodes = arr;
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText) {
        if (state) {
          this.updateView();
        } else {
          this.updateOverflowWrapper(true);
        }
      }
    };
    DropDownTree2.prototype.updateTreeSettings = function(prop) {
      var value = Object.keys(prop.treeSettings)[0];
      if (value === "autoCheck") {
        this.treeObj.autoCheck = this.treeSettings.autoCheck;
      } else if (value === "loadOnDemand") {
        this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;
      } else if (value === "expandOn") {
        this.treeObj.expandOn = this.treeSettings.expandOn;
        this.treeObj.dataBind();
        return;
      }
      this.treeObj.dataBind();
      this.setMultiSelect();
      this.updateValue(this.value);
    };
    DropDownTree2.prototype.updateCheckBoxState = function(checkBox) {
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.showCheckBox = checkBox;
      this.treeObj.dataBind();
      this.isDynamicChange = true;
      this.setSelectAllWrapper(this.showSelectAll);
      if (this.showSelectAll) {
        this.setLocale();
      }
      if (this.showCheckBox) {
        this.updateMode();
      }
      this.setMultiSelect();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateTemplate = function() {
      if (this.popupObj) {
        this.clearTemplate();
        this.portals = [];
        this.popupObj.destroy();
        if (this.isPopupOpen) {
          this.hidePopup();
          this.isFirstRender = true;
          this.renderPopup();
        } else {
          this.isFirstRender = true;
        }
      }
    };
    DropDownTree2.prototype.l10nUpdate = function(actionFailure2) {
      if (this.noRecord) {
        this.noRecord.innerHTML = "";
      } else {
        this.noRecord = this.createElement("div");
      }
      if (this.noRecordsTemplate !== "No Records Found" || this.actionFailureTemplate !== "The Request Failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        var templatestring = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var compiledString = this.templateComplier(template);
        var tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, void 0, this.noRecord);
        if (tempArr) {
          tempArr = Array.prototype.slice.call(tempArr);
          append(tempArr, this.noRecord);
        }
      } else {
        var l10nLocale = { noRecordsTemplate: "No Records Found", actionFailureTemplate: "The Request Failed" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        this.noRecord.innerHTML = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
      }
      addClass([this.noRecord], NODATACONTAINER);
      prepend([this.noRecord], this.popupDiv);
    };
    DropDownTree2.prototype.updateRecordTemplate = function(action) {
      if (this.treeItems && this.treeItems.length <= 0) {
        this.l10nUpdate(action);
        if (this.hasTemplate) {
          this.updateTemplate();
        }
      }
    };
    DropDownTree2.prototype.updateOverflowWrapper = function(state) {
      if (!state) {
        if (!this.inputWrapper.contains(this.overFlowWrapper)) {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
        }
      } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {
        this.overFlowWrapper.innerHTML = "";
      }
    };
    DropDownTree2.prototype.updateMultiSelection = function(state) {
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.allowMultiSelection = state;
      this.treeObj.dataBind();
      this.updateOption();
      if (this.allowMultiSelection) {
        this.updateMode();
      }
      this.setMultiSelect();
    };
    DropDownTree2.prototype.updateAllowFiltering = function(state) {
      if (!this.isFirstRender) {
        if (state) {
          this.renderFilter();
        } else {
          this.destroyFilter();
        }
      }
    };
    DropDownTree2.prototype.updateFilterPlaceHolder = function() {
      if (this.filterObj) {
        this.filterObj.placeholder = this.filterBarPlaceholder;
        this.filterObj.element.setAttribute("aria-label", this.filterBarPlaceholder);
      }
    };
    DropDownTree2.prototype.updateValue = function(value) {
      this.isDynamicChange = true;
      if (isNullOrUndefined(value) || value.length === 0) {
        this.resetValue(true);
      } else {
        this.setTreeValue();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateText = function(text) {
      if (isNullOrUndefined(text)) {
        this.resetValue();
      } else {
        this.setTreeText();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
    };
    DropDownTree2.prototype.updateModelMode = function() {
      var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (!validMode) {
        return;
      }
      if (!this.wrapText) {
        var overFlow = select("." + OVERFLOW_VIEW, this.inputWrapper);
        if (overFlow) {
          overFlow.innerHTML = "";
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText && (this.value && this.value.length !== 0)) {
        this.updateOverFlowView();
        addClass([this.inputEle], CHIP_INPUT);
        if (this.mode === "Box") {
          removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        } else {
          addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        }
      }
    };
    DropDownTree2.prototype.updateOption = function() {
      if (!this.hiddenElement.hasAttribute("multiple") && (this.allowMultiSelection || this.showCheckBox)) {
        this.hiddenElement.setAttribute("multiple", "");
      } else if (this.hiddenElement.hasAttribute("multiple") && (!this.allowMultiSelection && !this.showCheckBox)) {
        this.hiddenElement.removeAttribute("multiple");
      }
    };
    DropDownTree2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputEle);
            break;
          case "cssClass":
            this.setCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRTL(this.enableRtl);
            break;
          case "fields":
            this.setFields();
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.inputEle);
            break;
          case "enabled":
            this.setEnable();
            break;
          case "floatLabelType":
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);
            this.ensureClearIconPosition(newProp.floatLabelType);
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "allowFiltering":
            this.updateAllowFiltering(newProp.allowFiltering);
            break;
          case "filterBarPlaceholder":
            this.updateFilterPlaceHolder();
            break;
          case "value":
            this.oldValue = oldProp.value;
            this.updateValue(newProp.value);
            break;
          case "text":
            this.updateText(newProp.text);
            break;
          case "allowMultiSelection":
            this.updateMultiSelection(newProp.allowMultiSelection);
            break;
          case "mode":
            if (!this.showCheckBox && !this.allowMultiSelection) {
              return;
            }
            if (this.mode === "Custom") {
              if (this.overFlowWrapper) {
                detach(this.overFlowWrapper);
              }
              if (this.chipWrapper) {
                detach(this.chipWrapper);
              }
              this.setTagValues();
            } else {
              if (oldProp.mode === "Custom") {
                this.updateOverflowWrapper(this.wrapText);
              }
              this.updateModelMode();
            }
            break;
          case "delimiterChar":
            if (this.mode === "Box") {
              return;
            }
            if (this.showCheckBox || this.allowMultiSelection) {
              this.setMultiSelect();
            }
            break;
          case "selectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale();
            }
            break;
          case "unSelectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale(false);
            }
            break;
          case "showSelectAll":
            if (this.showCheckBox) {
              this.setSelectAllWrapper(newProp.showSelectAll);
              this.updatePopupHeight();
            }
            break;
          case "showCheckBox":
            this.updateCheckBoxState(newProp.showCheckBox);
            if (!this.wrapText) {
              this.updateOverflowWrapper(true);
            }
            this.updatePopupHeight();
            this.updateOption();
            break;
          case "treeSettings":
            this.updateTreeSettings(newProp);
            break;
          case "customTemplate":
            if (this.mode !== "Custom") {
              return;
            }
            this.chipCollection.innerHTML = "";
            this.setTagValues();
            break;
          case "sortOrder":
            if (this.hasTemplate) {
              this.updateTemplate();
            }
            this.treeObj.sortOrder = newProp.sortOrder;
            this.treeObj.dataBind();
            this.updateValue(this.value);
            break;
          case "showDropDownIcon":
            this.updateDropDownIconState(newProp.showDropDownIcon);
            break;
          case "popupWidth":
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "popupHeight":
            if (this.popupObj) {
              this.updatePopupHeight();
            }
            break;
          case "zIndex":
            if (this.popupObj) {
              this.popupObj.zIndex = newProp.zIndex;
              this.popupObj.dataBind();
            }
            break;
          case "headerTemplate":
            this.updateTemplate();
            break;
          case "footerTemplate":
            this.updateTemplate();
            break;
          case "itemTemplate":
            this.updateTemplate();
            this.treeObj.nodeTemplate = newProp.itemTemplate;
            this.treeObj.dataBind();
            break;
          case "noRecordsTemplate":
            this.updateRecordTemplate();
            break;
          case "actionFailureTemplate":
            this.updateRecordTemplate(true);
            break;
          case "htmlAttributes":
            this.setHTMLAttributes();
            break;
          case "wrapText":
            this.updateOverflowWrapper(this.wrapText);
            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
              this.updateView();
            } else {
              addClass([this.overFlowWrapper], HIDEICON);
              if (this.chipWrapper && this.mode === "Box") {
                removeClass([this.chipWrapper], HIDEICON);
              } else {
                removeClass([this.inputWrapper], SHOW_CHIP);
                removeClass([this.inputEle], CHIP_INPUT);
              }
              this.ensurePlaceHolder();
            }
            break;
        }
      }
    };
    DropDownTree2.prototype.clear = function() {
      this.clearAll();
      if (this.inputFocus) {
        this.onFocusOut();
      } else {
        if (this.changeOnBlur) {
          this.triggerChangeEvent();
        }
        this.removeValue = false;
      }
    };
    DropDownTree2.prototype.destroy = function() {
      this.clearTemplate();
      this.unWireEvents();
      this.setCssClass(null, this.cssClass);
      this.setProperties({ text: null }, true);
      this.treeObj.destroy();
      this.destroyFilter();
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
      if (this.element.tagName !== this.getDirective()) {
        this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      detach(this.inputWrapper);
      detach(this.popupDiv);
      detach(this.hiddenElement);
      Input.setRipple(false, [this.inputObj]);
      this.element.classList.remove("e-input");
      if (this.showCheckBox || this.allowMultiSelection) {
        this.element.classList.remove(CHIP_INPUT);
      }
      detach(this.inputObj.container);
      if (this.inputObj.buttons.length) {
        detach(this.inputObj.buttons[0]);
      }
      this.inputObj = null;
      while (this.hiddenElement.options.length > 0) {
        this.hiddenElement.remove(0);
      }
      this.hiddenElement.innerHTML = "";
      this.hiddenElement = null;
      this.inputWrapper.innerHTML = "";
      this.inputWrapper = null;
      this.popupDiv = null;
      this.tree = null;
      this.popupObj = null;
      this.treeObj = null;
      this.overAllClear = null;
      if (this.chipCollection) {
        var chipsIcons = selectAll(".e-chips-close", this.chipCollection);
        for (var _i = 0, chipsIcons_1 = chipsIcons; _i < chipsIcons_1.length; _i++) {
          var element = chipsIcons_1[_i];
          EventHandler.remove(element, "mousedown", this.removeChip);
        }
      }
      this.chipWrapper = null;
      this.chipCollection = null;
      this.checkAllParent = null;
      this.selectAllSpan = null;
      this.checkBoxElement = null;
      this.checkWrapper = null;
      this.popupEle = null;
      this.header = null;
      this.footer = null;
      this.overFlowWrapper = null;
      this.keyboardModule = null;
      _super.prototype.destroy.call(this);
      this.setProperties({ value: [] }, true);
    };
    DropDownTree2.prototype.destroyFilter = function() {
      if (this.filterObj) {
        this.filterObj.destroy();
        detach(this.filterObj.element);
        detach(this.filterContainer);
        this.filterObj = null;
      }
    };
    DropDownTree2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      if (this.isReact) {
        this.clearTemplate();
      }
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownTree2.prototype.ensureVisible = function(item) {
      this.treeObj.ensureVisible(item);
    };
    DropDownTree2.prototype.getData = function(item) {
      return this.treeObj.getTreeData(item);
    };
    DropDownTree2.prototype.hidePopup = function() {
      var eventArgs = { popup: this.popupObj, cancel: false };
      this.trigger("close", eventArgs);
      if (eventArgs.cancel) {
        return;
      }
      this.inputWrapper.classList.remove(ICONANIMATION3);
      if (this.popupEle) {
        addClass([this.popupEle], DDTHIDEICON);
      }
      attributes(this.inputEle, { "aria-expanded": "false" });
      if (this.popupObj && this.isPopupOpen) {
        this.popupObj.hide();
        if (this.inputFocus) {
          this.inputWrapper.focus();
          if (this.allowFiltering) {
            addClass([this.inputWrapper], [INPUTFOCUS4]);
          }
        }
        if (this.destroyPopupOnHide) {
          this.isFirstRender = true;
          this.destroyPopup();
        }
      }
    };
    DropDownTree2.prototype.selectAll = function(state) {
      this.selectAllItems(state);
    };
    DropDownTree2.prototype.showPopup = function() {
      if (!this.enabled || this.readonly || this.isPopupOpen) {
        return;
      }
      this.renderPopup();
      this.focusIn();
    };
    DropDownTree2.prototype.getModuleName = function() {
      return "dropdowntree";
    };
    __decorate29([
      Property("The Request Failed")
    ], DropDownTree2.prototype, "actionFailureTemplate", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "allowFiltering", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "allowMultiSelection", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "changeOnBlur", void 0);
    __decorate29([
      Property("")
    ], DropDownTree2.prototype, "cssClass", void 0);
    __decorate29([
      Property("${value.length} item(s) selected")
    ], DropDownTree2.prototype, "customTemplate", void 0);
    __decorate29([
      Property(",")
    ], DropDownTree2.prototype, "delimiterChar", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "enabled", void 0);
    __decorate29([
      Complex({}, Fields)
    ], DropDownTree2.prototype, "fields", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "filterBarPlaceholder", void 0);
    __decorate29([
      Property("StartsWith")
    ], DropDownTree2.prototype, "filterType", void 0);
    __decorate29([
      Property("Never")
    ], DropDownTree2.prototype, "floatLabelType", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "footerTemplate", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "ignoreAccent", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "ignoreCase", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "headerTemplate", void 0);
    __decorate29([
      Property({})
    ], DropDownTree2.prototype, "htmlAttributes", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "itemTemplate", void 0);
    __decorate29([
      Property("Default")
    ], DropDownTree2.prototype, "mode", void 0);
    __decorate29([
      Property("No Records Found")
    ], DropDownTree2.prototype, "noRecordsTemplate", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "placeholder", void 0);
    __decorate29([
      Property("300px")
    ], DropDownTree2.prototype, "popupHeight", void 0);
    __decorate29([
      Property("100%")
    ], DropDownTree2.prototype, "popupWidth", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "readonly", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "showSelectAll", void 0);
    __decorate29([
      Property("Select All")
    ], DropDownTree2.prototype, "selectAllText", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "showCheckBox", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "destroyPopupOnHide", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "enableHtmlSanitizer", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "showClearButton", void 0);
    __decorate29([
      Property(true)
    ], DropDownTree2.prototype, "showDropDownIcon", void 0);
    __decorate29([
      Property("None")
    ], DropDownTree2.prototype, "sortOrder", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "text", void 0);
    __decorate29([
      Complex({}, TreeSettings)
    ], DropDownTree2.prototype, "treeSettings", void 0);
    __decorate29([
      Property("Unselect All")
    ], DropDownTree2.prototype, "unSelectAllText", void 0);
    __decorate29([
      Property(null)
    ], DropDownTree2.prototype, "value", void 0);
    __decorate29([
      Property("100%")
    ], DropDownTree2.prototype, "width", void 0);
    __decorate29([
      Property(1e3)
    ], DropDownTree2.prototype, "zIndex", void 0);
    __decorate29([
      Property(false)
    ], DropDownTree2.prototype, "wrapText", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "actionFailure", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "beforeOpen", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "change", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "close", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "blur", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "created", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "dataBound", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "destroyed", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "filtering", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "focus", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "keyPress", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "open", void 0);
    __decorate29([
      Event()
    ], DropDownTree2.prototype, "select", void 0);
    DropDownTree2 = __decorate29([
      NotifyPropertyChanges
    ], DropDownTree2);
    return DropDownTree2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate30 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SPINNER_CLASS = "e-atc-spinner-icon";
dropDownListClasses.root = "e-combobox";
var inputObject2 = {
  container: null,
  buttons: []
};
var ComboBox = (
  /** @class */
  function(_super) {
    __extends33(ComboBox2, _super);
    function ComboBox2(options, element) {
      return _super.call(this, options, element) || this;
    }
    ComboBox2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ComboBox2.prototype.getLocaleName = function() {
      return "combo-box";
    };
    ComboBox2.prototype.wireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this);
        EventHandler.add(this.inputWrapper.container, "blur", this.onBlurHandler, this);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this);
      }
      EventHandler.add(this.inputElement, "focus", this.targetFocus, this);
      if (!this.readonly) {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
        EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
        EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
        EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
        EventHandler.add(window, "resize", this.windowResize, this);
      }
      this.bindCommonEvent();
    };
    ComboBox2.prototype.preventBlur = function(e) {
      if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {
        e.preventDefault();
      }
    };
    ComboBox2.prototype.onBlurHandler = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {
        this.customValue(e);
      }
      _super.prototype.onBlurHandler.call(this, e);
    };
    ComboBox2.prototype.targetElement = function() {
      return this.inputElement;
    };
    ComboBox2.prototype.setOldText = function(text) {
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      this.customValue();
      this.removeSelection();
    };
    ComboBox2.prototype.setOldValue = function(value) {
      if (this.allowCustom) {
        this.valueMuteChange(this.value);
      } else {
        this.valueMuteChange(null);
      }
      this.removeSelection();
      this.setHiddenValue();
    };
    ComboBox2.prototype.valueMuteChange = function(value) {
      value = this.allowObjectBinding && !isNullOrUndefined(value) ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      var inputValue = isNullOrUndefined(value) ? null : value.toString();
      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
      if (this.allowObjectBinding) {
        value = this.getDataByValue(value);
      }
      this.setProperties({ value, text: value, index: null }, true);
      this.activeIndex = this.index;
      var fields = this.fields;
      var dataItem = {};
      dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();
      dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();
      this.itemData = dataItem;
      this.item = null;
      if (!this.allowObjectBinding && this.previousValue !== this.value || this.allowObjectBinding && this.previousValue && this.value && !this.isObjectInArray(this.previousValue, [this.value])) {
        this.detachChangeEvent(null);
      }
    };
    ComboBox2.prototype.updateValues = function() {
      if (this.fields.disabled) {
        if (this.value != null) {
          this.value = !this.isDisableItemValue(this.value) ? this.value : null;
        }
        if (this.text != null) {
          this.text = !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
        }
        if (this.index != null) {
          this.index = !this.isDisabledItemByIndex(this.index) ? this.index : null;
          this.activeIndex = this.index;
        }
      }
      if (!isNullOrUndefined(this.value)) {
        var currentValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        var li = this.getElementByValue(currentValue);
        var doesItemExist = !isNullOrUndefined(li) ? true : false;
        if (this.enableVirtualization && this.value) {
          var fields = this.fields.value ? this.fields.value : "";
          var currentValue_1 = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
          if (this.dataSource instanceof DataManager) {
            var getItem = new DataManager(this.virtualGroupDataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue_1)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              doesItemExist = true;
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": value });
              }
            }
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", currentValue_1)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              doesItemExist = true;
              var dataItem = this.getItemData();
              var value = this.allowObjectBinding ? this.getDataByValue(dataItem.value) : dataItem.value;
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": value });
              }
            }
          }
        }
        if (li) {
          this.setSelection(li, null);
        } else if (!this.enableVirtualization && this.allowCustom || this.allowCustom && this.enableVirtualization && !doesItemExist) {
          this.valueMuteChange(this.value);
        } else if (!this.enableVirtualization || this.enableVirtualization && !doesItemExist) {
          this.valueMuteChange(null);
        }
      } else if (this.text && isNullOrUndefined(this.value)) {
        var li = this.getElementByText(this.text);
        if (li) {
          this.setSelection(li, null);
        } else {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          this.customValue();
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    ComboBox2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement && this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    ComboBox2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "role": "combobox",
        "aria-autocomplete": "both",
        "aria-labelledby": this.hiddenElement.id,
        "aria-expanded": "false",
        "aria-readonly": this.readonly.toString(),
        "autocomplete": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      return ariaAttributes;
    };
    ComboBox2.prototype.searchLists = function(e) {
      this.isTyped = true;
      if (this.isFiltering()) {
        _super.prototype.searchLists.call(this, e);
        if (this.ulElement && this.filterInput.value.trim() === "") {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
      } else {
        if (this.ulElement && this.inputElement.value === "" && this.preventAutoFill) {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
        this.incrementalSearch(e);
      }
    };
    ComboBox2.prototype.getNgDirective = function() {
      return "EJS-COMBOBOX";
    };
    ComboBox2.prototype.setSearchBox = function() {
      this.filterInput = this.inputElement;
      var searchBoxContainer = this.isFiltering() || this.isReact && this.getModuleName() === "combobox" ? this.inputWrapper : inputObject2;
      return searchBoxContainer;
    };
    ComboBox2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isSelectCustom) {
        this.removeSelection();
      }
      if (!this.preventAutoFill && this.getModuleName() === "combobox" && this.isTyped && !this.enableVirtualization) {
        setTimeout(function() {
          _this.inlineSearch();
        });
      }
    };
    ComboBox2.prototype.getFocusElement = function() {
      var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
      var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : this.list;
      var isSelected = dataItem.text && dataItem.text.toString() === this.inputElement.value && !isNullOrUndefined(selected);
      if (isSelected) {
        return selected;
      }
      if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
        var inputValue = this.inputElement.value;
        var dataSource = this.sortedData;
        var type = this.typeOfData(dataSource).typeof;
        var activeItem = Search(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type);
        if (this.enableVirtualization && inputValue !== "" && this.getModuleName() !== "autocomplete" && this.isTyped && !this.allowFiltering) {
          var updatingincrementalindex = false;
          if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex == 0) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (this.incrementalEndIndex == 0) {
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
            } else {
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          activeItem = Search(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
          while (isNullOrUndefined(activeItem.item) && this.incrementalEndIndex < this.totalItemCount) {
            this.incrementalStartIndex = this.incrementalEndIndex;
            this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            activeItem = Search(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
            if (!isNullOrUndefined(activeItem)) {
              activeItem.index = activeItem.index + this.incrementalStartIndex;
              break;
            }
            if (isNullOrUndefined(activeItem) && this.incrementalEndIndex >= this.totalItemCount) {
              this.incrementalStartIndex = 0;
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
              break;
            }
          }
          if (activeItem.index) {
            if (!(this.viewPortInfo.startIndex >= activeItem.index) || !(activeItem.index >= this.viewPortInfo.endIndex)) {
              var startIndex = activeItem.index - (this.itemCount / 2 - 2) > 0 ? activeItem.index - (this.itemCount / 2 - 2) : 0;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              if (startIndex != this.viewPortInfo.startIndex) {
                this.updateIncrementalView(startIndex, endIndex);
              }
            }
          }
          if (!isNullOrUndefined(activeItem.item)) {
            var index_1 = this.getIndexByValue(activeItem.item.getAttribute("data-value")) - this.skeletonCount;
            if (index_1 > this.itemCount / 2) {
              var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
          if (activeItem && activeItem.item) {
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          }
        }
        var activeElement = activeItem.item;
        if (!isNullOrUndefined(activeElement)) {
          var count = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1;
          var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
          if (!isNaN(height) && this.getModuleName() !== "autocomplete") {
            this.removeFocus();
            var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
            if (!this.enableVirtualization) {
              this.list.scrollTop = count * height + fixedHead;
            } else {
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
              if (this.enableVirtualization && !this.fields.groupBy) {
                var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? activeElement.offsetTop + this.virtualListInfo.startIndex * activeElement.offsetHeight : activeElement.offsetTop;
                this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * activeElement.offsetHeight;
              }
            }
            addClass([activeElement], dropDownListClasses.focus);
          }
        } else {
          if (this.isSelectCustom && this.inputElement.value.trim() !== "") {
            this.removeFocus();
            if (!this.enableVirtualization) {
              this.list.scrollTop = 0;
            }
          }
        }
        return activeElement;
      } else {
        return null;
      }
    };
    ComboBox2.prototype.setValue = function(e) {
      if (e && e.type === "keydown" && e.action === "enter" || e && e.type === "click") {
        this.removeFillSelection();
      }
      if (this.autofill && this.getModuleName() === "combobox" && e && e.type === "keydown" && e.action !== "enter") {
        this.preventAutoFill = false;
        this.inlineSearch(e);
        return false;
      } else {
        return _super.prototype.setValue.call(this, e);
      }
    };
    ComboBox2.prototype.checkCustomValue = function() {
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      this.itemData = this.getDataByValue(value);
      var dataItem = this.getItemData();
      var setValue3 = this.allowObjectBinding ? this.itemData : dataItem.value;
      if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {
        this.setProperties({ "value": setValue3 }, !this.allowCustom);
      }
    };
    ComboBox2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = this.getModuleName() === "autocomplete" ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon " + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    ComboBox2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    ComboBox2.prototype.setAutoFill = function(activeElement, isHover) {
      if (!isHover) {
        this.setHoverList(activeElement);
      }
      if (this.autofill && !this.preventAutoFill) {
        var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString();
        var currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
        if (this.getModuleName() === "combobox") {
          if (!this.isSelected && (!this.allowObjectBinding && this.previousValue !== currentFillValue) || this.allowObjectBinding && this.previousValue && currentFillValue && !this.isObjectInArray(this.previousValue, [this.getDataByValue(currentFillValue)])) {
            this.updateSelectedItem(activeElement, null);
            this.isSelected = true;
            this.previousValue = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(activeElement.getAttribute("data-value"))) : this.getFormattedValue(activeElement.getAttribute("data-value"));
          } else {
            this.updateSelectedItem(activeElement, null, true);
          }
        }
        if (!this.isAndroidAutoFill(currentValue)) {
          this.setAutoFillSelection(currentValue, isHover);
        }
      }
    };
    ComboBox2.prototype.isAndroidAutoFill = function(value) {
      if (Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;
        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    ComboBox2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
      if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {
        this.searchLists(e);
      }
    };
    ComboBox2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    ComboBox2.prototype.inlineSearch = function(e) {
      var isKeyNavigate = e && (e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown");
      var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
      if (!isNullOrUndefined(activeElement)) {
        if (!isKeyNavigate) {
          var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
          this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;
        }
        this.preventAutoFill = this.inputElement.value === "" ? false : this.preventAutoFill;
        this.setAutoFill(activeElement, isKeyNavigate);
      } else if (!isNullOrUndefined(this.inputElement) && this.inputElement.value === "") {
        this.activeIndex = null;
        if (!isNullOrUndefined(this.list)) {
          if (!this.enableVirtualization) {
            this.list.scrollTop = 0;
          }
          var focusItem = this.list.querySelector("." + dropDownListClasses.li);
          this.setHoverList(focusItem);
        }
      } else {
        this.activeIndex = null;
        this.removeSelection();
        if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {
          this.removeFocus();
        }
      }
    };
    ComboBox2.prototype.incrementalSearch = function(e) {
      this.showPopup(e);
      if (!isNullOrUndefined(this.listData)) {
        this.inlineSearch(e);
        e.preventDefault();
      }
    };
    ComboBox2.prototype.setAutoFillSelection = function(currentValue, isKeyNavigate) {
      if (isKeyNavigate === void 0) {
        isKeyNavigate = false;
      }
      var selection = this.getSelectionPoints();
      var value = this.inputElement.value.substr(0, selection.start);
      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);
        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
      } else if (isKeyNavigate) {
        Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
      }
    };
    ComboBox2.prototype.getValueByText = function(text) {
      return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);
    };
    ComboBox2.prototype.unWireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur);
        EventHandler.remove(this.inputWrapper.container, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick);
      }
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "focus", this.targetFocus);
        if (!this.readonly) {
          EventHandler.remove(this.inputElement, "input", this.onInput);
          EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
          EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
          EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
          EventHandler.remove(window, "resize", this.windowResize);
        }
      }
      this.unBindCommonEvent();
    };
    ComboBox2.prototype.setSelection = function(li, e) {
      _super.prototype.setSelection.call(this, li, e);
      if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {
        this.removeFocus();
      }
    };
    ComboBox2.prototype.selectCurrentItem = function(e) {
      var li;
      if (this.isPopupOpen) {
        if (this.isSelected) {
          li = this.list.querySelector("." + dropDownListClasses.selected);
        } else {
          li = this.list.querySelector("." + dropDownListClasses.focus);
        }
        if (this.isDisabledElement(li)) {
          return;
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
      }
      if (e.action === "enter" && this.inputElement.value.trim() === "") {
        this.clearAll(e);
      } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {
        this.customValue(e);
      }
      this.hidePopup(e);
    };
    ComboBox2.prototype.setHoverList = function(li) {
      this.removeSelection();
      if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {
        this.removeFocus();
        li.classList.add(dropDownListClasses.focus);
      }
    };
    ComboBox2.prototype.targetFocus = function(e) {
      if (Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = false;
      }
      this.onFocus(e);
      Input.calculateWidth(this.inputElement, this.inputWrapper.container);
    };
    ComboBox2.prototype.dropDownClick = function(e) {
      e.preventDefault();
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.dropDownClick.call(this, e);
    };
    ComboBox2.prototype.customValue = function(e) {
      var _this = this;
      var value = this.getValueByText(this.inputElement.value);
      if (!this.allowCustom && this.inputElement.value !== "") {
        var previousValue = this.previousValue;
        var currentValue = this.value;
        value = this.allowObjectBinding ? this.getDataByValue(value) : value;
        this.setProperties({ value });
        if (isNullOrUndefined(this.value)) {
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }
        var newValue = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
        if (this.autofill && (!this.allowObjectBinding && previousValue === this.value || this.allowObjectBinding && previousValue && this.isObjectInArray(previousValue, [this.value])) && (!this.allowObjectBinding && currentValue !== this.value || this.allowObjectBinding && currentValue && !this.isObjectInArray(currentValue, [this.value]))) {
          this.onChangeEvent(null);
        }
      } else if (this.inputElement.value.trim() !== "") {
        var previousValue_1 = this.value;
        if (isNullOrUndefined(value)) {
          var value_1 = this.inputElement.value === "" ? null : this.inputElement.value;
          var eventArgs = { text: value_1, item: {} };
          this.isObjectCustomValue = true;
          if (!this.initial) {
            this.trigger("customValueSpecifier", eventArgs, function(eventArgs2) {
              _this.updateCustomValueCallback(value_1, eventArgs2, previousValue_1, e);
            });
          } else {
            this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);
          }
        } else {
          this.isSelectCustom = false;
          value = this.allowObjectBinding ? this.getDataByValue(value) : value;
          this.setProperties({ value });
          if (!this.allowObjectBinding && previousValue_1 !== this.value || this.allowObjectBinding && previousValue_1 && this.value && !this.isObjectInArray(previousValue_1, [this.value])) {
            this.onChangeEvent(e);
          }
        }
      } else if (this.allowCustom) {
        this.isSelectCustom = true;
      }
    };
    ComboBox2.prototype.updateCustomValueCallback = function(value, eventArgs, previousValue, e) {
      var _this = this;
      var fields = this.fields;
      var item = eventArgs.item;
      var dataItem = {};
      if (item && getValue(fields.text, item) && getValue(fields.value, item)) {
        dataItem = item;
      } else {
        setValue(fields.text, value, dataItem);
        setValue(fields.value, value, dataItem);
      }
      this.itemData = dataItem;
      var emptyObject = {};
      if (this.allowObjectBinding) {
        var keys = this.listData && this.listData.length > 0 ? Object.keys(this.listData[0]) : Object.keys(this.itemData);
        if (!(this.listData && this.listData.length > 0) && (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox" && this.allowFiltering)) {
          keys = this.firstItem ? Object.keys(this.firstItem) : Object.keys(this.itemData);
        }
        keys.forEach(function(key) {
          emptyObject[key] = key === fields.value || key === fields.text ? getValue(fields.value, _this.itemData) : null;
        });
      }
      var changeData = {
        text: getValue(fields.text, this.itemData),
        value: this.allowObjectBinding ? emptyObject : getValue(fields.value, this.itemData),
        index: null
      };
      this.setProperties(changeData, true);
      this.setSelection(null, null);
      this.isSelectCustom = true;
      this.isObjectCustomValue = false;
      if (!this.allowObjectBinding && previousValue !== this.value || this.allowObjectBinding && (previousValue == null && this.value !== null || previousValue && !this.isObjectInArray(previousValue, [this.value]))) {
        this.onChangeEvent(e, true);
      }
    };
    ComboBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "combobox") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp, oldProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            if (this.readonly) {
              EventHandler.remove(this.inputElement, "input", this.onInput);
              EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
              EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
            } else {
              EventHandler.add(this.inputElement, "input", this.onInput, this);
              EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
              EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
            }
            this.setReadOnly();
            break;
          case "allowFiltering":
            this.setSearchBox();
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              _super.prototype.renderList.call(this);
            }
            break;
          case "allowCustom":
            break;
          default: {
            var comboProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
            if (this.isFiltering() && prop === "dataSource" && isNullOrUndefined(this.list) && this.itemTemplate && this.getModuleName() === "combobox") {
              _super.prototype.renderList.call(this);
            }
            break;
          }
        }
      }
    };
    ComboBox2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.setSearchBox();
      this.renderComplete();
    };
    ComboBox2.prototype.getModuleName = function() {
      return "combobox";
    };
    ComboBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ComboBox2.prototype.filter = function(dataSource, query, fields) {
      _super.prototype.filter.call(this, dataSource, query, fields);
    };
    ComboBox2.prototype.showPopup = function(e) {
      _super.prototype.showPopup.call(this, e);
    };
    ComboBox2.prototype.hidePopup = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData)) {
        var isEscape = this.isEscapeKey;
        if (this.isEscapeKey) {
          Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);
          this.isEscapeKey = false;
        }
        if (this.autofill) {
          this.removeFillSelection();
        }
        var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
        var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : null;
        if (this.inputElement && dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {
          if (this.isSelected) {
            this.onChangeEvent(e);
            this.isSelectCustom = false;
          }
          _super.prototype.hidePopup.call(this, e);
          return;
        }
        if (this.getModuleName() === "combobox" && this.inputElement.value.trim() !== "") {
          var dataSource = this.sortedData;
          var type = this.typeOfData(dataSource).typeof;
          var searchItem = Search(this.inputElement.value, this.liCollections, "Equal", true, dataSource, this.fields, type);
          this.selectedLI = searchItem.item;
          if (isNullOrUndefined(searchItem.index)) {
            searchItem.index = Search(this.inputElement.value, this.liCollections, "StartsWith", true, dataSource, this.fields, type).index;
          }
          this.activeIndex = searchItem.index;
          if (!isNullOrUndefined(this.selectedLI)) {
            this.updateSelectedItem(this.selectedLI, null, true);
          } else if (isEscape) {
            this.isSelectCustom = true;
            this.removeSelection();
          }
        }
        if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
          this.customValue(e);
        }
      }
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== value) {
        this.customValue();
      }
      _super.prototype.hidePopup.call(this, e);
    };
    ComboBox2.prototype.focusIn = function() {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.focusIn.call(this);
    };
    ComboBox2.prototype.clear = function() {
      this.value = null;
    };
    ComboBox2.prototype.focusOut = function(e) {
      _super.prototype.focusOut.call(this, e);
    };
    ComboBox2.prototype.getItems = function() {
      return _super.prototype.getItems.call(this);
    };
    ComboBox2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    ComboBox2.prototype.renderHightSearch = function() {
    };
    __decorate30([
      Property(false)
    ], ComboBox2.prototype, "autofill", void 0);
    __decorate30([
      Property(true)
    ], ComboBox2.prototype, "allowCustom", void 0);
    __decorate30([
      Property({})
    ], ComboBox2.prototype, "htmlAttributes", void 0);
    __decorate30([
      Property(false)
    ], ComboBox2.prototype, "allowFiltering", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "query", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "index", void 0);
    __decorate30([
      Property(true)
    ], ComboBox2.prototype, "showClearButton", void 0);
    __decorate30([
      Property(false)
    ], ComboBox2.prototype, "enableRtl", void 0);
    __decorate30([
      Event()
    ], ComboBox2.prototype, "customValueSpecifier", void 0);
    __decorate30([
      Event()
    ], ComboBox2.prototype, "filtering", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "valueTemplate", void 0);
    __decorate30([
      Property("Never")
    ], ComboBox2.prototype, "floatLabelType", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "cssClass", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "headerTemplate", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "footerTemplate", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "placeholder", void 0);
    __decorate30([
      Property("100%")
    ], ComboBox2.prototype, "width", void 0);
    __decorate30([
      Property("300px")
    ], ComboBox2.prototype, "popupHeight", void 0);
    __decorate30([
      Property("100%")
    ], ComboBox2.prototype, "popupWidth", void 0);
    __decorate30([
      Property(false)
    ], ComboBox2.prototype, "readonly", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "text", void 0);
    __decorate30([
      Property(null)
    ], ComboBox2.prototype, "value", void 0);
    __decorate30([
      Property(false)
    ], ComboBox2.prototype, "allowObjectBinding", void 0);
    ComboBox2 = __decorate30([
      NotifyPropertyChanges
    ], ComboBox2);
    return ComboBox2;
  }(DropDownList)
);

// node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate31 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
dropDownListClasses.root = "e-autocomplete";
dropDownListClasses.icon = "e-input-group-icon e-ddl-icon e-search-icon";
var AutoComplete = (
  /** @class */
  function(_super) {
    __extends34(AutoComplete2, _super);
    function AutoComplete2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.isFiltered = false;
      _this_1.searchList = false;
      return _this_1;
    }
    AutoComplete2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    AutoComplete2.prototype.getLocaleName = function() {
      return "auto-complete";
    };
    AutoComplete2.prototype.getNgDirective = function() {
      return "EJS-AUTOCOMPLETE";
    };
    AutoComplete2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var value = this.allowObjectBinding && !isNullOrUndefined(this.value) ? getValue(this.fields.value ? this.fields.value : "", this.value) : this.value;
      var filterType = this.queryString === "" && !isNullOrUndefined(value) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(value) ? value : this.queryString;
      if (this.isFiltered) {
        if (this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery)) {
          filterQuery = this.customFilterQuery.clone();
        } else if (!this.enableVirtualization) {
          return filterQuery;
        }
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount) && !this.enableVirtualization) {
        if (this.suggestionCount !== 20) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      if (this.enableVirtualization) {
        var queryTakeValue = 0;
        var querySkipValue = 0;
        var takeValue = this.getTakeValue();
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              queryTakeValue = takeValue <= filterQuery.queries[queryElements].e.nos ? filterQuery.queries[queryElements].e.nos : takeValue;
            }
          }
        }
        if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
          for (var queryElements = 0; queryElements < this.query.queries.length; queryElements++) {
            if (this.query.queries[queryElements].fn === "onTake") {
              queryTakeValue = takeValue <= this.query.queries[queryElements].e.nos ? this.query.queries[queryElements].e.nos : takeValue;
            }
          }
        }
        if (filterQuery && filterQuery.queries.length > 0) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              querySkipValue = filterQuery.queries[queryElements].e.nos;
              filterQuery.queries.splice(queryElements, 1);
              --queryElements;
              continue;
            }
            if (filterQuery.queries[queryElements].fn === "onTake") {
              queryTakeValue = filterQuery.queries[queryElements].e.nos <= queryTakeValue ? queryTakeValue : filterQuery.queries[queryElements].e.nos;
              filterQuery.queries.splice(queryElements, 1);
              --queryElements;
            }
          }
        }
        if (querySkipValue > 0 && this.virtualItemStartIndex <= querySkipValue) {
          filterQuery.skip(querySkipValue);
        } else {
          filterQuery.skip(this.virtualItemStartIndex);
        }
        if (queryTakeValue > 0 && takeValue <= queryTakeValue) {
          filterQuery.take(queryTakeValue);
        } else {
          filterQuery.take(takeValue);
        }
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    AutoComplete2.prototype.searchLists = function(e) {
      var _this_1 = this;
      this.isTyped = true;
      this.isDataFetched = this.isSelectCustom = false;
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      this.checkAndResetCache();
      if (isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this, e, true);
      }
      this.queryString = this.filterInput.value;
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields, null, e);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      this.isRequesting = false;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this_1.isFiltered = true;
          _this_1.customFilterQuery = query;
          _this_1.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this_1.isFiltered && !eventArgs2.preventDefaultAction) {
          _this_1.searchList = true;
          _this_1.filterAction(_this_1.dataSource, null, _this_1.fields, e);
        }
      });
    };
    AutoComplete2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.filterAction(dataSource, query, fields);
    };
    AutoComplete2.prototype.filterAction = function(dataSource, query, fields, e) {
      this.beforePopupOpen = true;
      var isNoDataElement = this.list.classList.contains("e-nodata");
      if (this.queryString !== "" && this.queryString.length >= this.minLength) {
        if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
          this.isPreventScrollAction = true;
          this.list.scrollTop = 0;
          this.previousStartIndex = 0;
          this.virtualListInfo = null;
        }
        this.resetList(dataSource, fields, query, e);
        if (this.enableVirtualization && isNoDataElement && !this.list.classList.contains("e-nodata")) {
          if (!this.list.querySelector(".e-virtual-ddl-content")) {
            this.list.appendChild(this.createElement("div", {
              className: "e-virtual-ddl-content",
              styles: this.getTransformValues()
            })).appendChild(this.list.querySelector(".e-list-parent"));
          }
          if (!this.list.querySelector(".e-virtual-ddl")) {
            var virualElement = this.createElement("div", {
              id: this.element.id + "_popup",
              className: "e-virtual-ddl",
              styles: this.GetVirtualTrackHeight()
            });
            document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
          }
        }
        if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
          this.getFilteringSkeletonCount();
        }
      } else {
        this.hidePopup(e);
        this.beforePopupOpen = false;
      }
      this.renderReactTemplates();
    };
    AutoComplete2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
        this.checkAndResetCache();
      }
      if (this.beforePopupOpen) {
        this.hidePopup();
      }
    };
    AutoComplete2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      if (!this.enableVirtualization) {
        this.fixedHeaderElement = null;
      }
      if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
        this.getFilteringSkeletonCount();
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      var item = this.list.querySelector("." + dropDownListClasses.li);
      if (!isNullOrUndefined(item)) {
        removeClass([item], dropDownListClasses.focus);
      }
      this.postBackAction();
    };
    AutoComplete2.prototype.postBackAction = function() {
      if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {
        var items = [this.liCollections[0]];
        var dataSource = this.listData;
        var type = this.typeOfData(dataSource).typeof;
        var searchItem = Search(this.inputElement.value, items, "StartsWith", this.ignoreCase, dataSource, this.fields, type);
        this.searchList = false;
        if (!isNullOrUndefined(searchItem.item)) {
          _super.prototype.setAutoFill.call(this, this.liCollections[0], true);
        }
      }
    };
    AutoComplete2.prototype.setSelection = function(li, e) {
      if (!this.isValidLI(li)) {
        this.selectedLI = li;
        return;
      }
      if (!isNullOrUndefined(e) && e.type === "keydown" && e.action !== "enter" && e.action !== "tab" && this.isValidLI(li)) {
        var value = this.getFormattedValue(li.getAttribute("data-value"));
        this.activeIndex = this.getIndexByValue(value);
        this.setHoverList(li);
        this.selectedLI = li;
        this.setScrollPosition(e);
        if (this.autofill && this.isPopupOpen) {
          this.preventAutoFill = false;
          var isKeyNavigate = e && e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown";
          _super.prototype.setAutoFill.call(this, li, isKeyNavigate);
        }
      } else {
        _super.prototype.setSelection.call(this, li, e);
      }
    };
    AutoComplete2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this_1 = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            if (_this_1.element.tagName === _this_1.getNgDirective() && _this_1.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
          }
          itemCreated_1.apply(_this_1, [e]);
        };
      }
      return fields;
    };
    AutoComplete2.prototype.isFiltering = function() {
      return true;
    };
    AutoComplete2.prototype.renderPopup = function(e) {
      if (!this.enableVirtualization) {
        this.list.scrollTop = 0;
      }
      _super.prototype.renderPopup.call(this, e);
    };
    AutoComplete2.prototype.isEditTextBox = function() {
      return false;
    };
    AutoComplete2.prototype.isPopupButton = function() {
      return this.showPopupButton;
    };
    AutoComplete2.prototype.isSelectFocusItem = function(element) {
      return false;
    };
    AutoComplete2.prototype.setInputValue = function(newProp, oldProp) {
      var oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;
      var value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;
      if (this.allowObjectBinding) {
        oldValue = !isNullOrUndefined(oldValue) ? getValue(this.fields.value ? this.fields.value : "", oldValue) : oldValue;
        value = !isNullOrUndefined(value) ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      }
      if (value && this.typedString === "" && !this.allowCustom && !(this.dataSource instanceof DataManager)) {
        var checkFields_1_1 = this.typeOfData(this.dataSource).typeof === "string" ? "" : this.fields.value;
        var listLength_1 = this.getItems().length;
        var query = new Query();
        var _this_2 = this;
        new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields_1_1, "equal", value))).then(function(e) {
          if (e.result.length > 0) {
            _this_2.value = checkFields_1_1 !== "" ? _this_2.allowObjectBinding ? e.result[0] : e.result[0][_this_2.fields.value].toString() : e.result[0].toString();
            _this_2.addItem(e.result, listLength_1);
            _this_2.updateValues();
          } else {
            newProp && newProp.text ? _this_2.setOldText(oldValue) : newProp && newProp.value ? _this_2.setOldValue(oldValue) : _this_2.updateValues();
          }
        });
      } else if (newProp) {
        newProp.text ? this.setOldText(oldValue) : this.setOldValue(oldValue);
      }
    };
    AutoComplete2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      this.preventAutoFill = true;
      if (isNullOrUndefined(this.list)) {
        this.renderList(e);
      } else {
        this.resetList(this.dataSource, this.fields, null, e);
      }
    };
    AutoComplete2.prototype.hidePopup = function(e) {
      _super.prototype.hidePopup.call(this, e);
      this.activeIndex = null;
      this.virtualListInfo = this.viewPortInfo;
      this.previousStartIndex = this.viewPortInfo.startIndex;
      this.startIndex = this.viewPortInfo.startIndex;
      this.previousEndIndex = this.viewPortInfo.endIndex;
    };
    AutoComplete2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "autocomplete") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "showPopupButton":
            if (this.showPopupButton) {
              var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);
              this.inputWrapper.buttons[0] = button;
              Input.calculateWidth(this.inputElement, this.inputWrapper.container);
              if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
                this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
              }
              if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {
                EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
              }
            } else {
              detach(this.inputWrapper.buttons[0]);
              this.inputWrapper.buttons[0] = null;
            }
            break;
          default: {
            var atcProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
            break;
          }
        }
      }
    };
    AutoComplete2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
          isHighlight = null;
        }
      }
    };
    AutoComplete2.prototype.getModuleName = function() {
      return "autocomplete";
    };
    AutoComplete2.prototype.render = function() {
      _super.prototype.render.call(this);
    };
    __decorate31([
      Complex({ value: null, iconCss: null, groupBy: null, disabled: null }, FieldSettings3)
    ], AutoComplete2.prototype, "fields", void 0);
    __decorate31([
      Property(true)
    ], AutoComplete2.prototype, "ignoreCase", void 0);
    __decorate31([
      Property(false)
    ], AutoComplete2.prototype, "showPopupButton", void 0);
    __decorate31([
      Property(false)
    ], AutoComplete2.prototype, "highlight", void 0);
    __decorate31([
      Property(20)
    ], AutoComplete2.prototype, "suggestionCount", void 0);
    __decorate31([
      Property({})
    ], AutoComplete2.prototype, "htmlAttributes", void 0);
    __decorate31([
      Property(null)
    ], AutoComplete2.prototype, "query", void 0);
    __decorate31([
      Property(1)
    ], AutoComplete2.prototype, "minLength", void 0);
    __decorate31([
      Property("Contains")
    ], AutoComplete2.prototype, "filterType", void 0);
    __decorate31([
      Event()
    ], AutoComplete2.prototype, "filtering", void 0);
    __decorate31([
      Property(null)
    ], AutoComplete2.prototype, "index", void 0);
    __decorate31([
      Property("Never")
    ], AutoComplete2.prototype, "floatLabelType", void 0);
    __decorate31([
      Property(null)
    ], AutoComplete2.prototype, "valueTemplate", void 0);
    __decorate31([
      Property(null)
    ], AutoComplete2.prototype, "filterBarPlaceholder", void 0);
    __decorate31([
      Property(false)
    ], AutoComplete2.prototype, "allowFiltering", void 0);
    __decorate31([
      Property(null)
    ], AutoComplete2.prototype, "text", void 0);
    AutoComplete2 = __decorate31([
      NotifyPropertyChanges
    ], AutoComplete2);
    return AutoComplete2;
  }(ComboBox)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/float-label.js
var FLOATLINE = "e-float-line";
var FLOATTEXT = "e-float-text";
var LABELTOP = "e-label-top";
var LABELBOTTOM = "e-label-bottom";
function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
  var floatLinelement = createElement("span", { className: FLOATLINE });
  var floatLabelElement = createElement("label", { className: FLOATTEXT });
  var id = element.getAttribute("id") ? element.getAttribute("id") : getUniqueID("ej2_multiselect");
  element.id = id;
  if (!isNullOrUndefined(element.id) && element.id !== "") {
    floatLabelElement.id = "label_" + element.id.replace(/ /g, "_");
    floatLabelElement.setAttribute("for", element.id);
    attributes(inputElement, { "aria-labelledby": floatLabelElement.id });
  }
  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== "") {
    floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);
    inputElement.removeAttribute("placeholder");
  }
  floatLabelElement.innerText = encodePlaceholder(placeholder);
  searchWrapper.appendChild(floatLinelement);
  searchWrapper.appendChild(floatLabelElement);
  overAllWrapper.classList.add("e-float-input");
  updateFloatLabelState(value, floatLabelElement);
  if (floatLabelType === "Always") {
    if (floatLabelElement.classList.contains(LABELBOTTOM)) {
      removeClass([floatLabelElement], LABELBOTTOM);
    }
    addClass([floatLabelElement], LABELTOP);
  }
}
function updateFloatLabelState(value, label) {
  if (value && value.length > 0) {
    addClass([label], LABELTOP);
    removeClass([label], LABELBOTTOM);
  } else {
    removeClass([label], LABELTOP);
    addClass([label], LABELBOTTOM);
  }
}
function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
  var placeholderElement = componentWrapper.querySelector("." + FLOATTEXT);
  var floatLine = componentWrapper.querySelector("." + FLOATLINE);
  var placeholderText;
  if (!isNullOrUndefined(placeholderElement)) {
    placeholderText = placeholderElement.innerText;
    detach(searchWrapper.querySelector("." + FLOATTEXT));
    setPlaceHolder(value, inputElement, placeholderText);
    if (!isNullOrUndefined(floatLine)) {
      detach(searchWrapper.querySelector("." + FLOATLINE));
    }
  } else {
    placeholderText = placeholder !== null ? placeholder : "";
    setPlaceHolder(value, inputElement, placeholderText);
  }
  overAllWrapper.classList.remove("e-float-input");
}
function setPlaceHolder(value, inputElement, placeholder) {
  if (value && value.length) {
    inputElement.placeholder = "";
  } else {
    inputElement.placeholder = placeholder;
  }
}
function floatLabelFocus(overAllWrapper, componentWrapper) {
  overAllWrapper.classList.add("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (!isNullOrUndefined(label)) {
    addClass([label], LABELTOP);
    if (label.classList.contains(LABELBOTTOM)) {
      removeClass([label], LABELBOTTOM);
    }
  }
}
function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
  overAllWrapper.classList.remove("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (value && value.length <= 0 && floatLabelType === "Auto" && !isNullOrUndefined(label)) {
    if (label.classList.contains(LABELTOP)) {
      removeClass([label], LABELTOP);
    }
    addClass([label], LABELBOTTOM);
  }
}
function encodePlaceholder(placeholder) {
  var result = "";
  if (!isNullOrUndefined(placeholder) && placeholder !== "") {
    var spanElement = document.createElement("span");
    spanElement.innerHTML = '<input  placeholder="' + placeholder + '"/>';
    var hiddenInput = spanElement.children[0];
    result = hiddenInput.placeholder;
  }
  return result;
}

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/multi-select.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate32 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FOCUS4 = "e-input-focus";
var DISABLED10 = "e-disabled";
var OVER_ALL_WRAPPER = "e-multiselect e-input-group e-control-wrapper";
var ELEMENT_WRAPPER = "e-multi-select-wrapper";
var ELEMENT_MOBILE_WRAPPER = "e-mob-wrapper";
var HIDE_LIST = "e-hide-listitem";
var DELIMITER_VIEW = "e-delim-view";
var CHIP_WRAPPER2 = "e-chips-collection";
var CHIP2 = "e-chips";
var CHIP_CONTENT2 = "e-chipcontent";
var CHIP_CLOSE2 = "e-chips-close";
var CHIP_SELECTED = "e-chip-selected";
var SEARCHBOX_WRAPPER = "e-searcher";
var DELIMITER_VIEW_WRAPPER = "e-delimiter";
var ZERO_SIZE = "e-zero-size";
var REMAIN_WRAPPER2 = "e-remain";
var CLOSEICON_CLASS2 = "e-chips-close e-close-hooker";
var DELIMITER_WRAPPER = "e-delim-values";
var POPUP_WRAPPER = "e-ddl e-popup e-multi-select-list-wrapper";
var INPUT_ELEMENT = "e-dropdownbase";
var RTL_CLASS = "e-rtl";
var CLOSE_ICON_HIDE = "e-close-icon-hide";
var MOBILE_CHIP = "e-mob-chip";
var FOOTER4 = "e-ddl-footer";
var HEADER5 = "e-ddl-header";
var DISABLE_ICON = "e-ddl-disable-icon";
var SPINNER_CLASS2 = "e-ms-spinner-icon";
var HIDDEN_ELEMENT = "e-multi-hidden";
var destroy = "destroy";
var dropdownIcon = "e-input-group-icon e-ddl-icon";
var iconAnimation = "e-icon-anim";
var TOTAL_COUNT_WRAPPER2 = "e-delim-total";
var BOX_ELEMENT = "e-multiselect-box";
var FILTERPARENT = "e-filter-parent";
var CUSTOM_WIDTH = "e-search-custom-width";
var FILTERINPUT = "e-input-filter";
var MultiSelect = (
  /** @class */
  function(_super) {
    __extends35(MultiSelect2, _super);
    function MultiSelect2(option, element) {
      var _this = _super.call(this, option, element) || this;
      _this.clearIconWidth = 0;
      _this.previousFilterText = "";
      _this.isValidKey = false;
      _this.selectAllEventData = [];
      _this.selectAllEventEle = [];
      _this.resetMainList = null;
      _this.resetFilteredData = false;
      _this.preventSetCurrentData = false;
      _this.isSelectAllLoop = false;
      _this.scrollFocusStatus = false;
      _this.keyDownStatus = false;
      _this.IsScrollerAtEnd = function() {
        return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
      };
      return _this;
    }
    MultiSelect2.prototype.enableRTL = function(state) {
      if (state) {
        this.overAllWrapper.classList.add(RTL_CLASS);
      } else {
        this.overAllWrapper.classList.remove(RTL_CLASS);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
    };
    MultiSelect2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({ args: [this], member: "VirtualScroll" });
      }
      if (this.mode === "CheckBox") {
        this.isGroupChecking = this.enableGroupCheckBox;
        if (this.enableGroupCheckBox) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.enableSelectionOrder = false;
          this.isProtectedOnChange = prevOnChange;
        }
        this.allowCustomValue = false;
        this.hideSelectedItem = false;
        this.closePopupOnSelect = false;
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    MultiSelect2.prototype.updateHTMLAttribute = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          switch (htmlAttr) {
            case "class": {
              var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.overAllWrapper], updatedClassValue.split(" "));
                addClass([this.popupWrapper], updatedClassValue.split(" "));
              }
              break;
            }
            case "disabled":
              this.enable(false);
              break;
            case "placeholder":
              if (!this.placeholder) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
                this.setProperties({ placeholder: this.inputElement.placeholder }, true);
                this.refreshPlaceHolder();
              }
              break;
            default: {
              var defaultAttr = ["id"];
              var validateAttr = ["name", "required", "aria-required", "form"];
              var containerAttr2 = ["title", "role", "style", "class"];
              if (defaultAttr.indexOf(htmlAttr) > -1) {
                this.element.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (containerAttr2.indexOf(htmlAttr) > -1) {
                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr !== "size" && !isNullOrUndefined(this.inputElement)) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
              break;
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateReadonly = function(state) {
      if (!isNullOrUndefined(this.inputElement)) {
        if (state || this.mode === "CheckBox") {
          this.inputElement.setAttribute("readonly", "true");
        } else {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    MultiSelect2.prototype.updateClearButton = function(state) {
      if (state) {
        if (this.overAllClear.parentNode) {
          this.overAllClear.style.display = "";
        } else {
          this.componentWrapper.appendChild(this.overAllClear);
        }
        this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
      } else {
        this.overAllClear.style.display = "none";
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
    };
    MultiSelect2.prototype.updateCssClass = function() {
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        var updatedCssClassValues = this.cssClass;
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
        if (updatedCssClassValues !== "") {
          addClass([this.overAllWrapper], updatedCssClassValues.split(" "));
          addClass([this.popupWrapper], updatedCssClassValues.split(" "));
        }
      }
    };
    MultiSelect2.prototype.updateOldPropCssClass = function(oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
        if (oldClass !== "") {
          removeClass([this.overAllWrapper], oldClass.split(" "));
          removeClass([this.popupWrapper], oldClass.split(" "));
        }
      }
    };
    MultiSelect2.prototype.onPopupShown = function(e) {
      var _this = this;
      if (Browser.isDevice && (this.mode === "CheckBox" && this.allowFiltering)) {
        var proxy_1 = this;
        window.onpopstate = function() {
          proxy_1.hidePopup();
          proxy_1.inputElement.focus();
        };
        history.pushState({}, "");
      }
      var animModel = { name: "FadeIn", duration: 100 };
      var eventArgs = { popup: this.popupObj, event: e, cancel: false, animation: animModel };
      this.trigger("open", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.focusAtFirstListItem();
          if (_this.popupObj) {
            document.body.appendChild(_this.popupObj.element);
          }
          if (_this.mode === "CheckBox" && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {
            _this.updateListItems(_this.list.querySelectorAll("li.e-list-item"), _this.mainList.querySelectorAll("li.e-list-item"));
          }
          if (_this.mode === "CheckBox" || _this.showDropDownIcon) {
            addClass([_this.overAllWrapper], [iconAnimation]);
          }
          _this.refreshPopup();
          _this.renderReactTemplates();
          if (_this.popupObj) {
            _this.popupObj.show(eventArgs2.animation, _this.zIndex === 1e3 ? _this.element : null);
          }
          attributes(_this.inputElement, { "aria-expanded": "true", "aria-owns": _this.element.id + "_popup", "aria-controls": _this.element.id });
          _this.updateAriaActiveDescendant();
          if (_this.isFirstClick) {
            if (!_this.enableVirtualization) {
              _this.loadTemplate();
            }
          }
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            EventHandler.add(_this.popupObj.element, "click", _this.clickHandler, _this);
          }
        }
      });
    };
    MultiSelect2.prototype.updateVirtualReOrderList = function(isCheckBoxUpdate) {
      var query = this.getForQuery(this.value, true).clone();
      if (this.enableVirtualization && this.dataSource instanceof DataManager) {
        this.resetList(this.selectedListData, this.fields, query);
      } else {
        this.resetList(this.dataSource, this.fields, query);
      }
      this.UpdateSkeleton();
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.virtualItemCount = this.itemCount;
      if (this.mode !== "CheckBox") {
        this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
      }
      if (!this.list.querySelector(".e-virtual-ddl")) {
        var virualElement = this.createElement("div", {
          id: this.element.id + "_popup",
          className: "e-virtual-ddl",
          styles: this.GetVirtualTrackHeight()
        });
        this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      } else {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      }
      if (this.list.querySelector(".e-virtual-ddl-content")) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
      if (isCheckBoxUpdate) {
        this.loadTemplate();
      }
    };
    MultiSelect2.prototype.updateListItems = function(listItems, mainListItems) {
      for (var i = 0; i < listItems.length; i++) {
        this.findGroupStart(listItems[i]);
        this.findGroupStart(mainListItems[i]);
      }
      this.deselectHeader();
    };
    MultiSelect2.prototype.loadTemplate = function() {
      this.refreshListItems(null);
      if (this.enableVirtualization && this.list && this.mode === "CheckBox") {
        var reOrderList = this.list.querySelectorAll(".e-reorder")[0];
        if (this.list.querySelector(".e-virtual-ddl-content") && reOrderList) {
          this.list.querySelector(".e-virtual-ddl-content").removeChild(reOrderList);
        }
      }
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
      this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
      this.isPreventScrollAction = true;
    };
    MultiSelect2.prototype.setScrollPosition = function() {
      if ((!this.hideSelectedItem && this.mode !== "CheckBox" || this.mode === "CheckBox" && !this.enableSelectionOrder) && (!isNullOrUndefined(this.value) && this.value.length > 0)) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
        var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
        if (!isNullOrUndefined(valueEle)) {
          this.scrollBottom(valueEle);
        }
      }
      if (this.enableVirtualization) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        this.isKeyBoardAction = false;
        this.scrollBottom(focusedItem);
      }
    };
    MultiSelect2.prototype.focusAtFirstListItem = function() {
      if (this.ulElement && this.ulElement.querySelector("li." + dropDownBaseClasses.li)) {
        var element = void 0;
        if (this.mode === "CheckBox") {
          this.removeFocus();
          return;
        } else {
          if (this.enableVirtualization) {
            if (this.fields.disabled) {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem):not(." + DISABLED10 + ")");
            } else {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(.e-virtual-list):not(.e-hide-listitem)");
            }
          } else {
            if (this.fields.disabled) {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(." + DISABLED10 + ")");
            } else {
              element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
            }
          }
        }
        if (element !== null) {
          this.removeFocus();
          this.addListFocus(element);
        }
      }
    };
    MultiSelect2.prototype.focusAtLastListItem = function(data) {
      var activeElement;
      if (data) {
        activeElement = Search(data, this.liCollections, "StartsWith", this.ignoreCase);
      } else {
        if (this.value && this.value.length) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          Search(value, this.liCollections, "StartsWith", this.ignoreCase);
        } else {
          activeElement = null;
        }
      }
      if (activeElement && activeElement.item !== null) {
        this.addListFocus(activeElement.item);
        if ((this.allowCustomValue || this.allowFiltering) && this.isPopupOpen() && this.closePopupOnSelect && !this.enableVirtualization || this.closePopupOnSelect && !this.enableVirtualization) {
          this.scrollBottom(activeElement.item, activeElement.index);
        }
      }
    };
    MultiSelect2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false"
      };
      return ariaAttributes;
    };
    MultiSelect2.prototype.updateListARIA = function() {
      if (!isNullOrUndefined(this.ulElement)) {
        attributes(this.ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false", "aria-label": "list" });
      }
      var disableStatus = !isNullOrUndefined(this.inputElement) && this.inputElement.disabled ? true : false;
      if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, this.getAriaAttributes());
      }
      if (disableStatus) {
        attributes(this.inputElement, { "aria-disabled": "true" });
      }
      this.ensureAriaDisabled(disableStatus ? "true" : "false");
    };
    MultiSelect2.prototype.ensureAriaDisabled = function(status) {
      if (this.htmlAttributes && this.htmlAttributes["aria-disabled"]) {
        var attr = this.htmlAttributes;
        extend(attr, { "aria-disabled": status }, attr);
        this.setProperties({ htmlAttributes: attr }, true);
      }
    };
    MultiSelect2.prototype.removelastSelection = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem !== null) {
        this.removeSelectedChip(e);
        return;
      }
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var value = elements[elements.length - 1].getAttribute("data-value");
      if (!isNullOrUndefined(this.value)) {
        this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
      }
      var customValue = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(value)) : this.getFormattedValue(value);
      if (this.allowCustomValue && (value !== "false" && customValue === false || !isNullOrUndefined(customValue) && customValue.toString() === "NaN")) {
        customValue = value;
      }
      this.removeValue(customValue, e);
      this.removeChipSelection();
      this.updateDelimeter(this.delimiterChar, e);
      this.makeTextBoxEmpty();
      if (this.mainList && this.listData) {
        this.refreshSelection();
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      this.renderPopup();
      this.onPopupShown();
    };
    MultiSelect2.prototype.targetElement = function() {
      this.targetInputElement = this.inputElement;
      if (this.mode === "CheckBox" && this.allowFiltering) {
        this.notify("targetElement", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      return this.targetInputElement.value;
    };
    MultiSelect2.prototype.getForQuery = function(valuecheck, isCheckbox) {
      var predicate;
      var field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
      if (this.enableVirtualization && valuecheck) {
        if (isCheckbox) {
          for (var i = 0; i < valuecheck.length; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", valuecheck[i]) : valuecheck[i];
            if (i === 0) {
              predicate = new Predicate(field, "equal", value);
            } else {
              predicate = predicate.or(field, "equal", value);
            }
          }
          return new Query().where(predicate);
        } else {
          for (var i = 0; i < valuecheck.length; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", valuecheck[i]) : valuecheck[i];
            if (i === 0) {
              predicate = new Predicate(field, "notequal", value);
            } else {
              predicate = predicate.and(field, "notequal", value);
            }
          }
          return new Query().where(predicate);
        }
      } else {
        for (var i = 0; i < valuecheck.length; i++) {
          if (i === 0) {
            predicate = new Predicate(field, "equal", valuecheck[i]);
          } else {
            predicate = predicate.or(field, "equal", valuecheck[i]);
          }
        }
      }
      if (this.dataSource instanceof DataManager && this.dataSource.adaptor instanceof JsonAdaptor) {
        return new Query().where(predicate);
      } else {
        return this.getQuery(this.query).clone().where(predicate);
      }
    };
    MultiSelect2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      if (this.dataSource instanceof DataManager && !isNullOrUndefined(e) && !this.virtualGroupDataSource) {
        this.totalItemCount = e.count;
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      this.skeletonCount = this.totalItemCount != 0 && this.totalItemCount < this.itemCount * 2 ? 0 : this.skeletonCount;
      this.updateSelectElementData(this.allowFiltering);
      var proxy = this;
      if (!isNullOrUndefined(this.value) && !this.allowCustomValue && !this.enableVirtualization && this.listData && this.listData.length > 0) {
        for (var i = 0; i < this.value.length; i++) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", proxy.value[i]) : proxy.value[i];
          var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", value);
          if (!checkEle && !(this.dataSource instanceof DataManager)) {
            this.value.splice(i, 1);
            i -= 1;
          }
        }
      }
      var valuecheck = [];
      if (!isNullOrUndefined(this.value)) {
        valuecheck = this.presentItemValue(this.ulElement);
      }
      if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null && !this.enableVirtualization) {
        this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
      } else {
        this.updateActionList(ulElement, list, e);
      }
      if (this.dataSource instanceof DataManager && this.allowCustomValue && !this.isCustomRendered && this.inputElement.value && this.inputElement.value !== "") {
        var query = new Query();
        query = this.allowFiltering ? query.where(this.fields.text, "startswith", this.inputElement.value, this.ignoreCase, this.ignoreAccent) : query;
        this.checkForCustomValue(query, this.fields);
        this.isCustomRendered = true;
        this.remoteCustomValue = this.enableVirtualization ? false : this.remoteCustomValue;
      }
      if (this.dataSource instanceof DataManager && this.mode === "CheckBox" && this.allowFiltering) {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.updateActionList = function(ulElement, list, e, isUpdated) {
      if (this.mode === "CheckBox" && this.showSelectAll) {
        this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      if (!this.mainList && !this.mainData) {
        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
        this.mainData = list;
        this.mainListCollection = this.liCollections;
      } else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {
        this.mainData = list;
      }
      if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== "") {
        this.checkForCustomValue(this.tempQuery, this.fields);
        if (this.isCustomRendered) {
          return;
        }
      }
      if (this.value && this.value.length && (this.mode !== "CheckBox" && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== "" || this.mode === "CheckBox" || (this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering && this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === "")) {
        this.refreshSelection();
      }
      this.updateListARIA();
      this.unwireListEvents();
      this.wireListEvents();
      if (!isNullOrUndefined(this.setInitialValue)) {
        this.setInitialValue();
      }
      if (!isNullOrUndefined(this.selectAllAction)) {
        this.selectAllAction();
      }
      if (this.setDynValue) {
        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.initialTextUpdate();
        }
        if (!this.enableVirtualization || this.enableVirtualization && !(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate();
        }
        this.initialUpdate();
        this.refreshPlaceHolder();
        if (this.mode !== "CheckBox" && this.changeOnBlur) {
          this.updateValueState(null, this.value, null);
        }
      }
      this.renderPopup();
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.onPopupShown(e);
      }
    };
    MultiSelect2.prototype.refreshSelection = function() {
      var value;
      var element;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (!isNullOrUndefined(this.value)) {
        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
          value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
          element = this.findListElement(this.list, "li", "data-value", value);
          if (element) {
            addClass([element], className);
            if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {
              addClass([element.previousElementSibling], className);
            }
            if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
              this.hideGroupItem(value);
            }
            if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {
              removeClass([element], dropDownBaseClasses.focus);
              var listEle = element.parentElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
              if (listEle.length > 0) {
                addClass([listEle[0]], dropDownBaseClasses.focus);
                this.updateAriaActiveDescendant();
              } else {
                if (!(this.list && this.list.querySelectorAll("." + dropDownBaseClasses.li).length > 0)) {
                  this.l10nUpdate();
                  addClass([this.list], dropDownBaseClasses.noData);
                }
              }
            }
            element.setAttribute("aria-selected", "true");
            if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
              var ariaValue = element.getElementsByClassName("e-check").length;
              if (ariaValue === 0) {
                var args = {
                  module: "CheckBoxSelection",
                  enable: this.mode === "CheckBox",
                  li: element,
                  e: null
                };
                this.notify("updatelist", args);
              }
            }
          }
        }
      }
      this.checkSelectAll();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.hideGroupItem = function(value) {
      var element;
      var element1;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      element1 = element = this.findListElement(this.ulElement, "li", "data-value", value);
      var i = 0;
      var j = 0;
      var temp = true;
      var temp1 = true;
      do {
        if (element && element.previousElementSibling && (!element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp = false;
        }
        if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {
          i = 10;
        } else {
          element = element.previousElementSibling;
        }
        if (element1 && element1.nextElementSibling && (!element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp1 = false;
        }
        if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {
          j = 10;
        } else {
          element1 = element1.nextElementSibling;
        }
      } while (i < 10 || j < 10);
      if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
        addClass([element.previousElementSibling], className);
      } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {
        removeClass([element.previousElementSibling], className);
      }
    };
    MultiSelect2.prototype.getValidLi = function() {
      var liElement = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
      return !isNullOrUndefined(liElement) ? liElement : this.liCollections[0];
    };
    MultiSelect2.prototype.checkSelectAll = function() {
      var groupItemLength = this.list.querySelectorAll("li.e-list-group-item.e-active").length;
      var listItem = this.list.querySelectorAll("li.e-list-item");
      var searchCount = this.enableVirtualization ? this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-virtual-list)").length : this.list.querySelectorAll("li." + dropDownBaseClasses.li).length;
      var searchActiveCount = this.list.querySelectorAll("li." + dropDownBaseClasses.selected).length;
      if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        searchActiveCount = searchActiveCount - groupItemLength;
      }
      if (!this.enableVirtualization && ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && (this.mode === "CheckBox" && this.showSelectAll)) || this.enableVirtualization && this.mode === "CheckBox" && this.showSelectAll && this.virtualSelectAll && this.value && this.value.length === this.totalItemCount) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "check" });
      } else if (searchCount !== searchActiveCount && (this.mode === "CheckBox" && this.showSelectAll) && (!this.enableVirtualization || this.enableVirtualization && !this.virtualSelectAll)) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
      }
      if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
        for (var i = 0; i < listItem.length; i++) {
          this.findGroupStart(listItem[i]);
        }
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.openClick = function(e) {
      if (!this.openOnClick && this.mode !== "CheckBox" && !this.isPopupOpen()) {
        if (this.targetElement() !== "") {
          this.showPopup();
        } else {
          this.hidePopup(e);
        }
      } else if (!this.openOnClick && this.mode === "CheckBox" && !this.isPopupOpen()) {
        this.showPopup();
      }
    };
    MultiSelect2.prototype.keyUp = function(e) {
      if (this.mode === "CheckBox" && !this.openOnClick) {
        var char = String.fromCharCode(e.keyCode);
        var isWordCharacter = char.match(/\w/);
        if (!isNullOrUndefined(isWordCharacter)) {
          this.isValidKey = true;
        }
      }
      this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;
      this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;
      if (this.isValidKey && this.inputElement) {
        this.isValidKey = false;
        this.expandTextbox();
        this.showOverAllClear();
        switch (e.keyCode) {
          default:
            this.search(e);
        }
      }
    };
    MultiSelect2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.remoteFilterAction = true;
      this.dataUpdater(dataSource, query, fields);
    };
    MultiSelect2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.isFiltered) {
        if (this.enableVirtualization && !isNullOrUndefined(this.customFilterQuery)) {
          filterQuery = this.customFilterQuery.clone();
        } else if (!this.enableVirtualization) {
          return filterQuery;
        }
      }
      if (this.filterAction) {
        if (this.targetElement() !== null && !this.enableVirtualization || this.enableVirtualization && this.targetElement() !== null && this.targetElement().trim() !== "") {
          var dataType = this.typeOfData(this.dataSource).typeof;
          if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
            filterQuery.where("", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          } else if (this.enableVirtualization && this.targetElement() !== "" || !this.enableVirtualization) {
            var fields = this.fields;
            filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : "", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          }
        }
        if (this.enableVirtualization && this.viewPortInfo.endIndex != 0 && !this.virtualSelectAll) {
          return this.virtualFilterQuery(filterQuery);
        }
        return filterQuery;
      } else {
        if (this.enableVirtualization && this.viewPortInfo.endIndex != 0 && !this.virtualSelectAll) {
          return this.virtualFilterQuery(filterQuery);
        }
        if (this.virtualSelectAll) {
          return query ? query.take(this.maximumSelectionLength).requiresCount() : this.query ? this.query.take(this.maximumSelectionLength).requiresCount() : new Query().take(this.maximumSelectionLength).requiresCount();
        }
        return query ? query : this.query ? this.query : new Query();
      }
    };
    MultiSelect2.prototype.virtualFilterQuery = function(filterQuery) {
      var takeValue = this.getTakeValue();
      var isReOrder = true;
      var isSkip = true;
      var isTake = true;
      for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
        if (this.getModuleName() === "multiselect" && (filterQuery.queries[queryElements].e && filterQuery.queries[queryElements].e.condition == "or" || filterQuery.queries[queryElements].e && filterQuery.queries[queryElements].e.operator == "equal")) {
          isReOrder = false;
        }
        if (filterQuery.queries[queryElements].fn === "onSkip") {
          isSkip = false;
        }
        if (filterQuery.queries[queryElements].fn === "onTake") {
          isTake = false;
        }
      }
      var queryTakeValue = 0;
      if (filterQuery && filterQuery.queries.length > 0) {
        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
          if (filterQuery.queries[queryElements].fn === "onTake") {
            queryTakeValue = takeValue <= filterQuery.queries[queryElements].e.nos ? filterQuery.queries[queryElements].e.nos : takeValue;
          }
        }
      }
      if (queryTakeValue <= 0 && this.query && this.query.queries.length > 0) {
        for (var queryElements = 0; queryElements < this.query.queries.length; queryElements++) {
          if (this.query.queries[queryElements].fn === "onTake") {
            queryTakeValue = takeValue <= this.query.queries[queryElements].e.nos ? this.query.queries[queryElements].e.nos : takeValue;
          }
        }
      }
      if (filterQuery && filterQuery.queries.length > 0) {
        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
          if (filterQuery.queries[queryElements].fn === "onTake") {
            queryTakeValue = filterQuery.queries[queryElements].e.nos <= queryTakeValue ? queryTakeValue : filterQuery.queries[queryElements].e.nos;
            filterQuery.queries.splice(queryElements, 1);
            --queryElements;
          }
        }
      }
      if (this.allowFiltering && isSkip || !isReOrder || !this.allowFiltering && isSkip) {
        if (!isReOrder) {
          filterQuery.skip(this.viewPortInfo.startIndex);
        } else {
          filterQuery.skip(this.virtualItemStartIndex);
        }
      }
      if (this.isIncrementalRequest) {
        filterQuery.take(this.incrementalEndIndex);
      } else if (queryTakeValue > 0) {
        filterQuery.take(queryTakeValue);
      } else {
        filterQuery.take(takeValue);
      }
      filterQuery.requiresCount();
      return filterQuery;
    };
    MultiSelect2.prototype.getTakeValue = function() {
      return this.allowFiltering && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;
    };
    MultiSelect2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var isNoData = this.list.classList.contains(dropDownBaseClasses.noData);
      if (this.targetElement().trim() === "") {
        var list = this.enableVirtualization ? this.list.cloneNode(true) : this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.backCommand) {
          this.remoteCustomValue = false;
          if (this.allowCustomValue && list.querySelectorAll("li").length == 0 && this.mainData.length > 0) {
            this.mainData = [];
          }
          if (this.enableVirtualization) {
            this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
            this.resetList(dataSource, fields, query);
            if (this.mode !== "CheckBox") {
              this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
            }
            this.UpdateSkeleton();
            if ((isNoData || this.allowCustomValue) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
              if (!this.list.querySelector(".e-virtual-ddl-content")) {
                this.list.appendChild(this.createElement("div", {
                  className: "e-virtual-ddl-content",
                  styles: this.getTransformValues()
                })).appendChild(this.list.querySelector(".e-list-parent"));
              }
              if (!this.list.querySelector(".e-virtual-ddl")) {
                var virualElement = this.createElement("div", {
                  id: this.element.id + "_popup",
                  className: "e-virtual-ddl",
                  styles: this.GetVirtualTrackHeight()
                });
                document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
              }
            }
          }
          this.onActionComplete(list, this.mainData);
          if (this.value && this.value.length) {
            this.refreshSelection();
          }
          if (this.keyCode !== 8) {
            this.focusAtFirstListItem();
          }
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
        }
      } else {
        if (this.enableVirtualization && this.allowFiltering) {
          this.isPreventScrollAction = true;
          this.list.scrollTop = 0;
          this.previousStartIndex = 0;
          this.virtualListInfo = null;
        }
        this.resetList(dataSource, fields, query);
        if (this.enableVirtualization && (isNoData || this.allowCustomValue) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
          if (!this.list.querySelector(".e-virtual-ddl-content")) {
            this.list.appendChild(this.createElement("div", {
              className: "e-virtual-ddl-content",
              styles: this.getTransformValues()
            })).appendChild(this.list.querySelector(".e-list-parent"));
          }
          if (this.mode !== "CheckBox") {
            this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
          }
          if (!this.list.querySelector(".e-virtual-ddl")) {
            var virualElement = this.createElement("div", {
              id: this.element.id + "_popup",
              className: "e-virtual-ddl",
              styles: this.GetVirtualTrackHeight()
            });
            document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
          }
        }
        if (this.allowCustomValue) {
          if (!(dataSource instanceof DataManager)) {
            this.checkForCustomValue(query, fields);
          } else {
            this.remoteCustomValue = true;
            this.tempQuery = query;
          }
        }
      }
      if (this.enableVirtualization && this.allowFiltering) {
        this.getFilteringSkeletonCount();
      }
      this.refreshPopup();
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.checkForCustomValue = function(query, fields) {
      var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);
      var field = fields ? fields : this.fields;
      if (this.allowCustomValue && dataChecks) {
        var value = this.inputElement.value;
        var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;
        if (customData && typeof customData !== "string" && typeof customData !== "number" && typeof customData !== "boolean") {
          var dataItem_1 = {};
          setValue(field.text, value, dataItem_1);
          if (typeof getValue(this.fields.value ? this.fields.value : "value", customData) === "number" && this.fields.value !== this.fields.text) {
            setValue(field.value, Math.random(), dataItem_1);
          } else {
            setValue(field.value, value, dataItem_1);
          }
          var emptyObject_1 = {};
          if (this.allowObjectBinding) {
            var keys = this.listData && this.listData.length > 0 ? Object.keys(this.listData[0]) : this.firstItem ? Object.keys(this.firstItem) : Object.keys(dataItem_1);
            keys.forEach(function(key) {
              emptyObject_1[key] = key === fields.value || key === fields.text ? getValue(fields.value, dataItem_1) : null;
            });
          }
          dataItem_1 = this.allowObjectBinding ? emptyObject_1 : dataItem_1;
          if (this.enableVirtualization) {
            this.virtualCustomData = dataItem_1;
            var tempData = this.dataSource instanceof DataManager ? JSON.parse(JSON.stringify(this.listData)) : JSON.parse(JSON.stringify(this.dataSource));
            var totalData = [];
            if (this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
              totalData = tempData.concat(this.virtualCustomSelectData);
            }
            tempData.splice(0, 0, dataItem_1);
            this.isCustomDataUpdated = true;
            var tempCount = this.totalItemCount;
            this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
            this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
            this.resetList(tempData, field, query);
            this.isCustomDataUpdated = false;
            this.totalItemCount = this.enableVirtualization && this.dataSource instanceof DataManager ? tempCount : this.totalItemCount;
          } else {
            if (this.dataSource instanceof DataManager && this.allowCustomValue && this.allowFiltering) {
              this.remoteCustomValue = false;
            }
            var tempData = JSON.parse(JSON.stringify(this.listData));
            tempData.splice(0, 0, dataItem_1);
            this.resetList(tempData, field, query);
          }
        } else if (this.listData) {
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, this.inputElement.value);
          tempData[0] = typeof customData === "number" && !isNaN(parseFloat(tempData[0])) ? parseFloat(tempData[0]) : tempData[0];
          tempData[0] = typeof customData === "boolean" ? tempData[0] === "true" ? true : tempData[0] === "false" ? false : tempData[0] : tempData[0];
          this.resetList(tempData, field);
        }
      } else if (this.listData && this.mainData && !dataChecks && this.allowCustomValue) {
        if (this.allowFiltering && this.isRemoteSelection && this.remoteCustomValue) {
          this.isRemoteSelection = false;
          if (!this.enableVirtualization) {
            this.resetList(this.listData, field, query);
          }
        } else if (!this.allowFiltering && this.list) {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var activeElement = Search(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
          }
        }
      }
      if (this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.getNgDirective = function() {
      return "EJS-MULTISELECT";
    };
    MultiSelect2.prototype.wrapperClick = function(e) {
      this.setDynValue = false;
      this.keyboardEvent = null;
      this.isKeyBoardAction = false;
      if (!this.enabled) {
        return;
      }
      if (e.target === this.overAllClear) {
        e.preventDefault();
        return;
      }
      if (!this.inputFocus) {
        this.inputElement.focus();
      }
      if (!this.readonly) {
        if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE2) !== -1) {
          if (this.isPopupOpen()) {
            this.refreshPopup();
          }
          return;
        }
        if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
          this.showPopup(e);
        } else {
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.showOverAllClear();
            this.inputFocus = true;
            if (!this.overAllWrapper.classList.contains(FOCUS4)) {
              this.overAllWrapper.classList.add(FOCUS4);
            }
          }
        }
      }
      if (!(this.targetElement() && this.targetElement() !== "")) {
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.enable = function(state) {
      if (state) {
        this.overAllWrapper.classList.remove(DISABLED10);
        this.inputElement.removeAttribute("disabled");
        attributes(this.inputElement, { "aria-disabled": "false" });
        this.ensureAriaDisabled("false");
      } else {
        this.overAllWrapper.classList.add(DISABLED10);
        this.inputElement.setAttribute("disabled", "true");
        attributes(this.inputElement, { "aria-disabled": "true" });
        this.ensureAriaDisabled("true");
      }
      if (this.enabled !== state) {
        this.enabled = state;
      }
      this.hidePopup();
    };
    MultiSelect2.prototype.onBlurHandler = function(eve, isDocClickFromCheck) {
      var target;
      if (!isNullOrUndefined(eve)) {
        target = eve.relatedTarget;
      }
      if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        } else if (this.floatLabelType === "Auto" && (this.overAllWrapper.classList.contains("e-outline") || this.overAllWrapper.classList.contains("e-filled"))) {
          addClass([this.overAllWrapper], "e-valid-input");
        }
        return;
      }
      if (this.floatLabelType === "Auto" && this.overAllWrapper.classList.contains("e-outline") && this.mode === "CheckBox" && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        removeClass([this.overAllWrapper], "e-valid-input");
      }
      if (this.mode === "CheckBox" && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {
        this.inputFocus = false;
        this.overAllWrapper.classList.remove(FOCUS4);
        return;
      }
      if (this.scrollFocusStatus) {
        if (!isNullOrUndefined(eve)) {
          eve.preventDefault();
        }
        this.inputElement.focus();
        this.scrollFocusStatus = false;
        return;
      }
      this.inputFocus = false;
      this.overAllWrapper.classList.remove(FOCUS4);
      if (this.addTagOnBlur) {
        var dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);
        var listLiElement = this.findListElement(this.list, "li", "data-value", dataChecks);
        var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
        var allowChipAddition = listLiElement && !listLiElement.classList.contains(className) ? true : false;
        if (allowChipAddition) {
          this.updateListSelection(listLiElement, eve);
          if (this.mode === "Delimiter") {
            this.updateDelimeter(this.delimiterChar);
          }
        }
      }
      this.updateDataList();
      if (this.resetMainList) {
        this.mainList = this.resetMainList;
        this.resetMainList = null;
      }
      this.refreshListItems(null);
      if (this.mode !== "Box" && this.mode !== "CheckBox") {
        this.updateDelimView();
      }
      if (this.changeOnBlur) {
        this.updateValueState(eve, this.value, this.tempValues);
        this.dispatchEvent(this.hiddenElement, "change");
      }
      this.overAllClear.style.display = "none";
      if (this.isPopupOpen()) {
        this.hidePopup(eve);
      }
      this.makeTextBoxEmpty();
      this.trigger("blur");
      this.focused = true;
      if (Browser.isDevice && this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.removeChipFocus();
      }
      this.removeChipSelection();
      this.refreshInputHight();
      floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
      this.refreshPlaceHolder();
      if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === "CheckBox") && !isNullOrUndefined(this.mainList)) {
        this.ulElement = this.mainList;
      }
      this.checkPlaceholderSize();
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
    };
    MultiSelect2.prototype.calculateWidth = function() {
      var elementWidth;
      if (this.overAllWrapper) {
        if (!this.showDropDownIcon || this.overAllWrapper.querySelector(".e-label-top")) {
          elementWidth = this.overAllWrapper.clientWidth - 2 * parseInt(getComputedStyle(this.inputElement).paddingRight);
        } else {
          var downIconWidth = this.dropIcon.offsetWidth + parseInt(getComputedStyle(this.dropIcon).marginRight);
          elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * parseInt(getComputedStyle(this.inputElement).paddingRight));
        }
        if (this.floatLabelType !== "Never") {
          Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());
        }
      }
    };
    MultiSelect2.prototype.checkPlaceholderSize = function() {
      if (this.showDropDownIcon) {
        var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        this.setPlaceholderSize(downIconWidth);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);
        }
      }
    };
    MultiSelect2.prototype.setPlaceholderSize = function(downIconWidth) {
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        if (this.dropIcon.offsetWidth !== 0) {
          this.searchWrapper.style.width = "calc(100% - " + (downIconWidth + 10) + "px";
        } else {
          addClass([this.searchWrapper], CUSTOM_WIDTH);
        }
      } else if (!isNullOrUndefined(this.value)) {
        this.searchWrapper.removeAttribute("style");
        removeClass([this.searchWrapper], CUSTOM_WIDTH);
      }
    };
    MultiSelect2.prototype.refreshInputHight = function() {
      if (!isNullOrUndefined(this.searchWrapper)) {
        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === "")) {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        } else {
          this.searchWrapper.classList.add(ZERO_SIZE);
        }
      }
    };
    MultiSelect2.prototype.validateValues = function(newValue, oldValue) {
      return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
    };
    MultiSelect2.prototype.updateValueState = function(event2, newVal, oldVal) {
      var newValue = newVal ? newVal : [];
      var oldValue = oldVal ? oldVal : [];
      if (this.initStatus && this.validateValues(newValue, oldValue)) {
        var eventArgs = {
          e: event2,
          oldValue: this.allowObjectBinding ? oldVal : oldVal,
          value: this.allowObjectBinding ? newVal : newVal,
          isInteracted: event2 ? true : false,
          element: this.element,
          event: event2
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
        this.updateTempValue();
        if (!this.changeOnBlur) {
          this.dispatchEvent(this.hiddenElement, "change");
        }
      }
      this.selectedValueInfo = this.viewPortInfo;
    };
    MultiSelect2.prototype.updateTempValue = function() {
      if (!this.value) {
        this.tempValues = this.value;
      } else {
        this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
      }
    };
    MultiSelect2.prototype.updateAriaActiveDescendant = function() {
      if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.inputElement, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      }
    };
    MultiSelect2.prototype.pageUpSelection = function(steps, isVirtualKeyAction) {
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
      if (this.enableVirtualization && isVirtualKeyAction) {
        previousItem = this.liCollections.length >= steps && steps >= 0 ? this.liCollections[steps] : this.liCollections[this.skeletonCount];
      }
      if (!isNullOrUndefined(previousItem) && previousItem.classList.contains("e-virtual-list")) {
        previousItem = this.liCollections[this.skeletonCount];
      }
      if (this.enableVirtualization) {
        if (!isNullOrUndefined(previousItem) && !previousItem.classList.contains("e-item-focus")) {
          this.isKeyBoardAction = true;
          this.addListFocus(previousItem);
          this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
        } else if (this.viewPortInfo.startIndex == 0) {
          this.isKeyBoardAction = true;
          this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
        }
        this.previousFocusItem = previousItem;
      } else {
        this.isKeyBoardAction = true;
        this.addListFocus(previousItem);
        this.scrollTop(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), this.keyboardEvent.keyCode);
      }
    };
    MultiSelect2.prototype.pageDownSelection = function(steps, isVirtualKeyAction) {
      var list = this.getItems();
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
      if (this.enableVirtualization && this.skeletonCount > 0) {
        previousItem = steps < list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      if (this.enableVirtualization && isVirtualKeyAction) {
        previousItem = steps <= list.length ? this.liCollections[steps] : this.liCollections[list.length - 1];
      }
      this.isKeyBoardAction = true;
      this.addListFocus(previousItem);
      this.previousFocusItem = previousItem;
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")), false, this.keyboardEvent.keyCode);
    };
    MultiSelect2.prototype.getItems = function() {
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      return this.ulElement && this.ulElement.querySelectorAll("." + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")") : [];
    };
    MultiSelect2.prototype.focusInHandler = function(e) {
      var _this = this;
      if (this.enabled) {
        this.showOverAllClear();
        this.inputFocus = true;
        if (this.value && this.value.length) {
          if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
            this.chipCollectionWrapper.style.display = "";
          } else {
            this.showDelimWrapper();
          }
          if (this.mode !== "CheckBox") {
            this.viewWrapper.style.display = "none";
          }
        }
        if (this.mode !== "CheckBox") {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        }
        this.checkPlaceholderSize();
        if (this.focused) {
          var args = { isInteracted: e ? true : false, event: e };
          this.trigger("focus", args);
          this.focused = false;
        }
        if (!this.overAllWrapper.classList.contains(FOCUS4)) {
          this.overAllWrapper.classList.add(FOCUS4);
        }
        floatLabelFocus(this.overAllWrapper, this.componentWrapper);
        if (this.isPopupOpen()) {
          this.refreshPopup();
        }
        setTimeout(function() {
          _this.calculateWidth();
        }, 150);
        return true;
      } else {
        return false;
      }
    };
    MultiSelect2.prototype.showDelimWrapper = function() {
      if (this.mode === "CheckBox") {
        this.viewWrapper.style.display = "";
      } else {
        this.delimiterWrapper.style.display = "";
      }
      this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.hideDelimWrapper = function() {
      this.delimiterWrapper.style.display = "none";
      this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.expandTextbox = function() {
      var size = 5;
      if (this.placeholder) {
        size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;
      }
      if (this.inputElement.value.length > size) {
        this.inputElement.size = this.inputElement.value.length;
      } else {
        this.inputElement.size = size;
      }
    };
    MultiSelect2.prototype.isPopupOpen = function() {
      return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
    };
    MultiSelect2.prototype.refreshPopup = function() {
      if (this.popupObj && this.mobFilter) {
        this.popupObj.setProperties({ width: this.calcPopupWidth() });
        this.popupObj.refreshPosition(this.overAllWrapper);
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.checkTextLength = function() {
      return this.targetElement().length < 1;
    };
    MultiSelect2.prototype.popupKeyActions = function(e) {
      switch (e.keyCode) {
        case 38:
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.inputElement.focus();
          }
          e.preventDefault();
          break;
        case 40:
          if (!this.isPopupOpen()) {
            this.showPopup(e);
            e.preventDefault();
          }
          break;
      }
    };
    MultiSelect2.prototype.updateAriaAttribute = function() {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(focusedItem)) {
        this.inputElement.setAttribute("aria-activedescendant", focusedItem.id);
        if (this.allowFiltering) {
          var filterInput2 = this.popupWrapper.querySelector("." + FILTERINPUT);
          filterInput2 && filterInput2.setAttribute("aria-activedescendant", focusedItem.id);
        } else if (this.mode == "CheckBox") {
          this.overAllWrapper.setAttribute("aria-activedescendant", focusedItem.id);
        }
      }
    };
    MultiSelect2.prototype.homeNavigation = function(isHome, isVirtualKeyAction) {
      this.removeFocus();
      if (this.enableVirtualization) {
        if (isHome) {
          if (this.enableVirtualization && this.viewPortInfo.startIndex !== 0) {
            this.viewPortInfo.startIndex = 0;
            this.viewPortInfo.endIndex = this.itemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
        } else {
          if (this.enableVirtualization && (!this.value && this.viewPortInfo.endIndex !== this.totalItemCount || this.value && this.value.length > 0 && this.viewPortInfo.endIndex !== this.totalItemCount + this.value.length)) {
            this.viewPortInfo.startIndex = this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.totalItemCount;
            this.updateVirtualItemIndex();
            var query = new Query().clone();
            if (this.value && this.value.length > 0) {
              query = this.getForQuery(this.value).clone();
              query = query.skip(this.totalItemCount - this.itemCount);
            }
            this.resetList(this.dataSource, this.fields, query);
          }
        }
      }
      this.UpdateSkeleton();
      var scrollEle = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (scrollEle.length > 0) {
        var element = scrollEle[isHome ? 0 : scrollEle.length - 1];
        if (this.enableVirtualization && isHome) {
          element = scrollEle[this.skeletonCount];
        }
        this.removeFocus();
        element.classList.add(dropDownBaseClasses.focus);
        if (this.enableVirtualization && isHome) {
          this.scrollTop(element, void 0, this.keyboardEvent.keyCode);
        } else if (!isVirtualKeyAction) {
          this.scrollBottom(element, void 0, false, this.keyboardEvent.keyCode);
        }
        this.updateAriaActiveDescendant();
      }
    };
    MultiSelect2.prototype.updateSelectionList = function() {
      if (!isNullOrUndefined(this.value) && this.value.length) {
        for (var index = 0; index < this.value.length; index++) {
          var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
          var selectedItem = this.getElementByValue(value);
          if (selectedItem && !selectedItem.classList.contains(dropDownBaseClasses.selected)) {
            selectedItem.classList.add("e-active");
          }
        }
      }
    };
    MultiSelect2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      var activeIndex;
      this.isKeyBoardAction = true;
      switch (e.keyCode) {
        case 40:
          this.arrowDown(e, true);
          break;
        case 38:
          this.arrowUp(e, true);
          break;
        case 33:
          e.preventDefault();
          if (focusedItem) {
            activeIndex = this.getIndexByValue(this.previousFocusItem.getAttribute("data-value")) - 1;
            this.pageUpSelection(activeIndex, true);
            this.updateAriaAttribute();
          }
          break;
        case 34:
          e.preventDefault();
          if (focusedItem) {
            activeIndex = this.getIndexByValue(this.previousFocusItem.getAttribute("data-value"));
            this.pageDownSelection(activeIndex, true);
            this.updateAriaAttribute();
          }
          break;
        case 35:
        case 36:
          this.isMouseScrollAction = true;
          this.homeNavigation(e.keyCode === 36 ? true : false, true);
          this.isPreventScrollAction = true;
          break;
      }
      this.keyboardEvent = null;
      this.isScrollChanged = true;
      this.isKeyBoardAction = false;
    };
    MultiSelect2.prototype.onKeyDown = function(e) {
      if (this.readonly || !this.enabled && this.mode !== "CheckBox") {
        return;
      }
      this.preventSetCurrentData = false;
      this.keyboardEvent = e;
      if (this.isPreventKeyAction && this.enableVirtualization) {
        e.preventDefault();
      }
      this.keyCode = e.keyCode;
      this.keyDownStatus = true;
      if (e.keyCode > 111 && e.keyCode < 124) {
        return;
      }
      if (e.altKey) {
        this.popupKeyActions(e);
        return;
      } else if (this.isPopupOpen()) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        var activeIndex = void 0;
        switch (e.keyCode) {
          case 36:
          case 35:
            this.isMouseScrollAction = true;
            this.isKeyBoardAction = true;
            this.homeNavigation(e.keyCode === 36 ? true : false);
            break;
          case 33:
            e.preventDefault();
            if (focusedItem) {
              activeIndex = this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageUpSelection(activeIndex - this.getPageCount() - 1);
              this.updateAriaAttribute();
            }
            return;
          case 34:
            e.preventDefault();
            if (focusedItem) {
              activeIndex = this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageDownSelection(activeIndex + this.getPageCount());
              this.updateAriaAttribute();
            }
            return;
          case 38:
            this.isKeyBoardAction = true;
            this.arrowUp(e);
            break;
          case 40:
            this.isKeyBoardAction = true;
            this.arrowDown(e);
            break;
          case 27:
            e.preventDefault();
            this.isKeyBoardAction = true;
            this.hidePopup(e);
            if (this.mode === "CheckBox") {
              this.inputElement.focus();
            }
            return;
          case 13:
            e.preventDefault();
            this.isKeyBoardAction = true;
            if (this.mode !== "CheckBox") {
              this.selectByKey(e);
            }
            this.checkPlaceholderSize();
            return;
          case 32:
            this.isKeyBoardAction = true;
            this.spaceKeySelection(e);
            return;
          case 9:
            e.preventDefault();
            this.isKeyBoardAction = true;
            this.hidePopup(e);
            this.inputElement.focus();
            this.overAllWrapper.classList.add(FOCUS4);
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 9:
          case 16:
          case 17:
          case 20:
            return;
          case 40:
            if (this.openOnClick) {
              this.showPopup();
            }
            break;
          case 27:
            e.preventDefault();
            this.escapeAction();
            return;
        }
      }
      if (this.checkTextLength()) {
        this.keyNavigation(e);
      }
      if (this.mode === "CheckBox" && this.enableSelectionOrder) {
        if (this.allowFiltering) {
          this.previousFilterText = this.targetElement();
        }
        this.checkBackCommand(e);
      }
      this.expandTextbox();
      if (!(this.mode === "CheckBox" && this.showSelectAll)) {
        this.refreshPopup();
      }
      this.isKeyBoardAction = false;
    };
    MultiSelect2.prototype.arrowDown = function(e, isVirtualKeyAction) {
      e.preventDefault();
      this.moveByList(1, isVirtualKeyAction);
      this.keyAction = true;
      if (document.activeElement.classList.contains(FILTERINPUT) || this.mode === "CheckBox" && !this.allowFiltering && document.activeElement !== this.list) {
        EventHandler.add(this.list, "keydown", this.onKeyDown, this);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.arrowUp = function(e, isVirtualKeyAction) {
      e.preventDefault();
      this.keyAction = true;
      var list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      }
      var focuseElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
      this.focusFirstListItem = !isNullOrUndefined(this.liCollections[0]) ? this.liCollections[0].classList.contains("e-item-focus") : false;
      var index = Array.prototype.slice.call(list).indexOf(focuseElem);
      if (index <= 0 && (this.mode === "CheckBox" && this.allowFiltering)) {
        this.keyAction = false;
        this.notify("inputFocus", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "focus" });
      }
      this.moveByList(-1, isVirtualKeyAction);
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.spaceKeySelection = function(e) {
      if (this.mode === "CheckBox") {
        var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (!isNullOrUndefined(li) || selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
          e.preventDefault();
          this.keyAction = true;
        }
        this.selectByKey(e);
        if (this.keyAction) {
          var li_1 = this.list.querySelector("li." + dropDownBaseClasses.focus);
          if (!isNullOrUndefined(li_1) && selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
            li_1.classList.remove("e-item-focus");
          }
        }
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.checkBackCommand = function(e) {
      if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === "") {
        this.backCommand = false;
      } else {
        this.backCommand = true;
      }
    };
    MultiSelect2.prototype.keyNavigation = function(e) {
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox" && this.value && this.value.length) {
        switch (e.keyCode) {
          case 37:
            e.preventDefault();
            this.moveBy(-1, e);
            break;
          case 39:
            e.preventDefault();
            this.moveBy(1, e);
            break;
          case 8:
            this.removelastSelection(e);
            break;
          case 46:
            this.removeSelectedChip(e);
            break;
        }
      } else if (e.keyCode === 8 && this.mode === "Delimiter") {
        if (this.value && this.value.length) {
          e.preventDefault();
          var temp = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          this.removeValue(this.value[this.value.length - 1], e);
          this.updateDelimeter(this.delimiterChar, e);
          this.focusAtLastListItem(temp);
        }
      }
    };
    MultiSelect2.prototype.selectByKey = function(e) {
      this.removeChipSelection();
      this.selectListByKey(e);
      if (this.hideSelectedItem) {
        this.focusAtFirstListItem();
      }
    };
    MultiSelect2.prototype.escapeAction = function() {
      var temp = this.tempValues ? this.tempValues.slice() : [];
      if (this.allowObjectBinding) {
        temp = this.tempValues ? this.tempValues.slice() : [];
      }
      if (this.value && this.validateValues(this.value, temp)) {
        if (this.mode !== "CheckBox") {
          this.value = temp;
          this.initialValueUpdate();
        }
        if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
          this.chipCollectionWrapper.style.display = "";
        } else {
          this.showDelimWrapper();
        }
        this.refreshPlaceHolder();
        if (this.value.length) {
          this.showOverAllClear();
        } else {
          this.hideOverAllClear();
        }
      }
      this.makeTextBoxEmpty();
    };
    MultiSelect2.prototype.scrollBottom = function(selectedLI, activeIndex, isInitialSelection, keyCode) {
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyCode === void 0) {
        keyCode = null;
      }
      if (!isNullOrUndefined(selectedLI) && selectedLI.classList.contains("e-virtual-list") || this.enableVirtualization && isNullOrUndefined(selectedLI)) {
        selectedLI = this.liCollections[this.skeletonCount];
      }
      this.isUpwardScrolling = false;
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
      var lastElementValue = this.list.querySelector("li:last-of-type") ? this.list.querySelector("li:last-of-type").getAttribute("data-value") : null;
      var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? selectedLI.offsetTop + this.virtualListInfo.startIndex * selectedLI.offsetHeight : selectedLI.offsetTop;
      var currentOffset = this.list.offsetHeight;
      var nextBottom = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
      var isScrollerCHanged = false;
      var isScrollTopChanged = false;
      var boxRange = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
      if (activeIndex === 0 && !this.enableVirtualization) {
        this.list.scrollTop = 0;
      } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        var currentElementValue = selectedLI ? selectedLI.getAttribute("data-value") : null;
        var liCount = keyCode == 34 ? this.getPageCount() - 1 : 1;
        if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
          if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyCode != 35 && !this.isVirtualScrolling) {
            this.isPreventKeyAction = true;
            this.list.scrollTop += selectedLI.offsetHeight * liCount;
            this.isPreventKeyAction = this.IsScrollerAtEnd() ? false : this.isPreventKeyAction;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          } else if (this.enableVirtualization && keyCode == 35) {
            this.isPreventKeyAction = false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
            this.list.scrollTop = this.list.scrollHeight;
          } else {
            if (keyCode == 34 && this.enableVirtualization && !this.isVirtualScrolling) {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            }
            this.list.scrollTop = nextOffset;
          }
        } else {
          this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight : 0;
        }
        isScrollerCHanged = this.isKeyBoardAction;
        isScrollTopChanged = true;
      }
      this.isKeyBoardAction = isScrollerCHanged;
    };
    MultiSelect2.prototype.scrollTop = function(selectedLI, activeIndex, keyCode) {
      if (keyCode === void 0) {
        keyCode = null;
      }
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
      var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? selectedLI.offsetTop + this.virtualListInfo.startIndex * selectedLI.offsetHeight : selectedLI.offsetTop;
      var nextOffset = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight - this.list.scrollTop;
      var firstElementValue = this.list.querySelector("li.e-list-item:not(.e-virtual-list)") ? this.list.querySelector("li.e-list-item:not(.e-virtual-list)").getAttribute("data-value") : null;
      nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
      var boxRange = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
      var isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === "autocomplete" && nextOffset <= 0;
      if (activeIndex === 0 && !this.enableVirtualization) {
        this.list.scrollTop = 0;
      } else if (nextOffset < 0 || isPageUpKeyAction) {
        var currentElementValue = selectedLI ? selectedLI.getAttribute("data-value") : null;
        var liCount = keyCode == 33 ? this.getPageCount() - 2 : 1;
        if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyCode != 36 && !this.isVirtualScrolling) {
          this.isUpwardScrolling = true;
          this.isPreventKeyAction = true;
          this.isKeyBoardAction = false;
          this.list.scrollTop -= selectedLI.offsetHeight * liCount;
          this.isPreventKeyAction = this.list.scrollTop != 0 ? this.isPreventKeyAction : false;
          this.isPreventScrollAction = false;
        } else if (this.enableVirtualization && keyCode == 36) {
          this.isPreventScrollAction = false;
          this.isPreventKeyAction = true;
          this.isKeyBoardAction = false;
          this.list.scrollTo(0, 0);
        } else {
          if (keyCode == 33 && this.enableVirtualization && !this.isVirtualScrolling) {
            this.isPreventKeyAction = false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          }
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        }
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
      }
    };
    MultiSelect2.prototype.selectListByKey = function(e) {
      var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
      var limit = this.value && this.value.length ? this.value.length : 0;
      var target;
      if (li !== null) {
        e.preventDefault();
        if (li.classList.contains("e-active")) {
          limit = limit - 1;
        }
        if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
          this.updateListSelection(li, e);
          this.addListFocus(li);
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
            this.checkPlaceholderSize();
            if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
              target = li.firstElementChild.lastElementChild;
              this.findGroupStart(target);
              this.deselectHeader();
            }
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.makeTextBoxEmpty();
          if (this.mode !== "CheckBox") {
            this.refreshListItems(li.textContent);
          }
          if (!this.changeOnBlur) {
            this.updateValueState(e, this.value, this.tempValues);
          }
          this.refreshPopup();
        } else {
          if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
            target = li.firstElementChild.lastElementChild;
            if (target.classList.contains("e-check")) {
              this.selectAllItem(false, e, li);
            } else {
              this.selectAllItem(true, e, li);
            }
          }
        }
        this.refreshSelection();
        if (this.closePopupOnSelect) {
          this.hidePopup(e);
        }
      }
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
        var selectAllCheckBox = selectAllParent.childNodes[0];
        if (!selectAllCheckBox.classList.contains("e-check")) {
          selectAllCheckBox.classList.add("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(true, e, li);
        } else {
          selectAllCheckBox.classList.remove("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(false, e, li);
        }
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshListItems = function(data) {
      if ((this.allowFiltering || this.mode === "CheckBox" && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.enableVirtualization) {
          if (this.allowCustomValue && this.virtualCustomData && data == null && this.virtualCustomData && this.viewPortInfo && this.viewPortInfo.startIndex === 0 && this.viewPortInfo.endIndex === this.itemCount) {
            this.virtualCustomData = null;
            this.renderItems(this.mainData, this.fields);
          } else {
            this.onActionComplete(this.list, this.listData);
          }
        } else {
          this.onActionComplete(list, this.mainData);
        }
        this.focusAtLastListItem(data);
        if (this.value && this.value.length) {
          this.refreshSelection();
        }
      } else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.removeSelectedChip = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      var temp;
      if (selectedElem !== null) {
        if (!isNullOrUndefined(this.value)) {
          this.tempValues = this.allowObjectBinding ? this.value.slice() : this.value.slice();
        }
        temp = selectedElem.nextElementSibling;
        if (temp !== null) {
          this.removeChipSelection();
          this.addChipSelection(temp, e);
        }
        var currentChip = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(selectedElem.getAttribute("data-value"))) : selectedElem.getAttribute("data-value");
        this.removeValue(currentChip, e);
        this.makeTextBoxEmpty();
      }
      if (this.closePopupOnSelect) {
        this.hidePopup(e);
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.moveByTop = function(state) {
      var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      var index;
      if (elements.length > 1) {
        this.removeFocus();
        index = state ? 0 : elements.length - 1;
        this.addListFocus(elements[index]);
        this.scrollBottom(elements[index], index);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.clickHandler = function(e) {
      var targetElement = e.target;
      var filterInputClassName = targetElement.className;
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if ((filterInputClassName === "e-input-filter e-input" || filterInputClassName === "e-input-group e-control-wrapper e-input-focus") && selectAllParent.classList.contains("e-item-focus")) {
        selectAllParent.classList.remove("e-item-focus");
      }
    };
    MultiSelect2.prototype.moveByList = function(position, isVirtualKeyAction) {
      if (this.list) {
        var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
          elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        }
        var selectedElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
        if (this.enableVirtualization && isVirtualKeyAction && !isNullOrUndefined(this.currentFocuedListElement)) {
          selectedElem = this.getElementByValue(this.getFormattedValue(this.currentFocuedListElement.getAttribute("data-value")));
        }
        var temp = -1;
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (this.mode === "CheckBox" && this.showSelectAll && position == 1 && !isNullOrUndefined(selectAllParent) && !selectAllParent.classList.contains("e-item-focus") && this.list.getElementsByClassName("e-item-focus").length == 0 && this.liCollections.length > 1) {
          if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.remove("e-item-focus");
          } else if (!selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.add("e-item-focus");
          }
        } else if (elements.length) {
          if (this.mode === "CheckBox" && this.showSelectAll && !isNullOrUndefined(selectAllParent && position == -1)) {
            if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.remove("e-item-focus");
            } else if (this.focusFirstListItem && !selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.add("e-item-focus");
            }
          }
          for (var index = 0; index < elements.length; index++) {
            if (elements[index] === selectedElem) {
              temp = index;
              break;
            }
          }
          if (position > 0) {
            if (temp < elements.length - 1) {
              this.removeFocus();
              if (this.enableVirtualization && isVirtualKeyAction) {
                this.addListFocus(elements[temp]);
              } else {
                if (this.enableVirtualization && elements[temp + 1].classList.contains("e-virtual-list")) {
                  this.addListFocus(elements[this.skeletonCount]);
                } else {
                  this.addListFocus(elements[++temp]);
                }
              }
              if (temp > -1) {
                this.updateCheck(elements[temp]);
                this.scrollBottom(elements[temp], temp);
                this.currentFocuedListElement = elements[temp];
              }
            }
          } else {
            if (temp > 0) {
              if (this.enableVirtualization) {
                var isVirtualElement = elements[temp - 1].classList.contains("e-virtual-list");
                var elementIndex = isVirtualKeyAction ? temp : temp - 1;
                if (isVirtualKeyAction || !isVirtualElement) {
                  this.removeFocus();
                }
                if (isVirtualKeyAction || !isVirtualElement) {
                  this.addListFocus(elements[elementIndex]);
                  this.updateCheck(elements[elementIndex]);
                  this.scrollTop(elements[elementIndex], temp);
                  this.currentFocuedListElement = elements[elementIndex];
                }
              } else {
                this.removeFocus();
                this.addListFocus(elements[--temp]);
                this.updateCheck(elements[temp]);
                this.scrollTop(elements[temp], temp);
              }
            }
          }
        }
      }
      var focusedLi = this.list ? this.list.querySelector(".e-item-focus") : null;
      if (this.isDisabledElement(focusedLi)) {
        if (this.list.querySelectorAll(".e-list-item:not(.e-hide-listitem):not(.e-disabled)").length === 0) {
          this.removeFocus();
          return;
        }
        var index = this.getIndexByValue(focusedLi.getAttribute("data-value"));
        if (index === 0 && this.mode !== "CheckBox") {
          position = 1;
        }
        if (index === this.list.querySelectorAll(".e-list-item:not(.e-hide-listitem)").length - 1) {
          position = -1;
        }
        this.moveByList(position);
      }
    };
    MultiSelect2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    MultiSelect2.prototype.updateCheck = function(element) {
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        var checkElement = element.firstElementChild.lastElementChild;
        if (checkElement.classList.contains("e-check")) {
          element.classList.add("e-active");
        } else {
          element.classList.remove("e-active");
        }
      }
    };
    MultiSelect2.prototype.moveBy = function(position, e) {
      var temp;
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem === null) {
        if (position < 0) {
          this.addChipSelection(elements[elements.length - 1], e);
        }
      } else {
        if (position < 0) {
          temp = selectedElem.previousElementSibling;
          if (temp !== null) {
            this.removeChipSelection();
            this.addChipSelection(temp, e);
          }
        } else {
          temp = selectedElem.nextElementSibling;
          this.removeChipSelection();
          if (temp !== null) {
            this.addChipSelection(temp, e);
          }
        }
      }
    };
    MultiSelect2.prototype.chipClick = function(e) {
      if (this.enabled) {
        var elem = closest(e.target, "." + CHIP2);
        this.removeChipSelection();
        this.addChipSelection(elem, e);
      }
    };
    MultiSelect2.prototype.removeChipSelection = function() {
      if (this.chipCollectionWrapper) {
        this.removeChipFocus();
      }
    };
    MultiSelect2.prototype.addChipSelection = function(element, e) {
      addClass([element], CHIP_SELECTED);
      this.trigger("chipSelection", e);
    };
    MultiSelect2.prototype.onChipRemove = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      if (this.enabled && !this.readonly) {
        var element = e.target.parentElement;
        var customVal = element.getAttribute("data-value");
        var value = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(customVal)) : this.getFormattedValue(customVal);
        if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
          value = customVal;
        }
        if (this.isPopupOpen() && this.mode !== "CheckBox") {
          this.hidePopup(e);
        }
        if (!this.inputFocus) {
          this.inputElement.focus();
        }
        this.removeValue(value, e);
        value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        if (isNullOrUndefined(this.findListElement(this.list, "li", "data-value", value)) && this.mainList && this.listData) {
          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
          this.onActionComplete(list, this.mainData);
        }
        this.updateDelimeter(this.delimiterChar, e);
        if (this.placeholder && this.floatLabelType === "Never") {
          this.makeTextBoxEmpty();
          this.checkPlaceholderSize();
        } else {
          this.inputElement.value = "";
        }
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.makeTextBoxEmpty = function() {
      this.inputElement.value = "";
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshPlaceHolder = function() {
      if (this.placeholder && this.floatLabelType === "Never") {
        if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== "") {
          this.inputElement.placeholder = "";
        } else {
          this.inputElement.placeholder = encodePlaceholder(this.placeholder);
        }
      } else {
        this.setFloatLabelType();
      }
      this.expandTextbox();
    };
    MultiSelect2.prototype.removeAllItems = function(value, eve, isClearAll, element, mainElement) {
      var index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(value);
      var removeVal = this.value.slice(0);
      removeVal.splice(index, 1);
      this.setProperties({ value: [].concat([], removeVal) }, true);
      element.setAttribute("aria-selected", "false");
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      removeClass([element], className);
      this.notify("activeList", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        li: element,
        e: this,
        index
      });
      this.invokeCheckboxSelection(element, eve, isClearAll);
      var currentValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      this.updateMainList(true, currentValue, mainElement);
      this.updateChipStatus();
    };
    MultiSelect2.prototype.invokeCheckboxSelection = function(element, eve, isClearAll) {
      this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: eve });
      this.updateAriaActiveDescendant();
      if (this.value && this.value.length !== this.mainData.length && (this.mode === "CheckBox" && this.showSelectAll && !(this.isSelectAll || isClearAll))) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "uncheck"
        });
      }
    };
    MultiSelect2.prototype.removeValue = function(value, eve, length, isClearAll) {
      var _this = this;
      var index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(this.getFormattedValue(value));
      if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {
        index = this.allowObjectBinding ? this.indexOfObjectInArray(value, this.value) : this.value.indexOf(value.toString());
      }
      var targetEle = eve && eve.target;
      isClearAll = isClearAll || targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (index !== -1) {
        var currentValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        var element_1 = this.virtualSelectAll ? null : this.findListElement(this.list, "li", "data-value", currentValue);
        var val_1 = this.allowObjectBinding ? value : this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element_1,
          itemData: val_1,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("removing", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.removeIndex++;
          } else {
            _this.virtualSelectAll = false;
            var removeVal = _this.value.slice(0);
            if (_this.enableVirtualization && isClearAll) {
              removeVal = [];
            }
            removeVal.splice(index, 1);
            if (_this.enableVirtualization && _this.mode === "CheckBox") {
              _this.selectedListData.splice(index, 1);
            }
            _this.setProperties({ value: [].concat([], removeVal) }, true);
            if (_this.enableVirtualization) {
              var currentText = index == 0 && _this.text.split(_this.delimiterChar) && _this.text.split(_this.delimiterChar).length == 1 ? _this.text.replace(_this.text.split(_this.delimiterChar)[index], "") : index == 0 ? _this.text.replace(_this.text.split(_this.delimiterChar)[index] + _this.delimiterChar, "") : _this.text.replace(_this.delimiterChar + _this.text.split(_this.delimiterChar)[index], "");
              _this.setProperties({ text: currentText.toString() }, true);
            }
            if (element_1 !== null) {
              var currentValue_1 = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
              var hideElement = _this.findListElement(_this.mainList, "li", "data-value", currentValue_1);
              element_1.setAttribute("aria-selected", "false");
              removeClass([element_1], className);
              if (hideElement) {
                hideElement.setAttribute("aria-selected", "false");
                removeClass([element_1, hideElement], className);
              }
              _this.notify("activeList", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox",
                li: element_1,
                e: _this,
                index
              });
              _this.invokeCheckboxSelection(element_1, eve, isClearAll);
            }
            var currentValue_2 = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
            if (_this.hideSelectedItem && _this.fields.groupBy && element_1) {
              _this.hideGroupItem(currentValue_2);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox" && _this.isPopupOpen()) {
              _super.prototype.scrollStop.call(_this);
            }
            _this.updateMainList(true, currentValue_2);
            _this.removeChip(currentValue_2, isClearAll);
            _this.updateChipStatus();
            var limit = _this.value && _this.value.length ? _this.value.length : 0;
            if (limit < _this.maximumSelectionLength) {
              var collection = _this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
            _this.trigger("removed", eventArgs2);
            var targetEle_1 = eve && eve.currentTarget;
            var isSelectAll = targetEle_1 && targetEle_1.classList.contains("e-selectall-parent") ? true : null;
            if (!_this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll && _this.isSelectAllTarget)) {
              _this.updateValueState(eve, _this.value, _this.tempValues);
            }
            if (length) {
              _this.selectAllEventData.push(val_1);
              _this.selectAllEventEle.push(element_1);
            }
            if (length === 1) {
              if (!_this.changeOnBlur) {
                _this.updateValueState(eve, _this.value, _this.tempValues);
              }
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: false
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
              _this.selectAllEventEle = [];
            }
            if (isClearAll && (length === 1 || length === null)) {
              _this.clearAllCallback(eve, isClearAll);
            }
            if (_this.isPopupOpen() && element_1 && element_1.parentElement.classList.contains("e-reorder")) {
              if (_this.hideSelectedItem && _this.value && Array.isArray(_this.value) && _this.value.length > 0) {
                _this.totalItemsCount();
              }
              _this.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
            }
          }
        });
      }
    };
    MultiSelect2.prototype.updateMainList = function(state, value, mainElement) {
      if (this.allowFiltering || this.mode === "CheckBox") {
        var element2 = mainElement ? mainElement : this.findListElement(this.mainList, "li", "data-value", value);
        if (element2) {
          if (state) {
            element2.setAttribute("aria-selected", "false");
            removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              removeClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          } else {
            element2.setAttribute("aria-selected", "true");
            addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              addClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          }
        }
      }
    };
    MultiSelect2.prototype.removeChip = function(value, isClearAll) {
      if (this.chipCollectionWrapper) {
        if (this.enableVirtualization && isClearAll) {
          var childElements = this.chipCollectionWrapper.querySelectorAll(".e-chips");
        } else {
          var element = this.findListElement(this.chipCollectionWrapper, "span", "data-value", value);
          if (element) {
            remove(element);
          }
        }
      }
    };
    MultiSelect2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.overAllWrapper.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    MultiSelect2.prototype.updateChipStatus = function() {
      if (this.value && this.value.length) {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "";
        }
        if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
        this.showOverAllClear();
      } else {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "none";
        }
        if (!isNullOrUndefined(this.delimiterWrapper)) {
          this.delimiterWrapper.style.display = "none";
        }
        this.hideOverAllClear();
      }
    };
    MultiSelect2.prototype.indexOfObjectInArray = function(objectToFind, array) {
      var _loop_1 = function(i2) {
        var item = array[i2];
        if (Object.keys(objectToFind).every(function(key) {
          return item.hasOwnProperty(key) && item[key] === objectToFind[key];
        })) {
          return { value: i2 };
        }
      };
      for (var i = 0; i < array.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      return -1;
    };
    MultiSelect2.prototype.addValue = function(value, text, eve) {
      if (!this.value) {
        this.value = [];
      }
      var currentValue = this.allowObjectBinding ? this.getDataByValue(value) : value;
      if (this.allowObjectBinding && !this.isObjectInArray(this.getDataByValue(value), this.value) || !this.allowObjectBinding && this.value.indexOf(currentValue) < 0) {
        this.setProperties({ value: [].concat([], this.value, [currentValue]) }, true);
        if (this.enableVirtualization && !this.isSelectAllLoop) {
          var data = this.viewWrapper.innerHTML;
          var temp = void 0;
          data += this.value.length === 1 ? "" : this.delimiterChar + " ";
          temp = this.getOverflowVal(this.value.length - 1);
          data += temp;
          temp = this.viewWrapper.innerHTML;
          this.updateWrapperText(this.viewWrapper, data);
        }
        if (this.enableVirtualization && this.mode === "CheckBox") {
          var temp = void 0;
          var currentText = [];
          var value_1 = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
          temp = this.getTextByValue(value_1);
          var textValues = this.text != null && this.text != "" ? this.text + "," + temp : temp;
          currentText.push(textValues);
          this.setProperties({ text: currentText.toString() }, true);
        }
      }
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.removeFocus();
      if (element) {
        this.addListFocus(element);
        this.addListSelection(element);
      }
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.addChip(text, value, eve);
      }
      if (this.hideSelectedItem && this.fields.groupBy) {
        this.hideGroupItem(value);
      }
      this.updateChipStatus();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.checkMaxSelection = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      if (limit === this.maximumSelectionLength) {
        var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.dispatchSelect = function(value, eve, element, isNotTrigger, length) {
      var _this = this;
      var list = this.listData;
      if (this.initStatus && !isNotTrigger) {
        value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
        var val_2 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element,
          itemData: val_2,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (length) {
              _this.selectAllEventData.push(val_2);
              _this.selectAllEventEle.push(element);
            }
            if (length === 1) {
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: true
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
            }
            if (_this.allowCustomValue && _this.isServerRendered && _this.listData !== list) {
              _this.listData = list;
            }
            value = _this.allowObjectBinding ? _this.getDataByValue(value) : value;
            if (_this.enableVirtualization) {
              if (isNullOrUndefined(_this.selectedListData)) {
                _this.selectedListData = [_this.getDataByValue(value)];
              } else {
                if (Array.isArray(_this.selectedListData)) {
                  _this.selectedListData.push(_this.getDataByValue(value));
                } else {
                  _this.selectedListData = [_this.selectedListData, _this.getDataByValue(value)];
                }
              }
            }
            if (_this.enableVirtualization && value || !_this.enableVirtualization) {
              _this.updateListSelectEventCallback(value, element, eve);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox") {
              _super.prototype.scrollStop.call(_this);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.addChip = function(text, value, e) {
      if (this.chipCollectionWrapper) {
        this.getChip(text, value, e);
      }
    };
    MultiSelect2.prototype.removeChipFocus = function() {
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2 + "." + CHIP_SELECTED);
      removeClass(elements, CHIP_SELECTED);
      if (Browser.isDevice) {
        var closeElements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP_CLOSE2.split(" ")[0]);
        for (var index = 0; index < closeElements.length; index++) {
          closeElements[index].style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.onMobileChipInteraction = function(e) {
      var chipElem = closest(e.target, "." + CHIP2);
      var chipClose = chipElem.querySelector("span." + CHIP_CLOSE2.split(" ")[0]);
      if (this.enabled && !this.readonly) {
        if (!chipElem.classList.contains(CHIP_SELECTED)) {
          this.removeChipFocus();
          chipClose.style.display = "";
          chipElem.classList.add(CHIP_SELECTED);
        }
        this.refreshPopup();
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.multiCompiler = function(multiselectTemplate) {
      var checkTemplate = false;
      if (typeof multiselectTemplate !== "function" && multiselectTemplate) {
        try {
          checkTemplate = selectAll(multiselectTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    MultiSelect2.prototype.encodeHtmlEntities = function(input2) {
      return input2.replace(/[\u00A0-\u9999<>&]/g, function(match) {
        return "&#" + match.charCodeAt(0) + ";";
      });
    };
    MultiSelect2.prototype.getChip = function(data, value, e) {
      var _this = this;
      var itemData = { text: value, value };
      var chip = this.createElement("span", {
        className: CHIP2,
        attrs: { "data-value": value, "title": data }
      });
      var compiledString;
      var chipContent = this.createElement("span", { className: CHIP_CONTENT2 });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE2 });
      if (this.mainData) {
        itemData = this.getDataByValue(value);
      }
      if (this.valueTemplate && !isNullOrUndefined(itemData)) {
        var valuecheck = this.multiCompiler(this.valueTemplate);
        if (typeof this.valueTemplate !== "function" && valuecheck) {
          compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());
        } else {
          compiledString = compile(this.valueTemplate);
        }
        var valueCompTemp = compiledString(itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, chipContent);
        if (valueCompTemp && valueCompTemp.length > 0) {
          append(valueCompTemp, chipContent);
        }
        this.renderReactTemplates();
      } else if (this.enableHtmlSanitizer) {
        chipContent.innerText = data;
      } else {
        chipContent.innerHTML = this.encodeHtmlEntities(data.toString());
      }
      chip.appendChild(chipContent);
      var eventArgs = {
        isInteracted: e ? true : false,
        itemData,
        e,
        setClass: function(classes) {
          addClass([chip], classes);
        },
        cancel: false
      };
      this.isPreventChange = this.isAngular && this.preventChange;
      this.trigger("tagging", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (Browser.isDevice) {
            chip.classList.add(MOBILE_CHIP);
            append([chipClose], chip);
            chipClose.style.display = "none";
            EventHandler.add(chip, "click", _this.onMobileChipInteraction, _this);
          } else {
            EventHandler.add(chip, "mousedown", _this.chipClick, _this);
            if (_this.showClearButton) {
              chip.appendChild(chipClose);
            }
          }
          EventHandler.add(chipClose, "mousedown", _this.onChipRemove, _this);
          _this.chipCollectionWrapper.appendChild(chip);
          if (!_this.changeOnBlur && e) {
            _this.updateValueState(e, _this.value, _this.tempValues);
          }
        }
      });
    };
    MultiSelect2.prototype.calcPopupWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    MultiSelect2.prototype.mouseIn = function() {
      if (this.enabled && !this.readonly) {
        this.showOverAllClear();
      }
    };
    MultiSelect2.prototype.mouseOut = function() {
      if (!this.inputFocus) {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;
      this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
        fields: fieldProperty,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);
      if (this.mode === "CheckBox") {
        this.notify("listoption", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", dataSource, fieldProperty });
      }
      return this.listCurrentOptions;
    };
    MultiSelect2.prototype.renderPopup = function() {
      var _this = this;
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      if (!this.popupObj) {
        if (!isNullOrUndefined(this.popupWrapper)) {
          document.body.appendChild(this.popupWrapper);
          var checkboxFilter = this.popupWrapper.querySelector("." + FILTERPARENT);
          if (this.mode === "CheckBox" && !this.allowFiltering && checkboxFilter && this.filterParent) {
            checkboxFilter.remove();
            this.filterParent = null;
          }
          var overAllHeight = parseInt(this.popupHeight, 10);
          this.popupWrapper.style.visibility = "hidden";
          if (this.headerTemplate) {
            this.setHeaderTemplate();
            overAllHeight -= this.header.offsetHeight;
          }
          append([this.list], this.popupWrapper);
          if (!this.list.classList.contains(dropDownBaseClasses.noData) && this.getItems()[1]) {
            this.listItemHeight = this.getItems()[1].offsetHeight;
          }
          if (this.enableVirtualization && !this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!this.list.querySelector(".e-virtual-ddl-content") && this.list.querySelector(".e-list-parent")) {
              this.list.appendChild(this.createElement("div", {
                className: "e-virtual-ddl-content",
                styles: this.getTransformValues()
              })).appendChild(this.list.querySelector(".e-list-parent"));
            } else if (this.list.querySelector(".e-virtual-ddl-content")) {
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            }
            this.UpdateSkeleton();
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
            this.virtualItemCount = this.itemCount;
            if (this.mode !== "CheckBox") {
              this.totalItemsCount();
            }
            if (!this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-virtual-ddl",
                styles: this.GetVirtualTrackHeight()
              });
              this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
            } else {
              this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
            }
          }
          if (this.footerTemplate) {
            this.setFooterTemplate();
            overAllHeight -= this.footer.offsetHeight;
          }
          if (this.mode === "CheckBox" && this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight -= this.selectAllHeight;
          } else if (this.mode === "CheckBox" && !this.showSelectAll && (!this.headerTemplate && !this.footerTemplate)) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
          } else if (this.mode === "CheckBox" && !this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
            if (this.headerTemplate && this.header) {
              overAllHeight -= this.header.offsetHeight;
            }
            if (this.footerTemplate && this.footer) {
              overAllHeight -= this.footer.offsetHeight;
            }
          }
          if (this.mode === "CheckBox") {
            var args = {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              popupElement: this.popupWrapper
            };
            if (this.allowFiltering) {
              this.notify("searchBox", args);
              overAllHeight -= this.searchBoxHeight;
            }
            addClass([this.popupWrapper], "e-checkbox");
          }
          if (this.popupHeight !== "auto") {
            this.list.style.maxHeight = formatUnit(overAllHeight);
            this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
          } else {
            this.list.style.maxHeight = formatUnit(this.popupHeight);
          }
          this.popupObj = new Popup(this.popupWrapper, {
            width: this.calcPopupWidth(),
            targetType: "relative",
            position: this.enableRtl ? { X: "right", Y: "bottom" } : { X: "left", Y: "bottom" },
            relateTo: this.overAllWrapper,
            collision: this.enableRtl ? { X: "fit", Y: "flip" } : { X: "flip", Y: "flip" },
            offsetY: 1,
            enableRtl: this.enableRtl,
            zIndex: this.zIndex,
            close: function() {
              if (_this.popupObj.element.parentElement) {
                _this.popupObj.unwireScrollEvents();
                var checkboxFilterInput = _this.popupWrapper.querySelector("." + FILTERINPUT);
                if (_this.mode === "CheckBox" && checkboxFilterInput && document.activeElement === checkboxFilterInput) {
                  checkboxFilterInput.blur();
                }
                detach(_this.popupObj.element);
              }
            },
            open: function() {
              _this.popupObj.resolveCollision();
              if (!_this.isFirstClick) {
                var ulElement = _this.list.querySelector("ul");
                if (ulElement) {
                  if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                    _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                  }
                }
                _this.isFirstClick = true;
              }
              _this.popupObj.wireScrollEvents();
              if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "") && !_this.enableVirtualization) {
                _this.loadTemplate();
                if (_this.enableVirtualization && _this.mode === "CheckBox") {
                  _this.UpdateSkeleton();
                }
              }
              _this.isPreventScrollAction = true;
              _this.setScrollPosition();
              if (!_this.list.classList.contains(dropDownBaseClasses.noData) && _this.getItems()[1] && _this.getItems()[1].offsetHeight !== 0) {
                _this.listItemHeight = _this.getItems()[1].offsetHeight;
                if (_this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
                  _this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = _this.getTransformValues();
                }
              }
              if (_this.allowFiltering) {
                _this.notify("inputFocus", {
                  module: "CheckBoxSelection",
                  enable: _this.mode === "CheckBox",
                  value: "focus"
                });
              }
              if (_this.enableVirtualization) {
                _this.notify("bindScrollEvent", {
                  module: "VirtualScroll",
                  component: _this.getModuleName(),
                  enable: _this.enableVirtualization
                });
                setTimeout(function() {
                  if (_this.value) {
                    _this.updateSelectionList();
                  } else if (_this.viewPortInfo && _this.viewPortInfo.offsets.top) {
                    _this.list.scrollTop = _this.viewPortInfo.offsets.top;
                  }
                }, 5);
              }
            },
            targetExitViewport: function() {
              if (!Browser.isDevice) {
                _this.hidePopup();
              }
            }
          });
          this.checkCollision(this.popupWrapper);
          this.popupContentElement = this.popupObj.element.querySelector(".e-content");
          if (this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering) {
            this.notify("deviceSearchBox", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
          }
          this.popupObj.close();
          this.popupWrapper.style.visibility = "";
        }
      }
    };
    MultiSelect2.prototype.checkCollision = function(popupEle) {
      if (!(this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.setHeaderTemplate = function() {
      var compiledString;
      if (this.header) {
        this.header.remove();
      }
      this.header = this.createElement("div");
      addClass([this.header], HEADER5);
      var headercheck = this.multiCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var elements = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (elements && elements.length > 0) {
        append(elements, this.header);
      }
      if (this.mode === "CheckBox" && this.showSelectAll) {
        prepend([this.header], this.popupWrapper);
      } else {
        append([this.header], this.popupWrapper);
      }
      EventHandler.add(this.header, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.setFooterTemplate = function() {
      var compiledString;
      if (this.footer) {
        this.footer.remove();
      }
      this.footer = this.createElement("div");
      addClass([this.footer], FOOTER4);
      var footercheck = this.multiCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var elements = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (elements && elements.length > 0) {
        append(elements, this.footer);
      }
      append([this.footer], this.popupWrapper);
      EventHandler.add(this.footer, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.updateInitialData = function() {
      var currentData = this.selectData;
      var ulElement = this.renderItems(currentData, this.fields);
      this.list.scrollTop = 0;
      this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
      this.previousStartIndex = 0;
      this.previousEndIndex = 0;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.mode !== "CheckBox") {
        this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
      }
      this.getSkeletonCount();
      this.UpdateSkeleton();
      if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      } else if (!this.list.querySelector(".e-virtual-ddl") && this.skeletonCount > 0) {
        var virualElement = this.createElement("div", {
          id: this.element.id + "_popup",
          className: "e-virtual-ddl",
          styles: this.GetVirtualTrackHeight()
        });
        this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
      }
      this.listData = currentData;
      this.liCollections = this.list.querySelectorAll(".e-list-item");
      if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
    };
    MultiSelect2.prototype.clearAll = function(e) {
      if (this.enabled && !this.readonly) {
        var temp = void 0;
        if (this.value && this.value.length > 0) {
          var liElement = this.list && this.list.querySelectorAll("li.e-list-item");
          if (liElement && liElement.length > 0) {
            this.selectAllItems(false, e);
          } else {
            this.removeIndex = 0;
            for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
              this.removeValue(temp, e, null, true);
            }
          }
          this.selectedElementID = null;
          this.inputElement.removeAttribute("aria-activedescendant");
        } else {
          this.clearAllCallback(e);
        }
        this.checkAndResetCache();
        if (this.enableVirtualization) {
          this.updateInitialData();
          if (this.chipCollectionWrapper) {
            this.chipCollectionWrapper.innerHTML = "";
          }
          if (!this.isCustomDataUpdated) {
            this.notify("setGeneratedData", {
              module: "VirtualScroll"
            });
          }
        }
        if (this.enableVirtualization) {
          this.list.scrollTop = 0;
          this.virtualListInfo = null;
          this.previousStartIndex = 0;
          this.previousEndIndex = 0;
        }
      }
    };
    MultiSelect2.prototype.clearAllCallback = function(e, isClearAll) {
      var tempValues = this.value ? this.value.slice() : [];
      if (this.mainList && this.listData && (this.allowFiltering && this.mode !== "CheckBox" || this.allowCustomValue)) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
      }
      this.focusAtFirstListItem();
      this.updateDelimeter(this.delimiterChar, e);
      if (this.mode !== "Box" && (!this.inputFocus || this.mode === "CheckBox")) {
        this.updateDelimView();
      }
      if (this.inputElement.value !== "") {
        this.makeTextBoxEmpty();
        this.search(null);
      }
      this.checkPlaceholderSize();
      if (this.isPopupOpen()) {
        this.refreshPopup();
      }
      if (!this.inputFocus) {
        if (this.changeOnBlur) {
          this.updateValueState(e, this.value, tempValues);
        }
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        }
      }
      if (this.mode === "CheckBox") {
        this.refreshPlaceHolder();
        this.refreshInputHight();
        if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.updateValueState(e, this.value, this.tempValues);
        }
      }
      if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.updateValueState(e, this.value, this.tempValues);
      }
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        this.updateListItems(this.list.querySelectorAll("li.e-list-item"), this.mainList.querySelectorAll("li.e-list-item"));
      }
      e.preventDefault();
    };
    MultiSelect2.prototype.windowResize = function() {
      this.refreshPopup();
      if ((!this.inputFocus || this.mode === "CheckBox") && this.viewWrapper && this.viewWrapper.parentElement) {
        this.updateDelimView();
      }
    };
    MultiSelect2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute("data-initial-value");
        this.text = textVal;
      }
    };
    MultiSelect2.prototype.wireEvent = function() {
      EventHandler.add(this.componentWrapper, "mousedown", this.wrapperClick, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(this.inputElement, "focus", this.focusInHandler, this);
      EventHandler.add(this.inputElement, "keydown", this.onKeyDown, this);
      EventHandler.add(this.inputElement, "keyup", this.keyUp, this);
      if (this.mode !== "CheckBox") {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
      }
      EventHandler.add(this.inputElement, "blur", this.onBlurHandler, this);
      EventHandler.add(this.componentWrapper, "mouseover", this.mouseIn, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      EventHandler.add(this.componentWrapper, "mouseout", this.mouseOut, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
    };
    MultiSelect2.prototype.onInput = function(e) {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.search(e);
      }
    };
    MultiSelect2.prototype.pasteHandler = function(event2) {
      var _this = this;
      setTimeout(function() {
        _this.expandTextbox();
        _this.search(event2);
      });
    };
    MultiSelect2.prototype.search = function(e) {
      var _this = this;
      this.resetFilteredData = true;
      this.preventSetCurrentData = false;
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      if (!isNullOrUndefined(e)) {
        this.keyCode = e.keyCode;
      }
      if (!this.isPopupOpen() && this.openOnClick) {
        this.showPopup(e);
      }
      this.openClick(e);
      if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && e.keyCode !== 8) {
        this.focusAtFirstListItem();
      } else {
        var text = this.targetElement();
        if (this.allowFiltering) {
          if (this.allowCustomValue) {
            this.isRemoteSelection = true;
          }
          this.checkAndResetCache();
          this.isRequesting = false;
          var eventArgs_1 = {
            preventDefaultAction: false,
            text: this.targetElement(),
            updateData: function(dataSource, query2, fields) {
              if (eventArgs_1.cancel) {
                return;
              }
              _this.isFiltered = true;
              _this.customFilterQuery = query2;
              _this.remoteFilterAction = true;
              _this.dataUpdater(dataSource, query2, fields);
            },
            event: e,
            cancel: false
          };
          this.trigger("filtering", eventArgs_1, function(eventArgs) {
            if (!eventArgs.cancel) {
              if (!_this.isFiltered && !eventArgs.preventDefaultAction) {
                _this.filterAction = true;
                if (_this.dataSource instanceof DataManager && _this.allowCustomValue) {
                  _this.isCustomRendered = false;
                }
                _this.dataUpdater(_this.dataSource, null, _this.fields);
              }
            }
          });
        } else if (this.allowCustomValue) {
          var query = new Query();
          query = this.allowFiltering && text !== "" ? query.where(this.fields.text, "startswith", text, this.ignoreCase, this.ignoreAccent) : query;
          if (this.enableVirtualization) {
            this.dataUpdater(this.dataSource, query, this.fields);
          } else {
            this.dataUpdater(this.mainData, query, this.fields);
          }
          this.UpdateSkeleton();
        } else {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var type = this.typeOfData(this.listData).typeof;
          var activeElement = Search(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (this.enableVirtualization && this.targetElement().trim() !== "" && !this.allowFiltering) {
            var updatingincrementalindex = false;
            if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex == 0) {
              updatingincrementalindex = true;
              this.incrementalStartIndex = 0;
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
              this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
              updatingincrementalindex = false;
            }
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            activeElement = Search(this.targetElement(), this.incrementalLiCollections, this.filterType, true, this.listData, this.fields, type);
            while (isNullOrUndefined(activeElement) && this.incrementalEndIndex < this.totalItemCount) {
              this.incrementalStartIndex = this.incrementalEndIndex;
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
              this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
              updatingincrementalindex = true;
              if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
                this.updateIncrementalView(0, this.itemCount);
              }
              activeElement = Search(this.targetElement(), this.incrementalLiCollections, this.filterType, true, this.listData, this.fields, type);
              if (!isNullOrUndefined(activeElement)) {
                break;
              }
              if (isNullOrUndefined(activeElement) && this.incrementalEndIndex >= this.totalItemCount) {
                this.incrementalStartIndex = 0;
                this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
                break;
              }
            }
            if (activeElement.index) {
              if (!(this.viewPortInfo.startIndex >= activeElement.index) || !(activeElement.index >= this.viewPortInfo.endIndex)) {
                var startIndex = activeElement.index - (this.itemCount / 2 - 2) > 0 ? activeElement.index - (this.itemCount / 2 - 2) : 0;
                var endIndex = startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : startIndex + this.itemCount;
                if (startIndex != this.viewPortInfo.startIndex) {
                  this.updateIncrementalView(startIndex, endIndex);
                }
              }
            }
            if (!isNullOrUndefined(activeElement.item)) {
              var index_1 = this.getIndexByValue(activeElement.item.getAttribute("data-value")) - this.skeletonCount;
              if (index_1 > this.itemCount / 2) {
                var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
                var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
                this.updateIncrementalView(startIndex, endIndex);
              }
              activeElement.item = this.getElementByValue(activeElement.item.getAttribute("data-value"));
            } else {
              this.updateIncrementalView(0, this.itemCount);
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
              this.list.scrollTop = 0;
            }
            if (activeElement && activeElement.item) {
              activeElement.item = this.getElementByValue(activeElement.item.getAttribute("data-value"));
            }
          }
          if (activeElement && activeElement.item) {
            this.addListFocus(activeElement.item);
            this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
          } else if (this.targetElement() !== "") {
            this.removeFocus();
          } else {
            this.focusAtFirstListItem();
          }
        }
      }
      if (this.enableVirtualization && this.allowFiltering) {
        this.getFilteringSkeletonCount();
      }
    };
    MultiSelect2.prototype.preRender = function() {
      if (this.allowFiltering === null) {
        this.allowFiltering = this.mode === "CheckBox" ? true : false;
      }
      this.preventSetCurrentData = false;
      this.initializeData();
      this.updateDataAttribute(this.htmlAttributes);
      _super.prototype.preRender.call(this);
    };
    MultiSelect2.prototype.getLocaleName = function() {
      return "multi-select";
    };
    MultiSelect2.prototype.initializeData = function() {
      this.mainListCollection = [];
      this.beforePopupOpen = false;
      this.filterAction = false;
      this.remoteFilterAction = false;
      this.isFirstClick = false;
      this.mobFilter = true;
      this.isFiltered = false;
      this.focused = true;
      this.initial = true;
      this.backCommand = true;
      this.isCustomRendered = false;
      this.isRemoteSelection = false;
      this.isSelectAllTarget = true;
      this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
    };
    MultiSelect2.prototype.updateData = function(delimiterChar, e) {
      var data = "";
      var delim = this.mode === "Delimiter" || this.mode === "CheckBox";
      var text = [];
      var temp;
      var tempData = this.listData;
      if (!this.enableVirtualization) {
        this.listData = this.mainData;
      }
      if (!isNullOrUndefined(this.hiddenElement) && !this.enableVirtualization) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.value)) {
        var valueLength = this.value.length;
        var hiddenElementContent = "";
        for (var index = 0; index < valueLength; index++) {
          var valueItem = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
          var listValue = this.findListElement(!isNullOrUndefined(this.mainList) ? this.mainList : this.ulElement, "li", "data-value", valueItem);
          if (this.enableVirtualization) {
            listValue = this.findListElement(!isNullOrUndefined(this.list) ? this.list : this.ulElement, "li", "data-value", valueItem);
          }
          if (isNullOrUndefined(listValue) && !this.allowCustomValue && !this.enableVirtualization && this.listData && this.listData.length > 0) {
            this.value.splice(index, 1);
            index -= 1;
            valueLength -= 1;
          } else {
            if (this.listData) {
              if (this.enableVirtualization) {
                if (delim) {
                  data = this.delimiterWrapper && this.delimiterWrapper.innerHTML == "" ? data : this.delimiterWrapper.innerHTML;
                }
                var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[this.value.length - 1]) : this.value[this.value.length - 1];
                temp = this.getTextByValue(value);
                var textValues = this.text != null && this.text != "" ? this.text + "," + temp : temp;
                data += temp + delimiterChar + " ";
                text.push(textValues);
                hiddenElementContent = this.hiddenElement.innerHTML;
                if (e && e.currentTarget && e.currentTarget.classList.contains("e-chips-close") || e && e.key === "Backspace") {
                  var item = e.target.parentElement.getAttribute("data-value");
                  if (e.key === "Backspace") {
                    var lastChild = this.hiddenElement.lastChild;
                    if (lastChild) {
                      this.hiddenElement.removeChild(lastChild);
                    }
                  } else {
                    this.hiddenElement.childNodes.forEach(function(option) {
                      if (option.value === item) {
                        option.parentNode.removeChild(option);
                      }
                    });
                  }
                  hiddenElementContent = this.hiddenElement.innerHTML;
                } else {
                  hiddenElementContent += '<option selected value="' + value + '">' + index + "</option>";
                }
                break;
              } else {
                temp = this.getTextByValue(valueItem);
              }
            } else {
              temp = valueItem;
            }
            data += temp + delimiterChar + " ";
            text.push(temp);
          }
          hiddenElementContent += '<option selected value="' + valueItem + '">' + index + "</option>";
        }
        if (!isNullOrUndefined(this.hiddenElement)) {
          this.hiddenElement.innerHTML = hiddenElementContent;
        }
      }
      var isChipRemove = e && e.target && e.target.classList.contains("e-chips-close");
      if (!this.enableVirtualization || this.enableVirtualization && this.mode !== "CheckBox" && !isChipRemove) {
        this.setProperties({ text: text.toString() }, true);
      }
      if (delim) {
        this.updateWrapperText(this.delimiterWrapper, data);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
      }
      var targetEle = e && e.target;
      var isClearAll = targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      if (!this.changeOnBlur && (e && !isClearAll) || this.isSelectAll) {
        this.isSelectAll = false;
        this.updateValueState(e, this.value, this.tempValues);
      }
      this.listData = tempData;
      this.addValidInputClass();
    };
    MultiSelect2.prototype.initialTextUpdate = function() {
      if (!isNullOrUndefined(this.text)) {
        var textArr = this.text.split(this.delimiterChar);
        var textVal = [];
        for (var index = 0; textArr.length > index; index++) {
          var val = this.getValueByText(textArr[index]);
          if (!isNullOrUndefined(val)) {
            textVal.push(val);
          } else if (this.allowCustomValue) {
            textVal.push(textArr[index]);
          }
        }
        if (textVal && textVal.length) {
          var value = this.allowObjectBinding ? this.getDataByValue(textVal) : textVal;
          this.setProperties({ value }, true);
        }
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.renderList = function(isEmptyData) {
      if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector(".e-ul") && this.list.querySelector(".e-ul").childElementCount === 0)) {
        isEmptyData = true;
      }
      _super.prototype.render.call(this, null, isEmptyData);
      this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      this.unwireListEvents();
      this.wireListEvents();
    };
    MultiSelect2.prototype.initialValueUpdate = function(listItems, isInitialVirtualData) {
      if (this.list) {
        var text = void 0;
        var element = void 0;
        var value = void 0;
        if (this.chipCollectionWrapper) {
          this.chipCollectionWrapper.innerHTML = "";
        }
        this.removeListSelection();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
            element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
            var isCustomData = false;
            if (this.enableVirtualization) {
              text = null;
              if (listItems != null && listItems.length > 0) {
                for (var i = 0; i < listItems.length; i++) {
                  if (getValue(this.fields.value ? this.fields.value : "value", listItems[i]) === value) {
                    text = getValue(this.fields.text, listItems[i]);
                    if (this.enableVirtualization) {
                      if (isNullOrUndefined(this.selectedListData)) {
                        this.selectedListData = [listItems[i]];
                      } else {
                        if (Array.isArray(this.selectedListData)) {
                          this.selectedListData.push(listItems[i]);
                        } else {
                          this.selectedListData = [this.selectedListData, listItems[i]];
                        }
                      }
                    }
                    break;
                  }
                }
              }
              if (isNullOrUndefined(text) && this.allowCustomValue && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && isInitialVirtualData)) {
                text = this.getTextByValue(value);
                isCustomData = true;
              }
            } else {
              text = this.getTextByValue(value);
            }
            if (element && element.getAttribute("aria-selected") !== "true" || element && (element.getAttribute("aria-selected") === "true" && this.hideSelectedItem) && (this.mode === "Box" || this.mode === "Default") || this.enableVirtualization && value != null && text != null && !isCustomData) {
              var currentText = [];
              var textValues = this.text != null && this.text != "" ? this.text + "," + text : text;
              currentText.push(textValues);
              this.setProperties({ text: currentText.toString() }, true);
              this.addChip(text, value);
              this.addListSelection(element);
            } else if (!this.enableVirtualization && value && this.allowCustomValue || this.enableVirtualization && value && this.allowCustomValue && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && isInitialVirtualData)) {
              var indexItem = this.listData.length;
              var newValue = {};
              setValue(this.fields.text, value, newValue);
              setValue(this.fields.value, value, newValue);
              var noDataEle = this.popupWrapper.querySelector("." + dropDownBaseClasses.noData);
              if (!this.enableVirtualization) {
                this.addItem(newValue, indexItem);
              }
              if (this.enableVirtualization) {
                if (this.virtualCustomSelectData && this.virtualCustomSelectData.length >= 0) {
                  this.virtualCustomSelectData.push(newValue);
                } else {
                  this.virtualCustomSelectData = [newValue];
                }
              }
              element = element ? element : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
              if (this.popupWrapper.contains(noDataEle)) {
                this.list.setAttribute("style", noDataEle.getAttribute("style"));
                this.popupWrapper.replaceChild(this.list, noDataEle);
                this.wireListEvents();
              }
              var currentText = [];
              var textValues = this.text != null && this.text != "" ? this.text + "," + text : text;
              currentText.push(textValues);
              this.setProperties({ text: currentText.toString() }, true);
              this.addChip(text, value);
              this.addListSelection(element);
            }
          }
        }
        if (this.mode === "CheckBox") {
          this.updateDelimView();
          if (this.changeOnBlur) {
            this.updateValueState(null, this.value, this.tempValues);
          }
          this.updateDelimeter(this.delimiterChar);
          this.refreshInputHight();
        } else {
          this.updateDelimeter(this.delimiterChar);
        }
        if (this.mode === "CheckBox" && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {
          this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
        }
        if (this.mode === "Box" || this.mode === "Default" && this.inputFocus) {
          this.chipCollectionWrapper.style.display = "";
        } else if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
      }
    };
    MultiSelect2.prototype.updateActionCompleteData = function(li, item) {
      if (this.value && (!this.allowObjectBinding && this.value.indexOf(li.getAttribute("data-value")) > -1 || this.allowObjectBinding && this.isObjectInArray(this.getDataByValue(li.getAttribute("data-value")), this.value))) {
        this.mainList = this.ulElement;
        if (this.hideSelectedItem) {
          addClass([li], HIDE_LIST);
        }
      }
    };
    MultiSelect2.prototype.updateAddItemList = function(list, itemCount) {
      if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector("." + dropDownBaseClasses.noData) && list) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
        remove(this.popupWrapper.querySelector(".e-content"));
        this.popupObj = null;
        this.renderPopup();
      } else if (this.allowCustomValue) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
      }
    };
    MultiSelect2.prototype.updateDataList = function() {
      if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {
        var isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;
        var isReactTemplateUpdate = this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0 && (this.mainList.children[0] && this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount);
        var isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0);
        if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {
          this.mainList = this.ulElement;
        }
      }
    };
    MultiSelect2.prototype.isValidLI = function(li) {
      return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
    };
    MultiSelect2.prototype.updateListSelection = function(li, e, length) {
      var customVal = li.getAttribute("data-value");
      var value = this.allowObjectBinding ? this.getDataByValue(this.getFormattedValue(customVal)) : this.getFormattedValue(customVal);
      if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
        value = customVal;
      }
      this.removeHover();
      if (!this.value || (!this.allowObjectBinding && this.value.indexOf(value) === -1 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) === -1)) {
        this.dispatchSelect(value, e, li, li.getAttribute("aria-selected") === "true", length);
      } else {
        this.removeValue(value, e, length);
      }
    };
    MultiSelect2.prototype.updateListSelectEventCallback = function(value, li, e) {
      var _this = this;
      value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
      var text = this.getTextByValue(value);
      if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, "li", "data-value", value) && (!this.enableVirtualization || this.enableVirtualization && this.virtualCustomData)) {
        var temp_1 = li ? li.cloneNode(true) : li;
        var fieldValue = this.fields.value ? this.fields.value : "value";
        if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === "number") {
          value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;
        }
        var data_1 = this.getDataByValue(value);
        var eventArgs = {
          newData: data_1,
          cancel: false
        };
        this.trigger("customValueSelection", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.enableVirtualization && _this.virtualCustomData) {
              if (_this.virtualCustomSelectData && _this.virtualCustomSelectData.length >= 0) {
                _this.virtualCustomSelectData.push(data_1);
              } else {
                _this.virtualCustomSelectData = [data_1];
              }
              _this.remoteCustomValue = false;
              _this.addValue(value, text, e);
            } else {
              append([temp_1], _this.mainList);
              _this.mainData.push(data_1);
              _this.remoteCustomValue = false;
              _this.addValue(value, text, e);
            }
          }
        });
      } else {
        this.remoteCustomValue = false;
        this.addValue(value, text, e);
      }
    };
    MultiSelect2.prototype.removeListSelection = function() {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      var selectedItems = this.list.querySelectorAll("." + className);
      var temp = selectedItems.length;
      if (selectedItems && selectedItems.length) {
        removeClass(selectedItems, className);
        while (temp > 0) {
          selectedItems[temp - 1].setAttribute("aria-selected", "false");
          temp--;
        }
      }
      if (!isNullOrUndefined(this.mainList)) {
        var selectItems = this.mainList.querySelectorAll("." + className);
        var temp1 = selectItems.length;
        if (selectItems && selectItems.length) {
          removeClass(selectItems, className);
          while (temp1 > 0) {
            selectItems[temp1 - 1].setAttribute("aria-selected", "false");
            if (this.mode === "CheckBox") {
              if (selectedItems && selectedItems.length > temp1 - 1) {
                removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
              }
              removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
            }
            temp1--;
          }
        }
      }
    };
    MultiSelect2.prototype.removeHover = function() {
      var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, dropDownBaseClasses.hover);
      }
    };
    MultiSelect2.prototype.removeFocus = function() {
      if (this.list && this.mainList) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.focus);
        var mainlist = this.mainList.querySelectorAll("." + dropDownBaseClasses.focus);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.focus);
          removeClass(mainlist, dropDownBaseClasses.focus);
        }
      }
    };
    MultiSelect2.prototype.addListHover = function(li) {
      if (this.enabled && this.isValidLI(li)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      } else {
        if (li !== null && li.classList.contains("e-list-group-item") && this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          this.removeHover();
          addClass([li], dropDownBaseClasses.hover);
        }
      }
    };
    MultiSelect2.prototype.addListFocus = function(element) {
      if (this.enabled && (this.isValidLI(element) || this.fields.disabled && this.isDisabledElement(element))) {
        this.removeFocus();
        addClass([element], dropDownBaseClasses.focus);
        this.updateAriaActiveDescendant();
      } else {
        if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          addClass([element], dropDownBaseClasses.focus);
          this.updateAriaActiveDescendant();
        }
      }
    };
    MultiSelect2.prototype.addListSelection = function(element, mainElement) {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {
        addClass([element], className);
        this.updateMainList(false, element.getAttribute("data-value"), mainElement);
        element.setAttribute("aria-selected", "true");
        if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
          var ariaCheck = element.getElementsByClassName("e-check").length;
          if (ariaCheck === 0) {
            this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: this });
          }
        }
        this.notify("activeList", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: this });
        if (this.chipCollectionWrapper) {
          this.removeChipSelection();
        }
        this.selectedElementID = element.id;
      }
    };
    MultiSelect2.prototype.updateDelimeter = function(delimChar, e) {
      this.updateData(delimChar, e);
    };
    MultiSelect2.prototype.onMouseClick = function(e) {
      var _this = this;
      this.keyCode = null;
      this.scrollFocusStatus = false;
      this.keyboardEvent = null;
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (this.enableVirtualization && li && li.classList.contains("e-virtual-list")) {
        return;
      }
      var headerLi = closest(target, "." + dropDownBaseClasses.group);
      if (headerLi && this.enableGroupCheckBox && this.mode === "CheckBox" && this.fields.groupBy) {
        target = target.classList.contains("e-list-group-item") ? target.firstElementChild.lastElementChild : e.target;
        if (target.classList.contains("e-check")) {
          this.selectAllItem(false, e);
          target.classList.remove("e-check");
          target.classList.remove("e-stop");
          closest(target, ".e-list-group-item").classList.remove("e-active");
          target.setAttribute("aria-selected", "false");
        } else {
          this.selectAllItem(true, e);
          target.classList.remove("e-stop");
          target.classList.add("e-check");
          closest(target, ".e-list-group-item").classList.add("e-active");
          target.setAttribute("aria-selected", "true");
        }
        this.refreshSelection();
        this.checkSelectAll();
      } else {
        if (this.isValidLI(li)) {
          var limit = this.value && this.value.length ? this.value.length : 0;
          if (li.classList.contains("e-active")) {
            limit = limit - 1;
          }
          if (limit < this.maximumSelectionLength) {
            this.updateListSelection(li, e);
            this.checkPlaceholderSize();
            this.addListFocus(li);
            if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
              if (this.mode !== "CheckBox") {
                this.focusAtLastListItem(li.getAttribute("data-value"));
                this.refreshSelection();
              }
            } else {
              this.makeTextBoxEmpty();
            }
          }
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            if (this.value && this.value.length > 50) {
              setTimeout(function() {
                _this.updateDelimeter(_this.delimiterChar, e);
              }, 0);
            } else {
              this.updateDelimeter(this.delimiterChar, e);
            }
            this.refreshInputHight();
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.checkSelectAll();
          this.refreshPopup();
          if (this.hideSelectedItem) {
            this.focusAtFirstListItem();
          }
          if (this.closePopupOnSelect) {
            this.hidePopup(e);
          } else {
            e.preventDefault();
          }
          this.makeTextBoxEmpty();
          this.findGroupStart(target);
          if (this.mode !== "CheckBox") {
            this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);
          }
        } else {
          e.preventDefault();
        }
        if (this.enableVirtualization && this.hideSelectedItem) {
          var visibleListElements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list)");
          if (visibleListElements.length) {
            var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
            if (visibleListElements.length < actualCount + 2) {
              var query = this.getForQuery(this.value).clone();
              query = query.skip(this.virtualItemStartIndex);
              this.resetList(this.dataSource, this.fields, query);
              this.UpdateSkeleton();
              this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
              this.virtualItemCount = this.itemCount;
              if (this.mode !== "CheckBox") {
                this.totalItemCount = this.value && this.value.length ? this.totalItemCount - this.value.length : this.totalItemCount;
              }
              if (!this.list.querySelector(".e-virtual-ddl")) {
                var virualElement = this.createElement("div", {
                  id: this.element.id + "_popup",
                  className: "e-virtual-ddl",
                  styles: this.GetVirtualTrackHeight()
                });
                this.popupWrapper.querySelector(".e-dropdownbase").appendChild(virualElement);
              } else {
                this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
              }
              if (this.list.querySelector(".e-virtual-ddl-content")) {
                this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
              }
            }
          }
        }
        this.refreshPlaceHolder();
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.findGroupStart = function(target) {
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var count = 0;
        var liChecked = 0;
        var liUnchecked = 0;
        var groupValues = void 0;
        if (this.itemTemplate && !target.getElementsByClassName("e-frame").length) {
          while (!target.getElementsByClassName("e-frame").length) {
            target = target.parentElement;
          }
        }
        if (target.classList.contains("e-frame")) {
          target = target.parentElement.parentElement;
        }
        groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);
        groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);
        while (!target.classList.contains("e-list-group-item")) {
          if (target.classList.contains("e-list-icon")) {
            target = target.parentElement;
          }
          target = target.previousElementSibling;
          if (target == null) {
            break;
          }
        }
        this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
      }
    };
    MultiSelect2.prototype.findGroupAttrtibutes = function(listElement, checked, unChecked, count, position) {
      while (!listElement.classList.contains("e-list-group-item")) {
        if (listElement.classList.contains("e-list-icon")) {
          listElement = listElement.parentElement;
        }
        if (listElement.getElementsByClassName("e-frame")[0].classList.contains("e-check") && listElement.classList.contains("e-list-item")) {
          checked++;
        } else if (listElement.classList.contains("e-list-item")) {
          unChecked++;
        }
        count++;
        listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;
        if (listElement == null) {
          break;
        }
      }
      return [checked, unChecked, count];
    };
    MultiSelect2.prototype.updateCheckBox = function(groupHeader, checked, unChecked, count) {
      if (groupHeader === null) {
        return;
      }
      var checkBoxElement = groupHeader.getElementsByClassName("e-frame")[0];
      if (count === checked) {
        checkBoxElement.classList.remove("e-stop");
        checkBoxElement.classList.add("e-check");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "true");
      } else if (count === unChecked) {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.remove("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.remove("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      } else if (this.maximumSelectionLength === checked - 1) {
        checkBoxElement.classList.remove("e-stop");
        groupHeader.setAttribute("aria-selected", "true");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        checkBoxElement.classList.add("e-check");
      } else {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.add("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      }
    };
    MultiSelect2.prototype.deselectHeader = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      var collection = this.list.querySelectorAll("li.e-list-group-item:not(.e-active)");
      if (limit < this.maximumSelectionLength) {
        removeClass(collection, "e-disable");
      }
      if (limit === this.maximumSelectionLength) {
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      if (currentLi === null && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {
        currentLi = closest(e.target, "." + dropDownBaseClasses.group);
      }
      this.addListHover(currentLi);
    };
    MultiSelect2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    MultiSelect2.prototype.onListMouseDown = function(e) {
      e.preventDefault();
      this.scrollFocusStatus = true;
    };
    MultiSelect2.prototype.onDocumentClick = function(e) {
      if (this.mode !== "CheckBox") {
        var target = e.target;
        if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id="' + this.popupObj.element.id + '"]')) && !this.overAllWrapper.contains(e.target)) {
          this.scrollFocusStatus = false;
        } else {
          this.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement;
        }
      }
    };
    MultiSelect2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(document, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.list, "mousedown", this.onListMouseDown, this);
        EventHandler.add(this.list, "mouseup", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    MultiSelect2.prototype.unwireListEvents = function() {
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      if (this.list) {
        EventHandler.remove(this.list, "mousedown", this.onListMouseDown);
        EventHandler.remove(this.list, "mouseup", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    MultiSelect2.prototype.hideOverAllClear = function() {
      if (!this.value || !this.value.length || this.inputElement.value === "") {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.showOverAllClear = function() {
      if ((this.value && this.value.length || this.inputElement.value !== "") && this.showClearButton && this.readonly !== true) {
        this.overAllClear.style.display = "";
      } else {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement && this.enabled) {
        this.inputElement.blur();
      }
    };
    MultiSelect2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        var filterClear = this.filterParent && this.filterParent.querySelector(".e-clear-icon.e-icons");
        if (this.overAllClear.style.display !== "none" || filterClear) {
          this.spinnerElement = filterClear ? filterClear : this.overAllClear;
        } else {
          this.spinnerElement = this.createElement("span", { className: CLOSEICON_CLASS2 + " " + SPINNER_CLASS2 });
          this.componentWrapper.appendChild(this.spinnerElement);
        }
        createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? "16px" : "14px" }, this.createElement);
        addClass([this.spinnerElement], DISABLE_ICON);
        showSpinner(this.spinnerElement);
      }
    };
    MultiSelect2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], DISABLE_ICON);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS2)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    MultiSelect2.prototype.updateWrapperText = function(wrapperType, wrapperData) {
      if (this.valueTemplate || !this.enableHtmlSanitizer) {
        wrapperType.innerHTML = this.encodeHtmlEntities(wrapperData);
      } else {
        wrapperType.innerText = wrapperData;
      }
    };
    MultiSelect2.prototype.updateDelimView = function() {
      if (this.delimiterWrapper) {
        this.hideDelimWrapper();
      }
      if (this.chipCollectionWrapper) {
        this.chipCollectionWrapper.style.display = "none";
      }
      if (!isNullOrUndefined(this.viewWrapper)) {
        this.viewWrapper.style.display = "";
        this.viewWrapper.style.width = "";
        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      }
      if (this.value && this.value.length) {
        var data = "";
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        var overAllContainer = void 0;
        if (!this.enableVirtualization) {
          this.updateWrapperText(this.viewWrapper, data);
        }
        var l10nLocale = {
          noRecordsTemplate: "No records found",
          actionFailureTemplate: "Request failed",
          overflowCountTemplate: "+${count} more..",
          totalCountTemplate: "${count} selected"
        };
        var l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        if (l10n.getConstant("actionFailureTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        if (l10n.getConstant("noRecordsTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        var remainContent = l10n.getConstant("overflowCountTemplate");
        var totalContent = l10n.getConstant("totalCountTemplate");
        var raminElement = this.createElement("span", {
          className: REMAIN_WRAPPER2
        });
        var remainCompildTemp = remainContent.replace("${count}", this.value.length.toString());
        raminElement.innerText = remainCompildTemp;
        this.viewWrapper.appendChild(raminElement);
        this.renderReactTemplates();
        var remainSize = raminElement.offsetWidth;
        remove(raminElement);
        if (this.showDropDownIcon) {
          downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        }
        this.checkClearIconWidth();
        if (!isNullOrUndefined(this.value) && (this.allowCustomValue || this.listData && this.listData.length > 0)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            var items = this.text && this.text.split(this.delimiterChar);
            if (!this.enableVirtualization) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.viewWrapper.innerHTML;
              this.updateWrapperText(this.viewWrapper, data);
            } else if (items) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = items[index];
              data += temp;
              temp = this.viewWrapper.innerHTML;
              this.updateWrapperText(this.viewWrapper, data);
            }
            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
            overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
              if (tempData !== void 0 && tempData !== "") {
                temp = tempData;
                index = tempIndex + 1;
              }
              this.updateWrapperText(this.viewWrapper, temp);
              remaining = this.value.length - index;
              wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== "") {
                var textArr = [];
                this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);
                remaining = this.value.length;
                wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              }
              break;
            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
              tempData = data;
              tempIndex = index;
            } else if (index === 0) {
              tempData = "";
              tempIndex = -1;
            }
          }
        }
        if (remaining > 0) {
          var totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;
          this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));
          this.updateRemainWidth(this.viewWrapper, totalWidth);
          this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);
        }
      } else {
        if (!isNullOrUndefined(this.viewWrapper)) {
          this.viewWrapper.innerHTML = "";
          this.viewWrapper.style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.checkClearIconWidth = function() {
      if (this.showClearButton) {
        this.clearIconWidth = this.overAllClear.offsetWidth;
      }
    };
    MultiSelect2.prototype.updateRemainWidth = function(viewWrapper, totalWidth) {
      if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER2) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {
        viewWrapper.style.width = totalWidth + "px";
      }
    };
    MultiSelect2.prototype.updateRemainTemplate = function(raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === "") {
        viewWrapper.removeChild(viewWrapper.firstChild);
      }
      raminElement.innerHTML = "";
      var remainTemp = remainContent.replace("${count}", remaining.toString());
      var totalTemp = totalContent.replace("${count}", remaining.toString());
      raminElement.innerText = viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? remainTemp : totalTemp;
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
        viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      } else {
        viewWrapper.classList.add(TOTAL_COUNT_WRAPPER2);
        this.updateRemainWidth(viewWrapper, totalWidth);
      }
      return raminElement;
    };
    MultiSelect2.prototype.updateRemainingText = function(raminElement, downIconWidth, remaining, remainContent, totalContent) {
      var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
      var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
      if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
        while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
          var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
          textArr.pop();
          this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);
          if (this.viewWrapper.firstChild.nodeValue === "") {
            this.viewWrapper.removeChild(this.viewWrapper.firstChild);
          }
          remaining++;
          wrapperleng = this.viewWrapper.offsetWidth;
        }
        var totalWidth = overAllContainer - downIconWidth;
        this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);
      }
    };
    MultiSelect2.prototype.getOverflowVal = function(index) {
      var temp;
      if (this.mainData && this.mainData.length) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
        if (this.mode === "CheckBox") {
          var newTemp = this.listData;
          this.listData = this.mainData;
          temp = this.getTextByValue(value);
          this.listData = newTemp;
        } else {
          temp = this.getTextByValue(value);
        }
      } else {
        temp = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[index]) : this.value[index];
      }
      return temp;
    };
    MultiSelect2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mousedown", this.wrapperClick);
      }
      EventHandler.remove(window, "resize", this.windowResize);
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "focus", this.focusInHandler);
        EventHandler.remove(this.inputElement, "keydown", this.onKeyDown);
        if (this.mode !== "CheckBox") {
          EventHandler.remove(this.inputElement, "input", this.onInput);
        }
        EventHandler.remove(this.inputElement, "keyup", this.keyUp);
        var formElement = closest(this.inputElement, "form");
        if (formElement) {
          EventHandler.remove(formElement, "reset", this.resetValueHandler);
        }
        EventHandler.remove(this.inputElement, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mouseover", this.mouseIn);
        EventHandler.remove(this.componentWrapper, "mouseout", this.mouseOut);
      }
      if (!isNullOrUndefined(this.overAllClear)) {
        EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
      }
    };
    MultiSelect2.prototype.selectAllItem = function(state, event2, list) {
      var li;
      if (!isNullOrUndefined(this.list)) {
        li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)');
      }
      if (this.value && this.value.length && event2 && event2.target && closest(event2.target, ".e-close-hooker") && this.allowFiltering) {
        li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide):not(.e-disabled):not(.e-virtual-list)');
      }
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var target = event2 ? this.groupTemplate ? closest(event2.target, ".e-list-group-item") : event2.target : null;
        target = event2 && event2.keyCode === 32 ? list : target;
        target = target && target.classList.contains("e-frame") ? target.parentElement.parentElement : target;
        if (target && target.classList.contains("e-list-group-item")) {
          var listElement = target.nextElementSibling;
          if (isNullOrUndefined(listElement)) {
            return;
          }
          while (listElement.classList.contains("e-list-item")) {
            if (state) {
              if (!listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                var selectionLimit = this.value && this.value.length ? this.value.length : 0;
                if (listElement.classList.contains("e-active")) {
                  selectionLimit -= 1;
                }
                if (selectionLimit < this.maximumSelectionLength) {
                  this.updateListSelection(listElement, event2);
                }
              }
            } else {
              if (listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                this.updateListSelection(listElement, event2);
              }
            }
            listElement = listElement.nextElementSibling;
            if (listElement == null) {
              break;
            }
          }
          if (target.classList.contains("e-list-group-item")) {
            var focusedElement = this.list.getElementsByClassName("e-item-focus")[0];
            if (focusedElement) {
              focusedElement.classList.remove("e-item-focus");
            }
            if (state) {
              target.classList.add("e-active");
            } else {
              target.classList.remove("e-active");
            }
            target.classList.add("e-item-focus");
            this.updateAriaActiveDescendant();
          }
          this.textboxValueUpdate();
          this.checkPlaceholderSize();
          if (!this.changeOnBlur && event2) {
            this.updateValueState(event2, this.value, this.tempValues);
          }
        } else {
          this.updateValue(event2, li, state);
        }
      } else {
        this.updateValue(event2, li, state);
      }
      this.addValidInputClass();
    };
    MultiSelect2.prototype.virtualSelectionAll = function(state, li, event2) {
      var _this = this;
      var index = 0;
      var length = li.length;
      var count = this.maximumSelectionLength;
      if (state) {
        length = this.virtualSelectAllData && this.virtualSelectAllData.length != 0 ? this.virtualSelectAllData.length : length;
        this.listData = this.virtualSelectAllData;
        var ulElement = this.createListItems(this.virtualSelectAllData.slice(0, 30), this.fields);
        var firstItems = ulElement.querySelectorAll("li");
        var fragment_1 = document.createDocumentFragment();
        firstItems.forEach(function(node) {
          fragment_1.appendChild(node.cloneNode(true));
        });
        li.forEach(function(node) {
          fragment_1.appendChild(node.cloneNode(true));
        });
        var concatenatedNodeList = fragment_1.childNodes;
        if (this.virtualSelectAllData instanceof Array) {
          while (index < length && index <= 50 && index < count) {
            this.isSelectAllTarget = length === index + 1;
            if (concatenatedNodeList[index]) {
              var value = this.allowObjectBinding ? this.getDataByValue(concatenatedNodeList[index].getAttribute("data-value")) : this.getFormattedValue(concatenatedNodeList[index].getAttribute("data-value"));
              if (!this.allowObjectBinding && this.value && this.value.indexOf(value) >= 0 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) >= 0) {
                index++;
                continue;
              }
              this.updateListSelection(concatenatedNodeList[index], event2, length - index);
            } else {
              var value = getValue(this.fields.value ? this.fields.value : "", this.virtualSelectAllData[index]);
              value = this.allowObjectBinding ? this.getDataByValue(value) : value;
              if (!this.allowObjectBinding && this.value && this.value.indexOf(value) >= 0 || this.allowObjectBinding && this.indexOfObjectInArray(value, this.value) >= 0) {
                index++;
                continue;
              }
              if (this.value && value != null && Array.isArray(this.value) && (!this.allowObjectBinding && this.value.indexOf(value) < 0 || this.allowObjectBinding && !this.isObjectInArray(value, this.value))) {
                this.dispatchSelect(value, event2, null, false, length);
              }
            }
            index++;
          }
          if (length > 50) {
            setTimeout(function() {
              if (_this.virtualSelectAllData && _this.virtualSelectAllData.length > 0) {
                _this.virtualSelectAllData.map(function(obj) {
                  if (_this.value && obj[_this.fields.value] != null && Array.isArray(_this.value) && (!_this.allowObjectBinding && _this.value.indexOf(obj[_this.fields.value]) < 0 || _this.allowObjectBinding && !_this.isObjectInArray(obj[_this.fields.value], _this.value))) {
                    _this.dispatchSelect(obj[_this.fields.value], event2, null, false, length);
                  }
                });
              }
              _this.updatedataValueItems(event2);
              _this.isSelectAllLoop = false;
              if (!_this.changeOnBlur) {
                _this.updateValueState(event2, _this.value, _this.tempValues);
                _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
              }
              _this.updateHiddenElement();
              if (_this.popupWrapper && li[index - 1] && li[index - 1].classList.contains("e-item-focus")) {
                var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
                if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
                  li[index - 1].classList.remove("e-item-focus");
                }
              }
            }, 0);
          }
        }
      } else {
        if (this.virtualSelectAllData && this.virtualSelectAllData.length > 0) {
          this.virtualSelectAllData.map(function(obj) {
            _this.virtualSelectAll = true;
            _this.removeValue(_this.value[index], event2, _this.value.length - index);
          });
        }
        this.updatedataValueItems(event2);
        if (!this.changeOnBlur) {
          this.updateValueState(event2, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        this.updateHiddenElement();
        this.value = [];
        this.virtualSelectAll = false;
        if (!isNullOrUndefined(this.viewPortInfo.startIndex) && !isNullOrUndefined(this.viewPortInfo.endIndex)) {
          this.notify("setCurrentViewDataAsync", {
            component: this.getModuleName(),
            module: "VirtualScroll"
          });
        }
      }
      var virtualTrackElement = this.list.getElementsByClassName("e-virtual-ddl")[0];
      if (virtualTrackElement) {
        virtualTrackElement.style = this.GetVirtualTrackHeight();
      }
      this.UpdateSkeleton();
      var virtualContentElement = this.list.getElementsByClassName("e-virtual-ddl-content")[0];
      if (virtualContentElement) {
        virtualContentElement.style = this.getTransformValues();
      }
    };
    MultiSelect2.prototype.updateValue = function(event2, li, state) {
      var _this = this;
      var length = li.length;
      var beforeSelectArgs = {
        event: event2,
        items: state ? li : [],
        itemData: state ? this.listData : [],
        isInteracted: event2 ? true : false,
        isChecked: state,
        preventSelectEvent: false
      };
      this.trigger("beforeSelectAll", beforeSelectArgs);
      if (li && li.length || this.enableVirtualization && !state) {
        var index_2 = 0;
        var count_1 = 0;
        if (this.enableGroupCheckBox) {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
        } else {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
        }
        if (!beforeSelectArgs.preventSelectEvent) {
          if (this.enableVirtualization) {
            this.virtualSelectAll = true;
            this.virtualSelectAllState = state;
            this.CurrentEvent = event2;
            if (!this.virtualSelectAllData) {
              this.resetList(this.dataSource, this.fields, new Query());
            }
            if (this.virtualSelectAllData) {
              this.virtualSelectionAll(state, li, event2);
            }
          } else {
            while (index_2 < length && index_2 <= 50 && index_2 < count_1) {
              this.isSelectAllTarget = length === index_2 + 1;
              this.updateListSelection(li[index_2], event2, length - index_2);
              if (this.enableGroupCheckBox) {
                this.findGroupStart(li[index_2]);
              }
              index_2++;
            }
            if (length > 50) {
              setTimeout(function() {
                while (index_2 < length && index_2 < count_1) {
                  _this.isSelectAllTarget = length === index_2 + 1;
                  _this.updateListSelection(li[index_2], event2, length - index_2);
                  if (_this.enableGroupCheckBox) {
                    _this.findGroupStart(li[index_2]);
                  }
                  index_2++;
                }
                _this.updatedataValueItems(event2);
                if (!_this.changeOnBlur) {
                  _this.updateValueState(event2, _this.value, _this.tempValues);
                  _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
                }
                _this.updateHiddenElement();
                if (_this.popupWrapper && li[index_2 - 1].classList.contains("e-item-focus")) {
                  var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
                  if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
                    li[index_2 - 1].classList.remove("e-item-focus");
                  }
                }
              }, 0);
            }
          }
        } else {
          for (var i = 0; i < li.length && i < count_1; i++) {
            this.removeHover();
            var customVal = li[i].getAttribute("data-value");
            var value = this.getFormattedValue(customVal);
            value = this.allowObjectBinding ? this.getDataByValue(value) : value;
            var mainElement = this.mainList ? this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)')[i] : null;
            if (state) {
              this.value = !this.value ? [] : this.value;
              if (!this.allowObjectBinding && this.value.indexOf(value) < 0 || this.allowObjectBinding && !this.isObjectInArray(value, this.value)) {
                this.setProperties({ value: [].concat([], this.value, [value]) }, true);
              }
              this.removeFocus();
              this.addListSelection(li[i], mainElement);
              this.updateChipStatus();
              this.checkMaxSelection();
            } else {
              this.removeAllItems(value, event2, false, li[i], mainElement);
            }
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[i]);
            }
          }
          if (!state) {
            var limit = this.value && this.value.length ? this.value.length : 0;
            if (limit < this.maximumSelectionLength) {
              var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
          }
          var args = {
            event: event2,
            items: state ? li : [],
            itemData: state ? this.listData : [],
            isInteracted: event2 ? true : false,
            isChecked: state
          };
          this.trigger("selectedAll", args);
        }
      }
      this.updatedataValueItems(event2);
      this.checkPlaceholderSize();
      if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {
        if (!this.changeOnBlur) {
          this.updateValueState(event2, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        if (this.enableVirtualization && this.value && this.value.length > 0 || !this.enableVirtualization) {
          this.updateHiddenElement();
        }
      }
    };
    MultiSelect2.prototype.updateHiddenElement = function() {
      var _this = this;
      var hiddenValue = "";
      var wrapperText = "";
      var data = "";
      var text = [];
      if (this.mode === "CheckBox") {
        this.value.map(function(value, index) {
          hiddenValue += '<option selected value ="' + value + '">' + index + "</option>";
          if (_this.listData) {
            data = _this.getTextByValue(value);
          } else {
            data = value;
          }
          wrapperText += data + _this.delimiterChar + " ";
          text.push(data);
        });
        this.hiddenElement.innerHTML = hiddenValue;
        this.updateWrapperText(this.delimiterWrapper, wrapperText);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
        this.setProperties({ text: text.toString() }, true);
        this.refreshInputHight();
        this.refreshPlaceHolder();
      }
    };
    MultiSelect2.prototype.updatedataValueItems = function(event2) {
      this.deselectHeader();
      this.textboxValueUpdate(event2);
    };
    MultiSelect2.prototype.textboxValueUpdate = function(event2) {
      var isRemoveAll = event2 && event2.target && (closest(event2.target, ".e-selectall-parent") || closest(event2.target, ".e-close-hooker"));
      if (this.mode !== "Box" && !this.isPopupOpen() && !(this.mode === "CheckBox" && (this.isSelectAll || isRemoveAll))) {
        this.updateDelimView();
      } else {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      }
      if (this.mode === "CheckBox") {
        this.updateDelimView();
        if (!(isRemoveAll || this.isSelectAll) && this.isSelectAllTarget) {
          this.updateDelimeter(this.delimiterChar, event2);
        }
        this.refreshInputHight();
      } else {
        this.updateDelimeter(this.delimiterChar, event2);
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    MultiSelect2.prototype.updateDataSource = function(prop) {
      if (isNullOrUndefined(this.list)) {
        this.renderPopup();
      } else {
        this.resetList(this.dataSource);
      }
      if (this.value && this.value.length) {
        this.setProperties({ "value": this.value });
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.onLoadSelect = function() {
      this.setDynValue = true;
      this.renderPopup();
    };
    MultiSelect2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      if (isNullOrUndefined(this.list)) {
        this.selectAllAction = function() {
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            var args2 = {
              module: "CheckBoxSelection",
              enable: _this.mode === "CheckBox",
              value: state ? "check" : "uncheck"
            };
            _this.notify("checkSelectAll", args2);
          }
          _this.selectAllItem(state, event2);
          _this.selectAllAction = null;
        };
        _super.prototype.render.call(this);
      } else {
        this.selectAllAction = null;
        if (this.mode === "CheckBox" && this.showSelectAll) {
          var args = {
            value: state ? "check" : "uncheck",
            enable: this.mode === "CheckBox",
            module: "CheckBoxSelection"
          };
          this.notify("checkSelectAll", args);
        }
        this.selectAllItem(state, event2);
      }
      if (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.virtualSelectAllData) {
        this.virtualSelectAll = false;
      }
    };
    MultiSelect2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    MultiSelect2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        if (this.resetFilteredData) {
          this.resetMainList = !this.resetMainList ? this.mainList : this.resetMainList;
          this.resetFilteredData = false;
        }
        this.mainList = null;
        this.mainData = null;
        this.isFirstClick = false;
        this.isDynamicDataChange = true;
      }
      if (this.getModuleName() === "multiselect") {
        this.filterAction = false;
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "dataSource":
            if (this.mode === "CheckBox" && this.showSelectAll) {
              if (!isNullOrUndefined(this.popupObj)) {
                this.popupObj.destroy();
                this.popupObj = null;
              }
              this.renderPopup();
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttribute();
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "text":
            if (this.fields.disabled) {
              this.text = this.text && !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
            }
            this.updateVal(this.value, this.value, "text");
            break;
          case "value":
            if (this.fields.disabled) {
              this.removeDisabledItemsValue(this.value);
            }
            this.updateVal(this.value, oldProp.value, "value");
            this.addValidInputClass();
            if (!this.closePopupOnSelect && this.isPopupOpen()) {
              this.refreshPopup();
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "width":
            this.setWidth(newProp.width);
            this.popupObj.setProperties({ width: this.calcPopupWidth() });
            break;
          case "placeholder":
            this.refreshPlaceHolder();
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              this.notify("filterBarPlaceholder", { filterBarPlaceholder: newProp.filterBarPlaceholder });
            }
            break;
          case "delimiterChar":
            if (this.mode !== "Box") {
              this.updateDelimView();
            }
            this.updateData(newProp.delimiterChar);
            break;
          case "cssClass":
            this.updateOldPropCssClass(oldProp.cssClass);
            this.updateCssClass();
            this.calculateWidth();
            break;
          case "enableRtl":
            this.enableRTL(newProp.enableRtl);
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
          case "readonly":
            this.updateReadonly(newProp.readonly);
            this.hidePopup();
            break;
          case "enabled":
            this.hidePopup();
            this.enable(newProp.enabled);
            break;
          case "showSelectAll":
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }
            this.renderPopup();
            break;
          case "showDropDownIcon":
            this.dropDownIcon();
            break;
          case "floatLabelType":
            this.setFloatLabelType();
            this.addValidInputClass();
            Input.createSpanElement(this.overAllWrapper, this.createElement);
            this.calculateWidth();
            if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
              this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
            }
            break;
          case "enableSelectionOrder":
            break;
          case "selectAllText":
            this.notify("selectAllText", false);
            break;
          case "popupHeight":
            if (this.popupObj) {
              var overAllHeight = parseInt(this.popupHeight, 10);
              if (this.popupHeight !== "auto") {
                this.list.style.maxHeight = formatUnit(overAllHeight);
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
              } else {
                this.list.style.maxHeight = formatUnit(this.popupHeight);
              }
            }
            break;
          case "headerTemplate":
          case "footerTemplate":
            this.reInitializePoup();
            break;
          case "allowFiltering":
            if (this.mode === "CheckBox" && this.popupObj) {
              this.reInitializePoup();
            }
            this.updateSelectElementData(this.allowFiltering);
            break;
          case "fields":
            if (isNullOrUndefined(this.fields.groupBy)) {
              this.removeScrollEvent();
            }
            break;
          default:
            {
              var msProps = this.getPropObject(prop, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);
            }
            break;
        }
      }
    };
    MultiSelect2.prototype.reInitializePoup = function() {
      if (this.popupObj) {
        this.popupObj.destroy();
        this.popupObj = null;
      }
      this.renderPopup();
    };
    MultiSelect2.prototype.totalItemsCount = function() {
      var dataSourceCount;
      if (this.dataSource instanceof DataManager) {
        if (this.remoteDataCount >= 0) {
          dataSourceCount = this.totalItemCount = this.dataCount = this.remoteDataCount;
        } else {
          this.resetList(this.dataSource);
        }
      } else {
        dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.mode === "CheckBox") {
        this.totalItemCount = dataSourceCount != 0 ? dataSourceCount : this.totalItemCount;
      } else {
        if (this.hideSelectedItem) {
          this.totalItemCount = dataSourceCount != 0 && this.value ? dataSourceCount - this.value.length : this.totalItemCount;
          if (this.allowCustomValue && this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
            for (var i = 0; i < this.virtualCustomSelectData.length; i++) {
              for (var j = 0; j < this.value.length; j++) {
                var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[j]) : this.value[j];
                var customValue = getValue(this.fields.value ? this.fields.value : "", this.virtualCustomSelectData[i]);
                if (value === customValue) {
                  this.totalItemCount += 1;
                }
              }
            }
          }
        } else {
          this.totalItemCount = dataSourceCount != 0 ? dataSourceCount : this.totalItemCount;
          if (this.allowCustomValue && this.virtualCustomSelectData && this.virtualCustomSelectData.length > 0) {
            this.totalItemCount += this.virtualCustomSelectData.length;
          }
        }
      }
    };
    MultiSelect2.prototype.presentItemValue = function(ulElement) {
      var valuecheck = [];
      for (var i = 0; i < this.value.length; i++) {
        var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[i]) : this.value[i];
        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", value);
        if (!checkEle) {
          var checkvalue = this.allowObjectBinding ? this.getDataByValue(this.value[i]) : this.value[i];
          valuecheck.push(checkvalue);
        }
      }
      return valuecheck;
    };
    ;
    MultiSelect2.prototype.addNonPresentItems = function(valuecheck, ulElement, list, event2) {
      var _this = this;
      this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function(e) {
        if (e.result.length > 0) {
          _this.addItem(e.result, list.length);
        }
        _this.updateActionList(ulElement, list, event2);
      });
    };
    ;
    MultiSelect2.prototype.updateVal = function(newProp, oldProp, prop) {
      if (!this.list) {
        this.onLoadSelect();
      } else if (this.dataSource instanceof DataManager && (!this.listData || !(this.mainList && this.mainData))) {
        this.onLoadSelect();
      } else {
        var valuecheck = [];
        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
          valuecheck = this.presentItemValue(this.ulElement);
        }
        if (prop == "value" && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null && !this.enableVirtualization) {
          this.mainData = null;
          this.setDynValue = true;
          this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
        } else {
          if (prop === "text") {
            this.initialTextUpdate();
            newProp = this.value;
          }
          if (isNullOrUndefined(this.value) || this.value.length === 0) {
            this.tempValues = oldProp;
          }
          if (this.allowCustomValue && (this.mode === "Default" || this.mode === "Box") && this.isReact && this.inputFocus && this.isPopupOpen() && this.mainData !== this.listData) {
            var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
            this.onActionComplete(list, this.mainData);
          }
          if (!this.enableVirtualization || this.enableVirtualization && !(this.dataSource instanceof DataManager)) {
            this.initialValueUpdate();
          }
          if (this.mode !== "Box" && !this.inputFocus) {
            this.updateDelimView();
          }
          if (!this.inputFocus) {
            this.refreshInputHight();
          }
          this.refreshPlaceHolder();
          if (this.mode !== "CheckBox" && this.changeOnBlur) {
            this.updateValueState(null, newProp, oldProp);
          }
          this.checkPlaceholderSize();
        }
      }
      if (!this.changeOnBlur) {
        this.updateValueState(null, newProp, oldProp);
      }
    };
    MultiSelect2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    MultiSelect2.prototype.hidePopup = function(e) {
      var _this = this;
      var delay = 100;
      if (this.isPopupOpen()) {
        var animModel = {
          name: "FadeOut",
          duration: 100,
          delay: delay ? delay : 0
        };
        this.customFilterQuery = null;
        var eventArgs = { popup: this.popupObj, cancel: false, animation: animModel, event: e || null };
        this.trigger("close", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.fields.groupBy && _this.mode !== "CheckBox" && _this.fixedHeaderElement) {
              remove(_this.fixedHeaderElement);
              _this.fixedHeaderElement = null;
            }
            _this.beforePopupOpen = false;
            _this.overAllWrapper.classList.remove(iconAnimation);
            var typedValue = _this.mode == "CheckBox" ? _this.targetElement() : null;
            _this.popupObj.hide(new Animation(eventArgs2.animation));
            attributes(_this.inputElement, { "aria-expanded": "false" });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-activedescendant");
            if (_this.allowFiltering) {
              _this.notify("inputFocus", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox", value: "clear" });
            }
            _this.popupObj.hide();
            removeClass([document.body, _this.popupObj.element], "e-popup-full-page");
            EventHandler.remove(_this.list, "keydown", _this.onKeyDown);
            if (_this.mode === "CheckBox" && _this.showSelectAll) {
              EventHandler.remove(_this.popupObj.element, "click", _this.clickHandler);
            }
            if (_this.enableVirtualization && _this.mode === "CheckBox" && _this.value && _this.value.length > 0 && _this.enableSelectionOrder) {
              _this.viewPortInfo.startIndex = _this.virtualItemStartIndex = 0;
              _this.viewPortInfo.endIndex = _this.virtualItemEndIndex = _this.viewPortInfo.startIndex > 0 ? _this.viewPortInfo.endIndex : _this.itemCount;
              _this.virtualListInfo = _this.viewPortInfo;
              _this.previousStartIndex = 0;
              _this.previousEndIndex = 0;
            }
            var dataSourceCount = void 0;
            if (_this.dataSource instanceof DataManager) {
              if (_this.remoteDataCount >= 0) {
                _this.totalItemCount = _this.dataCount = _this.remoteDataCount;
              } else {
                _this.resetList(_this.dataSource);
              }
            } else {
              dataSourceCount = _this.dataSource && _this.dataSource.length ? _this.dataSource.length : 0;
            }
            if (_this.enableVirtualization && (_this.allowFiltering || _this.allowCustomValue) && (_this.targetElement() || typedValue) && _this.totalItemCount !== dataSourceCount) {
              _this.updateInitialData();
              _this.checkAndResetCache();
            }
            if (_this.virtualCustomData && _this.viewPortInfo && _this.viewPortInfo.startIndex === 0 && _this.viewPortInfo.endIndex === _this.itemCount) {
              _this.renderItems(_this.mainData, _this.fields);
            }
            _this.virtualCustomData = null;
            _this.isVirtualTrackHeight = false;
          }
        });
      }
    };
    MultiSelect2.prototype.showPopup = function(e) {
      var _this = this;
      if (!this.enabled) {
        return;
      }
      this.firstItem = this.dataSource && this.dataSource.length > 0 ? this.dataSource[0] : null;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          if (!_this.ulElement) {
            _this.beforePopupOpen = true;
            if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
              _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
            }
            _super.prototype.render.call(_this, e);
            return;
          }
          if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
            _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
          }
          var mainLiLength = _this.ulElement.querySelectorAll("li.e-list-item").length;
          var liLength = _this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + "." + HIDE_LIST).length;
          if (mainLiLength > 0 && mainLiLength === liLength && liLength === _this.mainData.length && !(_this.targetElement() !== "" && _this.allowCustomValue)) {
            _this.beforePopupOpen = false;
            return;
          }
          _this.onPopupShown(e);
          if (_this.enableVirtualization && _this.listData && _this.listData.length) {
            if (!isNullOrUndefined(_this.value) && (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox")) {
              _this.removeHover();
            }
            if (!_this.beforePopupOpen) {
              if (_this.hideSelectedItem && _this.value && Array.isArray(_this.value) && _this.value.length > 0) {
                _this.totalItemsCount();
              }
              if (!_this.preventSetCurrentData && !isNullOrUndefined(_this.viewPortInfo.startIndex) && !isNullOrUndefined(_this.viewPortInfo.endIndex)) {
                _this.notify("setCurrentViewDataAsync", {
                  component: _this.getModuleName(),
                  module: "VirtualScroll"
                });
              }
            }
          }
          if (_this.enableVirtualization && !_this.allowFiltering && _this.selectedValueInfo != null && _this.selectedValueInfo.startIndex > 0 && _this.value != null) {
            _this.notify("dataProcessAsync", {
              module: "VirtualScroll",
              isOpen: true
            });
          }
          if (_this.enableVirtualization) {
            _this.updatevirtualizationList();
          } else {
            if (_this.value && _this.value.length) {
              var element = void 0;
              var listItems = _this.getItems();
              for (var _i = 0, _a = _this.value; _i < _a.length; _i++) {
                var value = _a[_i];
                var checkValue = _this.allowObjectBinding ? getValue(_this.fields.value ? _this.fields.value : "", value) : value;
                element = _this.getElementByValue(checkValue);
                if (element) {
                  _this.addListSelection(element);
                }
              }
            }
          }
          _this.preventSetCurrentData = true;
        }
      });
    };
    MultiSelect2.prototype.selectAll = function(state) {
      this.isSelectAll = true;
      this.selectAllItems(state);
    };
    MultiSelect2.prototype.getModuleName = function() {
      return "multiselect";
    };
    MultiSelect2.prototype.clear = function() {
      var _this = this;
      this.selectAll(false);
      if (this.value && this.value.length) {
        setTimeout(function() {
          _this.setProperties({ value: null }, true);
        }, 0);
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.render = function() {
      if (!isNullOrUndefined(this.value)) {
        this.value = this.value.slice();
      }
      this.setDynValue = this.initStatus = false;
      this.isSelectAll = false;
      this.selectAllEventEle = [];
      this.searchWrapper = this.createElement("span", { className: SEARCHBOX_WRAPPER + " " + (this.mode === "Box" ? BOX_ELEMENT : "") });
      this.viewWrapper = this.createElement("span", { className: DELIMITER_VIEW + " " + DELIMITER_WRAPPER, styles: "display:none;" });
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS2,
        styles: "display:none;"
      });
      this.componentWrapper = this.createElement("div", { className: ELEMENT_WRAPPER });
      this.overAllWrapper = this.createElement("div", { className: OVER_ALL_WRAPPER });
      if (this.mode === "CheckBox") {
        addClass([this.overAllWrapper], "e-checkbox");
      }
      if (Browser.isDevice) {
        this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
      }
      this.setWidth(this.width);
      this.overAllWrapper.appendChild(this.componentWrapper);
      this.popupWrapper = this.createElement("div", { id: this.element.id + "_popup", className: POPUP_WRAPPER });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (this.mode === "Delimiter" || this.mode === "CheckBox") {
        this.delimiterWrapper = this.createElement("span", { className: DELIMITER_WRAPPER, styles: "display:none" });
        this.componentWrapper.appendChild(this.delimiterWrapper);
      } else {
        this.chipCollectionWrapper = this.createElement("span", {
          className: CHIP_WRAPPER2,
          styles: "display:none"
        });
        if (this.mode === "Default") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_default"));
        } else if (this.mode === "Box") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_box"));
        }
        this.componentWrapper.appendChild(this.chipCollectionWrapper);
      }
      if (this.mode !== "Box") {
        this.componentWrapper.appendChild(this.viewWrapper);
      }
      this.componentWrapper.appendChild(this.searchWrapper);
      if (this.showClearButton && !Browser.isDevice) {
        this.componentWrapper.appendChild(this.overAllClear);
      } else {
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
      this.dropDownIcon();
      this.inputElement = this.createElement("input", {
        className: INPUT_ELEMENT,
        attrs: {
          spellcheck: "false",
          type: "text",
          autocomplete: "off",
          tabindex: "0",
          role: "combobox"
        }
      });
      if (this.mode === "Default" || this.mode === "Box") {
        this.inputElement.setAttribute("aria-describedby", this.chipCollectionWrapper.id);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, { "aria-expanded": "false", "aria-label": this.getModuleName() });
      }
      if (this.element.tagName !== this.getNgDirective()) {
        this.element.style.display = "none";
      }
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.overAllWrapper);
        this.searchWrapper.appendChild(this.inputElement);
      } else {
        this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
        this.searchWrapper.appendChild(this.inputElement);
        this.searchWrapper.appendChild(this.element);
        this.element.removeAttribute("tabindex");
      }
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      } else if (this.floatLabelType === "Never") {
        this.refreshPlaceHolder();
      }
      this.addValidInputClass();
      this.element.style.opacity = "";
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "class": HIDDEN_ELEMENT, "tabindex": "-1", "multiple": "" }
      });
      this.componentWrapper.appendChild(this.hiddenElement);
      this.validationAttribute(this.element, this.hiddenElement);
      if (this.mode !== "CheckBox") {
        this.hideOverAllClear();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.wireEvent();
      this.enable(this.enabled);
      this.enableRTL(this.enableRtl);
      if (this.enableVirtualization) {
        this.updateVirtualizationProperties(this.itemCount, this.allowFiltering, this.mode === "CheckBox");
      }
      this.listItemHeight = this.getListHeight();
      this.getSkeletonCount();
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
      this.checkInitialValue();
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.renderComplete();
    };
    MultiSelect2.prototype.getListHeight = function() {
      var listParent = this.createElement("div", {
        className: "e-dropdownbase"
      });
      var item = this.createElement("li", {
        className: "e-list-item"
      });
      var listParentHeight = formatUnit(this.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + "px";
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualListHeight = listParent.getBoundingClientRect().height;
      var listItemHeight = Math.ceil(item.getBoundingClientRect().height);
      listParent.remove();
      return listItemHeight;
    };
    MultiSelect2.prototype.removeDisabledItemsValue = function(value) {
      if (value) {
        var data = [];
        var dataIndex = 0;
        for (var index = 0; index < value.length; index++) {
          var indexValue = value[index];
          if (typeof indexValue === "object") {
            indexValue = JSON.parse(JSON.stringify(indexValue))[this.fields.value];
          }
          if (indexValue != null && !this.isDisabledItemByIndex(this.getIndexByValue(indexValue))) {
            data[dataIndex++] = value[index];
          }
        }
        this.value = data.length > 0 ? data : null;
      }
    };
    MultiSelect2.prototype.checkInitialValue = function() {
      var _this = this;
      if (this.fields.disabled) {
        this.removeDisabledItemsValue(this.value);
      }
      var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);
      if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === "SELECT" && this.element.options.length > 0) {
        var optionsElement = this.element.options;
        var valueCol = [];
        var textCol = "";
        for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
          var opt = optionsElement[index];
          if (!isNullOrUndefined(opt.getAttribute("selected"))) {
            if (opt.getAttribute("value")) {
              var value = this.allowObjectBinding ? this.getDataByValue(opt.getAttribute("value")) : opt.getAttribute("value");
              valueCol.push(value);
            } else {
              textCol += opt.text + this.delimiterChar;
            }
          }
        }
        if (valueCol.length > 0) {
          this.setProperties({ value: valueCol }, true);
        } else if (textCol !== "") {
          this.setProperties({ text: textCol }, true);
        }
        if (valueCol.length > 0 || textCol !== "") {
          this.refreshInputHight();
          this.refreshPlaceHolder();
        }
      }
      if (this.value && this.value.length || !isNullOrUndefined(this.text)) {
        if (!this.list) {
          _super.prototype.render.call(this);
        }
      }
      if (this.fields.disabled) {
        this.text = this.text && !this.isDisabledItemByIndex(this.getIndexByValue(this.getValueByText(this.text))) ? this.text : null;
      }
      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.initialTextUpdate();
      }
      if (this.value && this.value.length) {
        var listItems_2;
        if (this.enableVirtualization) {
          var fields = this.fields.value ? this.fields.value : "";
          var predicate = void 0;
          for (var i = 0; i < this.value.length; i++) {
            var value = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", this.value[i]) : this.value[i];
            if (i === 0) {
              predicate = new Predicate(fields, "equal", value);
            } else {
              predicate = predicate.or(fields, "equal", value);
            }
          }
          if (this.dataSource instanceof DataManager) {
            this.dataSource.executeQuery(new Query().where(predicate)).then(function(e) {
              if (e.result.length > 0) {
                listItems_2 = e.result;
                _this.initStatus = false;
                _this.initialValueUpdate(listItems_2, true);
                _this.initialUpdate();
                _this.initStatus = true;
              }
            });
          } else {
            listItems_2 = new DataManager(this.dataSource).executeLocal(new Query().where(predicate));
          }
        }
        if (!(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate(listItems_2);
          this.initialUpdate();
        } else {
          this.setInitialValue = function() {
            _this.initStatus = false;
            if (!_this.enableVirtualization || _this.enableVirtualization && !(_this.dataSource instanceof DataManager)) {
              _this.initialValueUpdate(listItems_2);
            }
            _this.initialUpdate();
            _this.setInitialValue = null;
            _this.initStatus = true;
          };
        }
        this.updateTempValue();
      } else {
        this.initialUpdate();
      }
      this.initStatus = true;
      this.checkAutoFocus();
      if (!isNullOrUndefined(this.text)) {
        this.element.setAttribute("data-initial-value", this.text);
      }
    };
    MultiSelect2.prototype.checkAutoFocus = function() {
      if (this.element.hasAttribute("autofocus")) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.updatevirtualizationList = function() {
      if (this.value && this.value.length) {
        var element = void 0;
        var listItems = this.getItems();
        for (var _i = 0, _a = this.value; _i < _a.length; _i++) {
          var value = _a[_i];
          var checkValue = this.allowObjectBinding ? getValue(this.fields.value ? this.fields.value : "", value) : value;
          element = this.getElementByValue(checkValue);
          if (element) {
            this.addListSelection(element);
          }
        }
        if (this.enableVirtualization && this.hideSelectedItem) {
          var visibleListElements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide):not(.e-virtual-list)");
          if (visibleListElements.length) {
            var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
            if (visibleListElements.length < actualCount + 2) {
              var query = this.getForQuery(this.value).clone();
              query = query.skip(this.viewPortInfo.startIndex);
              this.resetList(this.dataSource, this.fields, query);
            }
          }
        }
      }
    };
    MultiSelect2.prototype.setFloatLabelType = function() {
      removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      }
    };
    MultiSelect2.prototype.addValidInputClass = function() {
      if (!isNullOrUndefined(this.overAllWrapper)) {
        if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === "Always") {
          addClass([this.overAllWrapper], "e-valid-input");
        } else {
          removeClass([this.overAllWrapper], "e-valid-input");
        }
      }
    };
    MultiSelect2.prototype.dropDownIcon = function() {
      if (this.showDropDownIcon) {
        this.dropIcon = this.createElement("span", { className: dropdownIcon });
        this.componentWrapper.appendChild(this.dropIcon);
        addClass([this.componentWrapper], ["e-down-icon"]);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.dropIcon.parentElement.removeChild(this.dropIcon);
          removeClass([this.componentWrapper], ["e-down-icon"]);
        }
      }
    };
    MultiSelect2.prototype.initialUpdate = function() {
      if (this.mode !== "Box" && !(this.setDynValue && this.mode === "Default" && this.inputFocus)) {
        this.updateDelimView();
      }
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
      this.updateCssClass();
      this.updateHTMLAttribute();
      this.updateReadonly(this.readonly);
      this.refreshInputHight();
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.disableItem = function(item) {
      if (this.fields.disabled) {
        if (!this.list) {
          this.renderList();
        }
        var itemIndex = -1;
        if (this.liCollections && this.liCollections.length > 0 && this.listData && this.fields.disabled) {
          if (typeof item === "string") {
            itemIndex = this.getIndexByValue(item);
          } else if (typeof item === "object") {
            if (item instanceof HTMLLIElement) {
              for (var index = 0; index < this.liCollections.length; index++) {
                if (this.liCollections[index] === item) {
                  itemIndex = this.getIndexByValue(item.getAttribute("data-value"));
                  break;
                }
              }
            } else {
              var value = JSON.parse(JSON.stringify(item))[this.fields.value];
              for (var index = 0; index < this.listData.length; index++) {
                if (JSON.parse(JSON.stringify(this.listData[index]))[this.fields.value] === value) {
                  itemIndex = this.getIndexByValue(value);
                  break;
                }
              }
            }
          } else {
            itemIndex = item;
          }
          var isValidIndex = itemIndex < this.liCollections.length && itemIndex > -1;
          if (isValidIndex && !JSON.parse(JSON.stringify(this.listData[itemIndex]))[this.fields.disabled]) {
            var li = this.liCollections[itemIndex];
            if (li) {
              this.disableListItem(li);
              var parsedData = JSON.parse(JSON.stringify(this.listData[itemIndex]));
              parsedData[this.fields.disabled] = true;
              this.listData[itemIndex] = parsedData;
              if (li.classList.contains(dropDownBaseClasses.focus)) {
                this.removeFocus();
              }
              if (li.classList.contains(HIDE_LIST) || li.classList.contains(dropDownBaseClasses.selected)) {
                var oldValue = this.value;
                this.removeDisabledItemsValue(this.value);
                this.updateVal(this.value, oldValue, "value");
              }
            }
          }
        }
      }
    };
    MultiSelect2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.notify(destroy, {});
      this.unwireListEvents();
      this.unWireEvent();
      this.list = null;
      this.popupObj = null;
      this.mainList = null;
      this.mainData = null;
      this.filterParent = null;
      this.ulElement = null;
      this.mainListCollection = null;
      _super.prototype.destroy.call(this);
      var temp = ["readonly", "aria-disabled", "placeholder", "aria-label", "aria-expanded"];
      var length = temp.length;
      if (!isNullOrUndefined(this.inputElement)) {
        while (length > 0) {
          this.inputElement.removeAttribute(temp[length - 1]);
          length--;
        }
      }
      if (!isNullOrUndefined(this.element)) {
        this.element.removeAttribute("data-initial-value");
        this.element.style.display = "block";
      }
      if (this.overAllWrapper && this.overAllWrapper.parentElement) {
        if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
          remove(this.overAllWrapper);
        } else {
          this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
          remove(this.overAllWrapper);
        }
      }
      this.componentWrapper = null;
      this.overAllClear = null;
      this.overAllWrapper = null;
      this.hiddenElement = null;
      this.searchWrapper = null;
      this.viewWrapper = null;
      this.chipCollectionWrapper = null;
      this.targetInputElement = null;
      this.popupWrapper = null;
      this.inputElement = null;
      this.delimiterWrapper = null;
      this.popupObj = null;
      this.popupWrapper = null;
      this.liCollections = null;
      this.header = null;
      this.mainList = null;
      this.mainListCollection = null;
      this.footer = null;
      this.selectAllEventEle = null;
    };
    __decorate32([
      Complex({ text: null, value: null, iconCss: null, groupBy: null, disabled: null }, FieldSettings3)
    ], MultiSelect2.prototype, "fields", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "enablePersistence", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "groupTemplate", void 0);
    __decorate32([
      Property("No records found")
    ], MultiSelect2.prototype, "noRecordsTemplate", void 0);
    __decorate32([
      Property("Request failed")
    ], MultiSelect2.prototype, "actionFailureTemplate", void 0);
    __decorate32([
      Property("None")
    ], MultiSelect2.prototype, "sortOrder", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "enabled", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "enableHtmlSanitizer", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "enableVirtualization", void 0);
    __decorate32([
      Property([])
    ], MultiSelect2.prototype, "dataSource", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "query", void 0);
    __decorate32([
      Property("StartsWith")
    ], MultiSelect2.prototype, "filterType", void 0);
    __decorate32([
      Property(1e3)
    ], MultiSelect2.prototype, "zIndex", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "ignoreAccent", void 0);
    __decorate32([
      Property()
    ], MultiSelect2.prototype, "locale", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "enableGroupCheckBox", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "cssClass", void 0);
    __decorate32([
      Property("100%")
    ], MultiSelect2.prototype, "width", void 0);
    __decorate32([
      Property("300px")
    ], MultiSelect2.prototype, "popupHeight", void 0);
    __decorate32([
      Property("100%")
    ], MultiSelect2.prototype, "popupWidth", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "placeholder", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "filterBarPlaceholder", void 0);
    __decorate32([
      Property({})
    ], MultiSelect2.prototype, "htmlAttributes", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "valueTemplate", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "headerTemplate", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "footerTemplate", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "itemTemplate", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "allowFiltering", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "changeOnBlur", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "allowCustomValue", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "showClearButton", void 0);
    __decorate32([
      Property(1e3)
    ], MultiSelect2.prototype, "maximumSelectionLength", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "readonly", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "text", void 0);
    __decorate32([
      Property(null)
    ], MultiSelect2.prototype, "value", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "allowObjectBinding", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "hideSelectedItem", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "closePopupOnSelect", void 0);
    __decorate32([
      Property("Default")
    ], MultiSelect2.prototype, "mode", void 0);
    __decorate32([
      Property(",")
    ], MultiSelect2.prototype, "delimiterChar", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "ignoreCase", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "showDropDownIcon", void 0);
    __decorate32([
      Property("Never")
    ], MultiSelect2.prototype, "floatLabelType", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "showSelectAll", void 0);
    __decorate32([
      Property("Select All")
    ], MultiSelect2.prototype, "selectAllText", void 0);
    __decorate32([
      Property("Unselect All")
    ], MultiSelect2.prototype, "unSelectAllText", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "enableSelectionOrder", void 0);
    __decorate32([
      Property(true)
    ], MultiSelect2.prototype, "openOnClick", void 0);
    __decorate32([
      Property(false)
    ], MultiSelect2.prototype, "addTagOnBlur", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "change", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "removing", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "removed", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "beforeSelectAll", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "selectedAll", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "beforeOpen", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "open", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "close", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "blur", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "focus", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "chipSelection", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "filtering", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "tagging", void 0);
    __decorate32([
      Event()
    ], MultiSelect2.prototype, "customValueSelection", void 0);
    MultiSelect2 = __decorate32([
      NotifyPropertyChanges
    ], MultiSelect2);
    return MultiSelect2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection.js
var ICON5 = "e-icons";
var CHECKBOXFRAME3 = "e-frame";
var CHECK3 = "e-check";
var CHECKBOXWRAP3 = "e-checkbox-wrapper";
var INDETERMINATE2 = "e-stop";
var checkAllParent = "e-selectall-parent";
var searchBackIcon = "e-input-group-icon e-back-icon e-icons";
var filterBarClearIcon = "e-input-group-icon e-clear-icon e-icons";
var filterInput = "e-input-filter";
var filterParent = "e-filter-parent";
var mobileFilter = "e-ddl-device-filter";
var clearIcon = "e-clear-icon";
var popupFullScreen = "e-popup-full-page";
var device = "e-ddl-device";
var FOCUS5 = "e-input-focus";
var CheckBoxSelection = (
  /** @class */
  function() {
    function CheckBoxSelection2(parent) {
      this.activeLi = [];
      this.activeEle = [];
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    CheckBoxSelection2.prototype.getModuleName = function() {
      return "CheckBoxSelection";
    };
    CheckBoxSelection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("updatelist", this.listSelection, this);
      this.parent.on("listoption", this.listOption, this);
      this.parent.on("selectAll", this.setSelectAll, this);
      this.parent.on("checkSelectAll", this.checkSelectAll, this);
      this.parent.on("searchBox", this.setSearchBox, this);
      this.parent.on("blur", this.onBlurHandler, this);
      this.parent.on("targetElement", this.targetElement, this);
      this.parent.on("deviceSearchBox", this.setDeviceSearchBox, this);
      this.parent.on("inputFocus", this.getFocus, this);
      this.parent.on("reOrder", this.setReorder, this);
      this.parent.on("activeList", this.getActiveList, this);
      this.parent.on("selectAllText", this.setLocale, this);
      this.parent.on("filterBarPlaceholder", this.setPlaceholder, this);
      EventHandler.add(document, "mousedown", this.onDocumentClick, this);
      this.parent.on("addItem", this.checboxCreate, this);
      this.parent.on("popupFullScreen", this.setPopupFullScreen, this);
    };
    CheckBoxSelection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("updatelist", this.listSelection);
      this.parent.off("listoption", this.listOption);
      this.parent.off("selectAll", this.setSelectAll);
      this.parent.off("checkSelectAll", this.checkSelectAll);
      this.parent.off("searchBox", this.setSearchBox);
      this.parent.off("blur", this.onBlurHandler);
      this.parent.off("targetElement", this.targetElement);
      this.parent.off("deviceSearchBox", this.setDeviceSearchBox);
      this.parent.off("inputFocus", this.getFocus);
      this.parent.off("reOrder", this.setReorder);
      this.parent.off("activeList", this.getActiveList);
      this.parent.off("selectAllText", this.setLocale);
      this.parent.off("filterBarPlaceholder", this.setPlaceholder);
      this.parent.off("addItem", this.checboxCreate);
      this.parent.off("popupFullScreen", this.setPopupFullScreen);
    };
    CheckBoxSelection2.prototype.listOption = function(args) {
      var _this = this;
      if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
        };
      } else {
        var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
          itemCreated_1.apply(_this, [e]);
        };
      }
    };
    CheckBoxSelection2.prototype.setPlaceholder = function(props) {
      Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);
    };
    CheckBoxSelection2.prototype.checboxCreate = function(e) {
      var item;
      if (!isNullOrUndefined(e.item)) {
        item = e.item;
      } else {
        item = e;
      }
      if (this.parent.enableGroupCheckBox || item.className !== "e-list-group-item " && item.className !== "e-list-group-item") {
        var checkboxEle = createCheckBox(this.parent.createElement, true);
        var icon = select("div." + ICON5, item);
        item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        select("." + CHECKBOXFRAME3, checkboxEle);
        if (this.parent.enableGroupCheckBox) {
          this.parent.popupWrapper.classList.add("e-multiselect-group");
        }
        return item;
      } else {
        return item;
      }
    };
    CheckBoxSelection2.prototype.setSelectAll = function() {
      if (this.parent.showSelectAll) {
        if (isNullOrUndefined(this.checkAllParent)) {
          this.checkAllParent = this.parent.createElement("div", {
            className: checkAllParent
          });
          this.selectAllSpan = this.parent.createElement("span", {
            className: "e-all-text"
          });
          this.selectAllSpan.textContent = "";
          this.checkAllParent.appendChild(this.selectAllSpan);
          this.setLocale();
          this.checboxCreate(this.checkAllParent);
          if (this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              append([this.checkAllParent], this.parent.filterParent);
            } else {
              append([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          if (!this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
            } else {
              prepend([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          EventHandler.add(this.checkAllParent, "mousedown", this.clickHandler, this);
        }
        if (this.parent.list.classList.contains("e-nodata") || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.enableVirtualization && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {
          this.checkAllParent.style.display = "none";
        } else {
          this.checkAllParent.style.display = "block";
        }
        this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      } else if (!isNullOrUndefined(this.checkAllParent)) {
        this.checkAllParent.parentElement.removeChild(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    CheckBoxSelection2.prototype.destroy = function() {
      this.removeEventListener();
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.checkAllParent = null;
      this.clearIconElement = null;
      this.filterInput = null;
      this.filterInputObj = null;
      this.checkWrapper = null;
      this.selectAllSpan = null;
    };
    CheckBoxSelection2.prototype.listSelection = function(args) {
      var target;
      if (!isNullOrUndefined(args.e)) {
        var frameElm = args.li.querySelector(".e-checkbox-wrapper .e-frame");
        target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains("e-frame") && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector(".e-checkbox-wrapper").childNodes[1] : args.li.querySelector(".e-checkbox-wrapper").childNodes[1];
      } else {
        var checkboxWrapper = args.li.querySelector(".e-checkbox-wrapper");
        target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];
      }
      if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
        target = args.li.firstElementChild.childNodes[1];
      }
      if (!isNullOrUndefined(target)) {
        this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      }
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        var selectAll2 = false;
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK3), args.li, args.e, selectAll2);
      }
    };
    CheckBoxSelection2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e, selectAll2) {
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true, selectAll2);
    };
    CheckBoxSelection2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget.classList.contains(this.checkAllParent.className) || e.currentTarget.classList.value === this.checkAllParent.className) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.currentTarget;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      var selectAll2 = true;
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK3), null, e, selectAll2);
      }
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.changeState = function(wrapper, state, e, isPrevent, selectAll2) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME3)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK3)) {
        frameSpan.classList.remove(INDETERMINATE2);
        frameSpan.classList.add(CHECK3);
        ariaState = "true";
        if (selectAll2) {
          this.parent.selectAllItems(true, e);
          this.setLocale(true);
        }
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK3) || frameSpan.classList.contains(INDETERMINATE2))) {
        removeClass([frameSpan], [CHECK3, INDETERMINATE2]);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      } else if (state === "indeterminate" && !frameSpan.classList.contains(INDETERMINATE2)) {
        removeClass([frameSpan], [CHECK3]);
        frameSpan.classList.add(INDETERMINATE2);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      }
    };
    CheckBoxSelection2.prototype.setSearchBox = function(args) {
      if (isNullOrUndefined(this.parent.filterParent)) {
        this.parent.filterParent = this.parent.createElement("span", {
          className: filterParent
        });
        this.filterInput = this.parent.createElement("input", {
          attrs: { type: "text" },
          className: filterInput
        });
        this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
          this.parent.mobFilter = false;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
          properties: { placeholder: this.parent.filterBarPlaceholder }
        }, this.parent.createElement);
        if (!isNullOrUndefined(this.parent.cssClass)) {
          if (this.parent.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.parent.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], this.parent.filterParent);
        prepend([this.parent.filterParent], args.popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "aria-label": "multiselect",
          "aria-expanded": "true",
          "aria-controls": args.popupElement.id
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "mousedown", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        EventHandler.add(this.filterInput, "input", this.parent.onInput, this.parent);
        EventHandler.add(this.filterInput, "keyup", this.parent.keyUp, this.parent);
        EventHandler.add(this.filterInput, "keydown", this.parent.onKeyDown, this.parent);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.parent.pasteHandler, this.parent);
        this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
        return this.filterInputObj;
      }
    };
    CheckBoxSelection2.prototype.clickOnBackIcon = function(e) {
      this.parent.hidePopup();
      removeClass([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.inputElement.focus();
    };
    CheckBoxSelection2.prototype.clearText = function(e) {
      this.parent.targetInputElement.value = "";
      if (this.parent.allowFiltering && this.parent.targetInputElement.value === "") {
        this.parent.search(null);
      }
      this.parent.refreshListItems(null);
      this.parent.refreshPopup();
      this.clearIconElement.style.visibility = "hidden";
      this.filterInput.focus();
      this.setReorder(e);
      this.boundPreventListSelection = this.preventListSelection.bind(this);
      this.parent.popupWrapper.addEventListener("mouseup", this.boundPreventListSelection, true);
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.preventListSelection = function(e) {
      e.stopPropagation();
      this.parent.popupWrapper.removeEventListener("mouseup", this.boundPreventListSelection, true);
      this.boundPreventListSelection = null;
    };
    CheckBoxSelection2.prototype.setDeviceSearchBox = function() {
      this.parent.popupObj.element.classList.add(device);
      this.parent.popupObj.element.classList.add(mobileFilter);
      this.parent.popupObj.position = { X: 0, Y: 0 };
      this.parent.popupObj.dataBind();
      this.setSearchBoxPosition();
      this.backIconElement = this.filterInputObj.container.querySelector(".e-back-icon");
      this.clearIconElement = this.filterInputObj.container.querySelector("." + clearIcon);
      this.clearIconElement.style.visibility = "hidden";
      EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this);
      EventHandler.add(this.clearIconElement, "click", this.clearText, this);
    };
    CheckBoxSelection2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      var selectAllHeight = 0;
      if (this.checkAllParent) {
        selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      }
      this.parent.popupObj.element.style.maxHeight = "100%";
      this.parent.popupObj.element.style.width = "100%";
      this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    CheckBoxSelection2.prototype.setPopupFullScreen = function() {
      if (this.parent && this.parent.popupObj) {
        attributes(this.parent.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
        addClass([document.body, this.parent.popupObj.element], popupFullScreen);
        this.parent.popupObj.element.style.maxHeight = "100%";
        this.parent.popupObj.element.style.width = "100%";
      }
    };
    CheckBoxSelection2.prototype.targetElement = function() {
      if (!isNullOrUndefined(this.clearIconElement)) {
        this.parent.targetInputElement = this.filterInput;
        this.clearIconElement.style.visibility = this.parent.targetInputElement.value === "" ? "hidden" : "visible";
      }
      return this.parent.targetInputElement.value;
    };
    CheckBoxSelection2.prototype.onBlurHandler = function(e) {
      if (!this.parent.element.classList.contains("e-listbox")) {
        var target = void 0;
        if (this.parent.keyAction) {
          return;
        }
        if (Browser.isIE) {
          target = !isNullOrUndefined(e) && e.target;
        }
        if (!Browser.isIE) {
          target = !isNullOrUndefined(e) && e.relatedTarget;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {
          this.filterInput.focus();
          return;
        }
        if (this.parent.scrollFocusStatus && this.filterInput) {
          e.preventDefault();
          this.filterInput.focus();
          this.parent.scrollFocusStatus = false;
          return;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
          this.parent.dispatchEvent(this.parent.hiddenElement, "change");
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.overAllWrapper.classList.remove(FOCUS5);
          this.parent.trigger("blur");
          this.parent.focused = true;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close") && !Browser.isDevice) {
          this.parent.hidePopup();
        }
      }
    };
    CheckBoxSelection2.prototype.onDocumentClick = function(e) {
      if (this.parent.getLocaleName() !== "listbox") {
        var target = e.target;
        if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) {
          if (!(this.filterInput && this.filterInput.value !== "")) {
            e.preventDefault();
          }
        }
        if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {
          if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
            this.parent.inputFocus = false;
            this.parent.scrollFocusStatus = false;
            this.parent.hidePopup();
            this.parent.onBlurHandler(e, true);
            this.parent.focused = true;
          }
        } else {
          this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.filterInput;
        }
        if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains("e-input-focus") && !this.parent.isPopupOpen()) {
          if (Browser.isIE) {
            this.parent.onBlurHandler();
          } else {
            this.parent.onBlurHandler(e);
          }
        }
        if (this.filterInput === target) {
          this.filterInput.focus();
        }
      }
    };
    CheckBoxSelection2.prototype.getFocus = function(e) {
      this.parent.overAllWrapper.classList.remove(FOCUS5);
      if (this.parent.keyAction && e.value !== "clear" && e.value !== "focus") {
        this.parent.keyAction = false;
        return;
      }
      if (e.value === "focus") {
        this.filterInput.focus();
        this.parent.removeFocus();
        EventHandler.remove(this.parent.list, "keydown", this.parent.onKeyDown);
      }
      if (e.value === "clear") {
        this.filterInput.value = "";
        this.clearIconElement.style.visibility = "hidden";
      }
    };
    CheckBoxSelection2.prototype.checkSelectAll = function(e) {
      if (e.value === "check") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale(true);
      }
      if (e.value === "uncheck") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
      if (e.value === "indeterminate") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
    };
    CheckBoxSelection2.prototype.setLocale = function(unSelect) {
      if (this.parent.selectAllText !== "Select All" || this.parent.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        var l10nLocale = { selectAllText: "Select All", unSelectAllText: "Unselect All" };
        var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);
        if (l10n.getConstant("selectAllText") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.parent.locale);
        }
        this.selectAllSpan.textContent = unSelect ? l10n.getConstant("unSelectAllText") : l10n.getConstant("selectAllText");
      }
    };
    CheckBoxSelection2.prototype.getActiveList = function(args) {
      if (args.li.classList.contains("e-active")) {
        this.activeLi.push(args.li.cloneNode(true));
      } else {
        this.activeLi.splice(args.index, 1);
      }
    };
    CheckBoxSelection2.prototype.setReorder = function(args) {
      if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {
        var activeLiCount = this.parent.ulElement.querySelectorAll("li.e-active").length;
        var remLi = void 0;
        var ulEle_1 = this.parent.createElement("ul", {
          className: "e-list-parent e-ul e-reorder"
        });
        if (activeLiCount > 0) {
          var activeListItems = this.parent.ulElement.querySelectorAll("li.e-active");
          activeListItems.forEach(function(item) {
            ulEle_1.appendChild(item);
          });
          remLi = this.parent.ulElement.querySelectorAll("li.e-active");
          addClass(remLi, "e-reorder-hide");
          if (this.parent.enableVirtualization) {
            var virtualUlElement = this.parent.list.querySelector(".e-virtual-ddl-content");
            prepend([ulEle_1], virtualUlElement);
          } else {
            prepend([ulEle_1], this.parent.list);
          }
        }
        this.parent.focusAtFirstListItem();
      }
    };
    return CheckBoxSelection2;
  }()
);

// node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box.js
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate33 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionSettings = (
  /** @class */
  function(_super) {
    __extends36(SelectionSettings2, _super);
    function SelectionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate33([
      Property("Multiple")
    ], SelectionSettings2.prototype, "mode", void 0);
    __decorate33([
      Property(false)
    ], SelectionSettings2.prototype, "showCheckbox", void 0);
    __decorate33([
      Property(false)
    ], SelectionSettings2.prototype, "showSelectAll", void 0);
    __decorate33([
      Property("Left")
    ], SelectionSettings2.prototype, "checkboxPosition", void 0);
    return SelectionSettings2;
  }(ChildProperty)
);
var ToolbarSettings = (
  /** @class */
  function(_super) {
    __extends36(ToolbarSettings2, _super);
    function ToolbarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate33([
      Property([])
    ], ToolbarSettings2.prototype, "items", void 0);
    __decorate33([
      Property("Right")
    ], ToolbarSettings2.prototype, "position", void 0);
    return ToolbarSettings2;
  }(ChildProperty)
);
var ListBox = (
  /** @class */
  function(_super) {
    __extends36(ListBox2, _super);
    function ListBox2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isValidKey = false;
      _this.isDataSourceUpdate = false;
      _this.keyDownStatus = false;
      return _this;
    }
    ListBox_1 = ListBox2;
    ListBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.render = function() {
      if (this.isAngular && this.allowFiltering) {
        var originalElement = this.element;
        var clonedElement = originalElement.cloneNode(true);
        originalElement.parentNode.replaceChild(clonedElement, originalElement);
        this.element = clonedElement;
        setValue("ej2_instances", [this], this.element);
      }
      this.inputString = "";
      this.initLoad = true;
      this.isCustomFiltering = false;
      this.initialSelectedOptions = this.value;
      this.inputFormName = this.element.getAttribute("name");
      _super.prototype.render.call(this);
      this.setEnabled();
      this.renderComplete();
    };
    ListBox2.prototype.initWrapper = function() {
      var hiddenSelect = this.createElement("select", { className: "e-hidden-select", attrs: { "multiple": "" } });
      hiddenSelect.style.visibility = "hidden";
      this.list.classList.add("e-listbox-wrapper");
      this.list.querySelector(".e-list-parent").setAttribute("role", "presentation");
      var groupHdrs = this.list.querySelectorAll(".e-list-group-item");
      for (var i = 0; i < groupHdrs.length; i++) {
        groupHdrs[i].removeAttribute("tabindex");
        groupHdrs[i].setAttribute("role", "option");
      }
      if (this.itemTemplate) {
        this.list.classList.add("e-list-template");
      }
      this.list.classList.add("e-wrapper");
      this.list.classList.add("e-lib");
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.setAttribute("tabindex", "0");
        if (this.initLoad) {
          this.element.appendChild(this.list);
        }
      } else {
        if (this.initLoad && this.element.parentElement) {
          this.element.parentElement.insertBefore(this.list, this.element);
        }
        this.list.insertBefore(this.element, this.list.firstChild);
        this.element.style.display = "none";
      }
      this.list.insertBefore(hiddenSelect, this.list.firstChild);
      if (this.list.getElementsByClassName("e-list-item")[0]) {
        this.list.getElementsByClassName("e-list-item")[0].classList.remove(dropDownBaseClasses.focus);
      }
      if (this.itemTemplate) {
        this.renderReactTemplates();
      }
      removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);
      this.validationAttribute(this.element, hiddenSelect);
      this.list.setAttribute("role", "listbox");
      attributes(this.list, { "role": "listbox", "aria-label": "listbox", "aria-multiselectable": this.selectionSettings.mode === "Multiple" ? "true" : "false" });
      this.updateSelectionSettings();
      this.resizeHandler();
    };
    ListBox2.prototype.updateSelectionSettings = function() {
      if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
        var l10nSelect = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
        this.showSelectAll = true;
        this.selectAllText = l10nSelect.getConstant("selectAllText");
        this.unSelectAllText = l10nSelect.getConstant("unSelectAllText");
        this.popupWrapper = this.list;
        this.checkBoxSelectionModule.checkAllParent = null;
        this.notify("selectAll", {});
      }
    };
    ListBox2.prototype.initDraggable = function() {
      var _this = this;
      if (this.ulElement) {
        this.ulElement.id = this.element.id + "_parent";
      }
      if (this.allowDragAndDrop) {
        new Sortable(this.ulElement, {
          scope: this.scope,
          itemClass: "e-list-item",
          dragStart: this.triggerDragStart.bind(this),
          drag: this.triggerDrag.bind(this),
          beforeDrop: this.beforeDragEnd.bind(this),
          drop: this.dragEnd.bind(this),
          placeHolder: function() {
            return _this.createElement("span", { className: "e-placeholder" });
          },
          helper: function(e) {
            var wrapper = _this.list.cloneNode();
            var ele = e.sender.cloneNode(true);
            wrapper.appendChild(ele);
            var refEle = _this.getItems()[0];
            wrapper.style.width = refEle.offsetWidth + "px";
            wrapper.style.height = refEle.offsetHeight + "px";
            if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {
              ele.appendChild(_this.createElement("span", {
                className: "e-list-badge",
                innerHTML: _this.value.length + ""
              }));
            }
            wrapper.style.zIndex = getZindexPartial(_this.element) + "";
            return wrapper;
          }
        });
      }
    };
    ListBox2.prototype.updateActionCompleteData = function(li, item, index) {
      this.jsonData.splice(index === null ? this.jsonData.length : index, 0, item);
    };
    ListBox2.prototype.initToolbar = function() {
      var pos = this.toolbarSettings.position;
      var prevScope = this.element.getAttribute("data-value");
      this.toolbarSettings.items = isNullOrUndefined(this.toolbarSettings.items) ? [] : this.toolbarSettings.items;
      if (this.toolbarSettings.items.length) {
        var toolElem = this.createElement("div", { className: "e-listbox-tool", attrs: { "role": "toolbar" } });
        var wrapper = this.createElement("div", {
          className: "e-listboxtool-wrapper e-lib e-" + pos.toLowerCase()
        });
        this.list.parentElement.insertBefore(wrapper, this.list);
        wrapper.appendChild(pos === "Right" ? this.list : toolElem);
        wrapper.appendChild(pos === "Right" ? toolElem : this.list);
        this.createButtons(toolElem);
        if (!this.element.id) {
          this.element.id = getUniqueID("e-" + this.getModuleName());
        }
        if (this.scope) {
          document.querySelector(this.scope).setAttribute("data-value", this.element.id);
        } else {
          this.updateToolBarState();
        }
      }
      var scope = this.element.getAttribute("data-value");
      if (prevScope && scope && prevScope !== scope) {
        this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      } else if (scope) {
        this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.createButtons = function(toolElem) {
      var _this = this;
      var btn;
      var ele;
      var title;
      var l10n = new L10n(this.getModuleName(), {
        moveUp: "Move Up",
        moveDown: "Move Down",
        moveTo: "Move To",
        moveFrom: "Move From",
        moveAllTo: "Move All To",
        moveAllFrom: "Move All From"
      }, this.locale);
      this.toolbarSettings.items.forEach(function(value) {
        title = l10n.getConstant(value);
        ele = _this.createElement("button", {
          attrs: {
            "type": "button",
            "data-value": value,
            "title": title,
            "aria-label": title
          }
        });
        toolElem.appendChild(ele);
        btn = new Button({ iconCss: "e-icons e-" + value.toLowerCase() }, ele);
        btn.createElement = _this.createElement;
      });
    };
    ListBox2.prototype.validationAttribute = function(input2, hiddenSelect) {
      if (this.inputFormName) {
        input2.setAttribute("name", this.inputFormName);
      }
      _super.prototype.validationAttribute.call(this, input2, hiddenSelect);
      hiddenSelect.required = input2.required;
      input2.required = false;
    };
    ListBox2.prototype.setHeight = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      ele.style.height = formatUnit(this.height);
      if (this.allowFiltering && this.height.toString().indexOf("%") < 0) {
        addClass([this.list], "e-filter-list");
      } else {
        removeClass([this.list], "e-filter-list");
      }
    };
    ListBox2.prototype.setCssClass = function() {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.cssClass) {
        addClass([wrap], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        addClass([this.list], "e-rtl");
      }
    };
    ListBox2.prototype.setEnable = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.enabled) {
        removeClass([ele], cssClass.disabled);
      } else {
        addClass([ele], cssClass.disabled);
      }
    };
    ListBox2.prototype.showSpinner = function() {
      if (!this.spinner) {
        this.spinner = this.createElement("div", { className: "e-listbox-wrapper" });
      }
      this.spinner.style.height = formatUnit(this.height);
      if (this.element.parentElement) {
        this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
      }
      createSpinner({ target: this.spinner }, this.createElement);
      showSpinner(this.spinner);
    };
    ListBox2.prototype.hideSpinner = function() {
      if (this.spinner.querySelector(".e-spinner-pane")) {
        hideSpinner(this.spinner);
      }
      if (this.spinner.parentElement) {
        detach(this.spinner);
      }
    };
    ListBox2.prototype.onInput = function() {
      this.isDataSourceUpdate = false;
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      this.refreshClearIcon();
    };
    ListBox2.prototype.clearText = function() {
      this.filterInput.value = "";
      this.refreshClearIcon();
      var event2 = document.createEvent("KeyboardEvent");
      this.isValidKey = true;
      this.KeyUp(event2);
    };
    ListBox2.prototype.refreshClearIcon = function() {
      if (this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
    };
    ListBox2.prototype.onActionComplete = function(ulElement, list, e) {
      var searchEle;
      var filterElem;
      var txtLength;
      if (this.allowFiltering && this.list.getElementsByClassName("e-filter-parent")[0]) {
        searchEle = this.list.getElementsByClassName("e-filter-parent")[0].cloneNode(true);
      }
      if (list.length === 0) {
        var noRecElem = ulElement.childNodes[0];
        if (noRecElem) {
          ulElement.removeChild(noRecElem);
        }
      }
      if (this.allowFiltering) {
        filterElem = this.list.getElementsByClassName("e-input-filter")[0];
        if (filterElem) {
          txtLength = filterElem.selectionStart;
        }
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.allowFiltering && !isNullOrUndefined(searchEle)) {
        this.list.insertBefore(searchEle, this.list.firstElementChild);
        this.filterParent = this.list.getElementsByClassName("e-filter-parent")[0];
        this.filterWireEvents(searchEle);
        var inputSearch = searchEle.querySelector(".e-input-filter");
        if (inputSearch) {
          inputSearch.addEventListener("focus", function() {
            if (!searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.add("e-input-focus");
            }
          });
          inputSearch.addEventListener("blur", function() {
            if (searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.remove("e-input-focus");
            }
          });
        }
      }
      this.initWrapper();
      this.setSelection(this.value, true, false, !this.isRendered);
      this.initDraggable();
      this.mainList = this.ulElement;
      if (this.initLoad) {
        this.jsonData = [];
        extend(this.jsonData, list, []);
        this.initToolbarAndStyles();
        this.wireEvents();
        if (this.showCheckbox) {
          this.setCheckboxPosition();
        }
        if (this.allowFiltering) {
          this.setFiltering();
        }
      } else {
        if (this.isDataSourceUpdate) {
          this.jsonData = [];
          extend(this.jsonData, list, []);
          this.isDataSourceUpdate = false;
        }
        if (this.allowFiltering) {
          filterElem = this.list.getElementsByClassName("e-input-filter")[0];
          filterElem.selectionStart = txtLength;
          filterElem.selectionEnd = txtLength;
          filterElem.focus();
        }
      }
      if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf("#") > -1 && !isNullOrUndefined(e)) {
        var scope = this.scope.replace("#", "");
        var scopedLB = getComponent(document.getElementById(scope), this.getModuleName());
        scopedLB.initToolbar();
      }
      this.initLoad = false;
    };
    ListBox2.prototype.initToolbarAndStyles = function() {
      this.initToolbar();
      this.setCssClass();
      this.setEnable();
      this.setHeight();
    };
    ListBox2.prototype.triggerDragStart = function(args) {
      var _this = this;
      var badge;
      args = extend(this.getDragArgs(args), { dragSelected: true });
      if (Browser.isIos) {
        this.list.style.overflow = "hidden";
      }
      this.trigger("dragStart", args, function(dragEventArgs) {
        _this.allowDragAll = dragEventArgs.dragSelected;
        if (!_this.allowDragAll) {
          badge = _this.ulElement.getElementsByClassName("e-list-badge")[0];
          if (badge) {
            detach(badge);
          }
        }
      });
    };
    ListBox2.prototype.triggerDrag = function(args) {
      var _this = this;
      var scrollParent;
      var boundRect;
      var scrollMoved = 36;
      var scrollHeight = 10;
      if (this.itemTemplate && args.target) {
        if (args.target && args.target.closest(".e-list-item")) {
          scrollHeight = args.target.closest(".e-list-item").scrollHeight;
        } else {
          var listItem = args.element.querySelector(".e-list-item");
          if (listItem) {
            scrollHeight = listItem.scrollHeight;
          }
        }
      }
      var event2 = args.event;
      var wrapper;
      this.stopTimer();
      if (args.target && (args.target.classList.contains("e-listbox-wrapper") || args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item"))) {
        if (args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item")) {
          wrapper = args.target.closest(".e-listbox-wrapper");
        } else {
          wrapper = args.target;
        }
        if (this.allowFiltering) {
          scrollParent = wrapper.querySelector(".e-list-parent");
        } else {
          scrollParent = wrapper;
        }
        if (scrollParent) {
          boundRect = scrollParent.getBoundingClientRect();
          if (boundRect.y + scrollParent.offsetHeight - (event2.clientY + scrollMoved) < 1) {
            this.timer = window.setInterval(function() {
              _this.setScrollDown(scrollParent, scrollHeight, true);
            }, 70);
          } else if (event2.clientY - scrollMoved - boundRect.y < 1) {
            this.timer = window.setInterval(function() {
              _this.setScrollDown(scrollParent, scrollHeight, false);
            }, 70);
          }
        }
      }
      if (args.target === null) {
        return;
      }
      this.trigger("drag", this.getDragArgs(args));
    };
    ListBox2.prototype.setScrollDown = function(scrollElem, scrollPixel, isScrollDown) {
      if (isScrollDown) {
        scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
      } else {
        scrollElem.scrollTop = scrollElem.scrollTop - scrollPixel;
      }
    };
    ListBox2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    ListBox2.prototype.beforeDragEnd = function(args) {
      this.stopTimer();
      var items = [];
      this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      if (this.value.indexOf(this.dragValue) > -1) {
        args.items = this.getDataByValues(this.value);
      } else {
        args.items = this.getDataByValues([this.dragValue]);
      }
      extend(items, args.items);
      this.trigger("beforeDrop", args);
      if (args.items !== items) {
        this.customDraggedItem = args.items;
      }
    };
    ListBox2.prototype.dragEnd = function(args) {
      var _this = this;
      var listData;
      var liColl;
      var jsonData;
      var droppedData;
      var selectedOptions;
      var sortedData;
      var dropValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      var listObj = this.getComponent(args.droppedElement);
      var getArgs = this.getDragArgs({ target: args.droppedElement }, true);
      var sourceArgs = { previousData: this.dataSource };
      var destArgs = { previousData: listObj.dataSource };
      var dragArgs = extend({}, getArgs, {
        target: args.target,
        source: { previousData: this.dataSource },
        previousIndex: args.previousIndex,
        currentIndex: args.currentIndex
      });
      if (listObj !== this) {
        var sourceArgs1 = extend(sourceArgs, { currentData: this.listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });
      }
      if (Browser.isIos) {
        this.list.style.overflow = "";
      }
      var targetListObj = this.getComponent(args.target);
      if (targetListObj && targetListObj.listData.length === 0) {
        var noRecElem = targetListObj.ulElement.childNodes[0];
        if (noRecElem) {
          targetListObj.ulElement.removeChild(noRecElem);
        }
      }
      if (listObj === this) {
        var ul_1 = this.ulElement;
        listData = [].slice.call(this.listData);
        liColl = [].slice.call(this.liCollections);
        jsonData = [].slice.call(this.jsonData);
        sortedData = [].slice.call(this.sortedData);
        var toSortIdx_1 = args.currentIndex;
        var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);
        var rIdx = listData.indexOf(this.getDataByValue(dropValue));
        var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
        var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
        listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);
        sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);
        jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);
        liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);
        if (this.allowDragAll) {
          selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
          if (!isNullOrUndefined(this.customDraggedItem)) {
            selectedOptions = [];
            this.customDraggedItem.forEach(function(item) {
              selectedOptions.push(getValue(_this.fields.value, item));
            });
          }
          selectedOptions.forEach(function(value) {
            if (value !== dropValue) {
              var idx = listData.indexOf(_this.getDataByValue(value));
              var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));
              var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));
              if (idx > toIdx_1) {
                toIdx_1++;
              }
              jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);
              listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);
              sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);
              liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);
              ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName("e-placeholder")[0]);
            }
          });
        }
        this.listData = listData;
        this.jsonData = jsonData;
        this.sortedData = sortedData;
        this.liCollections = liColl;
      } else {
        var li_1;
        var fLiColl_1 = [].slice.call(this.liCollections);
        var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
        var ul_2 = listObj.ulElement;
        listData = [].slice.call(listObj.listData);
        liColl = [].slice.call(listObj.liCollections);
        jsonData = [].slice.call(listObj.jsonData);
        sortedData = [].slice.call(listObj.sortedData);
        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
        if (!isNullOrUndefined(this.customDraggedItem)) {
          selectedOptions = [];
          this.customDraggedItem.forEach(function(item) {
            selectedOptions.push(getValue(_this.fields.value, item));
          });
        }
        var fListData_1 = [].slice.call(this.listData);
        var fSortData_1 = [].slice.call(this.sortedData);
        selectedOptions.forEach(function(value) {
          droppedData = _this.getDataByValue(value);
          var srcIdx = _this.listData.indexOf(droppedData);
          var jsonSrcIdx = _this.jsonData.indexOf(droppedData);
          var sortIdx = _this.sortedData.indexOf(droppedData);
          fListData_1.splice(srcIdx, 1);
          _this.jsonData.splice(jsonSrcIdx, 1);
          fSortData_1.splice(sortIdx, 1);
          _this.listData = fListData_1;
          _this.sortedData = fSortData_1;
          var destIdx = value === dropValue ? args.currentIndex : currIdx_1;
          listData.splice(destIdx, 0, droppedData);
          jsonData.splice(destIdx, 0, droppedData);
          sortedData.splice(destIdx, 0, droppedData);
          liColl.splice(destIdx, 0, fLiColl_1.splice(srcIdx, 1)[0]);
          if (!value) {
            var liCollElem_1 = _this.getItems();
            for (var i2 = 0; i2 < liCollElem_1.length; i2++) {
              if (liCollElem_1[i2].getAttribute("data-value") === null && liCollElem_1[i2].classList.contains("e-list-item")) {
                li_1 = liCollElem_1[i2];
                break;
              }
            }
          } else {
            li_1 = _this.getItems()[_this.getIndexByValue(value)];
          }
          if (!li_1) {
            li_1 = args.helper;
          }
          _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);
          ul_2.insertBefore(li_1, ul_2.getElementsByClassName("e-placeholder")[0]);
          currIdx_1++;
        });
        if (this.fields.groupBy) {
          var sourceElem = this.renderItems(this.listData, this.fields);
          this.updateListItems(sourceElem, this.ulElement);
          this.setSelection();
        }
        if (listObj.sortOrder !== "None" || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {
          var sortable = getComponent(ul_2, "sortable");
          var sourceElem = listObj.renderItems(listData, listObj.fields);
          listObj.updateListItems(sourceElem, ul_2);
          this.setSelection();
          if (sortable.placeHolderElement) {
            ul_2.appendChild(sortable.placeHolderElement);
          }
          ul_2.appendChild(args.helper);
          listObj.setSelection();
        }
        this.liCollections = fLiColl_1;
        listObj.liCollections = liColl;
        listObj.jsonData = extend([], [], jsonData, false);
        listObj.listData = extend([], [], listData, false);
        listObj.sortedData = extend([], [], sortedData, false);
        if (this.listData.length === 0) {
          this.l10nUpdate();
        }
      }
      if (this === listObj) {
        var sourceArgs1 = extend(sourceArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1 });
      } else {
        var dragArgs1 = extend(destArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { destination: dragArgs1 });
      }
      if (!isNullOrUndefined(this.customDraggedItem)) {
        dragArgs.items = this.customDraggedItem;
      }
      this.trigger("drop", dragArgs);
      var liCollElem = dragArgs.elements;
      if (liCollElem.length) {
        for (var i = 0; i < liCollElem.length; i++) {
          liCollElem[i].classList.remove("e-grabbed");
        }
      }
    };
    ListBox2.prototype.updateListItems = function(sourceElem, destElem) {
      var i = 0;
      destElem.innerHTML = "";
      while (i < sourceElem.childNodes.length) {
        destElem.appendChild(sourceElem.childNodes[i]);
      }
    };
    ListBox2.prototype.removeSelected = function(listObj, elems) {
      if (listObj.selectionSettings.showCheckbox) {
        elems.forEach(function(ele) {
          ele.getElementsByClassName("e-frame")[0].classList.remove("e-check");
        });
      } else {
        removeClass(elems, cssClass.selected);
      }
    };
    ListBox2.prototype.getCurIdx = function(listObj, idx) {
      if (listObj.fields.groupBy) {
        idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function(ele) {
          return ele.classList.contains(cssClass.group);
        }).length;
      }
      return idx;
    };
    ListBox2.prototype.getComponent = function(li) {
      var listObj;
      var ele = this.element.tagName === "EJS-LISTBOX" ? closest(li, ".e-listbox") : closest(li, ".e-listbox-wrapper") && closest(li, ".e-listbox-wrapper").querySelector(".e-listbox");
      if (ele) {
        listObj = getComponent(ele, this.getModuleName());
      }
      return listObj;
    };
    ListBox2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    ListBox2.prototype.listOption = function(dataSource, fields) {
      this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);
      this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);
      this.notify("listoption", { module: "CheckBoxSelection" });
      return this.listCurrentOptions;
    };
    ListBox2.prototype.triggerBeforeItemRender = function(e) {
      e.item.setAttribute("tabindex", "-1");
      this.trigger("beforeItemRender", { element: e.item, item: e.curData });
    };
    ListBox2.prototype.requiredModules = function() {
      var modules = [];
      if (this.selectionSettings.showCheckbox) {
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    ListBox2.prototype.enableItems = function(items, enable, isValue) {
      var _this = this;
      if (enable === void 0) {
        enable = true;
      }
      var li;
      items.forEach(function(item) {
        var text = item;
        li = _this.findListElement(_this.list, "li", "data-value", isValue ? text : _this.getValueByText(text));
        if (!li) {
          return;
        }
        if (enable) {
          removeClass([li], cssClass.disabled);
          li.removeAttribute("aria-disabled");
        } else {
          addClass([li], cssClass.disabled);
          li.setAttribute("aria-disabled", "true");
        }
      });
    };
    ListBox2.prototype.selectItems = function(items, state, isValue) {
      if (state === void 0) {
        state = true;
      }
      if (state && !this.selectionSettings.showCheckbox && this.selectionSettings.mode === "Single") {
        this.getSelectedItems().forEach(function(li) {
          li.classList.remove("e-active");
          li.removeAttribute("aria-selected");
          removeClass([li], cssClass.selected);
        });
      }
      this.setSelection(items, state, !isValue);
      this.updateSelectedOptions();
      var selElems = [];
      for (var i = 0; i < items.length; i++) {
        var liColl = this.list.querySelectorAll('[aria-selected="true"]');
        for (var j = 0; j < liColl.length; j++) {
          if (items[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
            selElems.push(liColl[j]);
          }
        }
      }
      this.triggerChange(selElems, null);
    };
    ListBox2.prototype.selectAll = function(state) {
      if (state === void 0) {
        state = true;
      }
      this.selectAllItems(state);
    };
    ListBox2.prototype.addItems = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.removeItems = function(items, itemIndex) {
      this.removeItem(items, itemIndex);
    };
    ListBox2.prototype.removeItem = function(items, itemIndex) {
      var liCollections = [];
      var liElement = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      if (items) {
        items = items instanceof Array ? items : [items];
        var fields = this.fields;
        var dataValue = void 0;
        var objValue = void 0;
        var dupData = [];
        var itemIdx = void 0;
        extend(dupData, [], this.jsonData);
        var removeIdxes = [];
        var removeLiIdxes = [];
        for (var j = 0; j < items.length; j++) {
          if (items[j] instanceof Object) {
            dataValue = getValue(fields.value, items[j]);
          } else {
            dataValue = items[j].toString();
          }
          for (var i = 0, len = dupData.length; i < len; i++) {
            if (dupData[i] instanceof Object) {
              objValue = getValue(fields.value, dupData[i]);
            } else {
              objValue = dupData[i].toString();
            }
            if (objValue === dataValue) {
              itemIdx = this.getIndexByValue(dataValue);
              var idx = itemIdx === i ? itemIdx : i;
              liCollections.push(liElement[idx]);
              removeIdxes.push(idx);
              removeLiIdxes.push(idx);
            }
          }
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.listData.splice(removeIdxes[k], 1);
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.jsonData.splice(removeIdxes[k], 1);
        }
        for (var k = removeLiIdxes.length - 1; k >= 0; k--) {
          this.updateLiCollection(removeLiIdxes[k]);
        }
      } else {
        itemIndex = itemIndex ? itemIndex : 0;
        liCollections.push(liElement[itemIndex]);
        this.listData.splice(itemIndex, 1);
        this.jsonData.splice(itemIndex, 1);
        this.updateLiCollection(itemIndex);
      }
      for (var i = 0; i < liCollections.length; i++) {
        this.ulElement.removeChild(liCollections[i]);
      }
      if (this.listData.length === 0) {
        this.l10nUpdate();
      }
      if (this.listData.length !== this.sortedData.length) {
        this.sortedData = this.listData;
      }
      this.value = [];
      this.updateToolBarState();
    };
    ListBox2.prototype.getDataByValues = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        data.push(this.getDataByValue(value[i]));
      }
      return data;
    };
    ListBox2.prototype.moveUp = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem);
    };
    ListBox2.prototype.moveDown = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(false, false, elem);
    };
    ListBox2.prototype.moveTop = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(null, false, elem, true);
    };
    ListBox2.prototype.moveBottom = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem, false, true);
    };
    ListBox2.prototype.moveTo = function(value, index, targetId) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
      this.moveData(this, tlistbox, false, elem, index);
    };
    ListBox2.prototype.moveAllTo = function(targetId, index) {
      if (this.listData.length > 0) {
        var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
        this.moveAllData(this, tlistbox, false, index);
      }
    };
    ListBox2.prototype.getDataList = function() {
      return this.jsonData;
    };
    ListBox2.prototype.getSortedList = function() {
      var sortData;
      var tempData;
      sortData = tempData = this.sortedData;
      if (this.fields.groupBy) {
        sortData = [];
        for (var i = 0; i < tempData.length; i++) {
          if (tempData[i].isHeader) {
            continue;
          }
          sortData.push(tempData[i]);
        }
      }
      return sortData;
    };
    ListBox2.prototype.getElemByValue = function(value) {
      var elem = [];
      for (var i = 0; i < value.length; i++) {
        elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
      }
      return elem;
    };
    ListBox2.prototype.updateLiCollection = function(index) {
      var tempLi = [].slice.call(this.liCollections);
      tempLi.splice(index, 1);
      this.liCollections = tempLi;
    };
    ListBox2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      [].slice.call(this.getItems()).forEach(function(li) {
        if (!li.classList.contains(cssClass.disabled)) {
          if (_this.selectionSettings.showCheckbox) {
            var ele = li.getElementsByClassName("e-check")[0];
            if (!ele && state || ele && !state) {
              _this.notify("updatelist", { li, module: "listbox" });
              if (_this.maximumSelectionLength >= _this.list.querySelectorAll(".e-list-item span.e-check").length) {
                _this.checkMaxSelection();
              }
            }
          } else {
            if (state) {
              li.classList.add(cssClass.selected);
            } else {
              li.classList.remove(cssClass.selected);
            }
          }
        }
      });
      this.updateSelectedOptions();
      if (this.allowFiltering && this.selectionSettings.showCheckbox) {
        var liEle = this.list.getElementsByTagName("li");
        var index = 0;
        if (state) {
          var _loop_1 = function() {
            var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute("data-value"));
            if (!this_1.value.some(function(e) {
              return e === dataValue1;
            })) {
              this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute("data-value")));
            }
          };
          var this_1 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_1();
          }
        } else {
          var _loop_2 = function() {
            var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute("data-value"));
            this_2.value = this_2.value.filter(function(e) {
              return e !== dataValue2;
            });
          };
          var this_2 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_2();
          }
        }
        if (document.querySelectorAll("ul").length < 2) {
          this.updateMainList();
        }
      }
      this.triggerChange(this.getSelectedItems(), event2);
    };
    ListBox2.prototype.updateMainList = function() {
      var mainList = this.mainList.querySelectorAll(".e-list-item");
      var ulList = this.ulElement.querySelectorAll(".e-list-item");
      var mainCount = mainList.length;
      var ulEleCount = ulList.length;
      if (this.selectionSettings.showCheckbox || (document.querySelectorAll("ul").length > 1 || mainCount !== ulEleCount)) {
        var listindex = 0;
        var valueindex = 0;
        var count = 0;
        for (listindex; listindex < mainCount; ) {
          if (this.value) {
            for (valueindex; valueindex < this.value.length; valueindex++) {
              if (mainList[listindex].getAttribute("data-value") === this.value[valueindex]) {
                count++;
              }
            }
          }
          if (!count && this.selectionSettings.showCheckbox) {
            mainList[listindex].getElementsByClassName("e-frame")[0].classList.remove("e-check");
          }
          if (document.querySelectorAll("ul").length > 1 && count && mainCount !== ulEleCount) {
            this.mainList.removeChild(this.mainList.getElementsByTagName("li")[listindex]);
            listindex = 0;
          } else {
            listindex++;
          }
          count = 0;
          valueindex = 0;
        }
      }
    };
    ListBox2.prototype.wireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.add(this.list, "click", this.clickHandler, this);
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
      EventHandler.add(wrapper, "focusout", this.focusOutHandler, this);
      this.wireToolbarEvent();
      if (this.selectionSettings.showCheckbox) {
        EventHandler.remove(document, "mousedown", this.checkBoxSelectionModule.onDocumentClick);
      }
      if (this.fields.groupBy || this.element.querySelector("select>optgroup")) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
      if (form) {
        EventHandler.add(form, "reset", this.formResetHandler, this);
      }
      window.addEventListener("resize", this.resizeHandler.bind(this));
    };
    ListBox2.prototype.wireToolbarEvent = function() {
      if (this.toolbarSettings.items.length) {
        EventHandler.add(this.getToolElem(), "click", this.toolbarClickHandler, this);
      }
    };
    ListBox2.prototype.unwireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.remove(this.list, "click", this.clickHandler);
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
      EventHandler.remove(wrapper, "focusout", this.focusOutHandler);
      if (this.allowFiltering && this.clearFilterIconElem) {
        EventHandler.remove(this.clearFilterIconElem, "click", this.clearText);
      }
      if (this.toolbarSettings.items.length) {
        EventHandler.remove(this.getToolElem(), "click", this.toolbarClickHandler);
      }
      if (form) {
        EventHandler.remove(form, "reset", this.formResetHandler);
      }
      window.removeEventListener("resize", this.resizeHandler.bind(this));
    };
    ListBox2.prototype.clickHandler = function(e) {
      var li = closest(e.target, ".e-list-item");
      if (isNullOrUndefined(li)) {
        return;
      }
      this.selectHandler(e);
    };
    ListBox2.prototype.checkSelectAll = function() {
      var searchCount = 0;
      var liItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      for (var i = 0; i < liItems.length; i++) {
        if (!liItems[i].classList.contains("e-disabled")) {
          searchCount++;
        }
      }
      var len = this.getSelectedItems().length;
      if (this.showSelectAll && searchCount) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          value: searchCount === len ? "check" : len === 0 ? "uncheck" : "indeterminate"
        });
      }
    };
    ListBox2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.allowFiltering) {
        var filterType = this.inputString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (dataType === null) {
          dataType = this.typeOfData(this.jsonData).typeof;
        }
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new Query();
      }
      return filterQuery;
    };
    ListBox2.prototype.setFiltering = function() {
      var filterInputObj;
      if (this.initLoad || isNullOrUndefined(this.filterParent)) {
        this.filterParent = this.createElement("span", {
          className: listBoxClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: listBoxClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: [listBoxClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        append([filterInputObj.container], this.filterParent);
        prepend([this.filterParent], this.list);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "aria-label": "search list item",
          "autocomplete": "off",
          "autocorrect": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "role": "textbox"
        });
        if (this.height.toString().indexOf("%") < 0) {
          addClass([this.list], "e-filter-list");
        } else if (this.height.toString().indexOf("%") > 0) {
          this.ulElement.style.height = this.ulElement.offsetHeight - this.filterParent.offsetHeight + "px";
        }
        this.inputString = this.filterInput.value;
        this.filterWireEvents();
        return filterInputObj;
      }
    };
    ListBox2.prototype.filterWireEvents = function(filterElem) {
      if (filterElem) {
        this.filterInput = filterElem.querySelector(".e-input-filter");
      }
      this.clearFilterIconElem = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
      if (this.clearFilterIconElem) {
        EventHandler.add(this.clearFilterIconElem, "click", this.clearText, this);
        if (!filterElem) {
          this.clearFilterIconElem.style.visibility = "hidden";
        }
      }
      EventHandler.add(this.filterInput, "input", this.onInput, this);
      EventHandler.add(this.filterInput, "keyup", this.KeyUp, this);
      EventHandler.add(this.filterInput, "keydown", this.onKeyDown, this);
    };
    ListBox2.prototype.selectHandler = function(e, isKey) {
      var isSelect = true;
      var currSelIdx;
      var li = closest(e.target, ".e-list-item");
      var selectedLi = [li];
      if (li && li.parentElement) {
        currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        if (!this.selectionSettings.showCheckbox) {
          if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {
            li.classList.remove(cssClass.selected);
            li.removeAttribute("aria-selected");
            isSelect = false;
          } else if (!(this.selectionSettings.mode === "Multiple" && (e.ctrlKey || e.metaKey || Browser.isDevice))) {
            this.getSelectedItems().forEach(function(ele) {
              ele.removeAttribute("aria-selected");
            });
            removeClass(this.getSelectedItems(), cssClass.selected);
          }
        } else {
          isSelect = !li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
        }
        if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== "Single") {
          selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function(ele) {
            return ele.classList.contains("e-list-item");
          });
        } else {
          this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (isSelect) {
          if (!this.selectionSettings.showCheckbox) {
            addClass(selectedLi, cssClass.selected);
          }
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "true");
          });
          this.list.setAttribute("aria-activedescendant", li.id);
        } else {
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "false");
          });
        }
        if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
          this.notify("updatelist", { li, e, module: "listbox" });
        }
        if (this.allowFiltering && !isKey) {
          var liDataValue_1 = this.getFormattedValue(li.getAttribute("data-value"));
          if (!isSelect) {
            this.value = this.value.filter(function(value1) {
              return value1 !== liDataValue_1;
            });
          } else {
            var values = [];
            extend(values, this.value);
            values.push(liDataValue_1);
            this.value = values;
          }
          if (document.querySelectorAll("ul").length < 2) {
            this.updateMainList();
          }
        }
        this.updateSelectedOptions();
        this.triggerChange(this.getSelectedItems(), e);
        if (this.list) {
          this.checkMaxSelection();
        }
      }
    };
    ListBox2.prototype.triggerChange = function(selectedLis, event2) {
      this.trigger("change", { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event: event2 });
    };
    ListBox2.prototype.getDataByElems = function(elems) {
      var data = [];
      for (var i = 0, len = elems.length; i < len; i++) {
        data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute("data-value"))));
      }
      return data;
    };
    ListBox2.prototype.getDataByElements = function(elems) {
      var data = [];
      var value;
      var sIdx = 0;
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && item === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        }
        return data;
      }
      return null;
    };
    ListBox2.prototype.checkMaxSelection = function() {
      var limit = this.list.querySelectorAll(".e-list-item span.e-check").length;
      if (this.selectionSettings.showCheckbox) {
        var index = 0;
        var liCollElem = this.list.getElementsByClassName("e-list-item");
        for (index; index < liCollElem.length; index++) {
          if (!liCollElem[index].querySelector(".e-frame.e-check")) {
            if (limit === this.maximumSelectionLength) {
              liCollElem[index].classList.add("e-disable");
            } else if (liCollElem[index].classList.contains("e-disable")) {
              liCollElem[index].classList.remove("e-disable");
            }
          }
        }
      }
    };
    ListBox2.prototype.toolbarClickHandler = function(e) {
      var btn = closest(e.target, "button");
      if (btn) {
        this.toolbarAction = btn.getAttribute("data-value");
        if (btn.disabled) {
          return;
        }
        switch (this.toolbarAction) {
          case "moveUp":
            this.moveUpDown(true);
            break;
          case "moveDown":
            this.moveUpDown();
            break;
          case "moveTo":
            this.moveItemTo();
            break;
          case "moveFrom":
            this.moveItemFrom();
            break;
          case "moveAllTo":
            this.moveAllItemTo();
            break;
          case "moveAllFrom":
            this.moveAllItemFrom();
            break;
          default:
            this.trigger("actionBegin", {
              cancel: false,
              items: this.getDataByElems(this.getSelectedItems()),
              eventName: this.toolbarAction
            });
            break;
        }
      }
    };
    ListBox2.prototype.moveUpDown = function(isUp, isKey, value, isTop, isBottom) {
      var _this = this;
      var elems = this.getSelectedItems();
      if (value) {
        elems = value;
      }
      if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
        return;
      }
      var tempItems = this.getDataByElems(elems);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      this.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      (isUp ? elems : elems.reverse()).forEach(function(ele) {
        var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll(".e-list-item"), ele);
        var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);
        if (isTop) {
          moveTo(_this.ulElement, _this.ulElement, [idx], 0);
          _this.changeData(idx, 0, jsonToIdx, ele);
        } else if (isBottom) {
          moveTo(_this.ulElement, _this.ulElement, [idx], _this.ulElement.querySelectorAll(".e-list-item").length);
          _this.changeData(idx, _this.ulElement.querySelectorAll(".e-list-item").length, jsonToIdx, ele);
        } else {
          moveTo(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);
          _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
        }
      });
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      elems[0].focus();
      if (!isKey && this.toolbarSettings.items.length) {
        this.getToolElem().querySelector("[data-value=" + (isUp ? "moveUp" : "moveDown") + "]").focus();
      }
      this.updateToolBarState();
    };
    ListBox2.prototype.moveItemTo = function() {
      this.moveData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveItemFrom = function() {
      this.moveData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveData = function(fListBox, tListBox, isKey, value, index) {
      var idx = [];
      var dataIdx = [];
      var jsonIdx = [];
      var sortIdx = [];
      var listData = [].slice.call(fListBox.listData);
      var tListData = [].slice.call(tListBox.listData);
      var sortData = [].slice.call(fListBox.sortedData);
      var tSortData = [].slice.call(tListBox.sortedData);
      var fliCollections = [].slice.call(fListBox.liCollections);
      var dataLiIdx = [];
      var tliCollections = [].slice.call(tListBox.liCollections);
      var tempItems = [];
      var data = [];
      var elems = fListBox.getSelectedItems();
      if (value) {
        elems = value;
      }
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      fListBox.value = [];
      if (elems.length) {
        this.removeSelected(fListBox, elems);
        elems.forEach(function(ele) {
          idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele));
          dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll(".e-list-item"), ele));
          dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));
          sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));
          jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));
        });
        if (this.sortOrder !== "None") {
          sortIdx.forEach(function(i2) {
            tempItems.push(fListBox.sortedData[i2]);
          });
        } else {
          jsonIdx.forEach(function(i2) {
            tempItems.push(fListBox.jsonData[i2]);
          });
        }
        var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
        fListBox.trigger("actionBegin", localDataArgs);
        if (localDataArgs.cancel) {
          return;
        }
        var rLiCollection_1 = [];
        dataLiIdx.sort(function(n1, n2) {
          return n1 - n2;
        }).reverse().forEach(function(i2) {
          rLiCollection_1.push(fliCollections.splice(i2, 1)[0]);
        });
        fListBox.liCollections = fliCollections;
        if (index) {
          var toColl = tliCollections.splice(0, index);
          tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);
        } else {
          tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());
        }
        if (tListBox.listData.length === 0) {
          var noRecElem = tListBox.ulElement.childNodes[0];
          if (noRecElem) {
            tListBox.ulElement.removeChild(noRecElem);
          }
        }
        dataIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          listData.splice(i2, 1)[0];
        });
        sortIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          sortData.splice(i2, 1)[0];
        });
        jsonIdx.slice().reverse().forEach(function(i2) {
          data.push(fListBox.jsonData.splice(i2, 1)[0]);
        });
        if (isRefresh) {
          if (fListBox.fields.groupBy) {
            var sourceElem = fListBox.renderItems(listData, fListBox.fields);
            fListBox.updateListItems(sourceElem, fListBox.ulElement);
          } else {
            elems.forEach(function(ele) {
              detach(ele);
            });
          }
        } else {
          moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
          tListBox.mainList = tListBox.ulElement;
        }
        var tJsonData = [].slice.call(tListBox.jsonData);
        tSortData = [].slice.call(tListBox.sortedData);
        this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);
        if (isKey) {
          this.list.focus();
        }
        fListBox.listData = listData;
        fListBox.sortedData = sortData;
        index = index ? index : tListData.length;
        for (var i = tempItems.length - 1; i >= 0; i--) {
          tListData.splice(index, 0, tempItems[i]);
          tJsonData.splice(index, 0, tempItems[i]);
          tSortData.splice(index, 0, tempItems[i]);
        }
        tListBox.listData = tListData;
        tListBox.jsonData = tJsonData;
        tListBox.sortedData = tSortData;
        if (isRefresh) {
          var sourceElem = tListBox.renderItems(tListData, tListBox.fields);
          tListBox.updateListItems(sourceElem, tListBox.ulElement);
          tListBox.setSelection();
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        fListBox.updateSelectedOptions();
        if (fListBox.listData.length === 0) {
          fListBox.l10nUpdate();
        }
      }
      if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
        fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute("data-value"));
      }
    };
    ListBox2.prototype.selectNextList = function(elems, dataLiIdx, dataIdx, inst) {
      var childCnt = inst.ulElement.querySelectorAll(".e-list-item").length;
      var ele;
      var liIdx;
      var validIdx = -1;
      if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {
        liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
        ele = inst.ulElement.querySelectorAll(".e-list-item")[liIdx];
        validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);
        if (validIdx > -1) {
          inst.ulElement.querySelectorAll(".e-list-item")[validIdx].classList.add(cssClass.selected);
        }
      }
    };
    ListBox2.prototype.moveAllItemTo = function() {
      this.moveAllData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveAllItemFrom = function() {
      this.moveAllData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveAllData = function(fListBox, tListBox, isKey, index) {
      var listData = [].slice.call(tListBox.listData);
      var jsonData = [].slice.call(tListBox.jsonData);
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      var tempLiColl = [];
      var tempData = [];
      var flistboxarray = [];
      this.removeSelected(fListBox, fListBox.getSelectedItems());
      var tempItems = [].slice.call(fListBox.listData);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      fListBox.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      if (tListBox.listData.length === 0) {
        var noRecElem = tListBox.ulElement.childNodes[0];
        if (noRecElem) {
          tListBox.ulElement.removeChild(noRecElem);
        }
      }
      if (fListBox.listData.length > 0) {
        flistboxarray = Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number);
      }
      var _loop_3 = function(i2) {
        if (fListBox.ulElement.childNodes[i2].classList.contains("e-disabled")) {
          flistboxarray = flistboxarray.filter(function(item) {
            return item !== i2;
          });
          tempLiColl.push(fListBox.ulElement.childNodes[i2]);
          tempData.push(fListBox.listData[i2]);
        }
      };
      for (var i = 0; i < fListBox.ulElement.childElementCount; i++) {
        _loop_3(i);
      }
      moveTo(fListBox.ulElement, tListBox.ulElement, flistboxarray, index);
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      if (isKey) {
        this.list.focus();
      }
      index = index ? index : listData.length;
      for (var i = 0; i < flistboxarray.length; i++) {
        listData.splice(index + i, 0, fListBox.listData[flistboxarray[i]]);
      }
      for (var i = 0; i < flistboxarray.length; i++) {
        jsonData.splice(index + i, 0, fListBox.jsonData[flistboxarray[i]]);
      }
      var fliCollections = [];
      if (tempLiColl.length > 0) {
        fListBox.liCollections = tempLiColl;
        fliCollections = [].slice.call(fListBox.liCollections);
      } else {
        fliCollections = [].slice.call(fListBox.liCollections);
        fListBox.liCollections = [];
      }
      var tliCollections = [].slice.call(tListBox.liCollections);
      if (index) {
        var toColl = tliCollections.splice(0, index);
        tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
      } else {
        tListBox.liCollections = tliCollections.concat(fliCollections);
      }
      fListBox.value = [];
      listData = listData.filter(function(data) {
        return data !== void 0;
      });
      listData = listData.filter(function(data) {
        return data.isHeader !== true;
      });
      var sortedData = listData.filter(function(val) {
        return tListBox.jsonData.indexOf(val) === -1;
      });
      for (var i = 0; i < sortedData.length; i++) {
        tListBox.jsonData.splice(index + i, 0, sortedData[i]);
      }
      tListBox.listData = listData;
      if (fListBox.listData.length === fListBox.jsonData.length) {
        fListBox.listData = fListBox.sortedData = fListBox.jsonData = tempData;
      } else if (fListBox.allowFiltering) {
        for (var i = 0; i < fListBox.listData.length; i++) {
          for (var j = 0; j < fListBox.jsonData.length; j++) {
            if (fListBox.listData[i] === fListBox.jsonData[j]) {
              fListBox.jsonData.splice(j, 1);
            }
          }
        }
        fListBox.listData = fListBox.sortedData = [];
      }
      if (isRefresh) {
        var sourceElem = tListBox.renderItems(listData, tListBox.fields);
        tListBox.updateListItems(sourceElem, tListBox.ulElement);
        this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      } else {
        tListBox.sortedData = listData;
      }
      fListBox.updateSelectedOptions();
      if (tempLiColl.length > 0) {
        var wrap = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        var btn = wrap.querySelector('[data-value="' + this.toolbarAction + '"]');
        btn.disabled = true;
      }
      if (fListBox.listData.length === 0) {
        fListBox.l10nUpdate();
      }
    };
    ListBox2.prototype.changeData = function(fromIdx, toIdx, jsonToIdx, ele) {
      var listData = [].slice.call(this.listData);
      var jsonData = [].slice.call(this.jsonData);
      var sortData = [].slice.call(this.sortedData);
      var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
      var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
      var liColl = [].slice.call(this.liCollections);
      listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
      jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
      sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
      liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
      this.listData = listData;
      this.jsonData = jsonData;
      this.liCollections = liColl;
      this.sortedData = sortData;
    };
    ListBox2.prototype.getSelectedItems = function() {
      var ele = [];
      if (this.selectionSettings.showCheckbox) {
        [].slice.call(this.ulElement.getElementsByClassName("e-check")).forEach(function(cbox) {
          ele.push(closest(cbox, ".e-list-item"));
        });
      } else {
        ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));
      }
      return ele;
    };
    ListBox2.prototype.getScopedListBox = function() {
      var _this = this;
      var listObj;
      if (this.scope) {
        [].slice.call(document.querySelectorAll(this.scope)).forEach(function(ele) {
          if (getComponent(ele, _this.getModuleName())) {
            listObj = getComponent(ele, _this.getModuleName());
          }
        });
      }
      return listObj;
    };
    ListBox2.prototype.getGrabbedItems = function(args) {
      var grabbItems = false;
      for (var i = 0; i < this.value.length; i++) {
        if (this.value[i] === this.getFormattedValue(args.target.getAttribute("data-value"))) {
          grabbItems = true;
          break;
        }
      }
      if (grabbItems) {
        for (var i = 0; i < this.value.length; i++) {
          var liColl = this.list.querySelectorAll('[aria-selected="true"]');
          for (var j = 0; j < liColl.length; j++) {
            if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
              liColl[j].classList.add("e-grabbed");
            }
          }
        }
      }
      var elems;
      if (this.isAngular) {
        elems = Array.prototype.slice.call(this.element.getElementsByClassName("e-list-parent")[0].querySelectorAll(".e-grabbed"));
      } else {
        elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll(".e-grabbed"));
      }
      return elems;
    };
    ListBox2.prototype.getDragArgs = function(args, isDragEnd) {
      var elems = this.getGrabbedItems(args);
      if (elems.length) {
        if (isDragEnd) {
          elems.push(args.target);
        }
      } else {
        elems = [args.target];
      }
      return { elements: elems, event: args.event, items: this.getDataByElems(elems) };
    };
    ListBox2.prototype.onKeyDown = function(e) {
      this.keyDownHandler(e);
      e.stopPropagation();
    };
    ListBox2.prototype.keyDownHandler = function(e) {
      if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && (!this.allowFiltering || this.allowFiltering && e.target !== this.filterInput)) {
        if (e.target && e.target.className.indexOf("e-edit-template") > -1) {
          return;
        }
        e.preventDefault();
        if (e.keyCode === 32 && this.ulElement.children.length) {
          this.selectHandler({
            target: this.ulElement.getElementsByClassName("e-focused")[0],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          });
        } else if (e.keyCode === 65 && e.ctrlKey) {
          this.selectAll();
        } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
          this.moveUpDown(e.keyCode === 38 ? true : false, true);
        } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
          var listObj = this.tBListBox || this.getScopedListBox();
          if (e.keyCode === 39) {
            if (e.shiftKey) {
              this.moveAllData(this, listObj, true);
            } else {
              this.moveData(this, listObj, true);
            }
          } else {
            if (e.shiftKey) {
              this.moveAllData(listObj, this, true);
            } else {
              this.moveData(listObj, this, true);
            }
          }
        } else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== "KeyA") {
          this.upDownKeyHandler(e);
        }
      } else if (this.allowFiltering) {
        if (e.keyCode === 40 || e.keyCode === 38) {
          this.upDownKeyHandler(e);
        }
      }
    };
    ListBox2.prototype.upDownKeyHandler = function(e) {
      var ul = this.ulElement;
      var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = ul.getElementsByClassName("e-focused")[0] || ul.getElementsByClassName(cssClass.selected)[0];
      if (fli) {
        if (e.keyCode !== 35 && e.keyCode !== 36) {
          fliIdx = Array.prototype.indexOf.call(ul.children, fli);
          if (e.keyCode === 40) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
            return;
          }
        }
        removeClass([fli], "e-focused");
      }
      var cli = ul.children[fliIdx];
      if (cli) {
        fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);
        if (fliIdx === -1) {
          addClass([fli], "e-focused");
          return;
        }
        ul.children[fliIdx].focus();
        ul.children[fliIdx].classList.add("e-focused");
        if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);
        }
        if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          var selectedidx = Array.prototype.indexOf.call(ul.children, fli);
          var sidx = e.code === "Home" ? 0 : selectedidx;
          var eidx = e.code === "Home" ? selectedidx : ul.children.length - 1;
          for (var i = sidx; i <= eidx; i++) {
            var item = ul.children[i];
            this.notify("updatelist", { li: item, e: {
              target: this.ulElement.getElementsByClassName("e-focused")[0],
              ctrlKey: e.ctrlKey,
              shiftKey: e.shiftKey
            }, module: "listbox" });
          }
        }
      }
    };
    ListBox2.prototype.KeyUp = function(e) {
      var _this = this;
      if (this.allowFiltering && e.ctrlKey && e.keyCode === 65) {
        e.preventDefault();
        return;
      }
      var char = String.fromCharCode(e.keyCode);
      var isWordCharacter = char.match(/\w/);
      if (!isNullOrUndefined(isWordCharacter)) {
        this.isValidKey = true;
      }
      this.isValidKey = e.keyCode === 8 || e.keyCode === 46 || this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        switch (e.keyCode) {
          default:
            if (this.allowFiltering) {
              var eventArgsData_1 = {
                preventDefaultAction: false,
                text: this.targetElement(),
                updateData: function(dataSource, query, fields) {
                  if (eventArgsData_1.cancel) {
                    return;
                  }
                  _this.isFiltered = true;
                  _this.remoteFilterAction = true;
                  _this.dataUpdater(dataSource, query, fields);
                },
                event: e,
                cancel: false
              };
              this.trigger("filtering", eventArgsData_1, function(args) {
                _this.isDataFetched = false;
                if (args.cancel || _this.filterInput.value !== "" && _this.isFiltered) {
                  return;
                }
                if (!args.cancel && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.inputString = _this.filterInput.value;
                  _this.filteringAction(_this.jsonData, new Query(), _this.fields);
                  if (_this.toolbarSettings.items.length > 0) {
                    _this.updateToolBarState();
                  }
                }
                if (!_this.isFiltered && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.dataUpdater(_this.jsonData, new Query(), _this.fields);
                }
              });
            }
        }
      }
    };
    ListBox2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFiltering = true;
      this.filteringAction(dataSource, query, fields);
    };
    ListBox2.prototype.filteringAction = function(dataSource, query, fields) {
      this.resetList(dataSource, fields, query);
    };
    ListBox2.prototype.targetElement = function() {
      this.targetInputElement = this.list.getElementsByClassName("e-input-filter")[0];
      return this.targetInputElement.value;
    };
    ListBox2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var backCommand = true;
      if (this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (backCommand) {
          this.remoteCustomValue = false;
          if (this.isAngular && this.itemTemplate) {
            list = this.renderItems(this.listData, fields);
          }
          this.onActionComplete(list, this.jsonData);
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.selectionSettings.showCheckbox, e: this });
        }
      } else {
        this.resetList(dataSource, fields, query);
      }
    };
    ListBox2.prototype.focusOutHandler = function() {
      var ele = this.list.getElementsByClassName("e-focused")[0];
      if (ele) {
        ele.classList.remove("e-focused");
      }
      if (this.allowFiltering) {
        this.refreshClearIcon();
      }
    };
    ListBox2.prototype.resizeHandler = function() {
      if (this.list.scrollWidth > this.list.offsetWidth) {
        this.list.querySelector(".e-list-parent").style.display = "inline-block";
      } else {
        this.list.querySelector(".e-list-parent").style.display = "block";
      }
    };
    ListBox2.prototype.getValidIndex = function(cli, index, keyCode) {
      var cul = this.ulElement;
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        if (keyCode === 40 || keyCode === 36) {
          index++;
        } else {
          index--;
        }
      }
      if (index < 0 || index === cul.childElementCount) {
        return -1;
      }
      cli = cul.childNodes[index];
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        index = this.getValidIndex(cli, index, keyCode);
      }
      return index;
    };
    ListBox2.prototype.updateSelectedOptions = function() {
      var _this = this;
      var selectedOptions = [];
      var values = [];
      extend(values, this.value);
      this.getSelectedItems().forEach(function(ele) {
        if (!ele.classList.contains("e-grabbed")) {
          selectedOptions.push(_this.getFormattedValue(ele.getAttribute("data-value")));
        }
      });
      if (this.mainList.childElementCount === this.ulElement.childElementCount) {
        if (this.allowFiltering && this.selectionSettings.showCheckbox) {
          for (var i = 0; i < selectedOptions.length; i++) {
            if (values.indexOf(selectedOptions[i]) > -1) {
              continue;
            } else {
              values.push(selectedOptions[i]);
            }
          }
          this.setProperties({ value: values }, true);
        } else {
          this.setProperties({ value: selectedOptions }, true);
        }
      }
      this.updateSelectTag();
      this.updateToolBarState();
      if (this.tBListBox) {
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.clearSelection = function(values) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (this.selectionSettings.showCheckbox) {
        var dvalue_1;
        this.getSelectedItems().forEach(function(li) {
          dvalue_1 = _this.getFormattedValue(li.getAttribute("data-value"));
          if (values.indexOf(dvalue_1) < 0) {
            li.getElementsByClassName("e-check")[0].classList.remove("e-check");
            li.removeAttribute("aria-selected");
          }
        });
      }
    };
    ListBox2.prototype.setSelection = function(values, isSelect, isText, canFocus) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (isSelect === void 0) {
        isSelect = true;
      }
      if (isText === void 0) {
        isText = false;
      }
      if (canFocus === void 0) {
        canFocus = true;
      }
      var li;
      var liselect;
      if (values) {
        values.forEach(function(value) {
          var text;
          if (isText) {
            text = _this.getValueByText(value);
          } else {
            text = value;
          }
          if (typeof text === "string") {
            text = text.split("\\").join("\\\\");
            li = _this.list.querySelector('[data-value="' + text.replace(/"/g, '\\"') + '"]');
          } else {
            li = _this.list.querySelector('[data-value="' + text + '"]');
          }
          if (li) {
            if (_this.selectionSettings.showCheckbox && !li.classList.contains("e-disabled")) {
              liselect = li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
            } else {
              liselect = li.classList.contains("e-selected");
            }
            if (!isSelect && liselect || isSelect && !liselect && li) {
              if (_this.selectionSettings.showCheckbox && !li.classList.contains("e-disabled")) {
                _this.notify("updatelist", { li, module: "listbox" });
                if (canFocus) {
                  li.focus();
                }
              } else {
                if (isSelect && !li.classList.contains("e-disabled")) {
                  li.classList.add(cssClass.selected);
                  li.setAttribute("aria-selected", "true");
                  if (canFocus) {
                    li.focus();
                  }
                } else {
                  li.classList.remove(cssClass.selected);
                  li.removeAttribute("aria-selected");
                }
              }
            }
          }
        });
      }
      this.updateSelectTag();
    };
    ListBox2.prototype.updateSelectTag = function() {
      var ele = this.getSelectTag();
      var innerHTML = "";
      ele.innerHTML = "";
      if (this.value) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          innerHTML += "<option selected>" + this.value[i] + "</option>";
        }
        ele.innerHTML += innerHTML;
        for (var i = 0, len = ele.childNodes.length; i < len; i++) {
          ele.childNodes[i].setAttribute("value", this.value[i].toString());
        }
      }
      this.checkSelectAll();
    };
    ListBox2.prototype.checkDisabledState = function(inst) {
      if (isNullOrUndefined(inst.ulElement)) {
        if (!isNullOrUndefined(this.dataSource) && isNullOrUndefined(this.dataSource.length)) {
          return false;
        } else {
          return true;
        }
      } else {
        return inst.ulElement.querySelectorAll("." + cssClass.li).length === 0;
      }
    };
    ListBox2.prototype.updateToolBarState = function() {
      var _this = this;
      if (this.toolbarSettings.items.length) {
        var listObj_1 = this.getScopedListBox();
        var wrap_1 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        this.toolbarSettings.items.forEach(function(value) {
          var btn = wrap_1.querySelector('[data-value="' + value + '"]');
          switch (value) {
            case "moveAllTo":
              btn.disabled = _this.checkDisabledState(_this);
              break;
            case "moveAllFrom":
              btn.disabled = _this.checkDisabledState(listObj_1);
              break;
            case "moveFrom":
              btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;
              break;
            case "moveUp":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;
              break;
            case "moveDown":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;
              break;
            default:
              btn.disabled = _this.value && _this.value.length ? false : true;
              break;
          }
        });
      }
    };
    ListBox2.prototype.setCheckboxPosition = function() {
      var listWrap = this.list;
      if (!this.initLoad && this.selectionSettings.checkboxPosition === "Left") {
        listWrap.classList.remove("e-right");
      }
      if (this.selectionSettings.checkboxPosition === "Right") {
        listWrap.classList.add("e-right");
      }
    };
    ListBox2.prototype.showCheckbox = function(showCheckbox) {
      var index = 0;
      var liColl = this.list.lastElementChild.querySelectorAll("li");
      var liCollLen = this.list.lastElementChild.getElementsByClassName("e-list-item").length;
      if (showCheckbox) {
        this.ulElement = this.renderItems(this.listData, this.fields);
        this.mainList = this.ulElement;
        this.list.removeChild(this.list.getElementsByTagName("ul")[0]);
        this.list.appendChild(this.ulElement);
        if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName("e-selectall-parent")[0]) {
          var l10nShow = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
          this.showSelectAll = true;
          this.selectAllText = l10nShow.getConstant("selectAllText");
          this.unSelectAllText = l10nShow.getConstant("unSelectAllText");
          this.popupWrapper = this.list;
          this.checkBoxSelectionModule.checkAllParent = null;
          this.notify("selectAll", {});
          this.checkSelectAll();
        }
      } else {
        if (this.list.getElementsByClassName("e-selectall-parent")[0]) {
          this.list.removeChild(this.list.getElementsByClassName("e-selectall-parent")[0]);
        }
        for (index; index < liCollLen; index++) {
          if (liColl[index].classList.contains("e-list-item")) {
            liColl[index].removeChild(liColl[index].getElementsByClassName("e-checkbox-wrapper")[0]);
          }
          if (liColl[index].hasAttribute("aria-selected")) {
            liColl[index].removeAttribute("aria-selected");
          }
        }
        this.mainList = this.ulElement;
      }
      this.value = [];
    };
    ListBox2.prototype.isSelected = function(ele) {
      if (!isNullOrUndefined(ele)) {
        return ele.classList.contains(cssClass.selected) || ele.querySelector(".e-check") !== null;
      } else {
        return false;
      }
    };
    ListBox2.prototype.getSelectTag = function() {
      return this.list.getElementsByClassName("e-hidden-select")[0];
    };
    ListBox2.prototype.getToolElem = function() {
      return this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
    };
    ListBox2.prototype.formResetHandler = function() {
      this.value = this.initialSelectedOptions;
    };
    ListBox2.prototype.getModuleName = function() {
      return "listbox";
    };
    ListBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ListBox2.prototype.getLocaleName = function() {
      return "listbox";
    };
    ListBox2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.innerHTML = "";
      } else {
        this.element.style.display = "inline-block";
        if (this.toolbarSettings.items.length) {
          this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
          detach(this.list.nextElementSibling);
        }
        this.list.parentElement.insertBefore(this.element, this.list);
      }
      _super.prototype.destroy.call(this);
      this.enableRtlElements = [];
      this.liCollections = null;
      this.list = null;
      this.ulElement = null;
      this.mainList = null;
      this.spinner = null;
      this.rippleFun = null;
      if (this.itemTemplate) {
        this.clearTemplate();
      }
    };
    ListBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.list.classList.add("e-rtl");
            } else {
              this.list.classList.remove("e-rtl");
            }
            break;
          case "value":
            removeClass(this.list.querySelectorAll("." + cssClass.selected), cssClass.selected);
            this.clearSelection(this.value);
            this.setSelection();
            break;
          case "height":
            this.setHeight();
            break;
          case "enabled":
            this.setEnable();
            break;
          case "allowDragAndDrop":
            if (newProp.allowDragAndDrop) {
              this.initDraggable();
            } else {
              getComponent(this.ulElement, "sortable").destroy();
            }
            break;
          case "allowFiltering":
            if (this.allowFiltering) {
              this.setFiltering();
            } else {
              this.list.removeChild(this.list.getElementsByClassName("e-filter-parent")[0]);
              this.filterParent = null;
              removeClass([this.list], "e-filter-list");
            }
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              if (this.filterInput) {
                Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
              }
            }
            break;
          case "scope":
            if (this.allowDragAndDrop) {
              getComponent(this.ulElement, "sortable").scope = newProp.scope;
            }
            if (this.toolbarSettings.items.length) {
              if (oldProp.scope) {
                getComponent(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
              }
              if (newProp.scope) {
                getComponent(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
              }
            }
            break;
          case "toolbarSettings": {
            var ele = void 0;
            var pos = newProp.toolbarSettings.position;
            var toolElem = this.getToolElem();
            if (pos) {
              removeClass([wrap], ["e-right", "e-left"]);
              wrap.classList.add("e-" + pos.toLowerCase());
              if (pos === "Left") {
                wrap.insertBefore(toolElem, this.list);
              } else {
                wrap.appendChild(toolElem);
              }
            }
            if (newProp.toolbarSettings.items) {
              oldProp.toolbarSettings.items = isNullOrUndefined(oldProp.toolbarSettings.items) ? [] : oldProp.toolbarSettings.items;
              if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {
                ele = this.list.parentElement;
                ele.parentElement.insertBefore(this.list, ele);
                detach(ele);
              }
              this.initToolbarAndStyles();
              this.wireToolbarEvent();
            }
            break;
          }
          case "selectionSettings": {
            var showSelectAll = newProp.selectionSettings.showSelectAll;
            var showCheckbox = newProp.selectionSettings.showCheckbox;
            if (!isNullOrUndefined(showSelectAll)) {
              this.showSelectAll = showSelectAll;
              if (this.showSelectAll) {
                var l10nSel = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
                this.checkBoxSelectionModule.checkAllParent = null;
                this.showSelectAll = true;
                this.selectAllText = l10nSel.getConstant("selectAllText");
                this.unSelectAllText = l10nSel.getConstant("selectAllText");
                this.popupWrapper = this.list;
              }
              this.notify("selectAll", {});
              this.checkSelectAll();
            }
            if (!isNullOrUndefined(showCheckbox)) {
              this.showCheckbox(showCheckbox);
            }
            if (this.selectionSettings.showCheckbox) {
              this.setCheckboxPosition();
            }
            break;
          }
          case "dataSource":
            this.isDataSourceUpdate = true;
            this.jsonData = [].slice.call(this.dataSource);
            break;
        }
      }
    };
    var ListBox_1;
    __decorate33([
      Property("")
    ], ListBox2.prototype, "cssClass", void 0);
    __decorate33([
      Property([])
    ], ListBox2.prototype, "value", void 0);
    __decorate33([
      Property("")
    ], ListBox2.prototype, "height", void 0);
    __decorate33([
      Property(true)
    ], ListBox2.prototype, "enabled", void 0);
    __decorate33([
      Property(false)
    ], ListBox2.prototype, "enablePersistence", void 0);
    __decorate33([
      Property(false)
    ], ListBox2.prototype, "allowDragAndDrop", void 0);
    __decorate33([
      Property(1e3)
    ], ListBox2.prototype, "maximumSelectionLength", void 0);
    __decorate33([
      Property(false)
    ], ListBox2.prototype, "allowFiltering", void 0);
    __decorate33([
      Property("")
    ], ListBox2.prototype, "scope", void 0);
    __decorate33([
      Property(true)
    ], ListBox2.prototype, "ignoreCase", void 0);
    __decorate33([
      Property(null)
    ], ListBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate33([
      Property("None")
    ], ListBox2.prototype, "sortOrder", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "beforeItemRender", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "filtering", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "select", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "change", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "beforeDrop", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "dragStart", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "drag", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "drop", void 0);
    __decorate33([
      Event()
    ], ListBox2.prototype, "dataBound", void 0);
    __decorate33([
      Property(null)
    ], ListBox2.prototype, "groupTemplate", void 0);
    __decorate33([
      Property("Request failed")
    ], ListBox2.prototype, "actionFailureTemplate", void 0);
    __decorate33([
      Property(1e3)
    ], ListBox2.prototype, "zIndex", void 0);
    __decorate33([
      Property(false)
    ], ListBox2.prototype, "ignoreAccent", void 0);
    __decorate33([
      Complex({}, ToolbarSettings)
    ], ListBox2.prototype, "toolbarSettings", void 0);
    __decorate33([
      Complex({}, SelectionSettings)
    ], ListBox2.prototype, "selectionSettings", void 0);
    ListBox2 = ListBox_1 = __decorate33([
      NotifyPropertyChanges
    ], ListBox2);
    return ListBox2;
  }(DropDownBase)
);
var listBoxClasses = {
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  clearIcon: "e-clear-icon"
};

// node_modules/@syncfusion/ej2-dropdowns/src/mention/mention.js
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate34 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Mention = (
  /** @class */
  function(_super) {
    __extends37(Mention2, _super);
    function Mention2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Mention2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "minLength":
            this.minLength = newProp.minLength;
            break;
          case "suffixText":
            this.suffixText = newProp.suffixText;
            break;
          case "allowSpaces":
            this.allowSpaces = newProp.allowSpaces;
            break;
          case "mentionChar":
            this.mentionChar = newProp.mentionChar;
            break;
          case "showMentionChar":
            this.showMentionChar = newProp.showMentionChar;
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
        }
      }
    };
    Mention2.prototype.updateCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      this.setCssClass(newClass, [this.inputElement], oldClass);
      if (this.popupObj) {
        this.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    Mention2.prototype.setCssClass = function(cssClass2, elements, oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
        addClass(elements, cssClass2.split(" "));
      }
    };
    Mention2.prototype.initializeData = function() {
      this.isSelected = false;
      this.isFiltered = false;
      this.beforePopupOpen = false;
      this.initRemoteRender = false;
      this.isListResetted = false;
      this.isPopupOpen = false;
      this.isCollided = false;
      this.lineBreak = false;
      this.isRTE = false;
      this.keyEventName = "mousedown";
    };
    Mention2.prototype.preRender = function() {
      this.initializeData();
      _super.prototype.preRender.call(this);
    };
    Mention2.prototype.render = function() {
      var isSelector = typeof this.target === "string";
      this.inputElement = !isNullOrUndefined(this.target) ? this.checkAndUpdateInternalComponent(isSelector ? document.querySelector(this.target) : this.target) : this.element;
      if (this.isContentEditable(this.inputElement)) {
        this.inputElement.setAttribute("contenteditable", "true");
        addClass([this.inputElement], ["e-mention"]);
        if (isNullOrUndefined(this.target)) {
          addClass([this.inputElement], ["e-editable-element"]);
        }
      }
      this.inputElement.setAttribute("role", "textbox");
      this.inputElement.setAttribute("aria-label", "mention");
      this.queryString = this.elementValue();
      this.wireEvent();
    };
    Mention2.prototype.wireEvent = function() {
      EventHandler.add(this.inputElement, "keyup", this.onKeyUp, this);
      this.bindCommonEvent();
    };
    Mention2.prototype.unWireEvent = function() {
      EventHandler.remove(this.inputElement, "keyup", this.onKeyUp);
      this.unBindCommonEvent();
    };
    Mention2.prototype.bindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.addEventListener("keydown", this.keyDownHandler.bind(this), !this.isRTE);
      }
    };
    Mention2.prototype.hideSpinner = function() {
      this.hideWaitingSpinner();
    };
    Mention2.prototype.hideWaitingSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
      }
      if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {
        detach(this.spinnerTemplateElement);
      }
    };
    Mention2.prototype.checkAndUpdateInternalComponent = function(targetElement) {
      if (!this.isVue && targetElement.classList.contains("e-richtexteditor")) {
        return targetElement.querySelector(".e-content");
      }
      if (this.isVue && targetElement.nodeName === "TEXTAREA" && targetElement.classList.contains("e-rte-hidden")) {
        var parentElement = targetElement.parentElement;
        if (parentElement && parentElement.classList.contains("e-richtexteditor")) {
          return parentElement.querySelector(".e-content");
        }
      }
      if (targetElement && targetElement.parentElement && targetElement.parentElement.classList.contains("e-rte-content")) {
        this.isRTE = true;
        this.keyEventName = "click";
      }
      return targetElement;
    };
    Mention2.prototype.showWaitingSpinner = function() {
      if (!isNullOrUndefined(this.popupObj)) {
        if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {
          this.spinnerElement = this.popupObj.element;
          createSpinner({
            target: this.spinnerElement,
            width: Browser.isDevice ? "16px" : "14px"
          }, this.createElement);
          showSpinner(this.spinnerElement);
        }
        if (!isNullOrUndefined(this.spinnerTemplate)) {
          this.setSpinnerTemplate();
        }
      }
    };
    Mention2.prototype.keyDownHandler = function(e) {
      var isKeyAction = true;
      switch (e.keyCode) {
        case 38:
          e.action = e.altKey ? "hide" : "up";
          break;
        case 40:
          e.action = e.altKey ? "open" : "down";
          break;
        case 33:
          e.action = "pageUp";
          break;
        case 34:
          e.action = "pageDown";
          break;
        case 36:
          e.action = "home";
          break;
        case 35:
          e.action = "end";
          break;
        case 9:
          e.action = e.shiftKey ? "close" : "tab";
          break;
        case 27:
          e.action = "escape";
          break;
        case 32:
          e.action = "space";
          break;
        case 13:
          e.action = "enter";
          break;
        default:
          isKeyAction = false;
          break;
      }
      if (isKeyAction) {
        this.keyActionHandler(e);
      }
    };
    Mention2.prototype.keyActionHandler = function(e) {
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      var isTabAction = e.action === "tab" || e.action === "close";
      if (this.list === void 0 && !this.isRequested && !isTabAction && e.action !== "escape" && e.action !== "space" && this.mentionChar.charCodeAt(0) === this.getLastLetter(this.getTextRange()).charCodeAt(0)) {
        this.renderList();
      }
      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
        return;
      }
      if (e.action === "escape") {
        e.preventDefault();
      }
      this.isSelected = e.action === "escape" ? false : this.isSelected;
      switch (e.action) {
        case "down":
        case "up":
          this.isUpDownKey = true;
          this.updateUpDownAction(e);
          break;
        case "tab":
          if (this.isPopupOpen) {
            e.preventDefault();
            var li = this.list.querySelector("." + dropDownBaseClasses.selected);
            if (li) {
              this.setSelection(li, e);
            }
            if (this.isPopupOpen) {
              this.hidePopup(e);
            }
          }
          break;
        case "enter":
          if (this.isPopupOpen) {
            e.preventDefault();
            if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {
              this.updateSelectedItem(this.selectedLI, e, false, true);
            }
          }
          break;
        case "escape":
          if (this.isPopupOpen) {
            this.hidePopup(e);
          }
          break;
      }
    };
    Mention2.prototype.updateUpDownAction = function(e) {
      if (this.fields.disabled && this.list && this.list.querySelectorAll(".e-list-item:not(.e-disabled)").length === 0) {
        return;
      }
      var focusEle = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (this.isSelectFocusItem(focusEle)) {
        this.setSelection(focusEle, e);
      } else if (!isNullOrUndefined(this.liCollections)) {
        var li = this.list.querySelector("." + dropDownBaseClasses.selected);
        if (!isNullOrUndefined(li)) {
          var value = this.getFormattedValue(li.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
        }
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        var startIndex = 0;
        startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        }
      }
      var itemIndex;
      for (var index = 0; index < this.liCollections.length; index++) {
        if (this.liCollections[index].classList.contains(dropDownBaseClasses.focus) || this.liCollections[index].classList.contains(dropDownBaseClasses.selected)) {
          itemIndex = index;
          break;
        }
      }
      if (itemIndex != null && this.isDisabledElement(this.liCollections[itemIndex])) {
        this.updateUpDownAction(e);
      }
      if (this.isPopupOpen) {
        e.preventDefault();
      }
    };
    Mention2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    Mention2.prototype.unBindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.removeEventListener("keydown", this.keyDownHandler.bind(this), !this.isRTE);
      }
    };
    Mention2.prototype.onKeyUp = function(e) {
      var rangetextContent;
      if (this.isUpDownKey && this.isPopupOpen && e.keyCode === 229) {
        this.isUpDownKey = false;
        return;
      }
      this.isTyped = e.code !== "Enter" && e.code !== "Space" && e.code !== "ArrowDown" && e.code !== "ArrowUp" ? true : false;
      var isRteImage = document.activeElement.parentElement && document.activeElement.parentElement.querySelector(".e-rte-image") ? true : false;
      if (document.activeElement != this.inputElement && !isRteImage) {
        this.inputElement.focus();
      }
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
        rangetextContent = this.range.startContainer.textContent.split("");
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      var lastTwoLetters = this.mentionChar.toString() + this.mentionChar.toString();
      var Regex = new RegExp(this.mentionChar.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g");
      var charRegex = new RegExp("[a-zA-Z]", "g");
      if (e.key === "Shift" || e.keyCode === 37 || e.keyCode === 39) {
        return;
      }
      if (this.beforePopupOpen && this.isPopupOpen && lastWordRange == lastTwoLetters) {
        this.hidePopup();
        return;
      }
      if (!currentRange || !lastWordRange || e.code === "Enter" || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.previousElementSibling.tagName !== "BR" && this.range.startContainer.textContent.split("").length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf("") === -1 || this.range.startContainer.nodeType === 1)) {
        if (this.isPopupOpen && this.allowSpaces && currentRange && currentRange.trim() !== "" && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1 && !this.isMatchedText() && (currentRange.length > 1 && currentRange.replace(/\u00A0/g, " ").charAt(currentRange.length - 2) !== " ") && (this.list && this.list.querySelectorAll("ul").length > 0) && e.code !== "Enter") {
          this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
          this.searchLists(e);
        } else if (this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && (e.code !== "ArrowDown" && e.code !== "ArrowUp")) {
          this.hidePopup();
          this.lineBreak = true;
        }
        return;
      }
      if (lastWordRange.includes(this.mentionChar)) {
        this.queryString = lastWordRange.replace(this.mentionChar, "");
      }
      if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== "" && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {
        this.searchLists(e);
        if (!this.isPopupOpen && this.queryString.length >= this.minLength) {
          if (!this.isContentEditable(this.inputElement)) {
            this.showPopup();
          } else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {
            this.showPopup();
          }
        }
      } else if (lastWordRange.indexOf(this.mentionChar) === 0 && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj || (isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) || !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element)))) {
        if (this.initRemoteRender && this.list && this.list.classList.contains("e-nodata")) {
          this.searchLists(e);
        }
        this.resetList(this.dataSource, this.fields);
        if (isNullOrUndefined(this.list)) {
          this.initValue();
        }
        if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.queryString.length >= this.minLength) {
          this.didPopupOpenByTypingInitialChar = true;
          this.showPopup();
          if (this.initRemoteRender && this.list.querySelectorAll("li").length === 0) {
            this.showWaitingSpinner();
          }
          this.lineBreak = false;
        }
      } else if (this.allowSpaces && this.queryString !== "" && currentRange && currentRange.trim() !== "" && currentRange.replace(" ", " ").lastIndexOf(" ") < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) || this.liCollections && this.liCollections.length > 0)) {
        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
        this.searchLists(e);
      } else if (this.queryString === "" && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.searchLists(e);
        if (!this.isListResetted) {
          this.resetList(this.dataSource, this.fields);
        }
      }
      this.isListResetted = false;
    };
    Mention2.prototype.isMatchedText = function() {
      var isMatched = false;
      for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {
        if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace(" ", " ").trim() === this.liCollections[i].getAttribute("data-value").toLowerCase()) {
          isMatched = true;
        }
      }
      return isMatched;
    };
    Mention2.prototype.getCurrentRange = function() {
      this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);
      return this.range;
    };
    Mention2.prototype.searchLists = function(e) {
      var _this = this;
      this.isDataFetched = false;
      if (isNullOrUndefined(this.list)) {
        _super.prototype.render.call(this);
        this.unWireListEvents();
        this.wireListEvents();
      }
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.queryString,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isFiltered = true;
          _this.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this.isFiltered && !eventArgs2.preventDefaultAction) {
          _this.filterAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    Mention2.prototype.filterAction = function(dataSource, query, fields) {
      this.beforePopupOpen = true;
      if (this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query);
        this.isListResetted = true;
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.beforePopupOpen = false;
      }
      this.setDataIndex();
      this.renderReactTemplates();
    };
    Mention2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isActive) {
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.inputElement.id + "_options", "role": "listbox", "aria-hidden": "false" });
        }
        var focusItem = this.fields.disabled ? ulElement.querySelector("." + dropDownBaseClasses.li + ":not(.e-disabled)") : ulElement.querySelector("." + dropDownBaseClasses.li);
        if (focusItem) {
          focusItem.classList.add(dropDownBaseClasses.selected);
          this.selectedLI = focusItem;
          var value = this.getFormattedValue(focusItem.getAttribute("data-value"));
          this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);
        }
        if (this.beforePopupOpen && this.isPopupOpen) {
          if (!isNullOrUndefined(this.popupObj.element)) {
            this.popupObj.element.remove();
          }
          this.renderPopup();
        }
      }
    };
    Mention2.prototype.setDataIndex = function() {
      for (var i = 0; this.liCollections && i < this.liCollections.length; i++) {
        this.liCollections[i].setAttribute("data-index", i.toString());
      }
    };
    Mention2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            if (_this.inputElement.tagName === _this.getNgDirective() && _this.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }
          itemCreated_1.apply(_this, [e]);
        };
      }
      return fields;
    };
    Mention2.prototype.elementValue = function() {
      if (!this.isContentEditable(this.inputElement)) {
        return this.inputElement.value.replace(this.mentionChar, "");
      } else {
        return this.inputElement.textContent.replace(this.mentionChar, "");
      }
    };
    Mention2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? this.elementValue() : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount)) {
        if (this.suggestionCount !== 25) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      return filterQuery;
    };
    Mention2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    Mention2.prototype.getTextRange = function() {
      var text;
      if (!this.isContentEditable(this.inputElement)) {
        var component = this.inputElement;
        if (!isNullOrUndefined(component)) {
          var startPos = component.selectionStart;
          if (component.value && startPos >= 0) {
            text = component.value.substring(0, startPos);
          }
        }
      } else {
        if (this.range) {
          var selectedElem = this.range.startContainer;
          if (!isNullOrUndefined(selectedElem)) {
            var workingNodeContent = selectedElem.textContent;
            var selectStartOffset = this.range.startOffset;
            if (workingNodeContent && selectStartOffset >= 0) {
              text = workingNodeContent.substring(0, selectStartOffset);
            }
          }
        }
      }
      return text;
    };
    Mention2.prototype.getLastLetter = function(text) {
      if (isNullOrUndefined(text)) {
        return "";
      }
      var textValue = text.replace(/\u00A0/g, " ");
      var words = textValue.split(/\s+/);
      var wordCnt = words.length - 1;
      return words[wordCnt].trim();
    };
    Mention2.prototype.isContentEditable = function(element) {
      return element && element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA";
    };
    Mention2.prototype.showPopup = function() {
      this.beforePopupOpen = true;
      if (document.activeElement != this.inputElement) {
        this.inputElement.focus();
      }
      this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : "";
      this.didPopupOpenByTypingInitialChar = false;
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      if (!this.isTyped) {
        this.resetList(this.dataSource, this.fields);
      }
      if (isNullOrUndefined(this.list)) {
        this.initValue();
      }
      this.renderPopup();
      attributes(this.inputElement, { "aria-activedescendant": this.selectedElementID });
      if (this.selectedElementID == null) {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    Mention2.prototype.hidePopup = function(e) {
      this.removeSelection();
      this.closePopup(0, e);
    };
    Mention2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.inputElement.removeAttribute("aria-owns");
      this.inputElement.removeAttribute("aria-activedescendant");
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("closed", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && _this.popupObj) {
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };
    Mention2.prototype.renderPopup = function() {
      var _this = this;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle_1;
          if (isNullOrUndefined(_this.target)) {
            popupEle_1 = _this.createElement("div", {
              id: _this.inputElement.id + "_popup",
              className: "e-mention e-popup " + (_this.cssClass != null ? _this.cssClass : "")
            });
          } else {
            popupEle_1 = _this.element;
            if (_this.cssClass != null) {
              addClass([popupEle_1], _this.cssClass.split(" "));
            }
          }
          if (!isNullOrUndefined(_this.target)) {
            popupEle_1.id = _this.inputElement.id + "_popup";
          }
          _this.listHeight = formatUnit(_this.popupHeight);
          if (!isNullOrUndefined(_this.list.querySelector("li")) && !_this.initRemoteRender) {
            var li = _this.list.querySelector("." + dropDownBaseClasses.focus);
            if (!isNullOrUndefined(li)) {
              _this.selectedLI = li;
              var value = _this.getFormattedValue(li.getAttribute("data-value"));
              _this.selectEventCallback(li, _this.getDataByValue(value), value, true);
            }
          }
          append([_this.list], popupEle_1);
          if (_this.inputElement.parentElement) {
            var rteRootElement = _this.inputElement.parentElement.closest(".e-richtexteditor");
            if (rteRootElement && popupEle_1.firstElementChild && popupEle_1.firstElementChild.childElementCount > 0) {
              popupEle_1.firstElementChild.setAttribute("aria-owns", rteRootElement.id);
              addClass([popupEle_1], "e-rte-elements");
            }
          }
          if (!_this.popupObj || !document.body.contains(_this.popupObj.element) || !document.contains(popupEle_1) && isNullOrUndefined(_this.target)) {
            document.body.appendChild(popupEle_1);
          }
          var coordinates_1;
          popupEle_1.style.visibility = "hidden";
          _this.setHeight(popupEle_1);
          var offsetValue = 0;
          var left = 0;
          _this.initializePopup(popupEle_1, offsetValue, left);
          _this.checkCollision(popupEle_1);
          popupEle_1.style.visibility = "visible";
          var popupLeft_1 = popupEle_1.parentElement.offsetWidth - popupEle_1.offsetWidth;
          var popupHeight_1 = popupEle_1.offsetHeight;
          addClass([popupEle_1], ["e-mention", "e-popup", "e-popup-close"]);
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          attributes(_this.inputElement, { "aria-owns": _this.inputElement.id + "_options", "aria-activedescendant": _this.selectedElementID });
          if (_this.selectedElementID == null) {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, cancel: false, animation: animModel };
          _this.trigger("opened", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              _this.renderReactTemplates();
              if (_this.popupObj) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.inputElement : null);
              }
              if (isNullOrUndefined(_this.getTriggerCharPosition())) {
                return;
              }
              coordinates_1 = _this.getCoordinates(_this.inputElement, _this.getTriggerCharPosition());
              if (!_this.isCollided) {
                popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(coordinates_1.left.toString(), "px;\nposition: absolute;\n display: block;");
              } else {
                if (_this.collision.length > 0 && _this.collision.indexOf("right") > -1 && _this.collision.indexOf("bottom") === -1) {
                  popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(popupLeft_1.toString(), "px;\nposition: absolute;\n display: block;");
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") === -1) {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString()));
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") > -1) {
                  popupEle_1.style.left = formatUnit(popupLeft_1);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString()));
                } else {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(_this.popupHeight.toString()));
                }
                _this.isCollided = false;
                _this.collision = [];
              }
              popupEle_1.style.width = _this.popupWidth !== "100%" && !isNullOrUndefined(_this.popupWidth) ? formatUnit(_this.popupWidth) : "auto";
              _this.setHeight(popupEle_1);
              popupEle_1.style.zIndex = _this.zIndex === 1e3 ? getZindexPartial(popupEle_1).toString() : _this.zIndex.toString();
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    Mention2.prototype.setHeight = function(popupEle) {
      if (this.popupHeight !== "auto" && this.list) {
        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px";
        popupEle.style.maxHeight = formatUnit(this.popupHeight);
      } else {
        popupEle.style.height = "auto";
      }
    };
    Mention2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "mention")) {
        var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
        this.collision = isCollide(popupEle, null, coordinates.left, coordinates.top);
        if (this.collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
          this.isCollided = true;
        }
        this.popupObj.resolveCollision();
      }
    };
    Mention2.prototype.getTriggerCharPosition = function() {
      var mostRecentTriggerCharPos;
      var currentRange = this.getTextRange();
      if (currentRange !== void 0 && currentRange !== null) {
        mostRecentTriggerCharPos = 0;
        var idx = currentRange.lastIndexOf(this.mentionChar);
        if (idx >= mostRecentTriggerCharPos) {
          mostRecentTriggerCharPos = idx;
        }
      }
      return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;
    };
    Mention2.prototype.initializePopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputElement,
        collision: { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: { X: "left", Y: "bottom" },
        actionOnScroll: "hide",
        zIndex: this.zIndex,
        close: function() {
          _this.destroyPopup();
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          _this.setDataIndex();
        }
      });
    };
    Mention2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    Mention2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.popupObj.destroy();
      if (isNullOrUndefined(this.target)) {
        detach(this.popupObj.element);
      } else {
        this.popupObj.element.innerHTML = "";
        this.popupObj.element.removeAttribute("style");
        this.popupObj.element.removeAttribute("aria-disabled");
      }
      if (this.list.classList.contains("e-nodata")) {
        this.list = null;
      }
    };
    Mention2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id))) {
        this.hidePopup(e);
      }
    };
    Mention2.prototype.getCoordinates = function(element, position) {
      var properties = ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"];
      var div;
      var span;
      var range;
      var globalRange;
      var coordinates;
      var computed;
      var rect;
      if (!this.isContentEditable(this.inputElement)) {
        div = this.createElement("div", { className: "e-form-mirror-div" });
        document.body.appendChild(div);
        computed = getComputedStyle(element);
        div.style.position = "absolute";
        div.style.visibility = "hidden";
        properties.forEach(function(prop) {
          div.style[prop] = computed[prop];
        });
        div.textContent = element.value.substring(0, position);
        if (this.inputElement.nodeName === "INPUT") {
          div.textContent = div.textContent.replace(/\s/g, " ");
        }
        span = this.createElement("span");
        span.textContent = element.value.substring(position) || ".";
        div.appendChild(span);
        rect = element.getBoundingClientRect();
      } else {
        var selectedNodePosition = this.getTriggerCharPosition();
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
          range.setStart(globalRange.startContainer, selectedNodePosition);
          range.setEnd(globalRange.startContainer, selectedNodePosition);
        } else {
          range.setStart(globalRange.startContainer, globalRange.startOffset);
          range.setEnd(globalRange.startContainer, globalRange.endOffset);
        }
        this.isTyped = false;
        range.collapse(false);
        rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();
      }
      var rectTop = rect.top;
      var rectLeft = rect.left;
      var iframes = document.querySelectorAll("iframe");
      if (iframes.length > 0) {
        for (var i = 0; i < iframes.length; i++) {
          var iframe = iframes[i];
          if (iframe.contentDocument && iframe.contentDocument.contains(element)) {
            var iframeRect = iframe.getBoundingClientRect();
            rectTop += iframeRect.top;
            rectLeft += iframeRect.left;
          }
        }
      }
      var doc = document.documentElement;
      var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var width = 0;
      if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {
        for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {
          if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== "") {
            width += this.range.startContainer.childNodes[i].getClientRects()[0].width;
          } else if (this.range.startContainer.childNodes[i].textContent !== "") {
            var span_1 = document.createElement("span");
            span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;
            document.body.appendChild(span_1);
            var textNodeWidth = span_1.offsetWidth;
            document.body.removeChild(span_1);
            width += textNodeWidth;
          }
        }
      }
      if (!this.isContentEditable(this.inputElement)) {
        coordinates = {
          top: rectTop + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element.scrollTop - (this.isCollided ? 10 : 0),
          left: rectLeft + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
        };
        document.body.removeChild(div);
      } else {
        if (this.collision && this.collision.length > 0 && this.collision.indexOf("right") > -1 && this.collision.indexOf("bottom") === -1) {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10),
            left: rectLeft + windowLeft + width
          };
        } else {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),
            left: rectLeft + windowLeft + width
          };
        }
      }
      return coordinates;
    };
    Mention2.prototype.initValue = function() {
      this.isDataFetched = false;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    Mention2.prototype.updateValues = function() {
      var li = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(li)) {
        this.setSelection(li, null);
      }
    };
    Mention2.prototype.renderList = function() {
      _super.prototype.render.call(this);
      this.unWireListEvents();
      this.wireListEvents();
    };
    Mention2.prototype.wireListEvents = function() {
      EventHandler.add(this.list, this.keyEventName, this.onMouseClick, this);
      EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
    };
    Mention2.prototype.unWireListEvents = function() {
      EventHandler.remove(this.list, this.keyEventName, this.onMouseClick);
      EventHandler.remove(this.list, "mouseover", this.onMouseOver);
      EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
    };
    Mention2.prototype.onMouseClick = function(e) {
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li) || this.isDisabledElement(li)) {
        return;
      }
      this.isSelected = true;
      this.setSelection(li, e);
      var delay = 100;
      this.closePopup(delay, e);
      this.inputElement.focus();
      if (!this.isRTE) {
        e.preventDefault();
      }
    };
    Mention2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = this.getFormattedValue(li.getAttribute("data-value"));
      var selectedData = this.getDataByValue(value);
      if (!preventSelect && !isNullOrUndefined(e) && !(e.action === "down" || e.action === "up")) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
            _this.isSelected = false;
            _this.isSelectCancel = true;
          } else {
            _this.selectEventCallback(li, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    Mention2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };
    Mention2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {
        this.setScrollPosition(e);
      }
      if (e && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      if (isNullOrUndefined(e) || this.setValue(e)) {
        return;
      }
    };
    Mention2.prototype.setScrollPosition = function(e) {
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    Mention2.prototype.scrollBottom = function(isInitial) {
      if (!isNullOrUndefined(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    Mention2.prototype.scrollTop = function() {
      if (!isNullOrUndefined(this.selectedLI)) {
        var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
        nextOffset = this.fields.groupBy && nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop;
        }
      }
    };
    Mention2.prototype.selectEventCallback = function(li, selectedData, value, selectLi) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      if (selectLi) {
        addClass([li], dropDownBaseClasses.selected);
      }
      li.setAttribute("aria-selected", "true");
      this.activeIndex = this.getIndexByValue(value);
    };
    Mention2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.setValue = function(e) {
      if (!this.isReact) {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate();
        }
        this.updateMentionValue(e);
        return true;
      } else {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate(e);
        } else {
          this.updateMentionValue(e);
        }
        return true;
      }
    };
    Mention2.prototype.updateMentionValue = function(e) {
      var dataItem = this.getItemData();
      var textSuffix;
      var value;
      var endPos;
      var range;
      var globalRange;
      var selection = this.inputElement.ownerDocument.getSelection();
      var startPos = this.getTriggerCharPosition();
      textSuffix = typeof this.suffixText === "string" ? this.suffixText : "";
      if (this.isSelectCancel) {
        this.isSelectCancel = false;
        return;
      }
      if (dataItem.text !== null) {
        value = this.mentionVal(dataItem.text);
      }
      if (!this.isContentEditable(this.inputElement)) {
        var myField = this.inputElement;
        var currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);
        value += textSuffix;
        endPos = startPos + this.mentionChar.length;
        endPos += currentTriggerSnippet.length;
        myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);
        myField.selectionStart = startPos + value.length;
        myField.selectionEnd = startPos + value.length;
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.onChangeEvent(e);
      } else {
        endPos = this.getTriggerCharPosition() + this.mentionChar.length;
        if (this.range && this.range.startContainer.textContent.trim() !== this.mentionChar) {
          endPos = this.range.endOffset;
        }
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.mentionChar) {
          range.setStart(globalRange.startContainer, startPos);
          range.setEnd(globalRange.startContainer, endPos);
        } else {
          if (globalRange.commonAncestorContainer.textContent.trim() !== "" && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
            range.setStart(globalRange.startContainer, globalRange.startOffset - 1);
            range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);
          } else {
            range.setStart(globalRange.startContainer, globalRange.startOffset);
            range.setEnd(globalRange.startContainer, globalRange.endOffset);
          }
        }
        this.isTyped = false;
        range.deleteContents();
        range.startContainer.parentElement.normalize();
        var element = this.createElement("div");
        element.innerHTML = value;
        var frag = document.createDocumentFragment();
        var node = void 0;
        var lastNode = void 0;
        while (node = element.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          range.setStartAfter(lastNode);
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        if (!isNullOrUndefined(e.pointerType) && e.pointerType === "mouse") {
          var event_1 = new CustomEvent("content-changed", { detail: { click: true } });
          this.inputElement.dispatchEvent(event_1);
        }
        ;
        this.onChangeEvent(e);
      }
    };
    Mention2.prototype.mentionVal = function(value) {
      var showChar = this.showMentionChar ? this.mentionChar : "";
      if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {
        value = this.displayTempElement.innerHTML;
      }
      if (this.isContentEditable(this.inputElement)) {
        if (Browser.isAndroid) {
          return '<span contenteditable="true" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : "");
        } else {
          return '<span contenteditable="false" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : "");
        }
      } else {
        return showChar + value;
      }
    };
    Mention2.prototype.setDisplayTemplate = function(e) {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["displayTemplate"]);
        if (this.displayTempElement) {
          detach(this.displayTempElement);
          this.displayTempElement = null;
        }
      }
      if (!this.displayTempElement) {
        this.displayTempElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.displayTempElement.innerHTML = "";
      }
      compiledString = compile(this.displayTemplate);
      var displayCompTemp = compiledString(this.itemData, this, "displayTemplate", this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);
      if (displayCompTemp && displayCompTemp.length > 0) {
        append(displayCompTemp, this.displayTempElement);
      }
      if (!this.isReact) {
        this.renderTemplates();
      } else {
        this.renderTemplates(function() {
          _this.updateMentionValue(e);
        });
      }
    };
    Mention2.prototype.renderTemplates = function(callBack) {
      this.renderReactTemplates(callBack);
    };
    Mention2.prototype.setSpinnerTemplate = function() {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["spinnerTemplate"]);
        if (this.spinnerTemplateElement) {
          detach(this.spinnerTemplateElement);
          this.spinnerTemplateElement = null;
        }
      }
      if (!this.spinnerTemplateElement) {
        this.spinnerTemplateElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.spinnerTemplateElement.innerHTML = "";
      }
      compiledString = compile(this.spinnerTemplate);
      var spinnerCompTemp = compiledString(null, this, "spinnerTemplate", this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);
      if (spinnerCompTemp && spinnerCompTemp.length > 0) {
        for (var i = 0; i < spinnerCompTemp.length; i++) {
          this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);
        }
      }
      if (!this.isReact) {
        this.renderTemplates();
        this.popupObj.element.appendChild(this.spinnerTemplateElement);
      } else {
        this.renderTemplates(function() {
          _this.popupObj.element.appendChild(_this.spinnerTemplateElement);
        });
      }
    };
    Mention2.prototype.onChangeEvent = function(eve) {
      this.isSelected = false;
      var items = this.detachMentionChanges(this.itemData);
      var preItems;
      if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
        preItems = Object.defineProperties({}, {
          value: {
            value: this.previousItemData,
            enumerable: true
          },
          text: {
            value: this.previousItemData,
            enumerable: true
          }
        });
      } else {
        preItems = this.previousItemData;
      }
      var eventArgs = {
        e: eve,
        item: this.item,
        itemData: items,
        previousItem: this.previousSelectedLI,
        previousItemData: preItems,
        isInteracted: eve ? true : false,
        value: this.item.innerHTML,
        element: this.inputElement
      };
      this.trigger("change", eventArgs);
    };
    Mention2.prototype.detachMentionChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    Mention2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    Mention2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    Mention2.prototype.setHover = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    Mention2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    Mention2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    Mention2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    Mention2.prototype.search = function(text, positionX, positionY) {
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      if (this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.ignoreCase && text === lastWordRange) {
        this.resetList(this.dataSource, this.fields);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        return;
      }
      if (isNullOrUndefined(this.list)) {
        this.renderList();
        this.renderPopup();
      } else {
        this.showPopup();
      }
      this.popupObj.element.style.left = formatUnit(positionX);
      this.popupObj.element.style.top = formatUnit(positionY);
    };
    Mention2.prototype.destroy = function() {
      this.hidePopup();
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.inputElement && !this.inputElement.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      this.previousSelectedLI = null;
      this.item = null;
      this.selectedLI = null;
      this.popupObj = null;
      _super.prototype.destroy.call(this);
    };
    Mention2.prototype.getLocaleName = function() {
      return "mention";
    };
    Mention2.prototype.getNgDirective = function() {
      return "EJS-MENTION";
    };
    Mention2.prototype.getModuleName = function() {
      return "mention";
    };
    __decorate34([
      Property(null)
    ], Mention2.prototype, "cssClass", void 0);
    __decorate34([
      Property("@")
    ], Mention2.prototype, "mentionChar", void 0);
    __decorate34([
      Property(false)
    ], Mention2.prototype, "showMentionChar", void 0);
    __decorate34([
      Property(false)
    ], Mention2.prototype, "allowSpaces", void 0);
    __decorate34([
      Property(null)
    ], Mention2.prototype, "suffixText", void 0);
    __decorate34([
      Property(25)
    ], Mention2.prototype, "suggestionCount", void 0);
    __decorate34([
      Property(0)
    ], Mention2.prototype, "minLength", void 0);
    __decorate34([
      Property("None")
    ], Mention2.prototype, "sortOrder", void 0);
    __decorate34([
      Property(true)
    ], Mention2.prototype, "ignoreCase", void 0);
    __decorate34([
      Property(false)
    ], Mention2.prototype, "highlight", void 0);
    __decorate34([
      Property()
    ], Mention2.prototype, "locale", void 0);
    __decorate34([
      Property("auto")
    ], Mention2.prototype, "popupWidth", void 0);
    __decorate34([
      Property("300px")
    ], Mention2.prototype, "popupHeight", void 0);
    __decorate34([
      Property(null)
    ], Mention2.prototype, "displayTemplate", void 0);
    __decorate34([
      Property(null)
    ], Mention2.prototype, "itemTemplate", void 0);
    __decorate34([
      Property("No records found")
    ], Mention2.prototype, "noRecordsTemplate", void 0);
    __decorate34([
      Property(null)
    ], Mention2.prototype, "spinnerTemplate", void 0);
    __decorate34([
      Property()
    ], Mention2.prototype, "target", void 0);
    __decorate34([
      Property([])
    ], Mention2.prototype, "dataSource", void 0);
    __decorate34([
      Property(null)
    ], Mention2.prototype, "query", void 0);
    __decorate34([
      Property("Contains")
    ], Mention2.prototype, "filterType", void 0);
    __decorate34([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings3)
    ], Mention2.prototype, "fields", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "actionBegin", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "actionComplete", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "actionFailure", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "change", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "beforeOpen", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "opened", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "closed", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "select", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "filtering", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "created", void 0);
    __decorate34([
      Event()
    ], Mention2.prototype, "destroyed", void 0);
    Mention2 = __decorate34([
      NotifyPropertyChanges
    ], Mention2);
    return Mention2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/recurrence-editor.js
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate35 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HEADER6 = "e-editor";
var INPUTWARAPPER = "e-input-wrapper";
var INPUTWARAPPERSIDE = "e-input-wrapper-side";
var REPEATELEMENT = "e-repeat-element";
var REPEATINTERVAL = "e-repeat-interval";
var INTERVALCLASS = "e-interval";
var DAYWRAPPER = "e-days";
var WEEKWRAPPER = "e-non-week";
var WEEKPOSITION = "e-week-position";
var DAYPOSITION = "e-day-position";
var YEAREXPANDERWRAPPER = "e-year-expander";
var YEAREXPANDERELEMENT = "e-year-expander-element";
var MONETHEXPANDERWRAPPER = "e-month-expander";
var MONETHEXPANDWRAPPER = "e-month-expand-wrapper";
var MONTHEXPANDERELEMENT = "e-month-expander-element";
var MONTHEXPANDERCHECKBOXWRAPPER = "e-month-expander-checkbox-wrapper";
var FORMLEFT = "e-form-left";
var FORMRIGHT = "e-form-right";
var MONTHDAYWRAPPER = "e-month-day";
var MONTHEXPANNDERELEM = "e-month-expander-wrapper";
var MONTHPOS = "e-month-pos";
var MONTHWEEK = "e-month-week";
var ENDON = "e-end-on";
var MONTHEXPANDERLABEL = "e-month-expander-label";
var WEEKEXPANDERLABEL = "e-week-expander-label";
var ENDONLEFT = "e-end-on-left";
var MONTHDAYELEMENT = "e-monthday-element";
var ENDONELEMENT = "e-end-on-element";
var ENDONDATE = "e-end-on-date";
var UNTILDATE = "e-until-date";
var ENDONCOUNTWRAPPER = "e-end-on-count";
var ENDONCOUNT = "e-recurrence-count";
var HIDEWRAPPER = "e-hide-recurrence-element";
var RTLCLASS = "e-rtl";
var PRIMARY3 = "e-primary";
var ACTIVE5 = "e-active";
var RECURRENCETABLE = "e-recurrence-table";
var REPEATCONTENT = "e-repeat-content";
var REPEATCONTENTWRAPPER = "e-repeat-content-wrapper";
var NONE = "none";
var DAILY = "daily";
var WEEKLY = "weekly";
var MONTHLY = "monthly";
var YEARLY = "yearly";
var NEVER = "never";
var UNTIL2 = "until";
var COUNT = "count";
var TEXTFIELD = "text";
var VALUEFIELD = "value";
var LAST = "last";
var REPEAT = "repeat";
var REPEATEVERY = "repeatEvery";
var ON2 = "on";
var END3 = "end";
var RADIOLABEL = "onDay";
var RULEUNTIL = "UNTIL";
var RULEBYDAY = "BYDAY";
var RULEBYMONTHDAY = "BYMONTHDAY";
var RULEBYMONTH = "BYMONTH";
var RULEINTERVAL = "INTERVAL";
var RULECOUNT = "COUNT";
var RULESETPOS = "BYSETPOS";
var RULEFREQ = "FREQ";
var RULEDAILY = "DAILY";
var RULEWEEKLY = "WEEKLY";
var RULEMONTHLY = "MONTHLY";
var RULEYEARLY = "YEARLY";
var RULESUNDAY = "SU";
var RULEMONDAY = "MO";
var RULETUESDAY = "TU";
var RULEWEDNESDAY = "WE";
var RULETHURSDAY = "TH";
var RULEFRIDAY = "FR";
var RULESATURDAY = "SA";
var KEYSUNDAY = "sun";
var KEYMONDAY = "mon";
var KEYTUESDAY = "tue";
var KEYWEDNESDAY = "wed";
var KEYTHURSDAY = "thu";
var KEYFRIDAY = "fri";
var KEYSATURDAY = "sat";
var EQUAL = "=";
var SEMICOLON = ";";
var COMMA = ",";
var FIRST = "first";
var SECOND2 = "second";
var THIRD = "third";
var FOURTH = "fourth";
var contentType = {
  none: "",
  daily: "days",
  weekly: "weeks",
  monthly: "months",
  yearly: "years"
};
var valueData = {
  "sun": RULESUNDAY,
  "mon": RULEMONDAY,
  "tue": RULETUESDAY,
  "wed": RULEWEDNESDAY,
  "thu": RULETHURSDAY,
  "fri": RULEFRIDAY,
  "sat": RULESATURDAY
};
var neverClassList = [DAYWRAPPER, WEEKWRAPPER, ENDON, INTERVALCLASS, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];
var weekClassList = [WEEKWRAPPER];
var monthClassList = [DAYWRAPPER, YEAREXPANDERWRAPPER];
var yearClassList = [DAYWRAPPER];
var dailyClassList = [DAYWRAPPER, WEEKWRAPPER, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];
var noEndClassList = [ENDONDATE, ENDONCOUNTWRAPPER];
var endOnCountClassList = [ENDONDATE];
var endOnDateClassList = [ENDONCOUNTWRAPPER];
var RecurrenceEditor = (
  /** @class */
  function(_super) {
    __extends38(RecurrenceEditor2, _super);
    function RecurrenceEditor2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.defaultLocale = {
        none: "None",
        daily: "Daily",
        weekly: "Weekly",
        monthly: "Monthly",
        month: "Month",
        yearly: "Yearly",
        never: "Never",
        until: "Until",
        count: "Count",
        first: "First",
        second: "Second",
        third: "Third",
        fourth: "Fourth",
        last: "Last",
        repeat: "Repeat",
        repeatEvery: "Repeat every",
        on: "Repeat On",
        end: "End",
        onDay: "Day",
        days: "Day(s)",
        weeks: "Week(s)",
        months: "Month(s)",
        years: "Year(s)",
        every: "every",
        summaryTimes: "time(s)",
        summaryOn: "on",
        summaryUntil: "until",
        summaryRepeat: "Repeats",
        summaryDay: "day(s)",
        summaryWeek: "week(s)",
        summaryMonth: "month(s)",
        summaryYear: "year(s)",
        monthWeek: "Month Week",
        monthPosition: "Month Position",
        monthExpander: "Month Expander",
        yearExpander: "Year Expander",
        repeatInterval: "Repeat Interval"
      };
      _this.renderStatus = false;
      _this.dayButtons = [];
      _this.monthButtons = [];
      return _this;
    }
    RecurrenceEditor2.prototype.startState = function(freq, endOn, startDate) {
      this.showFormElement();
      this.updateForm(freq);
      this.freshOnEndForm();
      this.updateEndOnForm(endOn);
      this.selectMonthDay(startDate);
      this.updateUntilDate(startDate);
      this.onMonthDay.setProperties({ checked: true });
    };
    RecurrenceEditor2.prototype.preRender = function() {
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.calendarUtil = getCalendarUtil(this.calendarMode);
    };
    RecurrenceEditor2.prototype.applyCustomClass = function(cssClass2) {
      if (cssClass2) {
        addClass([this.element], cssClass2.split(" "));
      }
    };
    RecurrenceEditor2.prototype.initialize = function() {
      addClass([this.element], "e-" + this.getModuleName());
      this.renderComponent();
      if (!isNullOrUndefined(this.value) && this.value !== "") {
        this.setRecurrenceRule(this.value);
      } else {
        if (!isNullOrUndefined(this.repeatType.value)) {
          this.startState(this.repeatType.value.toString().toUpperCase(), this.endTypes[0], this.startDate);
          this.updateForm(this.repeatType.value.toString());
        }
        if (this.selectedType > 0) {
          this.setProperties({ value: this.getRecurrenceRule() }, false);
        }
      }
      this.applyCustomClass(this.cssClass);
    };
    RecurrenceEditor2.prototype.triggerChangeEvent = function() {
      var _this = this;
      if (this.renderStatus) {
        var value = this.getRecurrenceRule();
        this.trigger("change", { value }, function(args) {
          return _this.setProperties({ value: args.value }, false);
        });
      }
    };
    RecurrenceEditor2.prototype.resetDayButton = function() {
      var elements = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button"));
      elements.forEach(function(element) {
        return removeClass([element], [ACTIVE5, PRIMARY3]);
      });
    };
    RecurrenceEditor2.prototype.daySelection = function(dayIndex2) {
      this.resetDayButton();
      var days = [0, 1, 2, 3, 4, 5, 6];
      this.rotateArray(days, this.firstDayOfWeek);
      var element = this.element.querySelector("." + DAYWRAPPER + ' button[data-index="' + days.indexOf(dayIndex2) + '"]');
      if (element) {
        addClass([element], [ACTIVE5, PRIMARY3]);
      }
    };
    RecurrenceEditor2.prototype.rtlClass = function(status) {
      if (status) {
        addClass([this.element], RTLCLASS);
      } else {
        removeClass([this.element], RTLCLASS);
      }
    };
    RecurrenceEditor2.prototype.updateUntilDate = function(date) {
      var tempDate = new Date(date.getTime());
      tempDate.setDate(tempDate.getDate() + 60);
      this.untilDateObj.setProperties({ value: tempDate });
    };
    RecurrenceEditor2.prototype.selectMonthDay = function(date) {
      var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];
      this.monthDate.setProperties({ value: this.calendarUtil.getDate(date) });
      this.monthWeekDays.setProperties({ value: valueData[weekday[date.getDay()]] });
      this.monthValue.setProperties({ value: "" + this.calendarUtil.getMonth(date) });
      this.monthWeekPos.setProperties({ value: this.getDayPosition(date) });
      this.daySelection(date.getDay());
    };
    RecurrenceEditor2.prototype.updateForm = function(state) {
      var _this = this;
      this.repeatType.setProperties({ value: state });
      var end = this.element.querySelector("." + ENDON);
      if (state === DAILY) {
        classList(end, [FORMLEFT], [FORMRIGHT]);
      } else {
        classList(end, [FORMRIGHT], [FORMLEFT]);
      }
      switch (state) {
        case NONE:
          neverClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case WEEKLY:
          weekClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case MONTHLY:
          monthClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case YEARLY:
          yearClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case DAILY:
          dailyClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
      }
    };
    RecurrenceEditor2.prototype.updateEndOnForm = function(state) {
      var _this = this;
      this.endType.setProperties({ value: state });
      switch (state) {
        case NEVER:
          noEndClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case UNTIL2:
          endOnDateClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
        case COUNT:
          endOnCountClassList.forEach(function(className) {
            return addClass([_this.element.querySelector("." + className)], HIDEWRAPPER);
          });
          break;
      }
    };
    RecurrenceEditor2.prototype.freshOnEndForm = function() {
      var _this = this;
      noEndClassList.forEach(function(className) {
        var element = _this.element.querySelector("." + className);
        if (element) {
          removeClass([element], HIDEWRAPPER);
        }
      });
    };
    RecurrenceEditor2.prototype.showFormElement = function() {
      var _this = this;
      neverClassList.forEach(function(className) {
        var hideElement = _this.element.querySelector("." + className);
        if (hideElement) {
          removeClass([hideElement], HIDEWRAPPER);
        }
      });
    };
    RecurrenceEditor2.prototype.renderDropdowns = function() {
      var _this = this;
      var self = this;
      this.repeatType = new DropDownList({
        //set the data to dataSource property
        dataSource: this.getRepeatData(),
        floatLabelType: "Always",
        enableRtl: this.enableRtl,
        index: this.selectedType,
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        placeholder: this.localeObj.getConstant(REPEAT),
        htmlAttributes: { "title": this.localeObj.getConstant(REPEAT) },
        change: function(args) {
          self.setProperties({ selectedType: _this.frequencies.indexOf(args.value) }, false);
          self.element.querySelector("." + REPEATCONTENT).innerHTML = self.localeObj.getConstant(contentType[args.value]);
          self.showFormElement();
          self.updateForm(args.value);
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.repeatType.appendTo(this.element.querySelector("." + REPEATELEMENT));
      this.endType = new DropDownList({
        dataSource: this.getEndData(),
        popupWidth: this.getPopupWidth(),
        floatLabelType: "Always",
        placeholder: this.localeObj.getConstant(END3),
        enableRtl: this.enableRtl,
        index: 1,
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        change: function(args) {
          self.freshOnEndForm();
          self.updateEndOnForm(args.value);
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.endType.appendTo(this.element.querySelector("." + ENDONELEMENT));
      var renderDropDownList = function(dropDownData) {
        return new DropDownList({
          dataSource: dropDownData,
          popupWidth: _this.getPopupWidth(),
          enableRtl: _this.enableRtl,
          fields: {
            text: TEXTFIELD,
            value: VALUEFIELD
          },
          index: 1,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          change: function(args) {
            self.onWeekDay.setProperties({ checked: true });
            self.resetFormValues();
            self.triggerChangeEvent();
          }
        });
      };
      this.monthWeekPos = renderDropDownList(this.getMonthPosData());
      this.monthWeekPos.appendTo(this.element.querySelector("." + MONTHPOS));
      this.monthWeekDays = renderDropDownList(this.getDayData("wide"));
      this.monthWeekDays.appendTo(this.element.querySelector("." + MONTHWEEK));
      this.monthValue = new DropDownList({
        dataSource: this.getMonthData(),
        fields: {
          text: TEXTFIELD,
          value: VALUEFIELD
        },
        enableRtl: this.enableRtl,
        index: 7,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        change: function(args) {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.monthValue.appendTo(this.element.querySelector("." + YEAREXPANDERELEMENT));
    };
    RecurrenceEditor2.prototype.setDefaultValue = function() {
      var formelement = [].slice.call(this.element.querySelectorAll(".e-control .e-numerictextbox"));
      for (var _i = 0, formelement_1 = formelement; _i < formelement_1.length; _i++) {
        var element = formelement_1[_i];
        var instance = element.ej2_instances[0];
        if (instance.element.classList.contains(REPEATINTERVAL)) {
          instance.value = 1;
          instance.dataBind();
        } else if (instance.element.classList.contains(ENDONCOUNT)) {
          instance.value = 10;
          instance.dataBind();
        }
      }
    };
    RecurrenceEditor2.prototype.resetFormValues = function() {
      var recurreneElement = [].slice.call(this.element.querySelectorAll('.e-control [type="text"]'));
      for (var _i = 0, recurreneElement_1 = recurreneElement; _i < recurreneElement_1.length; _i++) {
        var element = recurreneElement_1[_i];
        var instance = void 0;
        if (element.classList.contains("e-datepicker")) {
          instance = element.ej2_instances[0];
          if (instance.value) {
            instance.value = instance.value;
            instance.dataBind();
          } else {
            this.updateUntilDate(this.startDate);
          }
        } else if (element.classList.contains("e-dropdownlist")) {
          instance = element.ej2_instances[0];
          instance.index = instance.index || 0;
          instance.dataBind();
        } else if (element.classList.contains("e-numerictextbox")) {
          instance = element.ej2_instances[0];
          var value = void 0;
          if (instance.element.classList.contains(REPEATINTERVAL)) {
            value = 1;
          } else if (instance.element.classList.contains(ENDONCOUNT)) {
            value = 10;
          } else {
            value = this.startDate.getDate();
          }
          instance.value = instance.value || value;
          instance.dataBind();
        }
      }
    };
    RecurrenceEditor2.prototype.getPopupWidth = function() {
      return Browser.isDevice ? "100%" : "auto";
    };
    RecurrenceEditor2.prototype.renderDatePickers = function() {
      var self = this;
      this.untilDateObj = new DatePicker({
        firstDayOfWeek: this.firstDayOfWeek,
        enableRtl: this.enableRtl,
        locale: this.locale,
        min: this.minDate,
        max: this.maxDate,
        format: isNullOrUndefined(this.dateFormat) ? this.getFormat("dateFormats") : this.dateFormat,
        change: function(args) {
          if (args.value) {
            self.triggerChangeEvent();
          }
        }
      });
      this.untilDateObj.appendTo(this.element.querySelector("." + UNTILDATE));
    };
    RecurrenceEditor2.prototype.getFormat = function(formatType) {
      var format;
      if (this.locale === "en" || this.locale === "en-US") {
        format = getValue(formatType + ".short", getDefaultDateObject(this.getCalendarMode()));
      } else {
        format = getValue("main." + this.locale + ".dates.calendars." + this.getCalendarMode() + "." + formatType + ".short", cldrData);
      }
      return format;
    };
    RecurrenceEditor2.prototype.dayButtonRender = function() {
      var _this = this;
      var btns = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button"));
      var self = this;
      for (var _i = 0, btns_1 = btns; _i < btns_1.length; _i++) {
        var btn = btns_1[_i];
        var button = new Button({ isToggle: true, enableRtl: this.enableRtl }, btn);
        this.dayButtons.push(button);
        EventHandler.add(btn, "click", function(args) {
          var btns2 = [].slice.call(_this.element.querySelectorAll("." + DAYWRAPPER + " button." + PRIMARY3));
          var element = args.target;
          if (!element.classList.contains(PRIMARY3)) {
            addClass([element], PRIMARY3);
            self.triggerChangeEvent();
          } else if (btns2.length > 1) {
            removeClass([element], PRIMARY3);
            self.triggerChangeEvent();
          }
        });
      }
    };
    RecurrenceEditor2.prototype.radioButtonRender = function() {
      var self = this;
      this.onMonthDay = new RadioButton({
        label: this.localeObj.getConstant(RADIOLABEL),
        enableRtl: this.enableRtl,
        name: "monthType",
        value: "day",
        change: function() {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.onMonthDay.appendTo(this.element.querySelector("." + MONTHEXPANDERELEMENT));
      this.monthButtons.push(this.onMonthDay);
      this.onWeekDay = new RadioButton({
        label: this.localeObj.getConstant("monthExpander"),
        cssClass: "e-month-type",
        name: "monthType",
        enableRtl: this.enableRtl,
        value: "daypos",
        change: function() {
          self.resetFormValues();
          self.triggerChangeEvent();
        }
      });
      this.onWeekDay.appendTo(this.element.querySelector("." + MONTHEXPANNDERELEM));
      this.monthButtons.push(this.onWeekDay);
    };
    RecurrenceEditor2.prototype.numericTextboxRender = function() {
      var self = this;
      this.recurrenceCount = new NumericTextBox({
        value: 10,
        format: "#",
        enableRtl: this.enableRtl,
        min: 1,
        max: 999,
        change: function() {
          self.triggerChangeEvent();
        }
      });
      this.recurrenceCount.appendTo(this.element.querySelector("." + ENDONCOUNT));
      this.monthDate = new NumericTextBox({
        value: 1,
        format: "#",
        enableRtl: this.enableRtl,
        min: 1,
        max: 31,
        change: function() {
          self.onMonthDay.setProperties({ checked: true });
          self.triggerChangeEvent();
        }
      });
      this.monthDate.appendTo(this.element.querySelector("." + MONTHDAYWRAPPER));
      this.repeatInterval = new NumericTextBox({
        value: 1,
        format: "#",
        min: 1,
        max: 999,
        enableRtl: this.enableRtl,
        floatLabelType: "Always",
        placeholder: this.localeObj.getConstant(REPEATEVERY),
        change: function() {
          self.triggerChangeEvent();
        }
      });
      this.repeatInterval.appendTo(this.element.querySelector("." + REPEATINTERVAL));
    };
    RecurrenceEditor2.prototype.renderComponent = function() {
      this.setTemplate();
      this.renderDropdowns();
      this.renderDatePickers();
      this.dayButtonRender();
      this.radioButtonRender();
      this.numericTextboxRender();
    };
    RecurrenceEditor2.prototype.rotateArray = function(data, count) {
      var temp;
      for (var index = 0; index < count; index++) {
        temp = data.shift();
        data.push(temp);
      }
    };
    RecurrenceEditor2.prototype.getEndData = function() {
      var self = this;
      var dataSource = [];
      this.endTypes.forEach(function(data) {
        dataSource.push({ text: self.localeObj.getConstant(data), value: data });
      });
      return dataSource;
    };
    RecurrenceEditor2.prototype.getDayPosition = function(date) {
      var temp = new Date(date.getTime());
      var endDate = new Date(date.getTime());
      var day = date.getDay();
      var positionCollection = [];
      temp = this.calendarUtil.getMonthStartDate(temp);
      endDate = this.calendarUtil.getMonthEndDate(endDate);
      while (temp < endDate) {
        if (temp.getDay() === day) {
          positionCollection.push(temp.getTime());
        }
        temp.setDate(temp.getDate() + 1);
      }
      if (positionCollection.indexOf(date.getTime()) === positionCollection.length - 1) {
        return -1;
      }
      return positionCollection.indexOf(date.getTime()) + 1;
    };
    RecurrenceEditor2.prototype.getRepeatData = function() {
      var data = [];
      var self = this;
      this.frequencies.forEach(function(element) {
        var textValue = element === NONE ? NEVER : element;
        data.push({ text: self.localeObj.getConstant(textValue), value: element });
      });
      return data;
    };
    RecurrenceEditor2.prototype.getMonthPosData = function() {
      var monthpos = [FIRST, SECOND2, THIRD, FOURTH, LAST];
      var monthposValue = {
        first: 1,
        second: 2,
        third: 3,
        fourth: 4,
        last: -1
      };
      var self = this;
      var dataSource = [];
      monthpos.forEach(function(data) {
        dataSource.push({ text: self.localeObj.getConstant(data), value: monthposValue["" + data] });
      });
      return dataSource;
    };
    RecurrenceEditor2.prototype.getDayData = function(format) {
      var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];
      var dayData = [];
      var cldrObj;
      this.rotateArray(weekday, this.firstDayOfWeek);
      if (this.locale === "en" || this.locale === "en-US") {
        var nameSpaceString = "days.stand-alone.";
        cldrObj = getValue(nameSpaceString + format, getDefaultDateObject(this.getCalendarMode()));
      } else {
        var nameSpaceString = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".days.stand-alone." + format;
        cldrObj = getValue(nameSpaceString, cldrData);
      }
      for (var _i = 0, weekday_1 = weekday; _i < weekday_1.length; _i++) {
        var obj = weekday_1[_i];
        var day = getValue(obj, cldrObj);
        dayData.push({ text: format === "narrow" ? day : capitalizeFirstWord(day, "single"), value: valueData["" + obj] });
      }
      return dayData;
    };
    RecurrenceEditor2.prototype.getMonthData = function() {
      var monthData = [];
      var cldrObj;
      if (this.locale === "en" || this.locale === "en-US") {
        var nameSpaceString = "months.stand-alone.wide";
        cldrObj = getValue(nameSpaceString, getDefaultDateObject(this.getCalendarMode()));
      } else {
        var nameSpaceString = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".months.stand-alone.wide";
        cldrObj = getValue(nameSpaceString, cldrData);
      }
      for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
        var obj = _a[_i];
        monthData.push({
          text: capitalizeFirstWord(getValue(obj, cldrObj), "single"),
          value: obj
        });
      }
      return monthData;
    };
    RecurrenceEditor2.prototype.setTemplate = function() {
      var dayData = this.getDayData("narrow");
      var fullDay = this.getDayData("wide");
      this.element.innerHTML = '<div class="' + HEADER6 + '"><div class="' + INPUTWARAPPER + " " + FORMLEFT + '"><input type="text" tabindex="0" class="' + REPEATELEMENT + '"label="' + REPEATELEMENT.substr(2) + '" /></div><div class="' + INPUTWARAPPER + " " + INTERVALCLASS + " " + FORMRIGHT + '"><table  class="' + RECURRENCETABLE + " " + REPEATCONTENTWRAPPER + '"  role="none"><tr><td><input type="text" tabindex="0" id="' + this.element.id + "_" + REPEATINTERVAL + '" class="' + REPEATINTERVAL + '"title="' + this.localeObj.getConstant("repeatEvery") + '" /></td><td><span class="' + REPEATCONTENT + '"></span></td></tr></table></div><div class="' + INPUTWARAPPERSIDE + " " + DAYWRAPPER + " " + FORMLEFT + '"><div class=' + WEEKEXPANDERLABEL + ">" + this.localeObj.getConstant(ON2) + '</div><button type="button" class="e-round" data-index="0" title="' + fullDay[0].text + '">' + dayData[0].text + '</button><button type="button" class="e-round" data-index="1" title="' + fullDay[1].text + '">' + dayData[1].text + '</button><button type="button" class="e-round" data-index="2" title="' + fullDay[2].text + '">' + dayData[2].text + '</button><button type="button" class="e-round" data-index="3" title="' + fullDay[3].text + '">' + dayData[3].text + '</button><button type="button" class="e-round" data-index="4" title="' + fullDay[4].text + '">' + dayData[4].text + '</button><button type="button" class="e-round" data-index="5" title="' + fullDay[5].text + '">' + dayData[5].text + '</button><button type="button" class="e-round" data-index="6" title="' + fullDay[6].text + '">' + dayData[6].text + '</button></div><div class="' + INPUTWARAPPERSIDE + " " + WEEKWRAPPER + " " + FORMLEFT + '"><div class=' + MONTHEXPANDERLABEL + ">" + this.localeObj.getConstant(ON2) + '</div><div class="' + YEAREXPANDERWRAPPER + '"><input class="' + YEAREXPANDERELEMENT + '" type="text" tabindex="0" title="' + this.localeObj.getConstant("yearExpander") + '"/></div><div class="' + MONETHEXPANDERWRAPPER + '"><table class="' + RECURRENCETABLE + " " + MONETHEXPANDWRAPPER + '" role="none"><tr><td><div class="' + INPUTWARAPPER + " " + MONTHEXPANDERCHECKBOXWRAPPER + '"><input class="' + MONTHEXPANDERELEMENT + '"title="' + this.localeObj.getConstant("monthExpander") + '" type="radio"></div></td><td colspan="2"><div class="' + INPUTWARAPPER + " " + MONTHDAYELEMENT + '"><input type="text" tabindex="0" id="' + this.element.id + "_" + MONTHDAYWRAPPER + '" class="' + MONTHDAYWRAPPER + '"title="' + this.localeObj.getConstant("on") + '" /></div></td></tr><tr><td><div class="' + INPUTWARAPPER + " " + MONTHEXPANDERCHECKBOXWRAPPER + '" style="min-width: 30px;margin-bottom:18px;"><input class="' + MONTHEXPANNDERELEM + '"title="' + this.localeObj.getConstant("monthExpander") + '" type="radio"></div></td><td><div class="' + INPUTWARAPPER + " " + WEEKPOSITION + '" ><input type="text" tabindex="0" class="' + MONTHPOS + '"title="' + this.localeObj.getConstant("monthPosition") + '" /></div></td><td><div class="' + INPUTWARAPPER + " " + DAYPOSITION + '"><input type="text" tabindex="0" class="' + MONTHWEEK + '"title="' + this.localeObj.getConstant("monthWeek") + '" /></div></td></tr></table></div></div><div class="' + INPUTWARAPPERSIDE + " " + ENDON + " " + FORMRIGHT + '"><div class="' + INPUTWARAPPER + " " + ENDONLEFT + '"><input type="text" tabindex="0" class="' + ENDONELEMENT + '"title="' + this.localeObj.getConstant(END3) + '" /></div><div class="' + INPUTWARAPPER + " " + ENDONDATE + '" ><input type="text" tabindex="0" class="' + UNTILDATE + '"title="' + this.localeObj.getConstant(UNTIL2) + '" /></div><div class="' + INPUTWARAPPER + " " + ENDONCOUNTWRAPPER + '"><input type="text" tabindex="0" id="' + this.element.id + "_" + ENDONCOUNT + '" class="' + ENDONCOUNT + '"title="' + this.localeObj.getConstant(COUNT) + '" /></div></div></div></div>';
    };
    RecurrenceEditor2.prototype.getSelectedDaysData = function() {
      var ruleData = RULEBYDAY + EQUAL;
      var elements = [].slice.call(this.element.querySelectorAll("." + DAYWRAPPER + " button." + PRIMARY3));
      var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];
      this.rotateArray(weekday, this.firstDayOfWeek);
      for (var index = 0; index < elements.length; index++) {
        ruleData += weekday[parseInt(elements[parseInt(index.toString(), 10)].getAttribute("data-index"), 10)] + (index === elements.length - 1 ? "" : COMMA);
      }
      return ruleData + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getSelectedMonthData = function() {
      var ruleData;
      if (this.onWeekDay.checked) {
        ruleData = RULEBYDAY + EQUAL + this.monthWeekDays.value + SEMICOLON + RULESETPOS + EQUAL + this.monthWeekPos.value + SEMICOLON;
      } else {
        ruleData = RULEBYMONTHDAY + EQUAL + this.monthDate.value + SEMICOLON;
      }
      return ruleData;
    };
    RecurrenceEditor2.prototype.getIntervalData = function() {
      return RULEINTERVAL + EQUAL + this.repeatInterval.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getEndOnCount = function() {
      return RULECOUNT + EQUAL + this.recurrenceCount.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.getYearMonthRuleData = function() {
      return RULEBYMONTH + EQUAL + this.monthValue.value + SEMICOLON;
    };
    RecurrenceEditor2.prototype.updateWeekButton = function(keys) {
      var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];
      this.rotateArray(weekday, this.firstDayOfWeek);
      for (var _i = 0, _a = this.dayButtons; _i < _a.length; _i++) {
        var obj = _a[_i];
        var index = parseInt(obj.element.getAttribute("data-index"), 10);
        if (keys.indexOf(weekday[parseInt(index.toString(), 10)]) !== -1) {
          obj.setProperties({ isPrimary: true });
        } else {
          obj.setProperties({ isPrimary: false });
        }
      }
    };
    RecurrenceEditor2.prototype.updateMonthUI = function() {
      if (this.ruleObject.monthDay.length) {
        this.monthDate.setProperties({ value: this.ruleObject.monthDay[0] });
        this.onMonthDay.setProperties({ checked: true });
      } else {
        this.onWeekDay.setProperties({ checked: true });
        this.monthWeekPos.setProperties({ value: this.ruleObject.setPosition });
        for (var _i = 0, _a = Object.keys(valueData); _i < _a.length; _i++) {
          var key = _a[_i];
          if (valueData["" + key] === this.ruleObject.day[0]) {
            this.monthWeekDays.setProperties({ value: this.ruleObject.day[0] });
            break;
          }
        }
      }
    };
    RecurrenceEditor2.prototype.updateUI = function(repeat, state) {
      this.repeatInterval.setProperties({ value: this.ruleObject.interval });
      switch (state) {
        case UNTIL2:
          this.untilDateObj.setProperties({ value: this.ruleObject.until });
          break;
        case COUNT:
          this.recurrenceCount.setProperties({ value: this.ruleObject.count });
          break;
      }
      switch (repeat) {
        case WEEKLY:
          this.updateWeekButton(this.ruleObject.day);
          break;
        case YEARLY:
          this.monthValue.setProperties({ index: this.ruleObject.month[0] - 1 });
          this.updateMonthUI();
          break;
        case MONTHLY:
          this.updateMonthUI();
          break;
      }
    };
    RecurrenceEditor2.prototype.getUntilData = function() {
      if (!this.untilDateObj.value) {
        return "";
      }
      var tempStr = getRecurrenceStringFromDate(this.untilDateObj.value);
      return RULEUNTIL + EQUAL + tempStr + SEMICOLON;
    };
    RecurrenceEditor2.prototype.destroyComponents = function() {
      if (!this.recurrenceCount.isDestroyed) {
        this.recurrenceCount.destroy();
        this.recurrenceCount = null;
      }
      if (!this.monthDate.isDestroyed) {
        this.monthDate.destroy();
        this.monthDate = null;
      }
      if (!this.repeatInterval.isDestroyed) {
        this.repeatInterval.destroy();
        this.repeatInterval = null;
      }
      if (!this.untilDateObj.isDestroyed) {
        this.untilDateObj.destroy();
        this.untilDateObj = null;
      }
      if (!this.repeatType.isDestroyed) {
        this.repeatType.destroy();
        this.repeatType = null;
      }
      if (!this.endType.isDestroyed) {
        this.endType.destroy();
        this.endType = null;
      }
      if (!this.monthWeekPos.isDestroyed) {
        this.monthWeekPos.destroy();
        this.monthWeekPos = null;
      }
      if (!this.monthWeekDays.isDestroyed) {
        this.monthWeekDays.destroy();
        this.monthWeekDays = null;
      }
      if (!this.monthValue.isDestroyed) {
        this.monthValue.destroy();
        this.monthValue = null;
      }
      if (!this.onMonthDay.isDestroyed) {
        this.onMonthDay.destroy();
        this.onMonthDay = null;
      }
      if (!this.onWeekDay.isDestroyed) {
        this.onWeekDay.destroy();
        this.onWeekDay = null;
      }
      this.dayButtons.forEach(function(element) {
        if (!element.isDestroyed) {
          element.destroy();
        }
      });
      this.dayButtons = [];
      this.monthButtons.forEach(function(element) {
        if (!element.isDestroyed) {
          element.destroy();
        }
      });
      this.monthButtons = [];
    };
    RecurrenceEditor2.prototype.resetFields = function() {
      this.startState(NONE, this.endTypes[0], this.startDate);
      this.setDefaultValue();
    };
    RecurrenceEditor2.prototype.updateRuleUntilDate = function(startDate) {
      if (this.untilDateObj.value && startDate) {
        var untilDate = this.untilDateObj.value;
        var newUntilDate = new Date(untilDate.getFullYear(), untilDate.getMonth(), untilDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getMilliseconds());
        this.untilDateObj.setProperties({ value: newUntilDate });
      }
    };
    RecurrenceEditor2.prototype.getCalendarMode = function() {
      return !isNullOrUndefined(this.calendarMode) ? this.calendarMode.toLowerCase() : "gregorian";
    };
    RecurrenceEditor2.prototype.getRuleSummary = function(rule) {
      if (rule === void 0) {
        rule = this.getRecurrenceRule();
      }
      return generateSummary(rule, this.localeObj, this.locale, this.calendarMode);
    };
    RecurrenceEditor2.prototype.getRecurrenceDates = function(startDate, rule, excludeDate, maximumCount, viewDate) {
      viewDate = isNullOrUndefined(viewDate) ? this.startDate : viewDate;
      return generate(startDate, rule, excludeDate, this.firstDayOfWeek, maximumCount, viewDate, this.calendarMode);
    };
    RecurrenceEditor2.prototype.getRecurrenceRule = function() {
      var ruleData = RULEFREQ + EQUAL;
      switch (this.repeatType.value) {
        case DAILY:
          ruleData += RULEDAILY + SEMICOLON;
          break;
        case WEEKLY:
          ruleData += RULEWEEKLY + SEMICOLON + this.getSelectedDaysData();
          break;
        case MONTHLY:
          ruleData += RULEMONTHLY + SEMICOLON + this.getSelectedMonthData();
          break;
        case YEARLY:
          ruleData += RULEYEARLY + SEMICOLON + this.getSelectedMonthData() + this.getYearMonthRuleData();
          break;
        case NONE:
          return "";
      }
      ruleData += this.getIntervalData();
      switch (this.endType.value) {
        case UNTIL2:
          ruleData += this.getUntilData();
          break;
        case COUNT:
          ruleData += this.getEndOnCount();
          break;
      }
      return ruleData;
    };
    RecurrenceEditor2.prototype.setRecurrenceRule = function(rule, startDate) {
      if (startDate === void 0) {
        startDate = this.startDate;
      }
      if (!rule) {
        this.repeatType.setProperties({ value: NONE });
        return;
      }
      this.renderStatus = false;
      this.ruleObject = extractObjectFromRule(rule);
      var endon = this.ruleObject.count ? COUNT : this.ruleObject.until ? UNTIL2 : NEVER;
      switch (this.ruleObject.freq) {
        case RULEDAILY:
          this.startState(DAILY, endon, startDate);
          this.updateUI(DAILY, endon);
          break;
        case RULEWEEKLY:
          this.startState(WEEKLY, endon, startDate);
          this.updateUI(WEEKLY, endon);
          break;
        case RULEMONTHLY:
          this.startState(MONTHLY, endon, startDate);
          this.updateUI(MONTHLY, endon);
          break;
        case RULEYEARLY:
          this.startState(YEARLY, endon, startDate);
          this.updateUI(YEARLY, endon);
          break;
      }
      this.renderStatus = true;
      this.triggerChangeEvent();
    };
    RecurrenceEditor2.prototype.detachInputs = function() {
      var inputElements = [].slice.call(this.element.querySelectorAll("input"));
      for (var _i = 0, inputElements_1 = inputElements; _i < inputElements_1.length; _i++) {
        var element = inputElements_1[_i];
        detach(element);
      }
    };
    RecurrenceEditor2.prototype.destroy = function() {
      if (!this.isDestroyed) {
        this.destroyComponents();
        _super.prototype.destroy.call(this);
        var removeClasses = ["e-" + this.getModuleName()];
        if (this.cssClass) {
          removeClasses = removeClasses.concat(this.cssClass.split(" "));
        }
        removeClass([this.element], removeClasses);
        this.detachInputs();
        while (this.element.firstElementChild) {
          this.element.removeChild(this.element.firstElementChild);
        }
      }
    };
    RecurrenceEditor2.prototype.getModuleName = function() {
      return "recurrenceeditor";
    };
    RecurrenceEditor2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    RecurrenceEditor2.prototype.render = function() {
      this.initialize();
      this.rtlClass(this.enableRtl);
      this.renderStatus = true;
      this.renderComplete();
    };
    RecurrenceEditor2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "startDate":
            this.selectMonthDay(newProp.startDate);
            this.updateUntilDate(newProp.startDate);
            this.endType.setProperties({ index: 0 });
            break;
          case "enableRtl":
            this.rtlClass(newProp.enableRtl);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "selectedType":
            this.repeatType.setProperties({ index: this.selectedType });
            break;
          case "minDate":
            this.untilDateObj.setProperties({ minDate: this.minDate });
            break;
          case "maxDate":
            this.untilDateObj.setProperties({ maxDate: this.maxDate });
            break;
          case "value":
            if (this.getRecurrenceRule() !== this.value) {
              this.setRecurrenceRule(this.value);
            }
            break;
          case "calendarMode":
            this.calendarMode = newProp.calendarMode;
            this.calendarUtil = getCalendarUtil(newProp.calendarMode);
            break;
          case "locale":
          case "frequencies":
          case "firstDayOfWeek":
          case "endTypes":
            this.refresh();
            break;
          case "dateFormat":
            this.untilDateObj.setProperties({ format: newProp.dateFormat });
            break;
        }
      }
    };
    __decorate35([
      Property(["none", "daily", "weekly", "monthly", "yearly"])
    ], RecurrenceEditor2.prototype, "frequencies", void 0);
    __decorate35([
      Property(["never", "until", "count"])
    ], RecurrenceEditor2.prototype, "endTypes", void 0);
    __decorate35([
      Property(0)
    ], RecurrenceEditor2.prototype, "firstDayOfWeek", void 0);
    __decorate35([
      Property(/* @__PURE__ */ new Date())
    ], RecurrenceEditor2.prototype, "startDate", void 0);
    __decorate35([
      Property()
    ], RecurrenceEditor2.prototype, "dateFormat", void 0);
    __decorate35([
      Property("Gregorian")
    ], RecurrenceEditor2.prototype, "calendarMode", void 0);
    __decorate35([
      Property()
    ], RecurrenceEditor2.prototype, "cssClass", void 0);
    __decorate35([
      Property()
    ], RecurrenceEditor2.prototype, "value", void 0);
    __decorate35([
      Property(new Date(1900, 0, 1))
    ], RecurrenceEditor2.prototype, "minDate", void 0);
    __decorate35([
      Property(new Date(2099, 11, 31))
    ], RecurrenceEditor2.prototype, "maxDate", void 0);
    __decorate35([
      Property(0)
    ], RecurrenceEditor2.prototype, "selectedType", void 0);
    __decorate35([
      Event()
    ], RecurrenceEditor2.prototype, "change", void 0);
    RecurrenceEditor2 = __decorate35([
      NotifyPropertyChanges
    ], RecurrenceEditor2);
    return RecurrenceEditor2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-window.js
var EVENT_FIELD2 = "e-field";
var REPEAT_CONTAINER_CLASS = "e-recurrence-container";
var REPEAT_BUTTON_ICON_CLASS = "e-recurrence-edit";
var REPEAT_BUTTON_CLASS = "e-recurrence-edit-button";
var REPEAT_DIALOG_CLASS = "e-recurrence-dialog";
var HIDE_STYLE_CLASS = "e-hide";
var EventWindow = (
  /** @class */
  function() {
    function EventWindow2(parent) {
      this.parent = parent;
      this.l10n = this.parent.localeObj;
      this.fields = this.parent.eventFields;
      this.eventWindowTime = { startTime: /* @__PURE__ */ new Date(), endTime: /* @__PURE__ */ new Date() };
      this.renderEventWindow();
    }
    EventWindow2.prototype.renderEventWindow = function() {
      this.element = createElement("div", { id: this.parent.element.id + "_dialog_wrapper" });
      this.parent.element.appendChild(this.element);
      var dialogModel = {
        animationSettings: { effect: "Zoom" },
        content: this.getEventWindowContent(),
        cssClass: EVENT_WINDOW_DIALOG_CLASS,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        height: this.parent.isAdaptive ? "100%" : "auto",
        minHeight: "300px",
        isModal: true,
        showCloseIcon: this.parent.isAdaptive ? false : true,
        target: document.body,
        visible: false,
        width: "500px",
        beforeOpen: this.onBeforeOpen.bind(this),
        beforeClose: this.onBeforeClose.bind(this)
      };
      if (this.parent.isAdaptive) {
        dialogModel.cssClass = EVENT_WINDOW_DIALOG_CLASS + " " + DEVICE_CLASS;
        if (!this.parent.editorHeaderTemplate) {
          dialogModel.header = '<div class="e-title-header"><div class="e-back-icon e-icons"></div><div class="e-title-text">' + this.l10n.getConstant("newEvent") + '</div><div class="e-save-icon e-icons"></div></div>';
        }
      } else {
        if (!this.parent.editorFooterTemplate) {
          this.renderDialogButtons(dialogModel);
        }
        if (!this.parent.editorHeaderTemplate) {
          dialogModel.header = '<div class="e-title-text">' + this.l10n.getConstant("newEvent") + "</div>";
        }
      }
      this.dialogObject = new Dialog(dialogModel, this.element);
      if (this.dialogObject.element.querySelector(".e-dlg-closeicon-btn")) {
        this.dialogObject.element.querySelector(".e-dlg-closeicon-btn").setAttribute("title", this.l10n.getConstant("close"));
      }
      this.addEventHandlers();
      addClass([this.element.parentElement], EVENT_WINDOW_DIALOG_CLASS + "-container");
      EventHandler.add(this.dialogObject.element, "keydown", this.preventEventSave, this);
      this.applyFormValidation();
    };
    EventWindow2.prototype.renderDialogButtons = function(dialogButton) {
      dialogButton.buttons = [{
        buttonModel: {
          content: this.l10n.getConstant("deleteButton"),
          cssClass: DELETE_EVENT_CLASS,
          disabled: !this.parent.eventSettings.allowDeleting || this.parent.readonly
        },
        click: this.eventDelete.bind(this)
      }, {
        buttonModel: {
          content: this.l10n.getConstant("saveButton"),
          cssClass: "e-primary " + EVENT_WINDOW_SAVE_BUTTON_CLASS,
          isPrimary: true,
          disabled: !this.parent.eventSettings.allowAdding || this.parent.readonly
        },
        click: this.eventSave.bind(this)
      }, {
        buttonModel: { cssClass: EVENT_WINDOW_CANCEL_BUTTON_CLASS, content: this.l10n.getConstant("cancelButton") },
        click: this.dialogClose.bind(this)
      }];
    };
    EventWindow2.prototype.addEventHandlers = function() {
      var backIcon = this.element.querySelector("." + EVENT_WINDOW_BACK_ICON_CLASS);
      var saveIcon = this.element.querySelector("." + EVENT_WINDOW_SAVE_ICON_CLASS);
      if (this.parent.isAdaptive && !isNullOrUndefined(backIcon) && !isNullOrUndefined(saveIcon)) {
        EventHandler.add(backIcon, "click", this.dialogClose, this);
        EventHandler.add(saveIcon, "click", this.eventSave, this);
      }
    };
    EventWindow2.prototype.refresh = function() {
      this.destroy(true);
      this.renderEventWindow();
    };
    EventWindow2.prototype.refreshRecurrenceEditor = function() {
      if (this.recurrenceEditor) {
        var recurrenceEditor = this.recurrenceEditor.element;
        this.recurrenceEditor.destroy();
        this.createRecurrenceEditor(recurrenceEditor);
      }
    };
    EventWindow2.prototype.setRecurrenceEditor = function(recurrenceEditor) {
      if (this.parent.editorTemplate) {
        this.recurrenceEditor = recurrenceEditor;
      }
    };
    EventWindow2.prototype.openEditor = function(data, type, isEventData, repeatType) {
      this.parent.currentAction = type;
      this.parent.removeNewEventElement();
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      this.parent.inlineModule.removeInlineAppointmentElement();
      if (type === "Add") {
        var eventObj = {};
        this.cellClickAction = !isEventData;
        this.parent.activeCellsData = data;
        var event_1 = data;
        if (this.cellClickAction) {
          this.convertToEventData(event_1, eventObj);
        } else {
          this.parent.activeCellsData = {
            startTime: event_1.startTime || event_1[this.fields.startTime],
            endTime: event_1.endTime || event_1[this.fields.endTime],
            isAllDay: event_1.isAllDay || event_1[this.fields.isAllDay],
            element: event_1.element,
            groupIndex: event_1.groupIndex
          };
          eventObj = event_1;
        }
        data = eventObj;
      }
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.parent.resetTemplates(["editorHeaderTemplate"]);
        if (this.parent.isAdaptive && !this.parent.editorFooterTemplate) {
          this.dialogObject.header = this.createAdaptiveHeaderElement(data);
        } else {
          this.dialogObject.header = this.getDialogHeader(data);
        }
      }
      if (!isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.parent.resetTemplates(["editorFooterTemplate"]);
        this.dialogObject.footerTemplate = this.getDialogFooter(data);
      }
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate) || !isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.dialogObject.dataBind();
        this.addEventHandlers();
      }
      if (!isNullOrUndefined(this.parent.editorTemplate)) {
        this.renderFormElements(this.element.querySelector(".e-schedule-form"), data);
      }
      if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        removeClass([this.dialogObject.element.querySelector(".e-recurrenceeditor")], DISABLE_CLASS);
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;
      }
      switch (type) {
        case "Add":
          this.onCellDetailsUpdate(data, repeatType);
          break;
        case "Save":
        case "EditOccurrence":
        case "EditSeries":
        case "EditFollowingEvents":
          if (type === "EditOccurrence" && !this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
            addClass([this.dialogObject.element.querySelector(".e-recurrenceeditor")], DISABLE_CLASS);
          }
          this.cellClickAction = false;
          this.onEventDetailsUpdate(data);
          break;
      }
    };
    EventWindow2.prototype.setDialogContent = function() {
      this.dialogObject.content = this.getEventWindowContent();
      this.dialogObject.dataBind();
      this.applyFormValidation();
    };
    EventWindow2.prototype.setDialogHeader = function() {
      if (!isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.parent.resetTemplates(["editorHeaderTemplate"]);
        if (this.parent.isAdaptive && !this.parent.editorFooterTemplate) {
          this.dialogObject.header = this.createAdaptiveHeaderElement();
        } else {
          this.dialogObject.header = this.getDialogHeader();
        }
      } else if (this.parent.isAdaptive) {
        this.dialogObject.header = '<div class="e-title-header"><div class="e-back-icon e-icons"></div><div class="e-title-text">' + this.l10n.getConstant("newEvent") + '</div><div class="e-save-icon e-icons"></div></div>';
      } else {
        this.dialogObject.header = '<div class="e-title-text">' + this.l10n.getConstant("newEvent") + "</div>";
      }
      this.dialogObject.dataBind();
      this.addEventHandlers();
    };
    EventWindow2.prototype.setDialogFooter = function() {
      if (!isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.parent.resetTemplates(["editorFooterTemplate"]);
        this.dialogObject.footerTemplate = this.getDialogFooter();
      } else if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.renderDialogButtons(this.dialogObject);
      } else if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        this.dialogObject.footerTemplate = null;
      }
      this.dialogObject.dataBind();
    };
    EventWindow2.prototype.createAdaptiveHeaderElement = function(data) {
      var header = createElement("div", { className: "e-title-header" });
      var headerBackIcon = createElement("div", { className: "e-back-icon e-icons" });
      header.appendChild(headerBackIcon);
      var headerTemplate = this.getDialogHeader(data);
      header.appendChild(headerTemplate);
      var headerSaveIcon = createElement("div", { className: "e-save-icon e-icons" });
      header.appendChild(headerSaveIcon);
      return header;
    };
    EventWindow2.prototype.getDialogHeader = function(args) {
      var headerTemplate = [];
      var headerTemplateId = this.parent.element.id + "_editorHeaderTemplate";
      var temHeaderDiv = document.createElement("div");
      headerTemplate = [].slice.call(this.parent.getEditorHeaderTemplate()(args || {}, this.parent, "editorHeaderTemplate", headerTemplateId, false));
      append(headerTemplate, temHeaderDiv);
      return temHeaderDiv;
    };
    EventWindow2.prototype.getDialogFooter = function(args) {
      var footerTemplate = [];
      var footerTemplateId = this.parent.element.id + "_editorFooterTemplate";
      var temFooterDiv = document.createElement("div");
      footerTemplate = [].slice.call(this.parent.getEditorFooterTemplate()(args || {}, this.parent, "editorFooterTemplate", footerTemplateId, false));
      append(footerTemplate, temFooterDiv);
      return temFooterDiv;
    };
    EventWindow2.prototype.preventEventSave = function(e) {
      if (this.parent && !this.parent.allowKeyboardInteraction && e.code === "Enter") {
        this.isEnterKey = true;
      }
    };
    EventWindow2.prototype.onBeforeOpen = function(args) {
      var _this = this;
      var endTime = this.eventData[this.fields.endTime].getTime();
      var eventProp = {
        type: "Editor",
        data: this.eventData,
        cancel: false,
        element: this.element,
        target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      if (this.cellClickAction) {
        eventProp.duration = this.getSlotDuration();
      }
      var saveObj = this.getInstance(EVENT_WINDOW_SAVE_BUTTON_CLASS);
      if (saveObj) {
        saveObj.disabled = !(this.cellClickAction ? this.parent.eventSettings.allowAdding : this.parent.eventSettings.allowEditing);
        saveObj.dataBind();
      }
      var deleteObj = this.getInstance(DELETE_EVENT_CLASS);
      if (deleteObj) {
        deleteObj.disabled = !this.parent.eventSettings.allowDeleting;
        deleteObj.dataBind();
      }
      var callBackPromise = new Deferred();
      this.parent.trigger(popupOpen, eventProp, function(popupArgs) {
        args.cancel = popupArgs.cancel;
        _this.duration = _this.cellClickAction ? popupArgs.duration : null;
        if (_this.eventData[_this.fields.endTime].getTime() === endTime && !_this.cellClickAction && _this.eventData[_this.fields.endTime].getHours() === 0 && _this.eventData[_this.fields.endTime].getMinutes() === 0) {
          _this.eventData = extend({}, _this.eventData, null, true);
          _this.trimAllDay(_this.eventData);
        }
        _this.refreshDateTimePicker(_this.duration);
        if (_this.cellClickAction && popupArgs.duration !== _this.getSlotDuration() && isNullOrUndefined(_this.parent.editorTemplate)) {
          var startObj = _this.getInstance(EVENT_WINDOW_START_CLASS);
          var endObj = _this.getInstance(EVENT_WINDOW_END_CLASS);
          endObj.value = new Date(startObj.value.getTime() + MS_PER_MINUTE * popupArgs.duration);
          endObj.dataBind();
        }
        if (_this.parent.editorTemplate && _this.element.querySelector(".e-recurrenceeditor") && !_this.recurrenceEditor) {
          _this.recurrenceEditor = _this.getInstance("e-recurrenceeditor");
        }
        callBackPromise.resolve(args);
      });
      return callBackPromise;
    };
    EventWindow2.prototype.onBeforeClose = function(args) {
      var _this = this;
      if (args.isInteracted) {
        this.isCrudAction = false;
      }
      var eventProp = {
        type: "Editor",
        event: args.event || this.dialogEvent,
        data: this.eventCrudData,
        cancel: false,
        element: this.element,
        target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element
      };
      var callBackPromise = new Deferred();
      this.parent.trigger(popupClose, eventProp, function(popupArgs) {
        args.cancel = popupArgs.cancel;
        if (!popupArgs.cancel) {
          if (_this.isCrudAction) {
            args.cancel = _this.processCrudActions(popupArgs.data);
            _this.isCrudAction = args.cancel;
          }
          if (!_this.isCrudAction) {
            _this.resetForm();
            _this.parent.eventBase.focusElement(true);
            _this.eventCrudData = null;
          }
        }
        callBackPromise.resolve(args);
      });
      return callBackPromise;
    };
    EventWindow2.prototype.getEventWindowContent = function() {
      var container = createElement("div", { className: FORM_CONTAINER_CLASS });
      var form = createElement("form", {
        id: this.parent.element.id + "EditForm",
        className: FORM_CLASS,
        attrs: { onsubmit: "return false;" }
      });
      this.renderFormElements(form);
      container.appendChild(form);
      return container;
    };
    EventWindow2.prototype.renderFormElements = function(form, args) {
      var _this = this;
      if (!isNullOrUndefined(this.parent.editorTemplate)) {
        if (args) {
          if (this.fieldValidator) {
            this.fieldValidator.destroy();
            this.fieldValidator = null;
          }
          if (this.recurrenceEditor) {
            this.recurrenceEditor.destroy();
            this.recurrenceEditor = null;
          }
          this.destroyComponents();
          this.parent.resetTemplates(["editorTemplate"]);
          EventHandler.clearEvents(form);
          if (!this.parent.isReact) {
            var formElements = [].slice.call(form.children);
            for (var _i = 0, formElements_1 = formElements; _i < formElements_1.length; _i++) {
              var element = formElements_1[_i];
              remove(element);
            }
          }
        }
        var templateId = this.parent.element.id + "_editorTemplate";
        var tempEle = [].slice.call(this.parent.getEditorTemplate()(args || {}, this.parent, "editorTemplate", templateId, false));
        append(tempEle, form);
        this.parent.renderTemplates(function() {
          if (_this.element) {
            _this.applyFormValidation();
            if (_this.eventCrudData) {
              _this.showDetails(_this.eventCrudData);
              _this.eventCrudData = null;
            }
          }
        });
      } else {
        form.appendChild(this.getDefaultEventWindowContent());
      }
    };
    EventWindow2.prototype.getDefaultEventWindowContent = function() {
      var parentDiv = this.createDivElement(EVENT_WINDOW_DIALOG_PARENT_CLASS);
      var titleLocationDiv = this.createDivElement(EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS);
      parentDiv.appendChild(titleLocationDiv);
      titleLocationDiv.appendChild(this.renderTextBox(SUBJECT_CLASS));
      titleLocationDiv.appendChild(this.renderTextBox(LOCATION_CLASS));
      var startEndDateTimeDiv = this.createDivElement(EVENT_WINDOW_START_END_DIV_CLASS);
      parentDiv.appendChild(startEndDateTimeDiv);
      startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_START_CLASS, this.onTimeChange.bind(this)));
      startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_END_CLASS));
      var allDayTimezoneDiv = this.createDivElement(EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS);
      parentDiv.appendChild(allDayTimezoneDiv);
      allDayTimezoneDiv.appendChild(this.renderCheckBox(EVENT_WINDOW_ALL_DAY_CLASS));
      allDayTimezoneDiv.appendChild(this.renderCheckBox(TIME_ZONE_CLASS));
      var timezoneParentDiv = this.createDivElement(EVENT_WINDOW_TIME_ZONE_DIV_CLASS);
      parentDiv.appendChild(timezoneParentDiv);
      timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_START_TZ_CLASS));
      timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_END_TZ_CLASS));
      var repeatParentDiv = this.createDivElement(EVENT_WINDOW_REPEAT_DIV_CLASS);
      parentDiv.appendChild(repeatParentDiv);
      var repeatDiv = this.renderCheckBox(EVENT_WINDOW_REPEAT_CLASS);
      var repeatEditContainer = createElement("span", { className: REPEAT_CONTAINER_CLASS });
      var button = createElement("button", {
        className: REPEAT_BUTTON_CLASS,
        attrs: { type: "button", "title": this.l10n.getConstant("editRecurrence") }
      });
      this.buttonObj = new Button({ iconCss: REPEAT_BUTTON_ICON_CLASS + " e-icons", cssClass: "e-medium " + this.parent.cssClass });
      repeatEditContainer.appendChild(button);
      this.buttonObj.appendTo(button);
      repeatDiv.appendChild(repeatEditContainer);
      repeatParentDiv.appendChild(repeatDiv);
      if (this.parent.isAdaptive) {
        EventHandler.add(button, "click", this.loadRecurrenceEditor, this);
      } else {
        this.createRecurrenceEditor(parentDiv);
      }
      if (this.parent.resourceCollection.length > 0) {
        var resourceParentDiv = this.createDivElement(EVENT_WINDOW_RESOURCES_DIV_CLASS);
        for (var _i = 0, _a = this.parent.resourceBase.resourceCollection; _i < _a.length; _i++) {
          var resource = _a[_i];
          resourceParentDiv.appendChild(this.renderResourceDetails(resource));
        }
        parentDiv.appendChild(resourceParentDiv);
      }
      var description = this.createDivElement(DESCRIPTION_CLASS + "-row");
      description.appendChild(this.renderTextBox(DESCRIPTION_CLASS));
      parentDiv.appendChild(description);
      var submit = createElement("button", { attrs: { type: "hidden", title: "submit", style: "display:none" } });
      parentDiv.appendChild(submit);
      return parentDiv;
    };
    EventWindow2.prototype.createRecurrenceEditor = function(parentDiv) {
      var recurrenceEditor = createElement("div", { id: this.parent.element.id + "_recurrence_editor" });
      parentDiv.appendChild(recurrenceEditor);
      this.recurrenceEditor = this.renderRecurrenceEditor();
      this.recurrenceEditor.appendTo(recurrenceEditor);
      this.updateMinMaxDateToEditor();
    };
    EventWindow2.prototype.createDivElement = function(className) {
      return createElement("div", { className });
    };
    EventWindow2.prototype.createInputElement = function(className, fieldName, type) {
      return createElement(type || "input", {
        className,
        attrs: {
          type: "text",
          name: fieldName,
          value: "",
          id: fieldName
        }
      });
    };
    EventWindow2.prototype.getSlotDuration = function() {
      return this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
    };
    EventWindow2.prototype.renderDateTimePicker = function(value, changeEvent) {
      var dateTimeDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var dateTimeInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      dateTimeDiv.appendChild(dateTimeInput);
      var dateTimePicker = new DateTimePicker({
        change: changeEvent,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        calendarMode: this.parent.calendarMode,
        min: this.parent.minDate,
        max: new Date((/* @__PURE__ */ new Date(+this.parent.maxDate)).setHours(23, 59, 59)),
        cssClass: this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        floatLabelType: "Always",
        strictMode: true,
        timeFormat: this.parent.activeViewOptions.timeFormat,
        format: (isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") : this.parent.dateFormat) + " " + this.parent.activeViewOptions.timeFormat,
        placeholder: this.getFieldLabel(value),
        step: this.getSlotDuration(),
        width: "100%"
      });
      dateTimePicker.appendTo(dateTimeInput);
      return dateTimeDiv;
    };
    EventWindow2.prototype.refreshDateTimePicker = function(duration) {
      var elementSelector = "." + EVENT_WINDOW_START_CLASS + ",." + EVENT_WINDOW_END_CLASS;
      var startEndElement = [].slice.call(this.element.querySelectorAll(elementSelector));
      for (var _i = 0, startEndElement_1 = startEndElement; _i < startEndElement_1.length; _i++) {
        var element = startEndElement_1[_i];
        var instance = element.ej2_instances[0];
        instance.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;
        instance.timeFormat = this.parent.activeViewOptions.timeFormat;
        instance.step = duration || this.getSlotDuration();
        instance.dataBind();
      }
    };
    EventWindow2.prototype.onTimeChange = function() {
      var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);
      if (startObj.element.parentElement.classList.contains("e-input-focus")) {
        var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);
        var duration = 0;
        if (this.cellClickAction) {
          duration = MS_PER_MINUTE * this.duration;
          this.eventWindowTime.startTime = startObj.value;
        } else {
          duration = this.eventData[this.fields.endTime].getTime() - this.eventData[this.fields.startTime].getTime();
        }
        var endDate = isNullOrUndefined(startObj.value) ? null : new Date(startObj.value.getTime() + duration);
        if (this.cellClickAction) {
          this.eventWindowTime.endTime = endDate;
        }
        endObj.value = endDate;
        endObj.dataBind();
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.updateRuleUntilDate(this.eventWindowTime.startTime);
      }
    };
    EventWindow2.prototype.renderResourceDetails = function(resourceData) {
      var fieldName = resourceData.field;
      var value = "e-" + fieldName;
      var labelValue = resourceData.title;
      var resourceDiv = this.createDivElement(value + "-container e-resources");
      var resourceInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      resourceDiv.appendChild(resourceInput);
      var resourceTemplate = function(data) {
        return SanitizeHtmlHelper.sanitize('<div class="e-resource-template"><div class="e-resource-color" style="background-color:' + data[resourceData.colorField] + '"></div><div class="e-resource-text">' + data[resourceData.textField] + "</div></div>");
      };
      initializeCSPTemplate(resourceTemplate, resourceData);
      if (resourceData.allowMultiple) {
        var listObj = new MultiSelect({
          enableRtl: this.parent.enableRtl,
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          cssClass: this.parent.cssClass || "",
          dataSource: resourceData.dataSource,
          change: this.onMultiselectResourceChange.bind(this),
          itemTemplate: resourceTemplate,
          fields: {
            text: resourceData.textField,
            value: resourceData.idField
          },
          htmlAttributes: { "name": fieldName },
          floatLabelType: "Always",
          placeholder: labelValue,
          popupHeight: "230px",
          popupWidth: "447px",
          mode: "Box"
        });
        listObj.appendTo(resourceInput);
      } else {
        var dropDownList = new DropDownList({
          cssClass: this.parent.cssClass || "",
          change: this.onDropdownResourceChange.bind(this),
          dataSource: resourceData.dataSource,
          enableRtl: this.parent.enableRtl,
          fields: {
            text: resourceData.textField,
            value: resourceData.idField
          },
          htmlAttributes: { "name": fieldName },
          floatLabelType: "Always",
          placeholder: labelValue,
          popupHeight: "230px",
          popupWidth: "447px",
          itemTemplate: resourceTemplate
        });
        dropDownList.appendTo(resourceInput);
      }
      return resourceDiv;
    };
    EventWindow2.prototype.renderDropDown = function(value) {
      var _this = this;
      var fieldName = this.getFieldName(value);
      var timezoneDiv = this.createDivElement(value + "-container");
      var timezoneInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      timezoneDiv.appendChild(timezoneInput);
      var dropDownList = new DropDownList({
        allowFiltering: true,
        change: this.onTimezoneChange.bind(this),
        cssClass: this.parent.cssClass || "",
        dataSource: this.parent.timezoneDataSource,
        enableRtl: this.parent.enableRtl,
        fields: { text: "Text", value: "Value" },
        filterBarPlaceholder: this.parent.localeObj.getConstant("searchTimezone"),
        noRecordsTemplate: this.parent.localeObj.getConstant("noRecords"),
        filtering: function(e) {
          var query = new Query();
          query = e.text !== "" ? query.where("Text", "contains", e.text, true) : query;
          e.updateData(_this.parent.timezoneDataSource, query);
        },
        htmlAttributes: { "title": this.getFieldLabel(value), "name": fieldName },
        floatLabelType: "Always",
        placeholder: this.getFieldLabel(value),
        popupHeight: "230px"
      });
      dropDownList.appendTo(timezoneInput);
      return timezoneDiv;
    };
    EventWindow2.prototype.onMultiselectResourceChange = function(args) {
      if (!args.value || !this.parent.activeViewOptions.group.byGroupID || this.parent.resourceCollection.length <= 1) {
        return;
      }
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      for (var i = 0; i < resourceCollection.length; i++) {
        if (resourceCollection[parseInt(i.toString(), 10)].field === fieldName && i < resourceCollection.length - 1) {
          var resObject = this.createInstance(i);
          var datasource = [];
          var _loop_1 = function(j2) {
            var resourceModel = resourceCollection[i + 1];
            var filter = resourceModel.dataSource.filter(function(data) {
              return data[resourceModel.groupIDField] === args.value[parseInt(j2.toString(), 10)];
            })[0];
            var groupId = !isNullOrUndefined(filter) ? filter[resourceCollection[i + 1].groupIDField] : null;
            var filterRes = this_1.filterDatasource(i, groupId);
            datasource = datasource.concat(filterRes);
          };
          var this_1 = this;
          for (var j = 0; j < args.value.length; j++) {
            _loop_1(j);
          }
          resObject.dataSource = datasource;
          resObject.dataBind();
        }
      }
    };
    EventWindow2.prototype.createInstance = function(index) {
      var resourceData = this.parent.resourceBase.resourceCollection[index + 1];
      var resObject = this.element.querySelector(".e-" + resourceData.field).ej2_instances[0];
      resObject.clear();
      return resObject;
    };
    EventWindow2.prototype.onDropdownResourceChange = function(args) {
      if (!args.value || this.parent.resourceCollection.length <= 1 || !this.parent.activeViewOptions.group.byGroupID) {
        return;
      }
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      var resourceCollection = this.parent.resourceBase.resourceCollection;
      for (var i = 0; i < resourceCollection.length; i++) {
        if (i < resourceCollection.length - 1 && resourceCollection[parseInt(i.toString(), 10)].field === fieldName) {
          var resObj = this.createInstance(i);
          var groupId = args.itemData[resourceCollection[parseInt(i.toString(), 10)].idField];
          resObj.dataSource = this.filterDatasource(i, groupId);
          resObj.dataBind();
          var resValue = resObj.dataSource.length > 0 ? resObj.dataSource[0][resourceCollection[i + 1].idField] : null;
          resObj.value = resourceCollection[i + 1].allowMultiple ? [resValue] : resValue;
          resObj.dataBind();
        }
      }
    };
    EventWindow2.prototype.filterDatasource = function(index, groupId) {
      var resourceData = this.parent.resourceBase.resourceCollection[index + 1];
      return resourceData.dataSource.filter(function(data) {
        return data[resourceData.groupIDField] === groupId;
      });
    };
    EventWindow2.prototype.onTimezoneChange = function(args) {
      var fieldName = args.element.getAttribute("name") || this.getColumnName(args.element);
      if (fieldName === this.parent.eventFields.startTimezone) {
        var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);
        var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);
        endTimezoneObj.value = startTimezoneObj.value;
        endTimezoneObj.dataBind();
      }
    };
    EventWindow2.prototype.renderCheckBox = function(value) {
      var checkBoxDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var checkBoxInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName);
      checkBoxDiv.appendChild(checkBoxInput);
      var checkBox = new CheckBox({
        change: this.onChange.bind(this),
        cssClass: value + " " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        label: this.getFieldLabel(value)
      });
      checkBox.appendTo(checkBoxInput);
      checkBoxInput.setAttribute("name", fieldName);
      if (fieldName === "Repeat") {
        this.repeatStatus = checkBox;
      }
      return checkBoxDiv;
    };
    EventWindow2.prototype.renderTextBox = function(value) {
      var textBoxDiv = this.createDivElement(value + "-container");
      var fieldName = this.getFieldName(value);
      var elementType = value === DESCRIPTION_CLASS ? "textarea" : "input";
      var textBoxInput = this.createInputElement(value + " " + EVENT_FIELD2, fieldName, elementType);
      textBoxDiv.appendChild(textBoxInput);
      Input.createInput({
        element: textBoxInput,
        floatLabelType: "Always",
        properties: {
          enableRtl: this.parent.enableRtl,
          placeholder: this.getFieldLabel(value)
        }
      });
      return textBoxDiv;
    };
    EventWindow2.prototype.getFieldName = function(name) {
      var fieldName = "";
      switch (name) {
        case SUBJECT_CLASS:
          fieldName = this.fields.subject;
          break;
        case LOCATION_CLASS:
          fieldName = this.fields.location;
          break;
        case EVENT_WINDOW_START_CLASS:
          fieldName = this.fields.startTime;
          break;
        case EVENT_WINDOW_END_CLASS:
          fieldName = this.fields.endTime;
          break;
        case DESCRIPTION_CLASS:
          fieldName = this.fields.description;
          break;
        case EVENT_WINDOW_ALL_DAY_CLASS:
          fieldName = this.fields.isAllDay;
          break;
        case EVENT_WINDOW_START_TZ_CLASS:
          fieldName = this.fields.startTimezone;
          break;
        case EVENT_WINDOW_END_TZ_CLASS:
          fieldName = this.fields.endTimezone;
          break;
        case TIME_ZONE_CLASS:
          fieldName = "Timezone";
          break;
        case EVENT_WINDOW_REPEAT_CLASS:
          fieldName = "Repeat";
          break;
      }
      return fieldName;
    };
    EventWindow2.prototype.getFieldLabel = function(fieldName) {
      var labelText = "";
      switch (fieldName) {
        case SUBJECT_CLASS:
          labelText = this.parent.editorTitles.subject;
          break;
        case LOCATION_CLASS:
          labelText = this.parent.editorTitles.location;
          break;
        case DESCRIPTION_CLASS:
          labelText = this.parent.editorTitles.description;
          break;
        case EVENT_WINDOW_START_CLASS:
          labelText = this.parent.editorTitles.startTime;
          break;
        case EVENT_WINDOW_END_CLASS:
          labelText = this.parent.editorTitles.endTime;
          break;
        case EVENT_WINDOW_START_TZ_CLASS:
          labelText = this.parent.editorTitles.startTimezone;
          break;
        case EVENT_WINDOW_END_TZ_CLASS:
          labelText = this.parent.editorTitles.endTimezone;
          break;
        case EVENT_WINDOW_REPEAT_CLASS:
          labelText = this.parent.editorTitles.recurrenceRule;
          break;
        case EVENT_WINDOW_ALL_DAY_CLASS:
          labelText = this.parent.editorTitles.isAllDay;
          break;
        case TIME_ZONE_CLASS:
          labelText = this.l10n.getConstant("timezone");
          break;
      }
      return labelText;
    };
    EventWindow2.prototype.onChange = function(args) {
      if (args.event && args.event.target) {
        var targetSelector = "." + EVENT_WINDOW_ALL_DAY_CLASS + ",." + TIME_ZONE_CLASS + ",." + EVENT_WINDOW_REPEAT_CLASS;
        var target = closest(args.event.target, targetSelector);
        if (target.classList.contains(EVENT_WINDOW_ALL_DAY_CLASS)) {
          this.onAllDayChange(args.checked);
        } else if (target.classList.contains(TIME_ZONE_CLASS)) {
          this.timezoneChangeStyle(args.checked);
        } else if (target.classList.contains(EVENT_WINDOW_REPEAT_CLASS)) {
          this.onRepeatChange(args.checked);
        }
      }
    };
    EventWindow2.prototype.renderRepeatDialog = function() {
      var element = createElement("div");
      this.repeatDialogObject = new Dialog({
        header: this.l10n.getConstant("recurrence"),
        visible: false,
        content: '<div class="e-rec-editor"></div>',
        closeOnEscape: true,
        width: "90%",
        buttons: [
          {
            click: this.repeatSaveDialog.bind(this),
            buttonModel: { content: this.l10n.getConstant("save"), cssClass: "e-save", isPrimary: true }
          },
          { click: this.repeatCancelDialog.bind(this), buttonModel: { cssClass: "e-cancel", content: this.l10n.getConstant("cancel") } }
        ],
        target: this.element,
        animationSettings: { effect: "Zoom" },
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        isModal: true,
        cssClass: REPEAT_DIALOG_CLASS,
        open: this.repeatOpenDialog.bind(this)
      });
      this.element.appendChild(element);
      this.repeatDialogObject.appendTo(element);
      this.createRecurrenceEditor(this.repeatDialogObject.element.querySelector(".e-rec-editor"));
    };
    EventWindow2.prototype.loadRecurrenceEditor = function() {
      this.repeatDialogObject.show();
      if (this.recurrenceEditor && this.repeatRule) {
        this.recurrenceEditor.setRecurrenceRule(this.repeatRule);
      }
    };
    EventWindow2.prototype.onRepeatChange = function(state) {
      if (state) {
        if (!this.repeatDialogObject) {
          this.renderRepeatDialog();
        }
        this.recurrenceEditor.setProperties({ startDate: this.repeatStartDate, selectedType: 0 });
        this.loadRecurrenceEditor();
      } else {
        if (this.repeatDialogObject) {
          this.repeatDialogObject.hide();
        }
        this.repeatRule = "";
        if (this.recurrenceEditor) {
          this.recurrenceEditor.setRecurrenceRule(this.repeatRule);
          this.updateRepeatLabel(this.repeatRule);
        }
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        addClass([element], HIDE_STYLE_CLASS);
      }
    };
    EventWindow2.prototype.repeatSaveDialog = function() {
      this.repeatRule = this.recurrenceEditor.getRecurrenceRule();
      var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
      if (this.recurrenceEditor.getRecurrenceRule()) {
        removeClass([element], HIDE_STYLE_CLASS);
      } else {
        addClass([element], HIDE_STYLE_CLASS);
        this.repeatStatus.setProperties({ checked: false });
      }
      this.updateRepeatLabel(this.repeatRule);
      this.closeRepeatDialog();
    };
    EventWindow2.prototype.closeRepeatDialog = function() {
      this.repeatDialogObject.hide();
    };
    EventWindow2.prototype.repeatCancelDialog = function() {
      this.closeRepeatDialog();
      if (this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(this.repeatTempRule);
      }
      if (!this.repeatTempRule) {
        this.repeatStatus.setProperties({ checked: false });
      }
    };
    EventWindow2.prototype.repeatOpenDialog = function() {
      this.repeatTempRule = this.recurrenceEditor.getRecurrenceRule();
    };
    EventWindow2.prototype.onCellDetailsUpdate = function(eventObj, repeatType) {
      if (!this.parent.eventSettings.allowAdding) {
        return;
      }
      if (this.parent.isAdaptive && repeatType && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      this.element.querySelector("." + FORM_CLASS).removeAttribute("data-id");
      if (isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.element.querySelector("." + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant("newEvent");
      }
      eventObj.Timezone = false;
      this.repeatStartDate = eventObj[this.fields.startTime];
      this.repeatRule = "";
      if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {
        eventObj[this.fields.subject] = this.parent.eventSettings.fields.subject.default;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.location.default)) {
        eventObj[this.fields.location] = this.parent.eventSettings.fields.location.default;
      }
      if (!isNullOrUndefined(this.parent.eventSettings.fields.description.default)) {
        eventObj[this.fields.description] = this.parent.eventSettings.fields.description.default;
      }
      this.showDetails(eventObj);
      if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
        this.repeatRule = eventObj[this.fields.recurrenceRule];
      }
      var deleteButton = this.element.querySelector("." + DELETE_EVENT_CLASS);
      if (deleteButton) {
        addClass([deleteButton], DISABLE_CLASS);
      }
      if (this.recurrenceEditor) {
        this.recurrenceEditor.setProperties({
          startDate: eventObj[this.fields.startTime],
          selectedType: !isNullOrUndefined(repeatType) ? repeatType : !isNullOrUndefined(eventObj[this.fields.recurrenceRule]) ? this.recurrenceEditor.selectedType : 0
        });
        this.repeatRule = this.recurrenceEditor.value;
      }
      if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        if (eventObj[this.fields.recurrenceRule] || repeatType) {
          removeClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: true });
        } else {
          addClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: false });
        }
        this.updateRepeatLabel(this.repeatRule);
      } else {
        var saveButton = this.element.querySelector("." + EVENT_WINDOW_SAVE_BUTTON_CLASS);
        this.disableButton(saveButton, false);
      }
      this.dialogObject.show();
    };
    EventWindow2.prototype.convertToEventData = function(cellsData, eventObj) {
      if (cellsData.subject) {
        eventObj[this.fields.subject] = cellsData.subject;
      }
      eventObj[this.fields.startTime] = cellsData.startTime;
      eventObj[this.fields.endTime] = cellsData.endTime;
      eventObj[this.fields.isAllDay] = cellsData.isAllDay;
      if (cellsData.RecurrenceRule) {
        eventObj[this.fields.recurrenceRule] = cellsData.RecurrenceRule;
      }
      if (this.parent.resourceCollection.length > 0 || this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.setResourceValues(eventObj);
      }
    };
    EventWindow2.prototype.applyFormValidation = function() {
      var form = this.element.querySelector("." + FORM_CLASS);
      if (!form) {
        return;
      }
      var getValidationRule = function(rules2) {
        return rules2 && Object.keys(rules2).length > 0 ? rules2 : void 0;
      };
      var rules = {};
      var subjectRule = getValidationRule(this.parent.eventSettings.fields.subject.validation);
      if (!isNullOrUndefined(subjectRule)) {
        rules[this.parent.eventSettings.fields.subject.name] = subjectRule;
      }
      var locationRule = getValidationRule(this.parent.eventSettings.fields.location.validation);
      if (!isNullOrUndefined(locationRule)) {
        rules[this.parent.eventSettings.fields.location.name] = locationRule;
      }
      var startTimeRule = getValidationRule(this.parent.eventSettings.fields.startTime.validation);
      if (!isNullOrUndefined(startTimeRule)) {
        rules[this.parent.eventSettings.fields.startTime.name] = startTimeRule;
      }
      var endTimeRule = getValidationRule(this.parent.eventSettings.fields.endTime.validation);
      if (!isNullOrUndefined(endTimeRule)) {
        rules[this.parent.eventSettings.fields.endTime.name] = endTimeRule;
      }
      var descriptionRule = getValidationRule(this.parent.eventSettings.fields.description.validation);
      if (!isNullOrUndefined(descriptionRule)) {
        rules[this.parent.eventSettings.fields.description.name] = descriptionRule;
      }
      if (this.fieldValidator) {
        this.fieldValidator.destroy();
        this.fieldValidator = null;
      }
      this.fieldValidator = new FieldValidator();
      this.fieldValidator.renderFormValidator(form, rules, this.element, this.parent.locale);
    };
    EventWindow2.prototype.showDetails = function(eventData) {
      this.eventData = this.eventCrudData ? this.eventData : eventData;
      var eventObj = extend({}, eventData, null, true);
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      if (this.parent.isReact && formElements.length < 1 && !this.cellClickAction) {
        this.eventCrudData = eventObj;
        return;
      }
      if ((!this.cellClickAction || this.cellClickAction && !isNullOrUndefined(this.parent.editorTemplate)) && eventObj[this.fields.endTime].getHours() === 0 && eventObj[this.fields.endTime].getMinutes() === 0) {
        this.trimAllDay(eventObj);
      }
      var keyNames = Object.keys(eventObj);
      for (var _i = 0, formElements_2 = formElements; _i < formElements_2.length; _i++) {
        var curElement = formElements_2[_i];
        var columnName = curElement.name || this.getColumnName(curElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          if (keyNames.indexOf(columnName) !== -1) {
            this.setValueToElement(curElement, eventObj["" + columnName]);
          } else {
            this.setDefaultValueToElement(curElement);
          }
        }
      }
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        this.onAllDayChange(eventObj[this.fields.isAllDay]);
        var timezoneObj = this.getInstance(TIME_ZONE_CLASS + "." + EVENT_FIELD2);
        if (!(isNullOrUndefined(eventObj[this.fields.startTimezone]) && isNullOrUndefined(eventObj[this.fields.endTimezone]))) {
          timezoneObj.checked = true;
          timezoneObj.dataBind();
        }
        this.timezoneChangeStyle(timezoneObj.checked);
        delete eventObj.Timezone;
      }
    };
    EventWindow2.prototype.getColumnName = function(element) {
      var attrName = element.getAttribute("data-name") || "";
      if (attrName === "") {
        var isDropDowns = false;
        var fieldSelector = "";
        if (element.classList.contains("e-dropdownlist")) {
          fieldSelector = "e-ddl";
          isDropDowns = true;
        } else if (element.classList.contains("e-multiselect")) {
          fieldSelector = "e-multiselect";
          isDropDowns = true;
        } else if (element.classList.contains("e-datetimepicker")) {
          fieldSelector = "e-datetimepicker";
        } else if (element.classList.contains("e-datepicker")) {
          fieldSelector = "e-datepicker";
        } else if (element.classList.contains("e-checkbox")) {
          fieldSelector = "e-checkbox";
        }
        var classSelector = isDropDowns ? "." + fieldSelector + ":not(.e-control)" : "." + fieldSelector;
        var control = closest(element, classSelector) || element.querySelector("." + fieldSelector);
        if (control) {
          var attrEle = control.querySelector("[name]");
          if (attrEle) {
            attrName = attrEle.name;
          }
        }
      }
      return attrName;
    };
    EventWindow2.prototype.onAllDayChange = function(allDayStatus) {
      var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);
      var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);
      var timezoneDiv = this.element.querySelector(".e-time-zone-container");
      var format;
      if (allDayStatus) {
        format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") : this.parent.dateFormat;
        addClass(this.element.querySelectorAll(".e-time-icon"), EVENT_WINDOW_ICON_DISABLE_CLASS);
        addClass([timezoneDiv], DISABLE_CLASS);
        if (this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)) {
          removeClass([this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);
        }
        startObj.format = endObj.format = format;
      } else {
        format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat("dateFormats") + " " + this.parent.activeViewOptions.timeFormat : this.parent.dateFormat + " " + this.parent.activeViewOptions.timeFormat;
        removeClass(this.element.querySelectorAll(".e-time-icon"), EVENT_WINDOW_ICON_DISABLE_CLASS);
        removeClass([timezoneDiv], DISABLE_CLASS);
        if (this.element.querySelector(".e-checkbox-wrapper .e-time-zone").checked) {
          addClass([this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);
        }
        startObj.format = endObj.format = format;
      }
      if (this.cellClickAction) {
        this.updateDateTime(allDayStatus, startObj, endObj);
      }
      startObj.dataBind();
      endObj.dataBind();
      if (!isNullOrUndefined(this.recurrenceEditor)) {
        this.recurrenceEditor.updateRuleUntilDate(startObj.value);
      }
    };
    EventWindow2.prototype.updateDateTime = function(allDayStatus, startObj, endObj) {
      var startDate;
      var endDate;
      if (allDayStatus) {
        startDate = resetTime(new Date(this.eventWindowTime.startTime.getTime()));
        if (this.parent.activeCellsData.isAllDay) {
          var temp = addDays(new Date(this.eventWindowTime.endTime.getTime()), -1).getTime();
          endDate = +this.eventWindowTime.startTime > temp ? this.eventWindowTime.endTime : new Date(temp);
        } else {
          endDate = resetTime(new Date(this.eventWindowTime.endTime.getTime()));
        }
      } else {
        var start = this.parent.activeCellsData.startTime;
        startDate = new Date(this.eventWindowTime.startTime.getTime());
        startDate.setHours(start.getHours(), start.getMinutes(), start.getSeconds());
        if (this.parent.activeCellsData.isAllDay) {
          var startHour = this.parent.getStartEndTime(this.parent.workHours.start);
          startDate.setHours(startHour.getHours(), startHour.getMinutes(), startHour.getSeconds());
          endDate = new Date(startDate.getTime());
          endDate.setMilliseconds(MS_PER_MINUTE * this.getSlotDuration());
        } else {
          endDate = new Date(startDate.getTime());
          endDate.setMilliseconds(this.parent.activeCellsData.endTime.getTime() - this.parent.activeCellsData.startTime.getTime());
        }
      }
      this.eventWindowTime = { startTime: new Date(startDate.getTime()), endTime: new Date(endDate.getTime()) };
      startObj.value = startDate;
      endObj.value = endDate;
      startObj.dataBind();
      endObj.dataBind();
    };
    EventWindow2.prototype.getFormat = function(formatType) {
      var format;
      if (isNullOrUndefined(this.parent.locale) || this.parent.locale === "en" || this.parent.locale === "en-US") {
        format = getValue(formatType + ".short", getDefaultDateObject(this.parent.getCalendarMode()));
      } else {
        format = getValue("main." + this.parent.locale + ".dates.calendars." + this.parent.getCalendarMode() + "." + formatType + ".short", cldrData);
      }
      return format;
    };
    EventWindow2.prototype.onEventDetailsUpdate = function(eventObj) {
      if (!this.parent.eventSettings.allowEditing) {
        return;
      }
      if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorFooterTemplate)) {
        removeClass([this.element.querySelector("." + DELETE_EVENT_CLASS)], DISABLE_CLASS);
      }
      if (isNullOrUndefined(this.parent.editorHeaderTemplate)) {
        this.element.querySelector("." + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant("editEvent");
      }
      this.element.querySelector("." + FORM_CLASS).setAttribute("data-id", eventObj[this.fields.id].toString());
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        eventObj = extend({}, eventObj, null, true);
        var timezoneObj = this.getInstance(TIME_ZONE_CLASS + "." + EVENT_FIELD2);
        var timezoneValue = void 0;
        if (eventObj[this.fields.startTimezone] || eventObj[this.fields.endTimezone]) {
          timezoneValue = true;
          this.parent.eventBase.timezoneConvert(eventObj);
        } else {
          timezoneValue = false;
        }
        eventObj.Timezone = timezoneValue;
        timezoneObj.checked = timezoneValue;
        timezoneObj.dataBind();
      }
      this.showDetails(eventObj);
      if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {
        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
      } else if (!this.parent.isAdaptive && this.recurrenceEditor) {
        this.recurrenceEditor.setProperties({ startDate: eventObj[this.fields.startTime] });
        this.recurrenceEditor.setRecurrenceRule("");
      }
      this.repeatStartDate = eventObj[this.fields.startTime];
      this.repeatRule = "";
      if (eventObj[this.fields.recurrenceRule]) {
        if (this.recurrenceEditor) {
          this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);
        }
        this.repeatRule = eventObj[this.fields.recurrenceRule];
      }
      if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {
        var element = this.element.querySelector("." + REPEAT_CONTAINER_CLASS);
        if (eventObj[this.fields.recurrenceRule]) {
          removeClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: true });
        } else {
          addClass([element], HIDE_STYLE_CLASS);
          this.repeatStatus.setProperties({ checked: false });
        }
        this.updateRepeatLabel(this.repeatRule);
      }
      var isDisable = this.parent.readonly || eventObj[this.fields.isReadonly];
      if (!this.parent.isAdaptive) {
        var saveButton = this.element.querySelector("." + EVENT_WINDOW_SAVE_BUTTON_CLASS);
        var deleteButton = this.element.querySelector("." + DELETE_EVENT_CLASS);
        this.disableButton(saveButton, isDisable);
        this.disableButton(deleteButton, isDisable);
      } else {
        var saveIcon = this.element.querySelector("." + EVENT_WINDOW_SAVE_ICON_CLASS);
        if (saveIcon) {
          if (isDisable) {
            addClass([saveIcon], ICON_DISABLE_CLASS);
          } else {
            removeClass([saveIcon], ICON_DISABLE_CLASS);
          }
        }
      }
      this.dialogObject.show();
    };
    EventWindow2.prototype.disableButton = function(element, value) {
      if (element) {
        element.ej2_instances[0].disabled = value;
      }
    };
    EventWindow2.prototype.renderRecurrenceEditor = function() {
      return new RecurrenceEditor({
        calendarMode: this.parent.calendarMode,
        cssClass: this.parent.cssClass,
        dateFormat: this.parent.dateFormat,
        enableRtl: this.parent.enableRtl,
        firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,
        locale: this.parent.locale
      });
    };
    EventWindow2.prototype.updateMinMaxDateToEditor = function() {
      var startDate = this.element.querySelector(".e-start");
      var endDate = this.element.querySelector(".e-end");
      if (startDate && endDate) {
        var startObj = startDate.ej2_instances[0];
        var endObj = endDate.ej2_instances[0];
        startObj.min = this.parent.minDate;
        startObj.max = this.parent.maxDate;
        endObj.min = this.parent.minDate;
        endObj.max = this.parent.maxDate;
        startObj.dataBind();
        endObj.dataBind();
      }
      if (this.recurrenceEditor) {
        var untilDate = this.recurrenceEditor.element.querySelector(".e-until-date");
        if (untilDate) {
          var untilObj = untilDate.ej2_instances[0];
          untilObj.min = this.parent.minDate;
          untilObj.max = this.parent.maxDate;
          untilObj.dataBind();
        }
      }
    };
    EventWindow2.prototype.updateRepeatLabel = function(repeatRule) {
      if (this.parent.isAdaptive && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      var data = repeatRule ? this.l10n.getConstant("repeats") + " " + this.recurrenceEditor.getRuleSummary(repeatRule) : this.l10n.getConstant("repeat");
      this.repeatStatus.setProperties({ label: data });
    };
    EventWindow2.prototype.dialogClose = function(event2) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      this.dialogEvent = event2;
      this.isCrudAction = false;
      this.parent.activeEventData = { event: void 0, element: void 0 };
      this.parent.currentAction = null;
      this.dialogObject.hide();
    };
    EventWindow2.prototype.resetForm = function() {
      this.fieldValidator.destroyToolTip();
      this.resetFormFields();
      if (!this.parent.isAdaptive && this.recurrenceEditor && !this.recurrenceEditor.isDestroyed) {
        this.recurrenceEditor.resetFields();
      }
    };
    EventWindow2.prototype.timezoneChangeStyle = function(value) {
      var timezoneDiv = this.element.querySelector("." + EVENT_WINDOW_TIME_ZONE_DIV_CLASS);
      var localTimezoneName = this.parent.tzModule.getLocalTimezoneName();
      if (value) {
        addClass([timezoneDiv], ENABLE_CLASS);
        var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);
        var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);
        var timezone = startTimezoneObj.dataSource;
        if (!startTimezoneObj.value || !this.parent.timezone) {
          var found = timezone.some(function(tz) {
            return tz.Value === localTimezoneName;
          });
          if (!found) {
            timezone.push({ Value: localTimezoneName, Text: localTimezoneName });
            startTimezoneObj.dataSource = timezone;
            endTimezoneObj.dataSource = timezone;
            startTimezoneObj.dataBind();
            endTimezoneObj.dataBind();
          }
        }
        startTimezoneObj.value = startTimezoneObj.value || this.parent.timezone || localTimezoneName;
        endTimezoneObj.value = endTimezoneObj.value || this.parent.timezone || localTimezoneName;
        startTimezoneObj.dataBind();
        endTimezoneObj.dataBind();
      } else {
        removeClass([timezoneDiv], ENABLE_CLASS);
      }
    };
    EventWindow2.prototype.resetFormFields = function() {
      var formElement = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElement_1 = formElement; _i < formElement_1.length; _i++) {
        var currentElement = formElement_1[_i];
        var columnName = currentElement.name || this.getColumnName(currentElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          this.setDefaultValueToElement(currentElement);
        }
      }
    };
    EventWindow2.prototype.eventSave = function(event2, alert) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      var formElement = this.element.querySelector("." + FORM_CLASS);
      if (formElement && formElement.classList.contains("e-formvalidator") && !formElement.ej2_instances[0].validate()) {
        return;
      }
      var dataCollection = this.getEventDataFromEditor();
      if (this.processEventValidation(dataCollection.tempData, alert)) {
        return;
      }
      this.eventCrudData = dataCollection.eventData;
      this.dialogEvent = event2;
      this.isCrudAction = true;
      this.dialogObject.hide();
    };
    EventWindow2.prototype.getEventDataFromEditor = function() {
      var eventObj = extend({}, this.getObjectFromFormData(EVENT_WINDOW_DIALOG_CLASS));
      if (!eventObj.Timezone) {
        eventObj[this.fields.startTimezone] = null;
        eventObj[this.fields.endTimezone] = null;
      }
      delete eventObj.Timezone;
      delete eventObj.Repeat;
      this.setDefaultValueToObject(eventObj);
      eventObj[this.fields.recurrenceRule] = this.recurrenceEditor ? this.recurrenceEditor.getRecurrenceRule() || null : void 0;
      var tempObj = extend({}, eventObj, null, true);
      if (eventObj[this.fields.isAllDay]) {
        eventObj[this.fields.startTime] = isNullOrUndefined(eventObj[this.fields.startTime]) ? null : resetTime(new Date(eventObj[this.fields.startTime].getTime()));
        eventObj[this.fields.endTime] = isNullOrUndefined(eventObj[this.fields.endTime]) ? null : addDays(resetTime(new Date(eventObj[this.fields.endTime].getTime())), 1);
      }
      return { eventData: eventObj, tempData: tempObj };
    };
    EventWindow2.prototype.processEventValidation = function(eventObj, alert) {
      var alertType;
      if (isNullOrUndefined(this.parent.editorTemplate)) {
        if (!eventObj[this.fields.startTime] || !eventObj[this.fields.endTime]) {
          this.parent.quickPopup.openValidationError("invalidDateError");
          return true;
        }
        if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {
          this.parent.quickPopup.openValidationError("startEndError");
          return true;
        }
      }
      if (this.recurrenceEditor && this.recurrenceEditor.value && this.recurrenceEditor.value !== "") {
        if (this.parent.currentAction !== "EditOccurrence") {
          alertType = this.recurrenceValidation(eventObj[this.fields.startTime], eventObj[this.fields.endTime], alert);
        }
        var isShowAlert = true;
        if (alertType === "seriesChangeAlert" && this.parent.uiStateValues.isIgnoreOccurrence) {
          isShowAlert = false;
        }
        if (!isNullOrUndefined(alertType) && isShowAlert && (!this.parent.enableRecurrenceValidation && alertType === "wrongPattern" || this.parent.enableRecurrenceValidation)) {
          this.parent.quickPopup.openRecurrenceValidationAlert(alertType);
          return true;
        }
      }
      return false;
    };
    EventWindow2.prototype.processCrudActions = function(eventObj) {
      var _this = this;
      this.parent.uiStateValues.isBlock = false;
      var resourceData = this.getResourceData(eventObj);
      var isResourceEventExpand = (this.parent.activeViewOptions.group.resources.length > 0 || this.parent.resourceCollection.length > 0) && !this.parent.activeViewOptions.group.allowGroupEdit && !isNullOrUndefined(resourceData);
      var eventId = this.getEventIdFromForm();
      if (!isNullOrUndefined(eventId)) {
        var eveId_1 = this.parent.eventBase.getEventIDType() === "string" ? eventId : parseInt(eventId, 10);
        var editedData = this.parent.eventsData.filter(function(data) {
          return data[_this.fields.id] === eveId_1;
        })[0];
        if (isNullOrUndefined(editedData)) {
          editedData = this.parent.blockData.filter(function(data) {
            return data[_this.fields.id] === eveId_1;
          })[0];
        }
        eventObj = extend({}, editedData, eventObj);
        if (eventObj[this.fields.isReadonly]) {
          return false;
        }
        var currentAction = void 0;
        if (!isNullOrUndefined(editedData[this.fields.recurrenceRule])) {
          currentAction = this.parent.currentAction;
          eventObj.Guid = this.parent.activeEventData.event.Guid;
          if (this.parent.currentAction === "EditOccurrence") {
            if (!eventObj[this.fields.recurrenceID]) {
              eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
              eventObj.Guid = this.parent.activeEventData.event.Guid;
            } else {
              eveId_1 = eventObj[this.fields.recurrenceID];
              currentAction = null;
            }
            if (this.parent.enableRecurrenceValidation && this.editOccurrenceValidation(eveId_1, eventObj)) {
              return true;
            }
          }
          if (this.parent.currentAction === "EditSeries" || eventObj[this.fields.id] !== editedData[this.fields.id]) {
            eventObj[this.fields.recurrenceID] = editedData[this.fields.id];
          } else if (this.parent.currentAction === "EditFollowingEvents") {
            eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
            eventObj[this.fields.followingID] = editedData[this.fields.id];
          }
        }
        if (isResourceEventExpand) {
          this.resourceSaveEvent(eventObj, "Save", currentAction);
        } else {
          this.parent.saveEvent(eventObj, currentAction);
        }
      } else {
        this.parent.currentAction = "Add";
        if (isResourceEventExpand) {
          this.resourceSaveEvent(eventObj, this.parent.currentAction);
        } else {
          eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();
          this.parent.addEvent(eventObj);
        }
      }
      return this.parent.uiStateValues.isBlock;
    };
    EventWindow2.prototype.getResourceData = function(eventObj) {
      var resourceData = null;
      if (!isNullOrUndefined(this.parent.resourceBase) && !isNullOrUndefined(this.parent.resourceBase.resourceCollection) && this.parent.resourceBase.resourceCollection.length > 0) {
        var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];
        resourceData = eventObj[lastResourceData.field];
      }
      return resourceData;
    };
    EventWindow2.prototype.getObjectFromFormData = function(className) {
      var formElement = this.getFormElements(className);
      var eventObj = {};
      for (var _i = 0, formElement_2 = formElement; _i < formElement_2.length; _i++) {
        var currentElement = formElement_2[_i];
        var columnName = currentElement.name || this.getColumnName(currentElement);
        if (!isNullOrUndefined(columnName) && columnName !== "") {
          eventObj["" + columnName] = this.getValueFromElement(currentElement);
        }
      }
      return eventObj;
    };
    EventWindow2.prototype.setDefaultValueToObject = function(eventObj) {
      if (!isNullOrUndefined(eventObj[this.fields.subject])) {
        eventObj[this.fields.subject] = eventObj[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.l10n.getConstant("addTitle");
      }
      if (!isNullOrUndefined(eventObj[this.fields.location])) {
        eventObj[this.fields.location] = eventObj[this.fields.location] || this.parent.eventSettings.fields.location.default;
      }
      if (!isNullOrUndefined(eventObj[this.fields.description])) {
        eventObj[this.fields.description] = eventObj[this.fields.description] || this.parent.eventSettings.fields.description.default;
      }
    };
    EventWindow2.prototype.recurrenceValidation = function(startDate, endDate, alert) {
      var alertMessage;
      var recEditor = this.recurrenceEditor;
      var interval = this.getInstance("e-repeat-interval.e-numerictextbox").value;
      if (alert !== this.l10n.getConstant("ok")) {
        var activeEvent = this.parent.activeEventData.event;
        var excludedEvents = [];
        if ((this.parent.currentAction === "EditSeries" || this.parent.currentAction === "EditFollowingEvents") && !isNullOrUndefined(activeEvent)) {
          var eventStartTime = activeEvent[this.parent.eventFields.startTime];
          var seriesEvents = this.parent.eventBase.getSeriesEvents(this.eventData, eventStartTime);
          if (seriesEvents.length > 0) {
            excludedEvents = this.parent.eventBase.getEditedOccurrences(seriesEvents, eventStartTime);
          } else {
            var event_2 = this.parent.eventBase.getEventById(activeEvent[this.parent.eventFields.id]);
            excludedEvents = this.parent.eventBase.getEditedOccurrences([event_2], eventStartTime);
          }
          if (this.parent.currentAction === "EditSeries" && !isNullOrUndefined(this.eventData[this.parent.eventFields.recurrenceException])) {
            excludedEvents.push(this.eventData);
          }
        }
        if (excludedEvents.length > 0) {
          alertMessage = "seriesChangeAlert";
        }
        if (this.getInstance("e-end-on-left .e-ddl .e-dropdownlist").value === "until" && this.getInstance("e-end-on-date .e-datepicker").value < startDate) {
          alertMessage = "wrongPattern";
        }
        if (isNullOrUndefined(alertMessage)) {
          var types = recEditor.value.split(";")[1].split("=")[1].split(",");
          var obj = { "SU": 0, "MO": 1, "TU": 2, "WE": 3, "TH": 4, "FR": 5, "SA": 6 };
          var temp = [];
          var tempDiff = [];
          var tempValue = void 0;
          switch (recEditor.value.split(";")[0].split("=")[1]) {
            case "DAILY":
              if ((endDate.getTime() - startDate.getTime()) / (1e3 * 3600) > interval * 24) {
                alertMessage = "createError";
              }
              break;
            case "WEEKLY":
              types = recEditor.value.split(";")[1].split("=")[1].split(",");
              for (var index = 0; index < types.length * (interval + 1); index++) {
                temp[parseInt(index.toString(), 10)] = types.length > index ? obj[types[parseInt(index.toString(), 10)]] : temp[index - types.length] + 7 * interval;
              }
              tempValue = temp.sort(function(a, b) {
                return a - b;
              });
              for (var index = 1; index < tempValue.length; index++) {
                tempDiff.push(tempValue[parseInt(index.toString(), 10)] - tempValue[index - 1]);
              }
              if ((endDate.getTime() - startDate.getTime()) / (1e3 * 3600) >= Math.min.apply(Math, tempDiff) * 24 || isNullOrUndefined(interval)) {
                alertMessage = "createError";
              }
              break;
            case "MONTHLY":
              if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setMonth(startDate.getMonth() + interval)) {
                alertMessage = "createError";
              }
              break;
            case "YEARLY":
              if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setFullYear(startDate.getFullYear() + interval)) {
                alertMessage = "createError";
              }
              break;
          }
        }
      } else {
        if (endDate.getTime() >= (/* @__PURE__ */ new Date(+startDate)).setMonth(startDate.getMonth() + interval)) {
          alertMessage = "createError";
        }
        if (isNullOrUndefined(alertMessage)) {
          this.parent.quickPopup.quickDialog.hide();
        }
      }
      if (isNullOrUndefined(interval)) {
        alertMessage = "createError";
      }
      return alertMessage;
    };
    EventWindow2.prototype.getRecurrenceIndex = function(recColl, event2) {
      var recIndex;
      for (var index = 0; index < recColl.length; index++) {
        if (event2[this.fields.startTime].valueOf() === recColl[parseInt(index.toString(), 10)][this.fields.startTime].valueOf()) {
          recIndex = index;
          break;
        }
      }
      return recIndex;
    };
    EventWindow2.prototype.trimAllDay = function(data) {
      if (data[this.fields.isAllDay]) {
        var temp = addDays(/* @__PURE__ */ new Date(+data[this.fields.endTime]), -1).getTime();
        data[this.fields.endTime] = +data[this.fields.startTime] > temp ? data[this.fields.endTime] : new Date(temp);
      }
    };
    EventWindow2.prototype.editOccurrenceValidation = function(eventId, currentData, editData) {
      var _this = this;
      if (editData === void 0) {
        editData = this.eventData;
      }
      var recurColl = this.parent.getOccurrencesByID(eventId);
      var excludedDatas = this.parent.eventsData.filter(function(data2) {
        return data2[_this.fields.recurrenceID] === eventId;
      });
      excludedDatas.map(function(data2) {
        return recurColl.push(extend({}, data2));
      });
      currentData = extend({}, currentData);
      this.trimAllDay(currentData);
      for (var _i = 0, recurColl_1 = recurColl; _i < recurColl_1.length; _i++) {
        var data = recurColl_1[_i];
        this.trimAllDay(data);
      }
      this.parent.eventBase.sortByTime(recurColl);
      var index = this.getRecurrenceIndex(recurColl, editData);
      if (isNullOrUndefined(index)) {
        return false;
      }
      var currentStartTime = /* @__PURE__ */ new Date(+currentData[this.fields.startTime]);
      var currentEndTime = /* @__PURE__ */ new Date(+currentData[this.fields.endTime]);
      var nextStartTime;
      var nextEndTime;
      if (index !== recurColl.length - 1) {
        nextStartTime = /* @__PURE__ */ new Date(+recurColl[index + 1][this.fields.startTime]);
        nextEndTime = /* @__PURE__ */ new Date(+recurColl[index + 1][this.fields.endTime]);
      }
      var lastEndTime = /* @__PURE__ */ new Date(+recurColl[recurColl.length - 1][this.fields.endTime]);
      if (index === 0) {
        if (!isNullOrUndefined(recurColl[index + 1])) {
          if (!(nextStartTime.getTime() >= currentEndTime.getTime()) && resetTime(lastEndTime).getTime() >= resetTime(currentStartTime).getTime() || resetTime(lastEndTime).getTime() < resetTime(currentStartTime).getTime()) {
            this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
            return true;
          } else if (!(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {
            this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
            return true;
          }
        }
        return false;
      } else {
        var previousStartTime = /* @__PURE__ */ new Date(+recurColl[index - 1][this.fields.startTime]);
        var previousEndTime = /* @__PURE__ */ new Date(+recurColl[index - 1][this.fields.endTime]);
        if (index === recurColl.length - 1) {
          if (resetTime(/* @__PURE__ */ new Date(+recurColl[recurColl.length - 1 - index][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) {
            this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
            return true;
          } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && resetTime(currentStartTime).getTime() > resetTime(previousStartTime).getTime())) {
            this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
            return true;
          }
        } else if (!((resetTime(previousStartTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(/* @__PURE__ */ new Date(+recurColl[0][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) && (resetTime(nextStartTime).getTime() > resetTime(currentStartTime).getTime() || lastEndTime.getTime() < currentStartTime.getTime()))) {
          this.parent.quickPopup.openRecurrenceValidationAlert("sameDayAlert");
          return true;
        } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && nextStartTime.getTime() >= currentEndTime.getTime()) || resetTime(nextEndTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(previousStartTime).getTime() > resetTime(currentEndTime).getTime() || !(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {
          this.parent.quickPopup.openRecurrenceValidationAlert("occurrenceAlert");
          return true;
        }
      }
      return false;
    };
    EventWindow2.prototype.resourceSaveEvent = function(eventObj, action, currentAction) {
      var _this = this;
      var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];
      var resourceData = eventObj[lastResourceData.field];
      resourceData = resourceData instanceof Array ? resourceData.reverse() : [resourceData].reverse();
      var lastLevel = this.parent.resourceBase.lastResourceLevel;
      var eventList = [];
      var _loop_2 = function(i2) {
        var events = extend({}, eventObj, null, true);
        events[this_2.fields.id] = this_2.parent.eventBase.getEventMaxID();
        var temp = [];
        var addValues = function() {
          if (action === "Save" && i2 === resourceData.length - 1) {
            if (temp.length > 0) {
              temp[0][_this.fields.id] = eventObj[_this.fields.id];
              for (var k2 = 1; k2 < temp.length; k2++) {
                temp[parseInt(k2.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(i2);
                eventList.push(temp[parseInt(k2.toString(), 10)]);
                _this.parent.saveEvent(temp[0], currentAction);
              }
            } else {
              events[_this.fields.id] = eventObj[_this.fields.id];
              _this.parent.saveEvent(events, currentAction);
            }
          } else {
            if (temp.length > 0) {
              for (var j = 0; j < temp.length; j++) {
                temp[parseInt(j.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(j);
                eventList.push(temp[parseInt(j.toString(), 10)]);
              }
            } else {
              events[_this.fields.id] = _this.parent.eventBase.getEventMaxID(i2);
              eventList.push(events);
            }
          }
        };
        if (this_2.parent.activeViewOptions.group.byGroupID && !isNullOrUndefined(lastLevel)) {
          var lastResource = lastResourceData.dataSource;
          var resCol = this_2.parent.resourceCollection;
          var index = void 0;
          if (resCol.length > 1) {
            index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i2.toString(), 10)], events, resCol);
          } else {
            index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i2.toString(), 10)]);
          }
          if (index < 0) {
            return { value: void 0 };
          }
          var groupId_1 = lastResource[parseInt(index.toString(), 10)][lastResourceData.groupIDField];
          var filter = lastLevel.filter(function(obj) {
            return obj.resourceData[lastResourceData.idField] === resourceData[parseInt(i2.toString(), 10)];
          }).filter(function(obj) {
            return obj.resourceData[lastResourceData.groupIDField] === groupId_1;
          })[0];
          var groupOrder = filter.groupOrder;
          for (var index_1 = 0; index_1 < this_2.parent.resourceBase.resourceCollection.length; index_1++) {
            var field = this_2.parent.resourceBase.resourceCollection[parseInt(index_1.toString(), 10)].field;
            events["" + field] = groupOrder[parseInt(index_1.toString(), 10)] instanceof Array ? groupOrder[parseInt(index_1.toString(), 10)][0] : groupOrder[parseInt(index_1.toString(), 10)];
          }
          addValues();
        } else {
          for (var index = 0; index < this_2.parent.resourceBase.resourceCollection.length - 1; index++) {
            var field = this_2.parent.resourceBase.resourceCollection[parseInt(index.toString(), 10)].field;
            if (events["" + field] instanceof Array && events["" + field].length > 1) {
              for (var k = 0; k < events["" + field].length; k++) {
                var event_3 = extend({}, events, null, true);
                event_3["" + field] = eventObj["" + field][parseInt(k.toString(), 10)];
                event_3[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
                temp.push(event_3);
              }
            } else {
              if (temp.length === 0) {
                events["" + field] = eventObj["" + field] instanceof Array ? eventObj["" + field][0] : eventObj["" + field];
                events[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
              } else {
                for (var l = 0; l < temp.length; l++) {
                  temp[parseInt(l.toString(), 10)]["" + field] = eventObj["" + field] instanceof Array ? eventObj["" + field][0] : eventObj["" + field];
                }
              }
            }
          }
          events[lastResourceData.field] = resourceData[parseInt(i2.toString(), 10)];
          addValues();
        }
      };
      var this_2 = this;
      for (var i = 0; i < resourceData.length; i++) {
        var state_1 = _loop_2(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      if (eventList.length > 0) {
        for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {
          var event_4 = eventList_1[_i];
          event_4[this.fields.recurrenceException] = null;
          event_4[this.fields.recurrenceID] = null;
        }
        this.parent.addEvent(eventList);
      }
    };
    EventWindow2.prototype.getEventIdFromForm = function() {
      return this.element.querySelector("." + FORM_CLASS).getAttribute("data-id");
    };
    EventWindow2.prototype.getFormElements = function(className) {
      var elements = [];
      if (className === EVENT_WINDOW_DIALOG_CLASS) {
        elements = [].slice.call(this.element.querySelectorAll("." + EVENT_FIELD2));
      } else {
        elements = [].slice.call(this.parent.element.querySelectorAll("." + className + " ." + EVENT_FIELD2));
      }
      return elements;
    };
    EventWindow2.prototype.getValueFromElement = function(element) {
      var value;
      if (element.classList.contains("e-datepicker")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-datetimepicker")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-dropdownlist")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-multiselect")) {
        value = element.ej2_instances[0].value;
      } else if (element.classList.contains("e-checkbox")) {
        value = element.ej2_instances[0].checked;
      } else {
        if (element.type === "checkbox") {
          value = element.checked;
        } else {
          value = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(element.value) : element.value;
        }
      }
      return value;
    };
    EventWindow2.prototype.setValueToElement = function(element, value) {
      if (element.classList.contains("e-datepicker")) {
        var instance = element.ej2_instances[0];
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-datetimepicker")) {
        var instance = element.ej2_instances[0];
        if (instance.element.classList.contains(EVENT_WINDOW_START_CLASS)) {
          this.eventWindowTime.startTime = /* @__PURE__ */ new Date("" + value);
        } else {
          this.eventWindowTime.endTime = /* @__PURE__ */ new Date("" + value);
        }
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-dropdownlist")) {
        var instance = element.ej2_instances[0];
        instance.value = value;
        instance.dataBind();
      } else if (element.classList.contains("e-multiselect")) {
        var instance = element.ej2_instances[0];
        instance.value = [];
        instance.value = value instanceof Array ? value : [value];
        instance.dataBind();
      } else if (element.classList.contains("e-checkbox")) {
        var instance = element.ej2_instances[0];
        instance.checked = value;
        instance.dataBind();
      } else {
        if (element.type !== "checkbox") {
          element.value = value || "";
        } else {
          element.checked = value;
        }
      }
    };
    EventWindow2.prototype.setDefaultValueToElement = function(element) {
      if (element.classList.contains("e-datepicker")) {
        var instance = element.ej2_instances[0];
        instance.value = this.parent.getCurrentTime();
        instance.dataBind();
      } else if (element.classList.contains("e-datetimepicker")) {
        var instance = element.ej2_instances[0];
        var dateValue = this.parent.getCurrentTime();
        this.eventWindowTime = { startTime: dateValue, endTime: dateValue };
        instance.value = dateValue;
        instance.dataBind();
      } else if (element.classList.contains("e-dropdownlist")) {
        var instance = element.ej2_instances[0];
        instance.value = null;
        instance.dataBind();
      } else if (element.classList.contains("e-multiselect")) {
        var instance = element.ej2_instances[0];
        instance.value = [];
        instance.dataBind();
      } else if (element.classList.contains("e-checkbox")) {
        var instance = element.ej2_instances[0];
        instance.checked = false;
        instance.dataBind();
      } else {
        if (element.type === "checkbox") {
          element.checked = false;
        } else {
          element.value = "";
        }
      }
    };
    EventWindow2.prototype.getInstance = function(className) {
      var element = this.element.querySelector("." + className);
      return element ? element.ej2_instances[0] : null;
    };
    EventWindow2.prototype.eventDelete = function(event2) {
      if (this.isEnterKey) {
        this.isEnterKey = false;
        return;
      }
      switch (this.parent.currentAction) {
        case "EditOccurrence":
          if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {
            this.parent.currentAction = "DeleteOccurrence";
          } else {
            this.parent.currentAction = "Delete";
          }
          break;
        case "EditSeries":
          this.parent.currentAction = "DeleteSeries";
          break;
        case "Save":
          this.parent.currentAction = "Delete";
          break;
        case "EditFollowingEvents":
          if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {
            this.parent.currentAction = "DeleteFollowingEvents";
          }
          break;
      }
      this.dialogEvent = event2;
      this.isCrudAction = false;
      this.dialogObject.hide();
      this.parent.quickPopup.openDeleteAlert();
    };
    EventWindow2.prototype.getRecurrenceEditorInstance = function() {
      if (this.parent.isAdaptive && !this.repeatDialogObject) {
        this.renderRepeatDialog();
      }
      return this.recurrenceEditor;
    };
    EventWindow2.prototype.destroyComponents = function() {
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElements_3 = formElements; _i < formElements_3.length; _i++) {
        var element = formElements_3[_i];
        var instance = void 0;
        if (element.classList.contains("e-datetimepicker")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-datepicker")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-checkbox")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-dropdownlist")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-multiselect")) {
          instance = element.ej2_instances;
        } else if (element.classList.contains("e-numerictextbox")) {
          instance = element.ej2_instances;
        }
        if (instance && instance[0]) {
          instance[0].destroy();
        }
      }
      if (this.buttonObj) {
        this.buttonObj.destroy();
      }
    };
    EventWindow2.prototype.detachComponents = function() {
      var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);
      for (var _i = 0, formElements_4 = formElements; _i < formElements_4.length; _i++) {
        var element = formElements_4[_i];
        detach(element);
      }
    };
    EventWindow2.prototype.destroy = function(isIgnore) {
      if (this.parent && !this.parent.isDestroyed) {
        this.parent.resetTemplates(["editorTemplate", "editorHeaderTemplate", "editorFooterTemplate"]);
      }
      this.destroyComponents();
      if (this.recurrenceEditor) {
        this.recurrenceEditor.destroy();
        detach(this.recurrenceEditor.element);
        this.recurrenceEditor = null;
      }
      if (this.fieldValidator) {
        this.fieldValidator.destroy();
        this.fieldValidator = null;
      }
      if (this.repeatDialogObject) {
        this.repeatDialogObject.destroy();
        this.repeatDialogObject = null;
      }
      this.detachComponents();
      if (this.dialogObject) {
        if (this.dialogObject.element) {
          var form = this.dialogObject.element.querySelector("form");
          removeChildren(form);
          detach(form);
          EventHandler.remove(this.dialogObject.element, "keydown", this.preventEventSave);
        }
        this.dialogObject.destroy();
        this.dialogObject = null;
      }
      if (this.element) {
        remove(this.element);
        this.element = null;
      }
      if (!isIgnore) {
        this.l10n = null;
        this.parent = null;
        this.fields = null;
        this.buttonObj = null;
        this.repeatStatus = null;
        this.eventWindowTime = null;
        this.dialogEvent = null;
      }
    };
    return EventWindow2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/virtual-scroll.js
var VirtualScroll2 = (
  /** @class */
  function() {
    function VirtualScroll3(parent) {
      this.translateY = 0;
      this.itemSize = 60;
      this.bufferCount = 3;
      this.renderedLength = 0;
      this.averageRowHeight = 0;
      this.startIndex = 0;
      this.parent = parent;
      this.addEventListener();
    }
    VirtualScroll3.prototype.addEventListener = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.on(virtualScroll, this.virtualScrolling, this);
    };
    VirtualScroll3.prototype.removeEventListener = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.off(virtualScroll, this.virtualScrolling);
    };
    VirtualScroll3.prototype.getRenderedCount = function() {
      this.setItemSize();
      var containerSize = this.isHorizontalScroll ? this.parent.element.clientWidth : this.parent.element.clientHeight;
      this.renderedLength = Math.ceil(containerSize / this.itemSize) + this.bufferCount;
      return this.renderedLength;
    };
    VirtualScroll3.prototype.renderVirtualTrack = function(contentWrap) {
      var wrap = createElement("div", { className: VIRTUAL_TRACK_CLASS });
      if (this.isHorizontalScroll) {
        var colCount = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1].length;
        wrap.style.width = colCount * this.itemSize + "px";
      } else {
        wrap.style.height = this.parent.resourceBase.expandedResources.length * this.itemSize + "px";
      }
      contentWrap.appendChild(wrap);
    };
    VirtualScroll3.prototype.updateVirtualScrollHeight = function() {
      var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
      var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
      var lastRenderIndex = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;
      if (lastRenderIndex !== lastResourceIndex) {
        var conTable = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        this.renderedLength = conTable.querySelector("tbody").children.length;
        virtual.style.height = conTable.offsetHeight + (this.parent.resourceBase.expandedResources.length - this.renderedLength) * conTable.offsetHeight / this.renderedLength + "px";
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (conWrap.scrollHeight - conWrap.scrollTop < conWrap.offsetHeight * this.bufferCount) {
          virtual.style.height = parseInt(virtual.style.height, 10) + conWrap.offsetHeight * this.bufferCount + "px";
        }
      } else {
        virtual.style.height = "";
      }
      this.averageRowHeight = virtual.offsetHeight / this.parent.resourceBase.expandedResources.length;
    };
    VirtualScroll3.prototype.updateVirtualTrackHeight = function(wrap) {
      var resourceCount = this.parent.resourceBase.renderedResources.length;
      if (resourceCount !== this.getRenderedCount()) {
        wrap.style.height = this.parent.element.querySelector(".e-content-wrap").clientHeight + "px";
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        this.translateY = 0;
        this.setTranslate(resWrap, conWrap, eventWrap);
      } else {
        var lastRenderIndex = this.parent.resourceBase.renderedResources[resourceCount - 1].groupIndex;
        var lastCollIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
        var renderedResCount = resourceCount + (lastCollIndex - lastRenderIndex);
        renderedResCount = renderedResCount > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length : renderedResCount;
        wrap.style.height = renderedResCount * this.itemSize + "px";
      }
    };
    VirtualScroll3.prototype.setItemSize = function() {
      if (this.isHorizontalScroll) {
        this.itemSize = getElementWidthFromClass(this.parent.activeView.element, WORK_CELLS_CLASS) || this.itemSize;
      } else {
        this.itemSize = getElementHeightFromClass(this.parent.activeView.element, WORK_CELLS_CLASS) || this.itemSize;
      }
    };
    VirtualScroll3.prototype.refreshLayout = function() {
      var initialHeight = this.parent.uiStateValues.scheduleHeight;
      this.parent.uiStateValues.scheduleHeight = this.parent.element.offsetHeight;
      var preRenderedLength = this.renderedLength;
      if (this.parent.uiStateValues.scheduleHeight !== initialHeight) {
        if (preRenderedLength < this.getRenderedCount()) {
          this.isRemoteRefresh = true;
        }
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        var firstTDIndex = parseInt(resWrap.querySelector("tbody td").getAttribute("data-group-index"), 10);
        var endIndex = firstTDIndex + this.renderedLength;
        firstTDIndex = endIndex > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length - this.renderedLength : firstTDIndex;
        firstTDIndex = firstTDIndex < 0 ? 0 : firstTDIndex;
        this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources.slice(firstTDIndex, endIndex);
        if (this.parent.resourceBase.renderedResources.length > 0) {
          this.updateContent(resWrap, conWrap, eventWrap, this.parent.resourceBase.renderedResources);
        }
      }
    };
    VirtualScroll3.prototype.renderEvents = function() {
      this.setTabIndex();
      var dynamicData = this.triggerScrollEvent(virtualScrollStop);
      if (this.parent.activeViewOptions && this.parent.activeViewOptions.enableLazyLoading && this.parent.crudModule) {
        if (dynamicData.length > 0) {
          this.parent.crudModule.refreshProcessedData(true, dynamicData);
          this.parent.hideSpinner();
          return;
        }
        this.parent.crudModule.refreshDataManager();
        return;
      }
      if (this.parent.crudModule) {
        this.parent.crudModule.refreshProcessedData(true);
      }
      if (this.parent.currentView !== "Month") {
        this.parent.notify(contentReady, {});
      }
      this.parent.hideSpinner();
    };
    VirtualScroll3.prototype.virtualScrolling = function() {
      var _this = this;
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
        this.parent.quickPopup.morePopup.hide();
      }
      var conWrap = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.isHorizontalScroll) {
        this.horizontalScrolling(conWrap);
      } else {
        var resWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
        var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
        var conTable = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        if (!this.parent.rowAutoHeight) {
          addClass([conWrap, resWrap], "e-transition");
        }
        this.renderedLength = resWrap.querySelector("tbody").children.length;
        var firstTDIndex = parseInt(resWrap.querySelector("tbody td").getAttribute("data-group-index"), 10);
        var scrollHeight = this.parent.rowAutoHeight ? conTable.offsetHeight - conWrap.offsetHeight : this.bufferCount * this.itemSize;
        var resCollection = [];
        if (conWrap.scrollTop - this.translateY < 0) {
          resCollection = this.upScroll(conWrap, firstTDIndex);
        } else if (conWrap.scrollTop - this.translateY > scrollHeight) {
          resCollection = this.downScroll(conWrap, firstTDIndex);
        }
        if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {
          this.triggerScrollEvent(virtualScrollStart);
          var selectedEle = this.parent.getSelectedCells();
          this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;
          this.updateContent(resWrap, conWrap, eventWrap, resCollection);
          this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);
          if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === "drag") {
            this.parent.dragAndDropModule.navigationWrapper();
          }
          window.clearTimeout(this.timeValue);
          this.timeValue = window.setTimeout(function() {
            _this.renderEvents();
          }, 250);
        }
      }
    };
    VirtualScroll3.prototype.horizontalScrolling = function(conWrap) {
      var _this = this;
      var resCollection = [];
      var scrollWidth2 = this.bufferCount * this.itemSize;
      if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) < 0) {
        resCollection = this.leftScroll(conWrap);
      } else if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) > scrollWidth2) {
        resCollection = this.rightScroll(conWrap);
      }
      if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {
        if (this.parent.resourceBase.expandedResources.length !== resCollection.length || this.parent.resourceBase.expandedResources[0] !== resCollection[0] || this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1] !== resCollection[resCollection.length - 1]) {
          this.triggerScrollEvent(virtualScrollStart);
          var colLevels = this.parent.activeView.colLevels.slice(0);
          this.updateHorizontalContent(conWrap, resCollection);
          setStyleAttribute(conWrap.querySelector("table"), { transform: "translateX(" + this.translateY + "px)" });
          this.parent.activeView.colLevels = colLevels;
          if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === "drag") {
            this.parent.dragAndDropModule.navigationWrapper();
          }
        }
        window.clearTimeout(this.timeValue);
        this.timeValue = window.setTimeout(function() {
          _this.renderEvents();
        }, 250);
      }
    };
    VirtualScroll3.prototype.triggerScrollEvent = function(action) {
      var _this = this;
      var dynamicData = [];
      if (!this.parent.activeView) {
        return dynamicData;
      }
      var eventArgs = {
        startDate: this.parent.activeView.startDate(),
        endDate: this.parent.activeView.endDate(),
        startIndex: this.parent.resourceBase.renderedResources[0].groupIndex,
        endIndex: this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex,
        resourceData: this.parent.resourceBase.renderedResources.map(function(x) {
          return x.resourceData;
        }),
        name: action
      };
      this.parent.trigger(action, eventArgs, function(args) {
        if (action === virtualScrollStart) {
          _this.parent.showSpinner();
        } else if (action === virtualScrollStop && !isNullOrUndefined(args.eventData) && args.eventData.length > 0) {
          dynamicData = args.eventData;
        }
      });
      return dynamicData;
    };
    VirtualScroll3.prototype.upScroll = function(conWrap, firstTDIndex) {
      var index = 0;
      index = ~~(conWrap.scrollTop / this.itemSize) + Math.ceil(conWrap.clientHeight / this.itemSize) - this.renderedLength;
      if (this.parent.rowAutoHeight) {
        index = index > firstTDIndex ? firstTDIndex - this.bufferCount : index;
      }
      index = index > 0 ? index : 0;
      var prevSetCollection = this.getBufferCollection(index, index + this.renderedLength);
      this.parent.resourceBase.renderedResources = prevSetCollection;
      if (firstTDIndex === 0) {
        this.translateY = conWrap.scrollTop;
      } else {
        var height = this.parent.rowAutoHeight ? this.averageRowHeight : this.itemSize;
        height = height > 0 ? height : this.itemSize;
        this.translateY = conWrap.scrollTop - this.bufferCount * height > 0 ? conWrap.scrollTop - this.bufferCount * height : 0;
      }
      return prevSetCollection;
    };
    VirtualScroll3.prototype.downScroll = function(conWrap, firstTDIndex) {
      var lastResource = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;
      var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;
      if (lastResource === lastResourceIndex) {
        return null;
      }
      var nextSetResIndex = 0;
      nextSetResIndex = ~~(conWrap.scrollTop / this.itemSize);
      if (this.parent.rowAutoHeight) {
        nextSetResIndex = ~~((conWrap.scrollTop - this.translateY) / this.averageRowHeight) + firstTDIndex;
        nextSetResIndex = nextSetResIndex > firstTDIndex + this.bufferCount ? nextSetResIndex : firstTDIndex + this.bufferCount;
      }
      var lastIndex = nextSetResIndex + this.renderedLength;
      lastIndex = lastIndex > this.parent.resourceBase.expandedResources.length ? nextSetResIndex + (this.parent.resourceBase.expandedResources.length - nextSetResIndex) : lastIndex;
      var nextSetCollection = this.getBufferCollection(lastIndex - this.renderedLength, lastIndex);
      this.translateY = conWrap.scrollTop;
      return nextSetCollection;
    };
    VirtualScroll3.prototype.leftScroll = function(conWrap) {
      var index = 0;
      index = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize) + Math.ceil(conWrap.clientWidth / this.itemSize) - this.renderedLength;
      index = index > 0 ? index : 0;
      return this.getCollection(index, index + this.renderedLength);
    };
    VirtualScroll3.prototype.rightScroll = function(conWrap) {
      var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];
      var nextSetIndex = 0;
      nextSetIndex = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize);
      var lastIndex = nextSetIndex + this.renderedLength;
      lastIndex = lastIndex > lastLevel.length - 1 ? lastLevel.length - 1 : lastIndex;
      return this.getCollection(lastIndex - this.renderedLength, lastIndex);
    };
    VirtualScroll3.prototype.getCollection = function(startIndex, endIndex) {
      this.translateY = startIndex * this.itemSize;
      var lastLevel = this.getResCollection(startIndex, endIndex);
      if (this.parent.enableRtl) {
        this.translateY = -this.translateY;
      }
      return lastLevel;
    };
    VirtualScroll3.prototype.getResCollection = function(startIndex, endIndex) {
      var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];
      var resCollection = [];
      var index = { startIndex: 0, endIndex: 0 };
      if (this.parent.activeViewOptions.group.byDate) {
        if (lastLevel[parseInt(startIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[0].date.getTime() && lastLevel[parseInt(endIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].date.getTime()) {
          return this.parent.resourceBase.expandedResources;
        }
        resCollection = this.getByDateCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);
        this.setRenderedDates(resCollection);
      } else {
        if (lastLevel[parseInt(startIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[0].groupIndex && lastLevel[parseInt(endIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex) {
          return this.parent.resourceBase.expandedResources;
        }
        resCollection = this.getByIdCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);
      }
      if (this.parent.currentView !== "Month") {
        this.startIndex = index.startIndex;
        resCollection = lastLevel.slice(index.startIndex, index.endIndex);
      }
      this.translateY = index.startIndex * this.itemSize;
      return resCollection;
    };
    VirtualScroll3.prototype.getByDateCollection = function(firstItem, lastItem, index) {
      var resCollection = this.parent.activeView.colLevels[0].filter(function(data) {
        return firstItem.date.getTime() <= data.date.getTime() && data.date.getTime() <= lastItem.date.getTime();
      });
      this.setStartEndIndex(this.parent.activeView.colLevels[0], resCollection[0], resCollection[resCollection.length - 1], index);
      return resCollection;
    };
    VirtualScroll3.prototype.getByIdCollection = function(firstItem, lastItem, index) {
      var resCollection = this.parent.resourceBase.lastResourceLevel.filter(function(data) {
        return firstItem.groupIndex <= data.groupIndex && data.groupIndex <= lastItem.groupIndex;
      });
      this.parent.resourceBase.renderedResources = resCollection;
      this.setStartEndIndex(this.parent.resourceBase.lastResourceLevel, resCollection[0], resCollection[resCollection.length - 1], index);
      return resCollection;
    };
    VirtualScroll3.prototype.setStartEndIndex = function(data, firstItem, lastItem, colIndex) {
      var index = 0;
      data.filter(function(data2) {
        if (firstItem === data2) {
          colIndex.startIndex = index;
        } else if (lastItem === data2) {
          colIndex.endIndex = index + data2.colSpan;
        }
        index += data2.colSpan;
      });
      if (firstItem === lastItem) {
        colIndex.endIndex = colIndex.startIndex + lastItem.colSpan;
      }
    };
    VirtualScroll3.prototype.updateContent = function(resWrap, conWrap, eventWrap, resCollection) {
      var renderedLength = resWrap.querySelector("tbody").children.length;
      if (document.activeElement && document.activeElement.classList.contains(RESOURCE_CELLS_CLASS)) {
        this.isResourceCell = true;
        this.parent.element.focus();
      }
      for (var i = 0; i < renderedLength; i++) {
        remove(resWrap.querySelector("tbody tr"));
        remove(conWrap.querySelector("tbody tr"));
        remove(eventWrap.querySelector("div"));
      }
      this.parent.resourceBase.renderedResources = resCollection;
      var resourceRows = this.parent.resourceBase.getContentRows(resCollection, true);
      var contentRows = this.parent.activeView.getContentRows();
      var eventRows = this.parent.activeView.getEventRows(resCollection.length);
      append(resourceRows, resWrap.querySelector("tbody"));
      append(contentRows, conWrap.querySelector("tbody"));
      append(eventRows, eventWrap);
    };
    VirtualScroll3.prototype.updateHorizontalContent = function(conWrap, resCollection) {
      this.parent.resourceBase.expandedResources = resCollection;
      var selectedEle = this.parent.getSelectedCells();
      this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;
      var renderedLength = conWrap.querySelectorAll("tbody tr").length;
      for (var i = 0; i < renderedLength; i++) {
        remove(conWrap.querySelector("tbody tr"));
      }
      if (this.parent.currentView === "Month") {
        if (this.parent.activeViewOptions.group.byDate) {
          this.parent.activeView.colLevels[0] = resCollection;
        } else {
          this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 2] = resCollection;
        }
        var contentRows = this.parent.activeView.getContentRows();
        append(contentRows, conWrap.querySelector("tbody"));
      } else {
        var col = [].slice.call(conWrap.querySelector("colgroup").children);
        for (var i = 0; i < col.length; i++) {
          remove(col[parseInt(i.toString(), 10)]);
        }
        this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1] = resCollection;
        var contentRows = this.parent.activeView.getContentRows();
        var table = conWrap.querySelector("table");
        var thead = conWrap.querySelector("thead");
        var colGroupEle_1 = conWrap.querySelector("colgroup");
        resCollection.forEach(function() {
          colGroupEle_1.appendChild(createElement("col"));
        });
        thead.appendChild(this.parent.eventBase.createEventWrapper("", this.startIndex > 0 ? this.startIndex : 0));
        if (this.parent.activeViewOptions.timeScale.enable) {
          thead.appendChild(this.parent.eventBase.createEventWrapper("timeIndicator"));
        }
        prepend([thead], table);
        append(contentRows, conWrap.querySelector("tbody"));
      }
    };
    VirtualScroll3.prototype.getBufferCollection = function(startIndex, endIndex) {
      return this.parent.resourceBase.expandedResources.slice(startIndex, endIndex);
    };
    VirtualScroll3.prototype.setTranslate = function(resWrap, conWrap, eventWrap, timeIndicator) {
      setStyleAttribute(resWrap.querySelector("table"), { transform: "translateY(" + this.translateY + "px)" });
      setStyleAttribute(conWrap.querySelector("table"), { transform: "translateY(" + this.translateY + "px)" });
      setStyleAttribute(eventWrap, { transform: "translateY(" + this.translateY + "px)" });
      if (!isNullOrUndefined(timeIndicator)) {
        setStyleAttribute(timeIndicator, { transform: "translateY(" + this.translateY + "px)" });
      }
    };
    VirtualScroll3.prototype.updateFocusedWorkCell = function() {
      if (this.focusedEle) {
        var date = parseInt(this.focusedEle.getAttribute("data-date"), 10);
        var groupIndex = parseInt(this.focusedEle.getAttribute("data-group-index"), 10);
        var ele = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-date="' + date + '"][data-group-index="' + groupIndex + '"]');
        if (ele) {
          this.parent.addSelectedClass([ele], ele, true);
        }
        this.focusedEle = null;
      }
    };
    VirtualScroll3.prototype.setRenderedDates = function(resCollection) {
      if (this.parent.currentView !== "Month") {
        var dateCol_1 = resCollection.map(function(x) {
          return x.date;
        });
        this.parent.resourceBase.renderedResources.forEach(function(x) {
          return x.renderDates = dateCol_1;
        });
      } else {
        var dateCol_2 = resCollection.map(function(x) {
          return x.date.getDay();
        });
        var renderDates_1 = this.parent.activeView.renderDates.filter(function(x) {
          return dateCol_2.indexOf(x.getDay()) >= 0;
        });
        this.parent.resourceBase.renderedResources.forEach(function(x) {
          return x.renderDates = renderDates_1;
        });
      }
    };
    VirtualScroll3.prototype.setTabIndex = function() {
      var resColWrap = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
      var resCells = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_CELLS_CLASS));
      if (resCells && resColWrap) {
        resCells.forEach(function(element) {
          if (element.getBoundingClientRect().top >= resColWrap.getBoundingClientRect().top) {
            element.setAttribute("tabindex", "0");
          }
        });
      }
      var focusResCell = this.parent.element.querySelector("." + RESOURCE_CELLS_CLASS + '[tabindex="0"]');
      if (this.isResourceCell && focusResCell) {
        focusResCell.focus();
        this.isResourceCell = false;
      }
    };
    VirtualScroll3.prototype.destroy = function() {
      this.removeEventListener();
      this.focusedEle = null;
    };
    return VirtualScroll3;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/renderer.js
var Render = (
  /** @class */
  function() {
    function Render2(parent) {
      this.parent = parent;
    }
    Render2.prototype.render = function(viewName, isDataRefresh) {
      if (isDataRefresh === void 0) {
        isDataRefresh = true;
      }
      this.initializeLayout(viewName);
      if (this.parent.activeView && isDataRefresh) {
        this.parent.crudModule.refreshDataManager();
      }
    };
    Render2.prototype.initializeLayout = function(viewName) {
      if (this.parent.activeView) {
        var templates = [
          "cellTemplate",
          "tooltipTemplate",
          "majorSlotTemplate",
          "minorSlotTemplate",
          "headerTooltipTemplate",
          "dateHeaderTemplate",
          "dayHeaderTemplate",
          "monthHeaderTemplate",
          "headerIndentTemplate",
          "resourceHeaderTemplate",
          "cellHeaderTemplate",
          "dateRangeTemplate"
        ];
        if (this.parent.activeEventTemplates.length > 0) {
          templates = templates.concat(this.parent.activeEventTemplates);
          this.parent.activeEventTemplates = [];
        } else {
          templates.push("eventTemplate");
        }
        this.parent.resetTemplates(templates);
        this.parent.activeView.removeEventListener();
        this.parent.activeView.destroy();
      }
      switch (viewName) {
        case "Day":
          this.parent.activeView = this.parent.dayModule;
          break;
        case "Week":
          this.parent.activeView = this.parent.weekModule;
          break;
        case "WorkWeek":
          this.parent.activeView = this.parent.workWeekModule;
          break;
        case "Month":
          this.parent.activeView = this.parent.monthModule;
          break;
        case "Year":
          this.parent.activeView = this.parent.yearModule;
          break;
        case "Agenda":
          this.parent.activeView = this.parent.agendaModule;
          break;
        case "MonthAgenda":
          this.parent.activeView = this.parent.monthAgendaModule;
          break;
        case "TimelineDay":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-day-view";
          }
          break;
        case "TimelineWorkWeek":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-work-week-view";
          }
          break;
        case "TimelineWeek":
          this.parent.activeView = this.parent.timelineViewsModule;
          if (!isNullOrUndefined(this.parent.activeView)) {
            this.parent.activeView.viewClass = "e-timeline-week-view";
          }
          break;
        case "TimelineMonth":
          this.parent.activeView = this.parent.timelineMonthModule;
          break;
        case "TimelineYear":
          this.parent.activeView = this.parent.timelineYearModule;
          break;
      }
      if (isNullOrUndefined(this.parent.activeView)) {
        var firstView = this.parent.viewCollections[0].option;
        if (firstView) {
          this.parent.setProperties({ currentView: firstView }, true);
          if (this.parent.headerModule) {
            this.parent.headerModule.updateActiveView();
            this.parent.headerModule.setCalendarView();
          }
          console.warn('[WARNING] :: Module "' + viewName + '" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
          return this.initializeLayout(firstView);
        }
        throw Error("Inject required modules");
      }
      this.parent.uiStateValues.scheduleHeight = this.parent.element.offsetHeight;
      this.parent.activeView.viewIndex = this.parent.viewIndex;
      this.updateLabelText(viewName);
      this.parent.activeView.addEventListener();
      this.parent.activeView.getRenderDates();
      this.parent.uiStateValues.isGroupAdaptive = this.parent.activeViewOptions.group.resources.length > 0 && (this.parent.enableAdaptiveUI && !this.parent.isAdaptive || this.parent.isAdaptive && this.parent.activeViewOptions.group.enableCompactView);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.destroy();
        this.parent.virtualScrollModule = null;
      }
      if ((["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(this.parent.currentView) === -1 || this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.orientation === "Vertical") && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.virtualScrollModule = new VirtualScroll2(this.parent);
        if (this.parent.activeView.isTimelineView()) {
          this.parent.uiStateValues.top = 0;
        } else {
          this.parent.virtualScrollModule.isHorizontalScroll = true;
          this.parent.uiStateValues.left = 0;
        }
      }
      this.updateHeader();
      this.parent.currentTimezoneDate = this.parent.getCurrentTime();
      this.parent.activeView.renderLayout(CURRENT_PANEL_CLASS);
      this.parent.renderTemplates();
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.destroy();
        this.parent.eventTooltip = null;
      }
      if (this.parent.eventSettings.enableTooltip || this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.headerTooltipTemplate) {
        this.parent.eventTooltip = new EventTooltip(this.parent);
      }
    };
    Render2.prototype.updateHeader = function() {
      if (this.parent.headerModule) {
        this.parent.headerModule.setDayOfWeek(this.parent.activeViewOptions.firstDayOfWeek);
        if (this.parent.activeViewOptions.readonly) {
          addClass([this.parent.element], READ_ONLY);
        } else if (this.parent.element.classList.contains(READ_ONLY)) {
          removeClass([this.parent.element], READ_ONLY);
        }
        this.parent.headerModule.updateDateRange();
        this.parent.headerModule.updateHeaderItems("remove");
      }
    };
    Render2.prototype.updateLabelText = function(view) {
      this.parent.element.setAttribute("role", "application");
      this.parent.element.removeAttribute("aria-labelledby");
      this.parent.element.removeAttribute("aria-label");
      if (view === "Year") {
        this.parent.element.setAttribute("aria-label", this.parent.activeView.getLabelText(view));
      } else {
        this.parent.element.setAttribute("aria-labelledby", this.parent.element.id + "_table");
      }
    };
    return Render2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/work-hours.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate36 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WorkHours = (
  /** @class */
  function(_super) {
    __extends39(WorkHours2, _super);
    function WorkHours2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate36([
      Property(true)
    ], WorkHours2.prototype, "highlight", void 0);
    __decorate36([
      Property("09:00")
    ], WorkHours2.prototype, "start", void 0);
    __decorate36([
      Property("18:00")
    ], WorkHours2.prototype, "end", void 0);
    return WorkHours2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/time-scale.js
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate37 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TimeScale = (
  /** @class */
  function(_super) {
    __extends40(TimeScale2, _super);
    function TimeScale2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate37([
      Property(true)
    ], TimeScale2.prototype, "enable", void 0);
    __decorate37([
      Property(60)
    ], TimeScale2.prototype, "interval", void 0);
    __decorate37([
      Property(2)
    ], TimeScale2.prototype, "slotCount", void 0);
    __decorate37([
      Property()
    ], TimeScale2.prototype, "minorSlotTemplate", void 0);
    __decorate37([
      Property()
    ], TimeScale2.prototype, "majorSlotTemplate", void 0);
    return TimeScale2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/quick-info-templates.js
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate38 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var QuickInfoTemplates = (
  /** @class */
  function(_super) {
    __extends41(QuickInfoTemplates2, _super);
    function QuickInfoTemplates2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate38([
      Property("Both")
    ], QuickInfoTemplates2.prototype, "templateType", void 0);
    __decorate38([
      Property()
    ], QuickInfoTemplates2.prototype, "header", void 0);
    __decorate38([
      Property()
    ], QuickInfoTemplates2.prototype, "content", void 0);
    __decorate38([
      Property()
    ], QuickInfoTemplates2.prototype, "footer", void 0);
    return QuickInfoTemplates2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/header-rows.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate39 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRows = (
  /** @class */
  function(_super) {
    __extends42(HeaderRows2, _super);
    function HeaderRows2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate39([
      Property()
    ], HeaderRows2.prototype, "option", void 0);
    __decorate39([
      Property()
    ], HeaderRows2.prototype, "template", void 0);
    return HeaderRows2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js
var Crud = (
  /** @class */
  function() {
    function Crud2(parent) {
      this.parent = parent;
      this.crudObj = { sourceEvent: null, targetEvent: null, isCrudAction: false };
    }
    Crud2.prototype.getQuery = function() {
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      return this.parent.dataModule.generateQuery(start, end);
    };
    Crud2.prototype.getTable = function() {
      if (this.parent.eventSettings.query) {
        var query = this.parent.eventSettings.query.clone();
        return query.fromTable;
      }
      return null;
    };
    Crud2.prototype.refreshDataManager = function() {
      var _this = this;
      if (!this.parent.activeView) {
        return;
      }
      if (this.parent.uiStateValues && this.parent.uiStateValues.isPreventEventRefresh) {
        this.parent.uiStateValues.isPreventEventRefresh = false;
        this.parent.refreshEvents(false);
        this.parent.hideSpinner();
        return;
      }
      var start = this.parent.activeView.startDate();
      var end = this.parent.activeView.endDate();
      var dataManager = this.parent.dataModule.getData(this.parent.dataModule.generateQuery(start, end));
      dataManager.then(function(e) {
        return _this.dataManagerSuccess(e);
      }).catch(function(e) {
        return _this.dataManagerFailure(e);
      });
    };
    Crud2.prototype.dataManagerSuccess = function(e) {
      var _this = this;
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(dataBinding, e, function(args) {
        if (args.cancel) {
          return;
        }
        var resultData = extend([], args.result, null, true);
        _this.parent.eventsData = resultData.filter(function(data) {
          return !data[_this.parent.eventFields.isBlock];
        });
        _this.parent.blockData = resultData.filter(function(data) {
          return data[_this.parent.eventFields.isBlock];
        });
        _this.refreshProcessedData();
        if (_this.parent.dragAndDropModule && _this.parent.dragAndDropModule.actionObj.action === "drag") {
          _this.parent.dragAndDropModule.navigationWrapper();
        }
        _this.parent.trigger(dataBound, null, function() {
          _this.parent.hideSpinner();
          if (_this.parent.isPrinting) {
            setTimeout(function() {
              _this.parent.notify(print2, {});
            }, 100);
          }
        });
      });
    };
    Crud2.prototype.dataManagerFailure = function(e) {
      var _this = this;
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(actionFailure, { error: e }, function() {
        return _this.parent.hideSpinner();
      });
    };
    Crud2.prototype.refreshProcessedData = function(isVirtualScrollAction, dynamicEvents) {
      if (isVirtualScrollAction === void 0) {
        isVirtualScrollAction = false;
      }
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.actionObj.action = "";
        removeClass([this.parent.element], "e-event-action");
      }
      if (this.parent.activeViewOptions && this.parent.activeViewOptions.eventTemplate) {
        var templateNames = ["eventTemplate"];
        if (this.crudObj.isCrudAction && ["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(this.parent.currentView) === -1) {
          templateNames = [];
          for (var i = 0, len = this.crudObj.sourceEvent.length; i < len; i++) {
            templateNames.push("eventTemplate_" + this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex);
            if (this.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {
              templateNames.push("eventTemplate_" + this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex);
            }
          }
        }
        if (templateNames.length > 0) {
          this.parent.resetTemplates(templateNames);
        }
      }
      if (isVirtualScrollAction) {
        this.parent.notify(dataReady, { processedData: dynamicEvents ? this.parent.eventBase.processData(dynamicEvents) : this.parent.eventsProcessed });
        return;
      }
      var eventsData = this.parent.eventsData || [];
      var blockData = this.parent.blockData || [];
      var data = eventsData.concat(blockData);
      this.parent.notify(dataReady, { processedData: this.parent.eventBase ? this.parent.eventBase.processData(data) : [] });
    };
    Crud2.prototype.refreshData = function(args) {
      var _this = this;
      var actionArgs = {
        requestType: args.requestType,
        cancel: false,
        data: args.data,
        addedRecords: args.editParams.addedRecords,
        changedRecords: args.editParams.changedRecords,
        deletedRecords: args.editParams.deletedRecords
      };
      if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {
        this.parent.dragAndDropModule.actionObj.element.style.display = "none";
      }
      if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {
        this.parent.resizeModule.actionObj.element.style.display = "none";
      }
      if (this.parent.isSpecificResourceEvents()) {
        if (args.requestType === "eventCreated" || args.requestType === "eventRemoved") {
          this.crudObj.isCrudAction = true;
          this.crudObj.sourceEvent = [];
          var crudData = args.data instanceof Array ? args.data.length === 0 && args.requestType === "eventRemoved" ? args.editParams.deletedRecords : args.data : (typeof args.data === "string" || typeof args.data === "number") && args.requestType === "eventRemoved" ? args.editParams.deletedRecords : [args.data];
          var _loop_1 = function(data2) {
            this_1.crudObj.isCrudAction = !(args.requestType === "eventRemoved" && !isNullOrUndefined(data2.parent));
            var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data2);
            if (groupIndex > -1 && this_1.parent.crudModule.crudObj.sourceEvent.filter(function(tdData) {
              return tdData.groupIndex === groupIndex;
            }).length === 0 && this_1.crudObj.isCrudAction) {
              this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)]);
            }
          };
          var this_1 = this;
          for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {
            var data = crudData_1[_i];
            _loop_1(data);
          }
          this.crudObj.targetEvent = this.crudObj.sourceEvent;
        }
      }
      if (this.parent.dataModule.dataManager.dataSource.offline) {
        this.parent.trigger(actionComplete, actionArgs, function(offlineArgs) {
          if (!offlineArgs.cancel) {
            _this.refreshDataManager();
          }
        });
      } else {
        args.promise.then(function() {
          if (!_this.parent || _this.parent && _this.parent.isDestroyed) {
            return;
          }
          _this.parent.trigger(actionComplete, actionArgs, function(onlineArgs) {
            if (!onlineArgs.cancel) {
              _this.refreshDataManager();
            }
          });
        }).catch(function(e) {
          if (!_this.parent || _this.parent && _this.parent.isDestroyed) {
            return;
          }
          _this.parent.trigger(actionFailure, { error: e });
        });
      }
    };
    Crud2.prototype.addEvent = function(eventData) {
      var _this = this;
      if (this.parent.eventSettings.allowAdding && !this.parent.activeViewOptions.readonly) {
        if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {
          this.parent.quickPopup.openValidationError("blockAlert", eventData);
          return;
        }
        var addEvents = eventData instanceof Array ? eventData : [eventData];
        if (addEvents.length === 0) {
          return;
        }
        var args = {
          requestType: "eventCreate",
          cancel: false,
          data: addEvents,
          addedRecords: addEvents,
          changedRecords: [],
          deletedRecords: []
        };
        this.parent.trigger(actionBegin, args, function(addArgs) {
          if (!addArgs.cancel) {
            var fields = _this.parent.eventFields;
            var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
            var promise = void 0;
            if (addArgs.addedRecords instanceof Array) {
              for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {
                var event_1 = _a[_i];
                event_1 = _this.parent.eventBase.updateEventDateTime(event_1);
                var eventData_1 = extend({}, _this.parent.eventBase.processTimezone(event_1, true), null, true);
                editParams.addedRecords.push(eventData_1);
              }
              promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
            } else {
              var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);
              editParams.addedRecords.push(event_2);
              promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());
            }
            var crudArgs = {
              requestType: "eventCreated",
              cancel: false,
              data: addArgs.addedRecords,
              promise,
              editParams
            };
            _this.refreshData(crudArgs);
          }
        });
      }
    };
    Crud2.prototype.saveEvent = function(eventData, action) {
      var _this = this;
      if (this.parent.eventSettings.allowEditing && !this.parent.activeViewOptions.readonly) {
        if (this.parent.currentAction !== "EditFollowingEvents" && !this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {
          this.parent.quickPopup.openValidationError("blockAlert", eventData);
          this.parent.crudModule.crudObj.isCrudAction = false;
          return;
        }
        var updateEvents = eventData instanceof Array ? eventData : [eventData];
        if (updateEvents.length === 0) {
          return;
        }
        this.parent.currentAction = action;
        if (action) {
          switch (action) {
            case "Save":
              this.processSave(eventData);
              break;
            case "EditOccurrence":
              this.processOccurrences(eventData, action);
              break;
            case "EditFollowingEvents":
              this.processFollowSeries(eventData, action);
              break;
            case "EditSeries":
              this.processEntireSeries(eventData, action);
              break;
          }
        } else {
          var args = {
            requestType: "eventChange",
            cancel: false,
            data: eventData,
            addedRecords: [],
            changedRecords: updateEvents,
            deletedRecords: []
          };
          this.parent.trigger(actionBegin, args, function(saveArgs) {
            if (!saveArgs.cancel) {
              var promise = void 0;
              var fields = _this.parent.eventFields;
              var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
              if (saveArgs.changedRecords instanceof Array) {
                for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {
                  var event_3 = _a[_i];
                  event_3 = _this.parent.eventBase.updateEventDateTime(event_3);
                  var eventData_2 = extend({}, _this.parent.eventBase.processTimezone(event_3, true), null, true);
                  editParams.changedRecords.push(eventData_2);
                }
                promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
              } else {
                var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);
                editParams.changedRecords.push(event_4);
                promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());
              }
              var cloneEvent = extend({}, saveArgs.changedRecords[saveArgs.changedRecords.length - 1], null, true);
              _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);
              var crudArgs = {
                requestType: "eventChanged",
                cancel: false,
                data: saveArgs.changedRecords,
                promise,
                editParams
              };
              _this.refreshData(crudArgs);
            }
          });
        }
      }
    };
    Crud2.prototype.deleteEvent = function(eventData, action) {
      var _this = this;
      if (this.parent.eventSettings.allowDeleting && !this.parent.activeViewOptions.readonly) {
        this.parent.currentAction = action;
        var deleteEvents = [];
        if (typeof eventData === "string" || typeof eventData === "number") {
          deleteEvents = this.parent.eventsData.filter(function(eventObj) {
            return eventObj[_this.parent.eventFields.id] === eventData;
          });
        } else {
          deleteEvents = eventData instanceof Array ? eventData : [eventData];
        }
        if (deleteEvents.length === 0) {
          return;
        }
        if (action) {
          switch (action) {
            case "Delete":
              this.processDelete(deleteEvents);
              break;
            case "DeleteOccurrence":
              this.processOccurrences(deleteEvents, action);
              break;
            case "DeleteFollowingEvents":
              this.processFollowSeries(deleteEvents, action);
              break;
            case "DeleteSeries":
              this.processEntireSeries(deleteEvents, action);
              break;
          }
        } else {
          var args = {
            requestType: "eventRemove",
            cancel: false,
            data: eventData,
            addedRecords: [],
            changedRecords: [],
            deletedRecords: deleteEvents
          };
          this.parent.trigger(actionBegin, args, function(deleteArgs) {
            if (!deleteArgs.cancel) {
              var promise = void 0;
              var fields = _this.parent.eventFields;
              var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
              if (deleteArgs.deletedRecords.length > 1) {
                editParams.deletedRecords = editParams.deletedRecords.concat(deleteArgs.deletedRecords);
                promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
              } else {
                editParams.deletedRecords.push(deleteArgs.deletedRecords[0]);
                promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());
              }
              _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);
              var crudArgs = {
                requestType: "eventRemoved",
                cancel: false,
                data: deleteArgs.deletedRecords,
                promise,
                editParams
              };
              _this.refreshData(crudArgs);
            }
          });
        }
      }
    };
    Crud2.prototype.processOccurrences = function(eventData, action) {
      var _this = this;
      var occurrenceData = [];
      var isDeletedRecords = false;
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {
          var event_5 = eventData_3[_i];
          occurrenceData.push({ occurrence: event_5, parent: this.getParentEvent(event_5) });
        }
      } else {
        occurrenceData = { occurrence: eventData, parent: this.getParentEvent(eventData) };
      }
      var updateEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditOccurrence" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: updateEvents,
        deletedRecords: []
      };
      args.data = occurrenceData;
      this.parent.trigger(actionBegin, args, function(occurrenceArgs) {
        if (!occurrenceArgs.cancel) {
          var fields = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var occurrenceEvents = occurrenceData instanceof Array ? occurrenceData : [occurrenceData];
          var _loop_2 = function(a2, count2) {
            var childEvent = occurrenceArgs.changedRecords[parseInt(a2.toString(), 10)];
            var parentEvent = occurrenceEvents[parseInt(a2.toString(), 10)].parent;
            var parentException = parentEvent[fields.recurrenceException];
            var editedData = void 0;
            var exceptionDate = void 0;
            switch (action) {
              case "EditOccurrence":
                editedData = _this.parent.eventsProcessed.filter(function(event2) {
                  return event2.Guid === childEvent.Guid;
                })[0];
                exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);
                if (exceptionDate !== parentEvent[fields.recurrenceException]) {
                  parentEvent[fields.recurrenceException] = exceptionDate;
                  childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);
                  childEvent[fields.recurrenceID] = parentEvent[fields.id];
                  childEvent[fields.followingID] = null;
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                  editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                } else {
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                }
                break;
              case "DeleteOccurrence":
                if (!childEvent[fields.recurrenceException]) {
                  parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);
                  editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                }
                if (childEvent[fields.id] !== parentEvent[fields.id]) {
                  editParams.deletedRecords.push(childEvent);
                  isDeletedRecords = true;
                }
                break;
            }
          };
          for (var a = 0, count = occurrenceArgs.changedRecords.length; a < count; a++) {
            _loop_2(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, occurrenceArgs.changedRecords[occurrenceArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditOccurrence" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditOccurrence" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: isDeletedRecords ? occurrenceArgs.deletedRecords : occurrenceArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processFollowSeries = function(eventData, action) {
      var _this = this;
      var followData = [];
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {
          var event_6 = eventData_4[_i];
          followData.push({ occurrence: event_6, parent: this.getParentEvent(event_6) });
        }
      } else {
        followData = { occurrence: eventData, parent: this.getParentEvent(eventData) };
      }
      var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditFollowingEvents" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: updateFollowEvents,
        deletedRecords: []
      };
      args.data = followData;
      this.parent.trigger(actionBegin, args, function(followArgs) {
        if (!followArgs.cancel) {
          var fields_1 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var followEvents = followData instanceof Array ? followData : [followData];
          var _loop_3 = function(a2, count2) {
            var childEvent = followArgs.changedRecords[parseInt(a2.toString(), 10)];
            var parentEvent = followEvents[parseInt(a2.toString(), 10)].parent;
            var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);
            var isSpanned = void 0;
            switch (action) {
              case "EditFollowingEvents":
                _this.processRecurrenceRule(parentEvent, childEvent);
                isSpanned = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);
                childEvent[fields_1.followingID] = isSpanned ? null : parentEvent[fields_1.id];
                childEvent[fields_1.recurrenceID] = null;
                editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                if (!_this.parent.uiStateValues.isIgnoreOccurrence) {
                  childEvent[fields_1.recurrenceException] = null;
                  if (followData_1.occurrence.length > 0) {
                    var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];
                    if (rule.indexOf("COUNT") === -1) {
                      childEvent[fields_1.recurrenceRule] = rule;
                    }
                  }
                  if (followData_1.follow.length > 0) {
                    childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];
                    editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.follow);
                  }
                  if (isSpanned) {
                    followData_1.occurrence = followData_1.occurrence.filter(function(eventObj) {
                      return eventObj[fields_1.recurrenceID] === parentEvent[fields_1.id];
                    });
                  }
                  editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence);
                }
                break;
              case "DeleteFollowingEvents":
                _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));
                editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);
                break;
            }
          };
          for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {
            _loop_3(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_1.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, followArgs.changedRecords[followArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditFollowingEvents" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditFollowingEvents" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: followArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processEntireSeries = function(eventData, action) {
      var _this = this;
      var seriesData = [];
      var isDeletedRecords = false;
      if (eventData instanceof Array) {
        for (var _i = 0, eventData_5 = eventData; _i < eventData_5.length; _i++) {
          var event_7 = eventData_5[_i];
          seriesData.push(this.getParentEvent(event_7, true));
        }
      } else {
        seriesData = this.getParentEvent(eventData, true);
      }
      var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];
      var args = {
        requestType: action === "EditSeries" ? "eventChange" : "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: updateSeriesEvents,
        deletedRecords: []
      };
      args.data = seriesData;
      this.parent.trigger(actionBegin, args, function(seriesArgs) {
        if (!seriesArgs.cancel) {
          var fields_2 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];
          var _loop_4 = function(a2, count2) {
            var childEvent = seriesArgs.changedRecords[parseInt(a2.toString(), 10)];
            var parentEvent = seriesEvents[parseInt(a2.toString(), 10)];
            var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);
            var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);
            switch (action) {
              case "EditSeries":
                childEvent[fields_2.id] = parentEvent[fields_2.id];
                childEvent[fields_2.recurrenceID] = null;
                childEvent[fields_2.followingID] = null;
                if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {
                  var originalParent = _this.parent.eventsData.filter(function(eventObj) {
                    return eventObj[fields_2.id] === childEvent[fields_2.id];
                  });
                  if (originalParent.length > 0) {
                    childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];
                  }
                } else {
                  childEvent[fields_2.recurrenceException] = null;
                  editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents);
                }
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));
                _this.parent.uiStateValues.isIgnoreOccurrence = false;
                break;
              case "DeleteSeries":
                editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents.concat(parentEvent));
                isDeletedRecords = true;
                break;
            }
          };
          for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {
            _loop_4(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_2.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, seriesArgs.changedRecords[seriesArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime(action === "EditSeries" ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);
          var crudArgs = {
            requestType: action === "EditSeries" ? "eventChanged" : "eventRemoved",
            cancel: false,
            data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processDelete = function(eventData) {
      var _this = this;
      var deleteData = [];
      for (var _i = 0, eventData_6 = eventData; _i < eventData_6.length; _i++) {
        var eventObj = eventData_6[_i];
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          deleteData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });
        } else {
          deleteData.push(eventObj);
        }
      }
      var args = {
        requestType: "eventRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: [],
        deletedRecords: eventData
      };
      args.data = deleteData;
      this.parent.trigger(actionBegin, args, function(deleteArgs) {
        if (!deleteArgs.cancel) {
          var fields_3 = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          var _loop_5 = function(a2, count2) {
            var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][_this.parent.eventFields.recurrenceRule]);
            if (!isDelete) {
              var parentEvent_1 = deleteData[parseInt(a2.toString(), 10)].parent;
              var isEdited = editParams.changedRecords.filter(function(obj) {
                return obj[fields_3.id] === parentEvent_1[fields_3.id];
              });
              var editedDate = deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][fields_3.startTime];
              if (isEdited.length > 0) {
                var editedData = isEdited[0];
                editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);
              } else {
                parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);
              }
              if (isEdited.length === 0) {
                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));
              }
              isDelete = deleteArgs.deletedRecords[parseInt(a2.toString(), 10)][fields_3.id] !== parentEvent_1[fields_3.id];
            }
            if (isDelete) {
              editParams.deletedRecords.push(deleteArgs.deletedRecords[parseInt(a2.toString(), 10)]);
            }
          };
          for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {
            _loop_5(a, count);
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_3.id, _this.getTable(), _this.getQuery());
          _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);
          var crudArgs = {
            requestType: "eventRemoved",
            cancel: false,
            data: deleteArgs.deletedRecords,
            promise,
            editParams
          };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.processSave = function(data) {
      var _this = this;
      var eventData = data instanceof Array ? data : [data];
      var editData = [];
      for (var _i = 0, eventData_7 = eventData; _i < eventData_7.length; _i++) {
        var eventObj = eventData_7[_i];
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          editData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });
        } else {
          editData.push(eventObj);
        }
      }
      var args = { requestType: "eventChange", cancel: false, addedRecords: [], changedRecords: eventData, deletedRecords: [] };
      args.data = editData;
      this.parent.trigger(actionBegin, args, function(editArgs) {
        if (!editArgs.cancel) {
          var fields = _this.parent.eventFields;
          var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };
          for (var _i2 = 0, _a = editArgs.changedRecords; _i2 < _a.length; _i2++) {
            var record = _a[_i2];
            if (!isNullOrUndefined(record[fields.recurrenceRule]) && isNullOrUndefined(record[fields.recurrenceException])) {
              var exceptionString = getRecurrenceStringFromDate(record[fields.startTime]);
              var parentEle = _this.getParentEvent(record);
              parentEle[fields.recurrenceException] = isNullOrUndefined(parentEle[fields.recurrenceException]) ? exceptionString : parentEle[fields.recurrenceException].concat("," + exceptionString);
              record[fields.id] = _this.parent.getEventMaxID();
              record[fields.recurrenceException] = exceptionString;
              editParams.addedRecords.push(_this.parent.eventBase.processTimezone(record, true));
              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEle, true));
            } else {
              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(record, true));
            }
          }
          var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());
          var cloneEvent = extend({}, editArgs.changedRecords[editArgs.changedRecords.length - 1], null, true);
          _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);
          var crudArgs = { requestType: "eventChanged", cancel: false, data: editArgs.changedRecords, promise, editParams };
          _this.refreshData(crudArgs);
        }
      });
    };
    Crud2.prototype.getParentEvent = function(event2, isParent) {
      if (isParent === void 0) {
        isParent = false;
      }
      var parentEvent = this.parent.eventBase.getParentEvent(event2, isParent) || event2;
      if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {
        this.parent.eventBase.timezoneConvert(parentEvent);
      }
      return parentEvent;
    };
    Crud2.prototype.excludeDateCheck = function(eventStartTime, exceptionDateList) {
      var timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      if (timezone) {
        eventStartTime = this.parent.tzModule.remove(/* @__PURE__ */ new Date(+eventStartTime.getTime()), timezone);
      }
      var exDate = getRecurrenceStringFromDate(eventStartTime);
      if (!isNullOrUndefined(exceptionDateList)) {
        if (exceptionDateList.indexOf(exDate) === -1) {
          exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + "," + exDate : exDate;
        }
      } else {
        exceptionDateList = exDate;
      }
      return exceptionDateList;
    };
    Crud2.prototype.processRecurrenceRule = function(parentEvent, followEvent) {
      var fields = this.parent.eventFields;
      var recurrenceRule = parentEvent[fields.recurrenceRule];
      var endDate;
      if (followEvent instanceof Date) {
        endDate = /* @__PURE__ */ new Date(+followEvent);
      } else {
        endDate = /* @__PURE__ */ new Date(+followEvent[fields.startTime]);
        var newRecurrenceRule = followEvent[fields.recurrenceRule];
        if (newRecurrenceRule) {
          var startDate = parentEvent[fields.startTime];
          var ruleException = this.parent.currentAction === "DeleteFollowingEvents" ? followEvent[fields.recurrenceException] : null;
          var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);
          var untilDate = new Date(dateCollection.slice(-1)[0]);
          untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());
          endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());
          followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, /* @__PURE__ */ new Date(+untilDate), false);
        }
      }
      parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, addDays(new Date(endDate.getTime()), -1), true);
    };
    Crud2.prototype.getUpdatedRecurrenceRule = function(recurrenceRule, untilDate, isParent) {
      var splitRule = recurrenceRule.split(";");
      var updatedRule = "";
      for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {
        var rule = splitRule_1[_i];
        if (rule !== "") {
          var ruleKey = rule.split("=")[0];
          var ruleValue = rule.split("=")[1];
          if (ruleKey === "COUNT" || ruleKey === "UNTIL") {
            ruleValue = getRecurrenceStringFromDate(untilDate);
            rule = rule.replace(rule, "UNTIL=" + ruleValue);
          }
          updatedRule += rule + ";";
        }
      }
      if (isParent && updatedRule.indexOf("UNTIL") === -1) {
        updatedRule += "UNTIL=" + getRecurrenceStringFromDate(untilDate);
      }
      return updatedRule;
    };
    Crud2.prototype.isBlockEvent = function(eventData) {
      var eventCollection = eventData instanceof Array ? eventData : [eventData];
      var value = false;
      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {
        var event_8 = eventCollection_1[_i];
        value = event_8[this.parent.eventFields.isBlock] || false;
      }
      return value;
    };
    Crud2.prototype.destroy = function() {
      this.crudObj = null;
      this.parent = null;
    };
    return Crud2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/work-cells.js
var WorkCellInteraction = (
  /** @class */
  function() {
    function WorkCellInteraction2(parent) {
      this.parent = parent;
      EventHandler.add(this.parent.element, "mouseover", this.onHover, this);
    }
    WorkCellInteraction2.prototype.cellMouseDown = function(e) {
      if (this.isPreventAction(e)) {
        return;
      }
      this.parent.notify(cellMouseDown, { event: e });
    };
    WorkCellInteraction2.prototype.cellClick = function(e) {
      var _this = this;
      if (this.isPreventAction(e)) {
        return;
      }
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      if (isNullOrUndefined(target)) {
        return;
      }
      if (!isNullOrUndefined(closest(e.target, "." + NEW_EVENT_CLASS))) {
        this.parent.eventWindow.openEditor(this.parent.activeCellsData, "Add");
        return;
      }
      var isWorkCell = target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS);
      if (this.parent.uiStateValues.isTapHold && !this.parent.uiStateValues.action && isWorkCell) {
        this.parent.uiStateValues.isTapHold = false;
        this.parent.eventBase.removeSelectedAppointmentClass();
        this.parent.selectedElements = [];
      }
      var navigateEle = closest(e.target, "." + NAVIGATE_CLASS);
      var navigateView = this.parent.getNavigateView();
      var sameView = this.parent.currentView === navigateView;
      if (isNullOrUndefined(navigateEle) || sameView || isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {
        if (this.parent.activeViewOptions.readonly && this.parent.currentView !== "MonthAgenda") {
          if (this.parent.quickPopup) {
            this.parent.quickPopup.quickPopupHide();
          }
          return;
        }
        if (this.parent.isAdaptive && (e.target.classList.contains(MORE_INDICATOR_CLASS) || closest(e.target, "." + MORE_INDICATOR_CLASS))) {
          return;
        }
        if (isWorkCell && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {
          this.parent.keyboardInteractionModule.onMouseSelection(e);
          return;
        }
        this.parent.activeCellsData = this.parent.getCellDetails(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
        this.parent.trigger(cellClick, args, function(clickArgs) {
          if (!clickArgs.cancel) {
            if (isWorkCell) {
              _this.parent.selectCell(target);
            }
            if (_this.parent.allowInline) {
              var inlineArgs = {
                element: clickArgs.element,
                groupIndex: clickArgs.groupIndex,
                type: "Cell"
              };
              _this.parent.notify(inlineClick, inlineArgs);
            } else {
              _this.parent.notify(cellClick, clickArgs);
            }
          } else {
            if (_this.parent.quickPopup) {
              _this.parent.quickPopup.quickPopupHide();
            }
          }
        });
      } else {
        var date = this.parent.getDateFromElement(target);
        if (!isNullOrUndefined(date) && this.parent.isMinMaxDate(date)) {
          this.parent.setProperties({ selectedDate: date }, true);
          this.parent.changeView(this.parent.getNavigateView(), e);
        }
      }
    };
    WorkCellInteraction2.prototype.cellDblClick = function(e) {
      var _this = this;
      var queryStr = "." + WORK_CELLS_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS;
      var target = closest(e.target, queryStr);
      if (this.parent.activeViewOptions.readonly || this.isPreventAction(e) || isNullOrUndefined(target)) {
        return;
      }
      var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellDoubleClick" });
      this.parent.trigger(cellDoubleClick, args, function(clickArgs) {
        var date = new Date(clickArgs.startTime.getTime());
        if (!_this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
          return;
        }
        if (!clickArgs.cancel) {
          _this.parent.eventWindow.openEditor(_this.parent.activeCellsData, "Add");
        }
      });
    };
    WorkCellInteraction2.prototype.onHover = function(e) {
      var targetSelector = "." + WORK_CELLS_CLASS + ",." + TIME_SLOT_CLASS + ",." + ALLDAY_CELLS_CLASS + ",." + HEADER_CELLS_CLASS + ",." + RESOURCE_CELLS_CLASS + ",." + APPOINTMENT_CLASS + ",." + WEEK_NUMBER_CLASS + ",." + MONTH_HEADER_CLASS;
      var hoverTarget = closest(e.target, targetSelector);
      if (hoverTarget) {
        var hoverArgs = { element: hoverTarget, event: e };
        this.parent.trigger(hover, hoverArgs);
      }
    };
    WorkCellInteraction2.prototype.isPreventAction = function(e) {
      if (closest(e.target, "." + NAVIGATE_CLASS)) {
        return false;
      }
      if (closest(e.target, "." + APPOINTMENT_WRAPPER_CLASS) && !closest(e.target, "." + MORE_INDICATOR_CLASS)) {
        return true;
      }
      var target = closest(e.target, "." + APPOINTMENT_CLASS + ",." + RESOURCE_GROUP_CELLS_CLASS);
      if (!isNullOrUndefined(target)) {
        return true;
      }
      target = closest(e.target, "." + HEADER_CELLS_CLASS);
      if (this.parent.activeView && this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {
        return true;
      }
      return false;
    };
    WorkCellInteraction2.prototype.destroy = function() {
      EventHandler.remove(this.parent.element, "mouseover", this.onHover);
    };
    return WorkCellInteraction2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/field-options.js
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate40 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldOptions = (
  /** @class */
  function(_super) {
    __extends43(FieldOptions2, _super);
    function FieldOptions2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate40([
      Property()
    ], FieldOptions2.prototype, "name", void 0);
    __decorate40([
      Property()
    ], FieldOptions2.prototype, "default", void 0);
    __decorate40([
      Property()
    ], FieldOptions2.prototype, "title", void 0);
    __decorate40([
      Property({})
    ], FieldOptions2.prototype, "validation", void 0);
    return FieldOptions2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/fields.js
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate41 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Field = (
  /** @class */
  function(_super) {
    __extends44(Field2, _super);
    function Field2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate41([
      Property("Id")
    ], Field2.prototype, "id", void 0);
    __decorate41([
      Property("IsBlock")
    ], Field2.prototype, "isBlock", void 0);
    __decorate41([
      Complex({ name: "Subject" }, FieldOptions)
    ], Field2.prototype, "subject", void 0);
    __decorate41([
      Complex({ name: "StartTime" }, FieldOptions)
    ], Field2.prototype, "startTime", void 0);
    __decorate41([
      Complex({ name: "EndTime" }, FieldOptions)
    ], Field2.prototype, "endTime", void 0);
    __decorate41([
      Complex({ name: "StartTimezone" }, FieldOptions)
    ], Field2.prototype, "startTimezone", void 0);
    __decorate41([
      Complex({ name: "EndTimezone" }, FieldOptions)
    ], Field2.prototype, "endTimezone", void 0);
    __decorate41([
      Complex({ name: "Location" }, FieldOptions)
    ], Field2.prototype, "location", void 0);
    __decorate41([
      Complex({ name: "Description" }, FieldOptions)
    ], Field2.prototype, "description", void 0);
    __decorate41([
      Complex({ name: "IsAllDay" }, FieldOptions)
    ], Field2.prototype, "isAllDay", void 0);
    __decorate41([
      Complex({ name: "RecurrenceID" }, FieldOptions)
    ], Field2.prototype, "recurrenceID", void 0);
    __decorate41([
      Complex({ name: "RecurrenceRule" }, FieldOptions)
    ], Field2.prototype, "recurrenceRule", void 0);
    __decorate41([
      Complex({ name: "RecurrenceException" }, FieldOptions)
    ], Field2.prototype, "recurrenceException", void 0);
    __decorate41([
      Property("IsReadonly")
    ], Field2.prototype, "isReadonly", void 0);
    __decorate41([
      Property("FollowingID")
    ], Field2.prototype, "followingID", void 0);
    return Field2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/event-settings.js
var __extends45 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate42 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var EventSettings = (
  /** @class */
  function(_super) {
    __extends45(EventSettings2, _super);
    function EventSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate42([
      Property()
    ], EventSettings2.prototype, "template", void 0);
    __decorate42([
      Property([])
    ], EventSettings2.prototype, "dataSource", void 0);
    __decorate42([
      Property()
    ], EventSettings2.prototype, "query", void 0);
    __decorate42([
      Complex({}, Field)
    ], EventSettings2.prototype, "fields", void 0);
    __decorate42([
      Property(false)
    ], EventSettings2.prototype, "enableTooltip", void 0);
    __decorate42([
      Property("AllDayRow")
    ], EventSettings2.prototype, "spannedEventPlacement", void 0);
    __decorate42([
      Property(1)
    ], EventSettings2.prototype, "minimumEventDuration", void 0);
    __decorate42([
      Property()
    ], EventSettings2.prototype, "tooltipTemplate", void 0);
    __decorate42([
      Property()
    ], EventSettings2.prototype, "resourceColorField", void 0);
    __decorate42([
      Property(false)
    ], EventSettings2.prototype, "editFollowingEvents", void 0);
    __decorate42([
      Property(true)
    ], EventSettings2.prototype, "allowAdding", void 0);
    __decorate42([
      Property(true)
    ], EventSettings2.prototype, "allowEditing", void 0);
    __decorate42([
      Property(true)
    ], EventSettings2.prototype, "allowDeleting", void 0);
    __decorate42([
      Property(false)
    ], EventSettings2.prototype, "enableMaxHeight", void 0);
    __decorate42([
      Property(false)
    ], EventSettings2.prototype, "enableIndicator", void 0);
    __decorate42([
      Property(false)
    ], EventSettings2.prototype, "ignoreWhitespace", void 0);
    __decorate42([
      Property()
    ], EventSettings2.prototype, "sortComparer", void 0);
    __decorate42([
      Property()
    ], EventSettings2.prototype, "includeFiltersInQuery", void 0);
    return EventSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/group.js
var __extends46 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate43 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Group = (
  /** @class */
  function(_super) {
    __extends46(Group2, _super);
    function Group2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate43([
      Property(false)
    ], Group2.prototype, "byDate", void 0);
    __decorate43([
      Property(true)
    ], Group2.prototype, "byGroupID", void 0);
    __decorate43([
      Property(false)
    ], Group2.prototype, "allowGroupEdit", void 0);
    __decorate43([
      Property([])
    ], Group2.prototype, "resources", void 0);
    __decorate43([
      Property(true)
    ], Group2.prototype, "enableCompactView", void 0);
    __decorate43([
      Property()
    ], Group2.prototype, "headerTooltipTemplate", void 0);
    __decorate43([
      Property(false)
    ], Group2.prototype, "hideNonWorkingDays", void 0);
    return Group2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/resources.js
var __extends47 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate44 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Resources = (
  /** @class */
  function(_super) {
    __extends47(Resources2, _super);
    function Resources2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate44([
      Property()
    ], Resources2.prototype, "field", void 0);
    __decorate44([
      Property()
    ], Resources2.prototype, "title", void 0);
    __decorate44([
      Property()
    ], Resources2.prototype, "name", void 0);
    __decorate44([
      Property(false)
    ], Resources2.prototype, "allowMultiple", void 0);
    __decorate44([
      Property([])
    ], Resources2.prototype, "dataSource", void 0);
    __decorate44([
      Property()
    ], Resources2.prototype, "query", void 0);
    __decorate44([
      Property("Id")
    ], Resources2.prototype, "idField", void 0);
    __decorate44([
      Property("Text")
    ], Resources2.prototype, "textField", void 0);
    __decorate44([
      Property("Expanded")
    ], Resources2.prototype, "expandedField", void 0);
    __decorate44([
      Property("GroupID")
    ], Resources2.prototype, "groupIDField", void 0);
    __decorate44([
      Property("Color")
    ], Resources2.prototype, "colorField", void 0);
    __decorate44([
      Property("StartHour")
    ], Resources2.prototype, "startHourField", void 0);
    __decorate44([
      Property("EndHour")
    ], Resources2.prototype, "endHourField", void 0);
    __decorate44([
      Property("WorkDays")
    ], Resources2.prototype, "workDaysField", void 0);
    __decorate44([
      Property("CssClass")
    ], Resources2.prototype, "cssClassField", void 0);
    return Resources2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/resource.js
var ResourceBase = (
  /** @class */
  function() {
    function ResourceBase2(parent) {
      this.resourceCollection = [];
      this.leftPixel = 25;
      this.resourceDateTree = [];
      this.parent = parent;
    }
    ResourceBase2.prototype.renderResourceHeaderIndent = function(tr) {
      var resColTd = createElement("td", { className: RESOURCE_LEFT_TD_CLASS });
      var resColDiv = createElement("div", { className: RESOURCE_TEXT_CLASS });
      if (this.parent.activeViewOptions.headerIndentTemplate) {
        var data = { className: [resColTd.className], type: "emptyCells" };
        this.parent.renderHeaderIndentTemplate(data, resColTd);
      } else {
        resColTd.appendChild(resColDiv);
      }
      var args = { elementType: "emptyCells", element: resColTd };
      this.parent.trigger(renderCell, args);
      tr.appendChild(resColTd);
    };
    ResourceBase2.prototype.hideResourceRows = function(tBody) {
      if (this.resourceCollection.length <= 1 || this.parent.virtualScrollModule) {
        return;
      }
      var trCount = this.lastResourceLevel.length;
      for (var i = 0; i < trCount; i++) {
        var resData = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;
        var res = this.lastResourceLevel[parseInt(i.toString(), 10)].resource;
        if (resData.ClassName === RESOURCE_PARENT_CLASS && !resData[res.expandedField] && !isNullOrUndefined(resData[res.expandedField])) {
          var trCollection = [].slice.call(tBody.children);
          var slicedCollection = trCollection.slice(i + 1, i + (parseInt(resData.Count, 10) + 1));
          addClass(slicedCollection, HIDDEN_CLASS);
        }
      }
    };
    ResourceBase2.prototype.createResourceColumn = function() {
      var resColl = this.resourceCollection;
      var resDiv = createElement("div", { className: RESOURCE_COLUMN_WRAP_CLASS });
      var tbl = this.parent.activeView.createTableLayout(RESOURCE_COLUMN_TABLE_CLASS);
      if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        addClass([tbl], AUTO_HEIGHT);
      }
      var tBody = tbl.querySelector("tbody");
      var resData = this.generateTreeData(true);
      this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));
      this.renderedResources = this.lastResourceLevel;
      if (this.parent.virtualScrollModule) {
        var resourceCount = this.parent.virtualScrollModule.getRenderedCount();
        this.setExpandedResources();
        resData = this.expandedResources.slice(0, resourceCount);
        this.renderedResources = resData;
      }
      append(this.getContentRows(resData), tBody);
      this.hideResourceRows(tBody);
      tbl.appendChild(tBody);
      resDiv.appendChild(tbl);
      return resDiv;
    };
    ResourceBase2.prototype.setRenderedResources = function() {
      var resColl = this.resourceCollection;
      var temp = this.generateTreeData(true);
      this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));
      this.renderedResources = this.lastResourceLevel;
    };
    ResourceBase2.prototype.setExpandedResources = function() {
      var resources = [];
      for (var i = 0; i < this.lastResourceLevel.length; i++) {
        var resource = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;
        var count = resource.Count;
        resources.push(this.lastResourceLevel[parseInt(i.toString(), 10)]);
        var isExpanded = resource[this.lastResourceLevel[parseInt(i.toString(), 10)].resource.expandedField];
        if (!isNullOrUndefined(isExpanded) && !isExpanded && count > 0) {
          i = i + count;
        }
      }
      this.expandedResources = resources;
    };
    ResourceBase2.prototype.getContentRows = function(resData, isVirtualScroll) {
      var resRows = [];
      var left;
      var rIndex;
      var resColl = this.resourceCollection;
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { tabindex: isVirtualScroll ? "-1" : "0" } });
      for (var i = 0; i < resData.length; i++) {
        var ntd = td.cloneNode();
        rIndex = findIndexInData(resColl, "name", resData[parseInt(i.toString(), 10)].resource.name);
        if (rIndex === resColl.length - 1) {
          extend(resData[parseInt(i.toString(), 10)].resourceData, { ClassName: RESOURCE_CHILD_CLASS });
          this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_CHILD_CLASS];
        } else {
          extend(resData[parseInt(i.toString(), 10)].resourceData, { ClassName: RESOURCE_PARENT_CLASS });
          this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_PARENT_CLASS];
        }
        left = rIndex * this.leftPixel + "px";
        if (resData[parseInt(i.toString(), 10)].resourceData.ClassName === RESOURCE_PARENT_CLASS && !isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData.Count) && resData[parseInt(i.toString(), 10)].resourceData.Count > 0) {
          var iconClass = void 0;
          if (resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField] || isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField])) {
            iconClass = RESOURCE_COLLAPSE_CLASS;
          } else {
            iconClass = RESOURCE_EXPAND_CLASS;
          }
          var iconDiv = createElement("div");
          addClass([iconDiv], [RESOURCE_TREE_ICON_CLASS, iconClass]);
          this.setMargin(iconDiv, left);
          ntd.appendChild(iconDiv);
          if (this.resourceCollection.length > 1) {
            EventHandler.add(iconDiv, "click", this.onTreeIconClick, this);
          }
        }
        this.parent.activeView.setResourceHeaderContent(ntd, resData[parseInt(i.toString(), 10)], RESOURCE_TEXT_CLASS);
        ntd.setAttribute("data-group-index", resData[parseInt(i.toString(), 10)].groupIndex.toString());
        ntd.setAttribute("aria-label", resData[parseInt(i.toString(), 10)].resourceData[resData[parseInt(i.toString(), 10)].resource.textField] + " resource");
        if (!this.parent.activeViewOptions.resourceHeaderTemplate) {
          this.setMargin(ntd.querySelector("." + RESOURCE_TEXT_CLASS), left);
        }
        var classCollection = [RESOURCE_CELLS_CLASS, resData[parseInt(i.toString(), 10)].resourceData.ClassName];
        addClass([ntd], classCollection);
        var args = { elementType: "resourceHeader", element: ntd, groupIndex: resData[parseInt(i.toString(), 10)].groupIndex };
        this.parent.trigger(renderCell, args);
        var ntr = tr.cloneNode();
        ntr.appendChild(ntd);
        resRows.push(ntr);
      }
      return resRows;
    };
    ResourceBase2.prototype.setMargin = function(element, value) {
      if (!this.parent.enableRtl) {
        element.style.marginLeft = value;
      } else {
        element.style.marginRight = value;
      }
    };
    ResourceBase2.prototype.countCalculation = function(parentCollection, wholeCollection) {
      var collection;
      for (var y = 0; y < parentCollection.length; y++) {
        var data = parentCollection[parentCollection.length - (y + 1)].dataSource;
        for (var x = 0; x < data.length; x++) {
          var totalCount = 0;
          if (this.parent.activeViewOptions.group.byGroupID) {
            var query = new Query().where(wholeCollection[wholeCollection.length - 1].groupIDField, "equal", data[parseInt(x.toString(), 10)][parentCollection[parentCollection.length - (y + 1)].idField]);
            collection = new DataManager(wholeCollection[wholeCollection.length - 1].dataSource).executeLocal(query);
          } else {
            collection = wholeCollection[wholeCollection.length - 1].dataSource;
          }
          for (var z = 0; z < collection.length; z++) {
            totalCount = totalCount + parseInt(collection[parseInt(z.toString(), 10)].Count, 10);
          }
          totalCount = totalCount + parseInt(data[parseInt(x.toString(), 10)].Count, 10);
          extend(data[parseInt(x.toString(), 10)], { Count: totalCount });
        }
        wholeCollection = wholeCollection.slice(0, -1);
      }
    };
    ResourceBase2.prototype.onTreeIconClick = function(e) {
      var _this = this;
      if (this.parent.eventTooltip) {
        this.parent.eventTooltip.close();
      }
      var target = e.target;
      var hide;
      var trElement = closest(target, "." + RESOURCE_PARENT_CLASS).parentElement;
      var index = parseInt(trElement.children[0].getAttribute("data-group-index"), 10);
      var args = {
        cancel: false,
        event: e,
        groupIndex: index,
        requestType: !target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? "resourceExpand" : "resourceCollapse"
      };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          if (target.classList.contains(RESOURCE_COLLAPSE_CLASS)) {
            classList(target, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);
            hide = true;
          } else {
            classList(target, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);
            hide = false;
          }
          var eventElements = [].slice.call(_this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS + ",." + MORE_INDICATOR_CLASS));
          for (var _i = 0, eventElements_1 = eventElements; _i < eventElements_1.length; _i++) {
            var element = eventElements_1[_i];
            remove(element);
          }
          if (_this.parent.virtualScrollModule) {
            _this.updateVirtualContent(index, hide, e, target);
          } else {
            _this.updateContent(index, hide);
          }
          var data = { cssProperties: _this.parent.getCssProperties(), module: "scroll" };
          _this.parent.notify(scrollUiUpdate, data);
          args = {
            cancel: false,
            event: e,
            groupIndex: index,
            requestType: target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? "resourceExpanded" : "resourceCollapsed"
          };
          _this.parent.refreshEvents(false);
          _this.parent.trigger(actionComplete, args);
        }
      });
    };
    ResourceBase2.prototype.updateContent = function(index, hide) {
      var rowCollection = [];
      var workCellCollection = [];
      var headerRowCollection = [];
      var pNode;
      var clickedRes = this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData;
      var resRows = [].slice.call(this.parent.element.querySelectorAll("." + RESOURCE_COLUMN_WRAP_CLASS + " tr"));
      var contentRows = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " tbody tr"));
      var eventRows = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " ." + APPOINTMENT_CONTAINER_CLASS));
      for (var j = 0; j < clickedRes.Count; j++) {
        rowCollection.push(resRows[index + j + 1]);
        workCellCollection.push(contentRows[index + j + 1]);
        headerRowCollection.push(eventRows[index + j + 1]);
      }
      var clonedCollection = this.lastResourceLevel;
      for (var i = 0; i < rowCollection.length; i++) {
        var expanded = true;
        pNode = rowCollection[parseInt(i.toString(), 10)].children[0].classList.contains(RESOURCE_PARENT_CLASS);
        clonedCollection[parseInt(index.toString(), 10)].resourceData[clonedCollection[parseInt(index.toString(), 10)].resource.expandedField] = !hide;
        if (hide) {
          if (pNode) {
            var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector("." + RESOURCE_TREE_ICON_CLASS);
            if (trElem) {
              classList(trElem, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);
            }
          }
          if (!rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {
            addClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);
          }
        } else {
          if (pNode) {
            var rowIndex = rowCollection[parseInt(i.toString(), 10)].rowIndex;
            if (!clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField] && !isNullOrUndefined(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField])) {
              rowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              workCellCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              headerRowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));
              expanded = false;
            }
            if (expanded) {
              var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector("." + RESOURCE_TREE_ICON_CLASS);
              if (trElem) {
                classList(trElem, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);
              }
            }
          }
          if (rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {
            removeClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);
          }
        }
      }
    };
    ResourceBase2.prototype.updateVirtualContent = function(index, expand, e, target) {
      this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData[this.lastResourceLevel[parseInt(index.toString(), 10)].resource.expandedField] = !expand;
      this.setExpandedResources();
      var resourceCount = this.parent.virtualScrollModule.getRenderedCount();
      var startIndex = this.expandedResources.indexOf(this.renderedResources[0]);
      this.renderedResources = this.expandedResources.slice(startIndex, startIndex + resourceCount);
      if (this.renderedResources.length < resourceCount) {
        var sIndex = this.expandedResources.length - resourceCount;
        sIndex = sIndex > 0 ? sIndex : 0;
        this.renderedResources = this.expandedResources.slice(sIndex, this.expandedResources.length);
      }
      var virtualTrack = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
      this.parent.virtualScrollModule.updateVirtualTrackHeight(virtualTrack);
      var resTable = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS + " table");
      var contentTable = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.parent.virtualScrollModule.updateContent(resTable, contentTable, eventTable, this.renderedResources);
      var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
      if (!isNullOrUndefined(timeIndicator)) {
        timeIndicator.style.height = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight + "px";
      }
    };
    ResourceBase2.prototype.renderResourceHeader = function() {
      var resourceWrapper = createElement("div", { className: RESOURCE_TOOLBAR_CONTAINER });
      resourceWrapper.innerHTML = '<div class="' + RESOURCE_HEADER_TOOLBAR + '"><div class="' + RESOURCE_MENU + '"><div class="e-icons ' + RESOURCE_MENU_ICON + '"></div></div><div class="' + RESOURCE_LEVEL_TITLE + '"></div></div>';
      if (this.parent.currentView === "MonthAgenda") {
        var target = this.parent.activeView.getPanel().querySelector("." + CONTENT_WRAP_CLASS);
        target.insertBefore(resourceWrapper, target.querySelector("." + WRAPPER_CONTAINER_CLASS));
      } else {
        this.parent.element.insertBefore(resourceWrapper, this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS));
      }
      this.renderResourceHeaderText();
      EventHandler.add(resourceWrapper.querySelector("." + RESOURCE_MENU_ICON), "click", this.menuClick, this);
    };
    ResourceBase2.prototype.renderResourceTree = function() {
      this.popupOverlay = createElement("div", { className: RESOURCE_TREE_POPUP_OVERLAY });
      var treeWrapper = createElement("div", { className: RESOURCE_TREE_POPUP + " e-popup-close" });
      if (this.parent.currentView === "MonthAgenda") {
        var target = this.parent.activeView.getPanel().querySelector("." + WRAPPER_CONTAINER_CLASS);
        target.insertBefore(treeWrapper, target.children[0]);
        target.appendChild(this.popupOverlay);
      } else {
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(treeWrapper);
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.popupOverlay);
      }
      var resourceTree = createElement("div", { className: RESOURCE_TREE });
      treeWrapper.appendChild(resourceTree);
      this.treeViewObj = new TreeView({
        cssClass: this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        fields: {
          dataSource: [].slice.call(this.generateTreeData()),
          id: "resourceId",
          text: "resourceName",
          child: "resourceChild"
        },
        nodeTemplate: this.parent.resourceHeaderTemplate,
        nodeClicked: this.resourceClick.bind(this),
        created: this.resourceTreeCreated.bind(this)
      });
      this.treeViewObj.root = this.parent.root ? this.parent.root : this.parent;
      this.treeViewObj.appendTo(resourceTree);
      this.treeViewObj.expandAll();
      this.treePopup = new Popup(treeWrapper, {
        targetType: "relative",
        actionOnScroll: "none",
        content: this.treeViewObj.element,
        relateTo: this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS),
        enableRtl: this.parent.enableRtl,
        hideAnimation: { name: "SlideLeftOut", duration: 500 },
        showAnimation: { name: "SlideLeftIn", duration: 500 },
        viewPortElement: this.parent.element.querySelector("." + (this.parent.currentView === "MonthAgenda" ? WRAPPER_CONTAINER_CLASS : TABLE_CONTAINER_CLASS))
      });
      this.parent.on(documentClick, this.documentClick, this);
    };
    ResourceBase2.prototype.resourceTreeCreated = function() {
      if (this.parent.activeViewOptions.resourceHeaderTemplate && this.parent.portals && this.treeViewObj.portals) {
        this.parent.portals = this.parent.portals.concat(this.treeViewObj.portals);
        this.parent.renderTemplates();
      }
    };
    ResourceBase2.prototype.generateTreeData = function(isTimeLine) {
      var _this = this;
      var treeCollection = [];
      var resTreeColl = [];
      var groupIndex = 0;
      var _loop_1 = function(i2, len2) {
        var treeHandler = function(treeLevel, index, levelId) {
          var resource = _this.resourceCollection[parseInt(index.toString(), 10)];
          var treeArgs;
          var resObj;
          if (!isTimeLine) {
            treeArgs = {
              resourceId: levelId,
              resourceName: treeLevel.resourceData[resource.textField],
              resource: treeLevel.resource,
              resourceData: treeLevel.resourceData
            };
          } else {
            resObj = {
              type: "resourceHeader",
              resource: treeLevel.resource,
              resourceData: treeLevel.resourceData,
              groupIndex,
              groupOrder: treeLevel.groupOrder
            };
            resTreeColl.push(resObj);
            groupIndex++;
          }
          if (treeLevel.child.length > 0 && !isTimeLine) {
            treeArgs.resourceChild = [];
          }
          var count = 1;
          for (var _i = 0, _a = treeLevel.child; _i < _a.length; _i++) {
            var tree = _a[_i];
            if (!isTimeLine) {
              treeArgs.resourceChild.push(treeHandler(tree, index + 1, levelId + "-" + count));
            } else {
              treeHandler(tree, index + 1, levelId + "-" + count);
            }
            count += 1;
          }
          if (isTimeLine) {
            extend(resObj.resourceData, { Count: count - 1 });
          }
          return treeArgs;
        };
        if (!isTimeLine) {
          treeCollection.push(treeHandler(this_1.resourceTreeLevel[parseInt(i2.toString(), 10)], 0, (i2 + 1).toString()));
        } else {
          treeHandler(this_1.resourceTreeLevel[parseInt(i2.toString(), 10)], 0, (i2 + 1).toString());
        }
      };
      var this_1 = this;
      for (var i = 0, len = this.resourceTreeLevel.length; i < len; i++) {
        _loop_1(i, len);
      }
      if (isTimeLine) {
        this.lastResourceLevel = resTreeColl;
        return resTreeColl;
      } else {
        return treeCollection;
      }
    };
    ResourceBase2.prototype.renderResourceHeaderText = function() {
      var resource = this.lastResourceLevel[this.parent.uiStateValues.groupIndex];
      var headerCollection = [];
      var _loop_2 = function(i2, len2) {
        var resourceLevel = this_2.resourceCollection[parseInt(i2.toString(), 10)];
        var resourceText = resourceLevel.dataSource.filter(function(resData) {
          return resData[resourceLevel.idField] === resource.groupOrder[parseInt(i2.toString(), 10)];
        });
        var resourceName = createElement("div", { className: RESOURCE_NAME });
        this_2.parent.sanitize(resourceText[0][resourceLevel.textField], resourceName);
        headerCollection.push(resourceName);
        var levelIcon = createElement("div", { className: "e-icons e-icon-next" });
        headerCollection.push(levelIcon);
      };
      var this_2 = this;
      for (var i = 0, len = resource.groupOrder.length; i < len; i++) {
        _loop_2(i, len);
      }
      headerCollection.pop();
      var target = this.parent.currentView === "MonthAgenda" ? this.parent.activeView.getPanel() : this.parent.element;
      var headerWrapper = target.querySelector("." + RESOURCE_LEVEL_TITLE);
      removeChildren(headerWrapper);
      for (var _i = 0, headerCollection_1 = headerCollection; _i < headerCollection_1.length; _i++) {
        var header = headerCollection_1[_i];
        headerWrapper.appendChild(header);
      }
      if (this.lastResourceLevel.length === 1) {
        addClass([this.parent.element.querySelector("." + RESOURCE_MENU)], DISABLE_CLASS);
      }
    };
    ResourceBase2.prototype.menuClick = function(event2) {
      if (this.parent.element.querySelector("." + RESOURCE_TREE_POPUP).classList.contains(POPUP_OPEN)) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
      } else {
        var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item:not(.e-has-child)"));
        removeClass(treeNodes, "e-active");
        addClass([treeNodes[this.parent.uiStateValues.groupIndex]], "e-active");
        this.treePopup.show();
        addClass([this.popupOverlay], ENABLE_CLASS);
      }
    };
    ResourceBase2.prototype.selectResourceByIndex = function(groupIndex) {
      if (this.lastResourceLevel && groupIndex > -1 && groupIndex < this.lastResourceLevel.length) {
        this.triggerEvents(groupIndex);
      }
    };
    ResourceBase2.prototype.resourceClick = function(event2) {
      if (!event2.node.classList.contains("e-has-child")) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
        var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item:not(.e-has-child)"));
        var groupIndex = treeNodes.indexOf(event2.node);
        this.triggerEvents(groupIndex, event2);
        event2.event.preventDefault();
      }
    };
    ResourceBase2.prototype.triggerEvents = function(groupIndex, event2) {
      var _this = this;
      var args = { cancel: false, event: event2 ? event2.event : null, groupIndex, requestType: "resourceChange" };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          _this.parent.uiStateValues.groupIndex = actionArgs.groupIndex;
          _this.parent.renderModule.render(_this.parent.currentView);
          args = {
            cancel: false,
            event: event2 ? event2.event : null,
            groupIndex: _this.parent.uiStateValues.groupIndex,
            requestType: "resourceChanged"
          };
          _this.parent.adaptiveGroupIndex = _this.parent.uiStateValues.groupIndex;
          _this.parent.trigger(actionComplete, args);
        }
      });
    };
    ResourceBase2.prototype.documentClick = function(args) {
      if (closest(args.event.target, "." + RESOURCE_TREE_POPUP)) {
        return;
      }
      var treeWrapper = this.parent.element.querySelector("." + RESOURCE_TREE_POPUP);
      if (treeWrapper && treeWrapper.classList.contains(POPUP_OPEN)) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], ENABLE_CLASS);
      }
    };
    ResourceBase2.prototype.bindResourcesData = function(isSetModel) {
      var _this = this;
      this.parent.showSpinner();
      var promises = [];
      for (var _i = 0, _a = this.parent.resources; _i < _a.length; _i++) {
        var resource = _a[_i];
        var dataModule = new Data(this.parent, resource.dataSource, resource.query);
        promises.push(dataModule.getData(dataModule.generateQuery()));
      }
      Promise.all(promises).then(function(e) {
        return _this.dataManagerSuccess(e, isSetModel);
      }).catch(function(e) {
        return _this.parent.crudModule.dataManagerFailure(e);
      });
    };
    ResourceBase2.prototype.dataManagerSuccess = function(e, isSetModel) {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent.resourceCollection = [];
      for (var i = 0, length_1 = e.length; i < length_1; i++) {
        var resource = this.parent.resources[parseInt(i.toString(), 10)];
        var resourceObj = this.getResourceModel(resource, e[parseInt(i.toString(), 10)].result);
        this.parent.resourceCollection.push(resourceObj);
      }
      this.refreshLayout(isSetModel);
    };
    ResourceBase2.prototype.getResourceModel = function(resource, resourceData) {
      var resourceObj = {
        field: resource.field,
        title: resource.title,
        name: resource.name,
        allowMultiple: resource.allowMultiple,
        dataSource: resourceData || resource.dataSource,
        idField: resource.idField,
        textField: resource.textField,
        groupIDField: resource.groupIDField,
        colorField: resource.colorField,
        startHourField: resource.startHourField,
        endHourField: resource.endHourField,
        workDaysField: resource.workDaysField,
        expandedField: resource.expandedField,
        cssClassField: resource.cssClassField
      };
      return resourceObj;
    };
    ResourceBase2.prototype.refreshLayout = function(isSetModel) {
      if (isNullOrUndefined(this.parent.uiStateValues.groupIndex) || !this.parent.enablePersistence) {
        this.parent.uiStateValues.groupIndex = 0;
      }
      this.parent.renderElements(isSetModel);
    };
    ResourceBase2.prototype.setResourceCollection = function() {
      var requiredResources = [];
      this.resourceCollection = [];
      this.colorIndex = null;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        for (var _i = 0, _a = this.parent.activeViewOptions.group.resources; _i < _a.length; _i++) {
          var resource = _a[_i];
          var index_1 = findIndexInData(this.parent.resourceCollection, "name", resource);
          if (index_1 >= 0) {
            requiredResources.push(this.parent.resourceCollection[parseInt(index_1.toString(), 10)]);
          }
        }
      } else if (this.parent.resourceCollection.length > 0) {
        requiredResources = this.parent.resourceCollection;
      }
      var index = 0;
      for (var _b = 0, requiredResources_1 = requiredResources; _b < requiredResources_1.length; _b++) {
        var resource = requiredResources_1[_b];
        var resources = this.getResourceModel(resource);
        if (resource.name === this.parent.eventSettings.resourceColorField) {
          this.colorIndex = index;
        }
        index++;
        this.resourceCollection.push(resources);
      }
      if (isNullOrUndefined(this.colorIndex)) {
        this.colorIndex = this.resourceCollection.length - 1;
      }
    };
    ResourceBase2.prototype.generateResourceLevels = function(innerDates, isTimeLine) {
      var _this = this;
      var resources = this.resourceCollection;
      var resTreeGroup = [];
      var lastColumnDates = [];
      var group = function(resources2, index, prevResource, prevResourceData, prevOrder) {
        var resTree = [];
        var resource = resources2[0];
        if (resource) {
          var data = void 0;
          if (prevResourceData && _this.parent.activeViewOptions.group.byGroupID) {
            var id_1 = prevResourceData[prevResource.idField];
            data = resource.dataSource.filter(function(e) {
              return e[resource.groupIDField] === id_1;
            });
          } else {
            data = resource.dataSource;
          }
          for (var i = 0; i < data.length; i++) {
            var groupOrder = [];
            if (prevOrder && prevOrder.length > 0) {
              groupOrder = groupOrder.concat(prevOrder);
            }
            groupOrder.push(data[parseInt(i.toString(), 10)][resource.idField]);
            var items = group(resources2.slice(1), index + 1, resource, data[parseInt(i.toString(), 10)], groupOrder);
            if (index === 0 && items.length === 0 && _this.resourceCollection.length > 1) {
              continue;
            }
            var dateCol = [];
            var renderDates = _this.parent.activeView.renderDates;
            var resWorkDays = void 0;
            if (!_this.parent.activeViewOptions.group.byDate && index + 1 === _this.resourceCollection.length) {
              var workDays = data[parseInt(i.toString(), 10)][resource.workDaysField];
              var resStartHour = data[parseInt(i.toString(), 10)][resource.startHourField];
              var resEndHour = data[parseInt(i.toString(), 10)][resource.endHourField];
              if (workDays && workDays.length > 0) {
                renderDates = _this.parent.activeView.getRenderDates(workDays);
                resWorkDays = workDays;
                dateCol = _this.parent.activeView.getDateSlots(renderDates, workDays);
              } else {
                resWorkDays = _this.parent.activeViewOptions.workDays;
                dateCol = innerDates;
              }
              var dateSlots = _this.generateCustomHours(dateCol, resStartHour, resEndHour, groupOrder);
              lastColumnDates = lastColumnDates.concat(dateSlots);
            }
            var resCssClass = data[parseInt(i.toString(), 10)][resource.cssClassField];
            var slotData = {
              type: "resourceHeader",
              className: ["e-resource-cells"],
              resourceLevelIndex: index,
              groupOrder,
              resource,
              resourceData: data[parseInt(i.toString(), 10)],
              colSpan: _this.parent.activeViewOptions.group.byDate ? 1 : dateCol.length,
              renderDates,
              workDays: resWorkDays,
              cssClass: resCssClass,
              child: items
            };
            resTree.push(slotData);
          }
          if (!resTreeGroup[parseInt(index.toString(), 10)]) {
            resTreeGroup[parseInt(index.toString(), 10)] = [];
          }
          if (resTree.length > 0) {
            resTreeGroup[parseInt(index.toString(), 10)].push(resTree);
          }
          return resTree;
        }
        return [];
      };
      this.resourceTreeLevel = group(resources, 0);
      return isTimeLine ? [] : this.generateHeaderLevels(resTreeGroup, lastColumnDates, innerDates);
    };
    ResourceBase2.prototype.generateCustomHours = function(renderDates, startHour, endHour, groupOrder) {
      var dateSlots = extend([], renderDates, null, true);
      for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {
        var dateSlot = dateSlots_1[_i];
        if (startHour) {
          dateSlot.startHour = this.parent.getStartEndTime(startHour);
        }
        if (endHour) {
          dateSlot.endHour = this.parent.getStartEndTime(endHour);
        }
        if (groupOrder) {
          dateSlot.groupOrder = groupOrder;
        }
      }
      return dateSlots;
    };
    ResourceBase2.prototype.generateHeaderLevels = function(resTreeGroup, lastColumnDates, headerDates) {
      var headerLevels = [];
      for (var i = resTreeGroup.length - 1; i >= 0; i--) {
        var temp = 0;
        for (var _i = 0, _a = resTreeGroup[parseInt(i.toString(), 10)]; _i < _a.length; _i++) {
          var currentLevelChilds = _a[_i];
          for (var _b = 0, currentLevelChilds_1 = currentLevelChilds; _b < currentLevelChilds_1.length; _b++) {
            var currentLevelChild = currentLevelChilds_1[_b];
            if (resTreeGroup[i + 1] && resTreeGroup[i + 1].length > 0) {
              var nextLevelChilds = resTreeGroup[parseInt((i + 1).toString(), 10)][parseInt(temp.toString(), 10)];
              if (!nextLevelChilds) {
                continue;
              }
              var colSpan = 0;
              for (var _c = 0, nextLevelChilds_1 = nextLevelChilds; _c < nextLevelChilds_1.length; _c++) {
                var nextLevelChild = nextLevelChilds_1[_c];
                if (!this.parent.activeViewOptions.group.byGroupID || this.parent.activeViewOptions.group.byGroupID && nextLevelChild.resourceData[nextLevelChild.resource.groupIDField] === currentLevelChild.resourceData[currentLevelChild.resource.idField]) {
                  colSpan += nextLevelChild.colSpan;
                }
              }
              currentLevelChild.colSpan = colSpan;
            }
            currentLevelChild.groupIndex = temp;
            temp++;
            headerLevels[currentLevelChild.resourceLevelIndex] = headerLevels[currentLevelChild.resourceLevelIndex] || [];
            headerLevels[currentLevelChild.resourceLevelIndex].push(currentLevelChild);
          }
        }
      }
      this.lastResourceLevel = headerLevels.slice(-1)[0] || [];
      if (!this.parent.activeViewOptions.group.byDate) {
        var index = 0;
        for (var _d = 0, _e = this.lastResourceLevel; _d < _e.length; _d++) {
          var lastLevelResource = _e[_d];
          for (var i = 0; i < lastLevelResource.colSpan; i++) {
            lastColumnDates[parseInt(index.toString(), 10)].groupIndex = lastLevelResource.groupIndex;
            index++;
          }
        }
        headerLevels.push(lastColumnDates);
        return headerLevels;
      }
      var dateHeaderLevels = [];
      var levels = extend([], headerLevels, null, true);
      var datesColumn = [];
      if (this.parent.activeViewOptions.group.hideNonWorkingDays) {
        var renderDates_1 = [];
        var dateIndex = 0;
        var _loop_3 = function(headerDate2) {
          this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)] = [];
          var currentDateLevels = [];
          var _loop_4 = function(j2) {
            var workDays = this_3.lastResourceLevel[parseInt(j2.toString(), 10)].resourceData[this_3.lastResourceLevel[parseInt(j2.toString(), 10)].resource.workDaysField];
            if (!workDays) {
              workDays = this_3.parent.activeViewOptions.workDays;
            }
            if (workDays.indexOf(headerDate2.date.getDay()) !== -1) {
              var resTd_1 = extend({}, this_3.lastResourceLevel[parseInt(j2.toString(), 10)], null, true);
              resTd_1.date = headerDate2.date;
              this_3.lastResourceLevel[parseInt(j2.toString(), 10)].workDays = workDays;
              resTd_1.startHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.startHourField]) || headerDate2.startHour;
              resTd_1.endHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.endHourField]) || headerDate2.endHour;
              this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)].push(resTd_1);
              var _loop_5 = function(k3) {
                if (!currentDateLevels[parseInt(k3.toString(), 10)]) {
                  currentDateLevels[parseInt(k3.toString(), 10)] = [];
                }
                if (k3 === resTd_1.groupOrder.length - 1) {
                  if (!renderDates_1[parseInt(j2.toString(), 10)]) {
                    renderDates_1[parseInt(j2.toString(), 10)] = [];
                  }
                  var filterDates = resTd_1.renderDates.filter(function(x) {
                    return x.getDay() === headerDate2.date.getDay();
                  });
                  renderDates_1[parseInt(j2.toString(), 10)] = renderDates_1[parseInt(j2.toString(), 10)].concat(filterDates);
                  currentDateLevels[parseInt(k3.toString(), 10)].push(resTd_1);
                  return "continue";
                }
                var currentLevel = levels[parseInt(k3.toString(), 10)];
                var filteredResource = currentLevel.filter(function(data) {
                  return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k3.toString(), 10)];
                });
                if (filteredResource && filteredResource.length > 0) {
                  var existedResource = currentDateLevels[parseInt(k3.toString(), 10)].filter(function(data) {
                    return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k3.toString(), 10)];
                  });
                  if (existedResource && existedResource.length > 0) {
                    existedResource[0].colSpan += 1;
                  } else {
                    var filteredTd = extend({}, filteredResource[0], null, true);
                    filteredTd.colSpan = 1;
                    currentDateLevels[parseInt(k3.toString(), 10)].push(filteredTd);
                  }
                }
              };
              for (var k2 = 0; k2 < resTd_1.groupOrder.length; k2++) {
                _loop_5(k2);
              }
            }
          };
          for (var j = 0; j < this_3.lastResourceLevel.length; j++) {
            _loop_4(j);
          }
          if (currentDateLevels.length > 0) {
            for (var l = 0; l < levels.length; l++) {
              if (!dateHeaderLevels[parseInt(l.toString(), 10)]) {
                dateHeaderLevels[parseInt(l.toString(), 10)] = [];
              }
              dateHeaderLevels[parseInt(l.toString(), 10)] = dateHeaderLevels[parseInt(l.toString(), 10)].concat(currentDateLevels[parseInt(l.toString(), 10)]);
            }
            headerDate2.colSpan = currentDateLevels[currentDateLevels.length - 1].length;
            datesColumn.push(headerDate2);
          }
          dateIndex++;
        };
        var this_3 = this;
        for (var _f = 0, headerDates_1 = headerDates; _f < headerDates_1.length; _f++) {
          var headerDate = headerDates_1[_f];
          _loop_3(headerDate);
        }
        this.resourceDateTree = this.resourceDateTree.filter(function(data) {
          return data.length > 0;
        });
        this.lastResourceLevel.forEach(function(x, index2) {
          if (renderDates_1[parseInt(index2.toString(), 10)]) {
            x.renderDates = renderDates_1[parseInt(index2.toString(), 10)].sort(function(a, b) {
              return a.getTime() - b.getTime();
            });
          }
        });
        dateHeaderLevels.unshift(datesColumn);
        return dateHeaderLevels;
      }
      var dateColSpan = 0;
      for (var _g = 0, _h = levels[0]; _g < _h.length; _g++) {
        var firstRowTd = _h[_g];
        dateColSpan += firstRowTd.colSpan;
      }
      for (var _j = 0, headerDates_2 = headerDates; _j < headerDates_2.length; _j++) {
        var headerDate = headerDates_2[_j];
        headerDate.colSpan = dateColSpan;
        datesColumn.push(headerDate);
        var resGroup = extend([], levels, null, true);
        for (var k = 0, length_2 = resGroup.length; k < length_2; k++) {
          if (k === resGroup.length - 1) {
            for (var _k = 0, _l = resGroup[parseInt(k.toString(), 10)]; _k < _l.length; _k++) {
              var resTd = _l[_k];
              resTd.date = headerDate.date;
              resTd.workDays = headerDate.workDays;
              resTd.startHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.startHourField]) || headerDate.startHour;
              resTd.endHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.endHourField]) || headerDate.endHour;
            }
          }
          if (!dateHeaderLevels[parseInt(k.toString(), 10)]) {
            dateHeaderLevels[parseInt(k.toString(), 10)] = [];
          }
          dateHeaderLevels[parseInt(k.toString(), 10)] = dateHeaderLevels[parseInt(k.toString(), 10)].concat(resGroup[parseInt(k.toString(), 10)]);
        }
      }
      dateHeaderLevels.unshift(datesColumn);
      return dateHeaderLevels;
    };
    ResourceBase2.prototype.setResourceValues = function(eventObj, groupIndex) {
      var _this = this;
      var setValues = function(index2, field, value) {
        if (_this.resourceCollection[parseInt(index2.toString(), 10)].allowMultiple && _this.parent.activeViewOptions.group.allowGroupEdit) {
          eventObj["" + field] = [value];
        } else {
          eventObj["" + field] = value;
        }
      };
      if (groupIndex === void 0) {
        groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : this.parent.activeCellsData.groupIndex;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(groupIndex)) {
        var groupOrder = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;
        for (var index = 0; index < this.resourceCollection.length; index++) {
          setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, groupOrder[parseInt(index.toString(), 10)]);
        }
      } else if (this.parent.resourceCollection.length > 0) {
        for (var index = 0; index < this.resourceCollection.length; index++) {
          var data = this.resourceCollection[parseInt(index.toString(), 10)].dataSource[0];
          if (data) {
            setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, data[this.resourceCollection[parseInt(index.toString(), 10)].idField]);
          }
        }
      }
    };
    ResourceBase2.prototype.getResourceColor = function(eventObj, groupOrder) {
      var colorFieldIndex = !isNullOrUndefined(groupOrder) && this.colorIndex > groupOrder.length - 1 ? groupOrder.length - 1 : this.colorIndex;
      var resource = this.resourceCollection[parseInt(colorFieldIndex.toString(), 10)];
      if (isNullOrUndefined(groupOrder) && this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {
        return void 0;
      }
      var id = isNullOrUndefined(groupOrder) ? eventObj[resource.field] : groupOrder[parseInt(colorFieldIndex.toString(), 10)];
      var data = this.filterData(resource.dataSource, resource.idField, id);
      if (data.length > 0) {
        return data[0][resource.colorField];
      }
      return void 0;
    };
    ResourceBase2.prototype.getCssClass = function(eventObj) {
      var resource = this.resourceCollection.slice(-1)[0];
      if (this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {
        return void 0;
      }
      var data = this.filterData(resource.dataSource, resource.idField, eventObj[resource.field]);
      if (data.length > 0) {
        return data[0][resource.cssClassField];
      }
      return void 0;
    };
    ResourceBase2.prototype.getResourceRenderDates = function() {
      var resourceDates = [].concat.apply([], this.lastResourceLevel.map(function(e) {
        return e.renderDates;
      }));
      var time = resourceDates.map(function(dateObj) {
        return dateObj.getTime();
      });
      var removeDuplicateDates = function(dateColl) {
        return dateColl.filter(function(date, index) {
          return time.indexOf(date.getTime()) === index;
        });
      };
      var renderDates = removeDuplicateDates(resourceDates);
      renderDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
      return renderDates;
    };
    ResourceBase2.prototype.filterData = function(dataSource, field, value) {
      return dataSource.filter(function(data) {
        return data["" + field] === value;
      });
    };
    ResourceBase2.prototype.getResourceData = function(eventObj, index, groupEditIndex) {
      if (this.parent.activeViewOptions.group.allowGroupEdit) {
        var resourceObj = {};
        for (var _i = 0, groupEditIndex_1 = groupEditIndex; _i < groupEditIndex_1.length; _i++) {
          var groupIndex = groupEditIndex_1[_i];
          var resourceLevel = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;
          for (var level = 0, length_3 = resourceLevel.length; level < length_3; level++) {
            var fieldName = this.resourceCollection[parseInt(level.toString(), 10)].field;
            if (isNullOrUndefined(resourceObj["" + fieldName])) {
              resourceObj["" + fieldName] = [];
            }
            resourceObj["" + fieldName].push(resourceLevel[parseInt(level.toString(), 10)]);
          }
        }
        eventObj = extend(eventObj, resourceObj);
      } else {
        for (var level = 0, length_4 = this.resourceCollection.length; level < length_4; level++) {
          if (this.lastResourceLevel[parseInt(index.toString(), 10)]) {
            eventObj[this.resourceCollection[parseInt(level.toString(), 10)].field] = this.lastResourceLevel[parseInt(index.toString(), 10)].groupOrder[parseInt(level.toString(), 10)];
          }
        }
      }
    };
    ResourceBase2.prototype.addResource = function(resources, name, index) {
      var resourceCollection = resources instanceof Array ? resources : [resources];
      var _loop_6 = function(resource2) {
        if (resource2.name === name) {
          resourceCollection.forEach(function(addObj, i) {
            return new DataManager({ json: resource2.dataSource }).insert(addObj, null, null, index + i);
          });
          return "break";
        }
      };
      for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {
        var resource = _a[_i];
        var state_1 = _loop_6(resource);
        if (state_1 === "break")
          break;
      }
      this.refreshLayout(true);
    };
    ResourceBase2.prototype.removeResource = function(resourceId, name) {
      var resourceCollection = resourceId instanceof Array ? resourceId : [resourceId];
      var _loop_7 = function(resource2) {
        if (resource2.name === name) {
          resourceCollection.forEach(function(removeObj) {
            return new DataManager({ json: resource2.dataSource }).remove(resource2.idField, removeObj);
          });
          return "break";
        }
      };
      for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {
        var resource = _a[_i];
        var state_2 = _loop_7(resource);
        if (state_2 === "break")
          break;
      }
      this.refreshLayout(true);
    };
    ResourceBase2.prototype.getIndexFromResourceId = function(id, name, resourceData, event2, parentField) {
      name = name || this.parent.resourceCollection.slice(-1)[0].name;
      if (isNullOrUndefined(resourceData)) {
        resourceData = this.resourceCollection.filter(function(e) {
          return e.name === name;
        })[0];
        if (isNullOrUndefined(resourceData)) {
          return null;
        }
      }
      var resource = resourceData.dataSource.filter(function(e) {
        if (event2 && e[resourceData.idField] === id) {
          if (e[resourceData.groupIDField] === event2["" + parentField]) {
            return e[resourceData.idField] === id;
          }
          return null;
        } else {
          return e[resourceData.idField] === id;
        }
      })[0];
      return this.lastResourceLevel.map(function(e) {
        return e.resourceData;
      }).indexOf(resource);
    };
    ResourceBase2.prototype.resourceExpand = function(id, name, hide) {
      var resource = this.parent.resourceCollection.filter(function(e) {
        if (e.name === name) {
          return e;
        }
        return null;
      })[0];
      var index = 0;
      var resourceData = resource.dataSource.filter(function(e) {
        return e[resource.idField] === id;
      })[0];
      if (!this.parent.activeViewOptions.group.byGroupID) {
        index = this.getIndexFromResourceId(id, name, resource);
      } else {
        index = this.lastResourceLevel.map(function(e) {
          return e.resourceData;
        }).indexOf(resourceData);
      }
      var target = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS + " " + ('[data-group-index="' + index + '"]') + " ." + RESOURCE_TREE_ICON_CLASS);
      if (target) {
        if (target.classList.contains(RESOURCE_EXPAND_CLASS) && !hide) {
          target.click();
        } else if (target.classList.contains(RESOURCE_COLLAPSE_CLASS) && hide) {
          target.click();
        }
      }
    };
    ResourceBase2.prototype.resourceScroll = function(id, name) {
      if (this.parent.isAdaptive || ["Agenda", "MonthAgenda"].indexOf(this.parent.currentView) > -1) {
        return;
      }
      var levelName = name || this.parent.resourceCollection.slice(-1)[0].name;
      var levelIndex = this.parent.resourceCollection.length - 1;
      var resource = this.parent.resourceCollection.filter(function(e, index2) {
        if (e.name === levelName) {
          levelIndex = index2;
          return e;
        }
        return null;
      })[0];
      var scrollElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var index = 0;
      if (this.parent.activeView.isTimelineView()) {
        if (!this.parent.activeViewOptions.group.byGroupID) {
          index = this.getIndexFromResourceId(id, levelName, resource);
        } else {
          var resourceData = resource.dataSource.filter(function(e) {
            return e[resource.idField] === id;
          })[0];
          index = this.lastResourceLevel.map(function(e) {
            return e.resourceData;
          }).indexOf(resourceData);
        }
        if (this.parent.virtualScrollModule) {
          var virtual = this.parent.element.querySelector("." + VIRTUAL_TRACK_CLASS);
          var averageRowHeight = Math.round(virtual.offsetHeight / this.expandedResources.length);
          if (this.parent.rowAutoHeight) {
            scrollElement.scrollTop = 0;
            this.parent.virtualScrollModule.virtualScrolling();
          }
          scrollElement.scrollTop = index * averageRowHeight - (this.parent.virtualScrollModule.bufferCount - 1) * averageRowHeight;
          this.parent.virtualScrollModule.virtualScrolling();
          if (this.parent.rowAutoHeight) {
            var td = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
            if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {
              scrollElement.scrollTop = scrollElement.scrollTop < td.offsetTop ? td.offsetTop : scrollElement.scrollTop + td.offsetTop;
            }
          } else {
            scrollElement.scrollTop = index * averageRowHeight;
          }
        } else {
          var td = this.parent.element.querySelector("." + WORK_CELLS_CLASS + '[data-group-index="' + index + '"]');
          if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {
            scrollElement.scrollTop = td.offsetTop;
          }
        }
      } else {
        if (!this.parent.activeViewOptions.group.byGroupID) {
          index = this.getIndexFromResourceId(id, levelName, resource);
        } else {
          if (levelName === this.parent.resourceCollection.slice(-1)[0].name) {
            index = this.lastResourceLevel.map(function(e) {
              return e.resourceData[resource.idField];
            }).indexOf(id);
          } else {
            index = resource.dataSource.map(function(e) {
              return e[resource.idField];
            }).indexOf(id);
          }
        }
        var offsetTarget = this.parent.currentView === "Month" ? this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS + " tbody tr:nth-child(" + (levelIndex + 1) + ")") : this.parent.element.querySelector("." + HEADER_ROW_CLASS + ":nth-child(" + (levelIndex + 1) + ")");
        var offset = [].slice.call(offsetTarget.children).map(function(node) {
          return node.offsetLeft;
        });
        scrollElement.scrollLeft = offset[parseInt(index.toString(), 10)];
      }
    };
    ResourceBase2.prototype.destroy = function() {
      this.parent.off(documentClick, this.documentClick);
      if (this.treeViewObj) {
        if (this.treeViewObj.portals && this.treeViewObj.portals.length > 0) {
          var treeViewTemplates = this.treeViewObj.portals.map(function(x) {
            return x.propName;
          });
          if (treeViewTemplates.length > 0) {
            this.parent.resetTemplates(treeViewTemplates);
          }
        }
        this.treeViewObj.destroy();
        this.treeViewObj = null;
      }
      if (this.treePopup) {
        this.treePopup.destroy();
        this.treePopup = null;
        remove(this.parent.element.querySelector("." + RESOURCE_TREE_POPUP));
        remove(this.parent.element.querySelector("." + RESOURCE_TREE_POPUP_OVERLAY));
      }
      var resToolBarEle = this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER);
      if (resToolBarEle) {
        remove(resToolBarEle);
      }
    };
    return ResourceBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/models/toolbar.js
var __extends48 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate45 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolbarItem = (
  /** @class */
  function(_super) {
    __extends48(ToolbarItem2, _super);
    function ToolbarItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "id", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "text", void 0);
    __decorate45([
      Property("auto")
    ], ToolbarItem2.prototype, "width", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "cssClass", void 0);
    __decorate45([
      Property(false)
    ], ToolbarItem2.prototype, "showAlwaysInPopup", void 0);
    __decorate45([
      Property(false)
    ], ToolbarItem2.prototype, "disabled", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "prefixIcon", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "suffixIcon", void 0);
    __decorate45([
      Property(true)
    ], ToolbarItem2.prototype, "visible", void 0);
    __decorate45([
      Property("None")
    ], ToolbarItem2.prototype, "overflow", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "template", void 0);
    __decorate45([
      Property("Button")
    ], ToolbarItem2.prototype, "type", void 0);
    __decorate45([
      Property("Both")
    ], ToolbarItem2.prototype, "showTextOn", void 0);
    __decorate45([
      Property(null)
    ], ToolbarItem2.prototype, "htmlAttributes", void 0);
    __decorate45([
      Property("")
    ], ToolbarItem2.prototype, "tooltipText", void 0);
    __decorate45([
      Property("Left")
    ], ToolbarItem2.prototype, "align", void 0);
    __decorate45([
      Property(-1)
    ], ToolbarItem2.prototype, "tabIndex", void 0);
    __decorate45([
      Property("Custom")
    ], ToolbarItem2.prototype, "name", void 0);
    __decorate45([
      Event()
    ], ToolbarItem2.prototype, "click", void 0);
    return ToolbarItem2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/base/schedule.js
var __extends49 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate46 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Schedule = (
  /** @class */
  function(_super) {
    __extends49(Schedule2, _super);
    function Schedule2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.adaptiveGroupIndex = 0;
      return _this;
    }
    Schedule2.prototype.render = function() {
      var addClasses = [];
      var removeClasses = [];
      addClasses.push(ROOT8);
      if (this.enableRtl) {
        addClasses.push(RTL7);
      } else {
        removeClasses.push(RTL7);
      }
      if (this.isAdaptive) {
        addClasses.push(DEVICE_CLASS);
      } else {
        removeClasses.push(DEVICE_CLASS);
      }
      if (this.enableAdaptiveUI) {
        addClasses.push(ADAPTIVE_CLASS);
      } else {
        removeClasses.push(ADAPTIVE_CLASS);
      }
      if (this.allowMultiDrag) {
        addClasses.push(MULTI_DRAG);
      } else {
        removeClasses.push(MULTI_DRAG);
      }
      if (this.cssClass) {
        var cssClass2 = this.cssClass.split(" ");
        for (var _i = 0, cssClass_1 = cssClass2; _i < cssClass_1.length; _i++) {
          var cls_1 = cssClass_1[_i];
          addClasses.push(cls_1);
        }
      }
      classList(this.element, addClasses, removeClasses);
      this.validateDate();
      createSpinner({ target: this.element });
      this.scrollModule = new Scroll(this);
      this.scrollModule.setWidth();
      this.scrollModule.setHeight();
      this.renderModule = new Render(this);
      this.eventBase = new EventBase(this);
      this.workCellAction = new WorkCellInteraction(this);
      if (this.allowKeyboardInteraction) {
        this.keyboardInteractionModule = new KeyboardInteraction(this);
      }
      this.inlineModule = new InlineEdit(this);
      this.initializeDataModule();
      this.renderTableContainer();
      this.activeViewOptions = this.getActiveViewOptions();
      this.initializeResources();
      this.wireEvents();
    };
    Schedule2.prototype.renderTableContainer = function() {
      if (!this.element.querySelector("." + TABLE_CONTAINER_CLASS)) {
        this.element.appendChild(this.createElement("div", { className: TABLE_CONTAINER_CLASS }));
      }
    };
    Schedule2.prototype.getEventTemplateName = function(resIndex) {
      var templateName = "eventTemplate_" + resIndex;
      if (this.activeEventTemplates.indexOf(templateName) < 0) {
        this.activeEventTemplates.push(templateName);
      }
      return templateName;
    };
    Schedule2.prototype.renderTemplates = function(callback) {
      if (this.isReact) {
        this.renderReactTemplates(callback);
      } else if (callback) {
        callback();
      }
    };
    Schedule2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Schedule2.prototype.sanitize = function(value, element) {
      if (this.enableHtmlSanitizer) {
        element.innerText = SanitizeHtmlHelper.sanitize(value);
      } else {
        element.innerHTML = value;
      }
    };
    Schedule2.prototype.initializeResources = function(isSetModel) {
      if (isSetModel === void 0) {
        isSetModel = false;
      }
      if (this.resources.length > 0) {
        this.resourceBase = new ResourceBase(this);
        this.resourceBase.bindResourcesData(isSetModel);
      } else {
        this.resourceBase = null;
        this.resourceCollection = [];
        this.renderElements(isSetModel);
      }
    };
    Schedule2.prototype.destroyEditorWindow = function() {
      if (this.eventWindow) {
        this.eventWindow.destroy();
        this.eventWindow = null;
      }
      this.eventWindow = new EventWindow(this);
    };
    Schedule2.prototype.renderElements = function(isLayoutOnly) {
      if (isLayoutOnly) {
        this.initializeView(this.currentView);
        this.eventWindow.refresh();
        return;
      }
      this.destroyHeaderModule();
      if (this.showHeaderBar) {
        this.headerModule = new HeaderRenderer(this);
      }
      this.renderTableContainer();
      if (Browser.isDevice || Browser.isTouch) {
        this.scheduleTouchModule = new ScheduleTouch(this);
      }
      this.initializeView(this.currentView);
      this.destroyPopups();
      if (!this.isPrinting) {
        this.initializePopups();
      }
    };
    Schedule2.prototype.validateDate = function(selectedDate) {
      if (selectedDate === void 0) {
        selectedDate = this.selectedDate;
      }
      var date = selectedDate instanceof Date ? new Date(selectedDate.getTime()) : new Date(selectedDate);
      var minDate = isNullOrUndefined(this.minDate) ? new Date(1900, 0, 1) : this.minDate instanceof Date ? new Date(this.minDate.getTime()) : new Date(this.minDate);
      var maxDate = isNullOrUndefined(this.maxDate) ? new Date(2099, 11, 31) : this.maxDate instanceof Date ? new Date(this.maxDate.getTime()) : new Date(this.maxDate);
      if (minDate <= maxDate) {
        if (date < minDate) {
          date = minDate;
        }
        if (date > maxDate) {
          date = maxDate;
        }
        this.setProperties({ selectedDate: /* @__PURE__ */ new Date("" + date), minDate: /* @__PURE__ */ new Date("" + minDate), maxDate: /* @__PURE__ */ new Date("" + maxDate) }, true);
        if (this.eventWindow) {
          this.eventWindow.updateMinMaxDateToEditor();
        }
      } else {
        throw Error("minDate should be equal or less than maxDate");
      }
    };
    Schedule2.prototype.getViewIndex = function(viewName) {
      for (var item = 0; item < this.viewCollections.length; item++) {
        var checkIndex = this.viewCollections[parseInt(item.toString(), 10)].option;
        if (checkIndex === viewName) {
          return item;
        }
      }
      return -1;
    };
    Schedule2.prototype.setViewOptions = function(isModuleLoad) {
      if (isModuleLoad === void 0) {
        isModuleLoad = false;
      }
      if (isNullOrUndefined(this.views) || this.views.length === 0) {
        return;
      }
      this.viewOptions = {};
      this.viewCollections = [];
      var viewName;
      var selectedView;
      var prevIndex = this.viewIndex;
      var count = 0;
      this.viewIndex = -1;
      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
        var view = _a[_i];
        var isOptions = typeof view === "string" ? false : true;
        if (typeof view === "string") {
          viewName = view;
          if (this.currentView === viewName) {
            selectedView = viewName;
            this.viewIndex = count;
          }
        } else {
          viewName = view.option;
          if (view.isSelected) {
            selectedView = viewName;
            this.viewIndex = count;
          }
        }
        var obj = extend({ option: viewName }, isOptions ? view : {});
        var fieldViewName = viewName.charAt(0).toLowerCase() + viewName.slice(1);
        obj.cellHeaderTemplateName = obj.cellHeaderTemplate ? obj.option : "";
        obj.dateHeaderTemplateName = obj.dateHeaderTemplate ? obj.option : "";
        obj.dateRangeTemplateName = obj.dateRangeTemplate ? obj.option : "";
        obj.cellTemplateName = obj.cellTemplate ? obj.option : "";
        obj.dayHeaderTemplateName = obj.dayHeaderTemplate ? obj.option : "";
        obj.monthHeaderTemplateName = obj.monthHeaderTemplate ? obj.option : "";
        obj.resourceHeaderTemplateName = obj.resourceHeaderTemplate ? obj.option : "";
        obj.headerIndentTemplateName = obj.headerIndentTemplate ? obj.option : "";
        obj.eventTemplateName = obj.eventTemplate ? obj.option : "";
        if (!isNullOrUndefined(obj.firstDayOfWeek) && obj.firstDayOfWeek === 0) {
          delete obj.firstDayOfWeek;
        }
        if (!isNullOrUndefined(obj.interval) && obj.interval === 1) {
          delete obj.interval;
        }
        this.viewCollections.push(obj);
        if (isNullOrUndefined(this.viewOptions["" + fieldViewName])) {
          this.viewOptions["" + fieldViewName] = [obj];
        } else {
          this.viewOptions["" + fieldViewName].push(obj);
        }
        count++;
      }
      if (!isModuleLoad && selectedView) {
        this.setProperties({ currentView: selectedView }, true);
      }
      if (this.viewIndex === -1) {
        var currentIndex = this.getViewIndex(this.currentView);
        this.viewIndex = typeof this.views[0] !== "string" && (!isNullOrUndefined(prevIndex) && prevIndex !== -1) ? prevIndex : currentIndex === -1 ? 0 : currentIndex;
      }
    };
    Schedule2.prototype.getActiveViewOptions = function() {
      var timeScale = {
        enable: this.timeScale.enable,
        interval: this.timeScale.interval,
        slotCount: this.timeScale.slotCount,
        majorSlotTemplate: this.timeScale.majorSlotTemplate,
        minorSlotTemplate: this.timeScale.minorSlotTemplate
      };
      var isYearView = this.viewCollections[this.viewIndex].option.indexOf("Year") > -1;
      var group = {
        byDate: isYearView ? false : this.group.byDate,
        byGroupID: this.group.byGroupID,
        allowGroupEdit: this.group.allowGroupEdit,
        resources: isNullOrUndefined(this.group.resources) ? [] : this.group.resources,
        headerTooltipTemplate: this.group.headerTooltipTemplate,
        enableCompactView: this.group.enableCompactView,
        hideNonWorkingDays: ["Day", "Week", "WorkWeek", "Month"].indexOf(this.currentView) > -1 ? this.group.hideNonWorkingDays : false
      };
      var workDays = this.viewCollections[this.viewIndex].workDays ? [] : this.workDays;
      var scheduleOptions = {
        dateFormat: this.dateFormat,
        endHour: this.endHour,
        isSelected: false,
        option: null,
        readonly: this.readonly,
        startHour: this.startHour,
        allowVirtualScrolling: false,
        cellHeaderTemplate: this.cellHeaderTemplate,
        dayHeaderTemplate: this.dayHeaderTemplate,
        monthHeaderTemplate: this.monthHeaderTemplate,
        cellTemplate: this.cellTemplate,
        eventTemplate: this.eventSettings.template,
        dateHeaderTemplate: this.dateHeaderTemplate,
        dateRangeTemplate: this.dateRangeTemplate,
        resourceHeaderTemplate: this.resourceHeaderTemplate,
        headerIndentTemplate: this.headerIndentTemplate,
        firstMonthOfYear: this.firstMonthOfYear,
        firstDayOfWeek: this.firstDayOfWeek,
        workDays,
        monthsCount: this.monthsCount,
        showWeekend: this.showWeekend,
        showWeekNumber: this.showWeekNumber,
        displayName: null,
        interval: 1,
        timeScale,
        timeFormat: this.internalTimeFormat,
        group,
        headerRows: this.headerRows,
        orientation: "Horizontal",
        numberOfWeeks: 0,
        displayDate: null,
        enableLazyLoading: false
      };
      var viewOptions = this.viewCollections[this.viewIndex];
      var viewsData = extend(scheduleOptions, viewOptions, void 0, true);
      if (this.firstDayOfWeek !== 0 && viewOptions.firstDayOfWeek && this.firstDayOfWeek !== viewOptions.firstDayOfWeek) {
        viewsData.firstDayOfWeek = this.firstDayOfWeek;
      }
      if (viewsData.displayDate) {
        viewsData.displayDate = viewsData.displayDate instanceof Date ? new Date(viewsData.displayDate.getTime()) : new Date(viewsData.displayDate);
      }
      if (viewsData.enableLazyLoading && !isNullOrUndefined(viewsData.group.resources) && viewsData.group.resources.length > 0 && (["Agenda", "MonthAgenda", "Year", "TimelineYear"].indexOf(viewsData.option) === -1 || viewsData.option === "TimelineYear" && viewsData.orientation === "Vertical")) {
        viewsData.allowVirtualScrolling = true;
      }
      return viewsData;
    };
    Schedule2.prototype.initializeDataModule = function() {
      this.eventFields = {
        id: this.eventSettings.fields.id,
        isBlock: this.eventSettings.fields.isBlock,
        subject: this.eventSettings.fields.subject.name,
        startTime: this.eventSettings.fields.startTime.name,
        endTime: this.eventSettings.fields.endTime.name,
        startTimezone: this.eventSettings.fields.startTimezone.name,
        endTimezone: this.eventSettings.fields.endTimezone.name,
        location: this.eventSettings.fields.location.name,
        description: this.eventSettings.fields.description.name,
        isAllDay: this.eventSettings.fields.isAllDay.name,
        recurrenceID: this.eventSettings.fields.recurrenceID.name,
        recurrenceRule: this.eventSettings.fields.recurrenceRule.name,
        recurrenceException: this.eventSettings.fields.recurrenceException.name,
        isReadonly: this.eventSettings.fields.isReadonly,
        followingID: this.eventSettings.fields.followingID
      };
      this.setEditorTitles();
      this.dataModule = new Data(this, this.eventSettings.dataSource, this.eventSettings.query);
      this.crudModule = new Crud(this);
    };
    Schedule2.prototype.setEditorTitles = function() {
      this.editorTitles = {
        subject: this.eventSettings.fields.subject.title || this.localeObj.getConstant("title"),
        startTime: this.eventSettings.fields.startTime.title || this.localeObj.getConstant("start"),
        endTime: this.eventSettings.fields.endTime.title || this.localeObj.getConstant("end"),
        isAllDay: this.eventSettings.fields.isAllDay.title || this.localeObj.getConstant("allDay"),
        startTimezone: this.eventSettings.fields.startTimezone.title || this.localeObj.getConstant("startTimezone"),
        endTimezone: this.eventSettings.fields.endTimezone.title || this.localeObj.getConstant("endTimezone"),
        location: this.eventSettings.fields.location.title || this.localeObj.getConstant("location"),
        description: this.eventSettings.fields.description.title || this.localeObj.getConstant("description"),
        recurrenceRule: this.eventSettings.fields.recurrenceRule.title || this.localeObj.getConstant("repeat")
      };
    };
    Schedule2.prototype.initializeView = function(viewName) {
      this.showSpinner();
      this.activeViewOptions = this.getActiveViewOptions();
      if (this.resourceBase) {
        this.resourceBase.setResourceCollection();
      }
      this.initializeTemplates();
      this.renderModule.render(viewName);
    };
    Schedule2.prototype.initializeTemplates = function() {
      this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);
      this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);
      this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);
      this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);
      this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
      this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
      this.majorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.majorSlotTemplate);
      this.minorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.minorSlotTemplate);
      this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
      this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
      this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);
      this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);
      this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
      this.editorTemplateFn = this.templateParser(this.editorTemplate);
      this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
      this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
      this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
      this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
      this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
    };
    Schedule2.prototype.initializePopups = function() {
      this.eventWindow = new EventWindow(this);
      this.quickPopup = new QuickPopups(this);
    };
    Schedule2.prototype.getDayNames = function(type) {
      var culShortNames = [];
      var cldrObj;
      var nameSpace = "";
      if (isNullOrUndefined(this.locale) || this.locale === "en" || this.locale === "en-US") {
        nameSpace = "days.stand-alone.";
        cldrObj = getValue(nameSpace + type, getDefaultDateObject(this.getCalendarMode()));
      } else {
        nameSpace = "main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".days.format." + type;
        cldrObj = getValue(nameSpace, cldrData);
      }
      for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
        var obj = _a[_i];
        culShortNames.push(getValue(obj, cldrObj));
      }
      return culShortNames;
    };
    Schedule2.prototype.setCldrTimeFormat = function() {
      if (!isNullOrUndefined(this.timeFormat)) {
        this.internalTimeFormat = this.timeFormat;
        return;
      }
      if (isNullOrUndefined(this.locale) || this.locale === "en" || this.locale === "en-US") {
        this.internalTimeFormat = getValue("timeFormats.short", getDefaultDateObject(this.getCalendarMode()));
      } else {
        this.internalTimeFormat = getValue("main." + this.locale + ".dates.calendars." + this.getCalendarMode() + ".timeFormats.short", cldrData);
      }
    };
    Schedule2.prototype.getCalendarMode = function() {
      return !isNullOrUndefined(this.calendarMode) ? this.calendarMode.toLowerCase() : "gregorian";
    };
    Schedule2.prototype.getTimeString = function(date) {
      var time = this.globalize.formatDate(date, {
        format: this.activeViewOptions.timeFormat,
        type: "time",
        calendar: this.getCalendarMode()
      });
      return time.toLocaleUpperCase();
    };
    Schedule2.prototype.getDateTime = function(date) {
      return date instanceof Date ? new Date(date.getTime()) : new Date(date);
    };
    Schedule2.prototype.setCalendarMode = function() {
      if (this.calendarMode === "Islamic") {
        this.calendarUtil = new Islamic2();
      } else {
        this.calendarUtil = new Gregorian();
      }
    };
    Schedule2.prototype.changeView = function(view, event2, muteOnChange, index) {
      var _this = this;
      if (isNullOrUndefined(index)) {
        index = this.getViewIndex(view);
      }
      if (!muteOnChange && index === this.viewIndex && this.currentView === view || index < 0) {
        return;
      }
      var previousView = this.activeViewOptions ? this.activeViewOptions.option : this.currentView;
      var args = { requestType: "viewNavigate", cancel: false, event: event2 };
      this.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var navArgs = {
            action: "view",
            cancel: false,
            currentDate: _this.selectedDate,
            previousView,
            currentView: view,
            viewIndex: index
          };
          _this.trigger(navigating, navArgs, function(navigationArgs) {
            if (!navigationArgs.cancel) {
              var isVertical = ["Day", "Week", "WorkWeek"].indexOf(view) > -1 && ["Day", "Week", "WorkWeek"].indexOf(previousView) < 0;
              _this.uiStateValues.isInitial = isVertical || view.indexOf("Timeline") > -1 || view.indexOf("Year") > -1;
              _this.uiStateValues.top = view.indexOf("Timeline") > -1 && previousView.indexOf("Timeline") < 0 ? 0 : _this.uiStateValues.top;
              _this.viewIndex = navigationArgs.viewIndex;
              _this.setProperties({ currentView: view }, true);
              if (_this.headerModule) {
                _this.headerModule.updateActiveView();
                _this.headerModule.setCalendarDate(_this.selectedDate);
                _this.headerModule.setCalendarView();
              }
              _this.initializeView(_this.currentView);
              _this.animateLayout();
              args = { requestType: "viewNavigate", cancel: false, event: event2 };
              _this.trigger(actionComplete, args);
            } else {
              _this.currentView = previousView;
            }
          });
        } else {
          _this.currentView = previousView;
        }
      });
    };
    Schedule2.prototype.changeDate = function(selectedDate, event2) {
      var _this = this;
      var args = { requestType: "dateNavigate", cancel: false, event: event2 };
      this.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var navArgs = {
            action: "date",
            cancel: false,
            previousDate: _this.selectedDate,
            currentDate: selectedDate
          };
          _this.trigger(navigating, navArgs, function(navigationArgs) {
            if (!navigationArgs.cancel) {
              _this.uiStateValues.isInitial = _this.activeView.isTimelineView() && _this.currentView !== "TimelineYear";
              _this.validateDate(navigationArgs.currentDate);
              if (_this.headerModule) {
                _this.headerModule.setCalendarDate(navigationArgs.currentDate);
              }
              if (_this.currentView === "MonthAgenda" && _this.monthAgendaModule) {
                _this.monthAgendaModule.monthAgendaDate = /* @__PURE__ */ new Date("" + _this.selectedDate);
              }
              _this.initializeView(_this.currentView);
              _this.animateLayout();
              args = { requestType: "dateNavigate", cancel: false, event: event2 };
              _this.trigger(actionComplete, args);
            }
          });
        }
      });
    };
    Schedule2.prototype.isMinMaxDate = function(date) {
      if (date === void 0) {
        date = this.selectedDate;
      }
      var maxDate = isNullOrUndefined(this.maxDate) ? new Date(2099, 11, 31) : this.maxDate;
      var minDate = isNullOrUndefined(this.minDate) ? new Date(1900, 0, 1) : this.minDate;
      return date.getTime() >= minDate.getTime() && date.getTime() <= maxDate.getTime();
    };
    Schedule2.prototype.isSelectedDate = function(date) {
      return date.setHours(0, 0, 0, 0) === (/* @__PURE__ */ new Date("" + this.selectedDate)).setHours(0, 0, 0, 0);
    };
    Schedule2.prototype.getCurrentTime = function(date) {
      if (date === void 0) {
        date = /* @__PURE__ */ new Date();
      }
      if (this.timezone) {
        return this.tzModule.convert(date, this.tzModule.getLocalTimezoneName(), this.timezone);
      }
      return date;
    };
    Schedule2.prototype.getNavigateView = function() {
      if (this.activeView.isTimelineView()) {
        return this.currentView === "TimelineMonth" || this.currentView === "TimelineYear" ? "TimelineDay" : "Agenda";
      }
      return "Day";
    };
    Schedule2.prototype.animateLayout = function() {
      if (!this.activeView.element) {
        return;
      }
      new Animation({ duration: 600, name: "FadeIn", timingFunction: "easeIn" }).animate(this.activeView.element);
    };
    Schedule2.prototype.requiredModules = function() {
      var modules = [];
      this.setViewOptions(true);
      for (var _i = 0, _a = Object.keys(this.viewOptions); _i < _a.length; _i++) {
        var view = _a[_i];
        view = view === "timelineDay" || view === "timelineWeek" || view === "timelineWorkWeek" ? "timelineViews" : view;
        modules.push({ member: view, args: [this] });
      }
      if (this.allowDragAndDrop) {
        modules.push({ member: "dragAndDrop", args: [this] });
      }
      if (this.allowResizing) {
        modules.push({ member: "resize", args: [this] });
      }
      modules.push({ member: "excelExport", args: [this] });
      modules.push({ member: "iCalendarExport", args: [this] });
      modules.push({ member: "iCalendarImport", args: [this] });
      modules.push({ member: "print", args: [this] });
      return modules;
    };
    Schedule2.prototype.preRender = function() {
      this.isAdaptive = Browser.isDevice || isIPadDevice();
      this.globalize = new Internationalization(this.locale);
      this.tzModule = new Timezone();
      if (this && isNullOrUndefined(this.uiStateValues) || !this.enablePersistence) {
        this.uiStateValues = {
          expand: false,
          isInitial: true,
          left: 0,
          top: 0,
          isGroupAdaptive: false,
          isIgnoreOccurrence: false,
          groupIndex: this.adaptiveGroupIndex,
          action: false,
          isBlock: false,
          isCustomMonth: true,
          isPreventTimezone: false
        };
      }
      this.currentTimezoneDate = this.getCurrentTime();
      this.activeCellsData = {
        startTime: new Date(this.currentTimezoneDate),
        endTime: new Date(this.currentTimezoneDate),
        isAllDay: false
      };
      this.activeEventData = { event: void 0, element: void 0 };
      this.getDefaultLocale();
      this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
      this.setCldrTimeFormat();
      this.setCalendarMode();
      this.eventsData = [];
      this.eventsProcessed = [];
      this.blockData = [];
      this.blockProcessed = [];
      this.resourceCollection = [];
      this.currentAction = null;
      this.selectedElements = [];
      this.activeEventTemplates = [];
      this.setViewOptions();
    };
    Schedule2.prototype.getDefaultLocale = function() {
      this.defaultLocale = {
        day: "Day",
        week: "Week",
        workWeek: "Work Week",
        month: "Month",
        year: "Year",
        agenda: "Agenda",
        weekAgenda: "Week Agenda",
        workWeekAgenda: "Work Week Agenda",
        monthAgenda: "Month Agenda",
        today: "Today",
        noEvents: "No events",
        emptyContainer: "There are no events scheduled on this day.",
        allDay: "All day",
        start: "Start",
        end: "End",
        more: "more",
        close: "Close",
        cancel: "Cancel",
        noTitle: "(No Title)",
        delete: "Delete",
        deleteEvent: "Delete Event",
        deleteMultipleEvent: "Delete Multiple Events",
        selectedItems: "Items selected",
        deleteSeries: "Entire Series",
        edit: "Edit",
        editSeries: "Entire Series",
        editEvent: "Edit Event",
        createEvent: "Create",
        subject: "Subject",
        addTitle: "Add title",
        moreDetails: "More Details",
        moreEvents: "More Events",
        save: "Save",
        editContent: "How would you like to change the appointment in the series?",
        deleteContent: "Are you sure you want to delete this event?",
        deleteMultipleContent: "Are you sure you want to delete the selected events?",
        newEvent: "New Event",
        title: "Title",
        location: "Location",
        description: "Description",
        timezone: "Timezone",
        startTimezone: "Start Timezone",
        endTimezone: "End Timezone",
        repeat: "Repeat",
        saveButton: "Save",
        cancelButton: "Cancel",
        deleteButton: "Delete",
        recurrence: "Recurrence",
        wrongPattern: "The recurrence pattern is not valid.",
        seriesChangeAlert: "Do you want to cancel the changes made to specific instances of this series and match it to the whole series again?",
        createError: "The duration of the event must be shorter than how frequently it occurs. Shorten the duration, or change the recurrence pattern in the recurrence event editor.",
        sameDayAlert: "Two occurrences of the same event cannot occur on the same day.",
        occurenceAlert: "Cannot reschedule an occurrence of the recurring appointment if it skips over a later occurrence of the same appointment.",
        editRecurrence: "Edit Recurrence",
        recurringEvent: "Recurring Event",
        repeats: "Repeats",
        alert: "Alert",
        startEndError: "The selected end date occurs before the start date.",
        invalidDateError: "The entered date value is invalid.",
        blockAlert: "Events cannot be scheduled within the blocked time range.",
        ok: "Ok",
        yes: "Yes",
        no: "No",
        of: "of",
        occurrence: "Occurrence",
        series: "Series",
        previous: "Previous",
        next: "Next",
        timelineDay: "Timeline Day",
        timelineWeek: "Timeline Week",
        timelineWorkWeek: "Timeline Work Week",
        timelineMonth: "Timeline Month",
        timelineYear: "Timeline Year",
        editFollowingEvent: "Following Events",
        deleteTitle: "Delete Event",
        editTitle: "Edit Event",
        beginFrom: "Begin From",
        endAt: "Ends At",
        expandAllDaySection: "Expand-all-day-section",
        collapseAllDaySection: "Collapse-all-day-section",
        searchTimezone: "Search Timezone",
        noRecords: "No records found"
      };
    };
    Schedule2.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.onScheduleResize, this);
      EventHandler.add(window, "orientationchange", this.onScheduleResize, this);
      EventHandler.add(document, Browser.touchStartEvent, this.onDocumentClick, this);
    };
    Schedule2.prototype.removeSelectedClass = function() {
      var selectedCells = this.getSelectedCells();
      for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
        var cell = selectedCells_1[_i];
        if (this.currentView !== "Year") {
          cell.setAttribute("aria-selected", "false");
        }
        cell.removeAttribute("tabindex");
      }
      removeClass(selectedCells, SELECTED_CELL_CLASS);
      if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {
        this.keyboardInteractionModule.selectedCells = [];
      }
    };
    Schedule2.prototype.addSelectedClass = function(cells, focusCell, isPreventScroll) {
      if (this.currentView !== "Year") {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
          var cell = cells_1[_i];
          cell.setAttribute("aria-selected", "true");
        }
      }
      addClass(cells, SELECTED_CELL_CLASS);
      if (focusCell) {
        focusCell.setAttribute("tabindex", "0");
        focusCell.focus({ preventScroll: isPreventScroll || false });
      }
    };
    Schedule2.prototype.selectCell = function(element) {
      this.removeSelectedClass();
      this.addSelectedClass([element], element);
    };
    Schedule2.prototype.getAllDayRow = function() {
      return this.element.querySelector("." + ALLDAY_ROW_CLASS);
    };
    Schedule2.prototype.getContentTable = function() {
      return this.activeView.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
    };
    Schedule2.prototype.getTableRows = function() {
      return [].slice.call(this.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr:not(." + HIDDEN_CLASS + ")"));
    };
    Schedule2.prototype.getWorkCellElements = function() {
      return [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS));
    };
    Schedule2.prototype.getIndexOfDate = function(collection, date) {
      return collection.map(Number).indexOf(+date);
    };
    Schedule2.prototype.isAllDayCell = function(td) {
      if (["Month", "TimelineMonth", "TimelineYear", "MonthAgenda"].indexOf(this.currentView) > -1 || td.classList.contains(ALLDAY_CELLS_CLASS) || td.classList.contains(HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {
        return true;
      }
      if (this.activeView.isTimelineView() && this.activeViewOptions.headerRows.length > 0 && this.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return true;
      }
      return false;
    };
    Schedule2.prototype.getDateFromElement = function(td) {
      var dateString;
      if (!isNullOrUndefined(td)) {
        dateString = td.getAttribute("data-date");
      }
      if (!isNullOrUndefined(dateString)) {
        var dateInMS = parseInt(dateString, 10);
        var date = new Date(dateInMS);
        return date;
      }
      return void 0;
    };
    Schedule2.prototype.getTargetElement = function(selector, left, top) {
      var element = document.elementFromPoint(left, top);
      var targetElement;
      if (element) {
        targetElement = element.closest(selector);
      }
      return targetElement ? [targetElement] : null;
    };
    Schedule2.prototype.getCellHeaderTemplate = function() {
      return this.cellHeaderTemplateFn;
    };
    Schedule2.prototype.getDayHeaderTemplate = function() {
      return this.dayHeaderTemplateFn;
    };
    Schedule2.prototype.getMonthHeaderTemplate = function() {
      return this.monthHeaderTemplateFn;
    };
    Schedule2.prototype.getCellTemplate = function() {
      return this.cellTemplateFn;
    };
    Schedule2.prototype.getDateHeaderTemplate = function() {
      return this.dateHeaderTemplateFn;
    };
    Schedule2.prototype.getDateRangeTemplate = function() {
      return this.dateRangeTemplateFn;
    };
    Schedule2.prototype.getMajorSlotTemplate = function() {
      return this.majorSlotTemplateFn;
    };
    Schedule2.prototype.getMinorSlotTemplate = function() {
      return this.minorSlotTemplateFn;
    };
    Schedule2.prototype.getAppointmentTemplate = function() {
      return this.appointmentTemplateFn;
    };
    Schedule2.prototype.getEventTooltipTemplate = function() {
      return this.eventTooltipTemplateFn;
    };
    Schedule2.prototype.getHeaderTooltipTemplate = function() {
      return this.headerTooltipTemplateFn;
    };
    Schedule2.prototype.getEditorTemplate = function() {
      return this.editorTemplateFn;
    };
    Schedule2.prototype.getEditorHeaderTemplate = function() {
      return this.editorHeaderTemplateFn;
    };
    Schedule2.prototype.getEditorFooterTemplate = function() {
      return this.editorFooterTemplateFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesHeader = function() {
      return this.quickInfoTemplatesHeaderFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesContent = function() {
      return this.quickInfoTemplatesContentFn;
    };
    Schedule2.prototype.getQuickInfoTemplatesFooter = function() {
      return this.quickInfoTemplatesFooterFn;
    };
    Schedule2.prototype.getResourceHeaderTemplate = function() {
      return this.resourceHeaderTemplateFn;
    };
    Schedule2.prototype.getHeaderIndentTemplate = function() {
      return this.headerIndentTemplateFn;
    };
    Schedule2.prototype.getCssProperties = function() {
      var cssProps = {
        border: this.enableRtl ? "borderLeftWidth" : "borderRightWidth",
        padding: this.enableRtl ? "paddingLeft" : "paddingRight",
        rtlBorder: this.enableRtl ? "borderRightWidth" : "borderLeftWidth",
        rtlPadding: this.enableRtl ? "paddingRight" : "paddingLeft"
      };
      return cssProps;
    };
    Schedule2.prototype.removeNewEventElement = function() {
      var eventClone = this.element.querySelector("." + NEW_EVENT_CLASS);
      if (!isNullOrUndefined(eventClone)) {
        remove(eventClone);
      }
    };
    Schedule2.prototype.getStartEndTime = function(startEndTime) {
      if (!isNullOrUndefined(startEndTime) && startEndTime !== "") {
        var startEndDate = resetTime(new Date(this.currentTimezoneDate) || this.getCurrentTime());
        var timeString = startEndTime.split(":");
        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }
        return startEndDate;
      }
      return null;
    };
    Schedule2.prototype.onDocumentClick = function(args) {
      this.notify(documentClick, { event: args });
    };
    Schedule2.prototype.onScheduleResize = function() {
      if (isNullOrUndefined(this.activeView) || (this.isAdaptive || isMobile()) && document.activeElement && document.activeElement.classList.contains(SUBJECT_CLASS) || this.uiStateValues.isTapHold) {
        return;
      }
      if (this.virtualScrollModule && this.activeView.isTimelineView()) {
        this.virtualScrollModule.refreshLayout();
      }
      if (this.activeViewOptions.timeScale.enable && this.activeView) {
        this.activeView.highlightCurrentTime();
      }
      if (this.quickPopup) {
        this.quickPopup.onClosePopup();
      }
      resetScrollbarWidth();
      if (this.currentView === "Month" || this.currentView !== "Agenda" && this.currentView !== "MonthAgenda" && !this.activeViewOptions.timeScale.enable || this.activeView.isTimelineView()) {
        this.activeView.resetColWidth();
        this.notify(scrollUiUpdate, { cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });
        var isRemoteRefresh = false;
        if (this.activeViewOptions.enableLazyLoading && this.virtualScrollModule && this.virtualScrollModule.isRemoteRefresh) {
          isRemoteRefresh = this.virtualScrollModule.isRemoteRefresh;
          this.virtualScrollModule.isRemoteRefresh = false;
        }
        this.refreshEvents(isRemoteRefresh);
      } else {
        this.notify(contentReady, {});
      }
    };
    Schedule2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template === "function") {
            return compile(template);
          } else {
            if (document.querySelectorAll(template).length) {
              return compile(document.querySelector(template).innerHTML.trim());
            } else {
              return compile(template);
            }
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Schedule2.prototype.getSelectedCells = function() {
      return [].slice.call(this.element.querySelectorAll("." + SELECTED_CELL_CLASS));
    };
    Schedule2.prototype.getAnnouncementString = function(event2, subject) {
      var resourceName;
      if (this.quickPopup && this.activeViewOptions.group.resources.length > 0) {
        var constantText = '"s event - ';
        resourceName = this.quickPopup.getResourceText({ event: event2 }, "event") + constantText;
      }
      var recordSubject = subject || (event2[this.eventFields.subject] || this.eventSettings.fields.subject.default);
      var recordLocation = event2[this.eventFields.location] || this.eventSettings.fields.location.default;
      var skeleton = "full";
      var startDateText = this.globalize.formatDate(event2[this.eventFields.startTime], {
        type: "dateTime",
        skeleton,
        calendar: this.getCalendarMode()
      });
      var endDateText = this.globalize.formatDate(event2[this.eventFields.endTime], {
        type: "dateTime",
        skeleton,
        calendar: this.getCalendarMode()
      });
      var announcementString = recordSubject + " " + this.localeObj.getConstant("beginFrom") + " " + startDateText + " " + this.localeObj.getConstant("endAt") + " " + endDateText;
      if (resourceName) {
        announcementString = resourceName + " " + announcementString;
      }
      if (recordLocation && recordLocation !== "") {
        announcementString = announcementString + " " + this.localeObj.getConstant("location") + " " + recordLocation;
      }
      if (event2[this.eventFields.recurrenceRule] && event2[this.eventFields.recurrenceRule] !== "" && event2[this.eventFields.id] === event2[this.eventFields.recurrenceID]) {
        announcementString = announcementString + " " + this.localeObj.getConstant("recurringEvent");
      }
      return announcementString;
    };
    Schedule2.prototype.boundaryValidation = function(pageY, pageX) {
      var autoScrollDistance = 30;
      var scrollEdges = { left: false, right: false, top: false, bottom: false };
      var viewBoundaries = this.element.querySelector("." + CONTENT_WRAP_CLASS).getBoundingClientRect();
      if (pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset && pageY > viewBoundaries.top + window.pageYOffset) {
        scrollEdges.top = true;
      }
      if (pageY > viewBoundaries.bottom - autoScrollDistance + window.pageYOffset && pageY < viewBoundaries.bottom + window.pageYOffset) {
        scrollEdges.bottom = true;
      }
      if (pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset && pageX > viewBoundaries.left + window.pageXOffset) {
        scrollEdges.left = true;
      }
      if (pageX > viewBoundaries.right - autoScrollDistance + window.pageXOffset && pageX < viewBoundaries.right + window.pageXOffset) {
        scrollEdges.right = true;
      }
      return scrollEdges;
    };
    Schedule2.prototype.getWeekNumberContent = function(dates) {
      var weekNumber;
      if (this.weekRule === "FirstDay") {
        var weekNumberDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekNumberDate));
      } else if (this.weekRule === "FirstFourDayWeek") {
        var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);
        var weekLastDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);
        var weekMidDate = getWeekMiddleDate(weekFirstDate, weekLastDate);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekMidDate));
      } else if (this.weekRule === "FirstFullWeek") {
        var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);
        weekNumber = this.globalize.formatNumber(getWeekNumber(weekFirstDate));
      }
      return weekNumber;
    };
    Schedule2.prototype.renderHeaderIndentTemplate = function(data, td) {
      if (this.activeViewOptions.headerIndentTemplate) {
        var scheduleId = this.element.id + "_";
        var viewName = this.activeViewOptions.headerIndentTemplateName;
        var templateId = scheduleId + viewName + "headerIndentTemplate";
        var indentTemplate = [].slice.call(this.getHeaderIndentTemplate()(data, this, "headerIndentTemplate", templateId, false, void 0, void 0, this.root));
        append(indentTemplate, td);
      }
    };
    Schedule2.prototype.isSpecificResourceEvents = function() {
      return this.activeViewOptions.group.resources.length > 0 && !this.activeViewOptions.group.allowGroupEdit && !this.rowAutoHeight && !this.virtualScrollModule && this.activeViewOptions.group.byGroupID;
    };
    Schedule2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.onScheduleResize);
      EventHandler.remove(window, "orientationchange", this.onScheduleResize);
      EventHandler.remove(document, Browser.touchStartEvent, this.onDocumentClick);
    };
    Schedule2.prototype.getModuleName = function() {
      return "schedule";
    };
    Schedule2.prototype.getPersistData = function() {
      return this.addOnPersist(["currentView", "selectedDate", "scrollTop", "scrollLeft", "adaptiveGroupIndex"]);
    };
    Schedule2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.isReact && isNullOrUndefined(this.activeView)) {
        return;
      }
      var state = {
        isRefresh: false,
        isResource: false,
        isDate: false,
        isView: false,
        isLayout: false,
        isDataManager: false
      };
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "views":
            this.setViewOptions();
            if (this.headerModule) {
              this.headerModule.updateItems();
            }
            state.isView = true;
            break;
          case "currentView":
            state.isView = true;
            break;
          case "minDate":
          case "maxDate":
          case "selectedDate":
            state.isDate = true;
            break;
          case "dateFormat":
            this.activeViewOptions = this.getActiveViewOptions();
            if (this.headerModule) {
              this.headerModule.updateDateRange();
            }
            break;
          case "showHeaderBar":
          case "toolbarItems":
            this.destroyHeaderModule();
            if (newProp.showHeaderBar) {
              this.headerModule = new HeaderRenderer(this);
              this.headerModule.updateDateRange();
            }
            this.notify(scrollUiUpdate, { cssProperties: this.getCssProperties() });
            if (this.activeView.isTimelineView()) {
              this.refreshEvents(false);
            }
            break;
          case "workDays":
            if (JSON.stringify(oldProp.workDays) !== JSON.stringify(newProp.workDays)) {
              state.isLayout = true;
            }
            break;
          case "showWeekend":
          case "startHour":
          case "endHour":
          case "workHours":
          case "readonly":
          case "headerRows":
          case "showWeekNumber":
          case "rowAutoHeight":
            state.isLayout = true;
            break;
          case "locale":
          case "calendarMode":
            this.globalize = new Internationalization(this.locale);
            this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
            this.setCldrTimeFormat();
            this.setCalendarMode();
            state.isRefresh = true;
            break;
          case "firstDayOfWeek":
            this.activeViewOptions.firstDayOfWeek = newProp.firstDayOfWeek;
            if (this.eventWindow) {
              this.eventWindow.refreshRecurrenceEditor();
            }
            state.isLayout = true;
            break;
          case "showTimeIndicator":
            if (this.activeViewOptions.timeScale.enable && this.activeView) {
              this.activeView.highlightCurrentTime();
            }
            break;
          case "cellHeaderTemplate":
            this.activeViewOptions.cellHeaderTemplate = newProp.cellHeaderTemplate;
            this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);
            state.isLayout = true;
            break;
          case "cellTemplate":
            this.activeViewOptions.cellTemplate = newProp.cellTemplate;
            this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);
            state.isLayout = true;
            break;
          case "dateHeaderTemplate":
            this.activeViewOptions.dateHeaderTemplate = newProp.dateHeaderTemplate;
            this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
            state.isLayout = true;
            break;
          case "dateRangeTemplate":
            this.activeViewOptions.dateRangeTemplate = newProp.dateRangeTemplate;
            this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
            if (this.headerModule) {
              this.headerModule.updateDateRange();
            }
            break;
          case "dayHeaderTemplate":
            this.activeViewOptions.dayHeaderTemplate = newProp.dayHeaderTemplate;
            this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);
            state.isLayout = true;
            break;
          case "monthHeaderTemplate":
            this.activeViewOptions.monthHeaderTemplate = newProp.monthHeaderTemplate;
            this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);
            state.isLayout = true;
            break;
          case "resourceHeaderTemplate":
            this.activeViewOptions.resourceHeaderTemplate = newProp.resourceHeaderTemplate;
            this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
            state.isLayout = true;
            break;
          case "timezone":
            this.eventBase.timezonePropertyChange(oldProp.timezone);
            if (this.headerModule) {
              this.headerModule.setCalendarTimezone();
            }
            break;
          case "enableRtl":
            this.setRtlClass();
            state.isRefresh = true;
            break;
          default:
            this.extendedPropertyChange(prop, newProp, oldProp, state);
            break;
        }
      }
      this.propertyChangeAction(state);
    };
    Schedule2.prototype.propertyChangeAction = function(state) {
      if (state.isRefresh) {
        this.refresh();
      } else if (state.isResource) {
        this.initializeResources(true);
      } else if (state.isView) {
        this.changeView(this.currentView, null, true);
      } else if (state.isDate) {
        if (isNullOrUndefined(this.selectedDate)) {
          this.setProperties({ selectedDate: this.getCurrentTime() }, true);
        }
        this.changeDate(this.selectedDate);
      } else if (state.isLayout) {
        this.activeCellsData = null;
        this.initializeView(this.currentView);
      } else if (state.isDataManager && this.crudModule) {
        if (this.dragAndDropModule) {
          this.dragAndDropModule.actionObj.action = "";
          removeClass([this.element], EVENT_ACTION_CLASS);
        }
        this.crudModule.refreshDataManager();
      }
    };
    Schedule2.prototype.allDayRowScrollUpdate = function() {
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var allDayRow = this.element.querySelector("." + ALLDAY_ROW_CLASS);
      if (this.height === "auto" || !this.enableAllDayScroll) {
        addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
        if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_SCROLL)) {
          removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);
        }
        if (this.uiStateValues.expand) {
          var allDayCells = [].slice.call(this.element.querySelectorAll("." + ALLDAY_CELLS_CLASS));
          allDayCells[0].style.height = allDayRow.style.height ? allDayRow.style.height : allDayCells[1].style.height;
        }
      } else {
        if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_AUTO)) {
          removeClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);
        }
        this.eventBase.allDayExpandScroll(dateHeader);
      }
      if (!this.uiStateValues.expand) {
        allDayRow.style.height = "";
      }
    };
    Schedule2.prototype.extendedPropertyChange = function(prop, newProp, oldProp, state) {
      switch (prop) {
        case "width":
        case "height":
        case "enableAllDayScroll":
          if (["Day", "Week", "WorkWeek"].indexOf(this.currentView) > -1) {
            this.allDayRowScrollUpdate();
          }
          this.notify(uiUpdate, { module: "scroll", properties: { width: newProp.width, height: newProp.height } });
          break;
        case "cssClass":
          if (oldProp.cssClass) {
            removeClass([this.element], oldProp.cssClass.split(" "));
          }
          if (newProp.cssClass) {
            addClass([this.element], newProp.cssClass.split(" "));
          }
          break;
        case "hideEmptyAgendaDays":
        case "agendaDaysCount":
          this.activeViewOptions = this.getActiveViewOptions();
          state.isView = true;
          break;
        case "eventSettings":
          this.onEventSettingsPropertyChanged(newProp.eventSettings, oldProp.eventSettings, state);
          break;
        case "allowKeyboardInteraction":
          if (this.keyboardInteractionModule) {
            this.keyboardInteractionModule.destroy();
            this.keyboardInteractionModule = null;
          }
          if (newProp.allowKeyboardInteraction) {
            this.keyboardInteractionModule = new KeyboardInteraction(this);
          }
          break;
        case "timezoneDataSource":
          if (this.eventWindow) {
            this.eventWindow.refresh();
          }
          break;
        case "editorTemplate":
          if (!isNullOrUndefined(this.editorTemplate)) {
            this.editorTemplateFn = this.templateParser(this.editorTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogContent();
          }
          break;
        case "editorHeaderTemplate":
          if (!isNullOrUndefined(this.editorHeaderTemplate)) {
            this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogHeader();
          }
          break;
        case "editorFooterTemplate":
          if (!isNullOrUndefined(this.editorFooterTemplate)) {
            this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
          }
          if (this.eventWindow) {
            this.eventWindow.setDialogFooter();
          }
          break;
        case "quickInfoTemplates":
          if (this.quickInfoTemplates.header) {
            this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
          }
          if (this.quickInfoTemplates.content) {
            this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
          }
          if (this.quickInfoTemplates.footer) {
            this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
          }
          break;
        case "group":
          this.onGroupSettingsPropertyChanged(newProp.group, oldProp.group, state);
          break;
        case "resources":
          state.isResource = true;
          break;
        case "timeScale":
          this.activeViewOptions.timeScale.interval = newProp.timeScale.interval || this.activeViewOptions.timeScale.interval;
          this.activeViewOptions.timeScale.slotCount = newProp.timeScale.slotCount || this.activeViewOptions.timeScale.slotCount;
          if (this.eventWindow) {
            this.eventWindow.refreshDateTimePicker();
          }
          state.isLayout = true;
          break;
        case "allowDragAndDrop":
        case "allowResizing":
        case "eventDragArea":
          this.refreshEvents(false);
          break;
        case "weekRule":
          state.isLayout = true;
          break;
        case "firstMonthOfYear":
          this.activeViewOptions.firstMonthOfYear = newProp.firstMonthOfYear;
          this.viewIndex = this.activeView.viewIndex;
          state.isLayout = true;
          break;
        case "monthsCount":
          this.activeViewOptions.monthsCount = newProp.monthsCount;
          this.viewIndex = this.activeView.viewIndex;
          state.isLayout = true;
          break;
        case "timeFormat":
          this.internalTimeFormat = newProp.timeFormat || this.activeViewOptions.timeFormat;
          if (this.eventWindow) {
            this.eventWindow.refreshDateTimePicker();
          }
          state.isLayout = true;
          break;
        case "enableAdaptiveUI":
          if (this.showHeaderBar && this.headerModule) {
            this.destroyHeaderModule();
            this.headerModule = new HeaderRenderer(this);
            this.headerModule.updateDateRange();
          }
          state.isLayout = true;
          break;
        case "headerIndentTemplate":
          this.activeViewOptions.headerIndentTemplate = newProp.headerIndentTemplate;
          this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);
          state.isLayout = true;
          break;
      }
    };
    Schedule2.prototype.setRtlClass = function() {
      if (this.enableRtl) {
        addClass([this.element], "e-rtl");
      } else {
        removeClass([this.element], "e-rtl");
      }
    };
    Schedule2.prototype.onGroupSettingsPropertyChanged = function(newProp, oldProp, state) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        if (prop === "headerTooltipTemplate") {
          this.headerTooltipTemplateFn = this.templateParser(newProp.headerTooltipTemplate);
        } else {
          state.isLayout = true;
          if (this.eventWindow) {
            this.eventWindow.refresh();
          }
        }
      }
    };
    Schedule2.prototype.onEventSettingsPropertyChanged = function(newProp, oldProp, state) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "dataSource":
          case "query":
          case "fields":
          case "includeFiltersInQuery":
            this.initializeDataModule();
            state.isDataManager = true;
            break;
          case "template":
            this.activeViewOptions.eventTemplate = newProp.template;
            this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
            state.isDataManager = true;
            break;
          case "enableTooltip":
            if (this.eventTooltip) {
              this.eventTooltip.destroy();
              this.eventTooltip = null;
            }
            if (newProp.enableTooltip) {
              this.eventTooltip = new EventTooltip(this);
            }
            break;
          case "tooltipTemplate":
            this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
            break;
          case "resourceColorField":
            if (this.resourceBase) {
              this.resourceBase.setResourceCollection();
            }
            state.isDataManager = true;
            break;
          case "editFollowingEvents":
            if (this.quickPopup) {
              this.quickPopup.refreshQuickDialog();
            }
            break;
          case "allowAdding":
          case "allowEditing":
          case "allowDeleting":
            if (this.showHeaderBar && this.headerModule) {
              this.headerModule.updateAddIcon();
            }
            if (this.eventWindow) {
              this.eventWindow.refresh();
            }
            break;
          case "spannedEventPlacement":
          case "minimumEventDuration":
          case "enableMaxHeight":
          case "enableIndicator":
            this.refreshEvents(false);
            break;
          case "ignoreWhitespace":
            state.isLayout = true;
            break;
        }
      }
    };
    Schedule2.prototype.destroyHeaderModule = function() {
      if (this.headerModule) {
        this.headerModule.destroy();
        this.headerModule = null;
      }
    };
    Schedule2.prototype.destroyPopups = function() {
      if (this.quickPopup) {
        this.quickPopup.destroy();
        this.quickPopup = null;
      }
      if (this.eventWindow) {
        this.eventWindow.destroy();
        this.eventWindow = null;
      }
    };
    Schedule2.prototype.showSpinner = function() {
      showSpinner(this.element);
    };
    Schedule2.prototype.hideSpinner = function() {
      hideSpinner(this.element);
    };
    Schedule2.prototype.setWorkHours = function(dates, start, end, groupIndex) {
      var cells = [];
      cells = this.getWorkHourCells(dates, start, end, groupIndex);
      addClass(cells, WORK_HOURS_CLASS);
    };
    Schedule2.prototype.resetWorkHours = function(dates, start, end, groupIndex) {
      if (dates === void 0) {
        dates = this.activeView.renderDates;
      }
      if (dates && start && end) {
        var cells = this.getWorkHourCells(dates, start, end, groupIndex);
        removeClass(cells, WORK_HOURS_CLASS);
      } else {
        var workHourCells = [].slice.call(this.element.querySelectorAll("." + WORK_HOURS_CLASS));
        removeClass(workHourCells, WORK_HOURS_CLASS);
      }
    };
    Schedule2.prototype.getWorkHourCells = function(dates, start, end, groupIndex) {
      if (["Agenda", "MonthAgenda", "Month", "TimelineMonth"].indexOf(this.currentView) > -1) {
        return [];
      }
      var startHour = this.getStartEndTime(start);
      var endHour = this.getStartEndTime(end);
      var tableEle = this.getContentTable();
      if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour) || !tableEle) {
        return [];
      }
      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      var viewStartHour = this.activeView.getStartHour();
      if (startHour < viewStartHour) {
        startHour = viewStartHour;
      }
      var viewEndHour = this.activeView.getEndHour();
      if (endHour > viewEndHour) {
        endHour = viewEndHour;
      }
      var msMajorInterval = this.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;
      var offsetDiff = (viewStartHour.getTimezoneOffset() - startHour.getTimezoneOffset()) * MS_PER_MINUTE;
      var startIndex = Math.round((startHour.getTime() - viewStartHour.getTime() + offsetDiff) / msInterval);
      var endIndex = Math.ceil((endHour.getTime() - viewStartHour.getTime() + offsetDiff) / msInterval);
      var tempStartIndex = startIndex;
      var tempEndIndex = endIndex;
      var cells = [];
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var date = dates_1[_i];
        date = this.getDateTime(date);
        resetTime(date);
        var renderDates = this.activeView.renderDates;
        if (!isNullOrUndefined(groupIndex) && this.resourceBase && !this.activeView.isTimelineView()) {
          renderDates = this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)].renderDates;
        }
        var colIndex = this.getIndexOfDate(renderDates, date);
        if (colIndex >= 0) {
          if (this.activeView.isTimelineView()) {
            var slotsPerDay = Math.round((viewEndHour.getTime() - viewStartHour.getTime()) / msInterval);
            startIndex = tempStartIndex + colIndex * slotsPerDay;
            endIndex = tempEndIndex + colIndex * slotsPerDay;
          }
          for (var i = startIndex; i < endIndex; i++) {
            if (this.activeView.isTimelineView()) {
              var rowIndex = !isNullOrUndefined(groupIndex) ? groupIndex : 0;
              cells.push(tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(i.toString(), 10)]);
            } else {
              if (!isNullOrUndefined(groupIndex)) {
                var selector = "." + WORK_CELLS_CLASS + '[data-group-index="' + groupIndex + '"]';
                var tds = [].slice.call(tableEle.rows[parseInt(i.toString(), 10)].querySelectorAll(selector));
                cells.push(tds[parseInt(colIndex.toString(), 10)]);
              } else {
                cells.push(tableEle.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)]);
              }
            }
          }
        }
      }
      return cells;
    };
    Schedule2.prototype.getCellDetails = function(tdCol) {
      var td = tdCol instanceof Array ? tdCol : [tdCol];
      var firstTd = getElement(td[0]);
      var lastTd = getElement(td.slice(-1)[0]);
      var startTime = this.getDateFromElement(firstTd);
      var endTime = this.getDateFromElement(lastTd);
      if (isNullOrUndefined(startTime) || isNullOrUndefined(endTime)) {
        return void 0;
      }
      var endDateFromColSpan = this.activeView.isTimelineView() && !isNullOrUndefined(lastTd.getAttribute("colSpan")) && this.headerRows.length > 0;
      var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute("colSpan"), 10) : 1;
      if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(ALLDAY_CELLS_CLASS) || lastTd.classList.contains(HEADER_CELLS_CLASS)) {
        endTime = addDays(new Date(endTime.getTime()), duration);
      } else {
        endTime = this.activeView.getEndDateFromStartDate(endTime);
      }
      var data = {
        startTime,
        endTime,
        isAllDay: this.isAllDayCell(firstTd),
        element: tdCol
      };
      var groupIndex = firstTd.getAttribute("data-group-index");
      if (!isNullOrUndefined(groupIndex)) {
        data.groupIndex = parseInt(groupIndex, 10);
      }
      return data;
    };
    Schedule2.prototype.getSelectedElements = function() {
      if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {
        return this.keyboardInteractionModule.selectedCells;
      }
      return this.getSelectedCells();
    };
    Schedule2.prototype.getResourceCollections = function() {
      return this.resourceCollection;
    };
    Schedule2.prototype.setResourceCollections = function(resourceCol, isEventDataRefresh) {
      if (isEventDataRefresh === void 0) {
        isEventDataRefresh = true;
      }
      if (!isEventDataRefresh && this.uiStateValues) {
        this.uiStateValues.isPreventEventRefresh = true;
      }
      this.setProperties({ resources: resourceCol }, false);
    };
    Schedule2.prototype.changeCurrentView = function(viewName, viewIndex) {
      var index = this.getViewIndex(viewName);
      var view = viewName.charAt(0).toLowerCase() + viewName.slice(1);
      var viewOptions = this.viewOptions["" + view];
      if (viewOptions) {
        index = this.viewCollections.indexOf(viewOptions[viewIndex || 0]);
      }
      if (index === -1 || index === this.viewIndex) {
        return;
      }
      this.changeView(viewName, null, null, index);
    };
    Schedule2.prototype.getCurrentViewIndex = function() {
      return this.viewIndex;
    };
    Schedule2.prototype.getResourcesByIndex = function(index) {
      if (this.resourceBase && this.resourceBase.lastResourceLevel) {
        if (index < 0 || index >= this.resourceBase.lastResourceLevel.length) {
          return void 0;
        }
        var data = this.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];
        var groupData = {};
        this.resourceBase.setResourceValues(groupData, index);
        return { resource: data.resource, resourceData: data.resourceData, groupData };
      }
      return void 0;
    };
    Schedule2.prototype.expandResource = function(resourceId, name) {
      if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {
        this.resourceBase.resourceExpand(resourceId, name, false);
      }
    };
    Schedule2.prototype.collapseResource = function(resourceId, name) {
      if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {
        this.resourceBase.resourceExpand(resourceId, name, true);
      }
    };
    Schedule2.prototype.scrollTo = function(hour, scrollDate) {
      if (this.activeView.scrollToDate && isNullOrUndefined(hour) && scrollDate) {
        this.activeView.scrollToDate(scrollDate);
      } else if (this.activeView.scrollToHour) {
        this.activeView.scrollToHour(hour, scrollDate);
      }
    };
    Schedule2.prototype.scrollToResource = function(resourceId, groupName) {
      if (this.resourceBase && this.resourceBase.lastResourceLevel) {
        this.resourceBase.resourceScroll(resourceId, groupName);
      }
    };
    Schedule2.prototype.exportToICalendar = function(fileName, customData) {
      if (this.iCalendarExportModule) {
        this.iCalendarExportModule.initializeCalendarExport(fileName, customData);
      } else {
        console.warn('[WARNING] :: Module "ICalendarExport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ICalendarExport module");
      }
    };
    Schedule2.prototype.importICalendar = function(fileContent) {
      if (this.iCalendarImportModule) {
        this.iCalendarImportModule.initializeCalendarImport(fileContent);
      } else {
        console.warn('[WARNING] :: Module "ICalendarImport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ICalendarImport module");
      }
    };
    Schedule2.prototype.addEvent = function(data) {
      this.crudModule.addEvent(data);
    };
    Schedule2.prototype.generateEventOccurrences = function(event2, startDate) {
      return this.eventBase ? this.eventBase.generateOccurrence(event2, startDate) : [];
    };
    Schedule2.prototype.exportToExcel = function(excelExportOptions) {
      if (this.excelExportModule) {
        this.excelExportModule.initializeExcelExport(excelExportOptions);
      } else {
        console.warn('[WARNING] :: Module "ExcelExport" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject ExcelExport module");
      }
    };
    Schedule2.prototype.print = function(printOptions) {
      if (this.printModule) {
        this.printModule.print(printOptions);
      } else {
        console.warn('[WARNING] :: Module "Print" is not available in Schedule component! You either misspelled the module name or forgot to load it.');
        throw Error("Inject Print module");
      }
    };
    Schedule2.prototype.saveEvent = function(data, currentAction) {
      this.crudModule.saveEvent(data, currentAction);
    };
    Schedule2.prototype.deleteEvent = function(id, currentAction) {
      this.crudModule.deleteEvent(id, currentAction);
    };
    Schedule2.prototype.getEvents = function(startDate, endDate, includeOccurrences) {
      var eventCollections = [];
      if (includeOccurrences) {
        eventCollections = this.eventBase.getProcessedEvents();
      } else {
        eventCollections = this.eventsData;
      }
      if (startDate) {
        startDate = this.getDateTime(startDate);
      }
      if (endDate) {
        endDate = this.getDateTime(endDate);
      }
      eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);
      return eventCollections;
    };
    Schedule2.prototype.getBlockEvents = function(startDate, endDate, includeOccurrences) {
      var eventCollections = [];
      if (includeOccurrences) {
        eventCollections = this.eventBase.getProcessedEvents(this.blockData);
      } else {
        eventCollections = this.blockData;
      }
      if (startDate) {
        startDate = this.getDateTime(startDate);
      }
      if (endDate) {
        endDate = this.getDateTime(endDate);
      }
      eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);
      return eventCollections;
    };
    Schedule2.prototype.getOccurrencesByID = function(eventID) {
      return this.eventBase.getOccurrencesByID(eventID);
    };
    Schedule2.prototype.getOccurrencesByRange = function(startTime, endTime) {
      startTime = this.getDateTime(startTime);
      endTime = this.getDateTime(endTime);
      return this.eventBase.getOccurrencesByRange(startTime, endTime);
    };
    Schedule2.prototype.getCurrentViewDates = function() {
      return this.activeView ? this.activeView.renderDates : [];
    };
    Schedule2.prototype.setRecurrenceEditor = function(recurrenceEditor) {
      this.eventWindow.setRecurrenceEditor(recurrenceEditor);
    };
    Schedule2.prototype.getEventMaxID = function() {
      return this.eventBase.getEventMaxID();
    };
    Schedule2.prototype.getDeletedOccurrences = function(recurrenceData) {
      return this.eventBase.getDeletedOccurrences(recurrenceData);
    };
    Schedule2.prototype.getCurrentViewEvents = function() {
      return this.eventsProcessed;
    };
    Schedule2.prototype.refreshEvents = function(isRemoteRefresh) {
      if (isRemoteRefresh === void 0) {
        isRemoteRefresh = true;
      }
      if (isRemoteRefresh) {
        if (this.dragAndDropModule) {
          this.dragAndDropModule.actionObj.action = "";
          removeClass([this.element], EVENT_ACTION_CLASS);
        }
        this.crudModule.refreshDataManager();
      } else {
        if (this.uiStateValues) {
          this.uiStateValues.isPreventTimezone = true;
        }
        if (this.crudModule) {
          this.crudModule.refreshProcessedData();
        }
        if (this.uiStateValues) {
          this.uiStateValues.isPreventTimezone = false;
        }
      }
    };
    Schedule2.prototype.refreshTemplates = function(templateName) {
      if (templateName) {
        this.resetTemplates([templateName]);
      } else {
        this.resetTemplates();
      }
      switch (templateName) {
        case "eventTemplate":
          this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);
          this.refreshEvents(false);
          break;
        case "dateHeaderTemplate":
          this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);
          this.activeView.refreshHeader();
          break;
        case "dateRangeTemplate":
          this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);
          if (this.headerModule) {
            this.headerModule.refresh();
          }
          break;
        case "resourceHeaderTemplate":
          this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);
          if (this.activeView.isTimelineView()) {
            this.activeView.refreshResourceHeader();
          } else {
            this.activeView.refreshHeader();
          }
          break;
        case "quickInfoTemplates":
          if (this.quickPopup) {
            this.quickPopup.destroy();
            this.quickPopup = null;
          }
          this.quickPopup = new QuickPopups(this);
          this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);
          this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);
          this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);
          break;
        case "editorTemplate":
          this.destroyEditorWindow();
          this.editorTemplateFn = this.templateParser(this.editorTemplate);
          break;
        case "editorHeaderTemplate":
          this.destroyEditorWindow();
          this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);
          break;
        case "editorFooterTemplate":
          this.destroyEditorWindow();
          this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);
          break;
        case "tooltipTemplate":
        case "headerTooltipTemplate":
          if (this.eventTooltip) {
            this.eventTooltip.destroy();
            this.eventTooltip = null;
          }
          this.eventTooltip = new EventTooltip(this);
          this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);
          this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);
          break;
        default:
          this.initializeView(this.currentView);
          break;
      }
    };
    Schedule2.prototype.refreshLayout = function() {
      this.onScheduleResize();
      if (this.headerModule) {
        this.headerModule.refresh();
      }
      if (this.eventWindow) {
        this.eventWindow.refresh();
      }
    };
    Schedule2.prototype.getEventDetails = function(element) {
      element = getElement(element);
      var guid = element.getAttribute("data-guid");
      if (guid) {
        return this.eventBase.getEventByGuid(guid);
      }
      return {};
    };
    Schedule2.prototype.isSlotAvailable = function(startTime, endTime, groupIndex) {
      var _this = this;
      var eventStart;
      var eventEnd;
      var eventObj = this.activeEventData.event;
      if (startTime instanceof Date || typeof startTime === "string") {
        eventStart = startTime;
        eventEnd = endTime;
      } else {
        eventObj = startTime;
        eventStart = startTime[this.eventFields.startTime];
        eventEnd = startTime[this.eventFields.endTime];
        if (this.resourceBase) {
          groupIndex = this.eventBase.getGroupIndexFromEvent(startTime);
        }
      }
      if (isNullOrUndefined(eventStart) || isNullOrUndefined(eventEnd)) {
        return true;
      }
      eventStart = this.getDateTime(eventStart);
      eventEnd = this.getDateTime(eventEnd);
      var eventCollection = this.eventBase.filterEvents(eventStart, eventEnd);
      if (!isNullOrUndefined(groupIndex) && this.resourceBase && this.resourceBase.lastResourceLevel.length > 0) {
        eventCollection = this.eventBase.filterEventsByResource(this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)], eventCollection);
      }
      if (eventObj) {
        if (eventObj.Guid) {
          eventCollection = eventCollection.filter(function(event2) {
            return event2.Guid !== eventObj.Guid;
          });
        } else {
          eventCollection = eventCollection.filter(function(event2) {
            return event2[_this.eventFields.id] !== eventObj[_this.eventFields.id];
          });
        }
      }
      return eventCollection.length > 0 ? false : true;
    };
    Schedule2.prototype.openEditor = function(data, action, isEventData, repeatType) {
      if (action === "Add" && !isEventData) {
        data.startTime = this.getDateTime(data.startTime);
        data.endTime = this.getDateTime(data.endTime);
        if (!isNullOrUndefined(data.element)) {
          data.element = getElement(data.element);
        }
      } else {
        data[this.eventFields.startTime] = this.getDateTime(data[this.eventFields.startTime]);
        data[this.eventFields.endTime] = this.getDateTime(data[this.eventFields.endTime]);
      }
      this.currentAction = action;
      if (action !== "Add") {
        this.activeEventData.event = data;
      }
      this.eventWindow.openEditor(data, action, isEventData, repeatType);
    };
    Schedule2.prototype.closeEditor = function() {
      if (this.eventWindow) {
        this.eventWindow.dialogClose();
      }
    };
    Schedule2.prototype.openQuickInfoPopup = function(data) {
      var _this = this;
      if (this.currentView === "Year" || isNullOrUndefined(data)) {
        return;
      }
      if (isNullOrUndefined(data[this.eventFields.id])) {
        if (this.currentView === "Agenda" || this.currentView === "MonthAgenda" || isNullOrUndefined(this.activeView)) {
          return;
        }
        var cellData = {
          startTime: this.activeCellsData.startTime = this.getDateTime(data[this.eventFields.startTime]),
          endTime: this.activeCellsData.endTime = this.getDateTime(data[this.eventFields.endTime]),
          isAllDay: this.activeCellsData.isAllDay = !isNullOrUndefined(data[this.eventFields.isAllDay]) ? data[this.eventFields.isAllDay] : false
        };
        var startTime = this.activeView.getAdjustedDate(new Date(cellData.startTime));
        if (startTime) {
          var query = "." + WORK_CELLS_CLASS + '[data-date="' + startTime.getTime() + '"]';
          if (this.activeViewOptions.group.resources.length > 0 && !this.uiStateValues.isGroupAdaptive && this.resourceBase && this.eventBase) {
            cellData.groupIndex = this.eventBase.getGroupIndexFromEvent(data);
            query = "." + WORK_CELLS_CLASS + '[data-date="' + startTime.getTime() + '"][data-group-index="' + cellData.groupIndex + '"]';
          }
          var workCell = this.element.querySelector(query);
          if (workCell) {
            workCell.focus();
            cellData.element = workCell;
            this.notify(cellClick, cellData);
          }
        }
      } else {
        var app = this.getCurrentViewEvents().filter(function(item) {
          return data[_this.eventFields.id] === item[_this.eventFields.id];
        });
        if (app.length <= 0) {
          return;
        }
        var selectEvent = app[0];
        if (data[this.eventFields.recurrenceRule]) {
          var occurence = app.filter(function(x) {
            return x[_this.eventFields.startTime].getTime() === data[_this.eventFields.startTime].getTime();
          });
          if (occurence.length > 0) {
            selectEvent = occurence[0];
          }
        }
        var element = this.element.querySelector('div[data-guid="' + selectEvent.Guid + '"]');
        if (element) {
          this.eventBase.removeSelectedAppointmentClass();
          this.eventBase.addSelectedAppointments([element], false);
          this.activeEventData = { event: selectEvent, element };
          if (this.currentView === "Agenda" || this.currentView === "MonthAgenda") {
            addClass([this.activeEventData.element], AGENDA_SELECTED_CELL);
          }
          this.notify(eventClick, this.activeEventData);
        }
      }
    };
    Schedule2.prototype.closeQuickInfoPopup = function() {
      if (this.quickPopup) {
        this.quickPopup.quickPopupHide(true);
      }
    };
    Schedule2.prototype.closeTooltip = function() {
      if (this.eventTooltip) {
        this.eventTooltip.close();
      }
    };
    Schedule2.prototype.selectResourceByIndex = function(groupIndex) {
      if (this.resourceBase && this.uiStateValues.isGroupAdaptive) {
        this.resourceBase.selectResourceByIndex(groupIndex);
      }
    };
    Schedule2.prototype.getIndexFromResourceId = function(id, name) {
      if (this.resourceBase) {
        return this.resourceBase.getIndexFromResourceId(id, name);
      }
      return null;
    };
    Schedule2.prototype.addResource = function(resources, name, index) {
      this.resourceBase.addResource(resources, name, index);
    };
    Schedule2.prototype.removeResource = function(resourceId, name) {
      this.resourceBase.removeResource(resourceId, name);
    };
    Schedule2.prototype.destroy = function() {
      if (this.eventTooltip) {
        this.eventTooltip.destroy();
        this.eventTooltip = null;
      }
      this.destroyPopups();
      this.hideSpinner();
      this.unWireEvents();
      this.destroyHeaderModule();
      if (this.eventBase) {
        this.eventBase.destroy();
        this.eventBase = null;
      }
      if (this.workCellAction) {
        this.workCellAction.destroy();
        this.workCellAction = null;
      }
      if (this.inlineModule) {
        this.inlineModule.destroy();
        this.inlineModule = null;
      }
      if (this.keyboardInteractionModule) {
        this.keyboardInteractionModule.destroy();
        this.keyboardInteractionModule = null;
      }
      if (this.scrollModule) {
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
      if (this.printModule) {
        this.printModule.destroy();
      }
      if (this.activeView) {
        this.resetTemplates();
        this.activeView.removeEventListener();
        this.activeView.destroy();
        this.activeView = null;
      }
      if (this.scheduleTouchModule) {
        this.scheduleTouchModule.destroy();
        this.scheduleTouchModule = null;
      }
      if (this.crudModule) {
        this.crudModule.destroy();
        this.crudModule = null;
      }
      if (this.dataModule) {
        this.dataModule.destroy();
        this.dataModule = null;
      }
      _super.prototype.destroy.call(this);
      var modules = [
        "dayModule",
        "weekModule",
        "workWeekModule",
        "monthModule",
        "monthAgendaModule",
        "yearModule",
        "agendaModule",
        "timelineViewsModule",
        "timelineMonthModule",
        "timelineYearModule",
        "resizeModule",
        "dragAndDropModule",
        "excelExportModule",
        "printModule",
        "iCalendarExportModule",
        "iCalendarImportModule",
        "tzModule",
        "eventsData",
        "eventsProcessed",
        "blockData",
        "blockProcessed",
        "uiStateValues",
        "viewCollections",
        "viewOptions",
        "defaultLocale",
        "localeObj",
        "selectedElements",
        "resourceCollection",
        "editorTitles",
        "eventFields",
        "activeViewOptions",
        "activeEventData",
        "activeCellsData",
        "renderModule"
      ];
      for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {
        var module = modules_1[_i];
        this["" + module] = null;
      }
      removeChildren(this.element);
      var removeClasses = [ROOT8, RTL7, DEVICE_CLASS, MULTI_DRAG];
      if (this.cssClass) {
        removeClasses = removeClasses.concat(this.cssClass.split(" "));
      }
      removeClass([this.element], removeClasses);
    };
    __decorate46([
      Property("auto")
    ], Schedule2.prototype, "width", void 0);
    __decorate46([
      Property("auto")
    ], Schedule2.prototype, "height", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "showHeaderBar", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "showTimeIndicator", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowSwiping", void 0);
    __decorate46([
      Collection([], ToolbarItem)
    ], Schedule2.prototype, "toolbarItems", void 0);
    __decorate46([
      Property("Week")
    ], Schedule2.prototype, "currentView", void 0);
    __decorate46([
      Property(["Day", "Week", "WorkWeek", "Month", "Agenda"])
    ], Schedule2.prototype, "views", void 0);
    __decorate46([
      Property(/* @__PURE__ */ new Date())
    ], Schedule2.prototype, "selectedDate", void 0);
    __decorate46([
      Property(new Date(1900, 0, 1))
    ], Schedule2.prototype, "minDate", void 0);
    __decorate46([
      Property(new Date(2099, 11, 31))
    ], Schedule2.prototype, "maxDate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "dateFormat", void 0);
    __decorate46([
      Property("Gregorian")
    ], Schedule2.prototype, "calendarMode", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "showWeekend", void 0);
    __decorate46([
      Property(0)
    ], Schedule2.prototype, "firstDayOfWeek", void 0);
    __decorate46([
      Property("FirstDay")
    ], Schedule2.prototype, "weekRule", void 0);
    __decorate46([
      Property([1, 2, 3, 4, 5])
    ], Schedule2.prototype, "workDays", void 0);
    __decorate46([
      Property(12)
    ], Schedule2.prototype, "monthsCount", void 0);
    __decorate46([
      Property("00:00")
    ], Schedule2.prototype, "startHour", void 0);
    __decorate46([
      Property("24:00")
    ], Schedule2.prototype, "endHour", void 0);
    __decorate46([
      Property(null)
    ], Schedule2.prototype, "timeFormat", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "enableHtmlSanitizer", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "enableAllDayScroll", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "enableAdaptiveUI", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowResizing", void 0);
    __decorate46([
      Complex({}, WorkHours)
    ], Schedule2.prototype, "workHours", void 0);
    __decorate46([
      Complex({}, TimeScale)
    ], Schedule2.prototype, "timeScale", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowKeyboardInteraction", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowDragAndDrop", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "dateHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "dateRangeTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "cellHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "dayHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "monthHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "cellTemplate", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "readonly", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "showQuickInfo", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "allowInline", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowMultiCellSelection", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "allowMultiRowSelection", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "quickInfoOnSelectionEnd", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "showWeekNumber", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "rowAutoHeight", void 0);
    __decorate46([
      Property(false)
    ], Schedule2.prototype, "allowMultiDrag", void 0);
    __decorate46([
      Property(0)
    ], Schedule2.prototype, "firstMonthOfYear", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "editorTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "editorHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "editorFooterTemplate", void 0);
    __decorate46([
      Complex({}, QuickInfoTemplates)
    ], Schedule2.prototype, "quickInfoTemplates", void 0);
    __decorate46([
      Property(7)
    ], Schedule2.prototype, "agendaDaysCount", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "hideEmptyAgendaDays", void 0);
    __decorate46([
      Property(true)
    ], Schedule2.prototype, "enableRecurrenceValidation", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "timezone", void 0);
    __decorate46([
      Complex({}, EventSettings)
    ], Schedule2.prototype, "eventSettings", void 0);
    __decorate46([
      Property(timezoneData)
    ], Schedule2.prototype, "timezoneDataSource", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "resourceHeaderTemplate", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "headerIndentTemplate", void 0);
    __decorate46([
      Complex({}, Group)
    ], Schedule2.prototype, "group", void 0);
    __decorate46([
      Collection([], Resources)
    ], Schedule2.prototype, "resources", void 0);
    __decorate46([
      Collection([], HeaderRows)
    ], Schedule2.prototype, "headerRows", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "cssClass", void 0);
    __decorate46([
      Property()
    ], Schedule2.prototype, "eventDragArea", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "created", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "destroyed", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "cellClick", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "cellDoubleClick", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "moreEventsClick", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "hover", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "select", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "actionBegin", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "actionComplete", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "actionFailure", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "navigating", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "renderCell", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "eventClick", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "eventDoubleClick", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "eventRendered", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "dataBinding", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "popupOpen", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "popupClose", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "dragStart", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "drag", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "dragStop", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "resizeStart", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "resizing", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "resizeStop", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "virtualScrollStart", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "virtualScrollStop", void 0);
    __decorate46([
      Event()
    ], Schedule2.prototype, "dataBound", void 0);
    Schedule2 = __decorate46([
      NotifyPropertyChanges
    ], Schedule2);
    return Schedule2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/action-base.js
var ActionBase = (
  /** @class */
  function() {
    function ActionBase2(parent) {
      this.daysVariation = 0;
      this.parent = parent;
      this.actionObj = {
        X: 0,
        Y: 0,
        groupIndex: 0,
        cellWidth: 0,
        cellHeight: 0,
        slotInterval: 0,
        interval: 0,
        actionIndex: 0,
        cloneElement: [],
        originalElement: [],
        action: null,
        isAllDay: null,
        excludeSelectors: null,
        index: 0,
        navigationInterval: null,
        scrollInterval: null
      };
      this.scrollArgs = { element: null, width: 0, height: 0 };
      this.resizeEdges = { left: false, right: false, top: false, bottom: false };
      this.scrollEdges = { left: false, right: false, top: false, bottom: false };
    }
    ActionBase2.prototype.getChangedData = function(multiData) {
      var _this = this;
      var eventObj = extend({}, this.actionObj.event, null, true);
      eventObj[this.parent.eventFields.startTime] = this.actionObj.start;
      eventObj[this.parent.eventFields.endTime] = this.actionObj.end;
      if (!isNullOrUndefined(this.actionObj.isAllDay)) {
        eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var originalElement = this.getOriginalElement(this.actionObj.element);
        if (originalElement) {
          var indexCol_1 = originalElement.map(function(element) {
            return parseInt(element.getAttribute("data-group-index"), 10);
          });
          if (indexCol_1.indexOf(this.actionObj.groupIndex) === -1 || !isNullOrUndefined(multiData) && multiData.length > 0) {
            var cloneIndex_1 = parseInt(this.actionObj.clone.getAttribute("data-group-index"), 10);
            indexCol_1 = indexCol_1.filter(function(index) {
              return index !== cloneIndex_1;
            });
            indexCol_1.push(this.actionObj.groupIndex);
            if (multiData && multiData.length > 0) {
              multiData.forEach(function(data) {
                _this.parent.resourceBase.getResourceData(data, _this.actionObj.groupIndex, indexCol_1);
              });
            } else {
              this.parent.resourceBase.getResourceData(eventObj, this.actionObj.groupIndex, indexCol_1);
            }
          }
        }
      }
      return eventObj;
    };
    ActionBase2.prototype.saveChangedData = function(eventArgs, isMultiSelect) {
      if (isMultiSelect === void 0) {
        isMultiSelect = false;
      }
      this.parent.activeEventData.event = this.actionObj.event;
      this.parent.currentAction = "Save";
      var currentAction;
      var eventsCollection = [eventArgs.data];
      if (isMultiSelect) {
        eventsCollection = eventArgs.selectedData;
      }
      for (var _i = 0, eventsCollection_1 = eventsCollection; _i < eventsCollection_1.length; _i++) {
        var eventObj = eventsCollection_1[_i];
        var isSameResource = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(this.actionObj.element.getAttribute("data-group-index"), 10) === this.actionObj.groupIndex : true;
        if (+eventObj[this.parent.eventFields.startTime] === +this.actionObj.event[this.parent.eventFields.startTime] && +eventObj[this.parent.eventFields.endTime] === +this.actionObj.event[this.parent.eventFields.endTime] && isSameResource) {
          this.parent.crudModule.crudObj.isCrudAction = false;
          return;
        }
        if (eventObj[this.parent.eventFields.recurrenceRule]) {
          var eveId = eventObj[this.parent.eventFields.recurrenceID] || eventObj[this.parent.eventFields.id];
          if (eventObj[this.parent.eventFields.id] === eventObj[this.parent.eventFields.recurrenceID]) {
            eventObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();
            currentAction = "EditOccurrence";
          }
          if (this.parent.enableRecurrenceValidation && this.parent.eventWindow.editOccurrenceValidation(eveId, eventObj, this.actionObj.event)) {
            return;
          }
        } else {
          currentAction = null;
        }
        if (eventObj[this.parent.eventFields.startTimezone] || eventObj[this.parent.eventFields.endTimezone]) {
          this.parent.eventBase.timezoneConvert(eventObj);
        }
        this.parent.crudModule.saveEvent(eventObj, currentAction);
      }
    };
    ActionBase2.prototype.calculateIntervalTime = function(date) {
      var intervalTime = /* @__PURE__ */ new Date(+date);
      intervalTime.setMinutes(Math.floor(intervalTime.getMinutes() / this.actionObj.interval) * this.actionObj.interval);
      return intervalTime;
    };
    ActionBase2.prototype.getContentAreaDimension = function() {
      var viewElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var trElement = [].slice.call(viewElement.querySelector("tr").children);
      if (!this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.isAdaptive && !this.parent.enableAdaptiveUI && !this.parent.virtualScrollModule) {
        trElement = this.getResourceElements(trElement);
      }
      var leftOffset = trElement[0].getBoundingClientRect();
      var rightOffset = trElement.slice(-1)[0].getBoundingClientRect();
      var viewDimension = {
        bottom: viewElement.scrollHeight - 5,
        left: this.parent.enableRtl ? rightOffset.left : leftOffset.left,
        right: this.parent.enableRtl ? leftOffset.right : rightOffset.right,
        top: 0,
        leftOffset: this.parent.enableRtl ? rightOffset.right : leftOffset.right,
        rightOffset: this.parent.enableRtl ? leftOffset.left : rightOffset.left
      };
      return viewDimension;
    };
    ActionBase2.prototype.getIndex = function(index) {
      var contentElements = [].slice.call(this.parent.getContentTable().querySelector("tr").children);
      var indexes = { minIndex: 0, maxIndex: contentElements.length - 1 };
      if (this.actionObj.action === "resize" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeView.isTimelineView()) {
        var groupElements = this.getResourceElements(contentElements);
        indexes.minIndex = groupElements[0].cellIndex;
        indexes.maxIndex = groupElements.slice(-1)[0].cellIndex;
      }
      if (index < indexes.minIndex) {
        index = indexes.minIndex;
      }
      if (index > indexes.maxIndex) {
        index = indexes.maxIndex;
      }
      return index;
    };
    ActionBase2.prototype.updateTimePosition = function(date, multiData) {
      var index = 0;
      for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {
        var cloneElement = _a[_i];
        var timeElement = cloneElement.querySelector("." + APPOINTMENT_TIME);
        if (timeElement) {
          var startTime = this.actionObj.start;
          var endTime = this.actionObj.end;
          if (multiData && multiData.length > 0) {
            startTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.startTime];
            endTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.endTime];
          }
          timeElement.innerHTML = this.parent.getTimeString(startTime) + " - " + this.parent.getTimeString(endTime);
        }
        index++;
      }
      if (!this.parent.activeViewOptions.timeScale.enable || !this.parent.isAdaptive || this.parent.currentView === "Month" || this.parent.currentView === "TimelineMonth") {
        return;
      }
      var timeIndicator = this.parent.element.querySelector("." + CLONE_TIME_INDICATOR_CLASS);
      if (!timeIndicator) {
        timeIndicator = createElement("div", { className: CLONE_TIME_INDICATOR_CLASS });
        var wrapperClass = this.parent.activeView.isTimelineView() ? DATE_HEADER_WRAP_CLASS : TIME_CELLS_WRAP_CLASS;
        this.parent.element.querySelector("." + wrapperClass).appendChild(timeIndicator);
      }
      timeIndicator.innerHTML = this.parent.getTimeString(date);
      var offsetValue = 0;
      if (this.parent.activeView.isTimelineView()) {
        if (this.parent.enableRtl) {
          var rightValue = parseInt(this.actionObj.clone.style.right, 10);
          offsetValue = this.actionObj.action === "drag" || this.resizeEdges.left ? rightValue + this.actionObj.clone.offsetWidth : rightValue;
          timeIndicator.style.right = formatUnit(offsetValue);
        } else {
          var leftValue = parseInt(this.actionObj.clone.style.left, 10);
          offsetValue = this.actionObj.action === "drag" || this.resizeEdges.left ? leftValue : leftValue + this.actionObj.clone.offsetWidth;
          timeIndicator.style.left = formatUnit(offsetValue);
        }
      } else {
        offsetValue = this.actionObj.action === "drag" || this.resizeEdges.top ? this.actionObj.clone.offsetTop : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight;
        timeIndicator.style.top = formatUnit(offsetValue);
      }
    };
    ActionBase2.prototype.getResourceElements = function(table) {
      var _this = this;
      return table.filter(function(element) {
        return parseInt(element.getAttribute("data-group-index"), 10) === _this.actionObj.groupIndex;
      });
    };
    ActionBase2.prototype.getOriginalElement = function(element) {
      var originalElement;
      var guid = element.getAttribute("data-guid");
      var isMorePopup = element.offsetParent && element.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS);
      if (isMorePopup || this.parent.activeView.isTimelineView() || this.actionObj.action !== "resize" && this.parent.virtualScrollModule) {
        originalElement = [].slice.call(this.parent.element.querySelectorAll('[data-guid="' + guid + '"]'));
      } else {
        var tr = closest(element, "tr");
        if (tr) {
          originalElement = [].slice.call(tr.querySelectorAll('[data-guid="' + guid + '"]'));
        }
      }
      return originalElement;
    };
    ActionBase2.prototype.createCloneElement = function(element) {
      var cloneWrapper = createElement("div", { innerHTML: element.outerHTML });
      var cloneElement = cloneWrapper.children[0];
      var cloneClassLists = [CLONE_ELEMENT_CLASS];
      cloneClassLists.push(this.actionObj.action === "drag" ? DRAG_CLONE_CLASS : RESIZE_CLONE_CLASS);
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineMonth") {
        cloneClassLists.push(MONTH_CLONE_ELEMENT_CLASS);
      }
      addClass([cloneElement], cloneClassLists);
      addClass([element], EVENT_ACTION_CLASS);
      if (!isNullOrUndefined(element.parentElement)) {
        element.parentElement.appendChild(cloneElement);
      }
      cloneElement.style.width = formatUnit(cloneElement.offsetWidth - 2);
      var dragElement = document.querySelector(this.parent.eventDragArea);
      if (this.parent.eventDragArea && this.actionObj.action === "drag" && dragElement) {
        dragElement.appendChild(cloneElement);
      }
      setStyleAttribute(cloneElement, { border: "0px" });
      return cloneElement;
    };
    ActionBase2.prototype.removeCloneElementClasses = function() {
      var elements = this.actionObj.originalElement;
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear" || this.parent.currentView === "Day" || this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek") {
        elements = [].slice.call(this.parent.element.querySelectorAll("." + EVENT_ACTION_CLASS));
      }
      removeClass(elements, EVENT_ACTION_CLASS);
    };
    ActionBase2.prototype.removeCloneElement = function() {
      this.actionObj.originalElement = [];
      var dynamicEle = [].slice.call(this.parent.element.querySelectorAll(".e-dynamic-clone"));
      for (var _i = 0, dynamicEle_1 = dynamicEle; _i < dynamicEle_1.length; _i++) {
        var cloneEle = dynamicEle_1[_i];
        remove(cloneEle);
      }
      for (var _a = 0, _b = this.actionObj.cloneElement; _a < _b.length; _a++) {
        var cloneElement = _b[_a];
        if (!isNullOrUndefined(cloneElement.parentNode)) {
          remove(cloneElement);
        }
      }
      this.actionObj.cloneElement = [];
      var timeIndicator = this.parent.element.querySelector("." + CLONE_TIME_INDICATOR_CLASS);
      if (timeIndicator) {
        remove(timeIndicator);
      }
    };
    ActionBase2.prototype.getCursorElement = function(e) {
      var pages = this.parent.eventBase.getPageCoordinates(e);
      return document.elementFromPoint(pages.clientX, pages.clientY);
    };
    ActionBase2.prototype.autoScroll = function() {
      var parent = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var yIsScrollable = parent.offsetHeight <= parent.scrollHeight;
      var xIsScrollable = parent.offsetWidth <= parent.scrollWidth;
      var yInBounds = yIsScrollable && parent.scrollTop >= 0 && parent.scrollTop + parent.offsetHeight <= parent.scrollHeight;
      var xInBounds = xIsScrollable && parent.scrollLeft >= 0 && parent.scrollLeft + parent.offsetWidth <= parent.scrollWidth;
      if (this.actionObj.action === "resize" && this.scrollEdges.right && parent.scrollLeft + parent.offsetWidth > parent.scrollWidth) {
        var tdCollections = [].slice.call(this.parent.getContentTable().querySelector("tr").children).length - 1;
        var cellIndex = Math.ceil((this.actionObj.clone.offsetLeft + this.actionObj.clone.offsetWidth) / this.actionObj.cellWidth);
        xInBounds = cellIndex === tdCollections;
      }
      if (yInBounds && (this.scrollEdges.top || this.scrollEdges.bottom)) {
        parent.scrollTop += this.scrollEdges.top ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;
        if (this.actionObj.action === "resize") {
          if (parent.scrollHeight !== parent.offsetHeight + parent.scrollTop && parent.scrollTop > 0) {
            this.actionObj.Y += this.scrollEdges.top ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;
          }
        }
      }
      if (xInBounds && (this.scrollEdges.left || this.scrollEdges.right)) {
        parent.scrollLeft += this.scrollEdges.left ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;
        if (this.actionObj.action === "resize") {
          if (parent.scrollWidth !== parent.offsetWidth + parent.scrollLeft && parent.scrollLeft > 0) {
            this.actionObj.X += this.scrollEdges.left ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;
          }
        }
      }
    };
    ActionBase2.prototype.autoScrollValidation = function() {
      if (!this.actionObj.scroll.enable) {
        return false;
      }
      var res = this.parent.boundaryValidation(this.actionObj.pageY, this.actionObj.pageX);
      this.scrollEdges = res;
      return res.bottom || res.top || res.left || res.right;
    };
    ActionBase2.prototype.actionClass = function(type) {
      if (type === "addClass") {
        addClass([this.parent.element], EVENT_ACTION_CLASS);
      } else {
        removeClass([this.parent.element], EVENT_ACTION_CLASS);
      }
    };
    ActionBase2.prototype.updateScrollPosition = function(e) {
      var _this = this;
      this.scrollEventArgs = e;
      if (this.actionObj.scroll.enable && isNullOrUndefined(this.actionObj.scrollInterval)) {
        this.actionObj.scrollInterval = window.setInterval(function() {
          if (_this.autoScrollValidation() && !_this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
            if (_this.parent.activeView.isTimelineView() && _this.parent.activeViewOptions.group.resources.length > 0 && _this.actionObj.groupIndex < 0) {
              return;
            }
            _this.autoScroll();
            if (_this.actionObj.action === "drag") {
              _this.parent.dragAndDropModule.updateDraggingDateTime(_this.scrollEventArgs);
            } else {
              _this.parent.resizeModule.updateResizingDirection(_this.scrollEventArgs);
            }
          }
        }, this.actionObj.scroll.timeDelay);
      }
    };
    ActionBase2.prototype.updateOriginalElement = function(cloneElement) {
      var query = '[data-id="' + cloneElement.getAttribute("data-id") + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        query = query.concat('[data-group-index = "' + cloneElement.getAttribute("data-group-index") + '"]');
      }
      var elements = [].slice.call(this.parent.element.querySelectorAll(query));
      addClass(elements, EVENT_ACTION_CLASS);
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
      removeClass(eventWrappers, EVENT_ACTION_CLASS);
    };
    ActionBase2.prototype.getUpdatedEvent = function(startTime, endTime, eventObj) {
      var event2 = JSON.parse(JSON.stringify(eventObj));
      event2[this.parent.eventFields.startTime] = startTime;
      event2[this.parent.eventFields.endTime] = endTime;
      return event2;
    };
    ActionBase2.prototype.dynamicYearlyEventsRendering = function(event2, isResize) {
      if (isResize === void 0) {
        isResize = false;
      }
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var appWidth = this.actionObj.cellWidth - 7;
      if (isResize && (this.resizeEdges.left || this.resizeEdges.right)) {
        appWidth = this.actionObj.cellWidth * event2.count;
      }
      if (!isResize && (this.parent.activeViewOptions.orientation === "Horizontal" && this.parent.activeViewOptions.group.resources.length === 0)) {
        var eventObj = this.yearEvent.isSpannedEvent(event2, event2[this.parent.eventFields.startTime]);
        if (eventObj[this.parent.eventFields.startTime].getTime() === eventObj[this.parent.eventFields.endTime].getTime()) {
          eventObj.isSpanned.count = 1;
        }
        appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;
      }
      if (!isResize && this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length !== 0) {
        var eventObj = this.yearEvent.isSpannedEvent(event2, event2[this.parent.eventFields.startTime]);
        appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;
      }
      var appointmentElement = this.createAppointmentElement(this.actionObj.groupIndex, event2[this.parent.eventFields.subject]);
      appointmentElement.setAttribute("drag", "true");
      addClass([appointmentElement], CLONE_ELEMENT_CLASS);
      setStyleAttribute(appointmentElement, {
        "width": appWidth + "px",
        "border": "0px",
        "pointer-events": "none",
        "position": "absolute",
        "overflow": "hidden",
        "padding": "3px"
      });
      if (this.actionObj.clone.style.backgroundColor !== "") {
        setStyleAttribute(appointmentElement, { "backgroundColor": this.actionObj.clone.style.backgroundColor });
      }
      var date = resetTime(event2[this.parent.eventFields.startTime]).getTime();
      var query = "." + WORK_CELLS_CLASS + '[data-date="' + date + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        query = "." + WORK_CELLS_CLASS + '[data-date="' + date + '"][data-group-index="' + this.actionObj.groupIndex + '"]';
      }
      var cellTd = this.parent.element.querySelector(query);
      if (isNullOrUndefined(cellTd)) {
        return;
      }
      if (isResize) {
        var dateHeader = cellTd.querySelector("." + DATE_HEADER_CLASS);
        var appHeight = this.actionObj.cellHeight * event2.count - (dateHeader ? dateHeader.offsetHeight : 0) - 7;
        if (this.resizeEdges.right || this.resizeEdges.left) {
          appHeight = parseInt(this.actionObj.clone.style.height, 10);
        }
        setStyleAttribute(appointmentElement, { "height": appHeight + "px" });
      }
      this.renderDynamicElement(cellTd, appointmentElement, true);
      this.actionObj.cloneElement.push(appointmentElement);
    };
    ActionBase2.prototype.renderDynamicElement = function(cellTd, element, isAppointment) {
      if (isAppointment === void 0) {
        isAppointment = false;
      }
      if (cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS)) {
        cellTd.querySelector("." + APPOINTMENT_WRAPPER_CLASS).appendChild(element);
      } else {
        var wrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(element);
        cellTd.appendChild(wrapper);
      }
    };
    ActionBase2.prototype.createAppointmentElement = function(resIndex, innerText) {
      var appointmentWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        innerHTML: innerText
      });
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        appointmentWrapper.setAttribute("data-group-index", resIndex.toString());
      }
      return appointmentWrapper;
    };
    ActionBase2.prototype.dynamicEventsRendering = function(event2) {
      var _this = this;
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var dateRender = this.parent.activeView.renderDates;
      var workCells = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
      var workDays = this.parent.activeViewOptions.workDays;
      var groupOrder;
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var renderedResource = this.parent.virtualScrollModule && this.parent.virtualScrollModule.isHorizontalScroll ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;
        var resources = renderedResource.filter(function(res) {
          return res.groupIndex === _this.actionObj.groupIndex;
        });
        dateRender = resources[0].renderDates;
        var elementSelector = "." + WORK_CELLS_CLASS + '[data-group-index="' + this.actionObj.groupIndex + '"]';
        workCells = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
        workDays = resources[0].workDays;
        groupOrder = resources[0].groupOrder;
      }
      this.monthEvent.dateRender = dateRender;
      this.monthEvent.getSlotDates(workDays);
      if (this.resizeEdges.left || this.resizeEdges.right) {
        var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
        for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
          var wrapper = eventWrappers_1[_i];
          remove(wrapper);
        }
      }
      var spannedEvents = this.monthEvent.splitEvent(event2, dateRender);
      for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {
        var event_1 = spannedEvents_1[_a];
        var day = this.parent.getIndexOfDate(dateRender, resetTime(event_1[this.monthEvent.fields.startTime]));
        var diffInDays = event_1.data.count;
        var appWidth = diffInDays * this.actionObj.cellWidth - 7;
        var appointmentElement = this.monthEvent.createAppointmentElement(event_1, this.actionObj.groupIndex, true);
        appointmentElement.setAttribute("drag", "true");
        addClass([appointmentElement], CLONE_ELEMENT_CLASS);
        this.monthEvent.applyResourceColor(appointmentElement, event_1, "backgroundColor", groupOrder);
        setStyleAttribute(appointmentElement, { "width": appWidth + "px", "border": "0px", "pointer-events": "none" });
        var cellTd = workCells[parseInt(day.toString(), 10)];
        if (cellTd) {
          this.monthEvent.renderElement(cellTd, appointmentElement, true);
          this.actionObj.cloneElement.push(appointmentElement);
        }
      }
    };
    ActionBase2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.actionObj = {};
      this.scrollArgs = {};
      this.resizeEdges = { left: false, right: false, top: false, bottom: false };
      this.scrollEdges = { left: false, right: false, top: false, bottom: false };
    };
    return ActionBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/resize.js
var __extends50 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Resize = (
  /** @class */
  function(_super) {
    __extends50(Resize2, _super);
    function Resize2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Resize2.prototype.wireResizeEvent = function(element) {
      var resizeElement = [].slice.call(element.querySelectorAll("." + EVENT_RESIZE_CLASS));
      for (var _i = 0, resizeElement_1 = resizeElement; _i < resizeElement_1.length; _i++) {
        var element_1 = resizeElement_1[_i];
        EventHandler.add(element_1, Browser.touchStartEvent, this.resizeStart, this);
      }
    };
    Resize2.prototype.resizeHelper = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.allowGroupEdit) {
        for (var i = 0, len = this.actionObj.originalElement.length; i < len; i++) {
          var cloneElement = this.createCloneElement(this.actionObj.originalElement[parseInt(i.toString(), 10)]);
          this.actionObj.cloneElement[parseInt(i.toString(), 10)] = cloneElement;
          if (this.actionObj.element === this.actionObj.originalElement[parseInt(i.toString(), 10)]) {
            this.actionObj.clone = cloneElement;
          }
        }
      } else {
        if (this.actionObj.element) {
          this.actionObj.clone = this.createCloneElement(this.actionObj.element);
        }
        this.actionObj.cloneElement = [this.actionObj.clone];
        this.actionObj.originalElement = [this.actionObj.element];
      }
    };
    Resize2.prototype.resizeStart = function(e) {
      var _this = this;
      if (e && e.type === "touchstart" && (!this.parent.uiStateValues.isTapHold || !closest(e.target, "." + APPOINTMENT_BORDER))) {
        return;
      }
      this.actionObj.action = "resize";
      this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
      this.actionObj.interval = this.actionObj.slotInterval;
      var resizeTarget = closest(e.target, "." + EVENT_RESIZE_CLASS);
      this.actionObj.element = closest(resizeTarget, "." + APPOINTMENT_CLASS);
      this.actionObj.event = this.parent.eventBase.getEventByGuid(this.actionObj.element.getAttribute("data-guid"));
      var eventObj = extend({}, this.actionObj.event, null, true);
      var resizeArgs = {
        cancel: false,
        data: eventObj,
        element: this.actionObj.element,
        event: e,
        interval: this.actionObj.interval,
        scroll: { enable: true, scrollBy: 30, timeDelay: 100 }
      };
      this.parent.trigger(resizeStart, resizeArgs, function(resizeEventArgs) {
        if (resizeEventArgs.cancel) {
          return;
        }
        _this.actionClass("addClass");
        _this.parent.uiStateValues.action = true;
        _this.resizeEdges = {
          left: resizeTarget.classList.contains(LEFT_RESIZE_HANDLER),
          right: resizeTarget.classList.contains(RIGHT_RESIZE_HANDLER),
          top: resizeTarget.classList.contains(TOP_RESIZE_HANDLER),
          bottom: resizeTarget.classList.contains(BOTTOM_RESIZE_HANDLER)
        };
        _this.actionObj.groupIndex = _this.parent.uiStateValues.isGroupAdaptive ? _this.parent.uiStateValues.groupIndex : 0;
        var workCell = _this.parent.element.querySelector("." + WORK_CELLS_CLASS);
        _this.actionObj.cellWidth = getElementWidth(workCell);
        _this.actionObj.cellHeight = getElementHeight(workCell);
        var hRows = _this.parent.activeViewOptions.headerRows.map(function(row) {
          return row.option;
        });
        if (_this.parent.activeView.isTimelineView() && hRows.length > 0 && ["Date", "Hour"].indexOf(hRows.slice(-1)[0]) < 0) {
          var tr = _this.parent.getContentTable().querySelector("tr");
          var noOfDays = 0;
          var tdCollections = [].slice.call(tr.children);
          for (var _i = 0, tdCollections_1 = tdCollections; _i < tdCollections_1.length; _i++) {
            var td = tdCollections_1[_i];
            noOfDays += parseInt(td.getAttribute("colspan"), 10);
          }
          var trRect = tr.getBoundingClientRect();
          _this.actionObj.cellWidth = trRect.width / noOfDays;
          _this.actionObj.cellHeight = trRect.height;
        }
        var pages = _this.parent.eventBase.getPageCoordinates(e);
        _this.actionObj.X = pages.pageX;
        _this.actionObj.Y = pages.pageY;
        _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute("data-group-index") || "0", 10);
        _this.actionObj.interval = resizeEventArgs.interval;
        _this.actionObj.scroll = resizeEventArgs.scroll;
        _this.actionObj.start = new Date(eventObj[_this.parent.eventFields.startTime].getTime());
        _this.actionObj.end = new Date(eventObj[_this.parent.eventFields.endTime].getTime());
        _this.actionObj.originalElement = _this.getOriginalElement(_this.actionObj.element);
        if (_this.parent.currentView === "Month") {
          _this.daysVariation = -1;
          _this.monthEvent = new MonthEvent(_this.parent);
        }
        var viewElement = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        _this.scrollArgs = { element: viewElement, width: viewElement.scrollWidth, height: viewElement.scrollHeight };
        if (["Month", "TimelineYear"].indexOf(_this.parent.currentView) < 0) {
          var scrollWidth2 = Math.round(_this.scrollArgs.width / _this.actionObj.cellWidth) * _this.actionObj.cellWidth;
          _this.scrollArgs.width = _this.scrollArgs.width < scrollWidth2 ? scrollWidth2 : _this.scrollArgs.width;
        }
        EventHandler.add(document, Browser.touchMoveEvent, _this.resizing, _this);
        EventHandler.add(document, Browser.touchEndEvent, _this.resizeStop, _this);
      });
    };
    Resize2.prototype.resizing = function(e) {
      if (e && e.type === "touchmove") {
        e.preventDefault();
      }
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (this.parent.element.querySelectorAll("." + RESIZE_CLONE_CLASS).length === 0) {
        this.resizeHelper();
      }
      if (!isNullOrUndefined(e.target) && e.target.classList.contains(DISABLE_DATES)) {
        return;
      }
      var pages = this.parent.eventBase.getPageCoordinates(e);
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
        var doc = document.documentElement;
        var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
        var top_1 = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
        this.actionObj.pageX = pages.pageX - left;
        this.actionObj.pageY = pages.pageY - top_1;
      } else {
        this.actionObj.pageX = pages.pageX;
        this.actionObj.pageY = pages.pageY;
      }
      this.updateScrollPosition(e);
      this.updateResizingDirection(e);
      var eventObj = extend({}, this.actionObj.event, null, true);
      var resizeArgs = {
        cancel: false,
        data: eventObj,
        element: this.actionObj.element,
        event: e,
        startTime: this.actionObj.start,
        endTime: this.actionObj.end
      };
      if (this.parent.group.resources.length > 0) {
        resizeArgs.groupIndex = this.actionObj.groupIndex;
      }
      this.parent.trigger(resizing, resizeArgs);
    };
    Resize2.prototype.updateResizingDirection = function(e) {
      if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
        this.monthResizing();
        return;
      }
      var resizeValidation = this.resizeValidation(e);
      if (this.resizeEdges.left) {
        if (resizeValidation) {
          var leftStyles = this.getLeftRightStyles(e, true);
          if (parseInt(leftStyles.width, 10) < 1) {
            return;
          }
          for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {
            var cloneElement = _a[_i];
            setStyleAttribute(cloneElement, leftStyles);
            addClass([cloneElement], LEFT_RESIZE_HANDLER);
          }
        }
        this.horizontalResizing(!this.parent.enableRtl);
      }
      if (this.resizeEdges.right) {
        if (resizeValidation) {
          var rightStyles = this.getLeftRightStyles(e, false);
          if (parseInt(rightStyles.width, 10) < 1) {
            return;
          }
          for (var _b = 0, _c = this.actionObj.cloneElement; _b < _c.length; _b++) {
            var cloneElement = _c[_b];
            setStyleAttribute(cloneElement, rightStyles);
            addClass([cloneElement], RIGHT_RESIZE_HANDLER);
          }
        }
        this.horizontalResizing(this.parent.enableRtl);
      }
      if (this.resizeEdges.top) {
        if (resizeValidation) {
          var topStyles = this.getTopBottomStyles(e, true);
          if (parseInt(topStyles.height, 10) < 1) {
            return;
          }
          for (var _d = 0, _e = this.actionObj.cloneElement; _d < _e.length; _d++) {
            var cloneElement = _e[_d];
            setStyleAttribute(cloneElement, topStyles);
            addClass([cloneElement], TOP_RESIZE_HANDLER);
          }
        }
        this.verticalResizing(true);
      }
      if (this.resizeEdges.bottom) {
        if (resizeValidation) {
          var bottomStyles = this.getTopBottomStyles(e, false);
          if (parseInt(bottomStyles.height, 10) < 1) {
            return;
          }
          for (var _f = 0, _g = this.actionObj.cloneElement; _f < _g.length; _f++) {
            var cloneElement = _g[_f];
            setStyleAttribute(cloneElement, bottomStyles);
            addClass([cloneElement], BOTTOM_RESIZE_HANDLER);
          }
        }
        this.verticalResizing(false);
      }
    };
    Resize2.prototype.monthResizing = function() {
      this.removeCloneElement();
      if (isNullOrUndefined(this.actionObj.pageX) || isNullOrUndefined(this.actionObj.pageY)) {
        return;
      }
      var td = document.elementFromPoint(this.actionObj.pageX, this.actionObj.pageY);
      if (isNullOrUndefined(td)) {
        return;
      }
      var resizeTime = this.parent.getDateFromElement(td);
      var isSameCell = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(td.getAttribute("data-group-index"), 10) === this.actionObj.groupIndex : true;
      var startTime = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());
      var endTime = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());
      if (!this.parent.enableRtl && this.resizeEdges.left || this.parent.enableRtl && this.resizeEdges.right || this.resizeEdges.top) {
        startTime = resizeTime;
      } else if (!this.parent.enableRtl && this.resizeEdges.right || this.parent.enableRtl && this.resizeEdges.left || this.resizeEdges.bottom) {
        endTime = addDays(resizeTime, 1);
      }
      if (isSameCell && startTime < endTime) {
        this.actionObj.start = startTime;
        this.actionObj.end = endTime;
        var event_1 = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
        if (this.parent.currentView === "TimelineYear") {
          this.yearEventsRendering(event_1);
        } else {
          this.dynamicEventsRendering(event_1);
        }
        this.updateOriginalElement(this.actionObj.clone);
      }
    };
    Resize2.prototype.yearEventsRendering = function(event2) {
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
      for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
        var wrapper = eventWrappers_1[_i];
        remove(wrapper);
      }
      var endDate = new Date(event2[this.parent.eventFields.endTime]);
      var monthDiff = 0;
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        monthDiff = this.getMonthDiff(event2[this.parent.eventFields.startTime], addDays(endDate, -1));
      }
      for (var i = 0; i <= monthDiff; i++) {
        var eventObj = void 0;
        if (this.parent.activeViewOptions.group.resources.length === 0) {
          eventObj = this.getEventCount(event2, this.actionObj.start.getMonth() + i);
        } else {
          eventObj = extend({}, event2, null, true);
          endDate = this.resizeEdges.left || this.resizeEdges.right ? addDays(endDate, -1) : endDate;
          eventObj.count = this.getMonthDiff(event2[this.parent.eventFields.startTime], endDate) + 1;
        }
        this.dynamicYearlyEventsRendering(eventObj, true);
      }
    };
    Resize2.prototype.getMonthDiff = function(startDate, endDate) {
      var months;
      months = (endDate.getFullYear() - startDate.getFullYear()) * 12;
      months -= startDate.getMonth();
      months += endDate.getMonth();
      return months <= 0 ? 0 : months;
    };
    Resize2.prototype.getEventCount = function(eventObj, month) {
      var eventData = extend({}, eventObj, null, true);
      var eventStart = eventData[this.parent.eventFields.startTime];
      var eventEnd = eventData[this.parent.eventFields.endTime];
      var monthStart = new Date(this.parent.selectedDate.getFullYear(), month, 1);
      var monthEnd = addDays(new Date(this.parent.selectedDate.getFullYear(), month + 1, 0), 1);
      var count = 1;
      if (eventStart.getTime() < monthStart.getTime()) {
        eventData[this.parent.eventFields.startTime] = monthStart;
      }
      if (eventEnd.getTime() > monthEnd.getTime()) {
        eventData[this.parent.eventFields.endTime] = monthEnd;
      }
      if (this.parent.activeViewOptions.group.resources.length === 0) {
        count = Math.ceil((eventData[this.parent.eventFields.endTime].getTime() - eventData[this.parent.eventFields.startTime].getTime()) / MS_PER_DAY);
      }
      eventData.count = count;
      return eventData;
    };
    Resize2.prototype.resizeStop = function(e) {
      var _this = this;
      EventHandler.remove(document, Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(document, Browser.touchEndEvent, this.resizeStop);
      clearInterval(this.actionObj.scrollInterval);
      this.actionObj.scrollInterval = null;
      this.removeCloneElementClasses();
      this.removeCloneElement();
      this.actionClass("removeClass");
      this.parent.uiStateValues.action = this.parent.uiStateValues.isTapHold = false;
      var resizeArgs = { cancel: false, data: this.getChangedData(), element: this.actionObj.element, event: e };
      this.parent.trigger(resizeStop, resizeArgs, function(resizeEventArgs) {
        if (resizeEventArgs.cancel) {
          return;
        }
        if (_this.parent.isSpecificResourceEvents()) {
          _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(resizeEventArgs.element.getAttribute("data-group-index"), 10)]];
          _this.parent.crudModule.crudObj.targetEvent = _this.parent.crudModule.crudObj.sourceEvent;
          _this.parent.crudModule.crudObj.isCrudAction = true;
        }
        _this.saveChangedData(resizeEventArgs);
      });
    };
    Resize2.prototype.verticalResizing = function(isTop) {
      var offsetValue = this.actionObj.clone.offsetTop;
      if (!isTop) {
        offsetValue += this.actionObj.clone.offsetHeight;
      }
      var minutes = offsetValue / this.actionObj.cellHeight * this.actionObj.slotInterval;
      var element = this.actionObj.clone.offsetParent;
      if (isNullOrUndefined(element)) {
        return;
      }
      var resizeTime = resetTime(this.parent.getDateFromElement(element));
      resizeTime.setHours(this.parent.activeView.getStartHour().getHours());
      resizeTime.setMinutes(minutes + this.parent.activeView.getStartHour().getMinutes());
      if (isTop) {
        this.actionObj.start = this.calculateIntervalTime(resizeTime);
      } else {
        this.actionObj.end = this.calculateIntervalTime(resizeTime);
      }
      this.updateTimePosition(resizeTime);
    };
    Resize2.prototype.horizontalResizing = function(isLeft) {
      var eventStart = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());
      var eventEnd = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());
      var resizeTime;
      var isDateHeader = false;
      var headerName = this.parent.currentView;
      var isTimeViews = ["TimelineDay", "TimelineWeek", "TimelineWorkWeek"].indexOf(this.parent.currentView) > -1;
      var isTimelineMonth = this.parent.currentView === "TimelineMonth";
      var isWithoutScale = isTimelineMonth || isTimeViews && !this.parent.activeViewOptions.timeScale.enable;
      if (this.parent.activeView.isTimelineView()) {
        var tr = this.parent.getContentTable().querySelector("tr");
        if (this.parent.activeViewOptions.headerRows.length > 0) {
          var rows = this.parent.activeViewOptions.headerRows.map(function(row) {
            return row.option;
          });
          headerName = rows.slice(-1)[0];
          if (isTimelineMonth && headerName === "Hour") {
            headerName = rows.slice(-2)[0] || "Month";
          }
        }
        resizeTime = isLeft ? eventStart : eventEnd;
        var cellIndex = 0;
        var tdCollections = [].slice.call(tr.children);
        var isLastCell = false;
        var pixelsPerMinute = this.actionObj.cellWidth / (this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount);
        var offset = parseFloat(this.parent.enableRtl ? this.actionObj.clone.style.right : this.actionObj.clone.style.left);
        offset = Math.round(offset / pixelsPerMinute) * pixelsPerMinute;
        if (["Year", "Month", "Week", "Date"].indexOf(headerName) !== -1) {
          var noOfDays = 0;
          for (var _i = 0, tdCollections_2 = tdCollections; _i < tdCollections_2.length; _i++) {
            var td = tdCollections_2[_i];
            noOfDays += parseInt(td.getAttribute("colspan"), 10);
          }
          var offsetValue = this.parent.enableRtl ? parseInt(this.actionObj.clone.style.right, 10) : parseInt(this.actionObj.clone.style.left, 10);
          offsetValue = Math.round(offsetValue / this.actionObj.cellWidth) * this.actionObj.cellWidth;
          if (!isLeft) {
            offsetValue += getElementWidth(this.actionObj.clone) - this.actionObj.cellWidth;
          }
          cellIndex = !isTimelineMonth ? Math.round(offsetValue / (getElementWidth(tr) / noOfDays)) : Math.floor(offsetValue / Math.floor(getElementWidth(tr) / noOfDays));
          isDateHeader = isTimeViews && headerName === "Date";
          cellIndex = isLeft ? cellIndex : isTimelineMonth ? cellIndex + 1 : cellIndex;
          isLastCell = cellIndex === tdCollections.length;
          cellIndex = cellIndex < 0 ? 0 : cellIndex >= noOfDays ? noOfDays - 1 : cellIndex;
        } else {
          var cellWidth = this.actionObj.cellWidth;
          cellIndex = isLeft ? Math.floor(offset / this.actionObj.cellWidth) : Math.ceil((offset + (getElementWidth(this.actionObj.clone) - cellWidth)) / this.actionObj.cellWidth);
          if (this.parent.enableRtl) {
            var cellOffsetWidth = 0;
            if (headerName === "TimelineMonth" || !this.parent.activeViewOptions.timeScale.enable && !isTimelineMonth) {
              cellOffsetWidth = this.actionObj.cellWidth;
            }
            var offsetWidth = Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth + (isLeft ? 0 : getElementWidth(this.actionObj.clone) - cellOffsetWidth);
            cellIndex = Math.floor(offsetWidth / this.actionObj.cellWidth);
          }
          isLastCell = cellIndex === tdCollections.length;
          cellIndex = this.getIndex(cellIndex);
        }
        var resizeDate = void 0;
        if (["Year", "Month", "Week", "Date"].indexOf(headerName) !== -1) {
          resizeDate = new Date(this.parent.activeView.renderDates[parseInt(cellIndex.toString(), 10)].getTime());
        } else {
          resizeDate = this.parent.getDateFromElement(tr.children[parseInt(cellIndex.toString(), 10)]);
        }
        if (["TimelineMonth", "Year", "Month", "Week", "Date"].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable) {
          resizeTime = new Date(resizeDate.setHours(resizeTime.getHours(), resizeTime.getMinutes(), resizeTime.getSeconds()));
        } else {
          if (!isLeft) {
            offset += getElementWidth(this.actionObj.clone);
          }
          var spanMinutes = Math.ceil(this.actionObj.slotInterval / this.actionObj.cellWidth * (offset - Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth));
          spanMinutes = isLastCell || !isLeft && spanMinutes === 0 ? this.actionObj.slotInterval : spanMinutes;
          resizeTime = new Date(resizeDate.getTime());
          resizeTime.setMinutes(resizeTime.getMinutes() + spanMinutes);
          this.updateTimePosition(resizeTime);
        }
      } else {
        var cloneIndex = closest(this.actionObj.clone, "td").cellIndex;
        var originalWidth = Math.ceil((isLeft ? getElementWidth(this.actionObj.element) : 0) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        var noOfDays = Math.ceil((getElementWidth(this.actionObj.clone) - originalWidth) / this.actionObj.cellWidth);
        var tr = closest(this.actionObj.clone, "tr");
        var dayIndex2 = isLeft ? cloneIndex - noOfDays : cloneIndex + noOfDays - 1;
        dayIndex2 = this.getIndex(dayIndex2);
        resizeTime = this.parent.getDateFromElement(tr.children[parseInt(dayIndex2.toString(), 10)]);
        if (isLeft) {
          resizeTime.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());
        } else {
          resizeTime.setHours(eventEnd.getHours(), eventEnd.getMinutes(), eventEnd.getSeconds());
        }
      }
      var isNotHourSlot = ["TimelineMonth", "Year", "Month", "Week", "Date"].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable;
      if (isLeft) {
        if (eventEnd.getTime() - resizeTime.getTime() <= 0) {
          resizeTime = isWithoutScale ? resetTime(eventEnd) : eventStart;
        }
        this.actionObj.start = !isNotHourSlot ? this.calculateIntervalTime(resizeTime) : resizeTime;
      } else {
        var isTimeScaleViews = isTimeViews && this.parent.activeViewOptions.timeScale.enable;
        var resizeEnd = (!isTimeScaleViews || isDateHeader || isTimeViews && ["Week", "Month", "Year"].indexOf(headerName) > -1) && resizeTime.getHours() === 0 && resizeTime.getMinutes() === 0 ? addDays(resizeTime, 1) : resizeTime;
        if (isWithoutScale && resizeEnd.getTime() - eventStart.getTime() <= 0) {
          resizeEnd = addDays(resetTime(eventStart), 1);
        }
        this.actionObj.end = !isNotHourSlot ? this.calculateIntervalTime(resizeEnd) : resizeEnd;
      }
    };
    Resize2.prototype.getTopBottomStyles = function(e, isTop) {
      var viewElement = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var slotInterval = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;
      var clnHeight = isTop ? this.actionObj.element.offsetHeight + (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.element.offsetHeight + (this.actionObj.pageY - this.actionObj.Y);
      var clnTop = isTop ? this.actionObj.element.offsetTop - (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.clone.offsetTop;
      clnHeight = clnTop < 0 ? this.actionObj.clone.offsetHeight : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight > this.scrollArgs.height ? this.actionObj.clone.offsetHeight : clnHeight;
      clnTop = clnTop < 0 ? 0 : clnTop;
      clnTop = isTop ? Math.floor(clnTop / slotInterval) * slotInterval : clnTop;
      clnHeight = clnTop + clnHeight >= viewElement.scrollHeight ? viewElement.scrollHeight - clnTop : Math.ceil(clnHeight / slotInterval) * slotInterval;
      if (!isTop && this.actionObj.clone.offsetTop + clnHeight >= this.parent.getContentTable().offsetHeight) {
        clnHeight = this.parent.getContentTable().offsetHeight - this.actionObj.clone.offsetTop;
      }
      var styles = {
        height: formatUnit(clnHeight < this.actionObj.cellHeight ? Math.floor(clnHeight / slotInterval) * slotInterval : clnHeight),
        top: formatUnit(clnHeight < this.actionObj.cellHeight && isTop ? Math.ceil(clnTop / slotInterval) * slotInterval : clnTop),
        left: "0px",
        right: "0px",
        width: "100%"
      };
      return styles;
    };
    Resize2.prototype.getLeftRightStyles = function(e, isLeft) {
      var styles = {};
      var isTimelineView = this.parent.activeView.isTimelineView();
      var isTimeViews = ["TimelineDay", "TimelineWeek", "TimelineWorkWeek"].indexOf(this.parent.currentView) > -1 && this.parent.activeViewOptions.timeScale.enable;
      var slotInterval = this.actionObj.cellWidth / this.actionObj.slotInterval * this.actionObj.interval;
      var pageWidth = isLeft ? this.actionObj.X - this.actionObj.pageX : this.actionObj.pageX - this.actionObj.X;
      var targetWidth = isTimelineView ? getElementWidth(this.actionObj.element) / this.actionObj.cellWidth * this.actionObj.cellWidth : this.parent.currentView === "Month" ? getElementWidth(this.actionObj.element) : Math.ceil(getElementWidth(this.actionObj.element) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
      var offsetWidth = targetWidth + Math.ceil(pageWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;
      var left = this.parent.enableRtl ? parseInt(this.actionObj.element.style.right, 10) : this.actionObj.clone.offsetLeft;
      if (isTimeViews) {
        offsetWidth = targetWidth + Math.ceil(pageWidth / slotInterval) * slotInterval;
        if (!isLeft) {
          var roundedLeft = (+parseFloat(this.actionObj.element.style[this.parent.enableRtl ? "right" : "left"])).toFixed(1);
          var roundedWidth = Math.round(targetWidth / slotInterval) * slotInterval;
          if (roundedLeft !== left.toFixed(1) || roundedWidth !== targetWidth) {
            offsetWidth = Math.round((left + offsetWidth) / slotInterval) * slotInterval - left;
          }
        }
        this.actionObj.event[this.parent.eventFields.isAllDay] = false;
      }
      var width = !isLeft && offsetWidth + this.actionObj.clone.offsetLeft > this.scrollArgs.width ? getElementWidth(this.actionObj.clone) : offsetWidth < this.actionObj.cellWidth ? offsetWidth : offsetWidth;
      if (this.parent.enableRtl) {
        var rightValue = isTimelineView ? parseInt(this.actionObj.element.style.right, 10) : -(offsetWidth - this.actionObj.cellWidth);
        rightValue = isTimelineView ? rightValue : isLeft ? 0 : rightValue > 0 ? 0 : rightValue;
        if (isTimelineView && !isLeft) {
          rightValue = rightValue - Math.ceil((this.actionObj.pageX - this.actionObj.X) / slotInterval) * slotInterval;
          if (rightValue < 0) {
            rightValue = parseInt(this.actionObj.clone.style.right, 10);
            width = parseInt(this.actionObj.clone.style.width, 10);
          }
        }
        rightValue = rightValue >= this.scrollArgs.width ? this.scrollArgs.width - this.actionObj.cellWidth : rightValue;
        styles.right = formatUnit(rightValue);
        width = width + rightValue > this.scrollArgs.width ? getElementWidth(this.actionObj.clone) : width;
      } else {
        var offsetLeft = isLeft ? this.actionObj.element.offsetLeft - (this.actionObj.X - this.actionObj.pageX) : this.parent.enableRtl ? this.actionObj.element.offsetLeft : 0;
        if (isTimelineView) {
          offsetLeft = isLeft ? offsetLeft : parseInt(this.actionObj.clone.style.left, 10);
          if (this.parent.enableRtl) {
            offsetLeft = !isLeft ? this.actionObj.pageX < this.actionObj.X - getElementWidth(this.actionObj.clone) ? parseInt(this.actionObj.clone.style.right, 10) : offsetLeft : offsetLeft;
          } else {
            offsetLeft = isLeft ? this.actionObj.pageX > this.actionObj.X + getElementWidth(this.actionObj.clone) && getElementWidth(this.actionObj.clone) === this.actionObj.cellWidth ? parseInt(this.actionObj.clone.style.left, 10) : offsetLeft : offsetLeft;
          }
        }
        var leftValue = offsetLeft;
        offsetLeft = isTimelineView ? isTimeViews ? isLeft ? this.actionObj.element.offsetLeft - Math.ceil((this.actionObj.element.offsetLeft - offsetLeft) / slotInterval) * slotInterval : offsetLeft : Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth : Math.ceil(Math.abs(offsetLeft) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        if (offsetLeft < 0) {
          if (isTimelineView && isLeft && offsetLeft % slotInterval) {
            offsetLeft = parseInt(this.actionObj.clone.style.left, 10);
            width = parseInt(this.actionObj.clone.style.width, 10);
          } else {
            offsetLeft = 0;
            width = getElementWidth(this.actionObj.clone);
          }
        }
        var cloneWidth = Math.ceil(getElementWidth(this.actionObj.clone) / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        if (isLeft) {
          styles.left = formatUnit(isTimelineView ? offsetLeft : isLeft ? leftValue < 0 ? -offsetLeft : Math.ceil((targetWidth - cloneWidth) / this.actionObj.cellWidth) * this.actionObj.cellWidth : offsetLeft);
        }
      }
      styles.width = formatUnit(width);
      return styles;
    };
    Resize2.prototype.resizeValidation = function(e) {
      var pages = this.parent.eventBase.getPageCoordinates(e);
      var viewDimension = this.getContentAreaDimension();
      var isTimeScale = this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.timeScale.enable;
      var cellWidth = this.actionObj.cellWidth;
      var resizeValidation = false;
      if (this.resizeEdges.left) {
        if (pages.pageX < viewDimension.leftOffset && pages.pageX >= viewDimension.left && isTimeScale) {
          cellWidth = 0;
        }
        resizeValidation = pages.pageX - cellWidth >= viewDimension.left;
      }
      if (this.resizeEdges.right) {
        if (pages.pageX > viewDimension.rightOffset && pages.pageX <= viewDimension.right && isTimeScale) {
          cellWidth = 0;
        }
        resizeValidation = pages.pageX + cellWidth <= viewDimension.right;
      }
      if (this.resizeEdges.top) {
        resizeValidation = this.actionObj.clone.offsetTop >= viewDimension.top;
      }
      if (this.resizeEdges.bottom) {
        resizeValidation = this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight <= this.scrollArgs.height;
      }
      return resizeValidation;
    };
    Resize2.prototype.getModuleName = function() {
      return "resize";
    };
    return Resize2;
  }(ActionBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/year.js
var __extends51 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var EVENT_GAP3 = 2;
var YearEvent = (
  /** @class */
  function(_super) {
    __extends51(YearEvent2, _super);
    function YearEvent2(parent) {
      var _this = _super.call(this, parent, "day") || this;
      _this.isResource = false;
      return _this;
    }
    YearEvent2.prototype.renderAppointments = function() {
      if (this.parent.dragAndDropModule) {
        this.parent.dragAndDropModule.setDragArea();
      }
      this.fields = this.parent.eventFields;
      var elementSelector = this.parent.currentView === "Year" ? "." + APPOINTMENT_CLASS : "." + APPOINTMENT_WRAPPER_CLASS + ",." + MORE_INDICATOR_CLASS;
      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
      for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
        var wrapper = eventWrappers_1[_i];
        remove(wrapper);
      }
      this.renderedEvents = [];
      if (this.parent.currentView === "Year") {
        this.yearViewEvents();
      } else {
        this.removeCellHeight();
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          this.isResource = true;
          this.timelineResourceEvents();
        } else {
          this.timelineYearViewEvents();
        }
      }
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
    };
    YearEvent2.prototype.yearViewEvents = function() {
      var months = this.getMonths();
      for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {
        var month = months_1[_i];
        var queryString2 = ".e-month-calendar:nth-child(" + (months.indexOf(month) + 1) + ") td.e-work-cells";
        var workCells = [].slice.call(this.parent.element.querySelectorAll(queryString2));
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), month, 1);
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
        var startDate = getWeekFirstDate(monthStart, this.parent.firstDayOfWeek);
        var endDate = addDays(getWeekLastDate(monthEnd, this.parent.firstDayOfWeek), 1);
        for (var index = 0; startDate.getTime() < endDate.getTime(); index++) {
          var start = resetTime(new Date(startDate.getTime()));
          var end = addDays(new Date(start.getTime()), 1);
          startDate = addDays(new Date(startDate.getTime()), 1);
          if (!this.parent.isMinMaxDate(start)) {
            continue;
          }
          var filterEvents = this.parent.eventBase.filterEvents(start, end);
          if (filterEvents.length > 0) {
            var workCell = workCells[parseInt(index.toString(), 10)];
            if (workCell) {
              workCell.appendChild(createElement("div", { className: APPOINTMENT_CLASS }));
            }
          }
        }
      }
    };
    YearEvent2.prototype.timelineYearViewEvents = function() {
      var _this = this;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ")");
      this.cellWidth = getElementWidth(workCell);
      this.cellHeader = getOuterHeight(workCell.querySelector("." + DATE_HEADER_CLASS));
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.eventHeight = getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);
      var selector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP3, this.cellHeader, this.moreIndicatorHeight);
      var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var months = this.getMonths();
      var groupIndex = this.parent.activeViewOptions.group.resources.length > 0 && this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : void 0;
      for (var row = 0; row < months.length; row++) {
        var wrapper = wrapperCollection[parseInt(row.toString(), 10)];
        var td = row + 1;
        var eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(eventWrapper);
        var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);
        var monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);
        var dayIndex2 = monthStart.getDay();
        var isSpannedCollection = [];
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          this.renderedEvents = [];
        }
        while (monthStart.getTime() <= monthEnd.getTime()) {
          var leftValue = void 0;
          var rightValue = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            var wrapper_1 = wrapperCollection[parseInt(dayIndex2.toString(), 10)];
            td = dayIndex2 + 1;
            eventWrapper = wrapper_1.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
            if (!eventWrapper) {
              eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
              wrapper_1.appendChild(eventWrapper);
            }
            if (this.parent.enableRtl) {
              rightValue = row * this.cellWidth;
            } else {
              leftValue = row * this.cellWidth;
            }
          } else {
            if (this.parent.enableRtl) {
              rightValue = (dayIndex2 + monthStart.getDate() - 1) * this.cellWidth;
            } else {
              leftValue = (dayIndex2 + monthStart.getDate() - 1) * this.cellWidth;
            }
          }
          var rowTd = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + td + ") td");
          this.cellHeight = rowTd.offsetHeight;
          var dayStart = resetTime(new Date(monthStart.getTime()));
          var dayEnd = addDays(new Date(dayStart.getTime()), 1);
          var resource = void 0;
          if (this.parent.uiStateValues.isGroupAdaptive) {
            resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          }
          var dayEvents = this.parent.eventBase.filterEvents(dayStart, dayEnd, void 0, resource);
          dayEvents = this.parent.eventBase.sortByDateTime(dayEvents);
          var _loop_1 = function(index2, count2) {
            var eventData = extend({}, dayEvents[parseInt(index2.toString(), 10)], null, true);
            this_1.updateSpannedEvents(eventData, dayStart, dayEnd);
            var overlapIndex = this_1.getIndex(dayStart);
            eventData.Index = overlapIndex;
            var availedHeight = this_1.cellHeader + this_1.eventHeight * (overlapIndex + 1) + EVENT_GAP3 + this_1.moreIndicatorHeight;
            var appArea = this_1.cellHeight - this_1.cellHeader - this_1.moreIndicatorHeight;
            var renderedAppCount = Math.floor(appArea / (this_1.eventHeight + EVENT_GAP3));
            var eventsPerRow = this_1.parent.rowAutoHeight ? 1 : this_1.parent.activeViewOptions.maxEventsPerRow;
            var moreIndicatorCount = this_1.parent.activeViewOptions.maxEventsPerRow ? count2 - eventsPerRow : count2 - renderedAppCount <= 0 ? 1 : count2 - renderedAppCount;
            if (this_1.parent.activeViewOptions.orientation === "Horizontal") {
              var isRendered = this_1.renderedEvents.filter(function(eventObj) {
                return eventObj.Guid === eventData.Guid;
              });
              var isSpanned = isSpannedCollection.filter(function(eventObj) {
                return eventObj.Guid === eventData.Guid;
              });
              if (isRendered.length > 0 && isRendered[0].MoreIndicator || isSpanned.length > 0 && isSpanned[0].MoreIndicator) {
                var moreIndex = this_1.parent.activeViewOptions.orientation === "Horizontal" ? row : dayIndex2;
                this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);
                return "continue";
              } else if (isRendered.length > 0 || isSpanned.length > 0) {
                return "continue";
              }
            }
            var enableAppRender = this_1.maxOrIndicator || overlapIndex < eventsPerRow || this_1.cellHeight > availedHeight;
            if (this_1.parent.rowAutoHeight || enableAppRender || this_1.cellHeight > availedHeight) {
              this_1.renderEvent(eventWrapper, eventData, row, leftValue, rightValue, monthStart, dayIndex2);
              if (this_1.parent.rowAutoHeight || this_1.cellHeight > availedHeight) {
                this_1.updateCellHeight(rowTd, availedHeight);
              }
              isSpannedCollection.push(eventData);
            } else {
              var moreIndex = this_1.parent.activeViewOptions.orientation === "Horizontal" ? row : dayIndex2;
              this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);
              if (this_1.parent.activeViewOptions.orientation === "Horizontal") {
                eventData.MoreIndicator = true;
                this_1.renderedEvents.push(eventData);
                isSpannedCollection.push(eventData);
              }
            }
          };
          var this_1 = this;
          for (var index = 0, count = dayEvents.length; index < count; index++) {
            _loop_1(index, count);
          }
          monthStart = addDays(new Date(monthStart.getTime()), 1);
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            dayIndex2++;
            this.renderedEvents = [];
          }
        }
      }
      if (this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === "Vertical") {
        var appContainer = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
        var tr_1 = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_TABLE_CLASS + " tbody tr"));
        appContainer.forEach(function(ele, index2) {
          var app = [].slice.call(ele.querySelectorAll("." + APPOINTMENT_CLASS));
          var appTop = tr_1[parseInt(index2.toString(), 10)].offsetTop + _this.cellHeader + EVENT_GAP3;
          app.forEach(function(app2) {
            var overlap = parseInt(app2.getAttribute("data-index"), 10);
            app2.style.top = appTop + overlap * _this.eventHeight + "px";
            app2.removeAttribute("data-index");
          });
        });
      }
    };
    YearEvent2.prototype.updateSpannedEvents = function(eventObj, dayStart, dayEnd) {
      var isLeftRightResize = this.isResource && this.parent.activeViewOptions.orientation === "Vertical" || !this.isResource && this.parent.activeViewOptions.orientation === "Horizontal";
      var data = { isLeft: true, isRight: true, isBottom: true, isTop: true };
      if (dayStart.getTime() <= eventObj[this.fields.startTime].getTime()) {
        if (isLeftRightResize) {
          data.isLeft = false;
        } else {
          data.isTop = false;
        }
      }
      if (dayEnd.getTime() >= eventObj[this.fields.endTime].getTime() || isLeftRightResize && !this.isResource && addDays(dayEnd, -1).getMonth() === eventObj[this.fields.endTime].getMonth() || isLeftRightResize && this.isResource && dayEnd.getTime() <= eventObj[this.fields.endTime].getTime()) {
        if (isLeftRightResize) {
          data.isRight = false;
        } else {
          data.isBottom = false;
        }
      }
      eventObj.data = data;
    };
    YearEvent2.prototype.timelineResourceEvents = function() {
      var _this = this;
      var contentTable = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var isVerticalScrollbarAvail = contentTable.offsetWidth > contentTable.clientWidth;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      this.cellWidth = getElementWidth(workCell);
      this.cellHeader = 0;
      var eventTable = this.parent.element.querySelector("." + EVENT_TABLE_CLASS);
      this.eventHeight = getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);
      var selector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      this.addCellHeight(selector, this.eventHeight, EVENT_GAP3, this.cellHeader, this.moreIndicatorHeight);
      var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
      var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.activeViewOptions.allowVirtualScrolling ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;
      var months = this.getMonths();
      if (this.parent.activeViewOptions.orientation === "Horizontal") {
        for (var month = 0; month < months.length; month++) {
          var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
          for (var i = 0, len = resources.length; i < len; i++) {
            this.renderedEvents = [];
            this.renderResourceEvent(wrapperCollection[parseInt(month.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);
          }
        }
      } else {
        for (var i = 0, len = resources.length; i < len; i++) {
          this.renderedEvents = [];
          for (var month = 0; month < months.length; month++) {
            var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
            this.renderResourceEvent(wrapperCollection[parseInt(i.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);
          }
        }
      }
      if (this.parent.rowAutoHeight && !isVerticalScrollbarAvail && contentTable.offsetWidth > contentTable.clientWidth) {
        var appointments = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
        appointments.forEach(function(ele) {
          ele.style.removeProperty("left");
          ele.style.removeProperty("right");
        });
        var appContainer = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CONTAINER_CLASS));
        var conTable_1 = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
        var tr_2 = [].slice.call(conTable_1.querySelectorAll("tbody tr"));
        appContainer.forEach(function(ele, index) {
          var appWrapper = [].slice.call(ele.children);
          var row = tr_2[parseInt(index.toString(), 10)];
          appWrapper.forEach(function(appWrap, cellIndex) {
            var td = row.querySelector("td:nth-child(" + (cellIndex + 1) + ")");
            var app = [].slice.call(appWrap.children);
            var width = getElementWidth(td);
            var left = td.offsetLeft;
            if (_this.parent.enableRtl) {
              var right_1 = conTable_1.offsetWidth - left - td.offsetWidth;
              app.forEach(function(app2) {
                app2.style.width = Math.floor(parseInt(app2.style.width, 10) / width) * width + "px";
                app2.style.right = right_1 + "px";
              });
            } else {
              app.forEach(function(app2) {
                app2.style.width = Math.floor(parseInt(app2.style.width, 10) / width) * width + "px";
                app2.style.left = left + "px";
              });
            }
          });
        });
      }
    };
    YearEvent2.prototype.renderResourceEvent = function(wrapper, resource, month, index, monthStart) {
      var eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
      wrapper.appendChild(eventWrapper);
      var monthEnd = addDays(lastDateOfMonth(new Date(monthStart.getTime())), 1);
      var eventDatas = this.parent.eventBase.filterEvents(monthStart, monthEnd, void 0, resource);
      var rowIndex = this.parent.activeViewOptions.orientation === "Vertical" ? index : month;
      var td = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + (rowIndex + 1) + ") td");
      this.cellHeight = td.offsetHeight;
      this.groupOrder = resource.groupOrder;
      var isSpannedCollection = [];
      var _loop_2 = function(a2) {
        var data = eventDatas[parseInt(a2.toString(), 10)];
        var overlapIndex = void 0;
        var eventData = extend({}, data, null, true);
        if (this_2.parent.activeViewOptions.group.resources.length > 0) {
          var eventObj = this_2.isSpannedEvent(eventData, monthStart);
          overlapIndex = this_2.getIndex(eventObj[this_2.fields.startTime]);
          eventData.Index = overlapIndex;
        } else {
          overlapIndex = this_2.getIndex(eventData[this_2.fields.startTime]);
          eventData.Index = overlapIndex;
        }
        var availedHeight = this_2.cellHeader + this_2.eventHeight * (a2 + 1) + EVENT_GAP3 + this_2.moreIndicatorHeight;
        var leftValue = this_2.parent.activeViewOptions.orientation === "Vertical" ? month * this_2.cellWidth : index * this_2.cellWidth;
        if (!this_2.parent.isMinMaxDate(eventData[this_2.fields.startTime])) {
          return { value: void 0 };
        }
        if (this_2.parent.activeViewOptions.orientation === "Vertical" && this_2.parent.activeViewOptions.group.resources.length > 0) {
          var isRendered = this_2.renderedEvents.filter(function(eventObj2) {
            return eventObj2.Guid === eventData.Guid;
          });
          var isSpanned = isSpannedCollection.filter(function(eventObj2) {
            return eventObj2.Guid === eventData.Guid;
          });
          if (isRendered.length > 0 || isSpanned.length > 0) {
            return "continue";
          }
        }
        if (this_2.parent.rowAutoHeight || this_2.cellHeight > availedHeight) {
          this_2.renderEvent(eventWrapper, eventData, month, leftValue, leftValue, monthStart, index);
          this_2.updateCellHeight(td, availedHeight);
          isSpannedCollection.push(eventData);
        } else {
          var moreIndex = this_2.parent.activeViewOptions.orientation === "Horizontal" ? month : index;
          this_2.renderMoreIndicator(eventWrapper, eventDatas.length - a2, monthStart, moreIndex, leftValue, leftValue, index);
          if (this_2.parent.activeViewOptions.orientation === "Horizontal") {
            for (var i = index; i < eventDatas.length; i++) {
              this_2.renderedEvents.push(extend({}, eventDatas[parseInt(i.toString(), 10)], { Index: overlapIndex + i }, true));
            }
          }
          return "break";
        }
      };
      var this_2 = this;
      for (var a = 0; a < eventDatas.length; a++) {
        var state_1 = _loop_2(a);
        if (typeof state_1 === "object")
          return state_1.value;
        if (state_1 === "break")
          break;
      }
    };
    YearEvent2.prototype.renderEvent = function(wrapper, eventData, row, left, right, monthDate, rowIndex) {
      var _this = this;
      var eventObj = this.isSpannedEvent(eventData, monthDate);
      var wrap = this.createEventElement(eventObj);
      var width;
      var index;
      if (eventObj.isSpanned.count === 1) {
        var endTime = addDays(eventObj[this.fields.endTime], -1);
        eventObj[this.fields.endTime] = endTime > eventObj[this.fields.startTime] ? endTime : eventObj[this.fields.endTime];
      }
      if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {
        return;
      }
      if (this.parent.activeViewOptions.orientation === "Horizontal") {
        index = row + 1;
        if (eventObj[this.fields.startTime].getTime() === eventObj[this.fields.endTime].getTime()) {
          eventObj.isSpanned.count = 1;
        }
        width = eventObj.isSpanned.count * this.cellWidth;
      } else {
        index = rowIndex + 1;
        width = this.isResource ? eventObj.isSpanned.count * this.cellWidth : this.cellWidth;
      }
      var rowTd = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + index + ") td");
      var top = rowTd.offsetTop + this.cellHeader + this.eventHeight * eventObj.Index + EVENT_GAP3;
      setStyleAttribute(wrap, {
        "width": width + "px",
        "height": this.eventHeight + "px",
        "left": left + "px",
        "right": right + "px",
        "top": top + "px"
      });
      if (!this.isResource && this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === "Vertical") {
        wrap.setAttribute("data-index", eventObj.Index.toString());
      }
      var args = { data: eventObj, element: wrap, cancel: false, type: "event" };
      this.parent.trigger(eventRendered, args, function(eventArgs) {
        if (!eventArgs.cancel) {
          wrapper.appendChild(wrap);
          _this.wireAppointmentEvents(wrap, eventObj);
          if (_this.parent.activeViewOptions.group.resources.length > 0) {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          } else if (_this.parent.activeViewOptions.orientation === "Vertical") {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          } else if ((eventObj.isSpanned.isRight || eventObj.isSpanned.isLeft) && _this.parent.activeViewOptions.orientation === "Horizontal" || !eventObj.isSpanned.isRight) {
            _this.renderedEvents.push(extend({}, eventObj, null, true));
          }
        }
      });
    };
    YearEvent2.prototype.renderMoreIndicator = function(wrapper, count, startDate, row, left, right, index) {
      if (this.parent.activeViewOptions.group.resources.length === 0 && wrapper.querySelector('[data-start-date="' + startDate.getTime() + '"]')) {
        return;
      }
      var endDate;
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        endDate = addDays(lastDateOfMonth(new Date(startDate.getTime())), 1);
      } else {
        endDate = addDays(new Date(startDate.getTime()), 1);
      }
      var moreIndicator = this.getMoreIndicatorElement(count, startDate, endDate);
      var rowTr = this.parent.element.querySelector(".e-content-wrap tr:nth-child(" + (row + 1) + ")");
      var top = rowTr.offsetTop + (this.cellHeight - this.moreIndicatorHeight);
      left = Math.floor(left / this.cellWidth) * this.cellWidth;
      right = Math.floor(right / this.cellWidth) * this.cellWidth;
      setStyleAttribute(moreIndicator, { "width": this.cellWidth + "px", "left": left + "px", "right": right + "px", "top": top + "px" });
      if (!isNullOrUndefined(index)) {
        moreIndicator.setAttribute("data-group-index", index.toString());
      }
      wrapper.appendChild(moreIndicator);
      EventHandler.add(moreIndicator, "click", this.moreIndicatorClick, this);
    };
    YearEvent2.prototype.createEventElement = function(record) {
      var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var eventWrapper = createElement("div", {
        className: APPOINTMENT_CLASS,
        attrs: {
          "data-id": "Appointment_" + record[this.fields.id],
          "data-guid": record.Guid,
          "role": "button",
          "tabindex": "0",
          "aria-disabled": this.parent.eventBase.getReadonlyAttribute(record),
          "aria-label": this.parent.getAnnouncementString(record)
        }
      });
      if (this.cssClass) {
        addClass([eventWrapper], this.cssClass);
      }
      if (record[this.fields.isReadonly]) {
        addClass([eventWrapper], READ_ONLY);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        var resIndex = this.getGroupIndexFromEvent(record);
        eventWrapper.setAttribute("data-group-index", resIndex.toString());
      }
      var templateElement = [];
      var eventObj = extend({}, record, null, true);
      if (this.parent.activeViewOptions.eventTemplate) {
        var templateId = this.parent.element.id + "_" + this.parent.activeViewOptions.eventTemplateName + "eventTemplate";
        templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, "eventTemplate", templateId, false, void 0, void 0, this.parent.root);
      } else {
        var locationEle = record[this.fields.location] || this.parent.eventSettings.fields.location.default || "";
        var subjectEle = createElement("div", {
          className: SUBJECT_CLASS,
          innerHTML: eventSubject + (locationEle ? ";&nbsp" + locationEle : "")
        });
        var startTimeEle = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventObj[this.fields.startTime])
        });
        var endTimeEle = createElement("div", {
          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? " " + DISABLE_CLASS : ""),
          innerHTML: this.parent.getTimeString(eventObj[this.fields.endTime])
        });
        addClass([subjectEle], "e-text-center");
        if (record[this.fields.isAllDay]) {
          templateElement = [subjectEle];
        } else if (!eventObj.isLeft && !eventObj.isRight) {
          templateElement = [startTimeEle, subjectEle, endTimeEle];
        } else {
          if (!eventObj.isLeft) {
            templateElement.push(startTimeEle);
          }
          templateElement.push(subjectEle);
          if (!eventObj.isRight) {
            templateElement.push(endTimeEle);
          }
        }
      }
      var appointmentDetails = createElement("div", { className: APPOINTMENT_DETAILS });
      append(templateElement, appointmentDetails);
      eventWrapper.appendChild(appointmentDetails);
      this.parent.eventBase.renderSpannedIcon(eventWrapper, record.isSpanned);
      this.renderResizeHandler(eventWrapper, record.data, record[this.fields.isReadonly]);
      this.applyResourceColor(eventWrapper, eventObj, "backgroundColor", this.groupOrder);
      return eventWrapper;
    };
    YearEvent2.prototype.isSpannedEvent = function(eventObj, monthDate) {
      var monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
      var monthEnd = addDays(new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0), 1);
      var eventData = extend({}, eventObj, null, true);
      var eventStart = eventData[this.fields.startTime];
      var eventEnd = eventData[this.fields.endTime];
      var isSpanned = { isLeft: false, isRight: false, count: 1 };
      var yearStart = new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear, 1);
      var yearEnd = addMonths(yearStart, this.parent.monthsCount);
      if (this.isResource) {
        this.updateSpannedEvents(eventObj, monthStart, monthEnd);
      }
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0) {
        this.updateSpannedEventDetails(eventStart, eventEnd, yearStart, yearEnd, eventData, isSpanned);
        var originalStartTime = eventData[this.fields.startTime];
        var originalEndTime = new Date(eventData[this.fields.endTime] - 1);
        isSpanned.count = originalEndTime.getMonth() - originalStartTime.getMonth() + this.parent.monthsCount * (originalEndTime.getFullYear() - originalStartTime.getFullYear()) + 1;
      } else {
        this.updateSpannedEventDetails(eventStart, eventEnd, monthStart, monthEnd, eventData, isSpanned);
        if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {
          var end = resetTime(eventData[this.fields.endTime]).getTime();
          var start = resetTime(eventData[this.fields.startTime]).getTime();
          if (eventObj[this.fields.isAllDay] && end === eventObj[this.fields.endTime].getTime() || isSpanned.isRight) {
            end = addDays(new Date(end), -1).getTime();
          }
          isSpanned.count = Math.ceil((end - start) / MS_PER_DAY) + 1;
        }
      }
      eventData.isSpanned = isSpanned;
      if (resetTime(eventStart).getTime() < resetTime(this.parent.minDate).getTime()) {
        eventData[this.fields.startTime] = this.parent.minDate;
      }
      if (resetTime(eventEnd).getTime() > resetTime(this.parent.maxDate).getTime()) {
        eventData[this.fields.endTime] = this.parent.maxDate;
      }
      return eventData;
    };
    YearEvent2.prototype.updateSpannedEventDetails = function(eventStart, eventEnd, viewStart, viewEnd, eventObj, isSpanned) {
      if (eventStart.getTime() < viewStart.getTime()) {
        eventObj[this.fields.startTime] = viewStart;
        isSpanned.isLeft = true;
      }
      if (eventEnd.getTime() > viewEnd.getTime()) {
        eventObj[this.fields.endTime] = viewEnd;
        isSpanned.isRight = true;
      }
    };
    YearEvent2.prototype.getOverlapEvents = function(date, appointments) {
      var appointmentsList = [];
      var dateStart;
      var dateEnd;
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(date.getTime()));
        var monthEnd = addDays(this.parent.calendarUtil.getMonthEndDate(new Date(date.getTime())), -1);
        dateStart = resetTime(new Date(monthStart.getTime())).getTime();
        dateEnd = resetTime(new Date(monthEnd.getTime())).getTime();
      } else {
        if (this.parent.rowAutoHeight) {
          dateStart = resetTime(new Date(date.getTime())).getTime();
          dateEnd = addDays(resetTime(new Date(date.getTime())), 1).getTime();
        } else {
          dateStart = dateEnd = resetTime(new Date(date.getTime())).getTime();
        }
      }
      for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {
        var app = appointments_1[_i];
        var appStart = new Date(app[this.fields.startTime].getTime());
        var appEnd = new Date(app[this.fields.endTime].getTime());
        var timeCondition = app[this.fields.isAllDay] ? resetTime(appEnd).getTime() > dateStart : resetTime(appEnd).getTime() >= dateStart;
        if (resetTime(appStart).getTime() <= dateStart && timeCondition || resetTime(appStart).getTime() >= dateStart && resetTime(appEnd).getTime() <= dateEnd) {
          appointmentsList.push(app);
        } else if (this.parent.activeViewOptions.orientation === "Vertical") {
          if (resetTime(appStart).getTime() >= dateStart && resetTime(appEnd).getTime() >= dateEnd) {
            appointmentsList.push(app);
          }
        }
      }
      return appointmentsList;
    };
    YearEvent2.prototype.getMonths = function() {
      var _this = this;
      return Array.apply(null, { length: this.parent.monthsCount }).map(function(value, index) {
        return _this.parent.firstMonthOfYear + index;
      });
    };
    YearEvent2.prototype.removeCellHeight = function() {
      var elementSelector = "." + MONTH_HEADER_WRAPPER + " tbody tr,." + RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + CONTENT_TABLE_CLASS + " tbody tr";
      var rows = [].slice.call(this.element.querySelectorAll(elementSelector));
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        row.firstElementChild.style.height = "";
      }
    };
    YearEvent2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.parent = null;
    };
    return YearEvent2;
  }(TimelineEvent)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/actions/drag.js
var __extends52 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MINUTES_PER_DAY = 1440;
var DragAndDrop = (
  /** @class */
  function(_super) {
    __extends52(DragAndDrop2, _super);
    function DragAndDrop2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.widthUptoCursorPoint = 0;
      _this.heightUptoCursorPoint = 0;
      _this.cursorPointIndex = 0;
      _this.isHeaderRows = false;
      _this.isTimelineDayProcess = false;
      _this.widthPerMinute = 0;
      _this.heightPerMinute = 0;
      _this.minDiff = 0;
      _this.isStepDragging = false;
      _this.isMorePopupOpened = false;
      _this.isAllDayDrag = false;
      _this.isMultiSelect = false;
      _this.multiData = [];
      _this.updatedData = [];
      _this.swagData = [];
      _this.startTime = 0;
      _this.isAllDayTarget = false;
      _this.targetTd = null;
      _this.isCursorAhead = false;
      return _this;
    }
    DragAndDrop2.prototype.wireDragEvent = function(element) {
      new Draggable(element, {
        abort: "." + EVENT_RESIZE_CLASS,
        clone: true,
        isDragScroll: true,
        enableTailMode: this.parent.eventDragArea ? true : false,
        cursorAt: this.parent.eventDragArea ? { left: -20, top: -20 } : { left: 0, top: 0 },
        dragArea: this.dragArea,
        dragStart: this.dragStart.bind(this),
        drag: this.drag.bind(this),
        dragStop: this.dragStop.bind(this),
        enableAutoScroll: false,
        helper: this.dragHelper.bind(this),
        queryPositionInfo: this.dragPosition.bind(this)
      });
    };
    DragAndDrop2.prototype.setDragArea = function() {
      var dragElement = document.querySelector(this.parent.eventDragArea);
      this.dragArea = this.parent.eventDragArea && dragElement ? dragElement : this.parent.element.querySelector("." + CONTENT_TABLE_CLASS);
    };
    DragAndDrop2.prototype.dragHelper = function(e) {
      var _this = this;
      if (e.sender && e.sender.type === "touchmove" && (!this.parent.uiStateValues.isTapHold || !e.element.classList.contains(APPOINTMENT_BORDER))) {
        return null;
      }
      this.setDragActionDefaultValues();
      this.actionObj.element = e.element;
      this.actionObj.action = "drag";
      var elements = [];
      if (!this.parent.allowMultiDrag || isNullOrUndefined(this.parent.selectedElements) || this.parent.selectedElements.length === 0 || this.parent.selectedElements.length > 0 && this.parent.selectedElements.indexOf(this.actionObj.element) === -1) {
        elements = [e.element];
      } else {
        elements = this.parent.selectedElements;
        this.isMultiSelect = true;
      }
      elements.forEach(function(ele) {
        var cloneElement = _this.createCloneElement(ele);
        if (ele.getAttribute("data-guid") === _this.actionObj.element.getAttribute("data-guid")) {
          _this.actionObj.clone = cloneElement;
          if (!_this.parent.eventDragArea && _this.parent.currentView !== "Month" && _this.parent.activeViewOptions.timeScale.enable && !_this.parent.activeView.isTimelineView() && !_this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
            setStyleAttribute(_this.actionObj.clone, { cursor: "move", left: "0%", right: "0%", width: "100%" });
          }
          _this.actionObj.clone.style.top = formatUnit(_this.actionObj.element.offsetTop);
        }
        _this.actionObj.cloneElement.push(cloneElement);
        _this.actionObj.originalElement.push(ele);
      });
      return this.actionObj.clone;
    };
    DragAndDrop2.prototype.dragPosition = function(e) {
      if (this.parent.eventDragArea) {
        return { left: e.left, top: e.top };
      }
      var cellHeight = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;
      var leftValue = formatUnit(0);
      if (this.parent.currentView === "Month") {
        leftValue = e.left;
      }
      var cloneRight;
      if (this.isStepDragging) {
        cloneRight = Math.ceil(this.actionObj.clone.getBoundingClientRect().right) + this.actionObj.interval;
      } else {
        cloneRight = this.actionObj.clone.getBoundingClientRect().right;
      }
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var contentWrapRight = dragArea.getBoundingClientRect().right;
      if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear" && !this.parent.enableRtl && this.actionObj.pageX > cloneRight && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight)) {
        this.isCursorAhead = true;
      }
      if (this.parent.activeView.isTimelineView()) {
        leftValue = formatUnit(this.actionObj.clone.offsetLeft);
      }
      var topValue;
      if (this.parent.activeView.isTimelineView() || !this.parent.timeScale.enable || !isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
        topValue = formatUnit(this.actionObj.clone.offsetTop);
      } else if (this.parent.currentView === "Month") {
        topValue = formatUnit(0);
      } else if (this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
        topValue = formatUnit(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop);
        setStyleAttribute(this.actionObj.clone, {
          width: formatUnit(Math.ceil(this.actionObj.clone.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth),
          right: this.parent.enableRtl && formatUnit(0)
        });
      } else {
        if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && !this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          setStyleAttribute(this.actionObj.clone, {
            height: formatUnit(this.actionObj.cellHeight),
            width: formatUnit(this.actionObj.cellWidth - 1),
            pointerEvents: "none"
          });
        }
        var top_1 = parseInt(e.top, 10);
        top_1 = top_1 < 0 ? 0 : top_1;
        topValue = formatUnit(Math.ceil(top_1 / cellHeight) * cellHeight);
        var scrollHeight = this.parent.element.querySelector(".e-content-wrap").scrollHeight;
        var cloneBottom = parseInt(topValue, 10) + this.actionObj.clone.offsetHeight;
        if (cloneBottom > scrollHeight) {
          topValue = parseInt(topValue, 10) - (cloneBottom - scrollHeight) + "px";
        }
      }
      return { left: leftValue, top: topValue };
    };
    DragAndDrop2.prototype.setDragActionDefaultValues = function() {
      this.actionObj.action = "drag";
      this.actionObj.isAllDay = null;
      this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
      this.actionObj.interval = this.actionObj.slotInterval;
      var workCell = this.parent.element.querySelector("." + WORK_CELLS_CLASS);
      this.actionObj.cellWidth = workCell.offsetWidth;
      this.actionObj.cellHeight = workCell.offsetHeight;
    };
    DragAndDrop2.prototype.dragStart = function(e) {
      var _this = this;
      var eventGuid = this.actionObj.element.getAttribute("data-guid");
      this.actionObj.event = this.parent.eventBase.getEventByGuid(eventGuid);
      var eventObj = extend({}, this.actionObj.event, null, true);
      if (!isNullOrUndefined(eventObj)) {
        this.startTime = eventObj[this.parent.eventFields.startTime].getTime();
      }
      var dragArgs = {
        cancel: false,
        data: eventObj,
        selectedData: this.getSelectedData(),
        event: e,
        excludeSelectors: null,
        element: this.actionObj.element,
        interval: this.actionObj.interval,
        navigation: { enable: false, timeDelay: 2e3 },
        scroll: { enable: true, scrollBy: 30, timeDelay: 100 }
      };
      this.parent.trigger(dragStart, dragArgs, function(dragEventArgs) {
        if (dragEventArgs.cancel || !isNullOrUndefined(_this.actionObj.element) && isNullOrUndefined(_this.actionObj.element.parentElement)) {
          var dragObj = _this.actionObj.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          _this.actionObj.action = "";
          _this.removeCloneElementClasses();
          _this.removeCloneElement();
          return;
        }
        _this.actionClass("addClass");
        _this.parent.uiStateValues.action = true;
        _this.actionObj.start = eventObj[_this.parent.eventFields.startTime];
        _this.actionObj.end = eventObj[_this.parent.eventFields.endTime];
        _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute("data-group-index") || "0", 10);
        _this.actionObj.interval = dragEventArgs.interval;
        _this.actionObj.navigation = dragEventArgs.navigation;
        _this.actionObj.scroll = dragEventArgs.scroll;
        _this.actionObj.excludeSelectors = dragEventArgs.excludeSelectors;
        var viewElement = _this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        _this.scrollArgs = { element: viewElement, width: viewElement.scrollWidth, height: viewElement.scrollHeight };
        _this.widthPerMinute = _this.actionObj.cellWidth / _this.actionObj.slotInterval * _this.actionObj.interval;
        _this.heightPerMinute = _this.actionObj.cellHeight / _this.actionObj.slotInterval * _this.actionObj.interval;
        _this.widthUptoCursorPoint = 0;
        _this.heightUptoCursorPoint = 0;
        _this.cursorPointIndex = -1;
        _this.isHeaderRows = false;
        _this.isTimelineDayProcess = false;
        _this.minDiff = 0;
        _this.isMorePopupOpened = false;
        _this.daysVariation = -1;
        _this.isAllDayTarget = _this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);
        if ((_this.parent.activeView.isTimelineView() || !_this.parent.timeScale.enable) && _this.parent.currentView !== "TimelineYear") {
          if (!isNullOrUndefined(_this.actionObj.clone.offsetParent) && _this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
            _this.isMorePopupOpened = true;
          }
          _this.actionObj.pageX = e.event.pageX;
          var rows = _this.parent.activeViewOptions.headerRows;
          _this.isHeaderRows = rows.length > 0 && rows[rows.length - 1].option !== "Hour" && rows[rows.length - 1].option !== "Date";
          _this.isTimelineDayProcess = !_this.parent.activeViewOptions.timeScale.enable || _this.isHeaderRows || _this.parent.currentView === "TimelineMonth" || rows.length > 0 && rows[rows.length - 1].option === "Date";
          _this.isStepDragging = !_this.isTimelineDayProcess && _this.actionObj.slotInterval !== _this.actionObj.interval;
          if (_this.isTimelineDayProcess) {
            _this.timelineEventModule = new TimelineEvent(_this.parent, "day");
          } else {
            _this.timelineEventModule = new TimelineEvent(_this.parent, "hour");
          }
        }
        if (_this.parent.currentView === "TimelineYear") {
          _this.yearEvent = new YearEvent(_this.parent);
        }
        if (_this.parent.currentView === "Month") {
          _this.startTime = resetTime(new Date(_this.startTime)).getTime();
          _this.updateOriginalElement(_this.actionObj.clone);
          _this.monthEvent = new MonthEvent(_this.parent);
        }
        if (_this.parent.currentView === "Day" || _this.parent.currentView === "Week" || _this.parent.currentView === "WorkWeek") {
          _this.verticalEvent = new VerticalEvent(_this.parent);
          _this.verticalEvent.initializeValues();
          var splitEvents = _this.splitEvent(_this.actionObj.event);
          splitEvents.forEach(function(event2) {
            var query = '.e-day-wrapper[data-date="' + resetTime(event2[_this.parent.eventFields.startTime]).getTime() + '"]';
            if (_this.parent.activeViewOptions.group.resources.length > 0) {
              query = query.concat('[data-group-index = "' + _this.actionObj.groupIndex + '"]');
            }
            var appWrap = _this.parent.element.querySelector(query);
            if (appWrap) {
              var appEle = appWrap.querySelector('[data-id="' + _this.actionObj.clone.getAttribute("data-id") + '"]');
              if (appEle) {
                addClass([appEle], EVENT_ACTION_CLASS);
              }
            }
          });
        }
      });
    };
    DragAndDrop2.prototype.getSelectedData = function() {
      if (this.isMultiSelect && this.multiData.length === 0 && this.parent.selectedElements.length > 0) {
        for (var _i = 0, _a = this.parent.selectedElements; _i < _a.length; _i++) {
          var element = _a[_i];
          var eventGuid = element.getAttribute("data-guid");
          var data = this.parent.eventBase.getEventByGuid(eventGuid);
          this.multiData.push(extend({}, data, null, true));
        }
      }
      return this.multiData;
    };
    DragAndDrop2.prototype.drag = function(e) {
      if (e.event && e.event.type === "touchmove") {
        e.event.preventDefault();
      }
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide(true);
      }
      if (!isNullOrUndefined(e.target) && e.target.classList && e.target.classList.contains(DISABLE_DATES)) {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventArgs = this.parent.eventBase.getPageCoordinates(e);
      this.actionObj.Y = this.actionObj.pageY = eventArgs.pageY;
      this.actionObj.X = this.actionObj.pageX = eventArgs.pageX;
      this.actionObj.target = e.target;
      this.widthUptoCursorPoint = this.widthUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().left - this.actionObj.X) / this.widthPerMinute) * this.widthPerMinute : this.widthUptoCursorPoint;
      this.widthUptoCursorPoint = this.isMorePopupOpened ? this.actionObj.cellWidth : this.widthUptoCursorPoint;
      this.heightUptoCursorPoint = this.heightUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().top - this.actionObj.Y) / this.heightPerMinute) * this.heightPerMinute : this.heightUptoCursorPoint;
      this.isAllDayDrag = this.parent.activeViewOptions.timeScale.enable ? this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) : this.actionObj.event[this.parent.eventFields.isAllDay];
      if (this.isStepDragging && this.minDiff === 0) {
        this.calculateMinutesDiff(eventObj);
      }
      if ((this.parent.currentView === "Month" || this.isAllDayDrag) && this.daysVariation < 0) {
        var date = this.parent.getDateFromElement(this.actionObj.target);
        if (!isNullOrUndefined(date)) {
          var currentDate = resetTime(date);
          var startDate = resetTime(new Date(eventObj[this.parent.eventFields.startTime].getTime()));
          this.daysVariation = (currentDate.getTime() - startDate.getTime()) / MS_PER_DAY;
        } else {
          this.daysVariation = 0;
        }
      } else {
        this.daysVariation = 0;
      }
      if (this.parent.eventDragArea) {
        var targetElement = eventArgs.target;
        this.actionObj.clone.style.top = formatUnit(targetElement.offsetTop);
        this.actionObj.clone.style.left = formatUnit(targetElement.offsetLeft);
        var currentTarget = closest(targetElement, "." + ROOT8);
        if (!currentTarget) {
          this.actionObj.clone.style.height = "";
          this.actionObj.clone.style.width = "";
        } else {
          if (!(this.parent.currentView === "Week" || this.parent.currentView === "WorkWeek" || this.parent.currentView === "Day")) {
            this.actionObj.clone.style.width = formatUnit(this.actionObj.element.offsetWidth);
          }
        }
      }
      this.updateScrollPosition(e);
      this.updateNavigatingPosition(e);
      this.updateDraggingDateTime(e);
      var dragArgs = {
        data: eventObj,
        event: e,
        element: this.actionObj.element,
        startTime: this.actionObj.start,
        endTime: this.actionObj.end,
        selectedData: this.updatedData
      };
      if (this.parent.group.resources.length > 0) {
        dragArgs.groupIndex = this.actionObj.groupIndex;
      }
      this.parent.trigger(drag, dragArgs);
    };
    DragAndDrop2.prototype.calculateMinutesDiff = function(eventObj) {
      if (this.parent.enableRtl) {
        this.minDiff = (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint) / this.widthPerMinute * this.actionObj.interval;
      } else {
        this.minDiff = this.widthUptoCursorPoint / this.widthPerMinute * this.actionObj.interval;
      }
      var startDate = eventObj[this.parent.eventFields.startTime];
      var startTime = this.parent.activeView.renderDates[0];
      var startEndHours = getStartEndHours(startTime, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());
      if (startEndHours.startHour.getTime() > startDate.getTime()) {
        this.minDiff = this.minDiff + (startEndHours.startHour.getTime() - startDate.getTime()) / MS_PER_MINUTE;
      }
    };
    DragAndDrop2.prototype.dragStop = function(e) {
      var _this = this;
      this.isCursorAhead = false;
      this.removeCloneElementClasses();
      this.removeCloneElement();
      clearInterval(this.actionObj.navigationInterval);
      this.actionObj.navigationInterval = null;
      clearInterval(this.actionObj.scrollInterval);
      this.actionObj.scrollInterval = null;
      this.actionClass("removeClass");
      this.parent.uiStateValues.action = this.parent.uiStateValues.isTapHold = false;
      if (this.isAllowDrop(e)) {
        return;
      }
      var target = e.target.classList && (!e.target.classList.contains("e-work-cells") && this.parent.cellTemplate) ? closest(e.target, ".e-work-cells") : e.target;
      var dragArgs = {
        cancel: false,
        data: this.getChangedData(this.updatedData),
        selectedData: this.updatedData,
        event: e,
        element: this.actionObj.element,
        target
      };
      this.actionObj.action = null;
      this.parent.trigger(dragStop, dragArgs, function(dragEventArgs) {
        if (dragEventArgs.cancel) {
          return;
        }
        if (_this.parent.isSpecificResourceEvents()) {
          _this.parent.crudModule.crudObj.isCrudAction = true;
          _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(dragArgs.element.getAttribute("data-group-index"), 10)]];
          var currentGroupIndex = parseInt(dragArgs.target.getAttribute("data-group-index"), 10) || _this.actionObj.groupIndex;
          _this.parent.crudModule.crudObj.targetEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(currentGroupIndex.toString(), 10)]];
        }
        _this.saveChangedData(dragEventArgs, _this.isMultiSelect);
      });
      this.updatedData = [];
      this.multiData = [];
      this.isMultiSelect = false;
      this.parent.selectedElements = [];
    };
    DragAndDrop2.prototype.updateNavigatingPosition = function(e) {
      var _this = this;
      if (this.actionObj.navigation.enable) {
        var currentDate_1 = this.parent.getCurrentTime();
        if (isNullOrUndefined(this.actionObj.navigationInterval)) {
          this.actionObj.navigationInterval = window.setInterval(function() {
            if (currentDate_1) {
              var crtDate = _this.parent.getCurrentTime();
              var end = crtDate.getSeconds();
              var start = currentDate_1.getSeconds() + _this.actionObj.navigation.timeDelay / 1e3;
              start = start >= 60 ? start - 60 : start;
              if (start === end) {
                currentDate_1 = _this.parent.getCurrentTime();
                _this.viewNavigation(e);
                _this.updateDraggingDateTime(e);
              }
            }
          }, this.actionObj.navigation.timeDelay);
        }
      }
    };
    DragAndDrop2.prototype.updateDraggingDateTime = function(e) {
      if (!isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {
        this.morePopupEventDragging(e);
      } else if (this.parent.activeView.isTimelineView() && this.parent.currentView !== "TimelineYear") {
        this.timelineEventModule.dateRender = this.parent.activeView.renderDates;
        this.timelineEventModule.cellWidth = this.actionObj.cellWidth;
        this.timelineEventModule.getSlotDates();
        this.actionObj.cellWidth = this.isHeaderRows ? this.timelineEventModule.cellWidth : getElementWidth(this.parent.element.querySelector("." + WORK_CELLS_CLASS));
        this.calculateTimelineTime(e);
      } else {
        if (this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear") {
          this.calculateVerticalDate(e);
        } else {
          this.calculateVerticalTime(e);
        }
      }
    };
    DragAndDrop2.prototype.navigationWrapper = function() {
      if (!this.parent.activeView.isTimelineView()) {
        if (this.parent.currentView === "Month" || !this.parent.timeScale.enable) {
          var outerWrapperCls = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
          this.actionObj.index = this.parent.activeView.renderDates.length < this.actionObj.index ? this.parent.activeView.renderDates.length - 1 : this.actionObj.index;
          var targetWrapper = outerWrapperCls[this.actionObj.index].querySelector("." + APPOINTMENT_WRAPPER_CLASS);
          if (!targetWrapper) {
            targetWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
            outerWrapperCls[this.actionObj.index].appendChild(targetWrapper);
          }
          targetWrapper.appendChild(this.actionObj.clone);
        } else {
          var wrapperClass = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) ? "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS : "." + APPOINTMENT_WRAPPER_CLASS;
          this.parent.element.querySelectorAll(wrapperClass).item(this.actionObj.index).appendChild(this.actionObj.clone);
          if (wrapperClass === "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS) {
            var elementHeight = this.getAllDayEventHeight();
            var event_2 = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS + ":first-child"));
            if (event_2[0].offsetHeight < elementHeight) {
              for (var _i = 0, event_1 = event_2; _i < event_1.length; _i++) {
                var e = event_1[_i];
                e.style.height = (elementHeight + 2) / 12 + "em";
              }
            }
            this.actionObj.clone.style.height = formatUnit(elementHeight);
          }
          this.actionObj.height = parseInt(this.actionObj.clone.style.height, 10);
        }
      } else {
        var outWrapper = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          outWrapper = this.parent.element.querySelectorAll(".e-appointment-container:not(.e-hidden)").item(this.actionObj.index);
        } else {
          outWrapper = this.parent.element.querySelector("." + APPOINTMENT_CONTAINER_CLASS);
        }
        if (!isNullOrUndefined(outWrapper)) {
          var tarWrapper_1 = outWrapper.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
          if (!tarWrapper_1) {
            tarWrapper_1 = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
            outWrapper.appendChild(tarWrapper_1);
          }
          this.actionObj.cloneElement.forEach(function(ele) {
            tarWrapper_1.appendChild(ele);
          });
        }
      }
    };
    DragAndDrop2.prototype.viewNavigation = function(e) {
      var navigationType;
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (dragArea && (!this.scrollEdges.top && !this.scrollEdges.bottom || closest(this.actionObj.clone, "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS))) {
        if (dragArea.scrollLeft === 0 && Math.round(this.actionObj.X) <= Math.round(dragArea.getBoundingClientRect().left + this.actionObj.cellWidth + window.pageXOffset)) {
          navigationType = this.parent.enableRtl ? "next" : "previous";
        } else if (Math.round(dragArea.scrollLeft) + dragArea.clientWidth === dragArea.scrollWidth && Math.round(this.actionObj.X) >= Math.round(dragArea.getBoundingClientRect().right - this.actionObj.cellWidth + window.pageXOffset)) {
          navigationType = this.parent.enableRtl ? "previous" : "next";
        }
        if (navigationType) {
          this.parent.changeDate(this.parent.activeView.getNextPreviousDate(navigationType));
        }
      }
    };
    DragAndDrop2.prototype.morePopupEventDragging = function(e) {
      if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, "td"))) {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      var td = closest(e.target, "td");
      if (this.parent.currentView === "TimelineYear" && (!td.classList.contains(WORK_CELLS_CLASS) || td.classList.contains(OTHERMONTH_CLASS))) {
        return;
      }
      var dragStart2 = this.parent.getDateFromElement(td);
      var dragEnd = new Date(dragStart2.getTime());
      dragEnd.setMilliseconds(eventDuration);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
      }
      this.actionObj.start = new Date(dragStart2.getTime());
      this.actionObj.end = new Date(dragEnd.getTime());
      this.actionObj.clone.style.top = formatUnit(td.offsetParent.offsetTop);
      this.actionObj.clone.style.left = formatUnit(td.offsetLeft);
      this.actionObj.clone.style.width = formatUnit(td.offsetWidth);
      var eventContainer = td;
      var eventWrapper;
      if (this.parent.activeView.isTimelineView()) {
        var rowIndex = closest(td, "tr").rowIndex;
        eventContainer = this.parent.element.querySelectorAll(".e-appointment-container").item(rowIndex);
      }
      eventWrapper = eventContainer.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (!eventWrapper) {
        eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        eventContainer.appendChild(eventWrapper);
      }
      this.appendCloneElement(eventWrapper);
    };
    DragAndDrop2.prototype.calculateVerticalTime = function(e) {
      var _this = this;
      if (isNullOrUndefined(this.actionObj.target) || this.actionObj.target && isNullOrUndefined(closest(this.actionObj.target, "tr")) || !isNullOrUndefined(closest(this.actionObj.target, "td")) && !closest(this.actionObj.target, "td").classList.contains(WORK_CELLS_CLASS) && !closest(this.actionObj.target, "td").classList.contains(ALLDAY_CELLS_CLASS)) {
        return;
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        this.swapDragging(e);
      }
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventStart = eventObj[this.parent.eventFields.startTime];
      var eventEnd = eventObj[this.parent.eventFields.endTime];
      var eventDuration = getUniversalTime(eventEnd) - getUniversalTime(eventStart);
      var offsetTop = Math.floor(parseInt(this.actionObj.clone.style.top, 10) / this.actionObj.cellHeight) * this.actionObj.cellHeight;
      offsetTop = offsetTop < 0 ? 0 : offsetTop;
      if (this.scrollEdges.top || this.scrollEdges.bottom) {
        offsetTop = this.scrollEdges.top ? dragArea.scrollTop - this.heightUptoCursorPoint + this.actionObj.cellHeight + window.pageYOffset : dragArea.scrollTop + dragArea.offsetHeight - this.actionObj.clone.offsetHeight + window.pageYOffset + (this.actionObj.clone.offsetHeight - this.heightUptoCursorPoint);
        offsetTop = Math.round(offsetTop / this.actionObj.cellHeight) * this.actionObj.cellHeight;
        if (dragArea.scrollTop > 0) {
          this.actionObj.clone.style.top = formatUnit(offsetTop);
        }
      }
      var rowIndex = this.parent.activeViewOptions.timeScale.enable ? offsetTop / this.actionObj.cellHeight : 0;
      var heightPerMinute = this.actionObj.cellHeight / this.actionObj.slotInterval;
      var diffInMinutes = parseInt(this.actionObj.clone.style.top, 10) - offsetTop;
      var tr;
      if (this.isAllDayDrag) {
        tr = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS);
      } else {
        var trCollections = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
        tr = trCollections[parseInt(rowIndex.toString(), 10)];
      }
      var index;
      if (!isNullOrUndefined(closest(this.actionObj.target, "td")) && (closest(this.actionObj.target, "td").classList.contains(WORK_CELLS_CLASS) || closest(this.actionObj.target, "td").classList.contains(ALLDAY_CELLS_CLASS))) {
        index = closest(this.actionObj.target, "td").cellIndex;
      }
      var colIndex = isNullOrUndefined(index) ? closest(this.actionObj.clone, "td").cellIndex : index;
      this.actionObj.index = colIndex;
      if (isNullOrUndefined(tr)) {
        return;
      }
      var td = tr.children[parseInt(colIndex.toString(), 10)];
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
      }
      var dragStart2;
      var dragEnd;
      if (this.parent.activeViewOptions.timeScale.enable && !this.isAllDayDrag) {
        this.appendCloneElement(this.getEventWrapper(colIndex));
        dragStart2 = this.parent.getDateFromElement(td);
        dragStart2.setMinutes(dragStart2.getMinutes() + diffInMinutes / heightPerMinute);
        dragEnd = new Date(dragStart2.getTime());
        if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          dragEnd.setMinutes(dragEnd.getMinutes() + this.actionObj.slotInterval);
        } else {
          dragEnd.setMilliseconds(eventDuration);
        }
      } else {
        dragStart2 = this.parent.getDateFromElement(td);
        dragStart2.setDate(dragStart2.getDate() - this.daysVariation);
        dragStart2.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());
        dragEnd = new Date(dragStart2.getTime());
        dragEnd.setMilliseconds(eventDuration);
        if (!this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {
          dragEnd = addDays(resetTime(dragEnd), 1);
        }
        var index_1 = this.parent.activeViewOptions.group.byDate || this.parent.virtualScrollModule && !this.parent.activeViewOptions.timeScale.enable ? colIndex : void 0;
        this.updateAllDayEvents(dragStart2, dragEnd, index_1);
      }
      this.actionObj.start = /* @__PURE__ */ new Date(+dragStart2);
      this.actionObj.end = /* @__PURE__ */ new Date(+dragEnd);
      var event2 = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
      var dynamicWrappers = [].slice.call(this.parent.element.querySelectorAll(".e-dynamic-clone"));
      for (var _i = 0, dynamicWrappers_1 = dynamicWrappers; _i < dynamicWrappers_1.length; _i++) {
        var wrapper = dynamicWrappers_1[_i];
        remove(wrapper);
      }
      if (this.multiData.length > 0) {
        if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && !this.actionObj.isAllDay) {
          var targetCellTime_1 = parseInt(closest(this.actionObj.target, "td").getAttribute("data-date"), 10);
          this.multiData.forEach(function(data) {
            _this.swagData.push(extend({}, data, null, true));
            if (data[_this.parent.eventFields.isAllDay]) {
              data[_this.parent.eventFields.startTime] = new Date(data[_this.parent.eventFields.startTime].getTime() + (targetCellTime_1 - _this.startTime));
              var startTime = new Date(data[_this.parent.eventFields.startTime]);
              var endTime = new Date(startTime.setMinutes(startTime.getMinutes() + _this.actionObj.slotInterval));
              data[_this.parent.eventFields.endTime] = endTime;
              data[_this.parent.eventFields.isAllDay] = false;
            }
          });
          this.startTime = targetCellTime_1;
        }
        if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && this.actionObj.isAllDay && this.swagData.length > 0) {
          this.multiData = this.swagData;
          this.swagData = [];
          var eventObj_1 = extend({}, this.actionObj.event, null, true);
          this.startTime = eventObj_1[this.parent.eventFields.startTime].getTime();
        }
        var startTimeDiff = event2[this.parent.eventFields.startTime].getTime() - this.startTime;
        for (var index_2 = 0; index_2 < this.multiData.length; index_2++) {
          this.updatedData[parseInt(index_2.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(index_2.toString(), 10)], startTimeDiff);
          var dayIndex2 = this.getDayIndex(this.updatedData[parseInt(index_2.toString(), 10)]);
          if (dayIndex2 >= 0) {
            var wrapper = this.getEventWrapper(dayIndex2, this.updatedData[parseInt(index_2.toString(), 10)][this.parent.eventFields.isAllDay]);
            this.appendCloneElement(wrapper, this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);
            this.updateEventHeight(this.updatedData[parseInt(index_2.toString(), 10)], index_2, dayIndex2);
          } else {
            if (!isNullOrUndefined(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)].parentNode)) {
              remove(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);
            }
          }
        }
      } else {
        this.updateEventHeight(event2);
      }
      this.updateTimePosition(this.actionObj.start, this.updatedData);
    };
    DragAndDrop2.prototype.splitEvent = function(event2) {
      var eventFields = this.parent.eventFields;
      var eventData = [];
      var startTime = event2[eventFields.startTime];
      var endTime = event2[eventFields.endTime];
      if (resetTime(new Date(startTime.getTime())) < resetTime(new Date(endTime.getTime()))) {
        var startReferenceDate = resetTime(new Date(startTime.getTime()));
        var endReferenceDate = new Date(startReferenceDate.getTime());
        for (var i = 0; startReferenceDate < new Date(endTime.getTime()); i++) {
          endReferenceDate = new Date(endReferenceDate.setDate(startReferenceDate.getDate() + 1));
          var eventObj = extend({}, event2, null, true);
          eventObj[eventFields.startTime] = new Date(startReferenceDate);
          eventObj[eventFields.endTime] = new Date(endReferenceDate);
          startReferenceDate = new Date(startReferenceDate.setDate(startReferenceDate.getDate() + 1));
          eventData.push(eventObj);
        }
        var index = eventData.length - 1;
        eventData[0][eventFields.startTime] = startTime;
        eventData[parseInt(index.toString(), 10)][eventFields.endTime] = endTime;
      } else {
        eventData.push(event2);
      }
      return eventData;
    };
    DragAndDrop2.prototype.updateMultipleData = function(data, timeDifference) {
      var eventObj = extend({}, data, null, true);
      if (!isNullOrUndefined(this.actionObj.isAllDay) && this.parent.activeViewOptions.timeScale.enable && (this.isAllDayTarget && eventObj[this.parent.eventFields.isAllDay] || !this.isAllDayTarget && !eventObj[this.parent.eventFields.isAllDay])) {
        eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;
      }
      var endTimeDiff = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      if (eventObj[this.parent.eventFields.isAllDay]) {
        var differInDays = Math.ceil(timeDifference / (1e3 * 3600 * 24));
        var day = Math.ceil(endTimeDiff / (1e3 * 3600 * 24));
        var startTime = new Date(eventObj[this.parent.eventFields.startTime]);
        eventObj[this.parent.eventFields.startTime] = resetTime(new Date(startTime.setDate(startTime.getDate() + differInDays)));
        eventObj[this.parent.eventFields.endTime] = addDays(eventObj[this.parent.eventFields.startTime], day);
      } else {
        eventObj[this.parent.eventFields.startTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + timeDifference);
        eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + endTimeDiff);
      }
      return eventObj;
    };
    DragAndDrop2.prototype.getDayIndex = function(event2) {
      var eventObj = extend({}, event2, null, true);
      var startDate = resetTime(eventObj[this.parent.eventFields.startTime]);
      if (this.parent.activeViewOptions.timeScale.enable && !eventObj[this.parent.eventFields.isAllDay]) {
        var startHour = this.parent.activeView.getStartHour();
        startDate.setMilliseconds(startHour.getTime() - resetTime(startHour).getTime());
      }
      var startTime = startDate.getTime();
      var query = "";
      var wrapper = DAY_WRAPPER_CLASS;
      if (this.parent.activeViewOptions.timeScale.enable && eventObj[this.parent.eventFields.isAllDay]) {
        wrapper = ALLDAY_APPOINTMENT_WRAPPER_CLASS;
      } else {
        wrapper = WORK_CELLS_CLASS;
      }
      query = "." + wrapper + '[data-date="' + startTime + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        query = query + '[data-group-index="' + this.actionObj.groupIndex + '"]';
      }
      this.targetTd = this.parent.element.querySelector(query);
      if (isNullOrUndefined(this.targetTd)) {
        return -1;
      }
      return this.targetTd.cellIndex;
    };
    DragAndDrop2.prototype.updateEventHeight = function(event2, index, colIndex) {
      this.verticalEvent.initializeValues();
      var datesCount = this.verticalEvent.getStartCount();
      if (!this.parent.uiStateValues.isGroupAdaptive) {
        for (var i = 0; i < this.actionObj.groupIndex; i++) {
          if (this.verticalEvent.dateRender[parseInt(i.toString(), 10)]) {
            datesCount = datesCount + this.verticalEvent.dateRender[parseInt(i.toString(), 10)].length;
          }
        }
      }
      var indexGroup = this.parent.uiStateValues.isGroupAdaptive ? datesCount : this.actionObj.groupIndex;
      var target = this.parent.activeViewOptions.group.byDate && !isNullOrUndefined(this.parent.getDateFromElement(this.actionObj.target)) ? true : false;
      if (target || !this.parent.activeViewOptions.group.byDate) {
        var dynamicIndex = -1;
        var dayIndex2 = !this.parent.activeViewOptions.group.byDate ? isNullOrUndefined(index) ? this.actionObj.index - datesCount : colIndex - datesCount : this.parent.getIndexOfDate(this.verticalEvent.dateRender[parseInt(indexGroup.toString(), 10)], resetTime(
          // eslint-disable-next-line max-len
          this.parent.getDateFromElement(isNullOrUndefined(index) ? this.actionObj.target : this.targetTd)
        ));
        var splitEvents = this.splitEvent(event2);
        var events_1 = this.parent.eventBase.isAllDayAppointment(event2) || splitEvents.length > 2 || this.parent.eventSettings.spannedEventPlacement !== "TimeSlot" ? [event2] : splitEvents;
        for (var i = 0; i < events_1.length; i++) {
          if (i > 0) {
            var filterQuery = '.e-day-wrapper[data-date="' + resetTime(events_1[parseInt(i.toString(), 10)][this.parent.eventFields.startTime]).getTime() + '"]';
            if (this.parent.activeViewOptions.group.resources.length > 0) {
              filterQuery = filterQuery.concat('[data-group-index = "' + this.actionObj.groupIndex + '"]');
            }
            var appWrap = this.parent.element.querySelector(filterQuery);
            if (appWrap) {
              dayIndex2 = dayIndex2 + 1;
              dynamicIndex = appWrap.cellIndex;
            } else {
              dayIndex2 = -1;
            }
          }
          if (dayIndex2 >= 0) {
            var record = this.verticalEvent.isSpannedEvent(events_1[parseInt(i.toString(), 10)], dayIndex2, indexGroup);
            var eStart = record[this.verticalEvent.fields.startTime];
            var eEnd = record[this.verticalEvent.fields.endTime];
            var appHeight = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getHeight(eStart, eEnd) : this.actionObj.element.offsetHeight;
            var topValue = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getTopValue(eStart, dayIndex2, indexGroup) : this.actionObj.element.offsetTop;
            if (isNullOrUndefined(index)) {
              if (i === 0) {
                this.actionObj.clone.style.top = formatUnit(topValue);
                this.actionObj.clone.style.height = formatUnit(appHeight);
              } else {
                this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);
              }
            } else {
              var appWidth = this.actionObj.cellWidth;
              if (event2[this.parent.eventFields.isAllDay]) {
                topValue = this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop;
                appHeight = this.getAllDayEventHeight();
                var timeDiff = event2[this.parent.eventFields.endTime].getTime() - event2[this.parent.eventFields.startTime].getTime();
                var allDayDifference = Math.ceil(timeDiff / (1e3 * 3600 * 24));
                if (allDayDifference >= 0) {
                  appWidth = allDayDifference * this.actionObj.cellWidth;
                }
              }
              if (this.actionObj.cloneElement[parseInt(index.toString(), 10)]) {
                if (i === 0) {
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.top = formatUnit(topValue);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.height = formatUnit(appHeight);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.width = formatUnit(appWidth);
                  this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.left = formatUnit(0);
                } else {
                  this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);
                }
              }
            }
          }
        }
      }
    };
    DragAndDrop2.prototype.renderSpannedEvents = function(record, index, top, height) {
      var startTime = record[this.parent.eventFields.startTime].getTime();
      var endTime = record[this.parent.eventFields.endTime].getTime();
      if (startTime !== endTime) {
        var appointmentElement = this.verticalEvent.createAppointmentElement(record, false, record.isSpanned, this.actionObj.groupIndex);
        addClass([appointmentElement], [CLONE_ELEMENT_CLASS, "e-dynamic-clone"]);
        setStyleAttribute(appointmentElement, {
          "width": "100%",
          "height": height + "px",
          "top": top + "px",
          "border": "0px"
        });
        var appointmentWrap = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_WRAPPER_CLASS));
        appointmentWrap[parseInt(index.toString(), 10)].appendChild(appointmentElement);
      }
    };
    DragAndDrop2.prototype.getRenderedDates = function() {
      var _this = this;
      var _a, _b;
      var renderDates = this.parent.activeView.renderDates;
      (_a = this.parent.eventBase.slots).push.apply(_a, this.parent.activeView.renderDates.map(function(date) {
        return +date;
      }));
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.eventBase.slots = [];
        var resources = this.parent.resourceBase.lastResourceLevel.filter(function(res) {
          return res.groupIndex === _this.actionObj.groupIndex;
        });
        renderDates = resources[0].renderDates;
        (_b = this.parent.eventBase.slots).push.apply(_b, renderDates.map(function(date) {
          return +date;
        }));
      }
      return renderDates;
    };
    DragAndDrop2.prototype.updateAllDayEvents = function(startDate, endDate, colIndex) {
      this.parent.eventBase.slots = [];
      var event2 = this.getUpdatedEvent(startDate, endDate, this.actionObj.event);
      var renderDates = this.getRenderedDates();
      var events = this.parent.eventBase.splitEvent(event2, renderDates);
      var query = '.e-all-day-cells[data-date="' + events[0][this.parent.eventFields.startTime].getTime() + '"]';
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        query = query.concat('[data-group-index = "' + this.actionObj.groupIndex + '"]');
      }
      var cell = [].slice.call(this.parent.element.querySelectorAll(query));
      if (cell.length > 0 || !isNullOrUndefined(colIndex)) {
        var cellIndex = !isNullOrUndefined(colIndex) ? colIndex : cell[0].cellIndex;
        this.appendCloneElement(this.getEventWrapper(cellIndex));
        this.actionObj.clone.style.width = formatUnit(events[0].data.count * this.actionObj.cellWidth);
      }
    };
    DragAndDrop2.prototype.swapDragging = function(e) {
      var colIndex = !isNullOrUndefined(closest(this.actionObj.target, "td")) && closest(this.actionObj.target, "td").cellIndex;
      if (closest(this.actionObj.target, "." + DATE_HEADER_WRAP_CLASS) && !closest(this.actionObj.clone, "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS)) {
        addClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);
        this.appendCloneElement(this.getEventWrapper(colIndex));
        this.actionObj.isAllDay = true;
        var eventHeight = this.getAllDayEventHeight();
        var allDayElement = [].slice.call(this.parent.element.querySelectorAll("." + ALLDAY_CELLS_CLASS + ":first-child"));
        if (allDayElement[0].offsetHeight < eventHeight) {
          for (var _i = 0, allDayElement_1 = allDayElement; _i < allDayElement_1.length; _i++) {
            var element = allDayElement_1[_i];
            element.style.height = (eventHeight + 2) / 12 + "em";
          }
        }
        setStyleAttribute(this.actionObj.clone, {
          width: formatUnit(this.actionObj.cellWidth),
          height: formatUnit(eventHeight),
          top: formatUnit(this.parent.element.querySelector("." + ALLDAY_ROW_CLASS).offsetTop)
        });
      }
      if (closest(this.actionObj.target, "." + WORK_CELLS_CLASS) && !closest(this.actionObj.clone, "." + DAY_WRAPPER_CLASS)) {
        removeClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);
        this.appendCloneElement(this.getEventWrapper(colIndex));
        this.actionObj.isAllDay = false;
        var height = this.actionObj.element.offsetHeight === 0 ? this.actionObj.height : this.actionObj.element.offsetHeight;
        setStyleAttribute(this.actionObj.clone, {
          left: formatUnit(0),
          height: formatUnit(height),
          width: formatUnit(this.actionObj.cellWidth)
        });
      }
    };
    DragAndDrop2.prototype.calculateVerticalDate = function(e) {
      if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, "tr")) || e.target && e.target.tagName === "DIV") {
        return;
      }
      var eventObj = extend({}, this.actionObj.event, null, true);
      if (isNullOrUndefined(this.parent.eventDragArea)) {
        this.removeCloneElement();
      }
      var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);
      var td = closest(this.actionObj.target, "td");
      if (!isNullOrUndefined(td)) {
        var tr = td.parentElement;
        this.actionObj.index = tr.rowIndex * tr.children.length + td.cellIndex;
        var workCells = [].slice.call(this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS));
        td = workCells[this.actionObj.index];
        var currentDate = this.parent.getDateFromElement(td);
        if (!isNullOrUndefined(currentDate)) {
          if (this.parent.activeViewOptions.group.resources.length > 0) {
            this.actionObj.groupIndex = parseInt(td.getAttribute("data-group-index"), 10);
          }
          var timeString = new Date(currentDate.setDate(currentDate.getDate() - this.daysVariation));
          var dragStart2 = new Date(timeString.getTime());
          var startTimeDiff = getUniversalTime(eventObj[this.parent.eventFields.startTime]) - getUniversalTime(resetTime(/* @__PURE__ */ new Date(+eventObj[this.parent.eventFields.startTime])));
          dragStart2.setMilliseconds(startTimeDiff);
          var dragEnd = new Date(dragStart2.getTime());
          dragEnd.setMilliseconds(eventDuration);
          this.actionObj.start = new Date(dragStart2.getTime());
          this.actionObj.end = new Date(dragEnd.getTime());
        }
      }
      var event2 = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
      if (isNullOrUndefined(this.parent.eventDragArea)) {
        var eventWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CLONE_ELEMENT_CLASS));
        for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
          var wrapper = eventWrappers_1[_i];
          remove(wrapper);
        }
      }
      if (this.multiData && this.multiData.length > 0) {
        var startTime = resetTime(new Date(event2[this.parent.eventFields.startTime]));
        var startTimeDiff = startTime.getTime() - this.startTime;
        if (this.parent.currentView === "TimelineYear" && this.parent.group.resources.length > 0) {
          startTimeDiff = (startTime.getFullYear() - new Date(this.startTime).getFullYear()) * 12;
          startTimeDiff -= new Date(this.startTime).getMonth();
          startTimeDiff += startTime.getMonth();
        }
        for (var index = 0; index < this.multiData.length; index++) {
          this.updatedData[parseInt(index.toString(), 10)] = this.updateMultipleVerticalDate(this.multiData[parseInt(index.toString(), 10)], startTimeDiff);
          if (this.parent.currentView === "TimelineYear") {
            this.dynamicYearlyEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);
          } else {
            this.dynamicEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);
          }
        }
      } else {
        if (this.parent.currentView === "TimelineYear") {
          this.dynamicYearlyEventsRendering(event2);
        } else {
          this.dynamicEventsRendering(event2);
        }
      }
    };
    DragAndDrop2.prototype.updateMultipleVerticalDate = function(data, timeDifference) {
      var eventObj = extend({}, data, null, true);
      var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();
      var startDate = new Date(eventObj[this.parent.eventFields.startTime]);
      if (this.parent.currentView === "TimelineYear" && this.parent.group.resources.length > 0) {
        eventObj[this.parent.eventFields.startTime] = new Date(startDate.setMonth(startDate.getMonth() + timeDifference));
      } else {
        var differInDays = Math.ceil(timeDifference / MS_PER_DAY);
        eventObj[this.parent.eventFields.startTime] = new Date(startDate.setDate(startDate.getDate() + differInDays));
      }
      eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + eventDuration);
      return eventObj;
    };
    DragAndDrop2.prototype.calculateTimelineTime = function(e) {
      var eventObj = extend({}, this.actionObj.event, null, true);
      var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);
      var offsetLeft = this.parent.enableRtl ? Math.abs(this.actionObj.clone.offsetLeft) - this.actionObj.clone.offsetWidth : parseInt(this.actionObj.clone.style.left, 10);
      offsetLeft = Math.floor(offsetLeft / Math.trunc(this.actionObj.cellWidth)) * this.actionObj.cellWidth;
      var rightOffset;
      if (this.parent.enableRtl) {
        rightOffset = Math.abs(parseInt(this.actionObj.clone.style.right, 10));
        this.actionObj.clone.style.right = formatUnit(rightOffset);
      }
      offsetLeft = this.getOffsetValue(offsetLeft, rightOffset);
      var colIndex = this.getColumnIndex(offsetLeft);
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var contentWrapRight = dragArea.getBoundingClientRect().right;
      var cursorDrag = this.parent.activeView.isTimelineView() && !this.parent.enableRtl && this.actionObj.pageX > this.actionObj.clone.getBoundingClientRect().right && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight);
      var leftVal = this.parent.eventDragArea ? dragArea.scrollLeft - dragArea.offsetLeft : 0;
      if ((this.isCursorAhead || cursorDrag) && !this.isStepDragging) {
        this.isCursorAhead = true;
      }
      var cloneIndex = Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().left + leftVal) / this.actionObj.cellWidth);
      if (this.parent.enableRtl) {
        cloneIndex = Math.abs(Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().right) / this.actionObj.cellWidth)) - 1;
      }
      if (this.cursorPointIndex < 0) {
        this.cursorIndex(e, eventObj, offsetLeft, cloneIndex);
      }
      var tr = this.parent.getContentTable().querySelector("tr");
      var index = this.getCursorCurrentIndex(colIndex, cloneIndex, tr);
      index = index < 0 ? 0 : index;
      var eventStart = this.isHeaderRows ? new Date(this.timelineEventModule.dateRender[parseInt(index.toString(), 10)].getTime()) : this.parent.getDateFromElement(tr.children[parseInt(index.toString(), 10)]);
      if (this.isStepDragging) {
        var widthDiff = this.getWidthDiff(tr, index);
        if (widthDiff !== 0) {
          var timeDiff = Math.ceil(widthDiff / this.widthPerMinute);
          eventStart.setMinutes(eventStart.getMinutes() + timeDiff * this.actionObj.interval);
          if (this.isCursorAhead || cursorDrag) {
            eventStart.setMilliseconds(-eventDuration);
          } else {
            eventStart.setMinutes(eventStart.getMinutes() - this.minDiff);
            var intervalInMS = this.actionObj.interval * MS_PER_MINUTE;
            timeDiff = Math.abs(eventStart.getTime() - this.actionObj.start.getTime()) / intervalInMS;
            var roundTimeDiff = Math.trunc(timeDiff);
            if (roundTimeDiff !== timeDiff) {
              timeDiff = roundTimeDiff * intervalInMS * (eventStart > this.actionObj.start ? 1 : -1);
              eventStart = new Date(this.actionObj.start.getTime() + timeDiff);
            }
          }
        } else {
          eventStart = this.actionObj.start;
        }
      } else {
        if (this.isCursorAhead || cursorDrag) {
          var minutes = this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval;
          eventStart.setMinutes(eventStart.getMinutes() + minutes);
          eventStart.setMilliseconds(-eventDuration);
          if (eventStart.getTime() === resetTime(eventStart).getTime() && eventStart.getMinutes() === 0 && eventDuration === 0) {
            eventStart.setMinutes(-minutes);
          }
        } else {
          eventStart.setMinutes(eventStart.getMinutes() - this.cursorPointIndex * (this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval));
        }
      }
      if (!this.isStepDragging) {
        eventStart = this.calculateIntervalTime(eventStart);
      }
      if (this.isTimelineDayProcess) {
        var eventSrt = eventObj[this.parent.eventFields.startTime];
        eventStart.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds());
      }
      if (this.parent.eventDragArea) {
        var targetDate = this.parent.getDateFromElement(e.target);
        if (!isNullOrUndefined(targetDate)) {
          if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === "TimelineMonth") {
            var eventSrt = eventObj[this.parent.eventFields.startTime];
            eventStart = new Date(targetDate.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds()));
          } else {
            eventStart = targetDate;
          }
        }
      }
      var eventEnd = new Date(eventStart.getTime());
      eventEnd.setMilliseconds(eventDuration);
      var eventsData = [this.getUpdatedEvent(eventStart, eventEnd, this.actionObj.event)];
      if (this.multiData.length > 0) {
        var startTimeDiff = eventsData[0][this.parent.eventFields.startTime].getTime() - this.startTime;
        for (var i = 0; i < this.multiData.length; i++) {
          this.updatedData[parseInt(i.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(i.toString(), 10)], startTimeDiff);
        }
        eventsData = this.updatedData;
      }
      for (var dataIndex = 0; dataIndex < eventsData.length; dataIndex++) {
        var cloneElement = this.multiData.length > 0 ? this.actionObj.cloneElement[parseInt(dataIndex.toString(), 10)] : this.actionObj.clone;
        if (isNullOrUndefined(this.parent.eventDragArea)) {
          var events_2 = this.timelineEventModule.splitEvent(eventsData[parseInt(dataIndex.toString(), 10)], this.timelineEventModule.dateRender);
          var eventData = events_2[0].data;
          var startTime = this.timelineEventModule.getStartTime(events_2[0], eventData);
          var endTime = this.timelineEventModule.getEndTime(events_2[0], eventData);
          var width = this.timelineEventModule.getEventWidth(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], eventData.count);
          var day = this.parent.getIndexOfDate(this.timelineEventModule.dateRender, resetTime(new Date(startTime.getTime())));
          day = day < 0 ? 0 : day;
          var left = this.timelineEventModule.getPosition(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], day);
          if (this.parent.enableRtl) {
            cloneElement.style.right = formatUnit(left);
          } else {
            cloneElement.style.left = formatUnit(left);
          }
          if (!this.isMorePopupOpened) {
            cloneElement.style.width = formatUnit(width);
          }
        }
        if (this.parent.activeViewOptions.group.resources.length > 0) {
          this.calculateResourceGroupingPosition(e, cloneElement);
        }
        this.actionObj.start = new Date(eventStart.getTime());
        this.actionObj.end = new Date(eventEnd.getTime());
        this.updateTimePosition(this.actionObj.start, this.updatedData);
      }
    };
    DragAndDrop2.prototype.getOffsetValue = function(offsetLeft, rightOffset) {
      if (this.scrollEdges.left || this.scrollEdges.right) {
        var viewEle = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (this.parent.enableRtl) {
          rightOffset = viewEle.offsetWidth - viewEle.scrollLeft;
          if (this.scrollEdges.right) {
            rightOffset = rightOffset - viewEle.offsetWidth + this.actionObj.clone.offsetWidth - (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
          } else {
            rightOffset = rightOffset + this.widthUptoCursorPoint;
            if (rightOffset - this.widthUptoCursorPoint >= viewEle.scrollWidth) {
              this.actionObj.clone.style.width = formatUnit(this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint + this.actionObj.cellWidth);
              rightOffset = viewEle.scrollLeft - viewEle.scrollWidth;
            }
          }
          if (isNullOrUndefined(this.parent.eventDragArea)) {
            this.actionObj.clone.style.left = formatUnit(rightOffset);
          }
        } else {
          if (this.scrollEdges.left) {
            offsetLeft = viewEle.scrollLeft - this.widthUptoCursorPoint + this.actionObj.cellWidth;
            if (viewEle.scrollLeft + viewEle.offsetWidth >= viewEle.offsetWidth) {
              viewEle.scrollLeft = viewEle.scrollLeft - 1;
            } else if (this.actionObj.clone.offsetLeft === 0) {
              offsetLeft = viewEle.scrollLeft;
            }
          } else {
            offsetLeft = viewEle.scrollLeft + viewEle.offsetWidth - this.actionObj.clone.offsetWidth + (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
          }
          offsetLeft = offsetLeft < 0 ? 0 : offsetLeft;
          if (isNullOrUndefined(this.parent.eventDragArea)) {
            this.actionObj.clone.style.left = formatUnit(offsetLeft);
          }
        }
      }
      return offsetLeft;
    };
    DragAndDrop2.prototype.getWidthDiff = function(tr, index) {
      var pages = this.scrollArgs.element.getBoundingClientRect();
      if (pages.left <= this.actionObj.pageX && pages.right >= this.actionObj.pageX) {
        var targetLeft = tr.children[parseInt(index.toString(), 10)].offsetLeft;
        var pageX = this.actionObj.pageX - pages.left;
        if (this.parent.enableRtl) {
          return targetLeft + this.actionObj.cellWidth - (this.scrollArgs.element.scrollLeft + pageX);
        } else {
          return this.scrollArgs.element.scrollLeft + pageX - targetLeft;
        }
      }
      return 0;
    };
    DragAndDrop2.prototype.getColumnIndex = function(offsetLeft) {
      var index = Math.floor(offsetLeft / Math.trunc(this.actionObj.cellWidth));
      if (this.isHeaderRows) {
        return index;
      }
      return this.getIndex(index);
    };
    DragAndDrop2.prototype.getCursorCurrentIndex = function(colIndex, cloneIndex, tr) {
      var index = colIndex + cloneIndex;
      if (this.isHeaderRows) {
        var dateLength = Math.floor(tr.offsetWidth / this.actionObj.cellWidth);
        return index > dateLength - 1 ? dateLength - 1 : index;
      }
      return index > tr.children.length - 1 ? tr.children.length - 1 : index;
    };
    DragAndDrop2.prototype.cursorIndex = function(e, event2, left, index) {
      var td = closest(e.target, ".e-work-cells");
      if (!isNullOrUndefined(td) && !this.isMorePopupOpened) {
        var targetDate = this.parent.getDateFromElement(td);
        if (this.isHeaderRows) {
          var currentIndex = Math.floor(left / this.actionObj.cellWidth);
          targetDate = new Date(this.timelineEventModule.dateRender[currentIndex + index].getTime());
        }
        var timeDiff = targetDate.getTime() - event2[this.parent.eventFields.startTime].getTime();
        if (this.isTimelineDayProcess) {
          this.cursorPointIndex = Math.abs(Math.ceil(timeDiff / MS_PER_DAY));
        } else {
          var widthDiff = Math.floor(timeDiff / MS_PER_MINUTE / (this.actionObj.slotInterval / this.actionObj.cellWidth));
          this.cursorPointIndex = Math.floor(widthDiff / this.actionObj.cellWidth);
          this.cursorPointIndex = this.cursorPointIndex < 0 ? 0 : this.cursorPointIndex;
        }
      } else {
        this.cursorPointIndex = 0;
      }
    };
    DragAndDrop2.prototype.calculateResourceGroupingPosition = function(e, cloneElement) {
      var dragArea = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS);
      var trCollection = [].slice.call(this.parent.element.querySelectorAll(".e-content-wrap .e-content-table tr:not(.e-hidden)"));
      var translateY = getTranslateY(dragArea.querySelector("table"));
      translateY = isNullOrUndefined(translateY) ? 0 : translateY;
      var rowHeight = this.parent.rowAutoHeight ? ~~(dragArea.querySelector("table").offsetHeight / trCollection.length) : this.actionObj.cellHeight;
      var rowIndex = Math.floor(Math.floor(this.actionObj.Y + (dragArea.scrollTop - translateY - (window.scrollY || window.pageYOffset)) - getElementTop(dragArea)) / rowHeight);
      rowIndex = rowIndex < 0 ? 0 : rowIndex > trCollection.length - 1 ? trCollection.length - 1 : rowIndex;
      this.actionObj.index = rowIndex;
      var eventContainer = this.parent.element.querySelectorAll(".e-appointment-container:not(.e-hidden)").item(rowIndex);
      var eventWrapper = eventContainer.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
      if (!eventWrapper) {
        eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
        eventContainer.appendChild(eventWrapper);
      }
      this.appendCloneElement(eventWrapper, cloneElement);
      var td = closest(this.actionObj.target, "td");
      this.actionObj.groupIndex = td && !isNaN(parseInt(td.getAttribute("data-group-index"), 10)) ? parseInt(td.getAttribute("data-group-index"), 10) : this.actionObj.groupIndex;
      if (!isNullOrUndefined(this.parent.eventDragArea)) {
        return;
      }
      var top = getElementHeight(trCollection[parseInt(rowIndex.toString(), 10)]) * rowIndex;
      if (this.parent.rowAutoHeight) {
        var cursorElement = this.getCursorElement(e);
        if (cursorElement) {
          top = cursorElement.classList.contains(WORK_CELLS_CLASS) ? cursorElement.offsetTop : cursorElement.offsetParent && cursorElement.offsetParent.classList.contains(APPOINTMENT_CLASS) ? cursorElement.offsetParent.offsetTop : top;
        }
      }
      cloneElement.style.top = formatUnit(top);
    };
    DragAndDrop2.prototype.appendCloneElement = function(element, cloneElement) {
      if (cloneElement === void 0) {
        cloneElement = null;
      }
      cloneElement = isNullOrUndefined(cloneElement) ? this.actionObj.clone : cloneElement;
      var dragElement = document.querySelector(this.parent.eventDragArea);
      if (this.parent.eventDragArea && dragElement) {
        dragElement.appendChild(cloneElement);
      } else {
        element.appendChild(cloneElement);
      }
    };
    DragAndDrop2.prototype.getEventWrapper = function(index, isAllDayDrag) {
      var eventWrapper;
      if (isNullOrUndefined(isAllDayDrag)) {
        isAllDayDrag = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        var wrapperClass = isAllDayDrag ? "." + ALLDAY_APPOINTMENT_WRAPPER_CLASS : "." + APPOINTMENT_WRAPPER_CLASS;
        eventWrapper = this.parent.element.querySelectorAll(wrapperClass).item(index);
      } else {
        var targetWrapper = this.parent.element.querySelectorAll("." + WORK_CELLS_CLASS).item(index);
        eventWrapper = targetWrapper.querySelector("." + APPOINTMENT_WRAPPER_CLASS);
        if (!eventWrapper) {
          eventWrapper = createElement("div", { className: APPOINTMENT_WRAPPER_CLASS });
          targetWrapper.appendChild(eventWrapper);
        }
      }
      return eventWrapper;
    };
    DragAndDrop2.prototype.getAllDayEventHeight = function() {
      var eventWrapper = createElement("div", { className: APPOINTMENT_CLASS });
      this.parent.element.querySelector("." + ALLDAY_APPOINTMENT_WRAPPER_CLASS).appendChild(eventWrapper);
      var eventHeight = eventWrapper.offsetHeight;
      remove(eventWrapper);
      return eventHeight;
    };
    DragAndDrop2.prototype.isAllowDrop = function(e) {
      if (!this.actionObj.excludeSelectors) {
        return false;
      }
      var dropSelectors = this.actionObj.excludeSelectors.split(",");
      var isAllowDrop = false;
      for (var _i = 0, dropSelectors_1 = dropSelectors; _i < dropSelectors_1.length; _i++) {
        var selector = dropSelectors_1[_i];
        if (e.target.classList.contains(selector)) {
          isAllowDrop = true;
          break;
        }
      }
      return isAllowDrop;
    };
    DragAndDrop2.prototype.getModuleName = function() {
      return "dragAndDrop";
    };
    return DragAndDrop2;
  }(ActionBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/view-base.js
var ViewBase = (
  /** @class */
  function() {
    function ViewBase2(parent) {
      this.previousNextAction = "next";
      this.parent = parent;
    }
    ViewBase2.prototype.isTimelineView = function() {
      return this.parent.currentView.indexOf("Timeline") !== -1;
    };
    ViewBase2.prototype.getContentRows = function() {
      return [];
    };
    ViewBase2.prototype.refreshHeader = function() {
    };
    ViewBase2.prototype.refreshResourceHeader = function() {
      var resTbl = this.element.querySelector("." + RESOURCE_COLUMN_TABLE_CLASS);
      var resourceTd = Array.from(resTbl.querySelectorAll("." + RESOURCE_CELLS_CLASS));
      resourceTd.forEach(function(currentElement) {
        var children = Array.from(currentElement.children);
        children.forEach(function(child) {
          if (!child.classList.contains(RESOURCE_EXPAND_CLASS) && !child.classList.contains(RESOURCE_COLLAPSE_CLASS)) {
            remove(child);
          }
        });
      });
      var rendereData = this.parent.resourceBase.renderedResources;
      if (!isNullOrUndefined(rendereData) && rendereData.length > 0) {
        for (var i = 0; i < resourceTd.length; i++) {
          var element = resourceTd[parseInt(i.toString(), 10)];
          var data = rendereData[parseInt(i.toString(), 10)];
          if (this.parent.activeView && !isNullOrUndefined(element) && !isNullOrUndefined(data) && parseInt(element.getAttribute("data-group-index"), 10) === data.groupIndex) {
            this.parent.activeView.setResourceHeaderContent(element, data, RESOURCE_TEXT_CLASS);
          }
        }
      }
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
    };
    ViewBase2.prototype.getDayName = function(date) {
      return this.parent.getDayNames("abbreviated")[date.getDay()];
    };
    ViewBase2.prototype.getDate = function(date) {
      return this.parent.globalize.formatDate(date, { format: "d", calendar: this.parent.getCalendarMode() });
    };
    ViewBase2.prototype.getTime = function(date) {
      if (this.parent.isAdaptive) {
        if (this.parent.activeViewOptions.timeFormat === "HH:mm" || this.parent.activeViewOptions.timeFormat === "HH.mm") {
          return this.parent.globalize.formatDate(date, { format: "H", calendar: this.parent.getCalendarMode() });
        }
        return this.parent.globalize.formatDate(date, { skeleton: "h", calendar: this.parent.getCalendarMode() });
      }
      return this.parent.getTimeString(date);
    };
    ViewBase2.prototype.getTimelineDate = function(date) {
      var text = this.parent.globalize.formatDate(date, { skeleton: "MMMd", calendar: this.parent.getCalendarMode() }) + ", " + this.parent.getDayNames("wide")[date.getDay()];
      return capitalizeFirstWord(text, "multiple");
    };
    ViewBase2.prototype.createEventTable = function(trCount) {
      var eventTable = createElement("div", { className: EVENT_TABLE_CLASS });
      append(this.getEventRows(trCount), eventTable);
      return eventTable;
    };
    ViewBase2.prototype.getEventRows = function(trCount) {
      var eventRows = [];
      var eventContainer;
      for (var row = 0; row < trCount; row++) {
        eventContainer = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
        if (this.parent.resourceBase && !this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.renderedResources) {
          eventContainer.setAttribute("data-group-index", this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)].groupIndex.toString());
        }
        eventRows.push(eventContainer);
      }
      return eventRows;
    };
    ViewBase2.prototype.collapseRows = function(wrap) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.hideResourceRows(wrap.querySelector("tbody"));
        this.parent.resourceBase.hideResourceRows(wrap.querySelector("." + EVENT_TABLE_CLASS));
      }
    };
    ViewBase2.prototype.createTableLayout = function(className) {
      var clsName = className || "";
      var table = createElement("table", { className: SCHEDULE_TABLE_CLASS + " " + clsName });
      var tbody = createElement("tbody");
      table.appendChild(tbody);
      return table;
    };
    ViewBase2.prototype.setAriaAttributes = function(table) {
      table.setAttribute("role", "grid");
      if (this.parent.currentView !== "Year") {
        table.setAttribute("id", this.parent.element.id + "_table");
      }
      table.setAttribute("aria-label", this.getLabelText(this.parent.currentView));
    };
    ViewBase2.prototype.createColGroup = function(table, lastRow) {
      if (isNullOrUndefined(lastRow)) {
        return;
      }
      var length = lastRow.length;
      if (lastRow[0] && lastRow[0].colSpan) {
        length = lastRow.map(function(value) {
          return value.colSpan;
        }).reduce(function(prev, next) {
          return prev + next;
        });
      }
      var colGroupEle = createElement("colgroup");
      for (var i = 0; i < length; i++) {
        colGroupEle.appendChild(createElement("col"));
      }
      prepend([colGroupEle], table);
    };
    ViewBase2.prototype.getScrollXIndent = function(content) {
      return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;
    };
    ViewBase2.prototype.scrollTopPanel = function(target) {
      this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;
    };
    ViewBase2.prototype.scrollHeaderLabels = function(target) {
      var headerTable = this.element.querySelector(".e-date-header-wrap table");
      var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll("colgroup col").length;
      var applyLeft = function(headerCells2, isRtl) {
        var currentCell;
        var tdLeft = 0;
        var colSpan = 0;
        var hiddenLeft = isRtl ? -target.scrollLeft : target.scrollLeft;
        for (var _i2 = 0, headerCells_2 = headerCells2; _i2 < headerCells_2.length; _i2++) {
          var cell = headerCells_2[_i2];
          colSpan += parseInt(cell.getAttribute("colSpan"), 10);
          if (colSpan > Math.floor(hiddenLeft / colWidth)) {
            currentCell = cell;
            break;
          }
          tdLeft += cell.offsetWidth;
        }
        if (!isNullOrUndefined(currentCell)) {
          currentCell.children[0].style[isRtl ? "right" : "left"] = hiddenLeft - tdLeft + "px";
        }
      };
      var classNames2 = [".e-header-year-cell", ".e-header-month-cell", ".e-header-week-cell", ".e-header-cells"];
      for (var _i = 0, classNames_1 = classNames2; _i < classNames_1.length; _i++) {
        var className = classNames_1[_i];
        var headerCells = [].slice.call(this.element.querySelectorAll(className));
        if (headerCells.length > 0) {
          for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
            var element = headerCells_1[_a];
            element.children[0].style[this.parent.enableRtl ? "right" : "left"] = "";
          }
          applyLeft(headerCells, this.parent.enableRtl);
        }
      }
    };
    ViewBase2.prototype.addAttributes = function(td, element) {
      if (td.template) {
        append(td.template, element);
      }
      if (td.colSpan) {
        element.setAttribute("colspan", td.colSpan.toString());
      }
      if (td.className) {
        addClass([element], td.className);
      }
    };
    ViewBase2.prototype.getHeaderBarHeight = function() {
      var headerBarHeight = 2;
      if (this.parent.headerModule) {
        headerBarHeight += getOuterHeight(this.parent.headerModule.getHeaderElement());
      }
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resHeader = this.parent.element.querySelector("." + RESOURCE_HEADER_TOOLBAR);
        if (resHeader) {
          headerBarHeight += resHeader.offsetHeight;
        }
      }
      return headerBarHeight;
    };
    ViewBase2.prototype.renderPanel = function(type) {
      if (type === PREVIOUS_PANEL_CLASS) {
        prepend([this.element], this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS));
      } else {
        this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.element);
      }
    };
    ViewBase2.prototype.setPanel = function(panel) {
      this.element = panel;
    };
    ViewBase2.prototype.getPanel = function() {
      return this.element;
    };
    ViewBase2.prototype.getDatesHeaderElement = function() {
      return this.element.querySelector("." + DATE_HEADER_CONTAINER_CLASS);
    };
    ViewBase2.prototype.getDateSlots = function(renderDates, workDays) {
      return [];
    };
    ViewBase2.prototype.generateColumnLevels = function() {
      return [];
    };
    ViewBase2.prototype.getColumnLevels = function() {
      return this.colLevels;
    };
    ViewBase2.prototype.highlightCurrentTime = function() {
    };
    ViewBase2.prototype.getStartDate = function() {
      return this.renderDates[0];
    };
    ViewBase2.prototype.getEndDate = function() {
      return this.renderDates[this.renderDates.length - 1];
    };
    ViewBase2.prototype.startDate = function() {
      return this.renderDates[0];
    };
    ViewBase2.prototype.endDate = function() {
      return addDays(this.renderDates[this.renderDates.length - 1], 1);
    };
    ViewBase2.prototype.getStartHour = function() {
      var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);
      if (isNullOrUndefined(startHour)) {
        startHour = new Date(2e3, 0, 0, 0);
      }
      return startHour;
    };
    ViewBase2.prototype.getEndHour = function() {
      var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);
      if (isNullOrUndefined(endHour)) {
        endHour = new Date(2e3, 0, 0, 0);
      }
      return endHour;
    };
    ViewBase2.prototype.isCurrentDate = function(date) {
      return date.setHours(0, 0, 0, 0) === new Date(this.parent.currentTimezoneDate).setHours(0, 0, 0, 0);
    };
    ViewBase2.prototype.isCurrentMonth = function(date) {
      if (this.parent.activeViewOptions.displayDate || this.parent.activeViewOptions.numberOfWeeks > 0) {
        return this.parent.activeView.getStartDate().getTime() <= this.parent.getCurrentTime().getTime() && this.parent.activeView.getEndDate().getTime() >= this.parent.getCurrentTime().getTime();
      }
      return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();
    };
    ViewBase2.prototype.isWorkDay = function(date, workDays) {
      if (workDays === void 0) {
        workDays = this.parent.activeViewOptions.workDays;
      }
      if (!isNullOrUndefined(workDays) && workDays.indexOf(date.getDay()) >= 0) {
        return true;
      }
      return false;
    };
    ViewBase2.prototype.isWorkHour = function(date, startHour, endHour, workDays) {
      if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {
        return false;
      }
      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      return !(getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays));
    };
    ViewBase2.prototype.getRenderDates = function(workDays) {
      var renderDates = [];
      if (this.parent.currentView === "Week" || this.parent.currentView === "TimelineWeek") {
        var selectedDate = resetTime(this.parent.selectedDate);
        var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);
        for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }
          start = addDays(start, 1);
        }
      } else if (this.parent.currentView === "WorkWeek" || this.parent.currentView === "TimelineWorkWeek") {
        var start = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.activeViewOptions.firstDayOfWeek);
        for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
          start = addDays(start, 1);
        }
      } else {
        var dayCount = this.parent.currentView === "Agenda" ? this.parent.agendaDaysCount : this.parent.activeViewOptions.interval;
        var start = resetTime(this.parent.selectedDate);
        do {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }
          start = addDays(start, 1);
        } while (dayCount !== renderDates.length);
      }
      if (!workDays) {
        this.renderDates = renderDates;
      }
      if (this.parent.headerModule) {
        this.parent.headerModule.previousNextIconHandler();
      }
      return renderDates;
    };
    ViewBase2.prototype.getNextPreviousDate = function(type) {
      this.previousNextAction = type;
      if (this.parent.currentView === "Day" || this.parent.currentView === "TimelineDay") {
        if (this.parent.activeViewOptions.showWeekend) {
          var daysCount = this.parent.activeViewOptions.interval;
          return addDays(this.parent.selectedDate, type === "next" ? daysCount : -daysCount);
        } else {
          var date = void 0;
          if (type === "next") {
            date = addDays(this.renderDates.slice(-1)[0], 1);
            while (!this.isWorkDay(date)) {
              date = addDays(date, 1);
            }
          } else {
            date = addDays(this.renderDates[0], -1);
            var count = 0;
            do {
              if (this.isWorkDay(date)) {
                count += 1;
              }
              if (this.parent.activeViewOptions.interval !== count) {
                date = addDays(date, -1);
              }
            } while (this.parent.activeViewOptions.interval !== count);
          }
          return date;
        }
      }
      var weekLength = type === "next" ? WEEK_LENGTH : -WEEK_LENGTH;
      return addDays(this.parent.selectedDate, weekLength * this.parent.activeViewOptions.interval);
    };
    ViewBase2.prototype.formatViewLabel = function(view, startDate, endDate) {
      var formatOptions = { type: "date", skeleton: "full", calendar: this.parent.getCalendarMode() };
      return this.parent.localeObj.getConstant(view) + " " + this.parent.localeObj.getConstant("start") + " " + this.parent.globalize.formatDate(startDate, formatOptions) + " " + this.parent.localeObj.getConstant("endAt") + " " + this.parent.globalize.formatDate(endDate, formatOptions);
    };
    ViewBase2.prototype.getLabelText = function(view) {
      var viewStr = view.charAt(0).toLowerCase() + view.substring(1);
      if (view === "Year" || view === "TimelineYear") {
        return this.formatViewLabel(viewStr, this.parent.activeView.getStartDate(), this.parent.activeView.getEndDate());
      } else {
        if (this.renderDates.length > 0) {
          if (this.parent.currentView === "Day" || this.parent.currentView === "TimelineDay") {
            return this.parent.localeObj.getConstant(viewStr) + " of " + capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, { type: "date", skeleton: "full", calendar: this.parent.getCalendarMode() }), "single");
          } else {
            return this.formatViewLabel(viewStr, this.renderDates[0], this.renderDates[this.renderDates.length - 1]);
          }
        } else {
          return "";
        }
      }
    };
    ViewBase2.prototype.getDateRangeText = function() {
      if (this.parent.isAdaptive) {
        var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
        return capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, { format: formatDate, calendar: this.parent.getCalendarMode() }), "single");
      }
      return this.formatDateRange(this.renderDates[0], this.renderDates[this.renderDates.length - 1]);
    };
    ViewBase2.prototype.formatDateRange = function(startDate, endDate) {
      var globalize = this.parent.globalize;
      var mode = this.parent.getCalendarMode();
      if (startDate === endDate) {
        endDate = null;
      }
      if (!isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {
        var text = "";
        if (!endDate) {
          text = globalize.formatDate(startDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode });
          return capitalizeFirstWord(text, "multiple");
        }
        text = globalize.formatDate(startDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode }) + " - " + globalize.formatDate(endDate, { format: this.parent.activeViewOptions.dateFormat, calendar: mode });
        return capitalizeFirstWord(text, "multiple");
      }
      var formattedStr;
      var longDateFormat;
      if (isNullOrUndefined(this.parent.locale) || this.parent.locale === "en" || this.parent.locale === "en-US") {
        longDateFormat = getValue("dateFormats.long", getDefaultDateObject(mode));
      } else {
        longDateFormat = getValue("main." + this.parent.locale + ".dates.calendars." + mode + ".dateFormats.long", cldrData);
      }
      if (!endDate) {
        return capitalizeFirstWord(globalize.formatDate(startDate, { format: longDateFormat, calendar: mode }), "single");
      }
      var dateFormat = longDateFormat.trim().toLocaleLowerCase();
      if (dateFormat.substr(0, 1) === "d") {
        if (startDate.getFullYear() === endDate.getFullYear()) {
          if (startDate.getMonth() === endDate.getMonth()) {
            formattedStr = globalize.formatDate(startDate, { format: "dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMMM yyyy", calendar: mode });
          } else {
            formattedStr = globalize.formatDate(startDate, { format: "dd MMM", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMM yyyy", calendar: mode });
          }
        } else {
          formattedStr = globalize.formatDate(startDate, { format: "dd MMM yyyy", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd MMM yyyy", calendar: mode });
        }
      } else if (dateFormat.substr(0, 1) === "m") {
        if (startDate.getFullYear() === endDate.getFullYear()) {
          if (startDate.getMonth() === endDate.getMonth()) {
            formattedStr = globalize.formatDate(startDate, { format: "MMMM dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "dd, yyyy", calendar: mode });
          } else {
            formattedStr = globalize.formatDate(startDate, { format: "MMM dd", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "MMM dd, yyyy", calendar: mode });
          }
        } else {
          formattedStr = globalize.formatDate(startDate, { format: "MMM dd, yyyy", calendar: mode }) + " - " + globalize.formatDate(endDate, { format: "MMM dd, yyyy", calendar: mode });
        }
      } else {
        formattedStr = globalize.formatDate(startDate, { format: longDateFormat, calendar: mode }) + " - " + globalize.formatDate(endDate, { format: longDateFormat, calendar: mode });
      }
      return capitalizeFirstWord(formattedStr, "multiple");
    };
    ViewBase2.prototype.getMobileDateElement = function(date, className) {
      var wrap = createElement("div", {
        className,
        innerHTML: '<div class="e-m-date">' + this.parent.globalize.formatDate(date, { format: "d", calendar: this.parent.getCalendarMode() }) + '</div><div class="e-m-day">' + capitalizeFirstWord(this.parent.globalize.formatDate(date, { format: "E", calendar: this.parent.getCalendarMode() }), "single") + "</div>"
      });
      return wrap;
    };
    ViewBase2.prototype.setResourceHeaderContent = function(tdElement, tdData, className) {
      if (className === void 0) {
        className = TEXT_ELLIPSIS;
      }
      if (this.parent.activeViewOptions.resourceHeaderTemplate) {
        var data = { resource: tdData.resource, resourceData: tdData.resourceData };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.resourceHeaderTemplateName;
        var templateId = scheduleId + viewName + "resourceHeaderTemplate";
        var quickTemplate = [].slice.call(this.parent.getResourceHeaderTemplate()(data, this.parent, "resourceHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(quickTemplate, tdElement);
      } else {
        var resourceText = createElement("div", { className });
        this.parent.sanitize(tdData.resourceData[tdData.resource.textField], resourceText);
        tdElement.appendChild(resourceText);
      }
    };
    ViewBase2.prototype.renderResourceMobileLayout = function() {
      if (this.parent.resourceBase.lastResourceLevel && this.parent.resourceBase.lastResourceLevel.length <= 0) {
        return;
      }
      this.parent.resourceBase.renderResourceHeader();
      this.parent.resourceBase.renderResourceTree();
    };
    ViewBase2.prototype.addAutoHeightClass = function(element) {
      if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {
        addClass([element], AUTO_HEIGHT);
      }
    };
    ViewBase2.prototype.getColElements = function() {
      return [].slice.call(this.element.querySelectorAll("." + CONTENT_WRAP_CLASS + " col, ." + DATE_HEADER_WRAP_CLASS + " col"));
    };
    ViewBase2.prototype.setColWidth = function(content) {
      if (this.isTimelineView()) {
        var colElements = this.getColElements();
        var contentBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
        var colWidth_1 = getElementWidth(contentBody) / (colElements.length / 2);
        if (content.offsetHeight !== content.clientHeight) {
          var resourceColumn = this.parent.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
          if (!isNullOrUndefined(resourceColumn) && resourceColumn.offsetHeight !== content.clientHeight) {
            setStyleAttribute(resourceColumn, { "height": formatUnit(content.clientHeight) });
          }
        }
        var cssClass2 = "." + HEADER_CELLS_CLASS + ",." + TIME_SLOT_CLASS + ",." + HEADER_WEEK_CELLS_CLASS + ",." + HEADER_MONTH_CELLS_CLASS + ",." + HEADER_YEAR_CELLS_CLASS;
        var headerCellElements = [].slice.call(this.element.querySelectorAll(cssClass2));
        headerCellElements.forEach(function(ele) {
          var colSpan = isNullOrUndefined(ele.getAttribute("colspan")) ? "1" : ele.getAttribute("colspan");
          var headerCellColSpan = parseInt(colSpan, 10);
          setStyleAttribute(ele, { "width": formatUnit(colWidth_1 * headerCellColSpan) });
        });
      }
    };
    ViewBase2.prototype.resetColWidth = function() {
      var colElements = this.getColElements();
      for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {
        var col = colElements_1[_i];
        col.style.width = "";
      }
    };
    ViewBase2.prototype.getContentAreaElement = function() {
      return this.element.querySelector("." + CONTENT_WRAP_CLASS);
    };
    ViewBase2.prototype.wireExpandCollapseIconEvents = function() {
      if (this.parent.resourceBase && this.parent.resourceBase.resourceCollection.length > 1) {
        var treeIcons = [].slice.call(this.element.querySelectorAll("." + RESOURCE_TREE_ICON_CLASS));
        for (var _i = 0, treeIcons_1 = treeIcons; _i < treeIcons_1.length; _i++) {
          var icon = treeIcons_1[_i];
          EventHandler.clearEvents(icon);
          EventHandler.add(icon, "click", this.parent.resourceBase.onTreeIconClick, this.parent.resourceBase);
        }
      }
    };
    ViewBase2.prototype.scrollToDate = function(scrollDate) {
      if (["Month", "TimelineMonth"].indexOf(this.parent.currentView) === -1 || isNullOrUndefined(scrollDate)) {
        return;
      }
      var scrollWrap = this.getContentAreaElement();
      var tdDate = new Date(resetTime(/* @__PURE__ */ new Date(+scrollDate)).getTime()).getTime();
      var dateElement = scrollWrap.querySelector("." + WORK_CELLS_CLASS + '[data-date="' + tdDate + '"]');
      if (this.parent.currentView === "Month" && dateElement) {
        if (scrollWrap.scrollWidth > scrollWrap.clientWidth) {
          if (!this.parent.enableRtl) {
            scrollWrap.scrollLeft = dateElement.offsetLeft;
          } else {
            scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);
          }
        }
        scrollWrap.scrollTop = dateElement.offsetTop;
      }
      if (this.parent.currentView === "TimelineMonth" && dateElement) {
        if (!this.parent.enableRtl) {
          scrollWrap.scrollLeft = dateElement.offsetLeft;
        } else {
          scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);
        }
      }
    };
    ViewBase2.prototype.setPersistence = function() {
      if (this.parent.enablePersistence) {
        var contentWrap = this.element.querySelector(".e-content-wrap");
        if (!isNullOrUndefined(contentWrap)) {
          this.parent.scrollLeft = contentWrap.scrollLeft;
          this.parent.scrollTop = contentWrap.scrollTop;
        }
      }
    };
    ViewBase2.prototype.retainScrollPosition = function() {
      if (this.parent.enablePersistence) {
        var conWrap = this.parent.element.querySelector(".e-content-wrap");
        if (!isNullOrUndefined(conWrap) && !isNullOrUndefined(this.parent.scrollLeft) && !isNullOrUndefined(this.parent.scrollTop)) {
          conWrap.scrollTop = this.parent.scrollTop;
          conWrap.scrollLeft = this.parent.scrollLeft;
        }
      }
    };
    ViewBase2.prototype.getViewStartDate = function() {
      var startDate = this.renderDates[0];
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {
        startDate = this.parent.resourceBase.getResourceRenderDates()[0];
      }
      return startDate;
    };
    ViewBase2.prototype.getViewEndDate = function() {
      var endDate = addDays(this.renderDates[this.renderDates.length - 1], 1);
      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {
        endDate = addDays(this.parent.resourceBase.getResourceRenderDates().slice(-1)[0], 1);
      }
      return endDate;
    };
    ViewBase2.prototype.getAdjustedDate = function(startTime) {
      if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === "Month" || this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.group.resources.length === 0) {
        return new Date(startTime.setHours(0, 0, 0, 0));
      } else if (this.parent.currentView === "TimelineYear" && this.parent.activeViewOptions.group.resources.length > 0) {
        startTime.setHours(0, 0, 0, 0);
        return new Date(startTime.setDate(1));
      }
      return null;
    };
    ViewBase2.prototype.resetColLevels = function() {
      this.parent.resourceBase.expandedResources = [];
      var renderedCount = this.parent.virtualScrollModule.getRenderedCount();
      var lastLevel = this.parent.activeViewOptions.group.byDate ? this.colLevels[0] : this.parent.resourceBase.renderedResources;
      var index = 0;
      for (var i = 0; i < lastLevel.length; i++) {
        if (index >= renderedCount) {
          break;
        }
        index += lastLevel[parseInt(i.toString(), 10)].colSpan;
        this.parent.resourceBase.expandedResources.push(lastLevel[parseInt(i.toString(), 10)]);
      }
      if (this.parent.activeViewOptions.group.byDate) {
        this.colLevels[0] = this.parent.resourceBase.expandedResources;
        this.parent.virtualScrollModule.setRenderedDates(this.parent.resourceBase.expandedResources);
      } else {
        this.colLevels[this.colLevels.length - 2] = this.parent.resourceBase.expandedResources;
        this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources;
      }
      if (this.parent.currentView !== "Month") {
        this.colLevels[this.colLevels.length - 1] = this.colLevels[this.colLevels.length - 1].slice(0, index);
        this.parent.resourceBase.expandedResources = this.colLevels[this.colLevels.length - 1];
      }
    };
    ViewBase2.prototype.destroy = function() {
      if (this.element && this.element.parentNode) {
        remove(this.element);
      }
      this.element = null;
      this.renderDates = null;
      this.colLevels = null;
    };
    return ViewBase2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/vertical-view.js
var __extends53 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VerticalView = (
  /** @class */
  function(_super) {
    __extends53(VerticalView2, _super);
    function VerticalView2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-day-view";
      _this.isInverseTableSelect = true;
      _this.baseCssClass = "e-vertical-view";
      _this.appointment = null;
      return _this;
    }
    VerticalView2.prototype.getModuleName = function() {
      return "verticalView";
    };
    VerticalView2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.scrollUiUpdate, this);
      this.parent.on(dataReady, this.renderEvents, this);
    };
    VerticalView2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.scrollUiUpdate);
        this.parent.off(dataReady, this.renderEvents);
      }
    };
    VerticalView2.prototype.renderEvents = function() {
      this.appointment = this.parent.activeViewOptions.timeScale.enable ? new VerticalEvent(this.parent) : new MonthEvent(this.parent);
      this.appointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    VerticalView2.prototype.onContentScroll = function(e) {
      this.parent.removeNewEventElement();
      var target = e.target;
      this.parent.notify(virtualScroll, e);
      this.scrollLeftPanel(target);
      this.scrollTopPanel(target);
      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = target.scrollTop;
      }
      this.parent.uiStateValues.left = target.scrollLeft;
      if (!isNullOrUndefined(this.parent.quickPopup) && !this.parent.uiStateValues.isTapHold) {
        this.parent.quickPopup.quickPopupHide();
      }
      this.setPersistence();
    };
    VerticalView2.prototype.onAdaptiveMove = function(e) {
      if (this.parent.uiStateValues.action) {
        e.preventDefault();
      }
    };
    VerticalView2.prototype.onAdaptiveScroll = function(e) {
      if (this.parent && !this.parent.isDestroyed) {
        this.parent.removeNewEventElement();
        this.parent.uiStateValues.top = e.target.scrollTop;
      }
    };
    VerticalView2.prototype.scrollLeftPanel = function(target) {
      var leftPanel = this.getLeftPanelElement();
      if (!isNullOrUndefined(leftPanel)) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };
    VerticalView2.prototype.scrollUiUpdate = function(args) {
      if (!this.parent) {
        return;
      }
      var dateHeader = this.parent.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var headerBarHeight = this.getHeaderBarHeight();
      var timeCells = this.getLeftPanelElement();
      var content = this.getScrollableElement();
      var header = this.getDatesHeaderElement();
      var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;
      this.setContentHeight(content, timeCells, scrollerHeight);
      this.setColWidth(content);
      var scrollBarWidth = getScrollBarWidth();
      header.firstElementChild.style[args.cssProperties.rtlBorder] = "";
      header.style[args.cssProperties.rtlPadding] = "";
      var isDateHeaderScroll = this.parent.enableAllDayScroll ? !(content.offsetWidth - content.clientWidth <= dateHeader.offsetWidth - dateHeader.clientWidth && dateHeader.classList.contains("e-all-day-scroll")) : true;
      if (content.offsetWidth - content.clientWidth > 0 && isDateHeaderScroll) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
      } else {
        header.firstElementChild.style[args.cssProperties.border] = "";
        header.style[args.cssProperties.padding] = "";
      }
      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          if (this.parent.currentView.indexOf("Timeline") > -1) {
            content.scrollTop = this.parent.uiStateValues.top;
          }
          this.scrollToWorkHour();
          this.parent.uiStateValues.isInitial = false;
        } else {
          if (timeCells) {
            timeCells.scrollTop = this.parent.uiStateValues.top;
          }
          content.scrollTop = this.parent.uiStateValues.top;
          content.scrollLeft = this.parent.uiStateValues.left;
        }
      }
      if (this.parent.activeViewOptions.timeScale.enable) {
        this.highlightCurrentTime();
      }
      this.retainScrollPosition();
      if (!isNullOrUndefined(timeCells) && !isNullOrUndefined(content) && timeCells.scrollTop !== content.scrollTop) {
        timeCells.scrollTop = content.scrollTop;
      }
    };
    VerticalView2.prototype.setContentHeight = function(element, leftPanelElement, height) {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        element.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height);
      } else {
        if (!isNullOrUndefined(leftPanelElement)) {
          leftPanelElement.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height - this.getScrollXIndent(element));
        }
        element.style.height = this.parent.height === "auto" ? "auto" : formatUnit(height);
      }
    };
    VerticalView2.prototype.scrollToWorkHour = function() {
      if (this.parent.workHours.highlight) {
        var firstWorkHourCell = this.element.querySelector("." + WORK_HOURS_CLASS);
        if (firstWorkHourCell) {
          this.getScrollableElement().scrollTop = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.left = 0;
        }
      }
    };
    VerticalView2.prototype.scrollToHour = function(hour, scrollDate) {
      var date = this.parent.getStartEndTime(hour);
      if (!isNullOrUndefined(scrollDate)) {
        var headerElement = this.element.querySelector("." + HEADER_CELLS_CLASS + '[data-date="' + new Date(resetTime(scrollDate)).getTime() + '"]');
        if (headerElement) {
          if (this.parent.enableRtl) {
            var conWrap = this.element.querySelector("." + CONTENT_TABLE_CLASS);
            this.getScrollableElement().scrollLeft = -(conWrap.offsetWidth - headerElement.offsetLeft - headerElement.offsetWidth);
          } else {
            this.getScrollableElement().scrollLeft = headerElement.offsetLeft;
          }
        }
      }
      if (isNullOrUndefined(date)) {
        return;
      }
      this.getScrollableElement().scrollTop = this.getTopFromDateTime(date);
    };
    VerticalView2.prototype.scrollToDate = function(scrollDate) {
      this.scrollToHour(null, scrollDate);
    };
    VerticalView2.prototype.generateColumnLevels = function() {
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      var columnLevels = [];
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        columnLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.activeViewOptions.group.hideNonWorkingDays) {
          while (columnLevels[0].length === 0) {
            this.parent.setProperties({ selectedDate: this.parent.activeView.getNextPreviousDate(this.previousNextAction) }, true);
            this.parent.activeView.getRenderDates();
            if (this.parent.headerModule) {
              this.parent.headerModule.setCalendarDate(this.parent.selectedDate);
              this.parent.headerModule.updateDateRange();
            }
            level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
            columnLevels = this.parent.resourceBase.generateResourceLevels(level);
          }
        }
        if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          var resStartHour = resourceLevel.resourceData[resourceLevel.resource.startHourField];
          var resEndHour = resourceLevel.resourceData[resourceLevel.resource.endHourField];
          var dateSlots = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays, resStartHour, resEndHour);
          columnLevels = [dateSlots];
        }
      } else {
        columnLevels.push(level);
      }
      this.colLevels = columnLevels;
      return columnLevels;
    };
    VerticalView2.prototype.getDateSlots = function(renderDates, workDays, workStartHour, workEndHour) {
      if (workStartHour === void 0) {
        workStartHour = this.parent.workHours.start;
      }
      if (workEndHour === void 0) {
        workEndHour = this.parent.workHours.end;
      }
      var dateCol = [];
      var start = this.parent.getStartEndTime(workStartHour);
      var end = this.parent.getStartEndTime(workEndHour);
      for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {
        var col = renderDates_1[_i];
        var classList2 = [HEADER_CELLS_CLASS];
        if (this.isCurrentDate(col)) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateCol.push({
          date: col,
          type: "dateHeader",
          className: classList2,
          colSpan: 1,
          workDays,
          startHour: /* @__PURE__ */ new Date(+start),
          endHour: /* @__PURE__ */ new Date(+end)
        });
      }
      return dateCol;
    };
    VerticalView2.prototype.isWorkHourRange = function(date) {
      return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();
    };
    VerticalView2.prototype.highlightCurrentTime = function() {
      var _this = this;
      if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== "Hour") {
        return;
      }
      var currentDate = this.parent.getCurrentTime();
      if (this.parent.showTimeIndicator && this.isWorkHourRange(currentDate)) {
        var currentDateIndex = this.getCurrentTimeIndicatorIndex();
        if (currentDateIndex.length > 0) {
          var workCells = [].slice.call(this.element.querySelectorAll("." + WORK_CELLS_CLASS));
          if (workCells.length > 0) {
            this.changeCurrentTimePosition();
          }
          if (isNullOrUndefined(this.currentTimeIndicatorTimer)) {
            var interval = MS_PER_MINUTE - (currentDate.getSeconds() * 1e3 + currentDate.getMilliseconds());
            if (interval <= MS_PER_MINUTE - 1e3) {
              window.setTimeout(function() {
                if (!isNullOrUndefined(_this.currentTimeIndicatorTimer)) {
                  _this.clearCurrentTimeIndicatorTimer();
                  _this.changeCurrentTimePosition();
                  _this.updateCurrentTimeIndicatorTimer();
                }
              }, interval);
            }
            this.updateCurrentTimeIndicatorTimer();
          }
        } else {
          this.clearCurrentTimeIndicatorTimer();
        }
      } else {
        this.clearCurrentTimeIndicatorTimer();
      }
    };
    VerticalView2.prototype.getCurrentTimeIndicatorIndex = function() {
      var currentDateIndex = [];
      if (!isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var count = 0;
        var currentDate = resetTime(this.parent.getCurrentTime());
        if (this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.byDate) {
          for (var _i = 0, _a = this.parent.resourceBase.expandedResources; _i < _a.length; _i++) {
            var resource = _a[_i];
            if (resetTime(resource.date).getTime() === currentDate.getTime()) {
              currentDateIndex.push(count);
            }
            count += 1;
          }
        } else {
          for (var _b = 0, _c = this.parent.resourceBase.renderedResources; _b < _c.length; _b++) {
            var resource = _c[_b];
            var index = this.parent.getIndexOfDate(resource.renderDates, currentDate);
            if (index >= 0) {
              var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;
              currentDateIndex.push(resIndex);
            }
            count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;
          }
        }
      } else {
        var renderDates = this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0 ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;
        var index = this.parent.getIndexOfDate(renderDates, resetTime(this.parent.getCurrentTime()));
        if (index >= 0) {
          currentDateIndex.push(index);
        }
      }
      return currentDateIndex;
    };
    VerticalView2.prototype.clearCurrentTimeIndicatorTimer = function() {
      if (!isNullOrUndefined(this.currentTimeIndicatorTimer)) {
        window.clearInterval(this.currentTimeIndicatorTimer);
        this.currentTimeIndicatorTimer = null;
        this.removeCurrentTimeIndicatorElements();
      }
    };
    VerticalView2.prototype.updateCurrentTimeIndicatorTimer = function() {
      var _this = this;
      this.currentTimeIndicatorTimer = window.setInterval(function() {
        _this.changeCurrentTimePosition();
      }, MS_PER_MINUTE);
    };
    VerticalView2.prototype.removeCurrentTimeIndicatorElements = function() {
      var queryString2 = "." + PREVIOUS_TIMELINE_CLASS + ",." + CURRENT_TIMELINE_CLASS + ",." + CURRENT_TIME_CLASS;
      var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString2));
      for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {
        var indicator = timeIndicator_1[_i];
        remove(indicator);
      }
    };
    VerticalView2.prototype.changeCurrentTimePosition = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var firstRow = this.parent.getContentTable().rows[0];
      var top = this.getTopFromDateTime(this.parent.getCurrentTime());
      var topInPx = formatUnit(top);
      var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);
      var timeCellsWrap = this.getLeftPanelElement();
      var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll("tr"));
      if (isNullOrUndefined(rowIndex) || isNaN(rowIndex) || rowIndex === timeTrs.length) {
        return;
      }
      var curTimeWrap = [].slice.call(this.element.querySelectorAll("." + TIMELINE_WRAPPER_CLASS));
      for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {
        curTimeWrap[parseInt(i.toString(), 10)].appendChild(createElement("div", { className: PREVIOUS_TIMELINE_CLASS, styles: "top:" + topInPx }));
      }
      for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {
        var day = currentDateIndex_1[_i];
        curTimeWrap[parseInt(day.toString(), 10)].appendChild(createElement("div", { className: CURRENT_TIMELINE_CLASS, styles: "top:" + topInPx }));
      }
      var currentTimeEle = createElement("div", {
        innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS,
        styles: "top:" + topInPx
      });
      if (rowIndex <= timeTrs.length) {
        removeClass(timeCellsWrap.querySelectorAll("." + HIDE_CHILDS_CLASS), HIDE_CHILDS_CLASS);
        if (timeTrs[parseInt(rowIndex.toString(), 10)]) {
          addClass([timeTrs[parseInt(rowIndex.toString(), 10)].lastElementChild], HIDE_CHILDS_CLASS);
        }
        prepend([currentTimeEle], timeCellsWrap);
        currentTimeEle.style.top = formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);
      }
    };
    VerticalView2.prototype.getTopFromDateTime = function(date) {
      var startHour = this.getStartHour();
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };
    VerticalView2.prototype.getWorkCellHeight = function() {
      return parseFloat(getElementHeight(this.element.querySelector("." + WORK_CELLS_CLASS)).toFixed(2));
    };
    VerticalView2.prototype.getTdContent = function(date, type, groupIndex) {
      var cntEle;
      var wrapper = createElement("div");
      var templateName = "";
      var templateId = this.parent.element.id + "_";
      switch (type) {
        case "dateHeader":
          if (this.parent.activeViewOptions.dateHeaderTemplate) {
            templateName = "dateHeaderTemplate";
            var args = { date, type };
            var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
            cntEle = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false, void 0, void 0, this.parent.root));
          } else {
            wrapper.innerHTML = this.parent.activeView.isTimelineView() ? '<span class="e-header-date e-navigate">' + this.getTimelineDate(date) + "</span>" : '<div class="e-header-day">' + capitalizeFirstWord(this.getDayName(date), "single") + "</div>" + ('<div class="e-header-date e-navigate" role="link">' + this.getDate(date) + "</div>");
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "majorSlot":
          if (this.parent.activeViewOptions.timeScale.majorSlotTemplate) {
            templateName = "majorSlotTemplate";
            var args = { date, type };
            cntEle = [].slice.call(this.parent.getMajorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false, void 0, void 0, this.parent.root));
          } else {
            wrapper.innerHTML = "<span>" + this.getTime(date) + "</span>";
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "minorSlot":
          if (this.parent.activeViewOptions.timeScale.minorSlotTemplate) {
            templateName = "minorSlotTemplate";
            var args = { date, type };
            cntEle = [].slice.call(this.parent.getMinorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false, void 0, void 0, this.parent.root));
          } else {
            cntEle = [].slice.call(wrapper.childNodes);
          }
          break;
        case "alldayCells":
          if (this.parent.activeViewOptions.cellTemplate) {
            var viewName = this.parent.activeViewOptions.cellTemplateName;
            templateName = "cellTemplate";
            var args = { date, type, groupIndex };
            cntEle = [].slice.call(this.parent.getCellTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false, void 0, void 0, this.parent.root));
          }
          break;
      }
      return cntEle;
    };
    VerticalView2.prototype.refreshHeader = function() {
      remove(this.element.querySelector("tbody tr"));
      this.renderHeader();
      this.parent.notify(contentReady, {});
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      if (dateHeader) {
        dateHeader.scrollLeft = this.parent.uiStateValues.left;
      }
    };
    VerticalView2.prototype.renderLayout = function(type) {
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var clsList = [this.baseCssClass, this.viewClass];
      clsList.push(type);
      if (this.parent.activeViewOptions.group.byDate) {
        clsList.push("e-by-date");
      }
      if (!this.parent.activeViewOptions.timeScale.enable) {
        addClass([this.element], [TIMESCALE_DISABLE, this.viewClass]);
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {
        clsList.push(VIRTUAL_SCROLL_CLASS);
      }
      if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {
        clsList.push(IGNORE_WHITESPACE);
      }
      this.renderPanel(type);
      addClass([this.element], clsList);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.colLevels = this.generateColumnLevels();
      this.renderHeader();
      this.renderContent();
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
    };
    VerticalView2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      if (this.parent.activeViewOptions.timeScale.enable) {
        var indentTd = createElement("td", { className: LEFT_INDENT_CLASS });
        indentTd.appendChild(this.renderLeftIndent());
        tr.appendChild(indentTd);
      }
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    VerticalView2.prototype.renderContent = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);
      }
      var tr = createElement("tr");
      var workTd = createElement("td");
      if (this.parent.isAdaptive) {
        workTd.setAttribute("colspan", this.parent.activeViewOptions.timeScale.enable ? "2" : "1");
        var scrollContainer = createElement("div", { className: SCROLL_CONTAINER_CLASS });
        if (this.parent.activeViewOptions.timeScale.enable) {
          scrollContainer.appendChild(this.renderTimeCells());
        }
        scrollContainer.appendChild(this.renderContentArea());
        workTd.appendChild(scrollContainer);
        EventHandler.add(scrollContainer, "scroll", this.onAdaptiveScroll, this);
        EventHandler.add(scrollContainer, Browser.touchMoveEvent, this.onAdaptiveMove, this);
        tr.appendChild(workTd);
      } else {
        var levels = this.colLevels.slice(0);
        if (this.parent.virtualScrollModule) {
          this.resetColLevels();
        }
        var wrap = this.renderContentArea();
        workTd.appendChild(wrap);
        if (this.parent.activeViewOptions.timeScale.enable) {
          var timesTd = createElement("td");
          timesTd.appendChild(this.renderTimeCells());
          tr.appendChild(timesTd);
        }
        tr.appendChild(workTd);
        if (this.parent.virtualScrollModule) {
          this.colLevels = levels;
          this.parent.virtualScrollModule.renderVirtualTrack(wrap);
        }
      }
      this.element.querySelector("tbody").appendChild(tr);
    };
    VerticalView2.prototype.renderLeftIndent = function() {
      var wrap = createElement("div", { className: LEFT_INDENT_WRAP_CLASS });
      var tbl = this.createTableLayout();
      var trEle = createElement("tr");
      var rowCount = this.colLevels.length;
      var nth;
      for (var i = 0; i < rowCount; i++) {
        var ntr_1 = trEle.cloneNode();
        var data_1 = { className: [this.colLevels[parseInt(i.toString(), 10)][0] && this.colLevels[parseInt(i.toString(), 10)][0].className[0]], type: "emptyCells" };
        if (this.parent.activeViewOptions.showWeekNumber && data_1.className.indexOf(HEADER_CELLS_CLASS) !== -1) {
          data_1.className.push(WEEK_NUMBER_CLASS);
          var weekNo = this.parent.getWeekNumberContent(this.renderDates);
          data_1.template = [createElement("span", {
            innerHTML: "" + weekNo,
            attrs: { title: this.parent.localeObj.getConstant("week") + " " + weekNo }
          })];
        }
        nth = this.createTd(data_1);
        this.parent.renderHeaderIndentTemplate(data_1, nth);
        ntr_1.appendChild(nth);
        tbl.querySelector("tbody").appendChild(ntr_1);
      }
      var ntr = trEle.cloneNode();
      var appointmentExpandCollapse = createElement("div", {
        attrs: {
          "tabindex": "0",
          "role": "list",
          title: this.parent.localeObj.getConstant("expandAllDaySection"),
          "aria-disabled": "false",
          "aria-label": this.parent.localeObj.getConstant("expandAllDaySection")
        },
        className: ALLDAY_APPOINTMENT_SECTION_CLASS + " " + APPOINTMENT_ROW_EXPAND_CLASS + " " + ICON3 + " " + DISABLE_CLASS
      });
      var data = { className: [ALLDAY_CELLS_CLASS], type: "emptyCells" };
      nth = this.createTd(data);
      nth.appendChild(appointmentExpandCollapse);
      this.parent.renderHeaderIndentTemplate(data, nth);
      ntr.appendChild(nth);
      tbl.querySelector("tbody").appendChild(ntr);
      wrap.appendChild(tbl);
      return wrap;
    };
    VerticalView2.prototype.renderDatesHeader = function() {
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      var wrap = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
      container.appendChild(wrap);
      var tbl = this.createTableLayout();
      var trEle = createElement("tr", { className: HEADER_ROW_CLASS });
      var rowCount = this.colLevels.length;
      var lastLevel = this.colLevels[rowCount - 1];
      for (var i = 0; i < rowCount; i++) {
        var ntr = trEle.cloneNode();
        var level = this.colLevels[parseInt(i.toString(), 10)];
        for (var j = 0; j < level.length; j++) {
          ntr.appendChild(this.createTd(level[parseInt(j.toString(), 10)]));
        }
        tbl.querySelector("tbody").appendChild(ntr);
      }
      this.createAllDayRow(tbl, lastLevel);
      this.createColGroup(tbl, lastLevel);
      wrap.appendChild(tbl);
      return container;
    };
    VerticalView2.prototype.createAllDayRow = function(table, tdData) {
      var ntr = createElement("tr", { className: ALLDAY_ROW_CLASS });
      for (var j = 0; j < tdData.length; j++) {
        var td = extend({}, tdData[parseInt(j.toString(), 10)]);
        td.className = [ALLDAY_CELLS_CLASS];
        td.type = "alldayCells";
        var ntd = this.createTd(td);
        ntd.setAttribute("data-date", td.date.getTime().toString());
        if (!isNullOrUndefined(td.groupIndex)) {
          ntd.setAttribute("data-group-index", "" + td.groupIndex);
        } else if (this.parent.uiStateValues.isGroupAdaptive) {
          ntd.setAttribute("data-group-index", "" + this.parent.uiStateValues.groupIndex);
        }
        this.wireCellEvents(ntd);
        ntr.appendChild(ntd);
      }
      table.querySelector("tbody").appendChild(ntr);
      var thead = createElement("thead");
      thead.appendChild(this.parent.eventBase.createEventWrapper("allDay"));
      prepend([thead], table);
    };
    VerticalView2.prototype.createTd = function(td) {
      var tdEle = createElement("td");
      this.addAttributes(td, tdEle);
      if (td.date && td.type) {
        var ele = this.getTdContent(td.date, td.type, td.groupIndex);
        if (ele && ele.length) {
          append(ele, tdEle);
        }
      }
      if (!this.parent.isMinMaxDate(resetTime(/* @__PURE__ */ new Date("" + td.date)))) {
        addClass([tdEle], DISABLE_DATES);
      }
      if (td.type === "resourceHeader") {
        this.setResourceHeaderContent(tdEle, td);
      }
      if (td.type === "dateHeader" && td.className.indexOf(HEADER_CELLS_CLASS) >= 0) {
        tdEle.setAttribute("data-date", td.date.getTime().toString());
        if (!isNullOrUndefined(td.groupIndex)) {
          tdEle.setAttribute("data-group-index", "" + td.groupIndex);
        }
        this.wireMouseEvents(tdEle);
      }
      var args = { elementType: td.type, element: tdEle, date: td.date, groupIndex: td.groupIndex };
      this.parent.trigger(renderCell, args);
      return tdEle;
    };
    VerticalView2.prototype.wireCellEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      this.wireMouseEvents(element);
    };
    VerticalView2.prototype.wireMouseEvents = function(element) {
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    VerticalView2.prototype.renderTimeCells = function() {
      var _this = this;
      var wrap = createElement("div", { className: TIME_CELLS_WRAP_CLASS });
      var tbl = this.createTableLayout();
      var trEle = createElement("tr");
      var handler = function(r) {
        r.type = r.first ? "majorSlot" : "minorSlot";
        r.className = r.last ? [TIME_CELLS_CLASS, TIME_SLOT_CLASS] : [TIME_SLOT_CLASS];
        var ntr = trEle.cloneNode();
        var data = { date: r.date, type: r.type, className: r.className };
        ntr.appendChild(_this.createTd(data));
        tbl.querySelector("tbody").appendChild(ntr);
        return r;
      };
      this.getTimeSlotRows(handler);
      wrap.appendChild(tbl);
      return wrap;
    };
    VerticalView2.prototype.renderContentArea = function() {
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      this.addAutoHeightClass(tbl);
      this.renderContentTable(tbl);
      this.createColGroup(tbl, this.colLevels.slice(-1)[0]);
      wrap.appendChild(tbl);
      this.wireCellEvents(tbl.querySelector("tbody"));
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      EventHandler.add(wrap, Browser.touchMoveEvent, this.onAdaptiveMove, this);
      return wrap;
    };
    VerticalView2.prototype.renderContentTable = function(table) {
      var tBody = table.querySelector("tbody");
      append(this.getContentRows(), tBody);
      this.renderContentTableHeader(table);
    };
    VerticalView2.prototype.getContentRows = function() {
      var _this = this;
      var rows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var handler = function(r) {
        var ntr = tr.cloneNode();
        for (var _i = 0, _a = _this.colLevels[_this.colLevels.length - 1]; _i < _a.length; _i++) {
          var tdData = _a[_i];
          var ntd = _this.createContentTd(tdData, r, td);
          ntr.appendChild(ntd);
        }
        rows.push(ntr);
        return r;
      };
      this.getTimeSlotRows(handler);
      return rows;
    };
    VerticalView2.prototype.createContentTd = function(tdData, r, td) {
      var ntd = td.cloneNode();
      if (tdData.colSpan) {
        ntd.setAttribute("colspan", tdData.colSpan.toString());
      }
      var clsName = this.getContentTdClass(r);
      var cellDate = resetTime(tdData.date);
      if (!this.parent.isMinMaxDate(cellDate)) {
        clsName.push(DISABLE_DATES);
      }
      cellDate = new Date(cellDate.setHours(r.date.getHours(), r.date.getMinutes(), r.date.getSeconds(), r.date.getMilliseconds()));
      var type = "workCells";
      if (tdData.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {
        clsName.push(RESOURCE_GROUP_CELLS_CLASS);
        type = "resourceGroupCells";
      }
      if (this.parent.workHours.highlight && (this.parent.activeViewOptions.timeScale.enable && this.isWorkHour(cellDate, tdData.startHour, tdData.endHour, tdData.workDays) || !this.parent.activeViewOptions.timeScale.enable && this.isWorkDay(cellDate, tdData.workDays))) {
        clsName.push(WORK_HOURS_CLASS);
      }
      addClass([ntd], clsName);
      if (this.parent.activeViewOptions.cellTemplate) {
        var args_1 = { date: cellDate, type, groupIndex: tdData.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellTemplateName;
        var templateId = scheduleId + viewName + "cellTemplate";
        var tooltipTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(tooltipTemplate, ntd);
      }
      ntd.setAttribute("data-date", cellDate.getTime().toString());
      var skeleton = "full";
      if (!this.parent.activeViewOptions.timeScale.enable) {
        var announcementText = this.parent.globalize.formatDate(tdData.date, { skeleton, calendar: this.parent.getCalendarMode() });
        ntd.setAttribute("aria-label", announcementText);
      } else {
        var startDateText = this.parent.globalize.formatDate(cellDate, {
          type: "dateTime",
          skeleton,
          calendar: this.parent.getCalendarMode()
        });
        var endDateText = this.parent.globalize.formatDate(this.getEndDateFromStartDate(cellDate), {
          type: "dateTime",
          skeleton,
          calendar: this.parent.getCalendarMode()
        });
        ntd.setAttribute("aria-label", startDateText + " " + this.parent.localeObj.getConstant("endAt") + " " + endDateText);
      }
      if (!isNullOrUndefined(tdData.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {
        var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : tdData.groupIndex;
        ntd.setAttribute("data-group-index", "" + groupIndex);
      }
      var args = { elementType: type, element: ntd, date: cellDate, groupIndex: tdData.groupIndex };
      this.parent.trigger(renderCell, args);
      return ntd;
    };
    VerticalView2.prototype.getContentTdClass = function(r) {
      return r.last ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];
    };
    VerticalView2.prototype.renderContentTableHeader = function(table) {
      var thead = createElement("thead");
      thead.appendChild(this.parent.eventBase.createEventWrapper());
      if (this.parent.activeViewOptions.timeScale.enable) {
        thead.appendChild(this.parent.eventBase.createEventWrapper("timeIndicator"));
      }
      prepend([thead], table);
    };
    VerticalView2.prototype.getScrollableElement = function() {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        return this.element.querySelector("." + SCROLL_CONTAINER_CLASS);
      } else {
        return this.getContentAreaElement();
      }
    };
    VerticalView2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + TIME_CELLS_WRAP_CLASS);
    };
    VerticalView2.prototype.getEndDateFromStartDate = function(start) {
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var end = new Date(start.getTime());
      end.setMilliseconds(end.getMilliseconds() + msInterval);
      return end;
    };
    VerticalView2.prototype.getStartEndHours = function(startEndTime) {
      if (!isNullOrUndefined(startEndTime) && startEndTime !== "") {
        var startEndDate = new Date(2e3, 0, 0, 0);
        var timeString = startEndTime.split(":");
        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }
        return startEndDate;
      }
      return new Date(2e3, 0, 0, 0);
    };
    VerticalView2.prototype.getTimeSlotRows = function(handler) {
      var rows = [];
      var startHour = this.getStartEndHours(this.parent.activeViewOptions.startHour);
      var endHour = this.getStartEndHours(this.parent.activeViewOptions.endHour);
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var length = Math.round(MS_PER_DAY / msInterval);
      var msStartHour = startHour.getTime();
      var msEndHour = endHour.getTime();
      if (msStartHour !== msEndHour) {
        var milliSeconds = startHour.getTimezoneOffset() !== endHour.getTimezoneOffset() ? msEndHour - msStartHour - 36e5 : msEndHour - msStartHour;
        length = Math.round(milliSeconds / msInterval);
      }
      if (!this.parent.activeViewOptions.timeScale.enable) {
        length = 1;
      }
      var start = this.parent.getStartEndTime(this.parent.workHours.start);
      var end = this.parent.getStartEndTime(this.parent.workHours.end);
      for (var i = 0; i < length; i++) {
        var dt = new Date(msStartHour + msInterval * i);
        if (isDaylightSavingTime(dt) || new Date(msStartHour).getTimezoneOffset() !== dt.getTimezoneOffset()) {
          var timeOffset = new Date(msStartHour).getTimezoneOffset() - dt.getTimezoneOffset();
          dt = new Date(dt.getTime() - 1e3 * 60 * timeOffset);
        }
        var majorTickDivider = i % (msMajorInterval / msInterval);
        var row = {
          date: /* @__PURE__ */ new Date("" + dt),
          startHour: start,
          endHour: end,
          first: majorTickDivider === 0,
          middle: majorTickDivider < this.parent.activeViewOptions.timeScale.slotCount - 1,
          last: majorTickDivider === this.parent.activeViewOptions.timeScale.slotCount - 1,
          type: ""
        };
        if (handler) {
          handler(row);
        }
        rows.push(row);
      }
      return rows;
    };
    VerticalView2.prototype.getAdjustedDate = function(startTime) {
      if (!this.parent.activeViewOptions.timeScale.enable) {
        return new Date(startTime.setHours(0, 0, 0, 0));
      } else {
        var timeSlots = this.getTimeSlotRows();
        var startDate = new Date(new Date(timeSlots[0].date.getTime()).setHours(startTime.getHours(), startTime.getMinutes(), startTime.getMilliseconds()));
        for (var i = 0; i < timeSlots.length; i++) {
          if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startDate.getTime()) {
            startTime.setHours(timeSlots[i - 1].date.getHours(), timeSlots[i - 1].date.getMinutes(), timeSlots[i - 1].date.getMilliseconds());
            return new Date(startTime);
          }
        }
      }
      return null;
    };
    VerticalView2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.clearCurrentTimeIndicatorTimer();
      if (this.element) {
        if (this.appointment) {
          this.appointment.destroy();
          this.appointment = null;
        }
        var contentScrollableEle = this.getContentAreaElement();
        if (contentScrollableEle) {
          EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
          EventHandler.remove(contentScrollableEle, Browser.touchMoveEvent, this.onAdaptiveMove);
        }
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.scheduleTouchModule) {
          this.parent.scheduleTouchModule.resetValues();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return VerticalView2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/day.js
var __extends54 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Day = (
  /** @class */
  function(_super) {
    __extends54(Day2, _super);
    function Day2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-day-view";
      return _this;
    }
    Day2.prototype.getModuleName = function() {
      return "day";
    };
    return Day2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/week.js
var __extends55 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Week = (
  /** @class */
  function(_super) {
    __extends55(Week2, _super);
    function Week2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-week-view";
      return _this;
    }
    Week2.prototype.startDate = function() {
      return this.getViewStartDate();
    };
    Week2.prototype.endDate = function() {
      return this.getViewEndDate();
    };
    Week2.prototype.getModuleName = function() {
      return "week";
    };
    return Week2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/work-week.js
var __extends56 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WorkWeek = (
  /** @class */
  function(_super) {
    __extends56(WorkWeek2, _super);
    function WorkWeek2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-work-week-view";
      return _this;
    }
    WorkWeek2.prototype.startDate = function() {
      return this.getViewStartDate();
    };
    WorkWeek2.prototype.endDate = function() {
      return this.getViewEndDate();
    };
    WorkWeek2.prototype.getModuleName = function() {
      return "workWeek";
    };
    return WorkWeek2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/month.js
var __extends57 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Month = (
  /** @class */
  function(_super) {
    __extends57(Month2, _super);
    function Month2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dayNameFormat = "wide";
      _this.viewClass = "e-month-view";
      _this.isInverseTableSelect = false;
      _this.monthEvent = null;
      _this.monthDates = {};
      return _this;
    }
    Month2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onScrollUIUpdate, this);
      this.parent.on(dataReady, this.onDataReady, this);
      this.parent.on(cellClick, this.onCellClick, this);
    };
    Month2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onScrollUIUpdate);
        this.parent.off(dataReady, this.onDataReady);
        this.parent.off(cellClick, this.onCellClick);
      }
    };
    Month2.prototype.onDataReady = function(args) {
      this.monthEvent = new MonthEvent(this.parent);
      this.monthEvent.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    Month2.prototype.onCellClick = function(event2) {
    };
    Month2.prototype.onContentScroll = function(e) {
      this.parent.removeNewEventElement();
      this.parent.notify(virtualScroll, e);
      this.scrollTopPanel(e.target);
      this.scrollLeftPanel(e.target);
      this.parent.uiStateValues.top = e.target.scrollTop;
      this.parent.uiStateValues.left = e.target.scrollLeft;
      this.setPersistence();
    };
    Month2.prototype.scrollLeftPanel = function(target) {
      var leftPanel = this.getLeftPanelElement();
      if (leftPanel) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };
    Month2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + WEEK_NUMBER_WRAPPER_CLASS);
    };
    Month2.prototype.onScrollUIUpdate = function(args) {
      var headerHeight = this.getHeaderBarHeight();
      var header = this.getDatesHeaderElement();
      var content = this.getContentAreaElement();
      var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;
      var leftPanel = this.getLeftPanelElement();
      if (this.parent.height !== "auto") {
        this.setContentHeight(content, leftPanel, height);
      }
      var scrollBarWidth = getScrollBarWidth();
      header.firstElementChild.style[args.cssProperties.rtlBorder] = "";
      header.style[args.cssProperties.rtlPadding] = "";
      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
      } else {
        header.firstElementChild.style[args.cssProperties.border] = "";
        header.style[args.cssProperties.padding] = "";
      }
      this.setColWidth(content);
      if (args.scrollPosition || !args.isPreventScrollUpdate && this.parent.currentView === "TimelineMonth") {
        var top_1 = this.parent.currentView === "TimelineMonth" ? this.parent.uiStateValues.top : args.scrollPosition.top;
        if (leftPanel) {
          leftPanel.scrollTop = top_1;
        }
        content.scrollTop = top_1;
        if (this.parent.uiStateValues.isInitial) {
          this.scrollToSelectedDate();
          this.parent.uiStateValues.isInitial = false;
        } else {
          content.scrollLeft = this.parent.currentView === "TimelineMonth" ? this.parent.uiStateValues.left : args.scrollPosition.left;
        }
      } else {
        this.scrollToSelectedDate();
      }
      this.retainScrollPosition();
    };
    Month2.prototype.scrollToSelectedDate = function() {
      var headerCell = this.element.querySelector("." + HEADER_CELLS_CLASS + '[data-date="' + this.parent.selectedDate.getTime().toString() + '"]');
      var content = this.getContentAreaElement();
      if (!isNullOrUndefined(headerCell)) {
        content.scrollLeft = !this.parent.enableRtl ? headerCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - headerCell.offsetLeft - headerCell.offsetWidth);
      } else {
        content.scrollLeft = 0;
      }
      if (content.scrollLeft === 0 && this.parent.uiStateValues.isInitial) {
        this.parent.uiStateValues.left = 0;
      }
    };
    Month2.prototype.setContentHeight = function(content, leftPanelElement, height) {
      content.style.height = "auto";
      if (this.parent.currentView === "Month") {
        content.style.height = formatUnit(height);
      }
      if (leftPanelElement) {
        if (this.parent.currentView === "MonthAgenda") {
          height = this.parent.activeViewOptions.interval > 1 ? this.getContentAreaElement().firstElementChild.offsetHeight : this.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight;
        }
        leftPanelElement.style.height = "auto";
        leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
      }
    };
    Month2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        colLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.currentView === "MonthAgenda") {
          colLevels = [level];
        }
        if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          var levels_1 = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays);
          if (this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays) {
            var index = levels_1.findIndex(function(x, index2) {
              return index2 !== 0 && x.date.getDay() === levels_1[0].date.getDay();
            });
            levels_1 = index > -1 ? levels_1.slice(0, index) : levels_1;
          }
          colLevels = [levels_1];
        }
      } else {
        colLevels.push(level);
      }
      this.colLevels = colLevels;
      return colLevels;
    };
    Month2.prototype.getDateSlots = function(renderDates, workDays) {
      var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : workDays.length;
      var dateSlots = [];
      var isCurrentMonth = this.isCurrentMonth(this.parent.selectedDate);
      for (var col = 0; col < count; col++) {
        var classList2 = [HEADER_CELLS_CLASS];
        var currentDateIndex = renderDates.slice(0, count).map(function(date) {
          return date.getDay();
        });
        if (isCurrentMonth && currentDateIndex.indexOf(this.parent.currentTimezoneDate.getDay()) === col) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateSlots.push({ date: renderDates[parseInt(col.toString(), 10)], type: "monthDay", className: classList2, colSpan: 1, workDays });
      }
      return dateSlots;
    };
    Month2.prototype.getDayNameFormat = function() {
      if (this.parent.isAdaptive || this.parent.activeViewOptions.group.resources.length > 0) {
        return "abbreviated";
      }
      return "wide";
    };
    Month2.prototype.renderLayout = function(type) {
      this.dayNameFormat = this.getDayNameFormat();
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var clsList = [this.viewClass];
      clsList.push(type);
      if (this.parent.activeViewOptions.group.byDate) {
        clsList.push("e-by-date");
        if (this.parent.currentView !== "Month") {
          this.parent.activeViewOptions.group.hideNonWorkingDays = false;
        }
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {
        clsList.push(VIRTUAL_SCROLL_CLASS);
      }
      if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {
        clsList.push(IGNORE_WHITESPACE);
      }
      addClass([this.element], clsList);
      this.renderPanel(type);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.colLevels = this.generateColumnLevels();
      this.renderHeader();
      this.renderContent();
      var target = this.parent.currentView === "MonthAgenda" ? this.parent.activeView.getPanel() : this.parent.element;
      if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
      if (this.parent.uiStateValues.isCustomMonth) {
        this.parent.uiStateValues.isCustomMonth = false;
      }
    };
    Month2.prototype.refreshHeader = function() {
      remove(this.element.querySelector("tbody tr"));
      this.renderHeader();
      this.parent.notify(contentReady, {});
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var contentWrapper = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (dateHeader) {
        dateHeader.scrollLeft = this.parent.uiStateValues.left;
      }
      if (contentWrapper) {
        contentWrapper.scrollLeft = this.parent.uiStateValues.left;
      }
    };
    Month2.prototype.wireCellEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    Month2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      this.renderLeftIndent(tr);
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    Month2.prototype.renderLeftIndent = function(tr) {
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(createElement("td", { className: "e-left-indent" }));
      }
    };
    Month2.prototype.renderContent = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);
      }
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(this.renderWeekNumberContent());
      }
      var workTd = createElement("td");
      var levels = this.colLevels.slice(0);
      if (this.parent.virtualScrollModule) {
        this.resetColLevels();
      }
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      var contentArea = this.renderContentArea();
      if (this.parent.currentView === "Month") {
        wrap.appendChild(contentArea);
      } else {
        var monthAgendaWrapper = createElement("div", { className: TABLE_CONTAINER_CLASS });
        monthAgendaWrapper.appendChild(contentArea);
        wrap.appendChild(monthAgendaWrapper);
      }
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      workTd.appendChild(wrap);
      tr.appendChild(workTd);
      if (this.parent.virtualScrollModule) {
        this.colLevels = levels;
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      this.element.querySelector("tbody").appendChild(tr);
      this.renderAppointmentContainer();
    };
    Month2.prototype.renderWeekNumberContent = function() {
      var dateCol = this.renderDates.map(function(date) {
        return /* @__PURE__ */ new Date(+date);
      });
      var td = createElement("td");
      var contentWrapper = createElement("div", { className: WEEK_NUMBER_WRAPPER_CLASS });
      td.appendChild(contentWrapper);
      var contentWrapTable = this.createTableLayout();
      contentWrapper.appendChild(contentWrapTable);
      var noOfDays = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;
      for (var i = 0, length_1 = this.renderDates.length / noOfDays; i < length_1; i++) {
        var dates = dateCol.splice(0, noOfDays);
        var weekNumber = this.parent.getWeekNumberContent(dates);
        contentWrapTable.querySelector("tbody").appendChild(this.createWeekNumberElement(weekNumber));
      }
      return td;
    };
    Month2.prototype.renderAppointmentContainer = function() {
    };
    Month2.prototype.renderDatesHeader = function() {
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      var wrap = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
      container.appendChild(wrap);
      var table = this.createTableLayout();
      if (this.parent.currentView === "Month") {
        var thead = createElement("thead");
        thead.appendChild(createElement("tr"));
        prepend([thead], table);
      }
      this.createColGroup(table, this.colLevels[this.colLevels.length - 1]);
      var trEle = createElement("tr");
      for (var i = 0; i < this.colLevels.length; i++) {
        var level = this.colLevels[parseInt(i.toString(), 10)];
        var ntr = trEle.cloneNode();
        for (var j = 0; j < level.length; j++) {
          var td = level[parseInt(j.toString(), 10)];
          ntr.appendChild(this.createHeaderCell(td));
        }
        table.querySelector("tbody").appendChild(ntr);
      }
      wrap.appendChild(table);
      return container;
    };
    Month2.prototype.createHeaderCell = function(td) {
      var tdEle = createElement("td");
      this.addAttributes(td, tdEle);
      if (td.type === "monthDay") {
        var ele = createElement("span", { innerHTML: capitalizeFirstWord(this.parent.getDayNames(this.dayNameFormat)[td.date.getDay()], "single") });
        tdEle.appendChild(ele);
      }
      if (td.type === "resourceHeader") {
        this.setResourceHeaderContent(tdEle, td);
      }
      if (td.type === "dateHeader") {
        addClass([tdEle], DATE_HEADER_CLASS);
        tdEle.setAttribute("data-date", td.date.getTime().toString());
        if (this.parent.activeViewOptions.dateHeaderTemplate) {
          var cellArgs = { date: td.date, type: td.type };
          var elementId = this.parent.element.id + "_";
          var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
          var templateId = elementId + viewName + "dateHeaderTemplate";
          var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(cellArgs, this.parent, "dateHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
          if (dateTemplate && dateTemplate.length) {
            append(dateTemplate, tdEle);
          }
        } else {
          var ele = createElement("span", { className: NAVIGATE_CLASS });
          var skeleton = "full";
          var title = this.parent.globalize.formatDate(td.date, { skeleton, calendar: this.parent.getCalendarMode() });
          ele.setAttribute("title", capitalizeFirstWord(title, "multiple"));
          var innerText = this.parent.calendarUtil.isMonthStart(td.date) && !this.isCurrentDate(td.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(td.date, { format: "MMM d", calendar: this.parent.getCalendarMode() }) : this.parent.globalize.formatDate(td.date, { skeleton: "d", calendar: this.parent.getCalendarMode() });
          ele.innerHTML = capitalizeFirstWord(innerText, "single");
          tdEle.appendChild(ele);
        }
        this.wireCellEvents(tdEle);
      }
      var args = { elementType: td.type, element: tdEle, date: td.date, groupIndex: td.groupIndex };
      this.parent.trigger(renderCell, args);
      return tdEle;
    };
    Month2.prototype.getContentSlots = function() {
      if (!(this.colLevels[this.colLevels.length - 1] && this.colLevels[this.colLevels.length - 1][0])) {
        return [];
      }
      var slotDatas = [];
      var prepareSlots = function(rowIndex, renderDate, resData, classList2) {
        var data = {
          date: /* @__PURE__ */ new Date(+renderDate),
          groupIndex: resData.groupIndex,
          workDays: resData.workDays,
          type: "monthCells",
          className: classList2 || [WORK_CELLS_CLASS]
        };
        if (!slotDatas[parseInt(rowIndex.toString(), 10)]) {
          slotDatas[parseInt(rowIndex.toString(), 10)] = [];
        }
        slotDatas[parseInt(rowIndex.toString(), 10)].push(data);
      };
      var includeResource = this.parent.currentView !== "MonthAgenda" && this.parent.activeViewOptions.group.resources.length > 0;
      if (includeResource && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeViewOptions.group.byDate) {
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 2]; _i < _a.length; _i++) {
          var res = _a[_i];
          var dates = res.renderDates.map(function(date) {
            return /* @__PURE__ */ new Date(+date);
          });
          var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : res.workDays.length;
          for (var i = 0; i < res.renderDates.length / count; i++) {
            var colDates = dates.splice(0, count);
            for (var _b = 0, colDates_1 = colDates; _b < colDates_1.length; _b++) {
              var colDate = colDates_1[_b];
              prepareSlots(i, colDate, res);
            }
          }
        }
      } else {
        var dates = this.renderDates.map(function(date) {
          return /* @__PURE__ */ new Date(+date);
        });
        var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;
        var level = this.colLevels.slice(0, 1)[0];
        var startIndex = this.renderDates.map(Number).indexOf(+level[0].date);
        for (var i = 0; i < this.renderDates.length / count; i++) {
          var colDates = dates.splice(0, count);
          var k = startIndex;
          var _loop_1 = function(j2) {
            var colDate2 = colDates[parseInt(k.toString(), 10)];
            k++;
            if (includeResource) {
              var lastRow = this_1.colLevels[this_1.colLevels.length - 1];
              var rowCount = lastRow.length / count;
              var resourcesTd = lastRow.slice(0, rowCount);
              if (this_1.parent.activeViewOptions.group.hideNonWorkingDays) {
                resourcesTd = lastRow.filter(function(x) {
                  return x.date.getDay() === colDate2.getDay();
                });
                if (resourcesTd.length === 0) {
                  j2 = j2 - 1;
                  return out_j_1 = j2, "continue";
                }
              }
              for (var resIndex = 0; resIndex < resourcesTd.length; resIndex++) {
                var clsList = void 0;
                if (resIndex !== 0) {
                  clsList = [WORK_CELLS_CLASS, DISABLE_DATE];
                }
                prepareSlots(i, colDate2, resourcesTd[parseInt(resIndex.toString(), 10)], clsList);
              }
            } else {
              prepareSlots(i, colDate2, this_1.colLevels[this_1.colLevels.length - 1][0]);
            }
            out_j_1 = j2;
          };
          var this_1 = this, out_j_1;
          for (var j = startIndex; j < this.colLevels[0].length + startIndex && j < colDates.length; j++) {
            _loop_1(j);
            j = out_j_1;
          }
        }
      }
      return slotDatas;
    };
    Month2.prototype.updateClassList = function(data) {
      if (!this.isCustomMonth() && this.isOtherMonth(data.date)) {
        data.className.push(OTHERMONTH_CLASS);
      }
      if (!this.parent.isMinMaxDate(data.date)) {
        data.className.push(DISABLE_DATES);
      }
      this.updateSelectedCellClass(data);
    };
    Month2.prototype.updateSelectedCellClass = function(data) {
      return;
    };
    Month2.prototype.isOtherMonth = function(date) {
      return date.getTime() < this.monthDates.start.getTime() || date.getTime() > this.monthDates.end.getTime();
    };
    Month2.prototype.renderContentArea = function() {
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      this.addAutoHeightClass(tbl);
      if (this.parent.currentView === "TimelineMonth") {
        this.createColGroup(tbl, this.colLevels[this.colLevels.length - 1]);
      }
      var monthDate = new Date(this.parent.selectedDate.getTime());
      this.monthDates = {
        start: this.parent.calendarUtil.firstDateOfMonth(monthDate),
        end: this.parent.calendarUtil.lastDateOfMonth(addMonths(monthDate, this.parent.activeViewOptions.interval - 1))
      };
      var tBody = tbl.querySelector("tbody");
      append(this.getContentRows(), tBody);
      this.wireCellEvents(tBody);
      return tbl;
    };
    Month2.prototype.getContentRows = function() {
      var trows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var slotDatas = this.getContentSlots();
      for (var row = 0; row < slotDatas.length; row++) {
        var ntr = tr.cloneNode();
        for (var col = 0; col < slotDatas[parseInt(row.toString(), 10)].length; col++) {
          var ntd = this.createContentTd(slotDatas[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)], td);
          ntr.appendChild(ntd);
        }
        trows.push(ntr);
      }
      return trows;
    };
    Month2.prototype.createContentTd = function(data, td) {
      var ntd = td.cloneNode();
      if (data.colSpan) {
        ntd.setAttribute("colspan", data.colSpan.toString());
      }
      this.updateClassList(data);
      var type = data.type;
      if (data.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {
        data.className.push(RESOURCE_GROUP_CELLS_CLASS);
        type = "resourceGroupCells";
      }
      if (this.parent.workHours.highlight && this.isWorkDay(data.date, data.workDays)) {
        data.className.push(WORKDAY_CLASS);
      }
      if (this.isCurrentDate(data.date)) {
        data.className.push(CURRENTDATE_CLASS);
      }
      addClass([ntd], data.className);
      ntd.setAttribute("data-date", data.date.getTime().toString());
      if (!isNullOrUndefined(data.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {
        var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : data.groupIndex;
        ntd.setAttribute("data-group-index", "" + groupIndex);
      }
      this.renderDateHeaderElement(data, ntd);
      if (this.parent.activeViewOptions.cellTemplate) {
        var args_1 = { date: data.date, type, groupIndex: data.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellTemplateName;
        var templateId = scheduleId + viewName + "cellTemplate";
        var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(cellTemplate, ntd);
      }
      var args = { elementType: type, element: ntd, date: data.date, groupIndex: data.groupIndex };
      this.parent.trigger(renderCell, args);
      return ntd;
    };
    Month2.prototype.renderDateHeaderElement = function(data, ntd) {
      if (this.parent.currentView === "TimelineMonth") {
        return;
      }
      var dateHeader = createElement("div", { className: DATE_HEADER_CLASS });
      if (this.parent.activeViewOptions.cellHeaderTemplate) {
        var args = { date: data.date, type: data.type, groupIndex: data.groupIndex };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.cellHeaderTemplateName;
        var templateId = scheduleId + viewName + "cellHeaderTemplate";
        var cellHeaderTemplate = [].slice.call(this.parent.getCellHeaderTemplate()(args, this.parent, "cellHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(cellHeaderTemplate, dateHeader);
      } else {
        var innerText = this.parent.calendarUtil.isMonthStart(data.date) && !this.isCurrentDate(data.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(data.date, { format: "MMM d", calendar: this.parent.getCalendarMode() }) : this.parent.globalize.formatDate(data.date, { skeleton: "d", calendar: this.parent.getCalendarMode() });
        dateHeader.innerHTML = capitalizeFirstWord(innerText, "single");
      }
      ntd.appendChild(dateHeader);
      if (this.getModuleName() === "month") {
        addClass([dateHeader], NAVIGATE_CLASS);
        var skeleton = "full";
        var announcementText = this.parent.globalize.formatDate(data.date, { skeleton, calendar: this.parent.getCalendarMode() });
        ntd.setAttribute("aria-label", announcementText);
      }
    };
    Month2.prototype.getMonthStart = function(currentDate) {
      var useDisplayDate = this.parent.currentView === "Month" && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && (this.parent.uiStateValues.isCustomMonth || this.isCustomRange());
      var date = useDisplayDate ? this.parent.activeViewOptions.displayDate : !(this.parent.uiStateValues.isCustomMonth || this.isCustomRange()) && this.isCustomMonth() ? currentDate : this.parent.calendarUtil.firstDateOfMonth(currentDate);
      var monthStart = getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };
    Month2.prototype.getMonthEnd = function(currentDate) {
      if (this.isCustomMonth()) {
        var start = this.getMonthStart(currentDate);
        var numberOfDays = WEEK_LENGTH * (this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS);
        return addDays(start, numberOfDays - 1);
      } else {
        var endDate = addMonths(currentDate, this.parent.activeViewOptions.interval - 1);
        var lastWeekOfMonth = getWeekFirstDate(this.parent.calendarUtil.lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);
        return addDays(lastWeekOfMonth, WEEK_LENGTH - 1);
      }
    };
    Month2.prototype.isCustomRange = function() {
      var dates = this.parent.getCurrentViewDates();
      if (dates && dates.length > 0) {
        var selectedTime = resetTime(this.parent.selectedDate).getTime();
        var weekFirstDate = getWeekFirstDate(dates[dates.length - 1], this.parent.activeViewOptions.firstDayOfWeek);
        return !(selectedTime >= getWeekFirstDate(dates[0], this.parent.activeViewOptions.firstDayOfWeek).getTime() && selectedTime <= addDays(weekFirstDate, 6).getTime());
      }
      return false;
    };
    Month2.prototype.getRenderDates = function(workDays) {
      var renderDates = [];
      var currentDate = resetTime(this.parent.selectedDate);
      var start = this.getMonthStart(currentDate);
      var monthEnd = this.getMonthEnd(currentDate);
      do {
        if (this.parent.activeViewOptions.showWeekend) {
          renderDates.push(start);
        } else {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
        }
        start = addDays(start, 1);
        if (start.getHours() > 0) {
          start = resetTime(start);
        }
      } while (start.getTime() <= monthEnd.getTime());
      if (!workDays) {
        this.renderDates = renderDates;
      }
      if (this.parent.headerModule) {
        this.parent.headerModule.previousNextIconHandler();
      }
      return renderDates;
    };
    Month2.prototype.getNextPreviousDate = function(type) {
      if (this.isCustomMonth()) {
        var dates = this.parent.getCurrentViewDates();
        var date = getWeekFirstDate(type === "next" ? dates[dates.length - 1] : dates[0], this.parent.activeViewOptions.firstDayOfWeek);
        return addDays(date, type === "next" ? WEEK_LENGTH : -(this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS) * WEEK_LENGTH);
      } else {
        return addMonths(this.parent.selectedDate, (type === "next" ? 1 : -1) * this.parent.activeViewOptions.interval);
      }
    };
    Month2.prototype.getStartDate = function() {
      return this.getMonthStart(this.parent.selectedDate);
    };
    Month2.prototype.getEndDate = function() {
      return this.getMonthEnd(this.parent.selectedDate);
    };
    Month2.prototype.getEndDateFromStartDate = function(start) {
      return addDays(new Date(start.getTime()), 1);
    };
    Month2.prototype.getDateRangeText = function() {
      if (this.parent.isAdaptive || isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {
        var startDate = this.parent.selectedDate;
        var endDate = void 0;
        var updateCustomRange = false;
        if (this.isCustomMonth()) {
          var dates = this.parent.getCurrentViewDates();
          updateCustomRange = dates[0].getMonth() !== dates[dates.length - 1].getMonth() || dates[0].getFullYear() !== dates[dates.length - 1].getFullYear();
          if (updateCustomRange) {
            startDate = dates[0];
            endDate = dates[dates.length - 1];
          }
        }
        var isUpdateDateRange = this.parent.currentView !== "Month" || !this.isCustomMonth();
        if (this.parent.activeViewOptions.interval > 1 && isUpdateDateRange || updateCustomRange) {
          endDate = endDate ? endDate : addMonths(lastDateOfMonth(startDate), this.parent.activeViewOptions.interval - 1);
          if (startDate.getFullYear() === endDate.getFullYear()) {
            var monthNames = this.parent.globalize.formatDate(startDate, { format: "MMMM", calendar: this.parent.getCalendarMode() }) + " - " + this.parent.globalize.formatDate(endDate, { format: "MMMM ", calendar: this.parent.getCalendarMode() }) + this.parent.globalize.formatDate(endDate, { skeleton: "y", calendar: this.parent.getCalendarMode() });
            return capitalizeFirstWord(monthNames, "single");
          }
          var text = this.parent.globalize.formatDate(startDate, { format: "MMMM", calendar: this.parent.getCalendarMode() }) + " " + startDate.getFullYear() + " - " + this.parent.globalize.formatDate(endDate, { format: "MMMM ", calendar: this.parent.getCalendarMode() }) + this.parent.globalize.formatDate(endDate, { skeleton: "y", calendar: this.parent.getCalendarMode() });
          return capitalizeFirstWord(text, "single");
        }
        var format = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
        return capitalizeFirstWord(this.parent.globalize.formatDate(startDate, { format, calendar: this.parent.getCalendarMode() }), "single");
      }
      return this.formatDateRange(this.parent.selectedDate);
    };
    Month2.prototype.getLabelText = function(view) {
      var viewStr = view.charAt(0).toLowerCase() + view.substring(1);
      return this.formatViewLabel(viewStr, this.getStartDate(), this.getEndDate());
    };
    Month2.prototype.createWeekNumberElement = function(text) {
      var tr = createElement("tr");
      var td = createElement("td", {
        className: WEEK_NUMBER_CLASS,
        attrs: { "title": text ? this.parent.localeObj.getConstant("week") + " " + text : "" },
        innerHTML: text || ""
      });
      tr.appendChild(td);
      var args = { elementType: "weekNumberCell", element: td };
      this.parent.trigger(renderCell, args);
      return tr;
    };
    Month2.prototype.unWireEvents = function() {
      var contentScrollableEle = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (contentScrollableEle) {
        EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
      }
    };
    Month2.prototype.isCustomMonth = function() {
      return this.parent.currentView === "Month" && (!isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0);
    };
    Month2.prototype.getModuleName = function() {
      return "month";
    };
    Month2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        if (this.monthEvent) {
          this.monthEvent.destroy();
          this.monthEvent = null;
        }
        this.unWireEvents();
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.scheduleTouchModule) {
          this.parent.scheduleTouchModule.resetValues();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Month2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/year.js
var __extends58 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Year = (
  /** @class */
  function(_super) {
    __extends58(Year2, _super);
    function Year2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-year-view";
      _this.isInverseTableSelect = false;
      _this.yearEventModule = null;
      return _this;
    }
    Year2.prototype.getModuleName = function() {
      return "year";
    };
    Year2.prototype.renderLayout = function(className) {
      if (this.parent.resourceBase) {
        this.parent.resourceBase.generateResourceLevels([{ renderDates: this.parent.activeView.renderDates }]);
      }
      this.setPanel(createElement("div", { className: TABLE_WRAP_CLASS }));
      var viewTypeClass = this.parent.activeViewOptions.orientation === "Horizontal" ? "e-horizontal" : "e-vertical";
      addClass([this.element], [this.viewClass, viewTypeClass, className]);
      this.renderPanel(className);
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        addClass([this.element], [VIRTUAL_SCROLL_CLASS]);
      }
      var calendarTable = this.createTableLayout(OUTER_TABLE_CLASS);
      this.element.appendChild(calendarTable);
      this.element.querySelector("table").setAttribute("role", "presentation");
      var calendarTBody = calendarTable.querySelector("tbody");
      this.rowCount = this.getRowColumnCount("row");
      this.columnCount = this.getRowColumnCount("column");
      this.renderHeader(calendarTBody);
      this.renderContent(calendarTBody);
      if (this.parent.currentView !== "Year" && this.parent.uiStateValues.isGroupAdaptive) {
        this.generateColumnLevels();
        this.renderResourceMobileLayout();
      }
      EventHandler.add(this.element.querySelector("." + CONTENT_WRAP_CLASS), "scroll", this.onContentScroll, this);
      this.parent.notify(contentReady, {});
    };
    Year2.prototype.renderHeader = function(headerWrapper) {
    };
    Year2.prototype.renderContent = function(content) {
      var tr = createElement("tr");
      content.appendChild(tr);
      var td = createElement("td");
      tr.appendChild(td);
      this.element.querySelector("tbody").appendChild(tr);
      var contentWrapper = createElement("div", { className: CONTENT_WRAP_CLASS });
      td.appendChild(contentWrapper);
      var calendarTable = this.createTableLayout("e-calendar-table");
      contentWrapper.appendChild(calendarTable);
      var cTr = createElement("tr");
      calendarTable.querySelector("tbody").appendChild(cTr);
      var cTd = createElement("td");
      cTr.appendChild(cTd);
      var calendarWrapper = createElement("div", { className: "e-calendar-wrapper" });
      cTd.appendChild(calendarWrapper);
      var months = this.getMonths();
      for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {
        var month = months_1[_i];
        var currentMonth = new Date(this.parent.selectedDate.getFullYear(), month, 1);
        var calendarElement = createElement("div", {
          className: "e-month-calendar e-calendar",
          attrs: { "data-role": "calendar" }
        });
        calendarElement.appendChild(this.renderCalendarHeader(currentMonth));
        calendarElement.appendChild(this.renderCalendarContent(currentMonth));
        calendarWrapper.appendChild(calendarElement);
      }
      this.renderDates.splice(0, 1);
    };
    Year2.prototype.renderCalendarHeader = function(currentDate) {
      var headerWrapper = createElement("div", { className: "e-header e-month" });
      var headerContent = createElement("div", { className: "e-day e-title" });
      if (this.parent.activeViewOptions.monthHeaderTemplate) {
        var args = { date: currentDate, type: "monthHeader" };
        this.renderTemplates(this.parent.getMonthHeaderTemplate(), args, "monthHeaderTemplate", this.parent.activeViewOptions.monthHeaderTemplateName, headerContent);
      } else {
        headerContent.innerHTML = this.getMonthName(currentDate);
      }
      headerWrapper.appendChild(headerContent);
      this.parent.trigger(renderCell, { elementType: "headerCells", element: headerContent, date: currentDate });
      return headerWrapper;
    };
    Year2.prototype.renderCalendarContent = function(currentDate) {
      var dateCollection = this.getMonthDates(currentDate);
      var contentWrapper = createElement("div", { className: "e-content e-month" });
      var contentTable = this.createTableLayout("e-calendar-table " + CONTENT_TABLE_CLASS);
      contentWrapper.appendChild(contentTable);
      this.setAriaAttributes(contentTable);
      var thead = createElement("thead", { className: "e-week-header" });
      var tr = createElement("tr");
      var currentWeek = getWeekFirstDate(firstDateOfMonth(currentDate), this.parent.firstDayOfWeek);
      if (this.parent.activeViewOptions.showWeekNumber) {
        tr.appendChild(createElement("th"));
      }
      for (var i = 0; i < WEEK_LENGTH; i++) {
        if (this.parent.activeViewOptions.dayHeaderTemplate) {
          var th = createElement("th");
          var args = { date: currentWeek, type: "dayHeader" };
          this.renderTemplates(this.parent.getDayHeaderTemplate(), args, "dayHeaderTemplate", this.parent.activeViewOptions.dayHeaderTemplateName, th);
          tr.appendChild(th);
        } else {
          tr.appendChild(createElement("th", { innerHTML: this.parent.getDayNames("narrow")[currentWeek.getDay()] }));
        }
        var nextDay = new Date(currentWeek.getTime() + MS_PER_DAY);
        currentWeek = nextDay.getDate() === currentWeek.getDate() ? addDays(nextDay, 1) : nextDay;
      }
      thead.appendChild(tr);
      prepend([thead], contentTable);
      var tbody = contentTable.querySelector("tbody");
      while (dateCollection.length > 0) {
        var weekDates = dateCollection.splice(0, WEEK_LENGTH);
        var tr_1 = createElement("tr");
        if (this.parent.activeViewOptions.showWeekNumber) {
          var weekNumber = this.parent.getWeekNumberContent(weekDates);
          var td = createElement("td", {
            className: "e-week-number",
            attrs: { "title": this.parent.localeObj.getConstant("week") + " " + weekNumber },
            innerHTML: weekNumber
          });
          tr_1.appendChild(td);
          this.parent.trigger(renderCell, { elementType: "weekNumberCells", element: td });
        }
        for (var _i = 0, weekDates_1 = weekDates; _i < weekDates_1.length; _i++) {
          var date = weekDates_1[_i];
          var td = createElement("td", {
            className: "e-cell " + WORK_CELLS_CLASS,
            attrs: { "data-date": date.getTime().toString() }
          });
          if (this.parent.activeViewOptions.cellHeaderTemplate) {
            var args = { date, type: "monthCells" };
            this.renderTemplates(this.parent.getCellHeaderTemplate(), args, "cellHeaderTemplate", this.parent.activeViewOptions.cellHeaderTemplateName, td);
          } else {
            var span = createElement("span", {
              className: "e-day",
              innerHTML: this.parent.globalize.formatDate(date, { skeleton: "d", calendar: this.parent.getCalendarMode() }),
              attrs: { title: this.parent.globalize.formatDate(date, { type: "date", skeleton: "full" }) }
            });
            td.appendChild(span);
          }
          if (this.parent.activeViewOptions.cellTemplate) {
            var args = { date, type: "monthCells" };
            this.renderTemplates(this.parent.getCellTemplate(), args, "cellTemplate", this.parent.activeViewOptions.cellTemplateName, td);
          }
          var classList2 = [];
          if (currentDate.getMonth() !== date.getMonth()) {
            classList2.push(OTHERMONTH_CLASS);
            if (td.firstElementChild && !this.parent.activeViewOptions.cellTemplate) {
              td.firstElementChild.setAttribute("aria-disabled", "true");
            }
          }
          if (this.isCurrentDate(date) && currentDate.getMonth() === date.getMonth()) {
            classList2 = classList2.concat(["e-today", "e-selected"]);
          }
          if (classList2.length > 0) {
            addClass([td], classList2);
          }
          tr_1.appendChild(td);
          if (currentDate.getMonth() === date.getMonth()) {
            this.renderDates.push(new Date(date));
          }
          if (!this.parent.isMinMaxDate(date)) {
            addClass([td], DISABLE_DATES);
          } else {
            EventHandler.add(td, "click", this.onCellClick, this);
            if (!this.parent.isAdaptive) {
              EventHandler.add(td, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
            }
          }
          this.parent.trigger(renderCell, { elementType: "workCells", element: td, date });
        }
        tbody.appendChild(tr_1);
      }
      return contentWrapper;
    };
    Year2.prototype.createTableColGroup = function(count) {
      var colGroupEle = createElement("colgroup");
      for (var i = 0; i < count; i++) {
        colGroupEle.appendChild(createElement("col"));
      }
      return colGroupEle;
    };
    Year2.prototype.getMonthName = function(date) {
      var month = this.parent.globalize.formatDate(date, {
        format: this.parent.activeViewOptions.dateFormat || "MMMM y",
        calendar: this.parent.getCalendarMode()
      });
      return capitalizeFirstWord(month, "multiple");
    };
    Year2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots([this.parent.selectedDate], this.parent.activeViewOptions.workDays);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        colLevels = this.parent.resourceBase.generateResourceLevels(level);
        if (this.parent.uiStateValues.isGroupAdaptive) {
          var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
          colLevels = [this.getDateSlots([this.parent.selectedDate], resourceLevel.workDays)];
        }
      } else {
        colLevels.push(level);
      }
      colLevels.pop();
      this.colLevels = colLevels;
      return colLevels;
    };
    Year2.prototype.getDateSlots = function(renderDates, workDays, startHour, endHour) {
      if (startHour === void 0) {
        startHour = this.parent.workHours.start;
      }
      if (endHour === void 0) {
        endHour = this.parent.workHours.end;
      }
      var dateCol = [{
        date: renderDates[0],
        type: "dateHeader",
        className: [HEADER_CELLS_CLASS],
        colSpan: 1,
        workDays,
        startHour: /* @__PURE__ */ new Date(+this.parent.globalize.parseDate(startHour, { skeleton: "Hm" })),
        endHour: /* @__PURE__ */ new Date(+this.parent.globalize.parseDate(endHour, { skeleton: "Hm" }))
      }];
      return dateCol;
    };
    Year2.prototype.getMonthDates = function(date) {
      var startDate = getWeekFirstDate(firstDateOfMonth(date), this.parent.firstDayOfWeek);
      var endDate = addDays(/* @__PURE__ */ new Date(+startDate), 6 * WEEK_LENGTH);
      var dateCollection = [];
      for (var start = startDate; start.getTime() < endDate.getTime(); start = addDays(start, 1)) {
        dateCollection.push(resetTime(new Date(start)));
      }
      return dateCollection;
    };
    Year2.prototype.getRowColumnCount = function(type) {
      var months = this.getMonths();
      var year = this.parent.selectedDate.getFullYear();
      var monthDaysCount = [];
      for (var _i = 0, months_2 = months; _i < months_2.length; _i++) {
        var month = months_2[_i];
        monthDaysCount.push(new Date(year, month, 1).getDay() + new Date(year, month + 1, 0).getDate());
      }
      var maxCount = Math.max.apply(Math, monthDaysCount);
      var count;
      if (type === "row") {
        count = this.parent.activeViewOptions.orientation === "Horizontal" ? months.length : maxCount;
      } else {
        count = this.parent.activeViewOptions.orientation === "Horizontal" ? maxCount : months.length;
      }
      return count;
    };
    Year2.prototype.isCurrentDate = function(date) {
      return resetTime(/* @__PURE__ */ new Date()).getTime() === resetTime(new Date(date.getTime())).getTime();
    };
    Year2.prototype.getMonths = function() {
      var _this = this;
      return Array.apply(null, { length: this.parent.activeViewOptions.monthsCount }).map(function(value, index) {
        return _this.parent.firstMonthOfYear + index;
      });
    };
    Year2.prototype.renderTemplates = function(fn, args, tName, vName, ele) {
      var templateId = this.parent.element.id + "_" + vName + tName;
      var template = [].slice.call(fn(args, this.parent, tName, templateId, false, void 0, void 0, this.parent.root));
      append(template, ele);
    };
    Year2.prototype.onCellClick = function(e) {
      var target = closest(e.target, "." + WORK_CELLS_CLASS);
      var startDate = this.parent.getDateFromElement(target);
      this.parent.activeCellsData = this.parent.getCellDetails(target);
      var isPrevious = startDate.getTime() < this.getStartDate().getTime();
      if (isPrevious || startDate.getTime() > this.getEndDate().getTime()) {
        this.parent.changeDate(this.parent.activeView.getNextPreviousDate(isPrevious ? "previous" : "next"), e);
        var activeDate = this.parent.activeCellsData.startTime.getTime();
        var inRange = activeDate >= this.getStartDate().getTime() && activeDate <= this.getEndDate().getTime();
        var dateAttr = inRange ? activeDate : (isPrevious ? this.getEndDate() : this.getStartDate()).getTime();
        var selectedCell = this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + dateAttr + '"]');
        this.parent.selectCell(selectedCell);
        this.parent.activeCellsData = this.parent.getCellDetails(selectedCell);
      } else {
        var endDate = addDays(new Date(startDate.getTime()), 1);
        var filteredEvents = this.parent.eventBase.filterEvents(startDate, endDate);
        var moreEventArgs = { date: startDate, event: filteredEvents, element: e.target };
        if (target.classList.contains(OTHERMONTH_CLASS)) {
          target = this.parent.element.querySelector(":not(." + OTHERMONTH_CLASS + ')[data-date="' + target.getAttribute("data-date") + '"]');
        }
        this.parent.activeCellsData = this.parent.getCellDetails(target);
        var args = extend(this.parent.activeCellsData, { cancel: false, event: e, name: "cellClick" });
        this.parent.trigger(cellClick, args);
        this.parent.quickPopup.moreEventClick(moreEventArgs, endDate);
      }
    };
    Year2.prototype.onContentScroll = function(e) {
      var target = e.target;
      var headerWrapper = this.getDatesHeaderElement();
      this.parent.notify(virtualScroll, e);
      if (headerWrapper) {
        headerWrapper.firstElementChild.scrollLeft = target.scrollLeft;
      }
      var scrollTopSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var scrollTopElement = this.element.querySelector(scrollTopSelector);
      if (scrollTopElement) {
        scrollTopElement.scrollTop = target.scrollTop;
      }
      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = e.target.scrollTop;
      }
      this.parent.uiStateValues.left = e.target.scrollLeft;
      this.setPersistence();
    };
    Year2.prototype.onScrollUiUpdate = function(args) {
      var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();
      var headerWrapper = this.element.querySelector("." + DATE_HEADER_CONTAINER_CLASS);
      if (headerWrapper) {
        height -= headerWrapper.offsetHeight;
      }
      var contentWrapper = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (contentWrapper) {
        contentWrapper.style.height = formatUnit(height);
      }
      if (!this.parent.isAdaptive && headerWrapper) {
        var scrollBarWidth = getScrollBarWidth();
        if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? "1px" : "0px";
          headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + "px" : "0px";
        } else {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = "";
          headerWrapper.style[args.cssProperties.padding] = "";
        }
      }
      this.setColWidth(this.getContentAreaElement());
      var leftPanelSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var leftPanelElement = this.element.querySelector(leftPanelSelector);
      if (leftPanelElement) {
        var isYScroll = contentWrapper.scrollWidth > contentWrapper.clientWidth;
        leftPanelElement.style.height = formatUnit(height - (isYScroll ? 17 : 0));
      }
      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          this.parent.uiStateValues.isInitial = false;
          this.parent.uiStateValues.top = this.parent.uiStateValues.left = 0;
        } else {
          if (leftPanelElement) {
            leftPanelElement.scrollTop = this.parent.uiStateValues.top;
          }
          contentWrapper.scrollTop = this.parent.uiStateValues.top;
          contentWrapper.scrollLeft = this.parent.uiStateValues.left;
        }
      }
      this.retainScrollPosition();
    };
    Year2.prototype.getStartDate = function() {
      return new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear % 12, 1);
    };
    Year2.prototype.getEndDate = function() {
      return addDays(addMonths(this.getStartDate(), this.parent.monthsCount), -1);
    };
    Year2.prototype.startDate = function() {
      return this.parent.currentView === "Year" ? getWeekFirstDate(this.getStartDate(), this.parent.firstDayOfWeek) : this.getStartDate();
    };
    Year2.prototype.endDate = function() {
      return this.parent.currentView === "Year" ? addDays(getWeekLastDate(this.getEndDate(), this.parent.firstDayOfWeek), 1) : addDays(this.getEndDate(), 1);
    };
    Year2.prototype.getEndDateFromStartDate = function(start) {
      var date = new Date(start.getTime());
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        date = lastDateOfMonth(date);
      }
      return addDays(new Date(date.getTime()), 1);
    };
    Year2.prototype.getNextPreviousDate = function(type) {
      return addYears(this.parent.selectedDate, type === "next" ? 1 : -1);
    };
    Year2.prototype.getDateRangeText = function() {
      var startDate = this.getStartDate();
      var endDate = this.getEndDate();
      if (startDate.getFullYear() !== endDate.getFullYear()) {
        return this.parent.globalize.formatDate(startDate, { skeleton: "yMMM" }) + " - " + this.parent.globalize.formatDate(endDate, { skeleton: "yMMM" });
      } else {
        return this.parent.globalize.formatDate(this.parent.selectedDate, { skeleton: "y" });
      }
    };
    Year2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onScrollUiUpdate, this);
      this.parent.on(dataReady, this.onDataReady, this);
    };
    Year2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onScrollUiUpdate);
        this.parent.off(dataReady, this.onDataReady);
      }
    };
    Year2.prototype.onDataReady = function(args) {
      this.yearEventModule = new YearEvent(this.parent);
      this.yearEventModule.renderAppointments();
      this.parent.notify(eventsLoaded, args);
    };
    Year2.prototype.scrollToDate = function(scrollDate) {
      var date = +new Date(resetTime(scrollDate));
      var element = this.element.querySelector("." + WORK_CELLS_CLASS + ":not(." + OTHERMONTH_CLASS + ')[data-date="' + date + '"]');
      if (element) {
        element = closest(element, ".e-month-calendar");
        this.getContentAreaElement().scrollTop = element.offsetTop;
      }
    };
    Year2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        var contentScroll = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (contentScroll) {
          EventHandler.remove(contentScroll, "scroll", this.onContentScroll);
        }
        if (this.yearEventModule) {
          this.yearEventModule.destroy();
          this.yearEventModule = null;
        }
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Year2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/agenda-base.js
var __extends59 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgendaBase = (
  /** @class */
  function(_super) {
    __extends59(AgendaBase2, _super);
    function AgendaBase2(parent) {
      return _super.call(this, parent) || this;
    }
    AgendaBase2.prototype.createAgendaContentElement = function(type, listData, aTd, groupOrder, groupIndex) {
      var _this = this;
      var listElement;
      var fieldMapping = this.parent.eventFields;
      if (type === "noEvents") {
        var noEvents = [{ "subject": this.parent.localeObj.getConstant("noEvents") }];
        listElement = ListBase.createList(this.parent.createElement, noEvents, {
          moduleName: "agenda",
          listClass: this.parent.activeView.viewClass,
          itemClass: this.parent.activeView.viewClass,
          template: '<div class="' + AGENDA_NO_EVENT_CLASS + '">' + this.parent.localeObj.getConstant("noEvents") + "</div>"
        });
        if (listElement.querySelector(".e-agenda-item").children.length === 0) {
          listElement.firstElementChild.appendChild(createElement("div", { className: AGENDA_NO_EVENT_CLASS, innerHTML: this.parent.localeObj.getConstant("noEvents") }));
        }
      } else {
        listElement = ListBase.createList(this.parent.createElement, listData, {
          moduleName: "agenda",
          listClass: this.parent.activeView.viewClass,
          itemClass: this.parent.activeView.viewClass
        });
        var listElements = [].slice.call(listElement.children);
        listElements.forEach(function(element, li) {
          var appWrapper = createElement("div", {
            className: APPOINTMENT_CLASS,
            attrs: {
              "data-id": "Appointment_" + listData[parseInt(li.toString(), 10)]["" + _this.parent.eventFields.id],
              "data-guid": listData[parseInt(li.toString(), 10)].Guid,
              "role": "button",
              "tabindex": "0",
              "aria-disabled": _this.parent.eventBase.getReadonlyAttribute(listData[parseInt(li.toString(), 10)]),
              "aria-label": _this.parent.getAnnouncementString(listData[parseInt(li.toString(), 10)])
            }
          });
          if (!isNullOrUndefined(groupIndex)) {
            appWrapper.setAttribute("data-group-index", groupIndex.toString());
          }
          _this.parent.eventBase.applyResourceColor(appWrapper, listData[parseInt(li.toString(), 10)], "borderColor", groupOrder);
          var templateEle;
          if (!isNullOrUndefined(_this.parent.activeViewOptions.eventTemplate)) {
            addClass([appWrapper], EVENT_TEMPLATE);
            var scheduleId = _this.parent.element.id + "_";
            var viewName = _this.parent.activeViewOptions.eventTemplateName;
            var templateId = scheduleId + viewName + "eventTemplate";
            templateEle = _this.parent.getAppointmentTemplate()(listData[parseInt(li.toString(), 10)], _this.parent, "eventTemplate", templateId, false, void 0, void 0, _this.parent.root);
            if (!isNullOrUndefined(listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceRule])) {
              var iconClass = listData[parseInt(li.toString(), 10)][fieldMapping.id] === listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
              appWrapper.appendChild(createElement("div", { className: ICON3 + " " + iconClass }));
            }
          } else {
            templateEle = _this.createAppointment(listData[parseInt(li.toString(), 10)]);
          }
          append([].slice.call(templateEle), appWrapper);
          removeChildren(element);
          element.appendChild(appWrapper);
          var args = {
            data: extend({}, listData[parseInt(li.toString(), 10)], null, true),
            element,
            cancel: false
          };
          _this.parent.trigger(eventRendered, args, function(eventArgs) {
            if (eventArgs.cancel) {
              remove(element);
            }
          });
        });
      }
      aTd.appendChild(listElement);
      if (this.parent.currentView === "MonthAgenda" && this.parent.activeViewOptions.group.resources.length > 0 || this.parent.currentView === "Agenda") {
        addClass([aTd], AGENDA_DAY_BORDER_CLASS);
      }
      this.parent.renderTemplates();
      return aTd;
    };
    AgendaBase2.prototype.createAppointment = function(event2) {
      var fieldMapping = this.parent.eventFields;
      var eventSubject = event2[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant("addTitle");
      var eventLocation = event2[fieldMapping.location] || this.parent.eventSettings.fields.location.default;
      var appSubjectWrap = createElement("div", { className: SUBJECT_WRAP });
      if (!isNullOrUndefined(eventLocation) && eventLocation !== "") {
        eventSubject += ",";
      }
      var appSubjectText = createElement("div", { className: SUBJECT_CLASS });
      this.parent.sanitize(eventSubject, appSubjectText);
      appSubjectWrap.appendChild(appSubjectText);
      if (!isNullOrUndefined(eventLocation) && eventLocation !== "") {
        var appLocation = createElement("div", { className: LOCATION_CLASS });
        this.parent.sanitize(eventLocation, appLocation);
        appSubjectWrap.appendChild(appLocation);
      }
      if (!isNullOrUndefined(event2[fieldMapping.recurrenceRule])) {
        var iconClass = event2[fieldMapping.id] === event2[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;
        appSubjectWrap.appendChild(createElement("div", { className: ICON3 + " " + iconClass }));
      }
      var strDate = event2[fieldMapping.startTime];
      var endDate = event2[fieldMapping.endTime];
      var isAllDay = event2[fieldMapping.isAllDay];
      var allDayStr = this.parent.localeObj.getConstant("allDay");
      var timeStr = this.parent.getTimeString(strDate) + " - " + this.parent.getTimeString(endDate);
      if (!isNullOrUndefined(event2.data)) {
        var milliSeconds = endDate.getTimezoneOffset() !== strDate.getTimezoneOffset() ? endDate.getTime() - strDate.getTime() + 36e5 : endDate.getTime() - strDate.getTime();
        var eventString = milliSeconds / MS_PER_DAY >= 1 ? allDayStr : timeStr;
        allDayStr = eventString + " (" + this.parent.localeObj.getConstant("day") + " " + event2.data.index + "/" + event2.data.count + ")";
      }
      var displayStr = !isNullOrUndefined(event2.data) || isAllDay ? allDayStr : timeStr;
      var appDateTime = createElement("div", { className: DATE_TIME_CLASS, innerHTML: displayStr });
      return [appSubjectWrap, appDateTime];
    };
    AgendaBase2.prototype.processAgendaEvents = function(events) {
      var eventsProcessed = [];
      if (isNullOrUndefined(events)) {
        return eventsProcessed;
      }
      for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
        var event_1 = events_1[_i];
        var spanned = this.parent.eventBase.splitEventByDay(event_1);
        eventsProcessed = eventsProcessed.concat(spanned.length > 1 ? spanned : event_1);
      }
      return eventsProcessed;
    };
    AgendaBase2.prototype.wireEventActions = function() {
      var eventElement = [].slice.call(this.parent.element.querySelectorAll("." + APPOINTMENT_CLASS));
      for (var _i = 0, eventElement_1 = eventElement; _i < eventElement_1.length; _i++) {
        var element = eventElement_1[_i];
        this.parent.eventBase.wireAppointmentEvents(element, this.parent.getEventDetails(element), true);
      }
      var dateHeaderElement = [].slice.call(this.parent.element.querySelectorAll(".e-m-date"));
      for (var _a = 0, dateHeaderElement_1 = dateHeaderElement; _a < dateHeaderElement_1.length; _a++) {
        var element = dateHeaderElement_1[_a];
        EventHandler.add(element, "click", this.parent.agendaModule.dayNavigationClick, this);
      }
    };
    AgendaBase2.prototype.calculateResourceTableElement = function(tBody, noOfDays, agendaDate, agendaEnd) {
      if (agendaEnd === void 0) {
        agendaEnd = null;
      }
      if (isNullOrUndefined(this.parent.resourceBase.lastResourceLevel)) {
        var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
        this.parent.resourceBase.generateResourceLevels(level);
      }
      var agendaLastDate = addDays(new Date(agendaDate.getTime()), noOfDays);
      var days = this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? noOfDays : 1;
      var resColl = this.parent.resourceBase.resourceCollection;
      var resData = this.parent.resourceBase.lastResourceLevel;
      var agendaStart = agendaDate;
      var initialDate = agendaDate;
      var showWeekend = this.parent.activeViewOptions.showWeekend;
      for (var i = 0; i < days; i++) {
        var lastLevelInfo = [];
        var tempLastLevelInfo = [];
        var tempIndex = 0;
        var eventObj = void 0;
        var dateObj = void 0;
        var firstDate = addDays(initialDate, i);
        if (this.parent.currentView === "Agenda" && this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.allowVirtualScrolling && !showWeekend && !this.isWorkDay(firstDate)) {
          do {
            firstDate = addDays(firstDate, 1);
            if (firstDate >= agendaEnd) {
              break;
            }
          } while (!this.isWorkDay(firstDate) || this.parent.eventBase.filterEvents(firstDate, addDays(firstDate, 1)).length < 1);
          if (firstDate >= agendaEnd) {
            break;
          }
          initialDate = addDays(firstDate, -i);
          agendaLastDate = addDays(firstDate, 1);
        }
        var finalDate = this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? addDays(firstDate, 1) : agendaLastDate;
        var agendaCollection = this.parent.eventBase.filterEvents(firstDate, finalDate);
        if (agendaCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === "MonthAgenda") {
          for (var res = 0; res < resData.length; res++) {
            noOfDays = !this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda" ? noOfDays : 1;
            var data = [];
            agendaDate = firstDate;
            var resDataCollection = this.parent.eventBase.filterEvents(agendaDate, agendaLastDate, agendaCollection, resData[parseInt(res.toString(), 10)]);
            if (resDataCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === "MonthAgenda") {
              for (var r = 0; r < noOfDays; r++) {
                var resDayCollection = this.parent.eventBase.filterEvents(agendaDate, addDays(agendaDate, 1), resDataCollection, void 0);
                if ((showWeekend || !showWeekend && (this.parent.group.byDate ? this.isWorkDay(agendaDate) : this.isWorkDay(agendaDate, resData[parseInt(res.toString(), 10)].workDays))) && (resDayCollection.length > 0 || !this.parent.hideEmptyAgendaDays) || this.parent.currentView === "MonthAgenda") {
                  data.push(resDayCollection[0]);
                  eventObj = {
                    rowSpan: 1,
                    type: "eventColumn",
                    resource: resColl[resColl.length - 1],
                    groupIndex: resData[parseInt(res.toString(), 10)].groupIndex,
                    groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,
                    resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                    eventData: resDayCollection,
                    date: agendaDate
                  };
                  dateObj = {
                    rowSpan: 1,
                    type: "dateColumn",
                    resource: resColl[parseInt((resColl.length - 1).toString(), 10)],
                    groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,
                    resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                    date: agendaDate
                  };
                  if (!lastLevelInfo[parseInt(tempIndex.toString(), 10)]) {
                    lastLevelInfo[parseInt(tempIndex.toString(), 10)] = [];
                  }
                  lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(eventObj);
                  lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(dateObj);
                  tempIndex++;
                }
                agendaDate = addDays(agendaDate, 1);
                if (agendaDate.getTime() >= agendaLastDate.getTime() || this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
                  if (data.length > 0) {
                    lastLevelInfo[lastLevelInfo.length - 1][1].cssClass = AGENDA_DAY_BORDER_CLASS;
                    var tempObj = {
                      rowSpan: data.length,
                      type: "resourceColumn",
                      resource: resColl[parseInt((resColl.length - 1).toString(), 10)],
                      groupOrder: resData[parseInt(res.toString(), 10)].groupOrder.slice(0, -1),
                      resourceData: resData[parseInt(res.toString(), 10)].resourceData,
                      groupIndex: lastLevelInfo.length - data.length,
                      className: [RESOURCE_NAME],
                      date: agendaDate
                    };
                    lastLevelInfo[parseInt((lastLevelInfo.length - data.length).toString(), 10)].push(tempObj);
                    tempLastLevelInfo.push(extend({}, tempObj, null, true));
                  }
                  break;
                }
              }
            }
          }
          var topResources = resColl.slice(0, -1);
          var tempGroupedData = [];
          var totalRowSpan = 0;
          for (var y = 0; y < topResources.length; y++) {
            var data = topResources[topResources.length - (y + 1)].dataSource;
            for (var x = 0; x < data.length; x++) {
              var z = 0;
              for (var u = 0; u < tempLastLevelInfo.length; u++) {
                if (tempLastLevelInfo[parseInt(u.toString(), 10)].groupOrder[topResources.length - (y + 1)] === data[parseInt(x.toString(), 10)][topResources[topResources.length - (y + 1)].idField]) {
                  totalRowSpan = totalRowSpan + tempLastLevelInfo[parseInt(u.toString(), 10)].rowSpan;
                  tempGroupedData.push(extend({}, tempLastLevelInfo[parseInt(u.toString(), 10)], null, true));
                }
                if (++z === tempLastLevelInfo.length && tempGroupedData.length > 0) {
                  tempGroupedData[0].rowSpan = totalRowSpan;
                  tempGroupedData[0].type = "parentColumnLevel_" + (y + 1);
                  tempGroupedData[0].resource = topResources[topResources.length - (y + 1)];
                  tempGroupedData[0].resourceData = data[parseInt(x.toString(), 10)];
                  tempGroupedData[0].date = agendaDate;
                  lastLevelInfo[tempGroupedData[0].groupIndex].push(tempGroupedData[0]);
                  tempGroupedData = [];
                  totalRowSpan = 0;
                }
              }
            }
          }
          this.createResourceTableRow(lastLevelInfo, tBody);
        }
      }
      var totalCollection = this.parent.eventBase.filterEvents(agendaStart, agendaLastDate);
      if (totalCollection.length === 0 && !this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {
        this.renderEmptyContent(tBody, agendaStart);
      }
    };
    AgendaBase2.prototype.createResourceTableRow = function(tContent, tBody) {
      var tr = createElement("tr");
      var ntr;
      var td = createElement("td");
      var tempData;
      var rowSpan = 0;
      var level;
      if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
        var tContentCollection = [];
        var parentCollection = this.parent.resourceBase.resourceCollection.slice(0, -1);
        for (var w = 0; w < tContent.length; w++) {
          tContentCollection = tContentCollection.concat(tContent[parseInt(w.toString(), 10)]);
        }
        level = parentCollection.length > 0 ? "parentColumnLevel_" + parentCollection.length : "resourceColumn";
        var rowSpanCollection = tContentCollection.filter(function(data2) {
          return data2.type === level;
        });
        for (var x = 0; x < rowSpanCollection.length; x++) {
          rowSpan = rowSpan + rowSpanCollection[parseInt(x.toString(), 10)].rowSpan;
        }
      }
      for (var row = 0; row < tContent.length; row++) {
        ntr = tr.cloneNode();
        for (var col = tContent[parseInt(row.toString(), 10)].length - 1; col >= 0; col--) {
          var data = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];
          var ntd = td.cloneNode();
          if (data.type === "dateColumn") {
            if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
              tempData = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];
              continue;
            }
            ntd.setAttribute("data-date", data.date.getTime().toString());
            ntd.appendChild(this.createDateHeaderElement(data.date));
            var className = [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS];
            if (data.cssClass) {
              className.push(data.cssClass);
            }
            addClass([ntd], className);
            if (this.isCurrentDate(new Date(data.date.getTime()))) {
              addClass(ntd.childNodes, AGENDA_CURRENT_DAY_CLASS);
            }
            ntr.appendChild(ntd);
          } else if (data.type === "eventColumn") {
            var elementType = data.eventData.length === 0 ? "noEvents" : "data";
            ntd = this.createAgendaContentElement(elementType, data.eventData, ntd, data.groupOrder, data.groupIndex);
            ntd.setAttribute("data-date", data.date.getTime().toString());
            if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === "MonthAgenda") {
              addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DAY_PADDING_CLASS]);
            }
            ntr.appendChild(ntd);
          } else {
            ntd.setAttribute("rowspan", data.rowSpan.toString());
            addClass([ntd], AGENDA_RESOURCE_CLASS);
            this.setResourceHeaderContent(ntd, data, data.className[0]);
            ntr.appendChild(ntd);
          }
        }
        if (this.parent.activeViewOptions.group.byDate && row === 0 && this.parent.currentView !== "MonthAgenda") {
          var ntd = td.cloneNode();
          ntd.setAttribute("data-date", tempData.date.getTime().toString());
          ntd.setAttribute("rowspan", rowSpan.toString());
          ntd.appendChild(this.createDateHeaderElement(tempData.date));
          addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS, DATE_BORDER_CLASS]);
          var daysCount = getDaysCount(this.parent.selectedDate.getTime(), tempData.date.getTime());
          ntr.setAttribute("data-row-index", daysCount.toString());
          if (this.parent.element.querySelector('.e-agenda-view tr[data-row-index="' + daysCount + '"]')) {
            break;
          }
          ntr.insertBefore(ntd, ntr.childNodes[0]);
        }
        tBody.appendChild(ntr);
      }
    };
    AgendaBase2.prototype.createDateHeaderElement = function(date) {
      var dateHeader;
      if (this.parent.activeViewOptions.dateHeaderTemplate) {
        dateHeader = createElement("div", { className: AGENDA_HEADER_CLASS });
        var args = { date, type: "dateHeader" };
        var scheduleId = this.parent.element.id + "_";
        var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;
        var templateId = scheduleId + viewName + "dateHeaderTemplate";
        var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, "dateHeaderTemplate", templateId, false, void 0, void 0, this.parent.root));
        append(dateTemplate, dateHeader);
      } else {
        dateHeader = this.getMobileDateElement(date, AGENDA_HEADER_CLASS);
      }
      return dateHeader;
    };
    AgendaBase2.prototype.renderEmptyContent = function(tBody, agendaDate) {
      var eTr = this.createTableRowElement(agendaDate, "noEvents");
      var eTd = eTr.children[0];
      var noEvents = createElement("div", {
        className: AGENDA_EMPTY_EVENT_CLASS,
        innerHTML: this.parent.localeObj.getConstant("noEvents")
      });
      eTd.appendChild(noEvents);
      tBody.appendChild(eTr);
    };
    AgendaBase2.prototype.createTableRowElement = function(date, type) {
      var daysCount = getDaysCount(this.parent.selectedDate.getTime(), date.getTime());
      var tr = createElement("tr", { attrs: { "data-row-index": daysCount.toString() } });
      var td = createElement("td", {
        attrs: {
          "class": type === "monthHeader" ? MONTH_HEADER_CLASS : AGENDA_CELLS_CLASS,
          "aria-selected": "false",
          "data-column-index": daysCount.toString(),
          "data-date": date.getTime().toString()
        }
      });
      var dTd = td.cloneNode();
      var aTd = td.cloneNode();
      tr.appendChild(dTd);
      if (type !== "noEvents") {
        tr.appendChild(aTd);
      }
      return tr;
    };
    AgendaBase2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return AgendaBase2;
  }(ViewBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/agenda.js
var __extends60 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Agenda = (
  /** @class */
  function(_super) {
    __extends60(Agenda2, _super);
    function Agenda2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-agenda-view";
      _this.isInverseTableSelect = false;
      _this.agendaDates = {};
      _this.virtualScrollTop = 1;
      return _this;
    }
    Agenda2.prototype.getModuleName = function() {
      return "agenda";
    };
    Agenda2.prototype.renderLayout = function() {
      this.agendaDates = {};
      this.element = createElement("div", { className: TABLE_WRAP_CLASS });
      addClass([this.element], this.viewClass);
      this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));
      this.element.querySelector("table").setAttribute("role", "presentation");
      this.parent.element.querySelector("." + TABLE_CONTAINER_CLASS).appendChild(this.element);
      var eTr = createElement("tr");
      this.element.querySelector("tbody").appendChild(eTr);
      var workTd = createElement("td");
      eTr.appendChild(workTd);
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      workTd.appendChild(wrap);
      var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(tbl);
      wrap.appendChild(tbl);
      var tBody = tbl.querySelector("tbody");
      var agendaDate = resetTime(this.parent.selectedDate);
      this.renderEmptyContent(tBody, agendaDate);
      this.wireEvents();
      if (this.parent.resourceBase) {
        this.parent.resourceBase.generateResourceLevels([{ renderDates: this.parent.activeView.renderDates }]);
      }
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector("." + RESOURCE_TOOLBAR_CONTAINER)) {
        this.renderResourceMobileLayout();
      }
      this.parent.notify(contentReady, {});
    };
    Agenda2.prototype.eventLoad = function(args) {
      this.dataSource = extend([], this.parent.eventsData, null, true);
      for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {
        var event_1 = _a[_i];
        delete event_1.generatedDates;
      }
      var eventCollection = this.parent.activeViewOptions.allowVirtualScrolling ? args.processedData : this.parent.eventsProcessed;
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
        this.dataSource = this.parent.eventBase.filterEventsByResource(resource, this.dataSource);
        eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      }
      this.parent.eventsProcessed = this.processAgendaEvents(eventCollection);
      var agendaDate = resetTime(this.parent.selectedDate);
      var tBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
      removeChildren(tBody);
      this.renderInitialContent(tBody, agendaDate);
      this.wireEventActions();
      var contentArea = closest(tBody, "." + CONTENT_WRAP_CLASS);
      contentArea.scrollTop = 1;
      this.parent.notify(eventsLoaded, {});
      if (!this.parent.activeViewOptions.allowVirtualScrolling) {
        this.retainScrollPosition();
      }
    };
    Agenda2.prototype.refreshEvent = function(refreshDate) {
      var processedData = [];
      var fields = this.parent.eventFields;
      for (var _i = 0, _a = this.dataSource; _i < _a.length; _i++) {
        var data = _a[_i];
        if (isNullOrUndefined(data[fields.recurrenceID]) && !isNullOrUndefined(data[fields.recurrenceRule]) && !isNullOrUndefined(data.generatedDates) && refreshDate >= data.generatedDates.end) {
          processedData = processedData.concat(this.parent.eventBase.generateOccurrence(data, refreshDate));
        }
      }
      this.parent.eventsProcessed = this.parent.eventsProcessed.concat(this.processAgendaEvents(processedData));
    };
    Agenda2.prototype.refreshHeader = function() {
      var tBody = this.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
      if (this.parent.activeViewOptions.group.byDate) {
        removeChildren(tBody);
      } else {
        remove(tBody.firstElementChild);
      }
      var agendaDate = resetTime(this.parent.selectedDate);
      var emptyTBody = createElement("tbody");
      var firstDate = new Date(agendaDate.getTime());
      var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);
      this.renderContent(emptyTBody, firstDate, lastDate);
      append([].slice.call(emptyTBody.childNodes), tBody);
    };
    Agenda2.prototype.renderInitialContent = function(tBody, agendaDate) {
      var emptyTBody = createElement("tbody");
      var firstDate = new Date(agendaDate.getTime());
      var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);
      this.renderContent(emptyTBody, firstDate, lastDate);
      append([].slice.call(emptyTBody.childNodes), tBody);
      if (this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays && this.parent.eventsData.length > 0) {
        var contentArea = this.getContentAreaElement();
        var contentChild = contentArea.querySelector(".e-content-table");
        while (contentArea.offsetWidth <= contentArea.clientWidth) {
          if (this.parent.isAdaptive && contentChild.offsetHeight >= contentArea.clientHeight) {
            break;
          }
          var emptyTBody_1 = createElement("tbody");
          lastDate = firstDate;
          firstDate = addDays(lastDate, -this.parent.agendaDaysCount);
          this.renderContent(emptyTBody_1, firstDate, lastDate);
          prepend([].slice.call(emptyTBody_1.childNodes), tBody);
          if (firstDate <= this.parent.minDate) {
            break;
          }
        }
      }
      if (tBody.childNodes.length <= 0) {
        this.renderEmptyContent(tBody, agendaDate);
      }
    };
    Agenda2.prototype.renderContent = function(tBody, agendaDate, lastDate) {
      var fieldMapping = this.parent.eventFields;
      var firstDate = new Date(agendaDate.getTime());
      var isObject = this.appointmentFiltering(firstDate, lastDate);
      if (isObject.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {
        if (!this.parent.activeViewOptions.showWeekend && !this.isAgendaWorkDay(isObject[0][fieldMapping.startTime])) {
          for (var _i = 0, isObject_1 = isObject; _i < isObject_1.length; _i++) {
            var event_2 = isObject_1[_i];
            if (this.isAgendaWorkDay(event_2[fieldMapping.startTime])) {
              agendaDate = new Date(new Date(event_2[fieldMapping.startTime].getTime()).setHours(0, 0, 0, 0));
              this.updateHeaderText(event_2[fieldMapping.startTime]);
              break;
            }
          }
        } else {
          agendaDate = new Date(new Date(isObject[0][fieldMapping.startTime].getTime()).setHours(0, 0, 0, 0));
          this.updateHeaderText(isObject[0][fieldMapping.startTime]);
        }
      }
      var endDate;
      if (!this.parent.hideEmptyAgendaDays || this.parent.agendaDaysCount > 0 && isObject.length > 0) {
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          var date = agendaDate;
          if (!this.parent.activeViewOptions.group.byDate) {
            this.parent.activeViewOptions.allowVirtualScrolling = false;
            date = firstDate;
            if (this.parent.headerModule) {
              this.parent.headerModule.updateDateRange();
              this.parent.headerModule.updateHeaderItems("remove");
            }
          }
          this.calculateResourceTableElement(tBody, this.parent.agendaDaysCount, date, lastDate);
        } else {
          for (var day = 0; day < this.parent.agendaDaysCount; day++) {
            var nTr = this.createTableRowElement(agendaDate, "data");
            var virtualContent = this.element.querySelector('tr[data-row-index="' + +nTr.dataset.rowIndex + '"]');
            if (virtualContent || !this.parent.activeViewOptions.showWeekend && !this.isAgendaWorkDay(agendaDate)) {
              agendaDate = addDays(agendaDate, 1);
              if (!virtualContent && this.parent.activeViewOptions.allowVirtualScrolling) {
                day--;
              }
              if (agendaDate.getTime() > lastDate.getTime()) {
                break;
              }
              continue;
            }
            var dTd = nTr.children[0];
            var aTd = nTr.children[1];
            var filterData = this.appointmentFiltering(agendaDate);
            if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays && filterData.length === 0) {
              var elementType = !this.parent.hideEmptyAgendaDays && filterData.length === 0 ? "noEvents" : "data";
              dTd.appendChild(this.createDateHeaderElement(agendaDate));
              nTr.appendChild(dTd);
              var cTd = this.createAgendaContentElement(elementType, filterData, aTd);
              nTr.appendChild(cTd);
              if (cTd.querySelectorAll("li").length > 0) {
                tBody.appendChild(nTr);
              }
            } else if (this.parent.activeViewOptions.allowVirtualScrolling) {
              day--;
            }
            if (this.isCurrentDate(new Date(agendaDate.getTime()))) {
              addClass(dTd.childNodes, AGENDA_CURRENT_DAY_CLASS);
            }
            agendaDate = addDays(agendaDate, 1);
            if (agendaDate.getTime() > lastDate.getTime()) {
              break;
            }
          }
        }
        endDate = new Date(agendaDate.getTime() - MS_PER_DAY);
      }
      this.agendaDates = { start: firstDate, end: endDate };
    };
    Agenda2.prototype.isAgendaWorkDay = function(date) {
      if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.group.byDate) {
        return this.isWorkDay(date, this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].workDays);
      } else {
        return this.isWorkDay(date);
      }
    };
    Agenda2.prototype.agendaScrolling = function(event2) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        this.virtualScrolling(event2);
      }
      if (!this.parent.activeViewOptions.allowVirtualScrolling) {
        this.setPersistence();
      }
    };
    Agenda2.prototype.virtualScrolling = function(event2) {
      var target = event2.target;
      var scrollTop = target.scrollTop;
      var scrollHeight = target.scrollHeight;
      var offsetHeight = target.clientHeight;
      var totalHeight = scrollTop + offsetHeight;
      var direction = this.virtualScrollTop < scrollTop ? "next" : "previous";
      var tBody = target.querySelector("tbody");
      var emptyTBody = createElement("tbody");
      var topElement = this.getElementFromScrollerPosition(event2);
      var scrollDate = this.parent.getDateFromElement(topElement);
      var filterDate;
      var filterData;
      if (scrollTop === 0) {
        filterDate = this.getPreviousNextDate(addDays(scrollDate, -1), direction);
        filterData = this.appointmentFiltering(filterDate.start, filterDate.end);
        if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
          this.renderContent(emptyTBody, filterDate.start, filterDate.end);
          prepend([].slice.call(emptyTBody.childNodes), tBody);
          this.wireEventActions();
          for (var s = 0, element = tBody.children; s < element.length; s++) {
            if (element[parseInt(s.toString(), 10)].getAttribute("data-row-index") === topElement.getAttribute("data-column-index")) {
              var scrollToValue = element[parseInt(s.toString(), 10)].offsetTop - this.element.querySelector(".e-agenda-item").offsetHeight;
              target.scrollTop = scrollToValue;
              break;
            }
          }
          this.updateHeaderText(scrollDate);
        }
      } else if (totalHeight >= scrollHeight - 5) {
        filterDate = this.getPreviousNextDate(addDays(scrollDate, 1), direction);
        filterData = this.appointmentFiltering(filterDate.start, filterDate.end);
        if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
          this.renderContent(emptyTBody, filterDate.start, filterDate.end);
          append([].slice.call(emptyTBody.childNodes), tBody);
          this.wireEventActions();
          this.updateHeaderText(scrollDate);
        }
      } else {
        this.updateHeaderText(scrollDate);
      }
      this.virtualScrollTop = scrollTop;
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      if (selectedElements.length > 0) {
        selectedElements[selectedElements.length - 1].focus();
      }
    };
    Agenda2.prototype.getElementFromScrollerPosition = function(event2) {
      var filterElement;
      var target = event2.target;
      var scrollTop = target.scrollTop;
      var scrollHeight = target.scrollHeight;
      var offsetHeight = target.clientHeight;
      var totalHeight = scrollTop + offsetHeight;
      var liCollection = [].slice.call(target.querySelectorAll(".e-agenda-item"));
      var li;
      var liDetails;
      if (liCollection.length > 0) {
        if (scrollTop === 0) {
          li = liCollection[0];
          filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
        } else if (totalHeight === scrollHeight) {
          li = liCollection[liCollection.length - 1];
          filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
        } else {
          for (var a = 0, length_1 = liCollection.length; a < length_1; a++) {
            li = liCollection[parseInt(a.toString(), 10)];
            liDetails = li.getBoundingClientRect();
            if (liDetails.top >= 0) {
              filterElement = closest(li, "." + AGENDA_CELLS_CLASS);
              break;
            }
          }
        }
      }
      return filterElement;
    };
    Agenda2.prototype.updateHeaderText = function(date) {
      if (this.parent.showHeaderBar) {
        this.parent.headerModule.updateDateRange(date);
      }
    };
    Agenda2.prototype.getPreviousNextDate = function(date, type) {
      var currentDate = new Date(date.getTime());
      var firstDate = this.getStartDateFromEndDate(date);
      var lastDate = this.getEndDateFromStartDate(date);
      var daysCount = 0;
      do {
        if (this.parent.activeViewOptions.showWeekend || !this.parent.activeViewOptions.showWeekend && this.isAgendaWorkDay(currentDate)) {
          var filterData = this.appointmentFiltering(currentDate);
          if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {
            daysCount++;
          }
        }
        currentDate = addDays(currentDate, type === "next" ? 1 : -1);
        if (currentDate < firstDate || currentDate > lastDate) {
          break;
        }
      } while (daysCount !== this.parent.agendaDaysCount);
      var endDate = addDays(currentDate, type === "next" ? -1 : 1);
      return type === "next" ? { start: date, end: addDays(endDate, 1) } : { start: endDate, end: addDays(date, 1) };
    };
    Agenda2.prototype.appointmentFiltering = function(startDate, endDate) {
      var dateStart;
      var dateEnd;
      if (!isNullOrUndefined(startDate) && isNullOrUndefined(endDate)) {
        dateStart = resetTime(new Date(startDate.getTime()));
        dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);
      } else {
        dateStart = new Date(startDate.getTime());
        dateEnd = new Date(endDate.getTime());
      }
      var filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);
      if (filterData.length === 0) {
        this.refreshEvent(startDate);
        filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);
      }
      return filterData;
    };
    Agenda2.prototype.getStartDateFromEndDate = function(endDate) {
      var filterDate;
      var fields = this.parent.eventFields;
      if (this.parent.eventsProcessed.length > 0) {
        var firstDate = Math.min.apply(Math, this.parent.eventsProcessed.map(function(a) {
          return a[fields.startTime].getTime();
        }));
        filterDate = this.parent.hideEmptyAgendaDays ? new Date(firstDate) : this.parent.minDate;
      } else {
        filterDate = this.parent.hideEmptyAgendaDays ? addMonths(endDate, -1) : this.parent.minDate;
      }
      return resetTime(filterDate);
    };
    Agenda2.prototype.getEndDateFromStartDate = function(startDate) {
      var filterDate;
      var fieldMapping = this.parent.eventFields;
      if (this.parent.eventsProcessed.length > 0) {
        var lastDate = Math.max.apply(Math, this.parent.eventsProcessed.map(function(a) {
          return a[fieldMapping.endTime].getTime();
        }));
        filterDate = this.parent.hideEmptyAgendaDays ? new Date(lastDate) : this.parent.maxDate;
      } else {
        filterDate = this.parent.hideEmptyAgendaDays ? addMonths(startDate, 1) : this.parent.maxDate;
      }
      return resetTime(addDays(filterDate, 1));
    };
    Agenda2.prototype.getNextPreviousDate = function(type) {
      var noOfDays = type === "next" ? 1 : -1;
      return addDays(this.parent.selectedDate, noOfDays);
    };
    Agenda2.prototype.startDate = function() {
      return resetTime(this.parent.selectedDate);
    };
    Agenda2.prototype.endDate = function() {
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        return this.getEndDateFromStartDate(this.startDate());
      } else {
        return addDays(this.startDate(), this.parent.agendaDaysCount);
      }
    };
    Agenda2.prototype.getDateRangeText = function(date) {
      var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : "MMMM y";
      if (this.parent.activeViewOptions.allowVirtualScrolling || this.parent.isAdaptive) {
        var currentDate = isNullOrUndefined(date) ? this.parent.selectedDate : date;
        return capitalizeFirstWord(this.parent.globalize.formatDate(currentDate, { format: formatDate, calendar: this.parent.getCalendarMode() }), "multiple");
      } else {
        var startDate = this.parent.selectedDate;
        var endDate = addDays(startDate, this.parent.agendaDaysCount - 1);
        return this.formatDateRange(startDate, endDate);
      }
    };
    Agenda2.prototype.dayNavigationClick = function(e) {
      var element = closest(e.currentTarget, "." + AGENDA_CELLS_CLASS);
      var date = this.parent.getDateFromElement(element);
      if (!isNullOrUndefined(date) && !this.parent.isAdaptive && this.parent.isMinMaxDate(date)) {
        this.parent.setProperties({ selectedDate: date }, true);
        this.parent.changeView("Day", e);
      }
    };
    Agenda2.prototype.wireEvents = function() {
      EventHandler.add(this.element.querySelector("." + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling, this);
    };
    Agenda2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element.querySelector("." + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling);
      var dateHeaderElement = [].slice.call(this.element.querySelectorAll(".e-m-date"));
      for (var _i = 0, dateHeaderElement_1 = dateHeaderElement; _i < dateHeaderElement_1.length; _i++) {
        var element = dateHeaderElement_1[_i];
        EventHandler.remove(element, "click", this.dayNavigationClick);
      }
    };
    Agenda2.prototype.addEventListener = function() {
      this.parent.on(scrollUiUpdate, this.onAgendaScrollUiUpdate, this);
      this.parent.on(dataReady, this.eventLoad, this);
    };
    Agenda2.prototype.removeEventListener = function() {
      if (this.parent) {
        this.parent.off(scrollUiUpdate, this.onAgendaScrollUiUpdate);
        this.parent.off(dataReady, this.eventLoad);
      }
    };
    Agenda2.prototype.onAgendaScrollUiUpdate = function() {
      var headerHeight = this.getHeaderBarHeight();
      if (this.parent.headerModule) {
        if (this.parent.activeViewOptions.allowVirtualScrolling) {
          this.parent.headerModule.updateHeaderItems("add");
        } else {
          this.parent.headerModule.updateHeaderItems("remove");
        }
      }
      var contentArea = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      if (this.parent.height !== "auto") {
        contentArea.style.height = formatUnit(this.parent.element.offsetHeight - headerHeight);
      }
    };
    Agenda2.prototype.scrollToDate = function(scrollDate) {
      var date = /* @__PURE__ */ new Date(+resetTime(scrollDate));
      if (this.parent.activeViewOptions.allowVirtualScrolling) {
        if (!this.parent.hideEmptyAgendaDays || this.parent.getEvents(date, addDays(date, 1), true).length > 0) {
          this.parent.changeDate(date);
        }
      } else {
        var dateElement = this.element.querySelector("." + AGENDA_CELLS_CLASS + '[data-date="' + date.getTime() + '"]');
        if (dateElement) {
          this.getContentAreaElement().scrollTop = dateElement.offsetTop;
        }
      }
    };
    Agenda2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        this.unWireEvents();
        if (this.parent.resourceBase) {
          this.parent.resourceBase.destroy();
        }
        if (this.parent.headerModule && this.parent.activeViewOptions.allowVirtualScrolling) {
          this.parent.headerModule.updateHeaderItems("remove");
        }
        _super.prototype.destroy.call(this);
      }
    };
    return Agenda2;
  }(AgendaBase)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/month-agenda.js
var __extends61 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MonthAgenda = (
  /** @class */
  function(_super) {
    __extends61(MonthAgenda2, _super);
    function MonthAgenda2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.dayNameFormat = "narrow";
      _this.viewClass = "e-month-agenda-view";
      _this.monthAgendaDate = /* @__PURE__ */ new Date("" + parent.selectedDate);
      return _this;
    }
    MonthAgenda2.prototype.getModuleName = function() {
      return "monthAgenda";
    };
    MonthAgenda2.prototype.renderAppointmentContainer = function() {
      var contentArea = this.getContentAreaElement();
      var wrapperContainer = createElement("div", { className: WRAPPER_CONTAINER_CLASS });
      contentArea.appendChild(wrapperContainer);
      var appWrap = createElement("div", { className: APPOINTMENT_WRAP_CLASS });
      wrapperContainer.appendChild(appWrap);
      this.appendAppContainer(appWrap);
      this.setEventWrapperHeight();
    };
    MonthAgenda2.prototype.getDayNameFormat = function() {
      if (this.parent.isAdaptive) {
        return "narrow";
      }
      return "abbreviated";
    };
    MonthAgenda2.prototype.updateSelectedCellClass = function(data) {
      if (resetTime(data.date).getTime() === resetTime(this.monthAgendaDate).getTime()) {
        data.className.push(SELECTED_CELL_CLASS);
      }
    };
    MonthAgenda2.prototype.setEventWrapperHeight = function() {
      var headerHeight = (this.parent.headerModule ? this.parent.headerModule.getHeaderElement().offsetHeight : 0) + 2;
      var resourceWrapper = this.parent.element.querySelector("." + RESOURCE_HEADER_TOOLBAR);
      if (resourceWrapper) {
        headerHeight += resourceWrapper.offsetHeight;
      }
      var contentArea = this.getContentAreaElement().firstElementChild;
      var dateHeader = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var availHeight = this.parent.element.offsetHeight - headerHeight - dateHeader.offsetHeight;
      var contentAreaHeight = this.parent.activeViewOptions.interval > 1 ? Math.round(availHeight * 0.8) : contentArea.offsetHeight;
      var appContainerHeight = availHeight - contentAreaHeight;
      var wrapperContainer = this.element.querySelector("." + WRAPPER_CONTAINER_CLASS);
      var eventWrapper = this.element.querySelector("." + APPOINTMENT_WRAP_CLASS);
      if (this.parent.height !== "auto") {
        if (this.parent.activeViewOptions.interval > 1) {
          contentArea.style.height = formatUnit(contentAreaHeight);
          EventHandler.add(contentArea, "scroll", this.onContentScroll, this);
        }
        wrapperContainer.style.height = eventWrapper.style.height = formatUnit(appContainerHeight);
      }
    };
    MonthAgenda2.prototype.onDataReady = function(args) {
      this.setEventWrapperHeight();
      this.clearElements();
      var eventCollection = args.processedData;
      if (this.parent.uiStateValues.isGroupAdaptive) {
        var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
        eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      }
      this.agendaBase = this.getAgendaBase();
      this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);
      var count = 0;
      for (var _i = 0, _a = this.renderDates; _i < _a.length; _i++) {
        var date = _a[_i];
        var filterData = this.appointmentFiltering(date);
        var workCell = this.element.querySelectorAll("." + WORK_CELLS_CLASS)[parseInt(count.toString(), 10)];
        if (filterData.length > 0) {
          if (!workCell.querySelector("." + APPOINTMENT_INDICATOR_CLASS)) {
            workCell.appendChild(createElement("div", { className: APPOINTMENT_INDICATOR_CLASS }));
          }
          if (date.getTime() === resetTime(new Date(this.monthAgendaDate.getTime())).getTime()) {
            this.onEventRender(filterData, date);
          }
        }
        count++;
      }
      this.parent.notify(eventsLoaded, {});
    };
    MonthAgenda2.prototype.onCellClick = function(event2) {
      if (this.parent.quickPopup) {
        this.parent.quickPopup.quickPopupHide();
      }
      var filterData = this.appointmentFiltering(event2.startTime);
      this.onEventRender(filterData, event2.startTime);
      this.parent.notify(eventsLoaded, {});
      this.monthAgendaDate = /* @__PURE__ */ new Date("" + event2.startTime);
    };
    MonthAgenda2.prototype.onEventRender = function(events, date) {
      this.agendaBase = this.getAgendaBase();
      var appWrap = this.element.querySelector("." + APPOINTMENT_WRAP_CLASS);
      removeChildren(appWrap);
      if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {
        if (events.length > 0) {
          var appContainer = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
          appWrap.appendChild(this.agendaBase.createAgendaContentElement("data", events, appContainer));
        } else {
          this.appendAppContainer(appWrap);
        }
      } else {
        if (events.length > 0) {
          var table = this.createTableLayout();
          var tBody = table.querySelector("tbody");
          this.agendaBase.calculateResourceTableElement(tBody, 1, date);
          table.appendChild(tBody);
          appWrap.appendChild(table);
        } else {
          this.appendAppContainer(appWrap);
        }
      }
      this.agendaBase.wireEventActions();
    };
    MonthAgenda2.prototype.appointmentFiltering = function(date) {
      var dateStart = resetTime(new Date(date.getTime()));
      var dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);
      return this.parent.eventBase.filterEvents(dateStart, dateEnd);
    };
    MonthAgenda2.prototype.clearElements = function() {
      var appointmentIndicators = [].slice.call(this.element.querySelectorAll("." + APPOINTMENT_INDICATOR_CLASS));
      for (var _i = 0, appointmentIndicators_1 = appointmentIndicators; _i < appointmentIndicators_1.length; _i++) {
        var appointmentIndicator = appointmentIndicators_1[_i];
        remove(appointmentIndicator);
      }
      this.appendAppContainer(this.element.querySelector("." + APPOINTMENT_WRAP_CLASS));
    };
    MonthAgenda2.prototype.appendAppContainer = function(appWrap) {
      var app = createElement("div", { className: APPOINTMENT_CONTAINER_CLASS });
      addClass([app], AGENDA_NO_EVENT_CLASS);
      app.innerHTML = this.parent.localeObj.getConstant("noEvents");
      removeChildren(appWrap);
      appWrap.appendChild(app);
    };
    MonthAgenda2.prototype.getNextPreviousDate = function(type) {
      var selectedDate = this.parent.selectedDate;
      var interval = type === "next" ? this.parent.activeViewOptions.interval : -this.parent.activeViewOptions.interval;
      var navigateDate = addMonths(this.parent.selectedDate, interval);
      var month = type === "next" ? 2 : 0;
      var lastDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + month, 0).getDate();
      var date = lastDate >= this.monthAgendaDate.getDate() ? this.monthAgendaDate.getDate() : lastDate;
      this.monthAgendaDate = new Date(navigateDate.getFullYear(), navigateDate.getMonth(), date);
      return this.monthAgendaDate;
    };
    MonthAgenda2.prototype.getAgendaBase = function() {
      return this.agendaBase || new AgendaBase(this.parent);
    };
    MonthAgenda2.prototype.destroy = function() {
      if (this.agendaBase) {
        this.agendaBase.destroy();
        this.agendaBase = null;
      }
      _super.prototype.destroy.call(this);
    };
    return MonthAgenda2;
  }(Month)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-header-row.js
var TimelineHeaderRow = (
  /** @class */
  function() {
    function TimelineHeaderRow2(parent, renderDates) {
      this.parent = parent;
      this.renderDates = renderDates;
    }
    TimelineHeaderRow2.prototype.groupByYear = function(dates) {
      var result = {};
      for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
        var d = dates_1[_i];
        var key = d.getFullYear();
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.groupByMonth = function(dates) {
      var result = {};
      for (var _i = 0, dates_2 = dates; _i < dates_2.length; _i++) {
        var d = dates_2[_i];
        var key = (d.getFullYear() - 1970) * 12 + d.getMonth();
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.groupByWeek = function(dates) {
      var result = {};
      for (var _i = 0, dates_3 = dates; _i < dates_3.length; _i++) {
        var d = dates_3[_i];
        var jsDate = +new Date(1970, 0, 1);
        var tzOffsetDiff = d.getTimezoneOffset() - new Date(1970, 0, 1).getTimezoneOffset();
        var key = Math.ceil(((+d - jsDate - tzOffsetDiff * 60 * 1e3) / MS_PER_DAY + new Date(jsDate).getDay() + 1) / 7);
        if (this.parent.firstDayOfWeek && this.parent.firstDayOfWeek > (/* @__PURE__ */ new Date(+d)).getDay()) {
          key = key - 1;
        }
        result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];
        result[parseInt(key.toString(), 10)].push(d);
      }
      return result;
    };
    TimelineHeaderRow2.prototype.generateSlots = function(data, colspan, row, cls, type) {
      var _this = this;
      var dateParser = function(date, format) {
        return _this.parent.globalize.formatDate(date, { format, calendar: _this.parent.getCalendarMode() });
      };
      var tdDatas = [];
      var keys = Object.keys(data);
      for (var i = 0; i < keys.length; i++) {
        var dates = data[keys[parseInt(i.toString(), 10)]];
        var htmlCol = void 0;
        if (row.template) {
          var args = { date: dates[0], type };
          var templateId = this.parent.element.id + "_headerRowTemplate";
          htmlCol = [].slice.call(this.parent.templateParser(row.template)(args, this.parent, "template", templateId, false));
        } else {
          var viewTemplate = void 0;
          switch (row.option) {
            case "Year":
              viewTemplate = '<span class="e-header-year">' + dateParser(dates[0], "y") + "</span>";
              break;
            case "Month":
              viewTemplate = '<span class="e-header-month">' + capitalizeFirstWord(dateParser(dates[0], "MMMM"), "single") + "</span>";
              break;
            case "Week":
              viewTemplate = '<span class="e-header-week">' + this.parent.getWeekNumberContent(dates) + "</span>";
          }
          var headerWrapper = createElement("div", { innerHTML: viewTemplate });
          htmlCol = [].slice.call(headerWrapper.childNodes);
        }
        tdDatas.push({ date: dates[0], type, className: [cls], colSpan: dates.length * colspan, template: htmlCol });
      }
      return tdDatas;
    };
    TimelineHeaderRow2.prototype.generateColumnLevels = function(dateSlots, hourSlots) {
      var levels = [];
      var rows = this.parent.activeViewOptions.headerRows;
      var lastLevelColspan = 1;
      if (rows[rows.length - 1].option === "Hour" && hourSlots.length > 0) {
        lastLevelColspan = hourSlots.length / dateSlots.length;
      }
      var tdDatas = [];
      var byYear;
      var byMonth;
      var byWeek;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        switch (row.option) {
          case "Year":
            byYear = this.groupByYear(this.renderDates);
            tdDatas = this.generateSlots(byYear, lastLevelColspan, row, "e-header-year-cell", "yearHeader");
            levels.push(tdDatas);
            break;
          case "Month":
            byMonth = this.groupByMonth(this.renderDates);
            tdDatas = this.generateSlots(byMonth, lastLevelColspan, row, "e-header-month-cell", "monthHeader");
            levels.push(tdDatas);
            break;
          case "Week":
            byWeek = this.groupByWeek(this.renderDates);
            tdDatas = this.generateSlots(byWeek, lastLevelColspan, row, "e-header-week-cell", "weekHeader");
            levels.push(tdDatas);
            break;
          case "Date":
            tdDatas = dateSlots;
            tdDatas = tdDatas.map(function(value) {
              value.colSpan = lastLevelColspan;
              return value;
            });
            levels.push(tdDatas);
            break;
          case "Hour":
            if (hourSlots.length > 0) {
              levels.push(hourSlots);
            }
            break;
        }
      }
      return levels;
    };
    return TimelineHeaderRow2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-view.js
var __extends62 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineViews = (
  /** @class */
  function(_super) {
    __extends62(TimelineViews2, _super);
    function TimelineViews2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.timelineAppointment = null;
      _this.baseCssClass = "e-timeline-view";
      return _this;
    }
    TimelineViews2.prototype.getModuleName = function() {
      return "timelineViews";
    };
    TimelineViews2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
    };
    TimelineViews2.prototype.scrollTopPanel = function(target) {
      _super.prototype.scrollTopPanel.call(this, target);
      this.scrollHeaderLabels(target);
    };
    TimelineViews2.prototype.scrollToWorkHour = function() {
      var start = this.parent.getStartEndTime(this.parent.workHours.start);
      var currDateTime = this.isWorkDay(this.parent.selectedDate) && this.parent.workHours.highlight && !isNullOrUndefined(start) ? (/* @__PURE__ */ new Date(+this.parent.selectedDate)).setHours(start.getHours(), start.getMinutes(), 0, 0) : (/* @__PURE__ */ new Date(+this.parent.selectedDate)).setHours(0, 0, 0, 0);
      var queryString2 = '[data-date="' + new Date(currDateTime).getTime().toString() + '"]';
      var firstWorkHourCell = this.element.querySelector(queryString2);
      if (firstWorkHourCell) {
        this.getContentAreaElement().scrollLeft = !this.parent.enableRtl ? firstWorkHourCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - firstWorkHourCell.offsetLeft - firstWorkHourCell.offsetWidth);
      }
    };
    TimelineViews2.prototype.scrollToHour = function(hour, scrollDate) {
      var date;
      var index;
      if (scrollDate) {
        index = this.parent.getIndexOfDate(this.renderDates, resetTime(scrollDate));
        if (index >= 0) {
          date = scrollDate;
          if (!isNullOrUndefined(hour)) {
            var timeString = hour.split(":");
            if (timeString.length === 2) {
              date = new Date(scrollDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0));
            }
          }
        }
      }
      date = isNullOrUndefined(scrollDate) ? this.parent.getStartEndTime(hour) : date;
      if (isNullOrUndefined(date)) {
        return;
      }
      var scrollLeft;
      if (isNullOrUndefined(hour) || !this.parent.activeViewOptions.timeScale.enable) {
        scrollLeft = index * getElementWidth(this.element.querySelector(".e-work-cells"));
      } else {
        scrollLeft = isNullOrUndefined(scrollDate) ? this.getLeftFromDateTime(null, date) : this.getLeftFromDateTime([index], date);
      }
      this.getScrollableElement().scrollLeft = !this.parent.enableRtl ? scrollLeft : -scrollLeft;
    };
    TimelineViews2.prototype.generateColumnLevels = function() {
      var levels = [];
      var dateSlots = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      levels.push(dateSlots);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.generateResourceLevels(dateSlots, !this.parent.uiStateValues.isGroupAdaptive);
      }
      var hourSlots = [];
      if (this.parent.activeViewOptions.timeScale.enable) {
        hourSlots = this.generateTimeSlots(levels[levels.length - 1]);
        levels.push(hourSlots);
      }
      if (this.parent.activeViewOptions.headerRows.length > 0) {
        var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);
        levels = renderGn.generateColumnLevels(dateSlots, hourSlots);
      }
      return levels;
    };
    TimelineViews2.prototype.generateTimeSlots = function(dateSlots) {
      var _this = this;
      var handler = function(r) {
        r.type = r.first ? "majorSlot" : "minorSlot";
        r.className = r.first ? [TIME_SLOT_CLASS] : [TIME_SLOT_CLASS, TIME_CELLS_CLASS];
        r.workDays = _this.parent.activeViewOptions.workDays;
        return r;
      };
      var timeSlotData = this.getTimeSlotRows(handler);
      var slots = [];
      for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {
        var data = dateSlots_1[_i];
        data.colSpan = timeSlotData.length;
        var tempTimeSlots = extend([], timeSlotData, null, true);
        for (var _a = 0, tempTimeSlots_1 = tempTimeSlots; _a < tempTimeSlots_1.length; _a++) {
          var slot = tempTimeSlots_1[_a];
          var cellDate = resetTime(/* @__PURE__ */ new Date("" + data.date));
          slot.date = setTime(cellDate, getDateInMs(slot.date));
          slots.push(slot);
        }
      }
      return slots;
    };
    TimelineViews2.prototype.changeCurrentTimePosition = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var left = this.getLeftFromDateTime(currentDateIndex, this.parent.getCurrentTime());
      var height = this.element.querySelector("." + CONTENT_TABLE_CLASS).offsetHeight;
      var headerWrap = this.element.querySelector("." + DATE_HEADER_WRAP_CLASS);
      var contentWrap = this.element.querySelector("." + CONTENT_WRAP_CLASS);
      contentWrap.appendChild(createElement("div", {
        className: CURRENT_TIMELINE_CLASS,
        styles: (this.parent.enableRtl ? "right" : "left") + ":" + formatUnit(left) + "; height:" + formatUnit(height)
      }));
      if (this.parent.virtualScrollModule) {
        var timeIndicator = this.parent.element.querySelector("." + CURRENT_TIMELINE_CLASS);
        var element = this.parent.element.querySelector("." + CONTENT_WRAP_CLASS + " table");
        setStyleAttribute(timeIndicator, {
          transform: element.style.transform
        });
      }
      var currentTimeEle = createElement("div", {
        innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS
      });
      headerWrap.appendChild(currentTimeEle);
      currentTimeEle.style[this.parent.enableRtl ? "right" : "left"] = formatUnit(left - currentTimeEle.offsetWidth / 2);
    };
    TimelineViews2.prototype.getLeftFromDateTime = function(currentDateIndex, date) {
      var startHour = this.getStartHour();
      var diffInDates = 0;
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      if (!isNullOrUndefined(currentDateIndex)) {
        if (currentDateIndex[0] !== 0) {
          var index = this.parent.activeView.colLevels.findIndex(function(level) {
            return level[0].type === "dateHeader";
          });
          if (this.parent.activeView.colLevels[parseInt(index.toString(), 10)] && this.parent.activeView.colLevels[parseInt(index.toString(), 10)][0].colSpan) {
            diffInDates = currentDateIndex[0] * this.parent.activeView.colLevels[parseInt(index.toString(), 10)][0].colSpan * getElementWidth(this.element.querySelector(".e-work-cells"));
          } else {
            var endHour = this.getEndHour();
            var end = endHour.getHours() === 0 ? 24 : endHour.getHours();
            diffInMinutes = diffInMinutes + currentDateIndex[0] * ((end - startHour.getHours()) * 60 + (endHour.getMinutes() - startHour.getMinutes()));
          }
        }
      }
      return diffInDates + diffInMinutes * getElementWidth(this.element.querySelector(".e-work-cells")) * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };
    TimelineViews2.prototype.renderHeader = function() {
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      }
      var dateTd = createElement("td");
      dateTd.appendChild(this.renderDatesHeader());
      tr.appendChild(dateTd);
      prepend([tr], this.element.querySelector("tbody"));
    };
    TimelineViews2.prototype.createAllDayRow = function(table, tdData) {
    };
    TimelineViews2.prototype.getCurrentTimeIndicatorIndex = function() {
      var currentDateIndex = [];
      var index = this.parent.getIndexOfDate(this.renderDates, resetTime(this.parent.getCurrentTime()));
      if (index >= 0) {
        currentDateIndex.push(index);
      }
      return currentDateIndex;
    };
    TimelineViews2.prototype.renderContent = function() {
      var tr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var resTd = createElement("td");
        resTd.appendChild(this.parent.resourceBase.createResourceColumn());
        tr.appendChild(resTd);
      }
      var workTd = createElement("td");
      var wrap = this.renderContentArea();
      wrap.appendChild(this.createEventTable(this.getRowCount()));
      this.collapseRows(wrap);
      workTd.appendChild(wrap);
      tr.appendChild(workTd);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      this.element.querySelector("tbody").appendChild(tr);
    };
    TimelineViews2.prototype.getRowCount = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.resourceBase.renderedResources.length;
      }
      return 1;
    };
    TimelineViews2.prototype.getResourceTdData = function(i, tdData) {
      var resLevel = this.parent.resourceBase.renderedResources[parseInt(i.toString(), 10)];
      var resSHr = resLevel.resourceData[resLevel.resource.startHourField] || this.parent.workHours.start;
      var resEHr = resLevel.resourceData[resLevel.resource.endHourField] || this.parent.workHours.end;
      tdData.startHour = this.parent.getStartEndTime(resSHr);
      tdData.endHour = this.parent.getStartEndTime(resEHr);
      tdData.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;
      tdData.className = resLevel.className;
      tdData.groupIndex = resLevel.groupIndex;
      tdData.groupOrder = resLevel.groupOrder;
      return tdData;
    };
    TimelineViews2.prototype.renderContentTable = function(table) {
      var tBody = table.querySelector("tbody");
      append(this.getContentRows(), tBody);
    };
    TimelineViews2.prototype.getContentRows = function() {
      var rows = [];
      var tr = createElement("tr");
      var td = createElement("td", { attrs: { "aria-selected": "false" } });
      var trCount = this.getRowCount();
      for (var i = 0; i < trCount; i++) {
        var ntr = tr.cloneNode();
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {
          var tdData = _a[_i];
          if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            tdData = this.getResourceTdData(i, tdData);
          }
          var ntd = this.createContentTd(tdData, tdData, td);
          ntr.appendChild(ntd);
        }
        rows.push(ntr);
      }
      return rows;
    };
    TimelineViews2.prototype.getContentTdClass = function(r) {
      return r.first || !this.parent.activeViewOptions.timeScale.enable ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];
    };
    TimelineViews2.prototype.renderEvents = function() {
      this.timelineAppointment = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? "hour" : "day");
      this.timelineAppointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    TimelineViews2.prototype.getAdjustedDate = function(date) {
      if (!this.parent.activeViewOptions.timeScale.enable) {
        return new Date(date.setHours(0, 0, 0, 0));
      } else {
        var timeSlots = this.colLevels[this.colLevels.length - 1];
        for (var i = 0; i < timeSlots.length; i++) {
          if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > date.getTime()) {
            return timeSlots[i - 1].date;
          }
        }
      }
      return null;
    };
    TimelineViews2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.timelineAppointment) {
        this.timelineAppointment.destroy();
        this.timelineAppointment = null;
      }
      _super.prototype.destroy.call(this);
    };
    return TimelineViews2;
  }(VerticalView)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-month.js
var __extends63 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineMonth = (
  /** @class */
  function(_super) {
    __extends63(TimelineMonth2, _super);
    function TimelineMonth2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-timeline-month-view";
      _this.isInverseTableSelect = true;
      _this.appointment = null;
      return _this;
    }
    TimelineMonth2.prototype.getModuleName = function() {
      return "timelineMonth";
    };
    TimelineMonth2.prototype.onDataReady = function() {
      this.appointment = new TimelineEvent(this.parent, "day");
      this.appointment.renderAppointments();
      this.parent.notify(eventsLoaded, {});
    };
    TimelineMonth2.prototype.getLeftPanelElement = function() {
      return this.element.querySelector("." + RESOURCE_COLUMN_WRAP_CLASS);
    };
    TimelineMonth2.prototype.scrollTopPanel = function(target) {
      _super.prototype.scrollTopPanel.call(this, target);
      this.scrollHeaderLabels(target);
    };
    TimelineMonth2.prototype.setContentHeight = function(content, leftPanelElement, height) {
      if (leftPanelElement) {
        leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
      }
      content.style.height = formatUnit(height);
    };
    TimelineMonth2.prototype.getDateSlots = function(renderDates, workDays) {
      var dateSlots = [];
      for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {
        var col = renderDates_1[_i];
        var classList2 = [HEADER_CELLS_CLASS];
        if (this.isCurrentDate(col)) {
          classList2.push(CURRENT_DAY_CLASS);
        }
        dateSlots.push({ date: col, type: "dateHeader", className: classList2, colSpan: 1, workDays });
      }
      return dateSlots;
    };
    TimelineMonth2.prototype.renderLeftIndent = function(tr) {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      }
    };
    TimelineMonth2.prototype.renderContent = function() {
      var contentTr = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var resTd = createElement("td");
        resTd.appendChild(this.parent.resourceBase.createResourceColumn());
        contentTr.appendChild(resTd);
      }
      var contentTd = createElement("td");
      this.element.querySelector("tbody").appendChild(contentTr);
      var wrap = createElement("div", { className: CONTENT_WRAP_CLASS });
      wrap.appendChild(this.renderContentArea());
      wrap.appendChild(this.createEventTable(this.getRowCount()));
      this.collapseRows(wrap);
      EventHandler.add(wrap, "scroll", this.onContentScroll, this);
      contentTd.appendChild(wrap);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(wrap);
      }
      contentTr.appendChild(contentTd);
    };
    TimelineMonth2.prototype.getRowCount = function() {
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        return this.parent.resourceBase.renderedResources.length;
      }
      return 1;
    };
    TimelineMonth2.prototype.getContentSlots = function() {
      var slotDatas = [];
      for (var row = 0; row < this.getRowCount(); row++) {
        for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {
          var data = _a[_i];
          data.className = [WORK_CELLS_CLASS];
          if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            var resLevel = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
            data.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;
            data.className = data.className.concat(resLevel.className);
            data.groupIndex = resLevel.groupIndex;
            data.groupOrder = resLevel.groupOrder;
          }
          var slotData = {
            date: /* @__PURE__ */ new Date(+data.date),
            colSpan: data.colSpan,
            groupIndex: data.groupIndex,
            workDays: data.workDays,
            type: "monthCells",
            className: data.className
          };
          if (!slotDatas[parseInt(row.toString(), 10)]) {
            slotDatas[parseInt(row.toString(), 10)] = [];
          }
          slotDatas[parseInt(row.toString(), 10)].push(slotData);
        }
      }
      return slotDatas;
    };
    TimelineMonth2.prototype.updateClassList = function(data) {
      if (!this.parent.isMinMaxDate(data.date)) {
        data.className.push(DISABLE_DATES);
      }
    };
    TimelineMonth2.prototype.unWireEvents = function() {
      EventHandler.remove(this.getContentAreaElement(), "scroll", this.onContentScroll);
    };
    TimelineMonth2.prototype.getMonthStart = function(currentDate) {
      var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };
    TimelineMonth2.prototype.getMonthEnd = function(currentDate) {
      var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));
      return this.parent.calendarUtil.lastDateOfMonth(addMonths(/* @__PURE__ */ new Date(+monthStart), this.parent.activeViewOptions.interval - 1));
    };
    TimelineMonth2.prototype.generateColumnLevels = function() {
      var colLevels = [];
      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);
      colLevels.push(level);
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.parent.resourceBase.generateResourceLevels(level, !this.parent.uiStateValues.isGroupAdaptive);
      }
      var hourSlots = [];
      if (this.parent.activeViewOptions.headerRows.length > 0) {
        var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);
        colLevels = renderGn.generateColumnLevels(level, hourSlots);
      }
      this.colLevels = colLevels;
      return colLevels;
    };
    TimelineMonth2.prototype.getAdjustedDate = function(startTime) {
      var timeSlots = this.colLevels[this.colLevels.length - 1];
      for (var i = 0; i < timeSlots.length; i++) {
        if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startTime.getTime()) {
          return timeSlots[i - 1].date;
        }
      }
      return null;
    };
    TimelineMonth2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      if (this.element) {
        var contentScrollableEle = this.element.querySelector("." + CONTENT_WRAP_CLASS);
        if (contentScrollableEle) {
          EventHandler.remove(contentScrollableEle, "scroll", this.onContentScroll);
        }
      }
      if (this.appointment) {
        this.appointment.destroy();
        this.appointment = null;
      }
      _super.prototype.destroy.call(this);
    };
    return TimelineMonth2;
  }(Month)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/timeline-year.js
var __extends64 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimelineYear = (
  /** @class */
  function(_super) {
    __extends64(TimelineYear2, _super);
    function TimelineYear2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.viewClass = "e-timeline-year-view";
      _this.isInverseTableSelect = true;
      return _this;
    }
    TimelineYear2.prototype.getModuleName = function() {
      return "timelineYear";
    };
    TimelineYear2.prototype.renderHeader = function(headerWrapper) {
      var tr = createElement("tr");
      headerWrapper.appendChild(tr);
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.renderResourceHeaderIndent(tr);
      } else {
        var leftHeaderCells = createElement("td", { className: LEFT_INDENT_CLASS });
        tr.appendChild(leftHeaderCells);
        leftHeaderCells.appendChild(this.renderResourceHeader(LEFT_INDENT_WRAP_CLASS));
      }
      var isHorizontal = this.parent.activeViewOptions.orientation === "Horizontal";
      var isGroup = this.parent.activeViewOptions.group.resources.length > 0;
      this.isInverseTableSelect = isHorizontal && !isGroup ? false : true;
      var td = createElement("td");
      tr.appendChild(td);
      var container = createElement("div", { className: DATE_HEADER_CONTAINER_CLASS });
      td.appendChild(container);
      if (this.parent.activeViewOptions.orientation === "Horizontal" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        container.appendChild(this.renderResourceHeader(DATE_HEADER_WRAP_CLASS));
        this.columnCount = this.colLevels.slice(-1)[0].length;
      } else {
        var wrapper = createElement("div", { className: DATE_HEADER_WRAP_CLASS });
        container.appendChild(wrapper);
        var table = this.createTableLayout();
        wrapper.appendChild(table);
        table.appendChild(this.createTableColGroup(this.columnCount));
        var innerTr = createElement("tr");
        table.querySelector("tbody").appendChild(innerTr);
        var months = this.getMonths();
        var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));
        for (var column = 0; column < this.columnCount; column++) {
          var date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);
          var innerTd = createElement("td", { className: HEADER_CELLS_CLASS });
          if (this.parent.activeViewOptions.orientation === "Horizontal") {
            if (this.parent.dayHeaderTemplate) {
              append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(column.toString(), 10)], column, "dayHeaderTemplate"), innerTd);
            } else {
              innerTd.innerHTML = "<span>" + this.parent.getDayNames("abbreviated")[column % 7] + "</span>";
            }
          } else {
            if (this.parent.monthHeaderTemplate) {
              append(this.renderDayMonthHeaderTemplate(date, months[parseInt(column.toString(), 10)], "monthHeaderTemplate"), innerTd);
            } else {
              innerTd.innerHTML = "<span>" + this.getMonthName(date) + "</span>";
            }
            innerTd.setAttribute("data-date", date.getTime().toString());
          }
          innerTr.appendChild(innerTd);
          this.parent.trigger(renderCell, { elementType: "headerCells", element: innerTd });
        }
      }
    };
    TimelineYear2.prototype.renderResourceHeader = function(className) {
      var wrap = createElement("div", { className });
      var tbl = this.createTableLayout();
      wrap.appendChild(tbl);
      var trEle = createElement("tr");
      if (this.parent.activeViewOptions.group.resources.length > 0) {
        this.colLevels = this.generateColumnLevels();
      } else {
        var colData = [{ className: [HEADER_CELLS_CLASS], type: "headerCell" }];
        this.colLevels = [colData];
      }
      for (var _i = 0, _a = this.colLevels; _i < _a.length; _i++) {
        var col = _a[_i];
        var ntr = trEle.cloneNode();
        var count = className === DATE_HEADER_WRAP_CLASS ? col : [col[0]];
        for (var _b = 0, count_1 = count; _b < count_1.length; _b++) {
          var c = count_1[_b];
          var tdEle = createElement("td");
          if (c.className) {
            addClass([tdEle], c.className);
          }
          if (className === DATE_HEADER_WRAP_CLASS) {
            if (c.template) {
              append(c.template, tdEle);
            }
            if (c.colSpan) {
              tdEle.setAttribute("colspan", c.colSpan.toString());
            }
            if (c.groupIndex > -1) {
              tdEle.setAttribute("data-group-index", c.groupIndex.toString());
            }
            this.setResourceHeaderContent(tdEle, c);
          }
          if (className === LEFT_INDENT_WRAP_CLASS) {
            this.parent.renderHeaderIndentTemplate(c, tdEle);
          }
          var args = { elementType: c.type, element: tdEle, date: c.date, groupIndex: c.groupIndex };
          this.parent.trigger(renderCell, args);
          ntr.appendChild(tdEle);
        }
        tbl.querySelector("tbody").appendChild(ntr);
      }
      if (className === DATE_HEADER_WRAP_CLASS) {
        tbl.appendChild(this.createTableColGroup(this.colLevels.slice(-1)[0].length));
      }
      return wrap;
    };
    TimelineYear2.prototype.renderContent = function(contentWrapper) {
      var tr = createElement("tr");
      contentWrapper.appendChild(tr);
      var firstTd = createElement("td");
      var lastTd = createElement("td");
      var tdCollection = [];
      var monthTBody;
      if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        tdCollection.push(firstTd);
        firstTd.appendChild(this.parent.resourceBase.createResourceColumn());
        this.rowCount = this.parent.resourceBase.renderedResources.length;
      } else {
        tdCollection.push(firstTd);
        var monthWrapper = createElement("div", { className: MONTH_HEADER_WRAPPER });
        firstTd.appendChild(monthWrapper);
        monthWrapper.appendChild(this.createTableLayout());
        monthTBody = monthWrapper.querySelector("tbody");
      }
      tdCollection.push(lastTd);
      append(tdCollection, tr);
      var content = createElement("div", { className: CONTENT_WRAP_CLASS });
      lastTd.appendChild(content);
      var contentTable = this.createTableLayout(CONTENT_TABLE_CLASS);
      this.setAriaAttributes(contentTable);
      content.appendChild(contentTable);
      var eventWrapper = createElement("div", { className: EVENT_TABLE_CLASS });
      content.appendChild(eventWrapper);
      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.renderVirtualTrack(content);
      }
      var contentTBody = contentTable.querySelector("tbody");
      if (this.parent.rowAutoHeight) {
        var addClassTable = [contentTable];
        var monthHeader = this.parent.element.querySelector("." + MONTH_HEADER_WRAPPER + " ." + SCHEDULE_TABLE_CLASS);
        if (monthHeader) {
          addClassTable.push(monthHeader);
        }
        addClass(addClassTable, AUTO_HEIGHT);
      }
      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var colCount = this.parent.activeViewOptions.orientation === "Horizontal" ? this.colLevels.slice(-1)[0].length : this.columnCount;
        contentTable.appendChild(this.createTableColGroup(colCount));
        this.renderResourceContent(eventWrapper, monthTBody, contentTBody);
      } else {
        contentTable.appendChild(this.createTableColGroup(this.columnCount));
        this.renderDefaultContent(eventWrapper, monthTBody, contentTBody);
      }
    };
    TimelineYear2.prototype.renderDefaultContent = function(wrapper, monthBody, contentBody) {
      var months = this.getMonths();
      var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));
      for (var month = 0; month < this.rowCount; month++) {
        wrapper.appendChild(createElement("div", { className: APPOINTMENT_CONTAINER_CLASS }));
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
        var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
        var tr = createElement("tr");
        var monthTr = tr.cloneNode();
        monthBody.appendChild(monthTr);
        var contentTr = tr.cloneNode();
        contentBody.appendChild(contentTr);
        var monthTd = createElement("td", { className: MONTH_HEADER_CLASS });
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          if (this.parent.monthHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(monthStart, month, "monthHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.getMonthName(monthDate) + "</span>";
          }
          monthTd.setAttribute("data-date", monthDate.getTime().toString());
        } else {
          if (this.parent.dayHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(month.toString(), 10)], month, "dayHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.parent.getDayNames("abbreviated")[month % 7] + "</span>";
          }
        }
        monthTr.appendChild(monthTd);
        this.parent.trigger(renderCell, { elementType: "leftHeaderCells", element: monthTd });
        var date = new Date(monthStart.getTime());
        for (var column = 0; column < this.columnCount; column++) {
          var isDateAvail = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);
            monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
            monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));
            var dayDate = month - monthStart.getDay() + 1;
            date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], dayDate);
            isDateAvail = dayDate > 0 && date.getTime() < monthEnd.getTime();
          } else {
            isDateAvail = column >= monthStart.getDay() && date.getTime() < monthEnd.getTime();
          }
          var announcementText = this.parent.globalize.formatDate(date, {
            skeleton: "full",
            calendar: this.parent.getCalendarMode()
          });
          var td = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: { "aria-selected": "false", "aria-label": announcementText }
          });
          contentTr.appendChild(td);
          var dateHeader = createElement("div", {
            className: DATE_HEADER_CLASS + " " + NAVIGATE_CLASS,
            innerHTML: isDateAvail ? this.parent.globalize.formatDate(date, { skeleton: "d", calendar: this.parent.getCalendarMode() }) : ""
          });
          if (isDateAvail) {
            var tds = [td];
            var classList2 = [];
            if (this.parent.activeViewOptions.workDays.indexOf(date.getDay()) > -1) {
              classList2.push(WORKDAY_CLASS);
            }
            if (!this.parent.isMinMaxDate(date)) {
              addClass([td], DISABLE_DATES);
            }
            if (this.isCurrentDate(date)) {
              classList2.push(CURRENT_DAY_CLASS);
              if (this.parent.activeViewOptions.orientation === "Horizontal") {
                tds.push(this.element.querySelector("." + HEADER_CELLS_CLASS + (":nth-child(" + (column + 1) + ")")));
              } else {
                tds.push(this.element.querySelectorAll("." + MONTH_HEADER_CLASS).item(month));
              }
            }
            if (classList2.length > 0) {
              addClass(tds, classList2);
            }
          } else {
            addClass([td], OTHERMONTH_CLASS);
            if (!this.parent.isMinMaxDate(date)) {
              addClass([td], DISABLE_DATES);
            }
          }
          if (td.classList.contains(OTHERMONTH_CLASS)) {
            continue;
          } else {
            this.renderDates.push(new Date(date));
          }
          td.appendChild(dateHeader);
          if (isDateAvail) {
            td.setAttribute("data-date", date.getTime().toString());
            this.wireEvents(td);
          }
          this.renderCellTemplate({ date, type: "workCells" }, td);
          this.parent.trigger(renderCell, { elementType: "workCells", element: td, date });
          if (isDateAvail) {
            if (this.parent.activeViewOptions.orientation === "Horizontal") {
              date = addDays(new Date(date.getTime()), 1);
            }
          }
        }
      }
      this.renderDates.splice(0, 1);
    };
    TimelineYear2.prototype.getContentRows = function() {
      var tRow = [];
      var monthCells = this.getMonths();
      for (var row = 0; row < this.parent.resourceBase.renderedResources.length; row++) {
        var tr = createElement("tr");
        tRow.push(tr);
        var resData = void 0;
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
        }
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(row.toString(), 10)], 1);
        var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        for (var month = 0; month < this.columnCount; month++) {
          var classList2 = [];
          var groupIndex = resData.groupIndex;
          classList2 = classList2.concat(resData.className);
          if (classList2.indexOf(RESOURCE_PARENT_CLASS) > -1) {
            classList2.push(RESOURCE_GROUP_CELLS_CLASS);
          } else {
            classList2.push(WORKDAY_CLASS);
          }
          monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(month.toString(), 10)], 1);
          date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
          var tdELe = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: {
              "aria-selected": "false",
              "data-date": date.getTime().toString()
            }
          });
          addClass([tdELe], classList2);
          tdELe.setAttribute("data-group-index", groupIndex.toString());
          this.renderCellTemplate({ date, type: "resourceGroupCells", groupIndex }, tdELe);
          this.wireEvents(tdELe);
          this.parent.trigger(renderCell, { elementType: "resourceGroupCells", element: tdELe, date });
          tr.appendChild(tdELe);
        }
      }
      return tRow;
    };
    TimelineYear2.prototype.renderResourceContent = function(wrapper, monthBody, contentBody) {
      var months = this.getMonths();
      for (var row = 0; row < this.rowCount; row++) {
        wrapper.appendChild(createElement("div", { className: APPOINTMENT_CONTAINER_CLASS }));
        var tr = createElement("tr");
        contentBody.appendChild(tr);
        var resData = void 0;
        if (this.parent.activeViewOptions.orientation === "Vertical" && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
          resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];
        }
        var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);
        var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
        if (this.parent.activeViewOptions.orientation === "Horizontal") {
          var monthTr = tr.cloneNode();
          monthBody.appendChild(monthTr);
          var monthTd = createElement("td", {
            className: MONTH_HEADER_CLASS,
            attrs: { "data-date": date.getTime().toString() }
          });
          if (this.parent.monthHeaderTemplate) {
            append(this.renderDayMonthHeaderTemplate(monthDate, row, "monthHeaderTemplate"), monthTd);
          } else {
            monthTd.innerHTML = "<span>" + this.getMonthName(monthDate) + "</span>";
          }
          monthTr.appendChild(monthTd);
        }
        for (var month = 0; month < this.columnCount; month++) {
          var classList2 = [];
          var groupIndex = void 0;
          if (this.parent.activeViewOptions.orientation === "Vertical") {
            groupIndex = resData.groupIndex;
            classList2 = classList2.concat(resData.className);
            if (classList2.indexOf(RESOURCE_PARENT_CLASS) > -1) {
              classList2.push(RESOURCE_GROUP_CELLS_CLASS);
            } else {
              classList2.push(WORKDAY_CLASS);
            }
            monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);
            date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));
          } else {
            groupIndex = this.colLevels.slice(-1)[0][parseInt(month.toString(), 10)].groupIndex;
            classList2.push(WORKDAY_CLASS);
          }
          var startDateText = this.parent.globalize.formatDate(date, { type: "dateTime", skeleton: "full", calendar: this.parent.getCalendarMode() });
          var endDateText = this.parent.globalize.formatDate(this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime())), { type: "dateTime", skeleton: "full", calendar: this.parent.getCalendarMode() });
          var td = createElement("td", {
            className: WORK_CELLS_CLASS,
            attrs: {
              "aria-selected": "false",
              "data-date": date.getTime().toString(),
              "aria-label": startDateText + " " + this.parent.localeObj.getConstant("endAt") + " " + endDateText
            }
          });
          addClass([td], classList2);
          td.setAttribute("data-group-index", groupIndex.toString());
          this.renderCellTemplate({ date, type: "resourceGroupCells", groupIndex }, td);
          this.wireEvents(td);
          tr.appendChild(td);
          this.parent.trigger(renderCell, { elementType: "resourceGroupCells", element: td, date });
        }
      }
      if (this.parent.activeViewOptions.orientation === "Vertical") {
        this.collapseRows(this.parent.element.querySelector("." + CONTENT_WRAP_CLASS));
      }
    };
    TimelineYear2.prototype.renderDayMonthHeaderTemplate = function(date, column, type) {
      var args = { date, type: type === "dayHeaderTemplate" ? "dayHeader" : "monthHeader" };
      var dayId = "schedule_" + this.parent.activeViewOptions.dayHeaderTemplateName + "dayHeaderTemplate";
      var monthId = "schedule_" + this.parent.activeViewOptions.dayHeaderTemplateName + "monthHeaderTemplate";
      if (type === "dayHeaderTemplate") {
        args.day = this.parent.getDayNames("wide")[column % 7];
        return [].slice.call(this.parent.getDayHeaderTemplate()(args, this.parent, "dayHeaderTemplate", dayId, false, void 0, void 0, this.parent.root));
      } else {
        return [].slice.call(this.parent.getMonthHeaderTemplate()(args, this.parent, "monthHeaderTemplate", monthId, false, void 0, void 0, this.parent.root));
      }
    };
    TimelineYear2.prototype.renderCellTemplate = function(data, td) {
      if (!this.parent.activeViewOptions.cellTemplate || td.classList.contains(OTHERMONTH_CLASS)) {
        return;
      }
      var args = { date: data.date, type: data.type };
      if (data.groupIndex) {
        args.groupIndex = data.groupIndex;
      }
      var scheduleId = this.parent.element.id + "_";
      var viewName = this.parent.activeViewOptions.cellTemplateName;
      var templateId = scheduleId + viewName + "cellTemplate";
      var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args, this.parent, "cellTemplate", templateId, false, void 0, void 0, this.parent.root));
      append(cellTemplate, td);
    };
    TimelineYear2.prototype.scrollToDate = function(scrollDate) {
      var date;
      if (this.parent.activeViewOptions.group.resources !== null && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        date = +new Date(resetTime(firstDateOfMonth(scrollDate)));
      } else {
        date = +new Date(resetTime(scrollDate));
      }
      var element = this.element.querySelector('[data-date="' + date + '"]');
      if (element) {
        var wrap = this.getScrollableElement();
        if (this.parent.enableRtl) {
          var conTable = this.element.querySelector("." + CONTENT_TABLE_CLASS);
          wrap.scrollLeft = -(conTable.offsetWidth - element.offsetLeft - element.offsetWidth);
        } else {
          wrap.scrollLeft = element.offsetLeft;
        }
        wrap.scrollTop = element.offsetTop;
      }
    };
    TimelineYear2.prototype.getScrollableElement = function() {
      if (this.parent.isAdaptive && !this.isTimelineView()) {
        return this.element.querySelector("." + SCROLL_CONTAINER_CLASS);
      } else {
        return this.getContentAreaElement();
      }
    };
    TimelineYear2.prototype.wireEvents = function(element) {
      EventHandler.add(element, "mousedown", this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      EventHandler.add(element, "click", this.parent.workCellAction.cellClick, this.parent.workCellAction);
      if (!this.parent.isAdaptive) {
        EventHandler.add(element, "dblclick", this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };
    return TimelineYear2;
  }(Year)
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/calendar-export.js
var ICalendarExport = (
  /** @class */
  function() {
    function ICalendarExport2(parent) {
      this.parent = parent;
    }
    ICalendarExport2.prototype.initializeCalendarExport = function(fileName, customData) {
      var icsString = this.getCalendarString(fileName, customData);
      this.download(icsString, fileName);
    };
    ICalendarExport2.prototype.getCalendarString = function(fileName, customData) {
      var _this = this;
      var eventsData = customData ? customData : extend([], this.parent.eventsData, null, true);
      eventsData = this.parent.eventBase.sortByTime(eventsData);
      var SEPARATOR3 = navigator.appVersion.indexOf("Win") !== -1 ? "\r\n" : "\n";
      var iCalendarEvents = [];
      var filterCollection = [];
      var timeZone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();
      var fields = this.parent.eventFields;
      eventsData.forEach(function(eventObj) {
        var uId = eventObj[fields.id] || eventObj.Guid || _this.parent.eventBase.generateGuid();
        var editedExDate = [];
        if (eventObj[fields.recurrenceID]) {
          var filter = _this.filterEvents(filterCollection, fields.id, eventObj[fields.recurrenceID]);
          uId = filter.length > 0 ? filter[0].UID : uId;
        }
        if (!eventObj[fields.recurrenceID] && eventObj[fields.recurrenceRule] && eventObj[fields.recurrenceException]) {
          var exDate = eventObj[fields.recurrenceException].split(",");
          var editedObj = _this.filterEvents(eventsData, fields.recurrenceID, eventObj[fields.id]);
          editedObj.forEach(function(edited) {
            editedExDate.push(getRecurrenceStringFromDate(edited[fields.startTime]));
          });
          var exceptionDateList = exDate.filter(function(value) {
            return editedExDate.indexOf(value) === -1;
          });
          eventObj[fields.recurrenceException] = exceptionDateList.length > 0 ? exceptionDateList.join(",") + "," : "";
        }
        var startZone = eventObj[fields.startTimezone] || timeZone;
        var endZone = eventObj[fields.endTimezone] || timeZone;
        var readonly = eventObj[fields.isReadonly] ? eventObj[fields.isReadonly] : false;
        var calendarEvent = [
          "BEGIN:VEVENT",
          "LOCATION:" + (eventObj[fields.location] || ""),
          "SUMMARY:" + (eventObj[fields.subject] || ""),
          "UID:" + uId,
          "DESCRIPTION:" + (eventObj[fields.description] || ""),
          "ISREADONLY:" + readonly,
          "END:VEVENT"
        ];
        if (eventObj[fields.isAllDay]) {
          calendarEvent.splice(4, 0, "DTEND;VALUE=DATE:" + _this.convertDateToString(eventObj[fields.endTime], true));
          calendarEvent.splice(4, 0, "DTSTART;VALUE=DATE:" + _this.convertDateToString(eventObj[fields.startTime], true));
        } else if (!eventObj[fields.isAllDay] && !eventObj[fields.recurrenceRule]) {
          calendarEvent.splice(4, 0, "DTEND:" + _this.convertDateToString(eventObj[fields.endTime]));
          calendarEvent.splice(4, 0, "DTSTART:" + _this.convertDateToString(eventObj[fields.startTime]));
        } else {
          calendarEvent.splice(4, 0, 'DTEND;TZID="' + endZone + '":' + _this.convertDateToString(eventObj[fields.endTime]));
          calendarEvent.splice(4, 0, 'DTSTART;TZID="' + startZone + '":' + _this.convertDateToString(eventObj[fields.startTime]));
        }
        if (eventObj[fields.recurrenceRule]) {
          calendarEvent.splice(4, 0, "RRULE:" + eventObj[fields.recurrenceRule]);
        }
        if (eventObj[fields.recurrenceException]) {
          var exDate = eventObj[fields.recurrenceException].split(",");
          for (var i = 0; i < exDate.length - 1; i++) {
            calendarEvent.splice(5, 0, "EXDATE:" + _this.convertDateToString(getDateFromRecurrenceDateString(exDate[parseInt(i.toString(), 10)]), eventObj[fields.isAllDay]));
          }
        }
        if (eventObj[fields.recurrenceID]) {
          calendarEvent.splice(4, 0, 'RECURRENCE-ID;TZID="' + startZone + '":' + _this.convertDateToString(eventObj[fields.startTime], eventObj[fields.isAllDay]));
        }
        var customFields = _this.customFieldFilter(eventObj, fields);
        if (customFields.length > 0) {
          customFields.forEach(function(customField) {
            return calendarEvent.splice(4, 0, customField + ":" + (eventObj["" + customField] || ""));
          });
        }
        var app = extend({}, eventObj);
        app.UID = uId;
        filterCollection.push(app);
        iCalendarEvents.push(calendarEvent.join(SEPARATOR3));
      });
      var iCalendar = [
        "BEGIN:VCALENDAR",
        "PRODID:-//Syncfusion Inc//Scheduler//EN",
        "VERSION:2.0",
        "CALSCALE:GREGORIAN",
        "METHOD:PUBLISH",
        "X-WR-CALNAME:" + (fileName || "Calendar"),
        "X-WR-TIMEZONE:" + timeZone
      ].join(SEPARATOR3);
      var icsString = iCalendar + SEPARATOR3 + iCalendarEvents.join(SEPARATOR3) + SEPARATOR3 + "END:VCALENDAR";
      return icsString;
    };
    ICalendarExport2.prototype.customFieldFilter = function(eventObj, fields) {
      var defaultFields = Object.keys(fields).map(function(key) {
        return fields["" + key];
      });
      var eventFields = Object.keys(eventObj);
      return eventFields.filter(function(value) {
        return defaultFields.indexOf(value) === -1 && value !== "Guid";
      });
    };
    ICalendarExport2.prototype.convertDateToString = function(eventDate, allDay) {
      var year = ("0000" + eventDate.getFullYear().toString()).slice(-4);
      var month = ("00" + (eventDate.getMonth() + 1).toString()).slice(-2);
      var date = ("00" + eventDate.getDate().toString()).slice(-2);
      var hours = ("00" + eventDate.getHours().toString()).slice(-2);
      var minutes = ("00" + eventDate.getMinutes().toString()).slice(-2);
      var seconds = ("00" + eventDate.getSeconds().toString()).slice(-2);
      var timeString = allDay ? year + month + date : year + month + date + "T" + hours + minutes + seconds;
      return timeString;
    };
    ICalendarExport2.prototype.download = function(icsString, fileName) {
      var buffer = new Blob([icsString], { type: "data:text/calendar;charset=utf8" });
      fileName = (fileName || "Calendar") + ".ics";
      if (navigator.msSaveBlob) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink_1 = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        downloadLink_1.download = fileName;
        downloadLink_1.href = URL.createObjectURL(buffer);
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink_1.dispatchEvent(event_1);
        setTimeout(function() {
          URL.revokeObjectURL(downloadLink_1.href);
          downloadLink_1.href = void 0;
        });
      }
    };
    ICalendarExport2.prototype.filterEvents = function(data, field, value) {
      return data.filter(function(e) {
        return e["" + field] === value;
      });
    };
    ICalendarExport2.prototype.getModuleName = function() {
      return "iCalendarExport";
    };
    ICalendarExport2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
      this.parent = null;
    };
    return ICalendarExport2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/calendar-import.js
var ICalendarImport = (
  /** @class */
  function() {
    function ICalendarImport2(parent) {
      this.allDay = false;
      this.parent = parent;
    }
    ICalendarImport2.prototype.initializeCalendarImport = function(fileContent) {
      var _this = this;
      if (fileContent && fileContent instanceof Blob) {
        var fileReader_1 = new FileReader();
        fileReader_1.onload = function() {
          var iCalString = fileReader_1.result;
          _this.iCalendarParser(iCalString);
        };
        fileReader_1.readAsText(fileContent, "UTF-8");
      } else if (fileContent && typeof fileContent === "string") {
        this.iCalendarParser(fileContent);
      }
    };
    ICalendarImport2.prototype.iCalendarParser = function(iCalString) {
      var iCalData = {
        isEvent: false,
        curEvent: null,
        id: this.parent.eventBase.getEventMaxID(),
        count: 0,
        events: [],
        key: null
      };
      var iStringLength = iCalString.length;
      var lastPosition = iCalString.search(/[^ \t]/);
      var position = lastPosition;
      var iString;
      var newlineOffset;
      do {
        position = iCalString.indexOf("\n", lastPosition) + 1;
        if (position === 0) {
          position = iStringLength;
          newlineOffset = 0;
        } else if (position > 1 && iCalString[position - 2] === "\r") {
          newlineOffset = 2;
        } else {
          newlineOffset = 1;
        }
        var firstChar = iCalString.charAt(lastPosition);
        if (firstChar === " " || firstChar === "\n" || firstChar === "	") {
          iString += iCalString.slice(lastPosition + 1, position - newlineOffset);
        } else {
          if (iString) {
            iCalData = this.updateEventData(iString, iCalData);
          }
          iString = iCalString.slice(lastPosition, position - newlineOffset);
        }
        lastPosition = position;
      } while (position !== iStringLength);
      iString = iString.trim();
      if (iString.length) {
        iCalData = this.updateEventData(iString, iCalData);
      }
      var app = extend([], iCalData.events, null, true);
      this.parent.addEvent(this.processOccurrence(app, iCalData.id));
    };
    ICalendarImport2.prototype.updateEventData = function(iString, iCalData) {
      var fields = this.parent.eventFields;
      var SEPARATOR3 = "\r\n";
      var id = iCalData.id;
      var events = iCalData.events;
      var isEvent = iCalData.isEvent;
      var count = iCalData.count;
      var curEvent = iCalData.curEvent;
      var key = iCalData.key;
      if (!isEvent && iString === "BEGIN:VEVENT") {
        isEvent = true;
        curEvent = {};
      }
      if (isEvent && iString === "END:VEVENT") {
        isEvent = false;
        events.push(curEvent);
        curEvent = null;
      }
      if (isEvent) {
        var index = iString.indexOf(":");
        var type_1 = iString.substring(0, index).replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        var value = iString.substring(index + 1, iString.length).replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        if (iString.indexOf("SUMMARY") !== -1) {
          type_1 = "SUMMARY";
        }
        if (iString.indexOf("DTSTART") !== -1) {
          curEvent[fields.startTime] = this.dateParsing(iString);
          curEvent[fields.isAllDay] = this.allDay;
          this.allDay = false;
        } else if (iString.indexOf("DTEND") !== -1) {
          curEvent[fields.endTime] = this.dateParsing(iString);
        } else if (iString.indexOf("EXDATE") !== -1) {
          value = getRecurrenceStringFromDate(this.dateParsing(iString));
          curEvent[fields.recurrenceException] = isNullOrUndefined(curEvent[fields.recurrenceException]) ? value : curEvent[fields.recurrenceException] + "," + value;
        } else if (iString.indexOf("RECURRENCE-ID") !== -1) {
          value = getRecurrenceStringFromDate(this.dateParsing(iString));
          curEvent[fields.recurrenceException] = value;
          curEvent[fields.recurrenceID] = value;
        } else {
          key = type_1 || key;
          switch (key) {
            case "BEGIN":
              break;
            case "UID":
              curEvent["" + type_1] = value;
              if (typeof id == "number") {
                curEvent[fields.id] = parseInt(value, 10);
                if (isNaN(curEvent[fields.id])) {
                  curEvent[fields.id] = id + count;
                  count++;
                }
              } else {
                curEvent[fields.id] = value;
              }
              break;
            case "SUMMARY":
              curEvent[fields.subject] = this.getFormattedString(value);
              break;
            case "LOCATION":
              curEvent[fields.location] = this.getFormattedString(value);
              break;
            case "DESCRIPTION":
              if (curEvent[fields.description]) {
                curEvent[fields.description] = this.getFormattedString(curEvent[fields.description] + SEPARATOR3 + value);
              } else {
                curEvent[fields.description] = this.getFormattedString(value);
              }
              break;
            case "ISREADONLY":
              curEvent[fields.isReadonly] = value.indexOf("true") > -1;
              break;
            case "RRULE":
              curEvent[fields.recurrenceRule] = value;
              break;
            default:
              if (this.parent.resourceCollection.length > 0) {
                var resData = this.parent.resourceCollection.filter(function(data) {
                  return data.field === type_1;
                });
                curEvent["" + type_1] = resData.length > 0 && typeof resData[0].dataSource[0][resData[0].idField] == "number" ? parseInt(value, 10) : value;
              } else {
                curEvent["" + type_1] = value;
              }
          }
        }
      }
      return { isEvent, curEvent, id, count, events, key };
    };
    ICalendarImport2.prototype.processOccurrence = function(app, maxId) {
      var _this = this;
      var appoint = [];
      var uId = "UID";
      var fields = this.parent.eventFields;
      var appointmentIds = [];
      this.parent.eventsData.forEach(function(eventObj) {
        appointmentIds.push(eventObj[fields.id]);
      });
      app.forEach(function(eventObj) {
        var parentObj;
        var id;
        if (!eventObj.hasOwnProperty(fields.recurrenceID)) {
          parentObj = eventObj;
          id = eventObj[fields.id];
        }
        if (appointmentIds.indexOf(eventObj[fields.id]) < 0) {
          var data = app.filter(function(data2) {
            return data2.UID === eventObj["" + uId];
          });
          if (data.length > 1 && isNullOrUndefined(eventObj[fields.recurrenceID])) {
            id = typeof maxId === "number" ? maxId++ : id;
            for (var i = 0; i < data.length; i++) {
              if (data[parseInt(i.toString(), 10)].hasOwnProperty(fields.recurrenceID)) {
                var exdate = data[parseInt(i.toString(), 10)][fields.recurrenceID];
                data[parseInt(i.toString(), 10)][fields.id] = typeof maxId === "number" ? maxId++ : _this.parent.eventBase.generateGuid();
                data[parseInt(i.toString(), 10)][fields.recurrenceID] = id;
                data[parseInt(i.toString(), 10)][fields.recurrenceException] = null;
                parentObj[fields.recurrenceException] = _this.getExcludeDateString(parentObj[fields.recurrenceException], exdate);
                delete data[parseInt(i.toString(), 10)]["" + uId];
                appoint.push(data[parseInt(i.toString(), 10)]);
              }
            }
            delete parentObj["" + uId];
            parentObj[fields.id] = id;
            appoint.push(parentObj);
          } else if (!eventObj.hasOwnProperty(fields.recurrenceID)) {
            delete eventObj["" + uId];
            eventObj[fields.id] = typeof maxId === "number" ? maxId++ : id;
            appoint.push(eventObj);
          }
        }
      });
      return appoint;
    };
    ICalendarImport2.prototype.getExcludeDateString = function(parentException, occurrenceException) {
      if (isNullOrUndefined(parentException)) {
        return occurrenceException;
      } else if (isNullOrUndefined(occurrenceException)) {
        return parentException;
      }
      var parentExDate = parentException.split(",").map(function(x) {
        return x.split("T")[0];
      });
      var childExDate = occurrenceException.split(",").map(function(x) {
        return x.split("T")[0];
      });
      var exDate = parentExDate.filter(function(x) {
        return childExDate.indexOf(x) > -1;
      });
      if (exDate.length > 0) {
        return parentException;
      }
      return parentException + "," + occurrenceException;
    };
    ICalendarImport2.prototype.getFormattedString = function(value) {
      value = value || "";
      return value.replace(/\\\,/g, ",").replace(/\\\;/g, ";").replace(/\\[nN]/g, "\n").replace(/\\\\/g, "\\");
    };
    ICalendarImport2.prototype.dateParsing = function(element) {
      var split = element.split(":");
      var value = split[split.length - 1];
      var newDate = new Date(this.getFormattedString(value));
      if (element && (element.indexOf("VALUE=DATE") > -1 || element.indexOf("RECURRENCE-ID;TZID") > -1)) {
        var data_1 = /^(\d{4})(\d{2})(\d{2})$/.exec(value);
        if (data_1 !== null) {
          newDate = new Date(parseInt(data_1[1], 10), parseInt(data_1[2], 10) - 1, parseInt(data_1[3], 10));
        }
        if (element.indexOf("DTSTART") > -1) {
          this.allDay = true;
        }
      }
      var data = /^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})(Z)?$/.exec(value);
      if (data !== null) {
        if (data[7] === "Z") {
          newDate = new Date(Date.UTC(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10)));
        } else {
          newDate = new Date(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10));
        }
      }
      return newDate;
    };
    ICalendarImport2.prototype.getModuleName = function() {
      return "iCalendarImport";
    };
    ICalendarImport2.prototype.destroy = function() {
      if (!this.parent || this.parent && this.parent.isDestroyed) {
        return;
      }
    };
    return ICalendarImport2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell-style.js
var CellStyle = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyle2() {
      this.numFmtId = 0;
      this.backColor = "none";
      this.fontName = "Calibri";
      this.fontSize = 10.5;
      this.fontColor = "#000000";
      this.italic = false;
      this.bold = false;
      this.underline = false;
      this.strikeThrough = false;
      this.wrapText = false;
      this.hAlign = "general";
      this.vAlign = "bottom";
      this.indent = 0;
      this.rotation = 0;
      this.numberFormat = "GENERAL";
      this.type = "datetime";
      this.borders = new Borders();
      this.isGlobalStyle = false;
    }
    return CellStyle2;
  }()
);
var Font = (
  /** @class */
  /* @__PURE__ */ function() {
    function Font2() {
      this.sz = 10.5;
      this.name = "Calibri";
      this.u = false;
      this.b = false;
      this.i = false;
      this.color = "FF000000";
      this.strike = false;
    }
    return Font2;
  }()
);
var CellXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellXfs2() {
    }
    return CellXfs2;
  }()
);
var Alignment = (
  /** @class */
  /* @__PURE__ */ function() {
    function Alignment2() {
    }
    return Alignment2;
  }()
);
var CellStyleXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyleXfs2() {
    }
    return CellStyleXfs2;
  }()
);
var CellStyles = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyles2() {
      this.name = "Normal";
      this.xfId = 0;
    }
    return CellStyles2;
  }()
);
var NumFmt = (
  /** @class */
  /* @__PURE__ */ function() {
    function NumFmt2(id, code) {
      this.numFmtId = id;
      this.formatCode = code;
    }
    return NumFmt2;
  }()
);
var Border = (
  /** @class */
  /* @__PURE__ */ function() {
    function Border2(mLine, mColor) {
      this.lineStyle = mLine;
      this.color = mColor;
    }
    return Border2;
  }()
);
var Borders = (
  /** @class */
  /* @__PURE__ */ function() {
    function Borders2() {
      this.left = new Border("none", "#FFFFFF");
      this.right = new Border("none", "#FFFFFF");
      this.top = new Border("none", "#FFFFFF");
      this.bottom = new Border("none", "#FFFFFF");
      this.all = new Border("none", "#FFFFFF");
    }
    return Borders2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell.js
var __extends65 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Cell = (
  /** @class */
  /* @__PURE__ */ function() {
    function Cell2() {
    }
    return Cell2;
  }()
);
var Cells = (
  /** @class */
  function(_super) {
    __extends65(Cells2, _super);
    function Cells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(cell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var c = _a[_i];
          if (c.index === cell.index) {
            _this[count] = cell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(cell);
        }
      };
      return _this;
    }
    return Cells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/column.js
var Column = (
  /** @class */
  /* @__PURE__ */ function() {
    function Column2() {
    }
    return Column2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/row.js
var __extends66 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Row = (
  /** @class */
  /* @__PURE__ */ function() {
    function Row2() {
    }
    return Row2;
  }()
);
var Rows = (
  /** @class */
  function(_super) {
    __extends66(Rows2, _super);
    function Rows2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(row) {
        _this.push(row);
      };
      return _this;
    }
    return Rows2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheets.js
var __extends67 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheets = (
  /** @class */
  function(_super) {
    __extends67(Worksheets2, _super);
    function Worksheets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Worksheets2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheet.js
var __extends68 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheet = (
  /** @class */
  /* @__PURE__ */ function() {
    function Worksheet2() {
      this.isSummaryRowBelow = true;
      this.showGridLines = true;
      this.enableRtl = false;
    }
    return Worksheet2;
  }()
);
var HyperLink = (
  /** @class */
  /* @__PURE__ */ function() {
    function HyperLink2() {
    }
    return HyperLink2;
  }()
);
var Grouping = (
  /** @class */
  /* @__PURE__ */ function() {
    function Grouping2() {
    }
    return Grouping2;
  }()
);
var FreezePane = (
  /** @class */
  /* @__PURE__ */ function() {
    function FreezePane2() {
    }
    return FreezePane2;
  }()
);
var MergeCell = (
  /** @class */
  /* @__PURE__ */ function() {
    function MergeCell2() {
    }
    return MergeCell2;
  }()
);
var MergeCells = (
  /** @class */
  function(_super) {
    __extends68(MergeCells2, _super);
    function MergeCells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(mergeCell) {
        var inserted = false;
        var count = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var mCell = _a[_i];
          if (MergeCells2.isIntersecting(mCell, mergeCell)) {
            var intersectingCell = new MergeCell();
            intersectingCell.x = Math.min(mCell.x, mergeCell.x);
            intersectingCell.y = Math.min(mCell.Y, mergeCell.y);
            intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);
            intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);
            intersectingCell.ref = _this[count].ref.split(":")[0] + ":" + mergeCell.ref.split(":")[1];
            _this[count] = intersectingCell;
            mergeCell = intersectingCell;
            inserted = true;
          }
          count++;
        }
        if (!inserted) {
          _this.push(mergeCell);
        }
        return mergeCell;
      };
      return _this;
    }
    MergeCells2.isIntersecting = function(base, compare) {
      return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;
    };
    return MergeCells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/image.js
var Image = (
  /** @class */
  /* @__PURE__ */ function() {
    function Image2() {
    }
    return Image2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/save.js
var Save = (
  /** @class */
  function() {
    function Save2() {
    }
    Save2.save = function(fileName, buffer) {
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("ArgumentException: fileName cannot be undefined, null or empty");
      }
      var extension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length);
      var mimeType = this.getMimeType(extension);
      if (mimeType !== "") {
        buffer = new Blob([buffer], { type: mimeType });
      }
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        this.saveInternal(fileName, extension, buffer, downloadLink, "download" in downloadLink);
      }
    };
    Save2.saveInternal = function(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {
      if (hasDownloadAttribute) {
        downloadLink.download = fileName;
        var dataUrl_1 = window.URL.createObjectURL(buffer);
        downloadLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
          dataUrl_1 = void 0;
        });
      } else {
        if (extension !== "docx" && extension !== "xlsx") {
          var url = window.URL.createObjectURL(buffer);
          var isPopupBlocked = window.open(url, "_blank");
          if (!isPopupBlocked) {
            window.location.href = url;
          }
        } else {
          var reader_1 = new FileReader();
          reader_1.onloadend = function() {
            var isPopupBlocked2 = window.open(reader_1.result, "_blank");
            if (!isPopupBlocked2) {
              window.location.href = reader_1.result;
            }
          };
          reader_1.readAsDataURL(buffer);
        }
      }
    };
    Save2.getMimeType = function(extension) {
      var mimeType = "";
      switch (extension) {
        case "html":
          mimeType = "text/html";
          break;
        case "pdf":
          mimeType = "application/pdf";
          break;
        case "docx":
          mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          break;
        case "xlsx":
          mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          break;
        case "txt":
          mimeType = "text/plain";
          break;
      }
      return mimeType;
    };
    return Save2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/xml-writer.js
var XmlWriter = (
  /** @class */
  function() {
    function XmlWriter2() {
      this.contentPos = 0;
      this.bufferText = "";
      this.bufferBlob = new Blob([""], { type: "text/plain" });
      this.currentState = "Initial";
      this.namespaceStack = [];
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[0].set("xmlns", "http://www.w3.org/2000/xmlns/", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[1].set("xml", "http://www.w3.org/XML/1998/namespace", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[2].set("", "", "Implied");
      this.elementStack = [];
      this.elementStack.push(new XmlElement());
      this.elementStack[0].set("", "", "", this.namespaceStack.length - 1);
      this.attributeStack = [];
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(XmlWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the {XmlWriter} as Blob.
       * @returns {Blob}
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    XmlWriter2.prototype.writeProcessingInstruction = function(name, text) {
      if (name === void 0 || name === null || name.length === 0) {
        throw new Error("ArgumentException: name should not be undefined, null or empty");
      }
      this.checkName(name);
      if (text === void 0 || text === null) {
        text = "";
      }
      if (name.length === 3 && name === "xml") {
        if (this.currentState !== "Initial") {
          throw new Error("InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it");
        }
      }
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      } else {
        this.writeStartDocument();
        this.writeProcessingInstructionInternal(name, text);
      }
    };
    XmlWriter2.prototype.writeStartDocument = function(standalone) {
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.currentState = "StartDocument";
      this.rawText('<?xml version="1.0" encoding="utf-8');
      if (standalone !== null && standalone !== void 0) {
        this.rawText('" standalone="');
        this.rawText(standalone ? "yes" : "no");
      }
      this.rawText('"?>');
    };
    XmlWriter2.prototype.writeEndDocument = function() {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      this.currentState = "EndDocument";
      this.flush();
    };
    XmlWriter2.prototype.writeStartElement = function(prefix, localName, namespace) {
      if (this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      if (localName === void 0 || localName === null || localName.length === 0) {
        throw new Error("ArgumentException: localName cannot be undefined, null or empty");
      }
      this.checkName(localName);
      if (this.currentState === "Initial") {
        this.writeStartDocument();
      }
      if (this.currentState === "StartElement") {
        this.startElementContent();
      }
      this.currentState = "StartElement";
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          prefix = this.lookupPrefix(namespace);
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      } else if (prefix.length > 0) {
        if (namespace === void 0 || namespace === null) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null || namespace !== void 0 && namespace.length === 0) {
          throw new Error("ArgumentException: Cannot use a prefix with an empty namespace");
        }
      }
      if (namespace === void 0 || namespace === null) {
        namespace = this.lookupNamespace(prefix);
      }
      this.writeStartElementInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndElement = function() {
      if (this.currentState === "StartElement") {
        this.startElementContent();
        this.currentState = "ElementContent";
      } else if (this.currentState === "ElementContent") {
        this.currentState = "ElementContent";
      }
      this.currentState = "EndElement";
      var top = this.elementStack.length - 1;
      this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName);
      this.namespaceStack.splice(this.elementStack[top].previousTop + 1);
      this.elementStack.splice(top);
      if (this.bufferText.length > 10240) {
        this.flush();
      }
    };
    XmlWriter2.prototype.writeElementString = function(prefix, localName, namespace, value) {
      this.writeStartElement(prefix, localName, namespace);
      if (value !== void 0 && value !== null && value.length !== 0) {
        this.writeString(value);
      }
      this.writeEndElement();
    };
    XmlWriter2.prototype.writeAttributeString = function(prefix, localName, namespace, value) {
      this.writeStartAttribute(prefix, localName, namespace, value);
      this.writeStringInternal(value, true);
      this.writeEndAttribute();
    };
    XmlWriter2.prototype.writeString = function(text) {
      this.writeInternal(text, false);
    };
    XmlWriter2.prototype.writeRaw = function(text) {
      this.writeInternal(text, true);
    };
    XmlWriter2.prototype.writeInternal = function(text, isRawString) {
      if (text === void 0 || text === null) {
        return;
      } else {
        if (this.currentState !== "StartElement" && this.currentState !== "ElementContent") {
          throw new Error("InvalidOperationException: Wrong Token");
        }
        if (this.currentState === "StartElement") {
          this.startElementContent();
        }
        this.currentState = "ElementContent";
        if (isRawString) {
          this.rawText(text);
        } else {
          this.writeStringInternal(text, false);
        }
      }
    };
    XmlWriter2.prototype.save = function(fileName) {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    XmlWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      for (var i = 0; i < this.namespaceStack.length; i++) {
        this.namespaceStack[i].destroy();
      }
      this.namespaceStack = [];
      for (var i = 0; i < this.elementStack.length; i++) {
        this.elementStack[i].destroy();
      }
      this.elementStack = [];
      this.bufferText = "";
      this.contentPos = 0;
    };
    XmlWriter2.prototype.flush = function() {
      if (this.bufferBlob === void 0) {
        return;
      }
      this.bufferBlob = new Blob([this.bufferBlob, this.bufferText], { type: "text/plain" });
      this.bufferText = "";
    };
    XmlWriter2.prototype.writeProcessingInstructionInternal = function(name, text) {
      this.bufferText += "<?";
      this.rawText(name);
      if (text.length > 0) {
        this.bufferText += " ";
        text = text.replace(/\?\>/g, "? >");
        this.bufferText += text;
      }
      this.bufferText += "?";
      this.bufferText += ">";
    };
    XmlWriter2.prototype.writeStartAttribute = function(prefix, localName, namespace, value) {
      if (localName === void 0 || localName === null || localName.length === 0) {
        if (prefix === "xmlns") {
          localName = "xmlns";
          prefix = "";
        } else {
          throw new Error("ArgumentException: localName cannot be undefined, null or empty");
        }
      }
      if (this.currentState !== "StartElement") {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.checkName(localName);
      this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributePrefixAndNameSpace = function(prefix, localName, namespace, value) {
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          if (!(localName === "xmlns" && namespace === "http://www.w3.org/2000/xmlns/")) {
            prefix = this.lookupPrefix(namespace);
          }
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      }
      if (namespace === void 0 || namespace === null) {
        if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null) {
          namespace = "";
        }
      }
      this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributeSpecialAttribute = function(prefix, localName, namespace, value) {
      if (prefix.length === 0) {
        if (localName[0] === "x" && localName === "xmlns") {
          this.skipPushAndWrite(prefix, localName, namespace);
          this.pushNamespaceExplicit("", value);
          return;
        } else if (namespace.length > 0) {
          prefix = this.lookupPrefix(namespace);
        }
      } else {
        if (prefix[0] === "x") {
          if (prefix === "xmlns") {
            this.skipPushAndWrite(prefix, localName, namespace);
            this.pushNamespaceExplicit(localName, value);
            return;
          } else if (prefix === "xml") {
            if (localName === "space" || localName === "lang") {
              this.skipPushAndWrite(prefix, localName, namespace);
              return;
            }
          }
        }
        if (namespace.length === 0) {
          prefix = "";
        }
      }
      if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
        this.pushNamespaceImplicit(prefix, namespace);
      }
      this.skipPushAndWrite(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndAttribute = function() {
      this.currentState = "StartElement";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartElementInternal = function(prefix, localName, namespace) {
      this.bufferText += "<";
      if (prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      var top = this.elementStack.length;
      this.elementStack.push(new XmlElement());
      this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1);
      this.pushNamespaceImplicit(prefix, namespace);
      for (var i = 0; i < this.attributeStack.length; i++) {
        this.attributeStack[i].destroy();
      }
      this.attributeStack = [];
    };
    XmlWriter2.prototype.writeEndElementInternal = function(prefix, localName) {
      if (this.contentPos !== this.bufferText.length + 1) {
        this.bufferText += "</";
        if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
          this.rawText(prefix);
          this.bufferText += ":";
        }
        this.rawText(localName);
        this.bufferText += ">";
      } else {
        this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1);
        this.bufferText += " />";
      }
    };
    XmlWriter2.prototype.writeStartAttributeInternal = function(prefix, localName, namespaceName) {
      this.bufferText += " ";
      if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      this.bufferText += "=";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeNamespaceDeclaration = function(prefix, namespaceUri) {
      this.writeStartNamespaceDeclaration(prefix);
      this.writeStringInternal(namespaceUri, true);
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartNamespaceDeclaration = function(prefix) {
      if (prefix === void 0 || prefix === null || prefix.length === 0) {
        this.rawText(' xmlns="');
      } else {
        this.rawText(" xmlns:");
        this.rawText(prefix);
        this.bufferText += "=";
        this.bufferText += '"';
      }
    };
    XmlWriter2.prototype.writeStringInternal = function(text, inAttributeValue) {
      if (text === null || text === void 0) {
        text = "";
      }
      var tempText = "";
      text = text.replace(/\&/g, "&amp;");
      text = text.replace(/\</g, "&lt;");
      text = text.replace(/\>/g, "&gt;");
      if (inAttributeValue) {
        text = text.replace(/\"/g, "&quot;");
      }
      this.bufferText += text;
      if (!inAttributeValue) {
        this.contentPos = 0;
      }
    };
    XmlWriter2.prototype.startElementContent = function() {
      var start = this.elementStack[this.elementStack.length - 1].previousTop;
      for (var i = this.namespaceStack.length - 1; i > start; i--) {
        if (this.namespaceStack[i].kind === "NeedToWrite") {
          this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);
        }
      }
      this.bufferText += ">";
      this.contentPos = this.bufferText.length + 1;
    };
    XmlWriter2.prototype.rawText = function(text) {
      this.bufferText += text;
    };
    XmlWriter2.prototype.addNamespace = function(prefix, ns, kind) {
      var top = this.namespaceStack.length;
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[top].set(prefix, ns, kind);
    };
    XmlWriter2.prototype.lookupPrefix = function(namespace) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].namespaceUri === namespace) {
          return this.namespaceStack[i].prefix;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespace = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return this.namespaceStack[i].namespaceUri;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespaceIndex = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return i;
        }
      }
      return -1;
    };
    XmlWriter2.prototype.pushNamespaceImplicit = function(prefix, ns) {
      var kind;
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) {
            throw new Error("XmlException namespace Uri needs to be the same as the one that is already declared");
          }
          return;
        } else {
          if (this.namespaceStack[existingNsIndex].kind === "Special") {
            if (prefix === "xml") {
              if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) {
                throw new Error("InvalidArgumentException: Xml String");
              } else {
                kind = "Implied";
              }
            } else {
              throw new Error('InvalidArgumentException: Prefix "xmlns" is reserved for use by XML.');
            }
          } else {
            kind = this.namespaceStack[existingNsIndex].namespaceUri === ns ? "Implied" : "NeedToWrite";
          }
        }
      } else {
        if (ns === "http://www.w3.org/XML/1998/namespace" && prefix !== "xml" || ns === "http://www.w3.org/2000/xmlns/" && prefix !== "xmlns") {
          throw new Error("InvalidArgumentException");
        }
        kind = "NeedToWrite";
      }
      this.addNamespace(prefix, ns, kind);
    };
    XmlWriter2.prototype.pushNamespaceExplicit = function(prefix, ns) {
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          this.namespaceStack[existingNsIndex].kind = "Written";
          return;
        }
      }
      this.addNamespace(prefix, ns, "Written");
      return;
    };
    XmlWriter2.prototype.addAttribute = function(prefix, localName, namespaceName) {
      var top = this.attributeStack.length;
      this.attributeStack.push(new XmlAttribute());
      this.attributeStack[top].set(prefix, localName, namespaceName);
      for (var i = 0; i < top; i++) {
        if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) {
          throw new Error("XmlException: duplicate attribute name");
        }
      }
    };
    XmlWriter2.prototype.skipPushAndWrite = function(prefix, localName, namespace) {
      this.addAttribute(prefix, localName, namespace);
      this.writeStartAttributeInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.checkName = function(text) {
      var format = /[ !@#$%^&*()+\=\[\]{};':"\\|,<>\/?]/;
      if (format.test(text)) {
        throw new Error("InvalidArgumentException: invalid name character");
      }
    };
    return XmlWriter2;
  }()
);
var Namespace = (
  /** @class */
  function() {
    function Namespace2() {
    }
    Namespace2.prototype.set = function(prefix, namespaceUri, kind) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.kind = kind;
    };
    Namespace2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.kind = void 0;
    };
    return Namespace2;
  }()
);
var XmlElement = (
  /** @class */
  function() {
    function XmlElement2() {
    }
    XmlElement2.prototype.set = function(prefix, localName, namespaceUri, previousTop) {
      this.previousTop = previousTop;
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlElement2.prototype.destroy = function() {
      this.previousTop = void 0;
      this.prefix = void 0;
      this.localName = void 0;
      this.namespaceUri = void 0;
    };
    return XmlElement2;
  }()
);
var XmlAttribute = (
  /** @class */
  function() {
    function XmlAttribute2() {
    }
    XmlAttribute2.prototype.set = function(prefix, localName, namespaceUri) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlAttribute2.prototype.isDuplicate = function(prefix, localName, namespaceUri) {
      return this.localName === localName && (this.prefix === prefix || this.namespaceUri === namespaceUri);
    };
    XmlAttribute2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.localName = void 0;
    };
    return XmlAttribute2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/encoding.js
var Encoding = (
  /** @class */
  function() {
    function Encoding2(includeBom) {
      this.emitBOM = true;
      this.encodingType = "Ansi";
      this.initBOM(includeBom);
    }
    Object.defineProperty(Encoding2.prototype, "includeBom", {
      /**
       * Gets a value indicating whether to write a Unicode byte order mark
       * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false
       */
      get: function() {
        return this.emitBOM;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Encoding2.prototype, "type", {
      /**
       * Gets the encoding type.
       * @returns EncodingType
       */
      get: function() {
        return this.encodingType;
      },
      /**
       * Sets the encoding type.
       * @param  {EncodingType} value
       */
      set: function(value) {
        this.encodingType = value;
      },
      enumerable: true,
      configurable: true
    });
    Encoding2.prototype.initBOM = function(includeBom) {
      if (includeBom === void 0 || includeBom === null) {
        this.emitBOM = true;
      } else {
        this.emitBOM = includeBom;
      }
    };
    Encoding2.prototype.getByteCount = function(chars) {
      var byteCount = 0;
      validateNullOrUndefined(chars, "string");
      if (chars === "") {
        var byte = this.utf8Len(chars.charCodeAt(0));
        return byte;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      return this.getByteCountInternal(chars, 0, chars.length);
    };
    Encoding2.prototype.utf8Len = function(codePoint) {
      var bytes = codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : codePoint <= 2097151 ? 4 : 0;
      return bytes;
    };
    Encoding2.prototype.isHighSurrogate = function(codeUnit) {
      return codeUnit >= 55296 && codeUnit <= 56319;
    };
    Encoding2.prototype.toCodepoint = function(highCodeUnit, lowCodeUnit) {
      highCodeUnit = (1023 & highCodeUnit) << 10;
      var u = highCodeUnit | 1023 & lowCodeUnit;
      return u + 65536;
    };
    Encoding2.prototype.getByteCountInternal = function(chars, charIndex, charCount) {
      var byteCount = 0;
      if (this.encodingType === "Utf8" || this.encodingType === "Unicode") {
        var isUtf8 = this.encodingType === "Utf8";
        for (var i = 0; i < charCount; i++) {
          var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);
          if (this.isHighSurrogate(charCode)) {
            if (isUtf8) {
              var high = charCode;
              var low = chars.charCodeAt(++charIndex);
              byteCount += this.utf8Len(this.toCodepoint(high, low));
            } else {
              byteCount += 4;
              ++i;
            }
          } else {
            if (isUtf8) {
              byteCount += this.utf8Len(charCode);
            } else {
              byteCount += 2;
            }
          }
          if (isUtf8) {
            charIndex++;
          }
        }
        return byteCount;
      } else {
        byteCount = charCount;
        return byteCount;
      }
    };
    Encoding2.prototype.getBytes = function(s, charIndex, charCount) {
      validateNullOrUndefined(s, "string");
      validateNullOrUndefined(charIndex, "charIndex");
      validateNullOrUndefined(charCount, "charCount");
      if (charIndex < 0 || charCount < 0) {
        throw new RangeError("Argument Out Of Range Exception: charIndex or charCount is less than zero");
      }
      if (s.length - charIndex < charCount) {
        throw new RangeError("Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string");
      }
      var bytes;
      if (s === "") {
        bytes = new ArrayBuffer(0);
        return bytes;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var byteCount = this.getByteCountInternal(s, charIndex, charCount);
      switch (this.type) {
        case "Utf8":
          bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);
          return bytes;
        case "Unicode":
          bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);
          return bytes;
        default:
          bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);
          return bytes;
      }
    };
    Encoding2.prototype.getString = function(bytes, index, count) {
      validateNullOrUndefined(bytes, "bytes");
      validateNullOrUndefined(index, "index");
      validateNullOrUndefined(count, "count");
      if (index < 0 || count < 0) {
        throw new RangeError("Argument Out Of Range Exception: index or count is less than zero");
      }
      if (bytes.byteLength - index < count) {
        throw new RangeError("Argument Out Of Range Exception: index and count do not denote a valid range in bytes");
      }
      if (bytes.byteLength === 0 || count === 0) {
        return "";
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var out = "";
      var byteCal = new Uint8Array(bytes);
      switch (this.type) {
        case "Utf8":
          var s = this.getStringOfUtf8Encoding(byteCal, index, count);
          return s;
        case "Unicode":
          var byteUnicode = new Uint16Array(bytes);
          out = this.getStringofUnicodeEncoding(byteUnicode, index, count);
          return out;
        default:
          var j = index;
          for (var i = 0; i < count; i++) {
            var c = byteCal[j];
            out += String.fromCharCode(c);
            j++;
          }
          return out;
      }
    };
    Encoding2.prototype.getBytesOfAnsiEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var bufview = new Uint8Array(bytes);
      var k = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(charIndex++);
        if (charcode < 2048) {
          bufview[k] = charcode;
        } else {
          bufview[k] = 63;
        }
        k++;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUtf8Encoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint = new Uint8Array(bytes);
      var index = charIndex;
      var j = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(index);
        if (charcode <= 127) {
          uint[j] = charcode;
        } else if (charcode < 2048) {
          uint[j] = 192 | charcode >> 6;
          uint[++j] = 128 | charcode & 63;
        } else if (charcode < 55296 || charcode >= 57344) {
          uint[j] = 224 | charcode >> 12;
          uint[++j] = 128 | charcode >> 6 & 63;
          uint[++j] = 128 | charcode & 63;
        } else {
          uint[j] = 239;
          uint[++j] = 191;
          uint[++j] = 189;
        }
        ++j;
        ++index;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUnicodeEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint16 = new Uint16Array(bytes);
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(i);
        uint16[i] = charcode;
      }
      return bytes;
    };
    Encoding2.prototype.getStringOfUtf8Encoding = function(byteCal, index, count) {
      var j = 0;
      var i = index;
      var s = "";
      for (j; j < count; j++) {
        var c = byteCal[i++];
        while (i > byteCal.length) {
          return s;
        }
        if (c > 127) {
          if (c > 191 && c < 224 && i < count) {
            c = (c & 31) << 6 | byteCal[i] & 63;
          } else if (c > 223 && c < 240 && i < byteCal.byteLength) {
            c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;
          } else if (c > 239 && c < 248 && i < byteCal.byteLength) {
            c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;
          }
          ++i;
        }
        s += String.fromCharCode(c);
      }
      return s;
    };
    Encoding2.prototype.getStringofUnicodeEncoding = function(byteUni, index, count) {
      if (count > byteUni.length) {
        throw new RangeError("ArgumentOutOfRange_Count");
      }
      var byte16 = new Uint16Array(count);
      var out = "";
      for (var i = 0; i < count && i < byteUni.length; i++) {
        byte16[i] = byteUni[index++];
      }
      out = String.fromCharCode.apply(null, byte16);
      return out;
    };
    Encoding2.prototype.destroy = function() {
      this.emitBOM = void 0;
      this.encodingType = void 0;
    };
    return Encoding2;
  }()
);
function validateNullOrUndefined(value, message) {
  if (value === null || value === void 0) {
    throw new Error("ArgumentException: " + message + " cannot be null or undefined");
  }
}

// node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js
var StreamWriter = (
  /** @class */
  function() {
    function StreamWriter2(encoding) {
      this.bufferBlob = new Blob([""]);
      this.bufferText = "";
      this.init(encoding);
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(StreamWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the StreamWriter as Blob.
       * @returns Blob
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StreamWriter2.prototype, "encoding", {
      /**
       * Gets the encoding.
       * @returns Encoding
       */
      get: function() {
        return this.enc;
      },
      enumerable: true,
      configurable: true
    });
    StreamWriter2.prototype.init = function(encoding) {
      if (encoding === null || encoding === void 0) {
        this.enc = new Encoding(false);
        this.enc.type = "Utf8";
      } else {
        this.enc = encoding;
        this.setBomByte();
      }
    };
    StreamWriter2.prototype.setBomByte = function() {
      if (this.encoding.includeBom) {
        switch (this.encoding.type) {
          case "Unicode":
            var arrayUnicode = new ArrayBuffer(2);
            var uint8 = new Uint8Array(arrayUnicode);
            uint8[0] = 255;
            uint8[1] = 254;
            this.bufferBlob = new Blob([arrayUnicode]);
            break;
          case "Utf8":
            var arrayUtf8 = new ArrayBuffer(3);
            var utf8 = new Uint8Array(arrayUtf8);
            utf8[0] = 239;
            utf8[1] = 187;
            utf8[2] = 191;
            this.bufferBlob = new Blob([arrayUtf8]);
            break;
          default:
            this.bufferBlob = new Blob([""]);
            break;
        }
      }
    };
    StreamWriter2.prototype.save = function(fileName) {
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    StreamWriter2.prototype.write = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText += value;
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.flush = function() {
      if (this.bufferText === void 0 || this.bufferText === null || this.bufferText.length === 0) {
        return;
      }
      var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
      this.bufferText = "";
      this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);
    };
    StreamWriter2.prototype.writeLine = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText = this.bufferText + value + "\r\n";
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      this.bufferText = void 0;
      if (this.enc instanceof Encoding) {
        this.enc.destroy();
      }
      this.enc = void 0;
    };
    return StreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/utils.js
var Utils = (
  /** @class */
  function() {
    function Utils2() {
    }
    Utils2.bitReverse = function(value) {
      return Utils2.reverseBits[value & 15] << 12 | Utils2.reverseBits[value >> 4 & 15] << 8 | Utils2.reverseBits[value >> 8 & 15] << 4 | Utils2.reverseBits[value >> 12];
    };
    Utils2.bitConverterToInt32 = function(value, index) {
      return value[index] | value[index + 1] << 8 | value[index + 2] << 16 | value[index + 3] << 24;
    };
    Utils2.bitConverterToInt16 = function(value, index) {
      return value[index] | value[index + 1] << 8;
    };
    Utils2.bitConverterToUInt32 = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterToUInt16 = function(value, index) {
      var uint = new Uint16Array(1);
      uint[0] = value[index] | value[index + 1] << 8;
      return uint[0];
    };
    Utils2.bitConverterUintToInt32 = function(value) {
      var uint = new Int32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToUint = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToInt16 = function(value) {
      var uint = new Int16Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.byteToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.byteIntToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.arrayCopy = function(source, sourceIndex, destination, destinationIndex, dataToCopy) {
      var temp = new Uint8Array(source.buffer, sourceIndex);
      var data = temp.subarray(0, dataToCopy);
      destination.set(data, destinationIndex);
    };
    Utils2.mergeArray = function(arrayOne, arrayTwo) {
      var mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);
      mergedArray.set(arrayOne);
      mergedArray.set(arrayTwo, arrayOne.length);
      return mergedArray;
    };
    Utils2.encodedString = function(input2) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var encode1;
      var encode2;
      var encode3;
      var encode4;
      var count = 0;
      var resultIndex = 0;
      input2 = input2.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input2.length * 3 / 4;
      if (input2.charAt(input2.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (input2.charAt(input2.length - 2) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (totalLength % 1 !== 0) {
        throw new Error("Invalid base64 input, bad content length.");
      }
      var output = new Uint8Array(totalLength | 0);
      while (count < input2.length) {
        encode1 = keyStr.indexOf(input2.charAt(count++));
        encode2 = keyStr.indexOf(input2.charAt(count++));
        encode3 = keyStr.indexOf(input2.charAt(count++));
        encode4 = keyStr.indexOf(input2.charAt(count++));
        chr1 = encode1 << 2 | encode2 >> 4;
        chr2 = (encode2 & 15) << 4 | encode3 >> 2;
        chr3 = (encode3 & 3) << 6 | encode4;
        output[resultIndex++] = chr1;
        if (encode3 !== 64) {
          output[resultIndex++] = chr2;
        }
        if (encode4 !== 64) {
          output[resultIndex++] = chr3;
        }
      }
      return output;
    };
    Utils2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    Utils2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return Utils2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/zip-archive.js
var CRC32TABLE = [];
var INT_SIZE = 4;
var SHORT_SIZE = 2;
var CentralDirectoryEndSignature = 101010256;
var CentralDirSizeOffset = 12;
var CentralHeaderSignature = 33639248;
var BufferSize = 4096;
var ZipArchive = (
  /** @class */
  function() {
    function ZipArchive2() {
      if (CRC32TABLE.length === 0) {
        ZipArchive2.initCrc32Table();
      }
      this.files = [];
      this.level = "Normal";
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(ZipArchive2.prototype, "items", {
      get: function() {
        return this.files;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "compressionLevel", {
      /**
       * gets compression level
       */
      get: function() {
        return this.level;
      },
      /**
       * sets compression level
       */
      set: function(level) {
        this.level = level;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "length", {
      /**
       * gets items count
       */
      get: function() {
        if (this.files === void 0) {
          return 0;
        }
        return this.files.length;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchive2.prototype.addItem = function(item) {
      if (item === null || item === void 0) {
        throw new Error("ArgumentException: item cannot be null or undefined");
      }
      for (var i = 0; i < this.files.length; i++) {
        var file = this.files[i];
        if (file instanceof ZipArchiveItem) {
          if (file.name === item.name) {
            throw new Error("item with same name already exist");
          }
        }
      }
      this.files.push(item);
    };
    ZipArchive2.prototype.addDirectory = function(directoryName) {
      if (directoryName === null || directoryName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (directoryName.length === 0) {
        throw new Error("ArgumentException: string cannot be empty");
      }
      if (directoryName.slice(-1) !== "/") {
        directoryName += "/";
      }
      if (this.files.indexOf(directoryName) !== -1) {
        throw new Error("item with same name already exist");
      }
      this.files.push(directoryName);
    };
    ZipArchive2.prototype.getItem = function(index) {
      if (index >= 0 && index < this.files.length) {
        return this.files[index];
      }
      return void 0;
    };
    ZipArchive2.prototype.contains = function(item) {
      return this.files.indexOf(item) !== -1 ? true : false;
    };
    ZipArchive2.prototype.open = function(base64String) {
      var zipArchive = this;
      var zipByteArray = Utils.encodedString(base64String);
      if (zipByteArray.length == 0)
        throw new DOMException("stream");
      var stream = new Stream(zipByteArray);
      var lCentralDirEndPosition = ZipArchive2.findValueFromEnd(stream, CentralDirectoryEndSignature, 65557);
      if (lCentralDirEndPosition < 0)
        throw new DOMException("Can't locate end of central directory record. Possible wrong file format or archive is corrupt.");
      stream.position = lCentralDirEndPosition + CentralDirSizeOffset;
      var iCentralDirSize = ZipArchive2.ReadInt32(stream);
      var lCentralDirPosition = lCentralDirEndPosition - iCentralDirSize;
      stream.position = lCentralDirPosition;
      this.readCentralDirectoryDataAndExtractItems(stream);
    };
    ZipArchive2.prototype.readCentralDirectoryDataAndExtractItems = function(stream) {
      if (stream == null)
        throw new DOMException("stream");
      var itemHelper;
      while (ZipArchive2.ReadInt32(stream) == CentralHeaderSignature) {
        itemHelper = new ZipArchiveItemHelper();
        itemHelper.readCentralDirectoryData(stream);
        itemHelper;
      }
      itemHelper.readData(stream, itemHelper.checkCrc);
      itemHelper.decompressData();
      this.files.push(new ZipArchiveItem(itemHelper.unCompressedStream.buffer, itemHelper.name));
    };
    ZipArchive2.prototype.save = function(fileName) {
      if (fileName === null || fileName === void 0 || fileName.length === 0) {
        throw new Error("ArgumentException: fileName cannot be null or undefined");
      }
      if (this.files.length === 0) {
        throw new Error("InvalidOperation");
      }
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal(fileName, false).then(function() {
          resolve(zipArchive);
        });
      });
    };
    ZipArchive2.prototype.saveAsBlob = function() {
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal("", true).then(function(blob) {
          resolve(blob);
        });
      });
    };
    ZipArchive2.prototype.saveInternal = function(fileName, skipFileSave) {
      var _this = this;
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        var zipData = [];
        var dirLength = 0;
        for (var i = 0; i < zipArchive.files.length; i++) {
          var compressedObject = _this.getCompressedData(_this.files[i]);
          compressedObject.then(function(data) {
            dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);
            if (zipData.length === zipArchive.files.length) {
              var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);
              resolve(blob);
            }
          });
        }
      });
    };
    ZipArchive2.prototype.destroy = function() {
      if (this.files !== void 0 && this.files.length > 0) {
        for (var i = 0; i < this.files.length; i++) {
          var file = this.files[i];
          if (file instanceof ZipArchiveItem) {
            file.destroy();
          }
          file = void 0;
        }
        this.files = [];
      }
      this.files = void 0;
      this.level = void 0;
    };
    ZipArchive2.prototype.getCompressedData = function(item) {
      var zipArchive = this;
      var promise = new Promise(function(resolve, reject) {
        if (item instanceof ZipArchiveItem) {
          var reader_1 = new FileReader();
          reader_1.onload = function() {
            var input2 = new Uint8Array(reader_1.result);
            var data2 = {
              fileName: item.name,
              crc32Value: 0,
              compressedData: [],
              compressedSize: void 0,
              uncompressedDataSize: input2.length,
              compressionType: void 0,
              isDirectory: false
            };
            if (zipArchive.level === "Normal") {
              zipArchive.compressData(input2, data2, CRC32TABLE);
              var length_1 = 0;
              for (var i = 0; i < data2.compressedData.length; i++) {
                length_1 += data2.compressedData[i].length;
              }
              data2.compressedSize = length_1;
              data2.compressionType = "\b\0";
            } else {
              data2.compressedSize = input2.length;
              data2.crc32Value = zipArchive.calculateCrc32Value(0, input2, CRC32TABLE);
              data2.compressionType = "\0\0";
              data2.compressedData.push(input2);
            }
            resolve(data2);
          };
          reader_1.readAsArrayBuffer(item.data);
        } else {
          var data = {
            fileName: item,
            crc32Value: 0,
            compressedData: "",
            compressedSize: 0,
            uncompressedDataSize: 0,
            compressionType: "\0\0",
            isDirectory: true
          };
          resolve(data);
        }
      });
      return promise;
    };
    ZipArchive2.prototype.compressData = function(input2, data, crc32Table) {
      var compressor = new CompressedStreamWriter(true);
      var currentIndex = 0;
      var nextIndex = 0;
      do {
        if (currentIndex >= input2.length) {
          compressor.close();
          break;
        }
        nextIndex = Math.min(input2.length, currentIndex + 16384);
        var subArray = input2.subarray(currentIndex, nextIndex);
        data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);
        compressor.write(subArray, 0, nextIndex - currentIndex);
        currentIndex = nextIndex;
      } while (currentIndex <= input2.length);
      data.compressedData = compressor.compressedData;
      compressor.destroy();
    };
    ZipArchive2.prototype.constructZippedObject = function(zipParts, data, dirLength, isDirectory) {
      var extFileAttr = 0;
      var date = /* @__PURE__ */ new Date();
      if (isDirectory) {
        extFileAttr = extFileAttr | 16;
      }
      extFileAttr = extFileAttr | 0 & 63;
      var header = this.writeHeader(data, date);
      var localHeader = "PK" + header + data.fileName;
      var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);
      zipParts.push({ localHeader, centralDir, compressedData: data });
      return dirLength + localHeader.length + data.compressedSize;
    };
    ZipArchive2.prototype.writeHeader = function(data, date) {
      var zipHeader = "";
      zipHeader += "\n\0\0\0";
      zipHeader += data.compressionType;
      zipHeader += this.getBytes(this.getModifiedTime(date), 2);
      zipHeader += this.getBytes(this.getModifiedDate(date), 2);
      zipHeader += this.getBytes(data.crc32Value, 4);
      zipHeader += this.getBytes(data.compressedSize, 4);
      zipHeader += this.getBytes(data.uncompressedDataSize, 4);
      zipHeader += this.getBytes(data.fileName.length, 2);
      zipHeader += this.getBytes(0, 2);
      return zipHeader;
    };
    ZipArchive2.prototype.writeZippedContent = function(fileName, zipData, localDirLen, skipFileSave) {
      var cenDirLen = 0;
      var buffer = [];
      for (var i = 0; i < zipData.length; i++) {
        var item = zipData[i];
        cenDirLen += item.centralDir.length;
        buffer.push(this.getArrayBuffer(item.localHeader));
        while (item.compressedData.compressedData.length) {
          buffer.push(item.compressedData.compressedData.shift().buffer);
        }
      }
      for (var i = 0; i < zipData.length; i++) {
        buffer.push(this.getArrayBuffer(zipData[i].centralDir));
      }
      buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));
      var blob = new Blob(buffer, { type: "application/zip" });
      if (!skipFileSave) {
        Save.save(fileName, blob);
      }
      return blob;
    };
    ZipArchive2.prototype.writeCentralDirectory = function(data, localHeader, offset, externalFileAttribute) {
      var directoryHeader = "PK" + this.getBytes(20, 2) + localHeader + // inherit from file header
      this.getBytes(0, 2) + // comment length
      "\0\0\0\0" + // internal file attributes 
      this.getBytes(externalFileAttribute, 4) + // external file attributes
      this.getBytes(offset, 4) + // local fileHeader relative offset
      data.fileName;
      return directoryHeader;
    };
    ZipArchive2.prototype.writeFooter = function(zipData, centralLength, localLength) {
      var dirEnd = "PK\0\0\0\0" + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);
      return dirEnd;
    };
    ZipArchive2.prototype.getArrayBuffer = function(input2) {
      var a = new Uint8Array(input2.length);
      for (var j = 0; j < input2.length; ++j) {
        a[j] = input2.charCodeAt(j) & 255;
      }
      return a.buffer;
    };
    ZipArchive2.prototype.getBytes = function(value, offset) {
      var bytes = "";
      for (var i = 0; i < offset; i++) {
        bytes += String.fromCharCode(value & 255);
        value = value >>> 8;
      }
      return bytes;
    };
    ZipArchive2.prototype.getModifiedTime = function(date) {
      var modTime = date.getHours();
      modTime = modTime << 6;
      modTime = modTime | date.getMinutes();
      modTime = modTime << 5;
      return modTime = modTime | date.getSeconds() / 2;
    };
    ZipArchive2.prototype.getModifiedDate = function(date) {
      var modiDate = date.getFullYear() - 1980;
      modiDate = modiDate << 4;
      modiDate = modiDate | date.getMonth() + 1;
      modiDate = modiDate << 5;
      return modiDate = modiDate | date.getDate();
    };
    ZipArchive2.prototype.calculateCrc32Value = function(crc32Value, input2, crc32Table) {
      crc32Value ^= -1;
      for (var i = 0; i < input2.length; i++) {
        crc32Value = crc32Value >>> 8 ^ crc32Table[(crc32Value ^ input2[i]) & 255];
      }
      return crc32Value ^ -1;
    };
    ZipArchive2.initCrc32Table = function() {
      var i;
      for (var j = 0; j < 256; j++) {
        i = j;
        for (var k = 0; k < 8; k++) {
          i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
        }
        CRC32TABLE[j] = i;
      }
    };
    ZipArchive2.findValueFromEnd = function(stream, value, maxCount) {
      if (stream == null)
        throw new DOMException("stream");
      var lStreamSize = stream.inputStream.buffer.byteLength;
      if (lStreamSize < 4)
        return -1;
      var arrBuffer = new Uint8Array(4);
      var lLastPos = Math.max(0, lStreamSize - maxCount);
      var lCurrentPosition = lStreamSize - 1 - INT_SIZE;
      stream.position = lCurrentPosition;
      stream.read(arrBuffer, 0, INT_SIZE);
      var uiCurValue = arrBuffer[0];
      var bFound = uiCurValue == value;
      if (!bFound) {
        while (lCurrentPosition > lLastPos) {
          uiCurValue <<= 8;
          lCurrentPosition--;
          stream.position = lCurrentPosition;
          uiCurValue += stream.readByte();
          if (uiCurValue == value) {
            bFound = true;
            break;
          }
        }
      }
      return bFound ? lCurrentPosition : -1;
    };
    ZipArchive2.ReadInt32 = function(stream) {
      var buffer = new Uint8Array(INT_SIZE);
      if (stream.read(buffer, 0, INT_SIZE) != INT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt32(buffer, 0);
    };
    ZipArchive2.ReadInt16 = function(stream) {
      var buffer = new Uint8Array(SHORT_SIZE);
      if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt16(buffer, 0);
    };
    ZipArchive2.ReadUInt16 = function(stream) {
      {
        var buffer = new Uint8Array(SHORT_SIZE);
        if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
          throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
        }
        return Utils.bitConverterToInt16(buffer, 0);
      }
    };
    return ZipArchive2;
  }()
);
var ZipArchiveItemHelper = (
  /** @class */
  function() {
    function ZipArchiveItemHelper2() {
      this.headerSignature = 67324752;
      this.checkCrc = true;
      this.crc32 = 0;
    }
    ZipArchiveItemHelper2.prototype.readCentralDirectoryData = function(stream) {
      stream.position += 4;
      this.options = ZipArchive.ReadInt16(stream);
      this.compressionMethod = ZipArchive.ReadInt16(stream);
      this.checkCrc = this.compressionMethod != 99;
      var lastModified = ZipArchive.ReadInt32(stream);
      this.crc32 = Utils.bitConverterToUInt32(ZipArchive.ReadInt32(stream));
      this.compressedSize = ZipArchive.ReadInt32(stream);
      this.originalSize = ZipArchive.ReadInt32(stream);
      var iFileNameLength = ZipArchive.ReadInt16(stream);
      var iExtraFieldLenth = ZipArchive.ReadInt16(stream);
      var iCommentLength = ZipArchive.ReadInt16(stream);
      stream.position += 4;
      this.externalAttributes = ZipArchive.ReadInt32(stream);
      this.localHeaderOffset = ZipArchive.ReadInt32(stream);
      var arrBuffer = new Uint8Array(iFileNameLength);
      stream.read(arrBuffer, 0, iFileNameLength);
      var m_strItemName = Utils.byteToString(arrBuffer);
      m_strItemName = m_strItemName.replace("\\", "/");
      this.name = m_strItemName;
      stream.position += iExtraFieldLenth + iCommentLength;
      if (this.options != 0)
        this.options = 0;
    };
    ZipArchiveItemHelper2.prototype.readData = function(stream, checkCrc) {
      if (stream.length == 0)
        throw new DOMException("stream");
      stream.position = this.localHeaderOffset;
      this.checkCrc = checkCrc;
      this.readLocalHeader(stream);
      this.readCompressedData(stream);
    };
    ZipArchiveItemHelper2.prototype.decompressData = function() {
      if (this.compressionMethod == 8) {
        if (this.originalSize > 0) {
          this.decompressDataOld();
        }
      }
    };
    ZipArchiveItemHelper2.prototype.decompressDataOld = function() {
      var reader = new CompressedStreamReader(this.compressedStream, true);
      var decompressedData;
      if (this.originalSize > 0)
        decompressedData = new Stream(new Uint8Array(this.originalSize));
      var arrBuffer = new Uint8Array(BufferSize);
      var iReadBytes;
      var past = new Uint8Array(0);
      while ((iReadBytes = reader.read(arrBuffer, 0, BufferSize)) > 0) {
        decompressedData.write(arrBuffer.subarray(0, iReadBytes), 0, iReadBytes);
      }
      this.unCompressedStream = decompressedData.toByteArray();
      if (this.checkCrc) {
      }
    };
    ZipArchiveItemHelper2.prototype.readLocalHeader = function(stream) {
      if (stream.length == 0)
        throw new DOMException("stream");
      if (ZipArchive.ReadInt32(stream) != this.headerSignature)
        throw new DOMException("Can't find local header signature - wrong file format or file is corrupt.");
      stream.position += 22;
      var iNameLength = ZipArchive.ReadInt16(stream);
      var iExtraLength = ZipArchive.ReadUInt16(stream);
      if (this.compressionMethod == 99) {
      } else if (iExtraLength > 2) {
        stream.position += iNameLength;
        var headerVal = ZipArchive.ReadInt16(stream);
        if (headerVal == 23)
          throw new DOMException("UnSupported");
        else
          stream.position += iExtraLength - 2;
      } else
        stream.position += iNameLength + iExtraLength;
    };
    ZipArchiveItemHelper2.prototype.readCompressedData = function(stream) {
      var dataStream;
      if (this.compressedSize > 0) {
        var iBytesLeft = this.compressedSize;
        dataStream = new Stream(new Uint8Array(iBytesLeft));
        var arrBuffer = new Uint8Array(BufferSize);
        while (iBytesLeft > 0) {
          var iBytesToRead = Math.min(iBytesLeft, BufferSize);
          if (stream.read(arrBuffer, 0, iBytesToRead) != iBytesToRead)
            throw new DOMException("End of file reached - wrong file format or file is corrupt.");
          dataStream.write(arrBuffer.subarray(0, iBytesToRead), 0, iBytesToRead);
          iBytesLeft -= iBytesToRead;
        }
        this.compressedStream = new Uint8Array(dataStream.inputStream);
      } else if (this.compressedSize < 0) {
      } else if (this.compressedSize == 0) {
      }
    };
    return ZipArchiveItemHelper2;
  }()
);
var ZipArchiveItem = (
  /** @class */
  function() {
    function ZipArchiveItem2(data, itemName) {
      if (data === null || data === void 0) {
        throw new Error("ArgumentException: data cannot be null or undefined");
      }
      if (itemName === null || itemName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (itemName.length === 0) {
        throw new Error("string cannot be empty");
      }
      this.data = data;
      this.name = itemName;
    }
    Object.defineProperty(ZipArchiveItem2.prototype, "dataStream", {
      get: function() {
        return this.decompressedStream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchiveItem2.prototype, "name", {
      /**
       * Get the name of archive item
       * @returns string
       */
      get: function() {
        return this.fileName;
      },
      /**
       * Set the name of archive item
       * @param  {string} value
       */
      set: function(value) {
        this.fileName = value;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchiveItem2.prototype.destroy = function() {
      this.fileName = void 0;
      this.data = void 0;
    };
    return ZipArchiveItem2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-writer.js
var ARR_LITERAL_CODES = new Int16Array(286);
var ARR_LITERAL_LENGTHS = new Uint8Array(286);
var ARR_DISTANCE_CODES = new Int16Array(30);
var ARR_DISTANCE_LENGTHS = new Uint8Array(30);
var CompressedStreamWriter = (
  /** @class */
  function() {
    function CompressedStreamWriter2(noWrap) {
      this.pendingBuffer = new Uint8Array(1 << 16);
      this.pendingBufLength = 0;
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.currentHash = 0;
      this.matchStart = 0;
      this.matchLength = 0;
      this.matchPrevAvail = false;
      this.blockStart = 0;
      this.stringStart = 0;
      this.lookAhead = 0;
      this.totalBytesIn = 0;
      this.inputOffset = 0;
      this.inputEnd = 0;
      this.windowSize = 1 << 15;
      this.windowMask = this.windowSize - 1;
      this.hashSize = 1 << 15;
      this.hashMask = this.hashSize - 1;
      this.hashShift = Math.floor((15 + 3 - 1) / 3);
      this.maxDist = this.windowSize - 262;
      this.checkSum = 1;
      this.noWrap = false;
      if (!CompressedStreamWriter2.isHuffmanTreeInitiated) {
        CompressedStreamWriter2.initHuffmanTree();
        CompressedStreamWriter2.isHuffmanTreeInitiated = true;
      }
      this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);
      this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);
      this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);
      this.arrDistances = new Uint16Array(1 << 14);
      this.arrLiterals = new Uint8Array(1 << 14);
      this.stream = [];
      this.dataWindow = new Uint8Array(2 * this.windowSize);
      this.hashHead = new Int16Array(this.hashSize);
      this.hashPrevious = new Int16Array(this.windowSize);
      this.blockStart = this.stringStart = 1;
      this.noWrap = noWrap;
      if (!noWrap) {
        this.writeZLibHeader();
      }
    }
    Object.defineProperty(CompressedStreamWriter2.prototype, "compressedData", {
      /**
       * get compressed data
       */
      get: function() {
        return this.stream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressedStreamWriter2.prototype, "getCompressedString", {
      get: function() {
        var compressedString = "";
        if (this.stream !== void 0) {
          for (var i = 0; i < this.stream.length; i++) {
            compressedString += String.fromCharCode.apply(null, this.stream[i]);
          }
        }
        return compressedString;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamWriter2.prototype.write = function(data, offset, length) {
      if (data === void 0 || data === null) {
        throw new Error("ArgumentException: data cannot null or undefined");
      }
      var end = offset + length;
      if (0 > offset || offset > end || end > data.length) {
        throw new Error("ArgumentOutOfRangeException: Offset or length is incorrect");
      }
      if (typeof data === "string") {
        var encode = new Encoding(false);
        encode.type = "Utf8";
        data = new Uint8Array(encode.getBytes(data, 0, data.length));
        end = offset + data.length;
      }
      this.inputBuffer = data;
      this.inputOffset = offset;
      this.inputEnd = end;
      if (!this.noWrap) {
        this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);
      }
      while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {
        this.pendingBufferFlush();
        this.compressData(false);
      }
    };
    CompressedStreamWriter2.prototype.writeZLibHeader = function() {
      var headerDate = 8 + (7 << 4) << 8;
      headerDate |= (5 >> 2 & 3) << 6;
      headerDate += 31 - headerDate % 31;
      this.pendingBufferWriteShortBytes(headerDate);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShortBytes = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
      this.pendingBuffer[this.pendingBufLength++] = s;
    };
    CompressedStreamWriter2.prototype.compressData = function(finish) {
      var success;
      do {
        this.fillWindow();
        var canFlush = finish && this.inputEnd === this.inputOffset;
        success = this.compressSlow(canFlush, finish);
      } while (this.pendingBufLength === 0 && success);
      return success;
    };
    CompressedStreamWriter2.prototype.compressSlow = function(flush, finish) {
      if (this.lookAhead < 262 && !flush) {
        return false;
      }
      while (this.lookAhead >= 262 || flush) {
        if (this.lookAhead === 0) {
          return this.lookAheadCompleted(finish);
        }
        if (this.stringStart >= 2 * this.windowSize - 262) {
          this.slideWindow();
        }
        var prevMatch = this.matchStart;
        var prevLen = this.matchLength;
        if (this.lookAhead >= 3) {
          this.discardMatch();
        }
        if (prevLen >= 3 && this.matchLength <= prevLen) {
          prevLen = this.matchPreviousBest(prevMatch, prevLen);
        } else {
          this.matchPreviousAvailable();
        }
        if (this.bufferPosition >= 1 << 14) {
          return this.huffmanIsFull(finish);
        }
      }
      return true;
    };
    CompressedStreamWriter2.prototype.discardMatch = function() {
      var hashHead = this.insertString();
      if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {
        if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {
          this.matchLength = 3 - 1;
        }
      }
    };
    CompressedStreamWriter2.prototype.matchPreviousAvailable = function() {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = true;
      this.stringStart++;
      this.lookAhead--;
    };
    CompressedStreamWriter2.prototype.matchPreviousBest = function(prevMatch, prevLen) {
      this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);
      prevLen -= 2;
      do {
        this.stringStart++;
        this.lookAhead--;
        if (this.lookAhead >= 3) {
          this.insertString();
        }
      } while (--prevLen > 0);
      this.stringStart++;
      this.lookAhead--;
      this.matchPrevAvail = false;
      this.matchLength = 3 - 1;
      return prevLen;
    };
    CompressedStreamWriter2.prototype.lookAheadCompleted = function(finish) {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = false;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);
      this.blockStart = this.stringStart;
      return false;
    };
    CompressedStreamWriter2.prototype.huffmanIsFull = function(finish) {
      var len = this.stringStart - this.blockStart;
      if (this.matchPrevAvail) {
        len--;
      }
      var lastBlock = finish && this.lookAhead === 0 && !this.matchPrevAvail;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);
      this.blockStart += len;
      return !lastBlock;
    };
    CompressedStreamWriter2.prototype.fillWindow = function() {
      if (this.stringStart >= this.windowSize + this.maxDist) {
        this.slideWindow();
      }
      while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {
        var more = 2 * this.windowSize - this.lookAhead - this.stringStart;
        if (more > this.inputEnd - this.inputOffset) {
          more = this.inputEnd - this.inputOffset;
        }
        this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);
        this.inputOffset += more;
        this.totalBytesIn += more;
        this.lookAhead += more;
      }
      if (this.lookAhead >= 3) {
        this.updateHash();
      }
    };
    CompressedStreamWriter2.prototype.slideWindow = function() {
      this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);
      this.matchStart -= this.windowSize;
      this.stringStart -= this.windowSize;
      this.blockStart -= this.windowSize;
      for (var i = 0; i < this.hashSize; ++i) {
        var m = this.hashHead[i] & 65535;
        this.hashHead[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
      for (var i = 0; i < this.windowSize; i++) {
        var m = this.hashPrevious[i] & 65535;
        this.hashPrevious[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
    };
    CompressedStreamWriter2.prototype.insertString = function() {
      var match;
      var hash = (this.currentHash << this.hashShift ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;
      this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];
      this.hashHead[hash] = this.stringStart;
      this.currentHash = hash;
      return match & 65535;
    };
    CompressedStreamWriter2.prototype.findLongestMatch = function(curMatch) {
      var chainLen = 4096;
      var niceLen = 258;
      var scan = this.stringStart;
      var match;
      var bestEnd = this.stringStart + this.matchLength;
      var bestLength = Math.max(this.matchLength, 3 - 1);
      var limit = Math.max(this.stringStart - this.maxDist, 0);
      var stringEnd = this.stringStart + 258 - 1;
      var scanEnd1 = this.dataWindow[bestEnd - 1];
      var scanEnd = this.dataWindow[bestEnd];
      var data = this.dataWindow;
      if (bestLength >= 32) {
        chainLen >>= 2;
      }
      if (niceLen > this.lookAhead) {
        niceLen = this.lookAhead;
      }
      do {
        if (data[curMatch + bestLength] !== scanEnd || data[curMatch + bestLength - 1] !== scanEnd1 || data[curMatch] !== data[scan] || data[curMatch + 1] !== data[scan + 1]) {
          continue;
        }
        match = curMatch + 2;
        scan += 2;
        while (data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {
        }
        if (scan > bestEnd) {
          this.matchStart = curMatch;
          bestEnd = scan;
          bestLength = scan - this.stringStart;
          if (bestLength >= niceLen) {
            break;
          }
          scanEnd1 = data[bestEnd - 1];
          scanEnd = data[bestEnd];
        }
        scan = this.stringStart;
      } while ((curMatch = this.hashPrevious[curMatch & this.windowMask] & 65535) > limit && --chainLen !== 0);
      this.matchLength = Math.min(bestLength, this.lookAhead);
      return this.matchLength >= 3;
    };
    CompressedStreamWriter2.prototype.updateHash = function() {
      this.currentHash = this.dataWindow[this.stringStart] << this.hashShift ^ this.dataWindow[this.stringStart + 1];
    };
    CompressedStreamWriter2.prototype.huffmanTallyLit = function(literal) {
      this.arrDistances[this.bufferPosition] = 0;
      this.arrLiterals[this.bufferPosition++] = literal;
      this.treeLiteral.codeFrequencies[literal]++;
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanTallyDist = function(dist, len) {
      this.arrDistances[this.bufferPosition] = dist;
      this.arrLiterals[this.bufferPosition++] = len - 3;
      var lc = this.huffmanLengthCode(len - 3);
      this.treeLiteral.codeFrequencies[lc]++;
      if (lc >= 265 && lc < 285) {
        this.extraBits += Math.floor((lc - 261) / 4);
      }
      var dc = this.huffmanDistanceCode(dist - 1);
      this.treeDistances.codeFrequencies[dc]++;
      if (dc >= 4) {
        this.extraBits += Math.floor(dc / 2 - 1);
      }
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanFlushBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.treeLiteral.codeFrequencies[256]++;
      this.treeLiteral.buildTree();
      this.treeDistances.buildTree();
      this.treeLiteral.calculateBLFreq(this.treeCodeLengths);
      this.treeDistances.calculateBLFreq(this.treeCodeLengths);
      this.treeCodeLengths.buildTree();
      var blTreeCodes = 4;
      for (var i = 18; i > blTreeCodes; i--) {
        if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {
          blTreeCodes = i + 1;
        }
      }
      var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() + this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;
      var static_len = this.extraBits;
      for (var i = 0; i < 286; i++) {
        static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];
      }
      for (var i = 0; i < 30; i++) {
        static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];
      }
      if (opt_len >= static_len) {
        opt_len = static_len;
      }
      if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
        this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
      } else if (opt_len == static_len) {
        this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);
        this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);
        this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);
        this.huffmanCompressBlock();
        this.huffmanReset();
      } else {
        this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);
        this.huffmanSendAllTrees(blTreeCodes);
        this.huffmanCompressBlock();
        this.huffmanReset();
      }
    };
    CompressedStreamWriter2.prototype.huffmanFlushStoredBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);
      this.pendingBufferAlignToByte();
      this.pendingBufferWriteShort(storedLength);
      this.pendingBufferWriteShort(~storedLength);
      this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);
      this.huffmanReset();
    };
    CompressedStreamWriter2.prototype.huffmanLengthCode = function(len) {
      if (len === 255) {
        return 285;
      }
      var code = 257;
      while (len >= 8) {
        code += 4;
        len >>= 1;
      }
      return code + len;
    };
    CompressedStreamWriter2.prototype.huffmanDistanceCode = function(distance) {
      var code = 0;
      while (distance >= 4) {
        code += 2;
        distance >>= 1;
      }
      return code + distance;
    };
    CompressedStreamWriter2.prototype.huffmanSendAllTrees = function(blTreeCodes) {
      this.treeCodeLengths.buildCodes();
      this.treeLiteral.buildCodes();
      this.treeDistances.buildCodes();
      this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);
      this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);
      this.pendingBufferWriteBits(blTreeCodes - 4, 4);
      for (var rank = 0; rank < blTreeCodes; rank++) {
        this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);
      }
      this.treeLiteral.writeTree(this.treeCodeLengths);
      this.treeDistances.writeTree(this.treeCodeLengths);
    };
    CompressedStreamWriter2.prototype.huffmanReset = function() {
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.treeLiteral.reset();
      this.treeDistances.reset();
      this.treeCodeLengths.reset();
    };
    CompressedStreamWriter2.prototype.huffmanCompressBlock = function() {
      for (var i = 0; i < this.bufferPosition; i++) {
        var literalLen = this.arrLiterals[i] & 255;
        var dist = this.arrDistances[i];
        if (dist-- !== 0) {
          var lc = this.huffmanLengthCode(literalLen);
          this.treeLiteral.writeCodeToStream(lc);
          var bits = Math.floor((lc - 261) / 4);
          if (bits > 0 && bits <= 5) {
            this.pendingBufferWriteBits(literalLen & (1 << bits) - 1, bits);
          }
          var dc = this.huffmanDistanceCode(dist);
          this.treeDistances.writeCodeToStream(dc);
          bits = Math.floor(dc / 2 - 1);
          if (bits > 0) {
            this.pendingBufferWriteBits(dist & (1 << bits) - 1, bits);
          }
        } else {
          this.treeLiteral.writeCodeToStream(literalLen);
        }
      }
      this.treeLiteral.writeCodeToStream(256);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteBits = function(b, count) {
      var uint = new Uint32Array(1);
      uint[0] = this.pendingBufCache | b << this.pendingBufBitsInCache;
      this.pendingBufCache = uint[0];
      this.pendingBufBitsInCache += count;
      this.pendingBufferFlushBits();
    };
    CompressedStreamWriter2.prototype.pendingBufferFlush = function(isClose) {
      this.pendingBufferFlushBits();
      if (this.pendingBufLength > 0) {
        var array = new Uint8Array(this.pendingBufLength);
        array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);
        this.stream.push(array);
      }
      this.pendingBufLength = 0;
    };
    CompressedStreamWriter2.prototype.pendingBufferFlushBits = function() {
      var result = 0;
      while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < 1 << 16) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
        this.pendingBufCache >>= 8;
        this.pendingBufBitsInCache -= 8;
        result++;
      }
      return result;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteByteBlock = function(data, offset, length) {
      var array = data.subarray(offset, offset + length);
      this.pendingBuffer.set(array, this.pendingBufLength);
      this.pendingBufLength += length;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShort = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s;
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
    };
    CompressedStreamWriter2.prototype.pendingBufferAlignToByte = function() {
      if (this.pendingBufBitsInCache > 0) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
      }
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
    };
    CompressedStreamWriter2.initHuffmanTree = function() {
      var i = 0;
      while (i < 144) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(48 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      while (i < 256) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(400 - 144 + i << 7);
        ARR_LITERAL_LENGTHS[i++] = 9;
      }
      while (i < 280) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(0 - 256 + i << 9);
        ARR_LITERAL_LENGTHS[i++] = 7;
      }
      while (i < 286) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(192 - 280 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      for (i = 0; i < 30; i++) {
        ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);
        ARR_DISTANCE_LENGTHS[i] = 5;
      }
    };
    CompressedStreamWriter2.prototype.close = function() {
      do {
        this.pendingBufferFlush(true);
        if (!this.compressData(true)) {
          this.pendingBufferFlush(true);
          this.pendingBufferAlignToByte();
          if (!this.noWrap) {
            this.pendingBufferWriteShortBytes(this.checkSum >> 16);
            this.pendingBufferWriteShortBytes(this.checkSum & 65535);
          }
          this.pendingBufferFlush(true);
        }
      } while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0));
    };
    CompressedStreamWriter2.prototype.destroy = function() {
      this.stream = [];
      this.stream = void 0;
      this.pendingBuffer = void 0;
      this.treeLiteral = void 0;
      this.treeDistances = void 0;
      this.treeCodeLengths = void 0;
      this.arrLiterals = void 0;
      this.arrDistances = void 0;
      this.hashHead = void 0;
      this.hashPrevious = void 0;
      this.dataWindow = void 0;
      this.inputBuffer = void 0;
      this.pendingBufLength = void 0;
      this.pendingBufCache = void 0;
      this.pendingBufBitsInCache = void 0;
      this.bufferPosition = void 0;
      this.extraBits = void 0;
      this.currentHash = void 0;
      this.matchStart = void 0;
      this.matchLength = void 0;
      this.matchPrevAvail = void 0;
      this.blockStart = void 0;
      this.stringStart = void 0;
      this.lookAhead = void 0;
      this.totalBytesIn = void 0;
      this.inputOffset = void 0;
      this.inputEnd = void 0;
      this.windowSize = void 0;
      this.windowMask = void 0;
      this.hashSize = void 0;
      this.hashMask = void 0;
      this.hashShift = void 0;
      this.maxDist = void 0;
      this.checkSum = void 0;
      this.noWrap = void 0;
    };
    CompressedStreamWriter2.isHuffmanTreeInitiated = false;
    return CompressedStreamWriter2;
  }()
);
var CompressorHuffmanTree = (
  /** @class */
  function() {
    function CompressorHuffmanTree2(writer, elementCount, minCodes, maxLength) {
      this.writer = writer;
      this.codeMinCount = minCodes;
      this.maxLength = maxLength;
      this.codeFrequency = new Uint16Array(elementCount);
      this.lengthCount = new Int32Array(maxLength);
    }
    Object.defineProperty(CompressorHuffmanTree2.prototype, "treeLength", {
      get: function() {
        return this.codeCount;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeLengths", {
      get: function() {
        return this.codeLength;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeFrequencies", {
      get: function() {
        return this.codeFrequency;
      },
      enumerable: true,
      configurable: true
    });
    CompressorHuffmanTree2.prototype.setStaticCodes = function(codes, lengths) {
      var temp = new Int16Array(codes.length);
      temp.set(codes, 0);
      this.codes = temp;
      var lengthTemp = new Uint8Array(lengths.length);
      lengthTemp.set(lengths, 0);
      this.codeLength = lengthTemp;
    };
    CompressorHuffmanTree2.prototype.reset = function() {
      for (var i = 0; i < this.codeFrequency.length; i++) {
        this.codeFrequency[i] = 0;
      }
      this.codes = void 0;
      this.codeLength = void 0;
    };
    CompressorHuffmanTree2.prototype.writeCodeToStream = function(code) {
      this.writer.pendingBufferWriteBits(this.codes[code] & 65535, this.codeLength[code]);
    };
    CompressorHuffmanTree2.prototype.buildCodes = function() {
      var nextCode = new Int32Array(this.maxLength);
      this.codes = new Int16Array(this.codeCount);
      var code = 0;
      for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {
        nextCode[bitsCount] = code;
        code += this.lengthCount[bitsCount] << 15 - bitsCount;
      }
      for (var i = 0; i < this.codeCount; i++) {
        var bits = this.codeLength[i];
        if (bits > 0) {
          this.codes[i] = CompressorHuffmanTree2.bitReverse(nextCode[bits - 1]);
          nextCode[bits - 1] += 1 << 16 - bits;
        }
      }
    };
    CompressorHuffmanTree2.bitReverse = function(value) {
      return CompressorHuffmanTree2.reverseBits[value & 15] << 12 | CompressorHuffmanTree2.reverseBits[value >> 4 & 15] << 8 | CompressorHuffmanTree2.reverseBits[value >> 8 & 15] << 4 | CompressorHuffmanTree2.reverseBits[value >> 12];
    };
    CompressorHuffmanTree2.prototype.getEncodedLength = function() {
      var len = 0;
      for (var i = 0; i < this.codeFrequency.length; i++) {
        len += this.codeFrequency[i] * this.codeLength[i];
      }
      return len;
    };
    CompressorHuffmanTree2.prototype.calculateBLFreq = function(blTree) {
      var maxCount;
      var minCount;
      var count;
      var curLen = -1;
      var i = 0;
      while (i < this.codeCount) {
        count = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxCount = 138;
          minCount = 3;
        } else {
          maxCount = 6;
          minCount = 3;
          if (curLen !== nextLen) {
            blTree.codeFrequency[nextLen]++;
            count = 0;
          }
        }
        curLen = nextLen;
        i++;
        while (i < this.codeCount && curLen === this.codeLength[i]) {
          i++;
          if (++count >= maxCount) {
            break;
          }
        }
        if (count < minCount) {
          blTree.codeFrequency[curLen] += count;
        } else if (curLen !== 0) {
          blTree.codeFrequency[16]++;
        } else if (count <= 10) {
          blTree.codeFrequency[17]++;
        } else {
          blTree.codeFrequency[18]++;
        }
      }
    };
    CompressorHuffmanTree2.prototype.writeTree = function(blTree) {
      var maxRepeatCount;
      var minRepeatCount;
      var currentRepeatCount;
      var currentCodeLength = -1;
      var i = 0;
      while (i < this.codeCount) {
        currentRepeatCount = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxRepeatCount = 138;
          minRepeatCount = 3;
        } else {
          maxRepeatCount = 6;
          minRepeatCount = 3;
          if (currentCodeLength !== nextLen) {
            blTree.writeCodeToStream(nextLen);
            currentRepeatCount = 0;
          }
        }
        currentCodeLength = nextLen;
        i++;
        while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {
          i++;
          if (++currentRepeatCount >= maxRepeatCount) {
            break;
          }
        }
        if (currentRepeatCount < minRepeatCount) {
          while (currentRepeatCount-- > 0) {
            blTree.writeCodeToStream(currentCodeLength);
          }
        } else if (currentCodeLength !== 0) {
          blTree.writeCodeToStream(16);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);
        } else if (currentRepeatCount <= 10) {
          blTree.writeCodeToStream(17);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);
        } else {
          blTree.writeCodeToStream(18);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);
        }
      }
    };
    CompressorHuffmanTree2.prototype.buildTree = function() {
      var codesCount = this.codeFrequency.length;
      var arrTree = new Int32Array(codesCount);
      var treeLength = 0;
      var maxCount = 0;
      for (var n = 0; n < codesCount; n++) {
        var freq = this.codeFrequency[n];
        if (freq !== 0) {
          var pos = treeLength++;
          var pPos = 0;
          while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {
            arrTree[pos] = arrTree[pPos];
            pos = pPos;
          }
          arrTree[pos] = n;
          maxCount = n;
        }
      }
      while (treeLength < 2) {
        arrTree[treeLength++] = maxCount < 2 ? ++maxCount : 0;
      }
      this.codeCount = Math.max(maxCount + 1, this.codeMinCount);
      var leafsCount = treeLength;
      var nodesCount = leafsCount;
      var child = new Int32Array(4 * treeLength - 2);
      var values = new Int32Array(2 * treeLength - 1);
      for (var i = 0; i < treeLength; i++) {
        var node = arrTree[i];
        var iIndex = 2 * i;
        child[iIndex] = node;
        child[iIndex + 1] = -1;
        values[i] = this.codeFrequency[node] << 8;
        arrTree[i] = i;
      }
      this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);
      this.buildLength(child);
    };
    CompressorHuffmanTree2.prototype.constructHuffmanTree = function(arrTree, treeLength, values, nodesCount, child) {
      do {
        var first = arrTree[0];
        var last = arrTree[--treeLength];
        var lastVal = values[last];
        var pPos = 0;
        var path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
        var second = arrTree[0];
        last = nodesCount++;
        child[2 * last] = first;
        child[2 * last + 1] = second;
        var minDepth = Math.min(values[first] & 255, values[second] & 255);
        values[last] = lastVal = values[first] + values[second] - minDepth + 1;
        pPos = 0;
        path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
      } while (treeLength > 1);
    };
    CompressorHuffmanTree2.prototype.buildLength = function(child) {
      this.codeLength = new Uint8Array(this.codeFrequency.length);
      var numNodes = Math.floor(child.length / 2);
      var numLeafs = Math.floor((numNodes + 1) / 2);
      var overflow = 0;
      for (var i = 0; i < this.maxLength; i++) {
        this.lengthCount[i] = 0;
      }
      overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);
      if (overflow === 0) {
        return;
      }
      var iIncreasableLength = this.maxLength - 1;
      do {
        while (this.lengthCount[--iIncreasableLength] === 0) {
        }
        do {
          this.lengthCount[iIncreasableLength]--;
          this.lengthCount[++iIncreasableLength]++;
          overflow -= 1 << this.maxLength - 1 - iIncreasableLength;
        } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);
      } while (overflow > 0);
      this.recreateTree(child, overflow, numLeafs);
    };
    CompressorHuffmanTree2.prototype.recreateTree = function(child, overflow, numLeafs) {
      this.lengthCount[this.maxLength - 1] += overflow;
      this.lengthCount[this.maxLength - 2] -= overflow;
      var nodePtr = 2 * numLeafs;
      for (var bits = this.maxLength; bits !== 0; bits--) {
        var n = this.lengthCount[bits - 1];
        while (n > 0) {
          var childPtr = 2 * child[nodePtr++];
          if (child[childPtr + 1] === -1) {
            this.codeLength[child[childPtr]] = bits;
            n--;
          }
        }
      }
    };
    CompressorHuffmanTree2.prototype.calculateOptimalCodeLength = function(child, overflow, numNodes) {
      var lengths = new Int32Array(numNodes);
      lengths[numNodes - 1] = 0;
      for (var i = numNodes - 1; i >= 0; i--) {
        var childIndex = 2 * i + 1;
        if (child[childIndex] !== -1) {
          var bitLength = lengths[i] + 1;
          if (bitLength > this.maxLength) {
            bitLength = this.maxLength;
            overflow++;
          }
          lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;
        } else {
          var bitLength = lengths[i];
          this.lengthCount[bitLength - 1]++;
          this.codeLength[child[childIndex - 1]] = lengths[i];
        }
      }
      return overflow;
    };
    CompressorHuffmanTree2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    CompressorHuffmanTree2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return CompressorHuffmanTree2;
  }()
);
var ChecksumCalculator = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.checksumUpdate = function(checksum, buffer, offset, length) {
      var uint = new Uint32Array(1);
      uint[0] = checksum;
      var checksum_uint = uint[0];
      var s1 = uint[0] = checksum_uint & 65535;
      var s2 = uint[0] = checksum_uint >> ChecksumCalculator3.checkSumBitOffset;
      while (length > 0) {
        var steps = Math.min(length, ChecksumCalculator3.checksumIterationCount);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (uint[0] = buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= ChecksumCalculator3.checksumBase;
        s2 %= ChecksumCalculator3.checksumBase;
      }
      checksum_uint = s2 << ChecksumCalculator3.checkSumBitOffset | s1;
      return checksum_uint;
    };
    ChecksumCalculator3.checkSumBitOffset = 16;
    ChecksumCalculator3.checksumBase = 65521;
    ChecksumCalculator3.checksumIterationCount = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/decompressor-huffman-tree.js
var DecompressorHuffmanTree = (
  /** @class */
  function() {
    function DecompressorHuffmanTree2(lengths) {
      this.buildTree(lengths);
    }
    DecompressorHuffmanTree2.init = function() {
      var lengths;
      var index;
      lengths = new Uint8Array(288);
      index = 0;
      while (index < 144) {
        lengths[index++] = 8;
      }
      while (index < 256) {
        lengths[index++] = 9;
      }
      while (index < 280) {
        lengths[index++] = 7;
      }
      while (index < 288) {
        lengths[index++] = 8;
      }
      DecompressorHuffmanTree2.m_LengthTree = new DecompressorHuffmanTree2(lengths);
      lengths = new Uint8Array(32);
      index = 0;
      while (index < 32) {
        lengths[index++] = 5;
      }
      DecompressorHuffmanTree2.m_DistanceTree = new DecompressorHuffmanTree2(lengths);
    };
    DecompressorHuffmanTree2.prototype.prepareData = function(blCount, nextCode, lengths) {
      var code = 0;
      var treeSize = 512;
      for (var i = 0; i < lengths.length; i++) {
        var length_1 = lengths[i];
        if (length_1 > 0) {
          blCount[length_1]++;
        }
      }
      for (var bits = 1; bits <= DecompressorHuffmanTree2.MAX_BITLEN; bits++) {
        nextCode[bits] = code;
        code += blCount[bits] << 16 - bits;
        if (bits >= 10) {
          var start = nextCode[bits] & 130944;
          var end = code & 130944;
          treeSize += end - start >> 16 - bits;
        }
      }
      return { "code": code, "treeSize": treeSize };
    };
    DecompressorHuffmanTree2.prototype.treeFromData = function(blCount, nextCode, lengths, code, treeSize) {
      var tree = new Int16Array(treeSize);
      var pointer = 512;
      var increment = 1 << 7;
      for (var bits = DecompressorHuffmanTree2.MAX_BITLEN; bits >= 10; bits--) {
        var end = code & 130944;
        code -= blCount[bits] << 16 - bits;
        var start = code & 130944;
        for (var i = start; i < end; i += increment) {
          tree[Utils.bitReverse(i)] = Utils.bitConverterInt32ToInt16(-pointer << 4 | bits);
          pointer += 1 << bits - 9;
        }
      }
      for (var i = 0; i < lengths.length; i++) {
        var bits = lengths[i];
        if (bits == 0) {
          continue;
        }
        code = nextCode[bits];
        var revcode = Utils.bitReverse(code);
        if (bits <= 9) {
          do {
            tree[revcode] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < 512);
        } else {
          var subTree = tree[revcode & 511];
          var treeLen = 1 << (subTree & 15);
          subTree = -(subTree >> 4);
          do {
            tree[subTree | revcode >> 9] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < treeLen);
        }
        nextCode[bits] = code + (1 << 16 - bits);
      }
      return tree;
    };
    DecompressorHuffmanTree2.prototype.buildTree = function(lengths) {
      var blCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var nextCode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var prepareData = this.prepareData(blCount, nextCode, lengths);
      this.m_Tree = this.treeFromData(blCount, nextCode, lengths, prepareData.code, prepareData.treeSize);
    };
    DecompressorHuffmanTree2.prototype.unpackSymbol = function(input2) {
      var lookahead;
      var symbol;
      if ((lookahead = input2.peekBits(9)) >= 0) {
        if ((symbol = this.m_Tree[lookahead]) >= 0) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        }
        var subtree = -(symbol >> 4);
        var bitlen = symbol & 15;
        if ((lookahead = input2.peekBits(bitlen)) >= 0) {
          symbol = this.m_Tree[subtree | lookahead >> 9];
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          var bits = input2.availableBits;
          lookahead = input2.peekBits(bits);
          symbol = this.m_Tree[subtree | lookahead >> 9];
          if ((symbol & 15) <= bits) {
            input2.skipBits(symbol & 15);
            return symbol >> 4;
          } else {
            return -1;
          }
        }
      } else {
        var bits = input2.availableBits;
        lookahead = input2.peekBits(bits);
        symbol = this.m_Tree[lookahead];
        if (symbol >= 0 && (symbol & 15) <= bits) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          return -1;
        }
      }
    };
    Object.defineProperty(DecompressorHuffmanTree2, "lengthTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding lengths.
      /// </summary>
      get: function() {
        return this.m_LengthTree;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DecompressorHuffmanTree2, "distanceTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding distances.
      /// </summary>
      get: function() {
        return this.m_DistanceTree;
      },
      enumerable: true,
      configurable: true
    });
    DecompressorHuffmanTree2.MAX_BITLEN = 15;
    return DecompressorHuffmanTree2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/checksum-calculator.js
var ChecksumCalculator2 = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.ChecksumUpdate = function(checksum, buffer, offset, length) {
      var checkSumUInt = checksum;
      var s1 = checkSumUInt & 65535;
      var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;
      while (length > 0) {
        var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= this.DEF_CHECKSUM_BASE;
        s2 %= this.DEF_CHECKSUM_BASE;
      }
      checkSumUInt = s2 << this.DEF_CHECKSUM_BIT_OFFSET | s1;
      checksum = checkSumUInt;
    };
    ChecksumCalculator3.ChecksumGenerate = function(buffer, offset, length) {
      var result = 1;
      ChecksumCalculator3.ChecksumUpdate(result, buffer, offset, length);
      return result;
    };
    ChecksumCalculator3.DEF_CHECKSUM_BIT_OFFSET = 16;
    ChecksumCalculator3.DEF_CHECKSUM_BASE = 65521;
    ChecksumCalculator3.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-reader.js
var CompressedStreamReader = (
  /** @class */
  function() {
    function CompressedStreamReader2(stream, bNoWrap) {
      this.defaultHuffmanDynamicTree = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      this.DEF_HEADER_METHOD_MASK = 15 << 8;
      this.DEF_HEADER_INFO_MASK = 240 << 8;
      this.DEF_HEADER_FLAGS_FCHECK = 31;
      this.DEF_HEADER_FLAGS_FDICT = 32;
      this.DEF_HEADER_FLAGS_FLEVEL = 192;
      this.DEF_MAX_WINDOW_SIZE = 65535;
      this.DEF_HUFFMAN_REPEATE_MAX = 258;
      this.DEF_HUFFMAN_END_BLOCK = 256;
      this.DEF_HUFFMAN_LENGTH_MINIMUMCODE = 257;
      this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE = 285;
      this.DEF_HUFFMAN_DISTANCE_MAXIMUMCODE = 29;
      this.mCheckSum = 1;
      this.tBuffer = 0;
      this.mBufferedBits = 0;
      this.mTempBuffer = new Uint8Array(4);
      this.mBlockBuffer = new Uint8Array(this.DEF_MAX_WINDOW_SIZE);
      this.mbNoWrap = false;
      this.mWindowSize = 0;
      this.mCurrentPosition = 0;
      this.mDataLength = 0;
      this.mbCanReadNextBlock = true;
      this.mbCanReadMoreData = true;
      this.mbCheckSumRead = false;
      if (stream == null) {
        throw new DOMException("stream");
      }
      if (stream.length === 0) {
        throw new DOMException("stream - string can not be empty");
      }
      DecompressorHuffmanTree.init();
      this.mInputStream = new Stream(stream);
      this.mbNoWrap = bNoWrap;
      if (!this.mbNoWrap) {
        this.readZLibHeader();
      }
      this.decodeBlockHeader();
    }
    Object.defineProperty(CompressedStreamReader2.prototype, "mBuffer", {
      get: function() {
        return this.tBuffer;
      },
      set: function(value) {
        this.tBuffer = value;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.peekBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count > 32) {
        throw new DOMException("count", "Count of bits is too large.");
      }
      if (this.mBufferedBits < count) {
        this.fillBuffer();
      }
      if (this.mBufferedBits < count) {
        return -1;
      }
      var bitMask = ~(4294967295 << count);
      var result = Utils.bitConverterUintToInt32(this.mBuffer & bitMask);
      return result;
    };
    CompressedStreamReader2.prototype.fillBuffer = function() {
      var length = 4 - (this.mBufferedBits >> 3) - ((this.mBufferedBits & 7) !== 0 ? 1 : 0);
      if (length === 0) {
        return;
      }
      var bytesRead = this.mInputStream.read(this.mTempBuffer, 0, length);
      for (var i = 0; i < bytesRead; i++) {
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer | Utils.bitConverterInt32ToUint(this.mTempBuffer[i] << this.mBufferedBits));
        this.mBufferedBits += 8;
      }
    };
    CompressedStreamReader2.prototype.skipBits = function(count) {
      if (count < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count === 0) {
        return;
      }
      if (count >= this.mBufferedBits) {
        count -= this.mBufferedBits;
        this.mBufferedBits = 0;
        this.mBuffer = 0;
        if (count > 0) {
          this.mInputStream.position += count >> 3;
          count &= 7;
          if (count > 0) {
            this.fillBuffer();
            this.mBufferedBits -= count;
            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
          }
        }
      } else {
        this.mBufferedBits -= count;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      }
    };
    Object.defineProperty(CompressedStreamReader2.prototype, "availableBits", {
      get: function() {
        return this.mBufferedBits;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.readZLibHeader = function() {
      var header = this.readInt16();
      if (header === -1) {
        throw new DOMException("Header of the stream can not be read.");
      }
      if (header % 31 !== 0) {
        throw new DOMException("Header checksum illegal");
      }
      if ((header & this.DEF_HEADER_METHOD_MASK) !== 8 << 8) {
        throw new DOMException("Unsupported compression method.");
      }
      this.mWindowSize = Math.pow(2, ((header & this.DEF_HEADER_INFO_MASK) >> 12) + 8);
      if (this.mWindowSize > 65535) {
        throw new DOMException("Unsupported window size for deflate compression method.");
      }
      if ((header & this.DEF_HEADER_FLAGS_FDICT) >> 5 === 1) {
        throw new DOMException("Custom dictionary is not supported at the moment.");
      }
    };
    CompressedStreamReader2.prototype.readInt16 = function() {
      var result = this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.readBits = function(count) {
      var result = this.peekBits(count);
      if (result === -1) {
        return -1;
      }
      this.mBufferedBits -= count;
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count);
      return result;
    };
    CompressedStreamReader2.prototype.decodeBlockHeader = function() {
      if (!this.mbCanReadNextBlock) {
        return false;
      }
      var bFinalBlock = this.readBits(1);
      if (bFinalBlock === -1) {
        return false;
      }
      var blockType = this.readBits(2);
      if (blockType === -1) {
        return false;
      }
      this.mbCanReadNextBlock = bFinalBlock === 0;
      switch (blockType) {
        case 0:
          this.mbReadingUncompressed = true;
          this.skipToBoundary();
          var length_1 = this.readInt16Inverted();
          var lengthComplement = this.readInt16Inverted();
          if (length_1 !== (lengthComplement ^ 65535)) {
            throw new DOMException("Wrong block length.");
          }
          if (length_1 > 65535) {
            throw new DOMException("Uncompressed block length can not be more than 65535.");
          }
          this.mUncompressedDataLength = length_1;
          this.mCurrentLengthTree = null;
          this.mCurrentDistanceTree = null;
          break;
        case 1:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          this.mCurrentLengthTree = DecompressorHuffmanTree.lengthTree;
          this.mCurrentDistanceTree = DecompressorHuffmanTree.distanceTree;
          break;
        case 2:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          var trees = this.decodeDynamicHeader(this.mCurrentLengthTree, this.mCurrentDistanceTree);
          this.mCurrentLengthTree = trees.lengthTree;
          this.mCurrentDistanceTree = trees.distanceTree;
          break;
        default:
          throw new DOMException("Wrong block type.");
      }
      return true;
    };
    CompressedStreamReader2.prototype.skipToBoundary = function() {
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> (this.mBufferedBits & 7));
      this.mBufferedBits &= ~7;
    };
    CompressedStreamReader2.prototype.readInt16Inverted = function() {
      var result = this.readBits(8);
      result |= this.readBits(8) << 8;
      return result;
    };
    CompressedStreamReader2.prototype.decodeDynamicHeader = function(lengthTree, distanceTree) {
      var bLastSymbol = 0;
      var iLengthsCount = this.readBits(5);
      var iDistancesCount = this.readBits(5);
      var iCodeLengthsCount = this.readBits(4);
      if (iLengthsCount < 0 || iDistancesCount < 0 || iCodeLengthsCount < 0) {
        throw new DOMException("Wrong dynamic huffman codes.");
      }
      iLengthsCount += 257;
      iDistancesCount += 1;
      var iResultingCodeLengthsCount = iLengthsCount + iDistancesCount;
      var arrResultingCodeLengths = new Uint8Array(iResultingCodeLengthsCount);
      var arrDecoderCodeLengths = new Uint8Array(19);
      iCodeLengthsCount += 4;
      var iCurrentCode = 0;
      while (iCurrentCode < iCodeLengthsCount) {
        var len = this.readBits(3);
        if (len < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        arrDecoderCodeLengths[this.defaultHuffmanDynamicTree[iCurrentCode++]] = len;
      }
      var treeInternalDecoder = new DecompressorHuffmanTree(arrDecoderCodeLengths);
      iCurrentCode = 0;
      for (; ; ) {
        var symbol = void 0;
        var bNeedBreak = false;
        symbol = treeInternalDecoder.unpackSymbol(this);
        while ((symbol & ~15) === 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol = symbol;
          if (iCurrentCode === iResultingCodeLengthsCount) {
            bNeedBreak = true;
            break;
          }
          symbol = treeInternalDecoder.unpackSymbol(this);
        }
        if (bNeedBreak) {
          break;
        }
        if (symbol < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        if (symbol >= 17) {
          bLastSymbol = 0;
        } else if (iCurrentCode === 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        var miRepSymbol = symbol - 16;
        var bits = CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS[miRepSymbol];
        var count = this.readBits(bits);
        if (count < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        count += CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS[miRepSymbol];
        if (iCurrentCode + count > iResultingCodeLengthsCount) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        while (count-- > 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol;
        }
        if (iCurrentCode === iResultingCodeLengthsCount) {
          break;
        }
      }
      var tempArray = new Uint8Array(iLengthsCount);
      tempArray.set(arrResultingCodeLengths.subarray(0, iLengthsCount), 0);
      lengthTree = new DecompressorHuffmanTree(tempArray);
      tempArray = arrResultingCodeLengths.slice(iLengthsCount, iLengthsCount + iDistancesCount);
      distanceTree = new DecompressorHuffmanTree(tempArray);
      return { "lengthTree": lengthTree, "distanceTree": distanceTree };
    };
    CompressedStreamReader2.prototype.readHuffman = function() {
      var free = this.DEF_MAX_WINDOW_SIZE - (this.mDataLength - this.mCurrentPosition);
      var dataRead = false;
      var readdata = {};
      while (free >= this.DEF_HUFFMAN_REPEATE_MAX) {
        var symbol = void 0;
        symbol = this.mCurrentLengthTree.unpackSymbol(this);
        while ((symbol & ~255) === 0) {
          readdata[(this.mDataLength + 1) % this.DEF_MAX_WINDOW_SIZE] = symbol;
          this.mBlockBuffer[this.mDataLength++ % this.DEF_MAX_WINDOW_SIZE] = symbol;
          dataRead = true;
          if (--free < this.DEF_HUFFMAN_REPEATE_MAX) {
            return true;
          }
          symbol = this.mCurrentLengthTree.unpackSymbol(this);
        }
        if (symbol < this.DEF_HUFFMAN_LENGTH_MINIMUMCODE) {
          if (symbol < this.DEF_HUFFMAN_END_BLOCK) {
            throw new DOMException("Illegal code.");
          }
          var numDataRead = dataRead ? 1 : 0;
          this.mbCanReadMoreData = this.decodeBlockHeader();
          var numReadMore = this.mbCanReadMoreData ? 1 : 0;
          return numDataRead | numReadMore ? true : false;
        }
        if (symbol > this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE) {
          throw new DOMException("Illegal repeat code length.");
        }
        var iRepeatLength = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        var iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatLength += extra;
        }
        symbol = this.mCurrentDistanceTree.unpackSymbol(this);
        if (symbol < 0 || symbol > CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE.length) {
          throw new DOMException("Wrong distance code.");
        }
        var iRepeatDistance = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE[symbol];
        iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION[symbol];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatDistance += extra;
        }
        for (var i = 0; i < iRepeatLength; i++) {
          this.mBlockBuffer[this.mDataLength % this.DEF_MAX_WINDOW_SIZE] = this.mBlockBuffer[(this.mDataLength - iRepeatDistance) % this.DEF_MAX_WINDOW_SIZE];
          this.mDataLength++;
          free--;
        }
        dataRead = true;
      }
      return dataRead;
    };
    CompressedStreamReader2.prototype.read = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException("offset", "Offset does not belong to specified buffer.");
      }
      if (length < 0 || length > buffer.length - offset) {
        throw new DOMException("length", "Length is illegal.");
      }
      var initialLength = length;
      while (length > 0) {
        if (this.mCurrentPosition < this.mDataLength) {
          var inBlockPosition = this.mCurrentPosition % this.DEF_MAX_WINDOW_SIZE;
          var dataToCopy = Math.min(this.DEF_MAX_WINDOW_SIZE - inBlockPosition, this.mDataLength - this.mCurrentPosition);
          dataToCopy = Math.min(dataToCopy, length);
          Utils.arrayCopy(this.mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy);
          this.mCurrentPosition += dataToCopy;
          offset += dataToCopy;
          length -= dataToCopy;
        } else {
          if (!this.mbCanReadMoreData) {
            break;
          }
          var oldDataLength = this.mDataLength;
          if (!this.mbReadingUncompressed) {
            if (!this.readHuffman()) {
              break;
            }
          } else {
            if (this.mUncompressedDataLength === 0) {
              this.mbCanReadMoreData = this.decodeBlockHeader();
              if (!this.mbCanReadMoreData) {
                break;
              }
            } else {
              var inBlockPosition = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
              var dataToRead = Math.min(this.mUncompressedDataLength, this.DEF_MAX_WINDOW_SIZE - inBlockPosition);
              var dataRead = this.readPackedBytes(this.mBlockBuffer, inBlockPosition, dataToRead);
              if (dataToRead !== dataRead) {
                throw new DOMException("Not enough data in stream.");
              }
              this.mUncompressedDataLength -= dataRead;
              this.mDataLength += dataRead;
            }
          }
          if (oldDataLength < this.mDataLength) {
            var start = oldDataLength % this.DEF_MAX_WINDOW_SIZE;
            var end = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
            if (start < end) {
              this.checksumUpdate(this.mBlockBuffer, start, end - start);
            } else {
              this.checksumUpdate(this.mBlockBuffer, start, this.DEF_MAX_WINDOW_SIZE - start);
              if (end > 0) {
                this.checksumUpdate(this.mBlockBuffer, 0, end);
              }
            }
          }
        }
      }
      if (!this.mbCanReadMoreData && !this.mbCheckSumRead && !this.mbNoWrap) {
        this.skipToBoundary();
        var checkSum = this.readInt32();
        if (checkSum !== this.mCheckSum) {
          throw new DOMException("Checksum check failed.");
        }
        this.mbCheckSumRead = true;
      }
      return initialLength - length;
    };
    CompressedStreamReader2.prototype.readPackedBytes = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException('offset", "Offset can not be less than zero or greater than buffer length - 1.');
      }
      if (length < 0) {
        throw new DOMException('length", "Length can not be less than zero.');
      }
      if (length > buffer.length - offset) {
        throw new DOMException('length", "Length is too large.');
      }
      if ((this.mBufferedBits & 7) !== 0) {
        throw new DOMException("Reading of unalligned data is not supported.");
      }
      if (length === 0) {
        return 0;
      }
      var result = 0;
      while (this.mBufferedBits > 0 && length > 0) {
        buffer[offset++] = this.mBuffer;
        this.mBufferedBits -= 8;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> 8);
        length--;
        result++;
      }
      if (length > 0) {
        result += this.mInputStream.read(buffer, offset, length);
      }
      return result;
    };
    CompressedStreamReader2.prototype.readInt32 = function() {
      var result = this.readBits(8) << 24;
      result |= this.readBits(8) << 16;
      result |= this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.checksumUpdate = function(buffer, offset, length) {
      ChecksumCalculator2.ChecksumUpdate(this.mCheckSum, buffer, offset, length);
    };
    CompressedStreamReader2.DEF_REVERSE_BITS = new Uint8Array([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS = [3, 3, 11];
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS = [2, 3, 7];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE = [
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE = [
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577
    ];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION = [
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    ];
    return CompressedStreamReader2;
  }()
);
var Stream = (
  /** @class */
  function() {
    function Stream2(input2) {
      this.position = 0;
      this.inputStream = new Uint8Array(input2.buffer);
    }
    Object.defineProperty(Stream2.prototype, "length", {
      get: function() {
        return this.inputStream.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    Stream2.prototype.read = function(buffer, start, length) {
      var temp = new Uint8Array(this.inputStream.buffer, this.position + start);
      var data = temp.subarray(0, length);
      buffer.set(data, 0);
      this.position += data.byteLength;
      return data.byteLength;
    };
    Stream2.prototype.readByte = function() {
      return this.inputStream[this.position++];
    };
    Stream2.prototype.write = function(inputBuffer, offset, count) {
      Utils.arrayCopy(inputBuffer, 0, this.inputStream, this.position + offset, count);
      this.position += count;
    };
    Stream2.prototype.toByteArray = function() {
      return new Uint8Array(this.inputStream.buffer);
    };
    return Stream2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js
var ValueFormatter = (
  /** @class */
  function() {
    function ValueFormatter2(cultureName) {
      this.intl = new Internationalization();
    }
    ValueFormatter2.prototype.getFormatFunction = function(format, isServerRendered) {
      if (format.type) {
        if (isServerRendered) {
          format.isServerRendered = true;
        }
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter2.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter2.prototype.displayText = function(value, format, isServerRendered) {
      return this.toView(value, this.getFormatFunction(format, isServerRendered));
    };
    return ValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js
var CsvHelper = (
  /** @class */
  function() {
    function CsvHelper2(json, separator) {
      this.csvStr = "";
      if (separator === null || separator === void 0) {
        this.separator = ",";
      } else {
        this.separator = separator;
      }
      this.formatter = new ValueFormatter();
      this.isMicrosoftBrowser = !!navigator.msSaveBlob;
      if (json.isServerRendered !== null && json.isServerRendered !== void 0) {
        this.isServerRendered = json.isServerRendered;
      }
      if (json.styles !== null && json.styles !== void 0) {
        this.globalStyles = /* @__PURE__ */ new Map();
        for (var i = 0; i < json.styles.length; i++) {
          if (json.styles[i].name !== void 0 && json.styles[i].numberFormat !== void 0) {
            this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
          }
        }
      }
      if (json.worksheets !== null && json.worksheets !== void 0) {
        this.parseWorksheet(json.worksheets[0]);
      }
    }
    CsvHelper2.prototype.parseWorksheet = function(json) {
      if (json.rows !== null && json.rows !== void 0) {
        this.parseRows(json.rows);
      }
    };
    CsvHelper2.prototype.parseRows = function(rows) {
      var count = 1;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        if (row.index !== null && row.index !== void 0) {
          while (count < row.index) {
            this.csvStr += "\r\n";
            count++;
          }
          this.parseRow(row);
        } else {
          throw Error("Row index is missing.");
        }
      }
      this.csvStr += "\r\n";
    };
    CsvHelper2.prototype.parseRow = function(row) {
      if (row.cells !== null && row.cells !== void 0) {
        var count = 1;
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
          var cell = _a[_i];
          if (cell.index !== null && cell.index !== void 0) {
            while (count < cell.index) {
              this.csvStr += this.separator;
              count++;
            }
            this.parseCell(cell);
          } else {
            throw Error("Cell index is missing.");
          }
        }
      }
    };
    CsvHelper2.prototype.parseCell = function(cell) {
      var csv = this.csvStr;
      if (cell.value !== void 0) {
        if (cell.value instanceof Date) {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", skeleton: cell.style.numberFormat }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", format: cell.style.numberFormat }, this.isServerRendered));
            }
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: "dateTime", format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));
            }
          } else {
            csv += cell.value;
          }
        } else if (typeof cell.value === "boolean") {
          csv += cell.value ? "TRUE" : "FALSE";
        } else if (typeof cell.value === "number") {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }, this.isServerRendered));
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));
          } else {
            csv += cell.value;
          }
        } else {
          csv += this.parseCellValue(cell.value);
        }
      }
      this.csvStr = csv;
    };
    CsvHelper2.prototype.parseCellValue = function(value) {
      var val = "";
      var length = value.length;
      for (var start = 0; start < length; start++) {
        if (value[start] === '"') {
          val += value[start].replace('"', '""');
        } else {
          val += value[start];
        }
      }
      value = val;
      if (value.indexOf(this.separator) !== -1 || value.indexOf("\n") !== -1 || value.indexOf('"') !== -1) {
        return value = '"' + value + '"';
      } else {
        return value;
      }
    };
    CsvHelper2.prototype.save = function(fileName) {
      this.buffer = new Blob(["\uFEFF" + this.csvStr], { type: "text/csv;charset=UTF-8" });
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(this.buffer, fileName);
      } else {
        var dataUrl_1 = window.URL.createObjectURL(this.buffer);
        var dwlLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        dwlLink.download = fileName;
        dwlLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        dwlLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
        });
      }
    };
    CsvHelper2.prototype.saveAsBlob = function(encodingType) {
      if (encodingType != void 0) {
        var encoding = new Encoding();
        var encodeString = "UTF-8";
        if (encodingType.toUpperCase() == "ANSI") {
          encoding.type = "Ansi";
          encodeString = "ANSI";
        } else if (encodingType.toUpperCase() == "UNICODE") {
          encoding.type = "Unicode";
          encodeString = "UNICODE";
        } else {
          encoding.type = "Utf8";
          encodeString = "UTF-8";
        }
        var buffer = encoding.getBytes(this.csvStr, 0, this.csvStr.length);
        return new Blob([buffer], { type: "text/csv;charset=" + encodeString });
      } else
        return new Blob(["\uFEFF" + this.csvStr], { type: "text/csv;charset=UTF-8" });
    };
    return CsvHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/blob-helper.js
var BlobHelper = (
  /** @class */
  function() {
    function BlobHelper2() {
      this.parts = [];
    }
    BlobHelper2.prototype.append = function(part) {
      this.parts.push(part);
      this.blob = void 0;
    };
    BlobHelper2.prototype.getBlob = function() {
      return new Blob(this.parts, { type: "text/plain" });
    };
    return BlobHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/auto-filters.js
var AutoFilters = (
  /** @class */
  /* @__PURE__ */ function() {
    function AutoFilters2() {
    }
    return AutoFilters2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/workbook.js
var Workbook = (
  /** @class */
  function() {
    function Workbook2(json, saveType, culture, currencyString, separator) {
      this.sharedStringCount = 0;
      this.unitsProportions = [
        96 / 75,
        96 / 300,
        96,
        96 / 25.4,
        96 / 2.54,
        1,
        96 / 72,
        96 / 72 / 12700
      ];
      this.hyperlinkStyle = { fontColor: "#0000FF", underline: true };
      if (culture !== void 0) {
        this.culture = culture;
      } else {
        this.culture = "en-US";
      }
      if (currencyString !== void 0) {
        this.currency = currencyString;
      } else {
        this.currency = "USD";
      }
      this.intl = new Internationalization(this.culture);
      this.mSaveType = saveType;
      if (saveType === "xlsx") {
        this.mArchive = new ZipArchive();
        this.sharedString = [];
        this.mFonts = [];
        this.mBorders = [];
        this.mStyles = [];
        this.printTitles = /* @__PURE__ */ new Map();
        this.cellStyles = /* @__PURE__ */ new Map();
        this.mNumFmt = /* @__PURE__ */ new Map();
        this.mFills = /* @__PURE__ */ new Map();
        this.mStyles.push(new CellStyle());
        this.mFonts.push(new Font());
        this.cellStyles.set("Normal", new CellStyles());
        this.mCellXfs = [];
        this.mCellStyleXfs = [];
        this.drawingCount = 0;
        this.imageCount = 0;
        if (json.styles !== null && json.styles !== void 0) {
          this.globalStyles = /* @__PURE__ */ new Map();
          for (var i = 0; i < json.styles.length; i++) {
            if (json.styles[i].name !== void 0) {
              if (!this.cellStyles.has(json.styles[i].name)) {
                var cellStyle = new CellStyle();
                cellStyle.isGlobalStyle = true;
                this.parserCellStyle(json.styles[i], cellStyle, "none");
                var cellStylesIn = new CellStyles();
                cellStylesIn.name = cellStyle.name;
                cellStylesIn.xfId = cellStyle.index - 1;
                this.cellStyles.set(cellStylesIn.name, cellStylesIn);
                var tFormat = {};
                if (json.styles[i].numberFormat !== void 0) {
                  tFormat.format = json.styles[i].numberFormat;
                }
                if (json.styles[i].type !== void 0) {
                  tFormat.type = json.styles[i].type;
                } else {
                  tFormat.type = "datetime";
                }
                if (tFormat.format !== void 0) {
                  this.globalStyles.set(json.styles[i].name, tFormat);
                }
              } else {
                throw Error("Style name " + json.styles[i].name + " is already existed");
              }
            }
          }
        }
        if (json.worksheets !== null && json.worksheets !== void 0) {
          this.parserWorksheets(json.worksheets);
        } else {
          throw Error("Worksheet is expected.");
        }
        if (json.builtInProperties !== null && json.builtInProperties !== void 0) {
          this.builtInProperties = new BuiltInProperties();
          this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);
        }
      } else {
        this.csvHelper = new CsvHelper(json, separator);
      }
    }
    Workbook2.prototype.parserBuiltInProperties = function(jsonBuiltInProperties, builtInProperties) {
      if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== void 0) {
        builtInProperties.author = jsonBuiltInProperties.author;
      }
      if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== void 0) {
        builtInProperties.comments = jsonBuiltInProperties.comments;
      }
      if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== void 0) {
        builtInProperties.category = jsonBuiltInProperties.category;
      }
      if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== void 0) {
        builtInProperties.company = jsonBuiltInProperties.company;
      }
      if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== void 0) {
        builtInProperties.manager = jsonBuiltInProperties.manager;
      }
      if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== void 0) {
        builtInProperties.subject = jsonBuiltInProperties.subject;
      }
      if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== void 0) {
        builtInProperties.title = jsonBuiltInProperties.title;
      }
      if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== void 0) {
        builtInProperties.createdDate = jsonBuiltInProperties.createdDate;
      }
      if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== void 0) {
        builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;
      }
      if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== void 0) {
        builtInProperties.tags = jsonBuiltInProperties.tags;
      }
      if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== void 0) {
        builtInProperties.status = jsonBuiltInProperties.status;
      }
    };
    Workbook2.prototype.parserWorksheets = function(json) {
      this.worksheets = new Worksheets();
      var length = json.length;
      for (var i = 0; i < length; i++) {
        var jsonSheet = json[i];
        var sheet = new Worksheet();
        this.mergeCells = new MergeCells();
        this.mergedCellsStyle = /* @__PURE__ */ new Map();
        this.mHyperLinks = [];
        if (jsonSheet.name !== null && jsonSheet.name !== void 0) {
          sheet.name = jsonSheet.name;
        } else {
          sheet.name = "Sheet" + (i + 1).toString();
        }
        if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== void 0) {
          sheet.enableRtl = jsonSheet.enableRtl;
        }
        sheet.index = i + 1;
        if (jsonSheet.columns !== null && jsonSheet.columns !== void 0) {
          this.parserColumns(jsonSheet.columns, sheet);
        }
        if (jsonSheet.rows !== null && jsonSheet.rows !== void 0) {
          this.parserRows(jsonSheet.rows, sheet);
        }
        if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== void 0) {
          sheet.showGridLines = jsonSheet.showGridLines;
        }
        if (jsonSheet.freeze !== null && jsonSheet.freeze !== void 0) {
          this.parserFreezePanes(jsonSheet.freeze, sheet);
        }
        if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== void 0) {
          this.parserPrintTitle(jsonSheet.printTitle, sheet);
        }
        if (jsonSheet.pageSetup !== void 0) {
          if (jsonSheet.pageSetup.isSummaryRowBelow !== void 0) {
            sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;
          }
        }
        if (jsonSheet.images !== void 0) {
          this.parserImages(jsonSheet.images, sheet);
        }
        if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== void 0) {
          this.parseFilters(jsonSheet.autoFilters, sheet);
        }
        sheet.index = i + 1;
        sheet.mergeCells = this.mergeCells;
        sheet.hyperLinks = this.mHyperLinks;
        this.worksheets.push(sheet);
      }
    };
    Workbook2.prototype.mergeOptions = function(fromJson, toJson) {
      var result = {};
      this.applyProperties(fromJson, result);
      this.applyProperties(toJson, result);
      return result;
    };
    Workbook2.prototype.applyProperties = function(sourceJson, destJson) {
      var keys = Object.keys(sourceJson);
      for (var index = 0; index < keys.length; index++) {
        if (keys[index] !== "name") {
          destJson[keys[index]] = sourceJson[keys[index]];
        }
      }
    };
    Workbook2.prototype.getCellName = function(row, column) {
      return this.getColumnName(column) + row.toString();
    };
    Workbook2.prototype.getColumnName = function(col) {
      col--;
      var strColumnName = "";
      do {
        var iCurrentDigit = col % 26;
        col = col / 26 - 1;
        strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;
      } while (col >= 0);
      return strColumnName;
    };
    Workbook2.prototype.parserPrintTitle = function(json, sheet) {
      var printTitleName = "";
      var titleRowName;
      if (json.fromRow !== null && json.fromRow !== void 0) {
        var fromRow = json.fromRow;
        var toRow = void 0;
        if (json.toRow !== null && json.toRow !== void 0) {
          toRow = json.toRow;
        } else {
          toRow = json.fromRow;
        }
        titleRowName = "$" + fromRow + ":$" + toRow;
      }
      var titleColName;
      if (json.fromColumn !== null && json.fromColumn !== void 0) {
        var fromColumn = json.fromColumn;
        var toColumn = void 0;
        if (json.toColumn !== null && json.toColumn !== void 0) {
          toColumn = json.toColumn;
        } else {
          toColumn = json.fromColumn;
        }
        titleColName = "$" + this.getColumnName(fromColumn) + ":$" + this.getColumnName(toColumn);
      }
      if (titleRowName !== void 0) {
        printTitleName += sheet.name + "!" + titleRowName;
      }
      if (titleColName !== void 0 && titleRowName !== void 0) {
        printTitleName += "," + (sheet.name + "!" + titleColName);
      } else if (titleColName !== void 0) {
        printTitleName += sheet.name + "!" + titleColName;
      }
      if (printTitleName !== "") {
        this.printTitles.set(sheet.index - 1, printTitleName);
      }
    };
    Workbook2.prototype.parserFreezePanes = function(json, sheet) {
      sheet.freezePanes = new FreezePane();
      if (json.row !== null && json.row !== void 0) {
        sheet.freezePanes.row = json.row;
      } else {
        sheet.freezePanes.row = 0;
      }
      if (json.column !== null && json.column !== void 0) {
        sheet.freezePanes.column = json.column;
      } else {
        sheet.freezePanes.column = 0;
      }
      sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);
    };
    Workbook2.prototype.parserColumns = function(json, sheet) {
      var columnsLength = json.length;
      sheet.columns = [];
      for (var column = 0; column < columnsLength; column++) {
        var col = new Column();
        if (json[column].index !== null && json[column].index !== void 0) {
          col.index = json[column].index;
        } else {
          throw Error("Column index is missing.");
        }
        if (json[column].width !== null && json[column].width !== void 0) {
          col.width = json[column].width;
        }
        sheet.columns.push(col);
      }
    };
    Workbook2.prototype.parserRows = function(json, sheet) {
      var rowsLength = json.length;
      sheet.rows = new Rows();
      var rowId = 0;
      for (var r = 0; r < rowsLength; r++) {
        var row = this.parserRow(json[r], rowId);
        rowId = row.index;
        sheet.rows.add(row);
      }
      this.insertMergedCellsStyle(sheet);
    };
    Workbook2.prototype.insertMergedCellsStyle = function(sheet) {
      var _this = this;
      if (this.mergeCells.length > 0) {
        this.mergedCellsStyle.forEach(function(value, key) {
          var row = sheet.rows.filter(function(item) {
            return item.index === value.y;
          })[0];
          if (!isNullOrUndefined(row)) {
            var cell = row.cells.filter(function(item) {
              return item.index === value.x;
            })[0];
            if (!isNullOrUndefined(cell)) {
              cell.styleIndex = value.styleIndex;
            } else {
              var cells = row.cells.filter(function(item) {
                return item.index <= value.x;
              });
              var insertIndex = 0;
              if (cells.length > 0) {
                insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;
              }
              row.cells.splice(insertIndex, 0, _this.createCell(value, key));
            }
          } else {
            var rows = sheet.rows.filter(function(item) {
              return item.index <= value.y;
            });
            var rowToInsert = new Row();
            rowToInsert.index = value.y;
            rowToInsert.cells = new Cells();
            rowToInsert.cells.add(_this.createCell(value, key));
            var insertIndex = 0;
            if (rows.length > 0) {
              insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;
            }
            sheet.rows.splice(insertIndex, 0, rowToInsert);
          }
        });
      }
    };
    Workbook2.prototype.createCell = function(value, key) {
      var cellToInsert = new Cell();
      cellToInsert.refName = key;
      cellToInsert.index = value.x;
      cellToInsert.cellStyle = new CellStyle();
      cellToInsert.styleIndex = value.styleIndex;
      return cellToInsert;
    };
    Workbook2.prototype.parserRow = function(json, rowIndex) {
      var row = new Row();
      if (json.height !== null && json.height !== void 0) {
        row.height = json.height;
      }
      if (json.index !== null && json.index !== void 0) {
        row.index = json.index;
      } else {
        throw Error("Row index is missing.");
      }
      if (json.grouping !== null && json.grouping !== void 0) {
        this.parseGrouping(json.grouping, row);
      }
      this.parseCells(json.cells, row);
      return row;
    };
    Workbook2.prototype.parseGrouping = function(json, row) {
      row.grouping = new Grouping();
      if (json.outlineLevel !== void 0) {
        row.grouping.outlineLevel = json.outlineLevel;
      }
      if (json.isCollapsed !== void 0) {
        row.grouping.isCollapsed = json.isCollapsed;
      }
      if (json.isHidden !== void 0) {
        row.grouping.isHidden = json.isHidden;
      }
    };
    Workbook2.prototype.parseCells = function(json, row) {
      row.cells = new Cells();
      var cellsLength = json !== void 0 ? json.length : 0;
      var spanMin = 1;
      var spanMax = 1;
      var curCellIndex = 0;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json[cellId];
        var cell = new Cell();
        if (jsonCell.index !== null && jsonCell.index !== void 0) {
          cell.index = jsonCell.index;
        } else {
          throw Error("Cell index is missing.");
        }
        if (cell.index < spanMin) {
          spanMin = cell.index;
        } else if (cell.index > spanMax) {
          spanMax = cell.index;
        }
        cell.refName = this.getCellName(row.index, cell.index);
        if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== void 0) {
          cell.rowSpan = jsonCell.rowSpan - 1;
        } else {
          cell.rowSpan = 0;
        }
        if (jsonCell.colSpan !== null && jsonCell.colSpan !== void 0) {
          cell.colSpan = jsonCell.colSpan - 1;
        } else {
          cell.colSpan = 0;
        }
        if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== void 0) {
          var hyperLink = new HyperLink();
          if (jsonCell.hyperlink.target !== void 0) {
            hyperLink.target = jsonCell.hyperlink.target;
            if (jsonCell.hyperlink.displayText !== void 0) {
              cell.value = jsonCell.hyperlink.displayText;
            } else {
              cell.value = jsonCell.hyperlink.target;
            }
            cell.type = this.getCellValueType(cell.value);
            hyperLink.ref = cell.refName;
            hyperLink.rId = this.mHyperLinks.length + 1;
            this.mHyperLinks.push(hyperLink);
            cell.cellStyle = new CellStyle();
            this.parserCellStyle(jsonCell.style !== void 0 ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, "string");
            cell.styleIndex = cell.cellStyle.index;
          }
        }
        if (jsonCell.formula !== null && jsonCell.formula !== void 0) {
          cell.formula = jsonCell.formula;
          cell.type = "formula";
        }
        if (jsonCell.value !== null && jsonCell.value !== void 0) {
          if (cell.formula !== void 0) {
            cell.value = 0;
          } else {
            cell.value = jsonCell.value;
            cell.type = this.getCellValueType(cell.value);
          }
        }
        if (jsonCell.style !== null && jsonCell.style !== void 0 && cell.styleIndex === void 0) {
          cell.cellStyle = new CellStyle();
          if (cell.value instanceof Date) {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);
          } else {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);
          }
          cell.styleIndex = cell.cellStyle.index;
        } else if (cell.value instanceof Date) {
          cell.cellStyle = new CellStyle();
          this.parserCellStyle({}, cell.cellStyle, cell.type, 14);
          cell.styleIndex = cell.cellStyle.index;
        }
        this.parseCellType(cell);
        this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);
        row.cells.add(cell);
        curCellIndex = cell.index + 1;
      }
      row.spans = spanMin + ":" + spanMax;
    };
    Workbook2.prototype.GetColors = function() {
      var colors;
      colors = /* @__PURE__ */ new Map();
      colors.set("WHITE", "FFFFFFFF");
      colors.set("SILVER", "FFC0C0C0");
      colors.set("GRAY", "FF808080");
      colors.set("BLACK", "FF000000");
      colors.set("RED", "FFFF0000");
      colors.set("MAROON", "FF800000");
      colors.set("YELLOW", "FFFFFF00");
      colors.set("OLIVE", "FF808000");
      colors.set("LIME", "FF00FF00");
      colors.set("GREEN", "FF008000");
      colors.set("AQUA", "FF00FFFF");
      colors.set("TEAL", "FF008080");
      colors.set("BLUE", "FF0000FF");
      colors.set("NAVY", "FF000080");
      colors.set("FUCHSIA", "FFFF00FF");
      colors.set("PURPLE", "FF800080");
      return colors;
    };
    Workbook2.prototype.processColor = function(colorVal) {
      if (colorVal.indexOf("#") === 0) {
        return colorVal.replace("#", "FF");
      }
      colorVal = colorVal.toUpperCase();
      this.rgbColors = this.GetColors();
      if (this.rgbColors.has(colorVal)) {
        colorVal = this.rgbColors.get(colorVal);
      } else {
        colorVal = "FF000000";
      }
      return colorVal;
    };
    Workbook2.prototype.processCellValue = function(value, cell) {
      var cellValue = value;
      if (value.indexOf("<font") !== -1 || value.indexOf("<a") !== -1 || value.indexOf("<b>") !== -1 || value.indexOf("<i>") !== -1 || value.indexOf("<u>") !== -1) {
        var processedVal = "";
        var startindex = value.indexOf("<", 0);
        var endIndex = value.indexOf(">", startindex + 1);
        if (startindex >= 0 && endIndex >= 0) {
          if (startindex !== 0) {
            processedVal += '<r><t xml:space="preserve">' + this.processString(value.substring(0, startindex)) + "</t></r>";
          }
          while (startindex >= 0 && endIndex >= 0) {
            endIndex = value.indexOf(">", startindex + 1);
            if (endIndex >= 0) {
              var subString = value.substring(startindex + 1, endIndex);
              startindex = value.indexOf("<", endIndex + 1);
              if (startindex < 0) {
                startindex = cellValue.length;
              }
              var text = cellValue.substring(endIndex + 1, startindex);
              if (text.length !== 0) {
                var subSplit = subString.split(" ");
                if (subSplit.length > 0) {
                  processedVal += "<r><rPr>";
                }
                if (subSplit.length > 1) {
                  for (var _i = 0, subSplit_1 = subSplit; _i < subSplit_1.length; _i++) {
                    var element = subSplit_1[_i];
                    var start = element.trim().substring(0, 5);
                    switch (start) {
                      case "size=":
                        processedVal += '<sz val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "face=":
                        processedVal += '<rFont val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "color":
                        processedVal += '<color rgb="' + this.processColor(element.substring(7, element.length - 1)) + '"/>';
                        break;
                      case "href=":
                        var hyperLink = new HyperLink();
                        hyperLink.target = element.substring(6, element.length - 1).trim();
                        hyperLink.ref = cell.refName;
                        hyperLink.rId = this.mHyperLinks.length + 1;
                        this.mHyperLinks.push(hyperLink);
                        processedVal += '<color rgb="FF0000FF"/><u/><b/>';
                        break;
                    }
                  }
                } else if (subSplit.length === 1) {
                  var style = subSplit[0].trim();
                  switch (style) {
                    case "b":
                      processedVal += "<b/>";
                      break;
                    case "i":
                      processedVal += "<i/>";
                      break;
                    case "u":
                      processedVal += "<u/>";
                      break;
                  }
                }
                processedVal += '</rPr><t xml:space="preserve">' + this.processString(text) + "</t></r>";
              }
            }
          }
          if (processedVal === "") {
            return cellValue;
          }
          return processedVal;
        } else {
          return cellValue;
        }
      } else {
        return cellValue;
      }
    };
    Workbook2.prototype.applyGlobalStyle = function(json, cellStyle) {
      var index = 0;
      if (this.cellStyles.has(json.name)) {
        cellStyle.index = this.mStyles.filter(function(a) {
          return a.name === json.name;
        })[0].index;
        cellStyle.name = json.name;
      }
    };
    Workbook2.prototype.parserCellStyle = function(json, cellStyle, cellType, defStyleIndex) {
      if (json.name !== null && json.name !== void 0) {
        if (cellStyle.isGlobalStyle) {
          cellStyle.name = json.name;
        } else {
          this.applyGlobalStyle(json, cellStyle);
          return;
        }
      }
      if (json.backColor !== null && json.backColor !== void 0) {
        cellStyle.backColor = json.backColor;
      }
      cellStyle.borders = new Borders();
      if (json.borders !== null && json.borders !== void 0) {
        this.parserBorder(json.borders, cellStyle.borders.all);
      }
      if (json.leftBorder !== null && json.leftBorder !== void 0) {
        this.parserBorder(json.leftBorder, cellStyle.borders.left);
      }
      if (json.rightBorder !== null && json.rightBorder !== void 0) {
        this.parserBorder(json.rightBorder, cellStyle.borders.right);
      }
      if (json.topBorder !== null && json.topBorder !== void 0) {
        this.parserBorder(json.topBorder, cellStyle.borders.top);
      }
      if (json.bottomBorder !== null && json.bottomBorder !== void 0) {
        this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);
      }
      if (json.fontName !== null && json.fontName !== void 0) {
        cellStyle.fontName = json.fontName;
      }
      if (json.fontSize !== null && json.fontSize !== void 0) {
        cellStyle.fontSize = json.fontSize;
      }
      if (json.fontColor !== null && json.fontColor !== void 0) {
        cellStyle.fontColor = json.fontColor;
      }
      if (json.italic !== null && json.italic !== void 0) {
        cellStyle.italic = json.italic;
      }
      if (json.bold !== null && json.bold !== void 0) {
        cellStyle.bold = json.bold;
      }
      if (json.hAlign !== null && json.hAlign !== void 0) {
        cellStyle.hAlign = json.hAlign.toLowerCase();
      }
      if (json.indent !== null && json.indent !== void 0) {
        cellStyle.indent = json.indent;
        if (!(cellStyle.hAlign === "left" || cellStyle.hAlign === "right")) {
          cellStyle.hAlign = "left";
        }
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        cellStyle.rotation = json.rotation;
      }
      if (json.vAlign !== null && json.vAlign !== void 0) {
        cellStyle.vAlign = json.vAlign.toLowerCase();
      }
      if (json.underline !== null && json.underline !== void 0) {
        cellStyle.underline = json.underline;
      }
      if (json.strikeThrough !== null && json.strikeThrough !== void 0) {
        cellStyle.strikeThrough = json.strikeThrough;
      }
      if (json.wrapText !== null && json.wrapText !== void 0) {
        cellStyle.wrapText = json.wrapText;
      }
      if (json.numberFormat !== null && json.numberFormat !== void 0) {
        if (json.type !== null && json.type !== void 0) {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);
        } else {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);
        }
      } else if (defStyleIndex !== void 0) {
        cellStyle.numFmtId = 14;
        cellStyle.numberFormat = "GENERAL";
      } else {
        cellStyle.numberFormat = "GENERAL";
      }
      cellStyle.index = this.processCellStyle(cellStyle);
    };
    Workbook2.prototype.switchNumberFormat = function(numberFormat, type) {
      var format = this.getNumberFormat(numberFormat, type);
      if (format !== numberFormat) {
        var numFmt = this.mNumFmt.get(numberFormat);
        if (numFmt !== void 0) {
          numFmt.formatCode = format;
          if (this.mNumFmt.has(format)) {
            for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
              var cellStyleXfs = _a[_i];
              if (cellStyleXfs.numFmtId === numFmt.numFmtId) {
                cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
            for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {
              var cellXfs = _c[_b];
              if (cellXfs.numFmtId === numFmt.numFmtId) {
                cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
          }
        }
      }
    };
    Workbook2.prototype.changeNumberFormats = function(value) {
      if (typeof value == "string") {
        var regex = new RegExp(this.currency, "g");
        value = value.replace(regex, "[$" + this.currency + "]");
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          value[i] = value[i].replace(this.currency, "[$" + this.currency + "]");
        }
      }
      return value;
    };
    Workbook2.prototype.getNumberFormat = function(numberFormat, type) {
      var returnFormat;
      switch (type) {
        case "number":
          try {
            returnFormat = this.intl.getNumberPattern({ format: numberFormat, currency: this.currency, useGrouping: true }, true);
            if (this.currency.length > 1) {
              returnFormat = this.changeNumberFormats(returnFormat);
            }
          } catch (error) {
            returnFormat = numberFormat;
          }
          break;
        case "datetime":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "dateTime" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "dateTime" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "date":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "date" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "date" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "time":
          try {
            returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: "time" }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({ format: numberFormat, type: "time" }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        default:
          returnFormat = numberFormat;
          break;
      }
      return returnFormat;
    };
    Workbook2.prototype.parserBorder = function(json, border) {
      if (json.color !== null && json.color !== void 0) {
        border.color = json.color;
      } else {
        border.color = "#000000";
      }
      if (json.lineStyle !== null && json.lineStyle !== void 0) {
        border.lineStyle = json.lineStyle;
      } else {
        border.lineStyle = "thin";
      }
    };
    Workbook2.prototype.processCellStyle = function(style) {
      if (style.isGlobalStyle) {
        this.processNumFormatId(style);
        this.mStyles.push(style);
        return this.mStyles.length;
      } else {
        var compareResult = this.compareStyle(style);
        if (!compareResult.result) {
          this.processNumFormatId(style);
          this.mStyles.push(style);
          return this.mStyles.length;
        } else {
          return compareResult.index;
        }
      }
    };
    Workbook2.prototype.processNumFormatId = function(style) {
      if (style.numberFormat !== "GENERAL" && !this.mNumFmt.has(style.numberFormat)) {
        var id = this.mNumFmt.size + 164;
        this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
      }
    };
    Workbook2.prototype.isNewFont = function(toCompareStyle) {
      var result = false;
      var index = 0;
      for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
        var font = _a[_i];
        index++;
        var fontColor = void 0;
        if (toCompareStyle.fontColor !== void 0) {
          fontColor = "FF" + toCompareStyle.fontColor.replace("#", "");
        }
        result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.strike === toCompareStyle.strikeThrough && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;
        if (result) {
          break;
        }
      }
      index = index - 1;
      return { index, result };
    };
    Workbook2.prototype.isNewBorder = function(toCompareStyle) {
      var bStyle = new CellStyle();
      if (this.isAllBorder(toCompareStyle.borders)) {
        return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;
      } else {
        return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
      }
    };
    Workbook2.prototype.isAllBorder = function(toCompareBorder) {
      var allBorderStyle = new CellStyle();
      return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;
    };
    Workbook2.prototype.compareStyle = function(toCompareStyle) {
      var result = true;
      var index = 0;
      var globalStyleIndex = 0;
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var baseStyle = _a[_i];
        result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.strikeThrough === toCompareStyle.strikeThrough && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && (baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle) && (baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle);
        if (result) {
          index = baseStyle.index;
          break;
        }
      }
      return { index, result };
    };
    Workbook2.prototype.contains = function(array, item) {
      var index = array.indexOf(item);
      return index > -1 && index < array.length;
    };
    Workbook2.prototype.getCellValueType = function(value) {
      if (value instanceof Date) {
        return "datetime";
      } else if (typeof value === "boolean") {
        return "boolean";
      } else if (typeof value === "number") {
        return "number";
      } else {
        return "string";
      }
    };
    Workbook2.prototype.parseCellType = function(cell) {
      var type = cell.type;
      var saveType;
      var value = cell.value;
      switch (type) {
        case "datetime":
          value = this.toOADate(value);
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              var value_1 = this.globalStyles.get(cell.cellStyle.name);
              this.switchNumberFormat(value_1.format, value_1.type);
            }
          }
          saveType = "n";
          break;
        case "boolean":
          value = value ? 1 : 0;
          saveType = "b";
          break;
        case "number":
          saveType = "n";
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, "number");
            }
          }
          break;
        case "string":
          this.sharedStringCount++;
          saveType = "s";
          var sstvalue = this.processCellValue(value, cell);
          if (!this.contains(this.sharedString, sstvalue)) {
            this.sharedString.push(sstvalue);
          }
          value = this.sharedString.indexOf(sstvalue);
          break;
        default:
          break;
      }
      cell.saveType = saveType;
      cell.value = value;
    };
    Workbook2.prototype.parserImages = function(json, sheet) {
      var imagesLength = json.length;
      sheet.images = [];
      var imageId = 0;
      for (var p = 0; p < imagesLength; p++) {
        var image = this.parserImage(json[p]);
        sheet.images.push(image);
      }
    };
    Workbook2.prototype.parseFilters = function(json, sheet) {
      sheet.autoFilters = new AutoFilters();
      if (json.row !== null && json.row !== void 0)
        sheet.autoFilters.row = json.row;
      else
        throw new Error("Argument Null Exception: row null or empty");
      if (json.lastRow !== null && json.lastRow !== void 0)
        sheet.autoFilters.lastRow = json.lastRow;
      else
        throw new Error("Argument Null Exception: lastRow cannot be null or empty");
      if (json.column !== null && json.column !== void 0)
        sheet.autoFilters.column = json.column;
      else
        throw new Error("Argument Null Exception: column cannot be null or empty");
      if (json.lastColumn !== null && json.row !== void 0)
        sheet.autoFilters.lastColumn = json.lastColumn;
      else
        throw new Error("Argument Null Exception: lastColumn cannot be null or empty");
    };
    Workbook2.prototype.parserImage = function(json) {
      var image = new Image();
      if (json.image !== null && json.image !== void 0) {
        image.image = json.image;
      }
      if (json.row !== null && json.row !== void 0) {
        image.row = json.row;
      }
      if (json.column !== null && json.column !== void 0) {
        image.column = json.column;
      }
      if (json.lastRow !== null && json.lastRow !== void 0) {
        image.lastRow = json.lastRow;
      }
      if (json.lastColumn !== null && json.lastColumn !== void 0) {
        image.lastColumn = json.lastColumn;
      }
      if (json.width !== null && json.width !== void 0) {
        image.width = json.width;
      }
      if (json.height !== null && json.height !== void 0) {
        image.height = json.height;
      }
      if (json.horizontalFlip !== null && json.horizontalFlip !== void 0) {
        image.horizontalFlip = json.horizontalFlip;
      }
      if (json.verticalFlip !== null && json.verticalFlip !== void 0) {
        image.verticalFlip = json.verticalFlip;
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        image.rotation = json.rotation;
      }
      return image;
    };
    Workbook2.prototype.saveAsBlob = function(blobSaveType, encodingType) {
      var _this = this;
      switch (blobSaveType) {
        case "text/csv":
          return new Promise(function(resolve, reject) {
            var obj = {};
            obj.blobData = _this.csvHelper.saveAsBlob(encodingType);
            resolve(obj);
          });
        default:
          return new Promise(function(resolve, reject) {
            _this.saveInternal();
            _this.mArchive.saveAsBlob().then(function(blob) {
              var obj = {};
              obj.blobData = new Blob([blob], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
              resolve(obj);
            });
          });
      }
    };
    Workbook2.prototype.save = function(fileName, proxyUrl) {
      var _this = this;
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("Argument Null Exception: fileName cannot be null or empty");
      }
      var xlsxMatch = fileName.match(".xlsx$");
      var csvMatch = fileName.match(".csv$");
      if (xlsxMatch !== null && xlsxMatch[0] === "." + this.mSaveType) {
        this.saveInternal();
        this.mArchive.save(fileName).then(function() {
          _this.mArchive.destroy();
        });
      } else if (csvMatch !== null && csvMatch[0] === "." + this.mSaveType) {
        this.csvHelper.save(fileName);
      } else {
        throw Error("Save type and file extension is different.");
      }
    };
    Workbook2.prototype.saveInternal = function() {
      this.saveWorkbook();
      this.saveWorksheets();
      this.saveSharedString();
      this.saveStyles();
      this.saveApp(this.builtInProperties);
      this.saveCore(this.builtInProperties);
      this.saveContentType();
      this.saveTopLevelRelation();
      this.saveWorkbookRelation();
    };
    Workbook2.prototype.saveWorkbook = function() {
      var workbookTemp = '<?xml version="1.0" encoding="utf-8"?><workbook xmlns:r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns= "http://schemas.openxmlformats.org/spreadsheetml/2006/main"><workbookPr codeName="ThisWorkbook" defaultThemeVersion= "153222"/><bookViews><workbookView activeTab="0"/></bookViews>';
      var sheets = "<sheets>";
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        var sheetName = this.worksheets[i].name;
        sheetName = sheetName.replace("&", "&amp;");
        sheetName = sheetName.replace("<", "&lt;");
        sheetName = sheetName.replace(">", "&gt;");
        sheetName = sheetName.replace('"', "&quot;");
        sheets += '<sheet name="' + sheetName + '" sheetId="' + (i + 1).toString() + '" r:id ="rId' + (i + 1).toString() + '" />';
      }
      sheets += "</sheets>";
      workbookTemp += sheets;
      if (this.printTitles.size > 0) {
        var printTitle_1 = "<definedNames>";
        this.printTitles.forEach(function(value, key) {
          printTitle_1 += '<definedName name="_xlnm.Print_Titles" localSheetId="' + key + '">' + value + "</definedName>";
        });
        printTitle_1 += "</definedNames>";
        workbookTemp += printTitle_1;
      }
      this.addToArchive(workbookTemp + "</workbook>", "xl/workbook.xml");
    };
    Workbook2.prototype.saveWorksheets = function() {
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        this.saveWorksheet(this.worksheets[i], i);
      }
    };
    Workbook2.prototype.saveWorksheet = function(sheet, index) {
      var sheetBlob = new BlobHelper();
      var sheetString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><worksheet xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      if (!sheet.isSummaryRowBelow) {
        sheetString += '<sheetPr><outlinePr summaryBelow="0" ></outlinePr></sheetPr>';
      } else {
        sheetString += "<sheetPr />";
      }
      sheetString += this.saveSheetView(sheet);
      if (sheet.columns !== void 0) {
        var colString = "<cols>";
        for (var _i = 0, _a = sheet.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          if (column.width !== void 0) {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="' + this.pixelsToColumnWidth(column.width) + '" customWidth="1" />';
          } else {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="8.43" customWidth="1" />';
          }
        }
        sheetString += colString + "</cols>";
      }
      sheetString += "<sheetData>";
      sheetBlob.append(sheetString);
      sheetString = "";
      if (sheet.rows !== void 0) {
        for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {
          var row = _c[_b];
          var rowString = '<row r="' + row.index + '" ';
          if (!isNullOrUndefined(row.spans)) {
            rowString += 'spans="' + row.spans + '" ';
          }
          if (row.height !== void 0) {
            rowString += 'ht="' + this.pixelsToRowHeight(row.height) + '" customHeight="1" ';
          }
          if (row.grouping !== void 0) {
            if (row.grouping.isHidden) {
              rowString += 'hidden="1" ';
            }
            if (row.grouping.outlineLevel !== void 0) {
              rowString += 'outlineLevel="' + row.grouping.outlineLevel + '" ';
            }
            if (row.grouping.isCollapsed) {
              rowString += 'collapsed="1" ';
            }
          }
          rowString += ">";
          for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {
            var cell = _e[_d];
            if (cell !== void 0 && (cell.value !== void 0 || cell.cellStyle !== void 0)) {
              rowString += '<c r="' + cell.refName + '" ';
              if (cell.saveType !== void 0) {
                rowString += 't="' + cell.saveType + '" ';
              }
              if (cell.styleIndex !== void 0) {
                rowString += 's="' + cell.styleIndex + '" ';
              }
              rowString += " >";
              if (cell.formula !== void 0) {
                rowString += "<f>" + cell.formula + "</f>";
              }
              if (cell.value !== void 0) {
                rowString += "<v>" + cell.value + "</v></c>";
              } else {
                rowString += "</c>";
              }
            }
          }
          rowString += "</row>";
          sheetBlob.append(rowString);
        }
      }
      sheetString += "</sheetData>";
      if (sheet.autoFilters !== null && sheet.autoFilters !== void 0)
        sheetString += '<autoFilter ref="' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ":" + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '"/>';
      if (sheet.mergeCells.length > 0) {
        sheetString += '<mergeCells count="' + sheet.mergeCells.length + '">';
        for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {
          var mCell = _g[_f];
          sheetString += '<mergeCell ref="' + mCell.ref + '" />';
        }
        sheetString += "</mergeCells>";
      }
      if (sheet.hyperLinks.length > 0) {
        sheetString += "<hyperlinks>";
        for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {
          var hLink = _j[_h];
          sheetString += '<hyperlink ref="' + hLink.ref + '" r:id="rId' + hLink.rId + '" />';
        }
        sheetString += "</hyperlinks>";
      }
      sheetString += '<pageMargins left="0.75" right="0.75" top="1" bottom="1" header="0.5" footer="0.5" /><headerFooter scaleWithDoc="1" alignWithMargins="0" differentFirst="0" differentOddEven="0" />';
      if (sheet.images != void 0 && sheet.images.length > 0) {
        this.drawingCount++;
        this.saveDrawings(sheet, sheet.index);
        sheetString += '<drawing r:id="rId' + (sheet.hyperLinks.length + 1) + '"/>';
      }
      this.addToArchive(this.saveSheetRelations(sheet), "xl/worksheets/_rels/sheet" + sheet.index + ".xml.rels");
      sheetBlob.append(sheetString + "</worksheet>");
      this.addToArchive(sheetBlob.getBlob(), "xl/worksheets/sheet" + (index + 1) + ".xml");
    };
    Workbook2.prototype.saveDrawings = function(sheet, index) {
      var drawings = new BlobHelper();
      var sheetDrawingString = '<xdr:wsDr xmlns:xdr="http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">';
      if (sheet.images !== void 0) {
        var imgId = 0;
        for (var _i = 0, _a = sheet.images; _i < _a.length; _i++) {
          var pic = _a[_i];
          if (pic.height !== void 0 && pic.width !== void 0) {
            this.updatelastRowOffset(sheet, pic);
            this.updatelastColumnOffSet(sheet, pic);
            pic.lastRow -= 1;
            pic.lastColumn -= 1;
          } else if (pic.lastRow !== void 0 && pic.lastColumn !== void 0) {
            pic.lastRowOffset = 0;
            pic.lastColOffset = 0;
          }
          imgId++;
          sheetDrawingString += '<xdr:twoCellAnchor editAs="oneCell">';
          sheetDrawingString += "<xdr:from><xdr:col>";
          sheetDrawingString += pic.column - 1;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.row - 1;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:rowOff></xdr:from>";
          sheetDrawingString += "<xdr:to><xdr:col>";
          sheetDrawingString += pic.lastColumn;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += pic.lastColOffset;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.lastRow;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += pic.lastRowOffset;
          sheetDrawingString += "</xdr:rowOff></xdr:to>";
          sheetDrawingString += "<xdr:pic>";
          sheetDrawingString += "<xdr:nvPicPr>";
          sheetDrawingString += '<xdr:cNvPr id="' + imgId + '" name="Picture ' + imgId + '"> </xdr:cNvPr>';
          sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect="1"/></xdr:cNvPicPr> </xdr:nvPicPr>';
          sheetDrawingString += "<xdr:blipFill>";
          sheetDrawingString += '<a:blip xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" r:embed="rId' + imgId + '" cstate="print">';
          sheetDrawingString += "</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>";
          sheetDrawingString += "<xdr:spPr>";
          sheetDrawingString += "<a:xfrm";
          if (pic.rotation != void 0 && pic.rotation <= 3600 && pic.rotation >= -3600) {
            sheetDrawingString += ' rot="' + pic.rotation * 6e4 + '"';
          }
          if (pic.verticalFlip != void 0 && pic.verticalFlip != false) {
            sheetDrawingString += ' flipV="1"';
          }
          if (pic.horizontalFlip != void 0 && pic.horizontalFlip != false) {
            sheetDrawingString += ' flipH="1"';
          }
          sheetDrawingString += "/>";
          sheetDrawingString += '<a:prstGeom prst="rect"><a:avLst /></a:prstGeom></xdr:spPr>';
          sheetDrawingString += "</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>";
          var imageFile = new BlobHelper();
          var imageData = this.convertBase64toImage(pic.image);
          this.imageCount += 1;
          this.addToArchive(imageData, "xl/media/image" + this.imageCount + ".png");
        }
        drawings.append(sheetDrawingString);
        drawings.append("</xdr:wsDr>");
        this.saveDrawingRelations(sheet);
        this.addToArchive(drawings.getBlob(), "xl/drawings/drawing" + this.drawingCount + ".xml");
      }
    };
    Workbook2.prototype.updatelastRowOffset = function(sheet, picture) {
      var iCurHeight = picture.height;
      var iCurRow = picture.row;
      var iCurOffset = 0;
      while (iCurHeight >= 0) {
        var iRowHeight = 0;
        if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0)
          iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
        else
          iRowHeight = this.convertToPixels(15);
        var iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;
        if (iSpaceInCell > iCurHeight) {
          picture.lastRow = iCurRow;
          picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;
          var rowHiddenHeight = 0;
          if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0)
            rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
          else
            rowHiddenHeight = this.convertToPixels(15);
          picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;
          picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurHeight -= iSpaceInCell;
          iCurRow++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.updatelastColumnOffSet = function(sheet, picture) {
      var iCurWidth = picture.width;
      var iCurCol = picture.column;
      var iCurOffset = 0;
      while (iCurWidth >= 0) {
        var iColWidth = 0;
        if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0)
          iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
        else
          iColWidth = this.ColumnWidthToPixels(8.43);
        var iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;
        if (iSpaceInCell > iCurWidth) {
          picture.lastColumn = iCurCol;
          picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;
          var colHiddenWidth = 0;
          if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0)
            colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
          else
            colHiddenWidth = this.ColumnWidthToPixels(8.43);
          picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;
          picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurWidth -= iSpaceInCell;
          iCurCol++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.convertToPixels = function(value) {
      return value * this.unitsProportions[6];
    };
    Workbook2.prototype.convertBase64toImage = function(img) {
      var byteStr = window.atob(img);
      var buffer = new ArrayBuffer(byteStr.length);
      var data = new Uint8Array(buffer);
      for (var i = 0; i < byteStr.length; i++) {
        data[i] = byteStr.charCodeAt(i);
      }
      var blob = new Blob([data], { type: "image/png" });
      return blob;
    };
    Workbook2.prototype.saveDrawingRelations = function(sheet) {
      var drawingRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = sheet.images.length;
      var id = this.imageCount - sheet.images.length;
      for (var i = 1; i <= length; i++) {
        id++;
        drawingRelation += '<Relationship Id="rId' + i + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="../media/image' + id + '.png" />';
      }
      this.addToArchive(drawingRelation + "</Relationships>", "xl/drawings/_rels/drawing" + this.drawingCount + ".xml.rels");
    };
    Workbook2.prototype.pixelsToColumnWidth = function(pixels) {
      var dDigitWidth = 7;
      var val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);
      return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
    };
    Workbook2.prototype.ColumnWidthToPixels = function(val) {
      var dDigitWidth = 7;
      var fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
      return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);
    };
    Workbook2.prototype.trunc = function(x) {
      var n = x - x % 1;
      return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;
    };
    Workbook2.prototype.pixelsToRowHeight = function(pixels) {
      return pixels * this.unitsProportions[5] / this.unitsProportions[6];
    };
    Workbook2.prototype.saveSheetRelations = function(sheet) {
      var relStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      for (var _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {
        var hLink = _a[_i];
        relStr += '<Relationship Id="rId' + hLink.rId + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="' + this.processString(hLink.target) + '" TargetMode="External" />';
      }
      if (sheet.images != void 0 && sheet.images.length > 0) {
        relStr += '<Relationship Id="rId' + (sheet.hyperLinks.length + 1) + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing" Target="../drawings/drawing' + this.drawingCount + '.xml" />';
      }
      relStr += "</Relationships>";
      return relStr;
    };
    Workbook2.prototype.saveSheetView = function(sheet) {
      var paneString = '<sheetViews><sheetView workbookViewId="0" ';
      if (sheet.enableRtl === true) {
        paneString += 'rightToLeft="1"';
      }
      if (sheet.showGridLines === false) {
        paneString += 'showGridLines="0" >';
      } else {
        paneString += ">";
      }
      if (sheet.freezePanes !== void 0) {
        paneString += '<pane state="frozen" topLeftCell="' + sheet.freezePanes.leftCell + '" ';
        if (sheet.freezePanes.row !== 0) {
          paneString += 'ySplit="' + sheet.freezePanes.row + '" ';
        }
        if (sheet.freezePanes.column !== 0) {
          paneString += 'xSplit="' + sheet.freezePanes.column + '" ';
        }
        paneString += "/>";
      }
      paneString += "</sheetView></sheetViews > ";
      return paneString;
    };
    Workbook2.prototype.saveSharedString = function() {
      var length = this.sharedString.length;
      if (length > 0) {
        var sstStart = '<?xml version="1.0" encoding="utf-8"?><sst uniqueCount="' + length + '" count="' + this.sharedStringCount + '" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
        var si = "";
        for (var i = 0; i < length; i++) {
          if (this.sharedString[i].indexOf("<r>") !== 0) {
            si += "<si><t>";
            si += this.processString(this.sharedString[i]);
            si += "</t></si>";
          } else {
            si += "<si>";
            si += this.sharedString[i];
            si += "</si>";
          }
        }
        si += "</sst>";
        this.addToArchive(sstStart + si, "xl/sharedStrings.xml");
      }
    };
    Workbook2.prototype.processString = function(value) {
      if (typeof value == "string") {
        if (value.indexOf("&") !== -1) {
          value = value.replace(/&/g, "&amp;");
        }
        if (value.indexOf("<") !== -1) {
          value = value.replace(/</g, "&lt;");
        }
        if (value.indexOf(">") !== -1) {
          value = value.replace(/>/g, "&gt;");
        }
        if (value.indexOf("\v") !== -1) {
          value = value.replace(/\v/g, "_x000B_");
        }
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          if (value[i].indexOf("&") !== -1) {
            value[i] = value[i].replace(/&/g, "&amp;");
          }
          if (value[i].indexOf("<") !== -1) {
            value[i] = value[i].replace(/</g, "&lt;");
          }
          if (value[i].indexOf(">") !== -1) {
            value[i] = value[i].replace(/>/g, "&gt;");
          }
          if (value[i].indexOf("\v") !== -1) {
            value[i] = value[i].replace(/\v/g, "_x000B_");
          }
        }
      }
      return value;
    };
    Workbook2.prototype.saveStyles = function() {
      this.updateCellXfsStyleXfs();
      var styleTemp = '<?xml version="1.0" encoding="utf-8"?><styleSheet xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      styleTemp += this.saveNumberFormats();
      styleTemp += this.saveFonts();
      styleTemp += this.saveFills();
      styleTemp += this.saveBorders();
      styleTemp += this.saveCellStyleXfs();
      styleTemp += this.saveCellXfs();
      styleTemp += this.saveCellStyles();
      this.addToArchive(styleTemp + "</styleSheet>", "xl/styles.xml");
    };
    Workbook2.prototype.updateCellXfsStyleXfs = function() {
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var style = _a[_i];
        var cellXfs = void 0;
        if (style.isGlobalStyle) {
          cellXfs = new CellStyleXfs();
          cellXfs.xfId = style.index - 1;
        } else {
          cellXfs = new CellXfs();
          cellXfs.xfId = 0;
        }
        var compareFontResult = this.isNewFont(style);
        if (!compareFontResult.result) {
          var font = new Font();
          font.b = style.bold;
          font.i = style.italic;
          font.name = style.fontName;
          font.sz = style.fontSize;
          font.u = style.underline;
          font.strike = style.strikeThrough;
          font.color = "FF" + style.fontColor.replace("#", "");
          this.mFonts.push(font);
          cellXfs.fontId = this.mFonts.length - 1;
        } else {
          cellXfs.fontId = compareFontResult.index;
        }
        if (style.backColor !== "none") {
          var backColor = "FF" + style.backColor.replace("#", "");
          if (this.mFills.has(backColor)) {
            var fillId = this.mFills.get(backColor);
            cellXfs.fillId = fillId;
          } else {
            var fillId = this.mFills.size + 2;
            this.mFills.set(backColor, fillId);
            cellXfs.fillId = fillId;
          }
        } else {
          cellXfs.fillId = 0;
        }
        if (!this.isNewBorder(style)) {
          this.mBorders.push(style.borders);
          cellXfs.borderId = this.mBorders.length;
        } else {
          cellXfs.borderId = 0;
        }
        if (style.numberFormat !== "GENERAL") {
          if (this.mNumFmt.has(style.numberFormat)) {
            var numFmt = this.mNumFmt.get(style.numberFormat);
            cellXfs.numFmtId = numFmt.numFmtId;
          } else {
            var id = this.mNumFmt.size + 164;
            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
            cellXfs.numFmtId = id;
          }
        } else {
          if (style.numberFormat === "GENERAL" && style.numFmtId === 14) {
            cellXfs.numFmtId = 14;
          } else {
            cellXfs.numFmtId = 0;
          }
        }
        if (!style.isGlobalStyle) {
          cellXfs.applyAlignment = 1;
        }
        cellXfs.alignment = new Alignment();
        cellXfs.alignment.indent = style.indent;
        cellXfs.alignment.horizontal = style.hAlign;
        cellXfs.alignment.vertical = style.vAlign;
        cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;
        cellXfs.alignment.rotation = style.rotation;
        if (style.isGlobalStyle) {
          this.mCellStyleXfs.push(cellXfs);
          this.mCellXfs.push(cellXfs);
        } else {
          this.mCellXfs.push(cellXfs);
        }
      }
    };
    Workbook2.prototype.saveNumberFormats = function() {
      if (this.mNumFmt.size >= 1) {
        var numFmtStyle_1 = '<numFmts count="' + this.mNumFmt.size + '">';
        this.mNumFmt.forEach(function(value, key) {
          numFmtStyle_1 += '<numFmt numFmtId="' + value.numFmtId + '" formatCode="' + value.formatCode.replace(/"/g, "&quot;") + '" />';
        });
        return numFmtStyle_1 += "</numFmts>";
      } else {
        return "";
      }
    };
    Workbook2.prototype.saveFonts = function() {
      var fontStyle = '<fonts count="' + this.mFonts.length + '">';
      if (this.mFonts.length >= 1) {
        for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
          var font = _a[_i];
          fontStyle += "<font>";
          if (font.b) {
            fontStyle += "<b />";
          }
          if (font.i) {
            fontStyle += "<i />";
          }
          if (font.u) {
            fontStyle += "<u />";
          }
          if (font.strike) {
            fontStyle += "<strike />";
          }
          fontStyle += '<sz val="' + font.sz + '" />';
          fontStyle += '<color rgb="' + font.color + '" />';
          fontStyle += '<name val="' + font.name + '" /></font>';
        }
      }
      return fontStyle + "</fonts>";
    };
    Workbook2.prototype.saveFills = function() {
      var fillsStyle = '<fills count="' + (this.mFills.size + 2) + '"><fill><patternFill patternType="none"></patternFill></fill><fill><patternFill patternType="gray125"></patternFill></fill>';
      if (this.mFills.size >= 1) {
        this.mFills.forEach(function(value, key) {
          fillsStyle += '<fill><patternFill patternType="solid"><fgColor rgb="' + key + '" /><bgColor rgb="FFFFFFFF" /></patternFill></fill>';
        });
      }
      return fillsStyle + "</fills>";
    };
    Workbook2.prototype.saveBorders = function() {
      var bordersStyle = '<borders count="' + (this.mBorders.length + 1) + '"><border><left /><right /><top /><bottom /><diagonal /></border>';
      if (this.mBorders.length >= 1) {
        for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {
          var borders = _a[_i];
          if (this.isAllBorder(borders)) {
            var color = borders.all.color.replace("#", "");
            var lineStyle = borders.all.lineStyle;
            bordersStyle += '<border><left style="' + lineStyle + '"><color rgb="FF' + color + '" /></left><right style="' + lineStyle + '"><color rgb="FF' + color + '" /></right><top style="' + lineStyle + '"><color rgb="FF' + color + '" /></top><bottom style="' + lineStyle + '"><color rgb="FF' + color + '" /></bottom></border>';
          } else {
            bordersStyle += '<border><left style="' + borders.left.lineStyle + '"><color rgb="FF' + borders.left.color.replace("#", "") + '" /></left><right style="' + borders.right.lineStyle + '"><color rgb="FF' + borders.right.color.replace("#", "") + '" /></right><top style="' + borders.top.lineStyle + '"><color rgb="FF' + borders.top.color.replace("#", "") + '" /></top><bottom style="' + borders.bottom.lineStyle + '"><color rgb="FF' + borders.bottom.color.replace("#", "") + '" /></bottom></border>';
          }
        }
      }
      return bordersStyle + "</borders>";
    };
    Workbook2.prototype.saveCellStyles = function() {
      var _this = this;
      var cellStyleString = '<cellStyles  count="' + this.cellStyles.size + '">';
      this.cellStyles.forEach(function(value, key) {
        cellStyleString += '<cellStyle name="' + key + '" xfId="' + _this.cellStyles.get(key).xfId + '"';
        if (key === "Normal") {
          cellStyleString += ' builtinId="0"';
        }
        cellStyleString += " />";
      });
      return cellStyleString += "</cellStyles>";
    };
    Workbook2.prototype.saveCellStyleXfs = function() {
      var cellXfsStyle = '<cellStyleXfs count="' + (this.mCellStyleXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" />';
      if (this.mCellStyleXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
          var cellStyleXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellStyleXf.numFmtId + '" fontId="' + cellStyleXf.fontId + '" fillId="' + cellStyleXf.fillId + '" borderId="' + cellStyleXf.borderId + '" ';
          if (cellStyleXf.alignment !== void 0) {
            cellXfsStyle += ">" + this.saveAlignment(cellStyleXf) + "</xf>";
          } else {
            cellXfsStyle += " />";
          }
        }
      }
      return cellXfsStyle + "</cellStyleXfs>";
    };
    Workbook2.prototype.saveCellXfs = function() {
      var cellXfsStyle = '<cellXfs count="' + (this.mCellXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" />';
      if (this.mCellXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {
          var cellXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellXf.numFmtId + '" fontId="' + cellXf.fontId + '" fillId="' + cellXf.fillId + '" borderId="' + cellXf.borderId + '" xfId="' + cellXf.xfId + '" ';
          if (cellXf.applyAlignment === 1) {
            cellXfsStyle += 'applyAlignment="1"';
          }
          cellXfsStyle += ">" + this.saveAlignment(cellXf) + "</xf>";
        }
      }
      return cellXfsStyle + "</cellXfs>";
    };
    Workbook2.prototype.saveAlignment = function(cellXf) {
      var alignString = "<alignment ";
      if (cellXf.alignment.horizontal !== void 0) {
        alignString += 'horizontal="' + cellXf.alignment.horizontal + '" ';
      }
      if (cellXf.alignment.indent !== void 0 && cellXf.alignment.indent !== 0) {
        alignString += 'indent="' + cellXf.alignment.indent + '" ';
      } else if (cellXf.alignment.rotation !== void 0 && cellXf.alignment.rotation !== 0) {
        alignString += 'textRotation="' + cellXf.alignment.rotation + '" ';
      }
      if (cellXf.alignment.vertical !== void 0) {
        alignString += 'vertical="' + cellXf.alignment.vertical + '" ';
      }
      alignString += 'wrapText="' + cellXf.alignment.wrapText + '" />';
      return alignString;
    };
    Workbook2.prototype.saveApp = function(builtInProperties) {
      var appString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"><Application>Essential XlsIO</Application>';
      if (builtInProperties !== void 0) {
        if (builtInProperties.manager !== void 0) {
          appString += "<Manager>" + builtInProperties.manager + "</Manager>";
        }
        if (builtInProperties.company !== void 0) {
          appString += "<Company>" + builtInProperties.company + "</Company>";
        }
      }
      this.addToArchive(appString + "</Properties>", "docProps/app.xml");
    };
    Workbook2.prototype.saveCore = function(builtInProperties) {
      var createdDate = /* @__PURE__ */ new Date();
      var coreString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><cp:coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">';
      if (this.builtInProperties !== void 0) {
        if (builtInProperties.author !== void 0) {
          coreString += "<dc:creator>" + builtInProperties.author + "</dc:creator>";
        }
        if (builtInProperties.subject !== void 0) {
          coreString += "<dc:subject>" + builtInProperties.subject + "</dc:subject>";
        }
        if (builtInProperties.category !== void 0) {
          coreString += "<cp:category>" + builtInProperties.category + "</cp:category>";
        }
        if (builtInProperties.comments !== void 0) {
          coreString += "<dc:description>" + builtInProperties.comments + "</dc:description>";
        }
        if (builtInProperties.title !== void 0) {
          coreString += "<dc:title>" + builtInProperties.title + "</dc:title>";
        }
        if (builtInProperties.tags !== void 0) {
          coreString += "<cp:keywords>" + builtInProperties.tags + "</cp:keywords>";
        }
        if (builtInProperties.status !== void 0) {
          coreString += "<cp:contentStatus>" + builtInProperties.status + "</cp:contentStatus>";
        }
        if (builtInProperties.createdDate !== void 0) {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + builtInProperties.createdDate.toISOString() + "</dcterms:created>";
        } else {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        }
        if (builtInProperties.modifiedDate !== void 0) {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + builtInProperties.modifiedDate.toISOString() + "</dcterms:modified>";
        } else {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
        }
      } else {
        coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
      }
      coreString += "</cp:coreProperties>";
      this.addToArchive(coreString, "docProps/core.xml");
    };
    Workbook2.prototype.saveTopLevelRelation = function() {
      var topRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml" /><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml" /><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml" /></Relationships>';
      this.addToArchive(topRelation, "_rels/.rels");
    };
    Workbook2.prototype.saveWorkbookRelation = function() {
      var wbRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = this.worksheets.length;
      var count = 0;
      for (var i = 0; i < length; i++, count++) {
        wbRelation += '<Relationship Id="rId' + (i + 1).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet' + (i + 1).toString() + '.xml" />';
      }
      wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />';
      if (this.sharedStringCount > 0) {
        wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />';
      }
      this.addToArchive(wbRelation + "</Relationships>", "xl/_rels/workbook.xml.rels");
    };
    Workbook2.prototype.saveContentType = function() {
      var contentTypeString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml" /><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" /><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />';
      var sheetsOverride = "";
      var length = this.worksheets.length;
      var drawingIndex = 0;
      for (var i = 0; i < length; i++) {
        sheetsOverride += '<Override PartName="/xl/worksheets/sheet' + (i + 1).toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />';
        if (this.worksheets[i].images != void 0 && this.worksheets[i].images.length > 0) {
          drawingIndex++;
          sheetsOverride += '<Override PartName="/xl/drawings/drawing' + drawingIndex.toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.drawing+xml" />';
        }
      }
      if (this.imageCount > 0)
        sheetsOverride += '<Default Extension="png" ContentType="image/png" />';
      if (this.sharedStringCount > 0) {
        contentTypeString += '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" />';
      }
      this.addToArchive(contentTypeString + sheetsOverride + "</Types>", "[Content_Types].xml");
    };
    Workbook2.prototype.addToArchive = function(xmlString, itemName) {
      if (typeof xmlString === "string") {
        var blob = new Blob([xmlString], { type: "text/plain" });
        var archiveItem = new ZipArchiveItem(blob, itemName);
        this.mArchive.addItem(archiveItem);
      } else {
        var archiveItem = new ZipArchiveItem(xmlString, itemName);
        this.mArchive.addItem(archiveItem);
      }
    };
    Workbook2.prototype.processMergeCells = function(cell, rowIndex, mergeCells) {
      if (cell.rowSpan !== 0 || cell.colSpan !== 0) {
        var mCell = new MergeCell();
        mCell.x = cell.index;
        mCell.width = cell.colSpan;
        mCell.y = rowIndex;
        mCell.height = cell.rowSpan;
        var startCell = this.getCellName(mCell.y, mCell.x);
        var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);
        mCell.ref = startCell + ":" + endCell;
        var mergedCell = mergeCells.add(mCell);
        var start = { x: mCell.x, y: mCell.y };
        var end = {
          x: cell.index + mCell.width,
          y: rowIndex + mCell.height
        };
        this.updatedMergedCellStyles(start, end, cell);
      }
      return mergeCells;
    };
    Workbook2.prototype.updatedMergedCellStyles = function(sCell, eCell, cell) {
      for (var x = sCell.x; x <= eCell.x; x++) {
        for (var y = sCell.y; y <= eCell.y; y++) {
          this.mergedCellsStyle.set(this.getCellName(y, x), { x, y, styleIndex: cell.styleIndex });
        }
      }
    };
    Workbook2.prototype.dateToTicks = function(year, month, day) {
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
      var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
      if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {
        var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;
        var y = year - 1;
        var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
        return n * ticksPerDay;
      }
      throw new Error("Not a valid date");
    };
    Workbook2.prototype.timeToTicks = function(hour, minute, second) {
      if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {
        var totalSeconds = hour * 3600 + minute * 60 + second;
        return totalSeconds * 1e4 * 1e3;
      }
      throw new Error("Not valid time");
    };
    Workbook2.prototype.isLeapYear = function(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    Workbook2.prototype.toOADate = function(date) {
      var ticks = 0;
      ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());
      if (ticks === 0) {
        return 0;
      }
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;
      var doubleDateOffset = daysTo1899 * ticksPerDay;
      var oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;
      if (ticks < oaDateMinAsTicks) {
        throw new Error("Arg_OleAutDateInvalid");
      }
      var millisPerDay = 1e3 * 60 * 60 * 24;
      return (ticks - doubleDateOffset) / 1e4 / millisPerDay;
    };
    return Workbook2;
  }()
);
var BuiltInProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function BuiltInProperties2() {
    }
    return BuiltInProperties2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/excel-export.js
var ExcelExport = (
  /** @class */
  function() {
    function ExcelExport2(parent) {
      this.parent = parent;
    }
    ExcelExport2.prototype.initializeExcelExport = function(excelExportOptions) {
      if (excelExportOptions === void 0) {
        excelExportOptions = {};
      }
      var exportColumns = this.getExportColumns(excelExportOptions);
      var exportName = excelExportOptions.fileName || "Schedule";
      var exportType = excelExportOptions.exportType || "xlsx";
      var isIncludeOccurrences = excelExportOptions.includeOccurrences || false;
      var separator;
      if (!isNullOrUndefined(excelExportOptions.separator) && excelExportOptions.separator !== ",") {
        separator = excelExportOptions.separator;
      }
      var eventCollection;
      if (excelExportOptions.customData) {
        eventCollection = !isIncludeOccurrences ? excelExportOptions.customData : this.parent.eventBase.getProcessedEvents(excelExportOptions.customData);
      } else {
        eventCollection = !isIncludeOccurrences ? this.parent.eventsData : this.parent.eventsProcessed;
      }
      this.processWorkbook(exportColumns, exportName, exportType, eventCollection, separator);
    };
    ExcelExport2.prototype.processWorkbook = function(fields, name, type, eventCollection, separator) {
      var _this = this;
      var columns = [];
      var rows = [];
      var columnHeader = [];
      fields.forEach(function(field, i) {
        columns.push({ index: i + 1, width: field.name === "Id" ? 50 : 150 });
      });
      var style = { fontSize: 12, borders: { color: "#E0E0E0" }, bold: true };
      fields.forEach(function(field, i) {
        columnHeader.push({ index: i + 1, value: field.text, style });
      });
      rows.push({ index: 1, cells: columnHeader });
      eventCollection.forEach(function(event2, i) {
        var columnData = [];
        fields.forEach(function(field, n) {
          var columnRule = { index: n + 1, value: event2[field.name] || "" };
          if (field.name === _this.parent.eventFields.startTime || field.name === _this.parent.eventFields.endTime) {
            var styleRule = { fontSize: 12, numberFormat: "m/d/yyyy h:mm a" };
            columnRule = extend({}, columnRule, { style: styleRule }, true);
          }
          columnData.push(columnRule);
        });
        rows.push({ index: i + 2, cells: columnData });
      });
      var workSheet = [{ columns, rows }];
      var book = new Workbook({ worksheets: workSheet }, type, this.parent.locale, void 0, separator);
      book.save(name + "." + type);
    };
    ExcelExport2.prototype.getExportColumns = function(exportOptions) {
      var _this = this;
      var exportColumns = exportOptions.fieldsInfo || [];
      if (exportColumns.length === 0) {
        var fields = exportOptions.fields || Object.keys(this.parent.eventFields).map(function(field) {
          return _this.parent.eventFields["" + field];
        });
        fields.forEach(function(field) {
          exportColumns.push({ name: field, text: field });
        });
      }
      return exportColumns;
    };
    ExcelExport2.prototype.getModuleName = function() {
      return "excelExport";
    };
    ExcelExport2.prototype.destroy = function() {
      this.parent = null;
    };
    return ExcelExport2;
  }()
);

// node_modules/@syncfusion/ej2-schedule/src/schedule/exports/print.js
var Print = (
  /** @class */
  function() {
    function Print2(parent) {
      this.parent = parent;
    }
    Print2.prototype.print = function(printOptions) {
      if (isNullOrUndefined(printOptions)) {
        this.printScheduler();
      } else {
        this.printSchedulerWithModel(printOptions);
      }
    };
    Print2.prototype.printScheduler = function() {
      var clone = this.parent.element.cloneNode(true);
      clone.id = this.parent.element.id + "_print";
      document.body.appendChild(clone);
      var className = this.parent.currentView === "MonthAgenda" ? ".e-appointment-wrap" : ".e-content-wrap";
      var scrollableEle = this.parent.element.querySelector(className);
      var links = [].slice.call(document.getElementsByTagName("head")[0].querySelectorAll("link, style"));
      var reference = "";
      for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
        var link = links_1[_i];
        reference += link.outerHTML;
      }
      var div = createElement("div");
      clone.style.width = this.parent.element.offsetWidth + "px";
      var elementWidth = Math.round(parseInt(clone.style.width, 10) / 100) * 100;
      div.appendChild(clone);
      var printWindow = window.open("", "print", "height=550,width=" + elementWidth + ",tabbar=no");
      printWindow.document.write("<!DOCTYPE html><html><head>" + reference + "</head><body>" + div.innerHTML + "<script>(function() { window.ready = true; })();<\/script></body></html>");
      printWindow.document.close();
      printWindow.focus();
      setTimeout(function() {
        if (printWindow.ready && scrollableEle) {
          scrollableEle.scrollLeft = scrollableEle.scrollLeft;
          scrollableEle.scrollTop = scrollableEle.scrollTop;
          var headerTimeCellsScroll = printWindow.document.querySelector(".e-date-header-wrap");
          if (headerTimeCellsScroll) {
            headerTimeCellsScroll.scrollLeft = scrollableEle.scrollLeft;
          }
          var timeCellsScroll = printWindow.document.querySelector(".e-time-cells-wrap");
          if (timeCellsScroll) {
            timeCellsScroll.scrollTop = scrollableEle.scrollTop;
          }
          var contentCellScroll = printWindow.document.querySelector(className);
          if (contentCellScroll) {
            contentCellScroll.scrollLeft = scrollableEle.scrollLeft;
            contentCellScroll.scrollTop = scrollableEle.scrollTop;
          }
          printWindow.print();
          printWindow.close();
        }
      }, 500);
    };
    Print2.prototype.printSchedulerWithModel = function(printOptions) {
      var element = createElement("div", { id: this.parent.element.id + "_print", className: "e-print-schedule" });
      document.body.appendChild(element);
      Schedule.Inject(Day, Week, WorkWeek, Month, Agenda, MonthAgenda, TimelineViews, TimelineMonth, Year, TimelineYear);
      this.printInstance = new Schedule(this.getPrintScheduleModel(printOptions));
      this.printInstance.isPrinting = true;
      this.printInstance.root = this.parent.root ? this.parent.root : this.parent;
      this.printInstance.appendTo(element);
      this.printInstance.on(print2, this.contentReady, this);
      this.printWindow = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth + ",tabbar=no");
      this.printWindow.moveTo(0, 0);
      this.printWindow.resizeTo(screen.availWidth, screen.availHeight);
    };
    Print2.prototype.getPrintScheduleModel = function(printOptions) {
      var printModel = {};
      var scheduleProps = [
        "agendaDaysCount",
        "calendarMode",
        "cssClass",
        "currentView",
        "dateFormat",
        "enableRtl",
        "endHour",
        "eventSettings",
        "firstDayOfWeek",
        "firstMonthOfYear",
        "group",
        "height",
        "locale",
        "maxDate",
        "minDate",
        "readonly",
        "resources",
        "rowAutoHeight",
        "selectedDate",
        "showHeaderBar",
        "showTimeIndicator",
        "showWeekNumber",
        "showWeekend",
        "startHour",
        "timeFormat",
        "timeScale",
        "timezone",
        "views",
        "width",
        "workDays",
        "workHours",
        "dateHeaderTemplate",
        "dateRangeTemplate",
        "cellHeaderTemplate",
        "dayHeaderTemplate",
        "monthHeaderTemplate",
        "cellTemplate",
        "resourceHeaderTemplate",
        "headerIndentTemplate",
        "actionBegin",
        "actionComplete",
        "actionFailure",
        "created",
        "dataBinding",
        "dataBound",
        "destroyed",
        "eventRendered",
        "moreEventsClick",
        "navigating",
        "popupOpen",
        "popupClose",
        "renderCell"
      ];
      var scheduleTemplates = [
        "cellHeaderTemplate",
        "dayHeaderTemplate",
        "monthHeaderTemplate",
        "cellTemplate",
        "dateHeaderTemplate",
        "dateRangeTemplate",
        "eventTemplate",
        "resourceHeaderTemplate",
        "headerIndentTemplate"
      ];
      var scheduleEvents = [
        "actionBegin",
        "actionComplete",
        "actionFailure",
        "created",
        "dataBinding",
        "dataBound",
        "destroyed",
        "eventRendered",
        "moreEventsClick",
        "navigating",
        "popupOpen",
        "popupClose",
        "renderCell"
      ];
      var eventSettings;
      var group;
      var timeScale;
      var views;
      for (var _i = 0, scheduleProps_1 = scheduleProps; _i < scheduleProps_1.length; _i++) {
        var key = scheduleProps_1[_i];
        switch (key) {
          case "eventSettings": {
            eventSettings = Object.assign({}, this.parent.eventSettings.properties);
            eventSettings.dataSource = this.parent.eventsData;
            var eventTemplate = !isNullOrUndefined(printOptions.eventSettings) && !isNullOrUndefined(printOptions.eventSettings.template) ? printOptions.eventSettings.template : eventSettings.template;
            eventSettings.template = !this.parent.isAngular && typeof eventTemplate === "function" ? null : eventTemplate;
            printModel.eventSettings = eventSettings;
            break;
          }
          case "group":
            group = isNullOrUndefined(printOptions.group) ? this.parent.group : printOptions.group;
            group.headerTooltipTemplate = null;
            printModel.group = group;
            break;
          case "timeScale":
            timeScale = isNullOrUndefined(printOptions.timeScale) ? this.parent.timeScale : printOptions.timeScale;
            if (!this.parent.isAngular) {
              timeScale.majorSlotTemplate = typeof timeScale.majorSlotTemplate === "function" ? null : timeScale.majorSlotTemplate;
              timeScale.minorSlotTemplate = typeof timeScale.minorSlotTemplate === "function" ? null : timeScale.minorSlotTemplate;
            }
            printModel.timeScale = timeScale;
            break;
          case "views":
            views = isNullOrUndefined(printOptions.views) ? this.parent.views : printOptions.views;
            if (!this.parent.isAngular && views && views.length > 0 && typeof views[0] === "object") {
              var _loop_1 = function(view2) {
                scheduleTemplates.forEach(function(x) {
                  if (!isNullOrUndefined(view2["" + x])) {
                    view2["" + x] = typeof view2["" + x] === "function" ? null : view2["" + x];
                  }
                });
              };
              for (var _a = 0, views_1 = views; _a < views_1.length; _a++) {
                var view = views_1[_a];
                _loop_1(view);
              }
            }
            printModel.views = views;
            break;
          default:
            if (scheduleTemplates.indexOf(key) > -1) {
              printModel["" + key] = isNullOrUndefined(printOptions["" + key]) ? !this.parent.isAngular && typeof this.parent["" + key] === "function" ? null : this.parent["" + key] : !this.parent.isAngular && typeof printOptions["" + key] === "function" ? null : printOptions["" + key];
              break;
            }
            if (scheduleEvents.indexOf(key) > -1) {
              printModel["" + key] = printOptions["" + key];
              break;
            }
            printModel["" + key] = isNullOrUndefined(printOptions["" + key]) ? this.parent["" + key] : printOptions["" + key];
            break;
        }
      }
      return printModel;
    };
    Print2.prototype.contentReady = function() {
      var _this = this;
      this.printWindow = print(this.printInstance.element, this.printWindow);
      this.printWindow.onbeforeunload = function() {
        _this.printInstance.off(print2, _this.contentReady);
        _this.printInstance.element.remove();
        _this.printInstance.destroy();
        _this.printInstance = null;
        _this.printWindow = null;
      };
    };
    Print2.prototype.getModuleName = function() {
      return "print";
    };
    Print2.prototype.destroy = function() {
      this.parent = null;
    };
    return Print2;
  }()
);

// node_modules/@syncfusion/ej2-angular-schedule/fesm2020/syncfusion-ej2-angular-schedule.mjs
var _c0 = ["dateHeaderTemplate"];
var _c1 = ["dateRangeTemplate"];
var _c2 = ["dayHeaderTemplate"];
var _c3 = ["cellHeaderTemplate"];
var _c4 = ["cellTemplate"];
var _c5 = ["eventTemplate"];
var _c6 = ["monthHeaderTemplate"];
var _c7 = ["resourceHeaderTemplate"];
var _c8 = ["headerIndentTemplate"];
var _c9 = ["timeScaleMinorSlotTemplate"];
var _c10 = ["timeScaleMajorSlotTemplate"];
var _c11 = ["groupHeaderTooltipTemplate"];
var _c12 = ["template"];
var _c13 = ["eventSettingsTooltipTemplate"];
var _c14 = ["eventSettingsTemplate"];
var _c15 = ["editorTemplate"];
var _c16 = ["editorHeaderTemplate"];
var _c17 = ["editorFooterTemplate"];
var _c18 = ["quickInfoTemplatesHeader"];
var _c19 = ["quickInfoTemplatesContent"];
var _c20 = ["quickInfoTemplatesFooter"];
var input$3 = ["allowVirtualScrolling", "cellHeaderTemplate", "cellTemplate", "dateFormat", "dateHeaderTemplate", "dateRangeTemplate", "dayHeaderTemplate", "displayDate", "displayName", "enableLazyLoading", "endHour", "eventTemplate", "firstDayOfWeek", "firstMonthOfYear", "group", "headerIndentTemplate", "headerRows", "interval", "isSelected", "maxEventsPerRow", "monthHeaderTemplate", "monthsCount", "numberOfWeeks", "option", "orientation", "readonly", "resourceHeaderTemplate", "showWeekNumber", "showWeekend", "startHour", "timeFormat", "timeScale", "workDays"];
var outputs$5 = [];
var ViewDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$5);
    this.directivePropList = input$3;
  }
};
ViewDirective.ɵfac = function ViewDirective_Factory(t) {
  return new (t || ViewDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ViewDirective.ɵdir = ɵɵdefineDirective({
  type: ViewDirective,
  selectors: [["e-view"]],
  contentQueries: function ViewDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c5, 5);
      ɵɵcontentQuery(dirIndex, _c6, 5);
      ɵɵcontentQuery(dirIndex, _c7, 5);
      ɵɵcontentQuery(dirIndex, _c8, 5);
      ɵɵcontentQuery(dirIndex, _c9, 5);
      ɵɵcontentQuery(dirIndex, _c10, 5);
      ɵɵcontentQuery(dirIndex, _c11, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateRangeTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dayHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.monthHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.resourceHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerIndentTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_minorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_majorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.group_headerTooltipTemplate = _t.first);
    }
  },
  inputs: {
    allowVirtualScrolling: "allowVirtualScrolling",
    cellHeaderTemplate: "cellHeaderTemplate",
    cellTemplate: "cellTemplate",
    dateFormat: "dateFormat",
    dateHeaderTemplate: "dateHeaderTemplate",
    dateRangeTemplate: "dateRangeTemplate",
    dayHeaderTemplate: "dayHeaderTemplate",
    displayDate: "displayDate",
    displayName: "displayName",
    enableLazyLoading: "enableLazyLoading",
    endHour: "endHour",
    eventTemplate: "eventTemplate",
    firstDayOfWeek: "firstDayOfWeek",
    firstMonthOfYear: "firstMonthOfYear",
    group: "group",
    headerIndentTemplate: "headerIndentTemplate",
    headerRows: "headerRows",
    interval: "interval",
    isSelected: "isSelected",
    maxEventsPerRow: "maxEventsPerRow",
    monthHeaderTemplate: "monthHeaderTemplate",
    monthsCount: "monthsCount",
    numberOfWeeks: "numberOfWeeks",
    option: "option",
    orientation: "orientation",
    readonly: "readonly",
    resourceHeaderTemplate: "resourceHeaderTemplate",
    showWeekNumber: "showWeekNumber",
    showWeekend: "showWeekend",
    startHour: "startHour",
    timeFormat: "timeFormat",
    timeScale: "timeScale",
    workDays: "workDays"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], ViewDirective.prototype, "dateHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "dateRangeTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "dayHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "cellHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "cellTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "eventTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "monthHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "resourceHeaderTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "headerIndentTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "timeScale_minorSlotTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "timeScale_majorSlotTemplate", void 0);
__decorate([Template()], ViewDirective.prototype, "group_headerTooltipTemplate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewDirective, [{
    type: Directive,
    args: [{
      selector: "e-views>e-view",
      inputs: input$3,
      outputs: outputs$5,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    dateHeaderTemplate: [{
      type: ContentChild,
      args: ["dateHeaderTemplate"]
    }],
    dateRangeTemplate: [{
      type: ContentChild,
      args: ["dateRangeTemplate"]
    }],
    dayHeaderTemplate: [{
      type: ContentChild,
      args: ["dayHeaderTemplate"]
    }],
    cellHeaderTemplate: [{
      type: ContentChild,
      args: ["cellHeaderTemplate"]
    }],
    cellTemplate: [{
      type: ContentChild,
      args: ["cellTemplate"]
    }],
    eventTemplate: [{
      type: ContentChild,
      args: ["eventTemplate"]
    }],
    monthHeaderTemplate: [{
      type: ContentChild,
      args: ["monthHeaderTemplate"]
    }],
    resourceHeaderTemplate: [{
      type: ContentChild,
      args: ["resourceHeaderTemplate"]
    }],
    headerIndentTemplate: [{
      type: ContentChild,
      args: ["headerIndentTemplate"]
    }],
    timeScale_minorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMinorSlotTemplate"]
    }],
    timeScale_majorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMajorSlotTemplate"]
    }],
    group_headerTooltipTemplate: [{
      type: ContentChild,
      args: ["groupHeaderTooltipTemplate"]
    }]
  });
})();
var ViewsDirective = class extends ArrayBase {
  constructor() {
    super("views");
  }
};
ViewsDirective.ɵfac = function ViewsDirective_Factory(t) {
  return new (t || ViewsDirective)();
};
ViewsDirective.ɵdir = ɵɵdefineDirective({
  type: ViewsDirective,
  selectors: [["e-views"]],
  contentQueries: function ViewsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ViewDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-views",
      queries: {
        children: new ContentChildren(ViewDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$2 = ["allowMultiple", "colorField", "cssClassField", "dataSource", "endHourField", "expandedField", "field", "groupIDField", "idField", "name", "query", "startHourField", "textField", "title", "workDaysField"];
var outputs$4 = [];
var ResourceDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$4);
    this.directivePropList = input$2;
  }
};
ResourceDirective.ɵfac = function ResourceDirective_Factory(t) {
  return new (t || ResourceDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ResourceDirective.ɵdir = ɵɵdefineDirective({
  type: ResourceDirective,
  selectors: [["e-resource"]],
  inputs: {
    allowMultiple: "allowMultiple",
    colorField: "colorField",
    cssClassField: "cssClassField",
    dataSource: "dataSource",
    endHourField: "endHourField",
    expandedField: "expandedField",
    field: "field",
    groupIDField: "groupIDField",
    idField: "idField",
    name: "name",
    query: "query",
    startHourField: "startHourField",
    textField: "textField",
    title: "title",
    workDaysField: "workDaysField"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResourceDirective, [{
    type: Directive,
    args: [{
      selector: "e-resources>e-resource",
      inputs: input$2,
      outputs: outputs$4,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, null);
})();
var ResourcesDirective = class extends ArrayBase {
  constructor() {
    super("resources");
  }
};
ResourcesDirective.ɵfac = function ResourcesDirective_Factory(t) {
  return new (t || ResourcesDirective)();
};
ResourcesDirective.ɵdir = ɵɵdefineDirective({
  type: ResourcesDirective,
  selectors: [["e-resources"]],
  contentQueries: function ResourcesDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ResourceDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResourcesDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-resources",
      queries: {
        children: new ContentChildren(ResourceDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$1 = ["option", "template"];
var outputs$3 = [];
var HeaderRowDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$3);
    this.directivePropList = input$1;
  }
};
HeaderRowDirective.ɵfac = function HeaderRowDirective_Factory(t) {
  return new (t || HeaderRowDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
HeaderRowDirective.ɵdir = ɵɵdefineDirective({
  type: HeaderRowDirective,
  selectors: [["e-header-row"]],
  contentQueries: function HeaderRowDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c12, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    option: "option",
    template: "template"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], HeaderRowDirective.prototype, "template", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HeaderRowDirective, [{
    type: Directive,
    args: [{
      selector: "e-header-rows>e-header-row",
      inputs: input$1,
      outputs: outputs$3,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }]
  });
})();
var HeaderRowsDirective = class extends ArrayBase {
  constructor() {
    super("headerrows");
  }
};
HeaderRowsDirective.ɵfac = function HeaderRowsDirective_Factory(t) {
  return new (t || HeaderRowsDirective)();
};
HeaderRowsDirective.ɵdir = ɵɵdefineDirective({
  type: HeaderRowsDirective,
  selectors: [["e-header-rows"]],
  contentQueries: function HeaderRowsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, HeaderRowDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HeaderRowsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-header-rows",
      queries: {
        children: new ContentChildren(HeaderRowDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input = ["align", "cssClass", "disabled", "htmlAttributes", "id", "name", "overflow", "prefixIcon", "showAlwaysInPopup", "showTextOn", "suffixIcon", "tabIndex", "template", "text", "tooltipText", "type", "visible", "width"];
var outputs$2 = ["click"];
var ToolbarItemDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$2);
    this.directivePropList = input;
  }
};
ToolbarItemDirective.ɵfac = function ToolbarItemDirective_Factory(t) {
  return new (t || ToolbarItemDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ToolbarItemDirective.ɵdir = ɵɵdefineDirective({
  type: ToolbarItemDirective,
  selectors: [["e-toolbaritem"]],
  contentQueries: function ToolbarItemDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c12, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    align: "align",
    cssClass: "cssClass",
    disabled: "disabled",
    htmlAttributes: "htmlAttributes",
    id: "id",
    name: "name",
    overflow: "overflow",
    prefixIcon: "prefixIcon",
    showAlwaysInPopup: "showAlwaysInPopup",
    showTextOn: "showTextOn",
    suffixIcon: "suffixIcon",
    tabIndex: "tabIndex",
    template: "template",
    text: "text",
    tooltipText: "tooltipText",
    type: "type",
    visible: "visible",
    width: "width"
  },
  outputs: {
    click: "click"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], ToolbarItemDirective.prototype, "template", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ToolbarItemDirective, [{
    type: Directive,
    args: [{
      selector: "e-toolbaritems>e-toolbaritem",
      inputs: input,
      outputs: outputs$2,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }]
  });
})();
var ToolbarItemsDirective = class extends ArrayBase {
  constructor() {
    super("toolbaritems");
  }
};
ToolbarItemsDirective.ɵfac = function ToolbarItemsDirective_Factory(t) {
  return new (t || ToolbarItemsDirective)();
};
ToolbarItemsDirective.ɵdir = ɵɵdefineDirective({
  type: ToolbarItemsDirective,
  selectors: [["e-toolbaritems"]],
  contentQueries: function ToolbarItemsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ToolbarItemDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ToolbarItemsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-schedule>e-toolbaritems",
      queries: {
        children: new ContentChildren(ToolbarItemDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var inputs$1 = ["agendaDaysCount", "allowDragAndDrop", "allowInline", "allowKeyboardInteraction", "allowMultiCellSelection", "allowMultiDrag", "allowMultiRowSelection", "allowResizing", "allowSwiping", "calendarMode", "cellHeaderTemplate", "cellTemplate", "cssClass", "currentView", "dateFormat", "dateHeaderTemplate", "dateRangeTemplate", "dayHeaderTemplate", "editorFooterTemplate", "editorHeaderTemplate", "editorTemplate", "enableAdaptiveUI", "enableAllDayScroll", "enableHtmlSanitizer", "enablePersistence", "enableRecurrenceValidation", "enableRtl", "endHour", "eventDragArea", "eventSettings", "firstDayOfWeek", "firstMonthOfYear", "group", "headerIndentTemplate", "headerRows", "height", "hideEmptyAgendaDays", "locale", "maxDate", "minDate", "monthHeaderTemplate", "monthsCount", "quickInfoOnSelectionEnd", "quickInfoTemplates", "readonly", "resourceHeaderTemplate", "resources", "rowAutoHeight", "selectedDate", "showHeaderBar", "showQuickInfo", "showTimeIndicator", "showWeekNumber", "showWeekend", "startHour", "timeFormat", "timeScale", "timezone", "timezoneDataSource", "toolbarItems", "views", "weekRule", "width", "workDays", "workHours"];
var outputs$1 = ["actionBegin", "actionComplete", "actionFailure", "cellClick", "cellDoubleClick", "created", "dataBinding", "dataBound", "destroyed", "drag", "dragStart", "dragStop", "eventClick", "eventDoubleClick", "eventRendered", "hover", "moreEventsClick", "navigating", "popupClose", "popupOpen", "renderCell", "resizeStart", "resizeStop", "resizing", "select", "virtualScrollStart", "virtualScrollStop", "currentViewChange", "selectedDateChange"];
var twoWays$1 = ["currentView", "selectedDate"];
var ScheduleComponent = class ScheduleComponent2 extends Schedule {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.tags = ["views", "resources", "headerRows", "toolbarItems"];
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    try {
      let mod = this.injector.get("ScheduleDay");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleWeek");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleWorkWeek");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleMonth");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleYear");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleAgenda");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleMonthAgenda");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineViews");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineMonth");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleTimelineYear");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleResize");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleDragAndDrop");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleExcelExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleICalendarExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("ScheduleICalendarImport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("SchedulePrint");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    this.registerEvents(outputs$1);
    this.addTwoWay.call(this, twoWays$1);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.tagObjects[0].instance = this.childViews;
    if (this.childResources) {
      this.tagObjects[1].instance = this.childResources;
    }
    if (this.childHeaderRows) {
      this.tagObjects[2].instance = this.childHeaderRows;
    }
    if (this.childToolbarItems) {
      this.tagObjects[3].instance = this.childToolbarItems;
    }
    this.context.ngAfterContentChecked(this);
  }
};
ScheduleComponent.ɵfac = function ScheduleComponent_Factory(t) {
  return new (t || ScheduleComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
ScheduleComponent.ɵcmp = ɵɵdefineComponent({
  type: ScheduleComponent,
  selectors: [["ejs-schedule"]],
  contentQueries: function ScheduleComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c13, 5);
      ɵɵcontentQuery(dirIndex, _c14, 5);
      ɵɵcontentQuery(dirIndex, _c15, 5);
      ɵɵcontentQuery(dirIndex, _c16, 5);
      ɵɵcontentQuery(dirIndex, _c17, 5);
      ɵɵcontentQuery(dirIndex, _c6, 5);
      ɵɵcontentQuery(dirIndex, _c9, 5);
      ɵɵcontentQuery(dirIndex, _c10, 5);
      ɵɵcontentQuery(dirIndex, _c7, 5);
      ɵɵcontentQuery(dirIndex, _c8, 5);
      ɵɵcontentQuery(dirIndex, _c18, 5);
      ɵɵcontentQuery(dirIndex, _c19, 5);
      ɵɵcontentQuery(dirIndex, _c20, 5);
      ɵɵcontentQuery(dirIndex, _c11, 5);
      ɵɵcontentQuery(dirIndex, ViewsDirective, 5);
      ɵɵcontentQuery(dirIndex, ResourcesDirective, 5);
      ɵɵcontentQuery(dirIndex, HeaderRowsDirective, 5);
      ɵɵcontentQuery(dirIndex, ToolbarItemsDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dateRangeTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dayHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cellHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventSettings_tooltipTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eventSettings_template = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editorFooterTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.monthHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_minorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.timeScale_majorSlotTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.resourceHeaderTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerIndentTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_header = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_content = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.quickInfoTemplates_footer = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.group_headerTooltipTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childViews = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childResources = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childHeaderRows = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childToolbarItems = _t.first);
    }
  },
  inputs: {
    agendaDaysCount: "agendaDaysCount",
    allowDragAndDrop: "allowDragAndDrop",
    allowInline: "allowInline",
    allowKeyboardInteraction: "allowKeyboardInteraction",
    allowMultiCellSelection: "allowMultiCellSelection",
    allowMultiDrag: "allowMultiDrag",
    allowMultiRowSelection: "allowMultiRowSelection",
    allowResizing: "allowResizing",
    allowSwiping: "allowSwiping",
    calendarMode: "calendarMode",
    cellHeaderTemplate: "cellHeaderTemplate",
    cellTemplate: "cellTemplate",
    cssClass: "cssClass",
    currentView: "currentView",
    dateFormat: "dateFormat",
    dateHeaderTemplate: "dateHeaderTemplate",
    dateRangeTemplate: "dateRangeTemplate",
    dayHeaderTemplate: "dayHeaderTemplate",
    editorFooterTemplate: "editorFooterTemplate",
    editorHeaderTemplate: "editorHeaderTemplate",
    editorTemplate: "editorTemplate",
    enableAdaptiveUI: "enableAdaptiveUI",
    enableAllDayScroll: "enableAllDayScroll",
    enableHtmlSanitizer: "enableHtmlSanitizer",
    enablePersistence: "enablePersistence",
    enableRecurrenceValidation: "enableRecurrenceValidation",
    enableRtl: "enableRtl",
    endHour: "endHour",
    eventDragArea: "eventDragArea",
    eventSettings: "eventSettings",
    firstDayOfWeek: "firstDayOfWeek",
    firstMonthOfYear: "firstMonthOfYear",
    group: "group",
    headerIndentTemplate: "headerIndentTemplate",
    headerRows: "headerRows",
    height: "height",
    hideEmptyAgendaDays: "hideEmptyAgendaDays",
    locale: "locale",
    maxDate: "maxDate",
    minDate: "minDate",
    monthHeaderTemplate: "monthHeaderTemplate",
    monthsCount: "monthsCount",
    quickInfoOnSelectionEnd: "quickInfoOnSelectionEnd",
    quickInfoTemplates: "quickInfoTemplates",
    readonly: "readonly",
    resourceHeaderTemplate: "resourceHeaderTemplate",
    resources: "resources",
    rowAutoHeight: "rowAutoHeight",
    selectedDate: "selectedDate",
    showHeaderBar: "showHeaderBar",
    showQuickInfo: "showQuickInfo",
    showTimeIndicator: "showTimeIndicator",
    showWeekNumber: "showWeekNumber",
    showWeekend: "showWeekend",
    startHour: "startHour",
    timeFormat: "timeFormat",
    timeScale: "timeScale",
    timezone: "timezone",
    timezoneDataSource: "timezoneDataSource",
    toolbarItems: "toolbarItems",
    views: "views",
    weekRule: "weekRule",
    width: "width",
    workDays: "workDays",
    workHours: "workHours"
  },
  outputs: {
    actionBegin: "actionBegin",
    actionComplete: "actionComplete",
    actionFailure: "actionFailure",
    cellClick: "cellClick",
    cellDoubleClick: "cellDoubleClick",
    created: "created",
    dataBinding: "dataBinding",
    dataBound: "dataBound",
    destroyed: "destroyed",
    drag: "drag",
    dragStart: "dragStart",
    dragStop: "dragStop",
    eventClick: "eventClick",
    eventDoubleClick: "eventDoubleClick",
    eventRendered: "eventRendered",
    hover: "hover",
    moreEventsClick: "moreEventsClick",
    navigating: "navigating",
    popupClose: "popupClose",
    popupOpen: "popupOpen",
    renderCell: "renderCell",
    resizeStart: "resizeStart",
    resizeStop: "resizeStop",
    resizing: "resizing",
    select: "select",
    virtualScrollStart: "virtualScrollStart",
    virtualScrollStop: "virtualScrollStop",
    currentViewChange: "currentViewChange",
    selectedDateChange: "selectedDateChange"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function ScheduleComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
__decorate([Template()], ScheduleComponent.prototype, "dateHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "dateRangeTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "dayHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "cellTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "cellHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "eventSettings_tooltipTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "eventSettings_template", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "editorFooterTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "monthHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "timeScale_minorSlotTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "timeScale_majorSlotTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "resourceHeaderTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "headerIndentTemplate", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_header", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_content", void 0);
__decorate([Template()], ScheduleComponent.prototype, "quickInfoTemplates_footer", void 0);
__decorate([Template()], ScheduleComponent.prototype, "group_headerTooltipTemplate", void 0);
ScheduleComponent = __decorate([ComponentMixins([ComponentBase])], ScheduleComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleComponent, [{
    type: Component,
    args: [{
      selector: "ejs-schedule",
      inputs: inputs$1,
      outputs: outputs$1,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {
        childViews: new ContentChild(ViewsDirective),
        childResources: new ContentChild(ResourcesDirective),
        childHeaderRows: new ContentChild(HeaderRowsDirective),
        childToolbarItems: new ContentChild(ToolbarItemsDirective)
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, {
    dateHeaderTemplate: [{
      type: ContentChild,
      args: ["dateHeaderTemplate"]
    }],
    dateRangeTemplate: [{
      type: ContentChild,
      args: ["dateRangeTemplate"]
    }],
    dayHeaderTemplate: [{
      type: ContentChild,
      args: ["dayHeaderTemplate"]
    }],
    cellTemplate: [{
      type: ContentChild,
      args: ["cellTemplate"]
    }],
    cellHeaderTemplate: [{
      type: ContentChild,
      args: ["cellHeaderTemplate"]
    }],
    eventSettings_tooltipTemplate: [{
      type: ContentChild,
      args: ["eventSettingsTooltipTemplate"]
    }],
    eventSettings_template: [{
      type: ContentChild,
      args: ["eventSettingsTemplate"]
    }],
    editorTemplate: [{
      type: ContentChild,
      args: ["editorTemplate"]
    }],
    editorHeaderTemplate: [{
      type: ContentChild,
      args: ["editorHeaderTemplate"]
    }],
    editorFooterTemplate: [{
      type: ContentChild,
      args: ["editorFooterTemplate"]
    }],
    monthHeaderTemplate: [{
      type: ContentChild,
      args: ["monthHeaderTemplate"]
    }],
    timeScale_minorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMinorSlotTemplate"]
    }],
    timeScale_majorSlotTemplate: [{
      type: ContentChild,
      args: ["timeScaleMajorSlotTemplate"]
    }],
    resourceHeaderTemplate: [{
      type: ContentChild,
      args: ["resourceHeaderTemplate"]
    }],
    headerIndentTemplate: [{
      type: ContentChild,
      args: ["headerIndentTemplate"]
    }],
    quickInfoTemplates_header: [{
      type: ContentChild,
      args: ["quickInfoTemplatesHeader"]
    }],
    quickInfoTemplates_content: [{
      type: ContentChild,
      args: ["quickInfoTemplatesContent"]
    }],
    quickInfoTemplates_footer: [{
      type: ContentChild,
      args: ["quickInfoTemplatesFooter"]
    }],
    group_headerTooltipTemplate: [{
      type: ContentChild,
      args: ["groupHeaderTooltipTemplate"]
    }]
  });
})();
var ScheduleModule = class {
};
ScheduleModule.ɵfac = function ScheduleModule_Factory(t) {
  return new (t || ScheduleModule)();
};
ScheduleModule.ɵmod = ɵɵdefineNgModule({
  type: ScheduleModule,
  declarations: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective],
  imports: [CommonModule],
  exports: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective]
});
ScheduleModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective],
      exports: [ScheduleComponent, ViewDirective, ViewsDirective, ResourceDirective, ResourcesDirective, HeaderRowDirective, HeaderRowsDirective, ToolbarItemDirective, ToolbarItemsDirective]
    }]
  }], null, null);
})();
var DayService = {
  provide: "ScheduleDay",
  useValue: Day
};
var WeekService = {
  provide: "ScheduleWeek",
  useValue: Week
};
var WorkWeekService = {
  provide: "ScheduleWorkWeek",
  useValue: WorkWeek
};
var MonthService = {
  provide: "ScheduleMonth",
  useValue: Month
};
var YearService = {
  provide: "ScheduleYear",
  useValue: Year
};
var AgendaService = {
  provide: "ScheduleAgenda",
  useValue: Agenda
};
var MonthAgendaService = {
  provide: "ScheduleMonthAgenda",
  useValue: MonthAgenda
};
var TimelineViewsService = {
  provide: "ScheduleTimelineViews",
  useValue: TimelineViews
};
var TimelineMonthService = {
  provide: "ScheduleTimelineMonth",
  useValue: TimelineMonth
};
var TimelineYearService = {
  provide: "ScheduleTimelineYear",
  useValue: TimelineYear
};
var ResizeService = {
  provide: "ScheduleResize",
  useValue: Resize
};
var DragAndDropService = {
  provide: "ScheduleDragAndDrop",
  useValue: DragAndDrop
};
var ExcelExportService = {
  provide: "ScheduleExcelExport",
  useValue: ExcelExport
};
var ICalendarExportService = {
  provide: "ScheduleICalendarExport",
  useValue: ICalendarExport
};
var ICalendarImportService = {
  provide: "ScheduleICalendarImport",
  useValue: ICalendarImport
};
var PrintService = {
  provide: "SchedulePrint",
  useValue: Print
};
var ScheduleAllModule = class {
};
ScheduleAllModule.ɵfac = function ScheduleAllModule_Factory(t) {
  return new (t || ScheduleAllModule)();
};
ScheduleAllModule.ɵmod = ɵɵdefineNgModule({
  type: ScheduleAllModule,
  imports: [CommonModule, ScheduleModule],
  exports: [ScheduleModule]
});
ScheduleAllModule.ɵinj = ɵɵdefineInjector({
  providers: [DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService, MonthAgendaService, TimelineViewsService, TimelineMonthService, TimelineYearService, ResizeService, DragAndDropService, ExcelExportService, ICalendarExportService, ICalendarImportService, PrintService],
  imports: [[CommonModule, ScheduleModule], ScheduleModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduleAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ScheduleModule],
      exports: [ScheduleModule],
      providers: [DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService, MonthAgendaService, TimelineViewsService, TimelineMonthService, TimelineYearService, ResizeService, DragAndDropService, ExcelExportService, ICalendarExportService, ICalendarImportService, PrintService]
    }]
  }], null, null);
})();
var inputs = ["calendarMode", "cssClass", "dateFormat", "enablePersistence", "enableRtl", "endTypes", "firstDayOfWeek", "frequencies", "locale", "maxDate", "minDate", "selectedType", "startDate", "value"];
var outputs = ["change"];
var twoWays = [];
var RecurrenceEditorComponent = class RecurrenceEditorComponent2 extends RecurrenceEditor {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    this.registerEvents(outputs);
    this.addTwoWay.call(this, twoWays);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.context.ngAfterContentChecked(this);
  }
};
RecurrenceEditorComponent.ɵfac = function RecurrenceEditorComponent_Factory(t) {
  return new (t || RecurrenceEditorComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
RecurrenceEditorComponent.ɵcmp = ɵɵdefineComponent({
  type: RecurrenceEditorComponent,
  selectors: [["ejs-recurrenceeditor"]],
  inputs: {
    calendarMode: "calendarMode",
    cssClass: "cssClass",
    dateFormat: "dateFormat",
    enablePersistence: "enablePersistence",
    enableRtl: "enableRtl",
    endTypes: "endTypes",
    firstDayOfWeek: "firstDayOfWeek",
    frequencies: "frequencies",
    locale: "locale",
    maxDate: "maxDate",
    minDate: "minDate",
    selectedType: "selectedType",
    startDate: "startDate",
    value: "value"
  },
  outputs: {
    change: "change"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function RecurrenceEditorComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
RecurrenceEditorComponent = __decorate([ComponentMixins([ComponentBase])], RecurrenceEditorComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorComponent, [{
    type: Component,
    args: [{
      selector: "ejs-recurrenceeditor",
      inputs,
      outputs,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {}
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, null);
})();
var RecurrenceEditorModule = class {
};
RecurrenceEditorModule.ɵfac = function RecurrenceEditorModule_Factory(t) {
  return new (t || RecurrenceEditorModule)();
};
RecurrenceEditorModule.ɵmod = ɵɵdefineNgModule({
  type: RecurrenceEditorModule,
  declarations: [RecurrenceEditorComponent],
  imports: [CommonModule],
  exports: [RecurrenceEditorComponent]
});
RecurrenceEditorModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [RecurrenceEditorComponent],
      exports: [RecurrenceEditorComponent]
    }]
  }], null, null);
})();
var RecurrenceEditorAllModule = class {
};
RecurrenceEditorAllModule.ɵfac = function RecurrenceEditorAllModule_Factory(t) {
  return new (t || RecurrenceEditorAllModule)();
};
RecurrenceEditorAllModule.ɵmod = ɵɵdefineNgModule({
  type: RecurrenceEditorAllModule,
  imports: [CommonModule, RecurrenceEditorModule],
  exports: [RecurrenceEditorModule]
});
RecurrenceEditorAllModule.ɵinj = ɵɵdefineInjector({
  providers: [],
  imports: [[CommonModule, RecurrenceEditorModule], RecurrenceEditorModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecurrenceEditorAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, RecurrenceEditorModule],
      exports: [RecurrenceEditorModule],
      providers: []
    }]
  }], null, null);
})();
export {
  Agenda,
  AgendaService,
  DEFAULT_WEEKS,
  Day,
  DayService,
  DragAndDrop,
  DragAndDropService,
  ExcelExport,
  ExcelExportService,
  Gregorian,
  HeaderRenderer,
  HeaderRowDirective,
  HeaderRowsDirective,
  ICalendarExport,
  ICalendarExportService,
  ICalendarImport,
  ICalendarImportService,
  Islamic2 as Islamic,
  MS_PER_DAY,
  MS_PER_MINUTE,
  Month,
  MonthAgenda,
  MonthAgendaService,
  MonthService,
  Print,
  PrintService,
  RecurrenceEditor,
  RecurrenceEditorAllModule,
  RecurrenceEditorComponent,
  RecurrenceEditorModule,
  Resize,
  ResizeService,
  ResourceDirective,
  ResourcesDirective,
  Schedule,
  ScheduleAllModule,
  ScheduleComponent,
  ScheduleModule,
  TimelineMonth,
  TimelineMonthService,
  TimelineViews,
  TimelineViewsService,
  TimelineYear,
  TimelineYearService,
  Timezone,
  ToolbarItemDirective,
  ToolbarItemsDirective,
  ViewBase,
  ViewDirective,
  ViewsDirective,
  WEEK_LENGTH,
  Week,
  WeekService,
  WorkWeek,
  WorkWeekService,
  Year,
  YearService,
  actionBegin,
  actionComplete,
  actionFailure,
  addDays,
  addMonths,
  addYears,
  capitalizeFirstWord,
  cellClick,
  cellDoubleClick,
  cellMouseDown,
  cellSelect,
  contentReady,
  dataBinding,
  dataBound,
  dataReady,
  documentClick,
  drag,
  dragStart,
  dragStop,
  eventClick,
  eventDoubleClick,
  eventRendered,
  eventsLoaded,
  extractObjectFromRule,
  findIndexInData,
  firstDateOfMonth,
  generate,
  generateSummary,
  getCalendarUtil,
  getDateCount,
  getDateFromRecurrenceDateString,
  getDateFromString,
  getDateInMs,
  getDaysCount,
  getElementHeight,
  getElementHeightFromClass,
  getElementTop,
  getElementWidth,
  getElementWidthFromClass,
  getMaxDays,
  getOuterHeight,
  getRecurrenceStringFromDate,
  getScrollBarWidth,
  getStartEndHours,
  getTranslateX,
  getTranslateY,
  getUniversalTime,
  getWeekFirstDate,
  getWeekLastDate,
  getWeekMiddleDate,
  getWeekNumber,
  hover,
  initialEnd,
  initialLoad,
  inlineClick,
  isDaylightSavingTime,
  isIPadDevice,
  isMobile,
  lastDateOfMonth,
  moreEventsClick,
  navigating,
  popupClose,
  popupOpen,
  print2 as print,
  removeChildren,
  renderCell,
  resetScrollbarWidth,
  resetTime,
  resizeStart,
  resizeStop,
  resizing,
  scroll,
  scrollUiUpdate,
  select2 as select,
  setTime,
  timezoneData,
  uiUpdate,
  virtualScroll,
  virtualScrollStart,
  virtualScrollStop
};
//# sourceMappingURL=@syncfusion_ej2-angular-schedule.js.map
